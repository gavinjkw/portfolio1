/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This file contains all the directives used by the @link IgxTimePickerComponent.
 * You should generally not use them directly.
 * @preferred
 */
import { Directive, ElementRef, HostBinding, HostListener, Inject, Input, TemplateRef } from '@angular/core';
import { IGX_TIME_PICKER_COMPONENT } from './time-picker.common';
import { InteractionMode } from '../core/enums';
/**
 * @hidden
 */
var IgxItemListDirective = /** @class */ (function () {
    function IgxItemListDirective(timePicker, elementRef) {
        this.timePicker = timePicker;
        this.elementRef = elementRef;
        this.tabindex = 0;
    }
    Object.defineProperty(IgxItemListDirective.prototype, "defaultCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxItemListDirective.prototype, "hourCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return this.type === 'hourList';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxItemListDirective.prototype, "minuteCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return this.type === 'minuteList';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxItemListDirective.prototype, "ampmCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return this.type === 'ampmList';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxItemListDirective.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        this.isActive = true;
    };
    /**
     * @return {?}
     */
    IgxItemListDirective.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this.isActive = false;
    };
    /**
     * @private
     * @return {?}
     */
    IgxItemListDirective.prototype.nextItem = /**
     * @private
     * @return {?}
     */
    function () {
        switch (this.type) {
            case 'hourList': {
                this.timePicker.nextHour();
                break;
            }
            case 'minuteList': {
                this.timePicker.nextMinute();
                break;
            }
            case 'ampmList': {
                this.timePicker.nextAmPm();
                break;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxItemListDirective.prototype.prevItem = /**
     * @private
     * @return {?}
     */
    function () {
        switch (this.type) {
            case 'hourList': {
                this.timePicker.prevHour();
                break;
            }
            case 'minuteList': {
                this.timePicker.prevMinute();
                break;
            }
            case 'ampmList': {
                this.timePicker.prevAmPm();
                break;
            }
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxItemListDirective.prototype.onKeydownArrowDown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.nextItem();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxItemListDirective.prototype.onKeydownArrowUp = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.prevItem();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxItemListDirective.prototype.onKeydownArrowRight = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        /** @type {?} */
        var listName = ((/** @type {?} */ (event.target))).className;
        if (listName.indexOf('hourList') !== -1) {
            this.timePicker.minuteList.nativeElement.focus();
        }
        else if (listName.indexOf('minuteList') !== -1 && this.timePicker._ampmItems.length !== 0) {
            this.timePicker.ampmList.nativeElement.focus();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxItemListDirective.prototype.onKeydownArrowLeft = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        /** @type {?} */
        var listName = ((/** @type {?} */ (event.target))).className;
        if (listName.indexOf('minuteList') !== -1) {
            this.timePicker.hourList.nativeElement.focus();
        }
        else if (listName.indexOf('ampmList') !== -1) {
            this.timePicker.minuteList.nativeElement.focus();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxItemListDirective.prototype.onKeydownEnter = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        if (this.timePicker.mode === InteractionMode.DropDown) {
            this.timePicker.hideOverlay();
            return;
        }
        this.timePicker.okButtonClick();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxItemListDirective.prototype.onKeydownEscape = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.timePicker.cancelButtonClick();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxItemListDirective.prototype.onHover = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.focus();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxItemListDirective.prototype.onScroll = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        if (event.deltaY > 0) {
            this.nextItem();
        }
        else if (event.deltaY < 0) {
            this.prevItem();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxItemListDirective.prototype.onPanMove = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.deltaY < 0) {
            this.nextItem();
        }
        else if (event.deltaY > 0) {
            this.prevItem();
        }
    };
    IgxItemListDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxItemList]'
                },] }
    ];
    /** @nocollapse */
    IgxItemListDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
        { type: ElementRef }
    ]; };
    IgxItemListDirective.propDecorators = {
        type: [{ type: Input, args: ['igxItemList',] }],
        tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        defaultCSS: [{ type: HostBinding, args: ['class.igx-time-picker__column',] }],
        hourCSS: [{ type: HostBinding, args: ['class.igx-time-picker__hourList',] }],
        minuteCSS: [{ type: HostBinding, args: ['class.igx-time-picker__minuteList',] }],
        ampmCSS: [{ type: HostBinding, args: ['class.igx-time-picker__ampmList',] }],
        onFocus: [{ type: HostListener, args: ['focus',] }],
        onBlur: [{ type: HostListener, args: ['blur',] }],
        onKeydownArrowDown: [{ type: HostListener, args: ['keydown.arrowdown', ['$event'],] }],
        onKeydownArrowUp: [{ type: HostListener, args: ['keydown.arrowup', ['$event'],] }],
        onKeydownArrowRight: [{ type: HostListener, args: ['keydown.arrowright', ['$event'],] }],
        onKeydownArrowLeft: [{ type: HostListener, args: ['keydown.arrowleft', ['$event'],] }],
        onKeydownEnter: [{ type: HostListener, args: ['keydown.enter', ['$event'],] }],
        onKeydownEscape: [{ type: HostListener, args: ['keydown.escape', ['$event'],] }],
        onHover: [{ type: HostListener, args: ['mouseover',] }],
        onScroll: [{ type: HostListener, args: ['wheel', ['$event'],] }],
        onPanMove: [{ type: HostListener, args: ['panmove', ['$event'],] }]
    };
    return IgxItemListDirective;
}());
export { IgxItemListDirective };
if (false) {
    /** @type {?} */
    IgxItemListDirective.prototype.type;
    /** @type {?} */
    IgxItemListDirective.prototype.isActive;
    /** @type {?} */
    IgxItemListDirective.prototype.tabindex;
    /** @type {?} */
    IgxItemListDirective.prototype.timePicker;
    /**
     * @type {?}
     * @private
     */
    IgxItemListDirective.prototype.elementRef;
}
/**
 * @hidden
 */
var IgxHourItemDirective = /** @class */ (function () {
    function IgxHourItemDirective(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    Object.defineProperty(IgxHourItemDirective.prototype, "defaultCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHourItemDirective.prototype, "selectedCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isSelectedHour;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHourItemDirective.prototype, "activeCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isSelectedHour && this.itemList.isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHourItemDirective.prototype, "isSelectedHour", {
        get: /**
         * @return {?}
         */
        function () {
            return this.timePicker.selectedHour === this.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} item
     * @return {?}
     */
    IgxHourItemDirective.prototype.onClick = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item !== '') {
            this.timePicker.scrollHourIntoView(item);
        }
    };
    IgxHourItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxHourItem]'
                },] }
    ];
    /** @nocollapse */
    IgxHourItemDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
        { type: IgxItemListDirective }
    ]; };
    IgxHourItemDirective.propDecorators = {
        value: [{ type: Input, args: ['igxHourItem',] }],
        defaultCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item',] }],
        selectedCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item--selected',] }],
        activeCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item--active',] }],
        onClick: [{ type: HostListener, args: ['click', ['value'],] }]
    };
    return IgxHourItemDirective;
}());
export { IgxHourItemDirective };
if (false) {
    /** @type {?} */
    IgxHourItemDirective.prototype.value;
    /** @type {?} */
    IgxHourItemDirective.prototype.timePicker;
    /**
     * @type {?}
     * @private
     */
    IgxHourItemDirective.prototype.itemList;
}
/**
 * @hidden
 */
var IgxMinuteItemDirective = /** @class */ (function () {
    function IgxMinuteItemDirective(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    Object.defineProperty(IgxMinuteItemDirective.prototype, "defaultCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMinuteItemDirective.prototype, "selectedCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isSelectedMinute;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMinuteItemDirective.prototype, "activeCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isSelectedMinute && this.itemList.isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMinuteItemDirective.prototype, "isSelectedMinute", {
        get: /**
         * @return {?}
         */
        function () {
            return this.timePicker.selectedMinute === this.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} item
     * @return {?}
     */
    IgxMinuteItemDirective.prototype.onClick = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item !== '') {
            this.timePicker.scrollMinuteIntoView(item);
        }
    };
    IgxMinuteItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxMinuteItem]'
                },] }
    ];
    /** @nocollapse */
    IgxMinuteItemDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
        { type: IgxItemListDirective }
    ]; };
    IgxMinuteItemDirective.propDecorators = {
        value: [{ type: Input, args: ['igxMinuteItem',] }],
        defaultCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item',] }],
        selectedCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item--selected',] }],
        activeCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item--active',] }],
        onClick: [{ type: HostListener, args: ['click', ['value'],] }]
    };
    return IgxMinuteItemDirective;
}());
export { IgxMinuteItemDirective };
if (false) {
    /** @type {?} */
    IgxMinuteItemDirective.prototype.value;
    /** @type {?} */
    IgxMinuteItemDirective.prototype.timePicker;
    /**
     * @type {?}
     * @private
     */
    IgxMinuteItemDirective.prototype.itemList;
}
/**
 * @hidden
 */
var IgxAmPmItemDirective = /** @class */ (function () {
    function IgxAmPmItemDirective(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    Object.defineProperty(IgxAmPmItemDirective.prototype, "defaultCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAmPmItemDirective.prototype, "selectedCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isSelectedAmPm;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAmPmItemDirective.prototype, "activeCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isSelectedAmPm && this.itemList.isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAmPmItemDirective.prototype, "isSelectedAmPm", {
        get: /**
         * @return {?}
         */
        function () {
            return this.timePicker.selectedAmPm === this.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} item
     * @return {?}
     */
    IgxAmPmItemDirective.prototype.onClick = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item !== '') {
            this.timePicker.scrollAmPmIntoView(item);
        }
    };
    IgxAmPmItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxAmPmItem]'
                },] }
    ];
    /** @nocollapse */
    IgxAmPmItemDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
        { type: IgxItemListDirective }
    ]; };
    IgxAmPmItemDirective.propDecorators = {
        value: [{ type: Input, args: ['igxAmPmItem',] }],
        defaultCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item',] }],
        selectedCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item--selected',] }],
        activeCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item--active',] }],
        onClick: [{ type: HostListener, args: ['click', ['value'],] }]
    };
    return IgxAmPmItemDirective;
}());
export { IgxAmPmItemDirective };
if (false) {
    /** @type {?} */
    IgxAmPmItemDirective.prototype.value;
    /** @type {?} */
    IgxAmPmItemDirective.prototype.timePicker;
    /**
     * @type {?}
     * @private
     */
    IgxAmPmItemDirective.prototype.itemList;
}
/**
 * This directive should be used to mark which ng-template will be used from IgxTimePicker when re-templating its input group.
 */
var IgxTimePickerTemplateDirective = /** @class */ (function () {
    function IgxTimePickerTemplateDirective(template) {
        this.template = template;
    }
    IgxTimePickerTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxTimePickerTemplate]'
                },] }
    ];
    /** @nocollapse */
    IgxTimePickerTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxTimePickerTemplateDirective;
}());
export { IgxTimePickerTemplateDirective };
if (false) {
    /** @type {?} */
    IgxTimePickerTemplateDirective.prototype.template;
}
//# sourceMappingURL=data:application/json;base64,