/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, HostBinding, HostListener, Input } from '@angular/core';
import { IgxTabsGroupComponent } from './tabs-group.component';
import { IgxTabsBase } from './tabs.common';
var IgxTabItemComponent = /** @class */ (function () {
    function IgxTabItemComponent(_tabs, _element) {
        this._tabs = _tabs;
        this._element = _element;
        this._changesCount = 0; // changes and updates accordingly applied to the tab.
        /**
         * @hidden
         */
        this.role = 'tab';
        this._nativeTabItem = _element;
    }
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxTabItemComponent.prototype.onClick = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.select();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxTabItemComponent.prototype.onResize = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isSelected) {
            this._tabs.selectedIndicator.nativeElement.style.width = this.nativeTabItem.nativeElement.offsetWidth + "px";
            this._tabs.selectedIndicator.nativeElement.style.transform = "translate(" + this.nativeTabItem.nativeElement.offsetLeft + "px)";
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxTabItemComponent.prototype.onKeydownArrowRight = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onKeyDown(false);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxTabItemComponent.prototype.onKeydownArrowLeft = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onKeyDown(true);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxTabItemComponent.prototype.onKeydownHome = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.onKeyDown(false, 0);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxTabItemComponent.prototype.onKeydownEnd = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.onKeyDown(false, this._tabs.tabs.toArray().length - 1);
    };
    Object.defineProperty(IgxTabItemComponent.prototype, "changesCount", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._changesCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "nativeTabItem", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._nativeTabItem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "disabled", {
        /**
        * 	Gets whether the tab is disabled.
        * ```
        * const disabledItem = this.myTabComponent.tabs.first.disabled;
        * ```
        */
        get: /**
         * 	Gets whether the tab is disabled.
         * ```
         * const disabledItem = this.myTabComponent.tabs.first.disabled;
         * ```
         * @return {?}
         */
        function () {
            /** @type {?} */
            var group = this.relatedGroup;
            if (group) {
                return group.disabled;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "isSelected", {
        /**
         * Gets whether the tab is selected.
         * ```typescript
         * const selectedItem = this.myTabComponent.tabs.first.isSelected;
         * ```
         */
        get: /**
         * Gets whether the tab is selected.
         * ```typescript
         * const selectedItem = this.myTabComponent.tabs.first.isSelected;
         * ```
         * @return {?}
         */
        function () {
            /** @type {?} */
            var group = this.relatedGroup;
            if (group) {
                return group.isSelected;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "index", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._tabs.tabs.toArray().indexOf(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?=} focusDelay
     * @return {?}
     */
    IgxTabItemComponent.prototype.select = /**
     * @hidden
     * @param {?=} focusDelay
     * @return {?}
     */
    function (focusDelay) {
        if (focusDelay === void 0) { focusDelay = 200; }
        this.relatedGroup.select(focusDelay);
    };
    /**
     * @private
     * @param {?} isLeftArrow
     * @param {?=} index
     * @return {?}
     */
    IgxTabItemComponent.prototype.onKeyDown = /**
     * @private
     * @param {?} isLeftArrow
     * @param {?=} index
     * @return {?}
     */
    function (isLeftArrow, index) {
        if (index === void 0) { index = null; }
        /** @type {?} */
        var tabsArray = this._tabs.tabs.toArray();
        if (index === null) {
            index = (isLeftArrow)
                ? (this._tabs.selectedIndex === 0) ? tabsArray.length - 1 : this._tabs.selectedIndex - 1
                : (this._tabs.selectedIndex === tabsArray.length - 1) ? 0 : this._tabs.selectedIndex + 1;
        }
        /** @type {?} */
        var tab = tabsArray[index];
        tab.select(200);
    };
    IgxTabItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-tab-item',
                    template: "<ng-template #defaultTabTemplate>\n    <div *ngIf=\"relatedGroup.icon\" class=\"igx-tabs__header-menu-item-icon\">\n        <igx-icon fontSet=\"material\">{{relatedGroup.icon}}</igx-icon>\n        <igx-badge [value]=\"changesCount\" [hidden]=\"changesCount === 0\"></igx-badge>\n    </div>\n    <div *ngIf=\"relatedGroup.label\" ngClass=\"igx-tabs__item-label\">{{relatedGroup.label}}</div>\n</ng-template>\n<ng-container\n    *ngTemplateOutlet=\"relatedGroup.customTabTemplate ? relatedGroup.customTabTemplate : defaultTabTemplate; context: { $implicit: relatedGroup }\">\n</ng-container>"
                }] }
    ];
    /** @nocollapse */
    IgxTabItemComponent.ctorParameters = function () { return [
        { type: IgxTabsBase },
        { type: ElementRef }
    ]; };
    IgxTabItemComponent.propDecorators = {
        relatedGroup: [{ type: Input }],
        role: [{ type: HostBinding, args: ['attr.role',] }],
        tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
        onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }],
        onKeydownArrowRight: [{ type: HostListener, args: ['keydown.arrowright', ['$event'],] }],
        onKeydownArrowLeft: [{ type: HostListener, args: ['keydown.arrowleft', ['$event'],] }],
        onKeydownHome: [{ type: HostListener, args: ['keydown.home', ['$event'],] }],
        onKeydownEnd: [{ type: HostListener, args: ['keydown.end', ['$event'],] }]
    };
    return IgxTabItemComponent;
}());
export { IgxTabItemComponent };
if (false) {
    /**
     * Gets the group associated with the tab.
     * ```html
     * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;
     * ```
     * @type {?}
     */
    IgxTabItemComponent.prototype.relatedGroup;
    /**
     * @type {?}
     * @private
     */
    IgxTabItemComponent.prototype._nativeTabItem;
    /**
     * @type {?}
     * @private
     */
    IgxTabItemComponent.prototype._changesCount;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabItemComponent.prototype.role;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabItemComponent.prototype.tabindex;
    /**
     * @type {?}
     * @private
     */
    IgxTabItemComponent.prototype._tabs;
    /**
     * @type {?}
     * @private
     */
    IgxTabItemComponent.prototype._element;
}
//# sourceMappingURL=data:application/json;base64,