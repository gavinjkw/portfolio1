/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { TransactionType } from './transaction';
import { IgxBaseTransactionService } from './base-transaction';
import { EventEmitter, Injectable } from '@angular/core';
import { isObject, mergeObjects, cloneValue } from '../../core/utils';
/**
 * @template T, S
 */
var IgxTransactionService = /** @class */ (function (_super) {
    tslib_1.__extends(IgxTransactionService, _super);
    function IgxTransactionService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._transactions = [];
        _this._redoStack = [];
        _this._undoStack = [];
        _this._states = new Map();
        /**
         * \@inheritdoc
         */
        _this.onStateUpdate = new EventEmitter();
        return _this;
    }
    Object.defineProperty(IgxTransactionService.prototype, "canUndo", {
        /**
         * @inheritdoc
         */
        get: /**
         * \@inheritdoc
         * @return {?}
         */
        function () {
            return this._undoStack.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTransactionService.prototype, "canRedo", {
        /**
         * @inheritdoc
         */
        get: /**
         * \@inheritdoc
         * @return {?}
         */
        function () {
            return this._redoStack.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritdoc
     */
    /**
     * \@inheritdoc
     * @param {?} transaction
     * @param {?=} recordRef
     * @return {?}
     */
    IgxTransactionService.prototype.add = /**
     * \@inheritdoc
     * @param {?} transaction
     * @param {?=} recordRef
     * @return {?}
     */
    function (transaction, recordRef) {
        /** @type {?} */
        var states = this._isPending ? this._pendingStates : this._states;
        this.verifyAddedTransaction(states, transaction, recordRef);
        this.addTransaction(transaction, states, recordRef);
    };
    /**
     * @protected
     * @param {?} transaction
     * @param {?} states
     * @param {?=} recordRef
     * @return {?}
     */
    IgxTransactionService.prototype.addTransaction = /**
     * @protected
     * @param {?} transaction
     * @param {?} states
     * @param {?=} recordRef
     * @return {?}
     */
    function (transaction, states, recordRef) {
        this.updateState(states, transaction, recordRef);
        /** @type {?} */
        var transactions = this._isPending ? this._pendingTransactions : this._transactions;
        transactions.push(transaction);
        if (!this._isPending) {
            this._undoStack.push([{ transaction: transaction, recordRef: recordRef }]);
            this._redoStack = [];
            this.onStateUpdate.emit();
        }
    };
    /**
     * @inheritdoc
     */
    /**
     * \@inheritdoc
     * @param {?=} id
     * @return {?}
     */
    IgxTransactionService.prototype.getTransactionLog = /**
     * \@inheritdoc
     * @param {?=} id
     * @return {?}
     */
    function (id) {
        if (id) {
            return this._transactions.filter(function (t) { return t.id === id; });
        }
        return tslib_1.__spread(this._transactions);
    };
    /**
     * @inheritdoc
     */
    /**
     * \@inheritdoc
     * @param {?} mergeChanges
     * @return {?}
     */
    IgxTransactionService.prototype.getAggregatedChanges = /**
     * \@inheritdoc
     * @param {?} mergeChanges
     * @return {?}
     */
    function (mergeChanges) {
        var _this = this;
        /** @type {?} */
        var result = [];
        this._states.forEach(function (state, key) {
            /** @type {?} */
            var value = mergeChanges ? _this.mergeValues(state.recordRef, state.value) : state.value;
            result.push((/** @type {?} */ ({ id: key, newValue: value, type: state.type })));
        });
        return result;
    };
    /**
     * @inheritdoc
     */
    /**
     * \@inheritdoc
     * @param {?} id
     * @return {?}
     */
    IgxTransactionService.prototype.getState = /**
     * \@inheritdoc
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this._states.get(id);
    };
    Object.defineProperty(IgxTransactionService.prototype, "enabled", {
        /**
         * @inheritdoc
         */
        get: /**
         * \@inheritdoc
         * @return {?}
         */
        function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritdoc
     */
    /**
     * \@inheritdoc
     * @param {?} id
     * @param {?} mergeChanges
     * @return {?}
     */
    IgxTransactionService.prototype.getAggregatedValue = /**
     * \@inheritdoc
     * @param {?} id
     * @param {?} mergeChanges
     * @return {?}
     */
    function (id, mergeChanges) {
        /** @type {?} */
        var state = this._states.get(id);
        /** @type {?} */
        var pendingState = _super.prototype.getState.call(this, id);
        //  if there is no state and there is no pending state return null
        if (!state && !pendingState) {
            return null;
        }
        /** @type {?} */
        var pendingChange = _super.prototype.getAggregatedValue.call(this, id, false);
        /** @type {?} */
        var change = state && state.value;
        /** @type {?} */
        var aggregatedValue = this.mergeValues(change, pendingChange);
        if (mergeChanges) {
            /** @type {?} */
            var originalValue = state ? state.recordRef : pendingState.recordRef;
            aggregatedValue = this.mergeValues(originalValue, aggregatedValue);
        }
        return aggregatedValue;
    };
    /**
     * @inheritdoc
     */
    /**
     * \@inheritdoc
     * @param {?} commit
     * @return {?}
     */
    IgxTransactionService.prototype.endPending = /**
     * \@inheritdoc
     * @param {?} commit
     * @return {?}
     */
    function (commit) {
        var e_1, _a;
        this._isPending = false;
        if (commit) {
            /** @type {?} */
            var actions = [];
            try {
                // don't use addTransaction due to custom undo handling
                for (var _b = tslib_1.__values(this._pendingTransactions), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var transaction = _c.value;
                    /** @type {?} */
                    var pendingState = this._pendingStates.get(transaction.id);
                    this._transactions.push(transaction);
                    this.updateState(this._states, transaction, pendingState.recordRef);
                    actions.push({ transaction: transaction, recordRef: pendingState.recordRef });
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this._undoStack.push(actions);
            this._redoStack = [];
            this.onStateUpdate.emit();
        }
        _super.prototype.endPending.call(this, commit);
    };
    /**
     * @inheritdoc
     */
    /**
     * \@inheritdoc
     * @param {?} data
     * @return {?}
     */
    IgxTransactionService.prototype.commit = /**
     * \@inheritdoc
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this._states.forEach(function (s) {
            /** @type {?} */
            var index = data.findIndex(function (i) { return JSON.stringify(i) === JSON.stringify(s.recordRef); });
            switch (s.type) {
                case TransactionType.ADD:
                    data.push(s.value);
                    break;
                case TransactionType.DELETE:
                    if (0 <= index && index < data.length) {
                        data.splice(index, 1);
                    }
                    break;
                case TransactionType.UPDATE:
                    if (0 <= index && index < data.length) {
                        data[index] = _this.updateValue(s);
                    }
                    break;
            }
        });
        this.clear();
    };
    /**
     * @inheritdoc
     */
    /**
     * \@inheritdoc
     * @return {?}
     */
    IgxTransactionService.prototype.clear = /**
     * \@inheritdoc
     * @return {?}
     */
    function () {
        this._transactions = [];
        this._states.clear();
        this._redoStack = [];
        this._undoStack = [];
        this.onStateUpdate.emit();
    };
    /**
     * @inheritdoc
     */
    /**
     * \@inheritdoc
     * @return {?}
     */
    IgxTransactionService.prototype.undo = /**
     * \@inheritdoc
     * @return {?}
     */
    function () {
        var e_2, _a, e_3, _b;
        if (this._undoStack.length <= 0) {
            return;
        }
        /** @type {?} */
        var lastActions = this._undoStack.pop();
        this._transactions.splice(this._transactions.length - lastActions.length);
        this._redoStack.push(lastActions);
        this._states.clear();
        try {
            for (var _c = tslib_1.__values(this._undoStack), _d = _c.next(); !_d.done; _d = _c.next()) {
                var currentActions = _d.value;
                try {
                    for (var currentActions_1 = tslib_1.__values(currentActions), currentActions_1_1 = currentActions_1.next(); !currentActions_1_1.done; currentActions_1_1 = currentActions_1.next()) {
                        var transaction = currentActions_1_1.value;
                        this.updateState(this._states, transaction.transaction, transaction.recordRef);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (currentActions_1_1 && !currentActions_1_1.done && (_b = currentActions_1.return)) _b.call(currentActions_1);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this.onStateUpdate.emit();
    };
    /**
     * @inheritdoc
     */
    /**
     * \@inheritdoc
     * @return {?}
     */
    IgxTransactionService.prototype.redo = /**
     * \@inheritdoc
     * @return {?}
     */
    function () {
        var e_4, _a;
        if (this._redoStack.length > 0) {
            /** @type {?} */
            var actions = void 0;
            actions = this._redoStack.pop();
            try {
                for (var actions_1 = tslib_1.__values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {
                    var action = actions_1_1.value;
                    this.updateState(this._states, action.transaction, action.recordRef);
                    this._transactions.push(action.transaction);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
            this._undoStack.push(actions);
            this.onStateUpdate.emit();
        }
    };
    /**
     * Verifies if the passed transaction is correct. If not throws an exception.
     * @param transaction Transaction to be verified
     */
    /**
     * Verifies if the passed transaction is correct. If not throws an exception.
     * @protected
     * @param {?} states
     * @param {?} transaction Transaction to be verified
     * @param {?=} recordRef
     * @return {?}
     */
    IgxTransactionService.prototype.verifyAddedTransaction = /**
     * Verifies if the passed transaction is correct. If not throws an exception.
     * @protected
     * @param {?} states
     * @param {?} transaction Transaction to be verified
     * @param {?=} recordRef
     * @return {?}
     */
    function (states, transaction, recordRef) {
        /** @type {?} */
        var state = states.get(transaction.id);
        switch (transaction.type) {
            case TransactionType.ADD:
                if (state) {
                    //  cannot add same item twice
                    throw new Error("Cannot add this transaction. Transaction with id: " + transaction.id + " has been already added.");
                }
                break;
            case TransactionType.DELETE:
            case TransactionType.UPDATE:
                if (state && state.type === TransactionType.DELETE) {
                    //  cannot delete or update deleted items
                    throw new Error("Cannot add this transaction. Transaction with id: " + transaction.id + " has been already deleted.");
                }
                if (!state && !recordRef && !this._isPending) {
                    //  cannot initially add transaction or delete item with no recordRef
                    throw new Error("Cannot add this transaction. This is first transaction of type " + transaction.type + " " +
                        ("for id " + transaction.id + ". For first transaction of this type recordRef is mandatory."));
                }
                break;
        }
    };
    /**
     * Updates the provided states collection according to passed transaction and recordRef
     * @param states States collection to apply the update to
     * @param transaction Transaction to apply to the current state
     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied
     */
    /**
     * Updates the provided states collection according to passed transaction and recordRef
     * @protected
     * @param {?} states States collection to apply the update to
     * @param {?} transaction Transaction to apply to the current state
     * @param {?=} recordRef Reference to the value of the record in data source, if any, where transaction should be applied
     * @return {?}
     */
    IgxTransactionService.prototype.updateState = /**
     * Updates the provided states collection according to passed transaction and recordRef
     * @protected
     * @param {?} states States collection to apply the update to
     * @param {?} transaction Transaction to apply to the current state
     * @param {?=} recordRef Reference to the value of the record in data source, if any, where transaction should be applied
     * @return {?}
     */
    function (states, transaction, recordRef) {
        /** @type {?} */
        var state = states.get(transaction.id);
        //  if TransactionType is ADD simply add transaction to states;
        //  if TransactionType is DELETE:
        //    - if there is state with this id of type ADD remove it from the states;
        //    - if there is state with this id of type UPDATE change its type to DELETE;
        //    - if there is no state with this id add transaction to states;
        //  if TransactionType is UPDATE:
        //    - if there is state with this id of type ADD merge new value and state recordRef into state new value
        //    - if there is state with this id of type UPDATE merge new value into state new value
        //    - if there is state with this id and state type is DELETE change its type to UPDATE
        //    - if there is no state with this id add transaction to states;
        if (state) {
            switch (transaction.type) {
                case TransactionType.DELETE:
                    if (state.type === TransactionType.ADD) {
                        states.delete(transaction.id);
                    }
                    else if (state.type === TransactionType.UPDATE) {
                        state.value = transaction.newValue;
                        state.type = TransactionType.DELETE;
                    }
                    break;
                case TransactionType.UPDATE:
                    if (isObject(state.value)) {
                        if (state.type === TransactionType.ADD) {
                            state.value = this.mergeValues(state.value, transaction.newValue);
                        }
                        if (state.type === TransactionType.UPDATE) {
                            mergeObjects(state.value, transaction.newValue);
                        }
                    }
                    else {
                        state.value = transaction.newValue;
                    }
            }
        }
        else {
            state = (/** @type {?} */ ({ value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type }));
            states.set(transaction.id, state);
        }
        //  should not clean pending state. This will happen automatically on endPending call
        if (!this._isPending) {
            this.cleanState(transaction.id, states);
        }
    };
    /**
     * Compares the state with recordRef and clears all duplicated values. If any state ends as
     * empty object removes it from states.
     * @param state State to clean
     */
    /**
     * Compares the state with recordRef and clears all duplicated values. If any state ends as
     * empty object removes it from states.
     * @protected
     * @param {?} id
     * @param {?} states
     * @return {?}
     */
    IgxTransactionService.prototype.cleanState = /**
     * Compares the state with recordRef and clears all duplicated values. If any state ends as
     * empty object removes it from states.
     * @protected
     * @param {?} id
     * @param {?} states
     * @return {?}
     */
    function (id, states) {
        var e_5, _a;
        /** @type {?} */
        var state = states.get(id);
        //  do nothing if
        //  there is no state, or
        //  there is no state value (e.g. DELETED transaction), or
        //  there is no recordRef (e.g. ADDED transaction)
        if (state && state.value && state.recordRef) {
            //  if state's value is object compare each key with the ones in recordRef
            //  if values in any key are the same delete it from state's value
            //  if state's value is not object, simply compare with recordRef and remove
            //  the state if they are equal
            if (isObject(state.recordRef)) {
                try {
                    for (var _b = tslib_1.__values(Object.keys(state.value)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var key = _c.value;
                        if (JSON.stringify(state.recordRef[key]) === JSON.stringify(state.value[key])) {
                            delete state.value[key];
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
                //  if state's value is empty remove the state from the states, only if state is not DELETE type
                if (state.type !== TransactionType.DELETE && Object.keys(state.value).length === 0) {
                    states.delete(id);
                }
            }
            else {
                if (state.recordRef === state.value) {
                    states.delete(id);
                }
            }
        }
    };
    IgxTransactionService.decorators = [
        { type: Injectable }
    ];
    return IgxTransactionService;
}(IgxBaseTransactionService));
export { IgxTransactionService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    IgxTransactionService.prototype._transactions;
    /**
     * @type {?}
     * @protected
     */
    IgxTransactionService.prototype._redoStack;
    /**
     * @type {?}
     * @protected
     */
    IgxTransactionService.prototype._undoStack;
    /**
     * @type {?}
     * @protected
     */
    IgxTransactionService.prototype._states;
    /**
     * \@inheritdoc
     * @type {?}
     */
    IgxTransactionService.prototype.onStateUpdate;
}
//# sourceMappingURL=data:application/json;base64,