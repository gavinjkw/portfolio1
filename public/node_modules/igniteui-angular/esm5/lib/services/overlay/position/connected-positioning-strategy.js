/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { getTargetRect, cloneInstance, HorizontalAlignment, VerticalAlignment } from './../utilities';
import { scaleInVerTop, scaleOutVerTop } from '../../../animations/main';
/**
 * Positions the element based on the directions and start point passed in trough PositionSettings.
 * It is possible to either pass a start point or an HTMLElement as a positioning base.
 */
var /**
 * Positions the element based on the directions and start point passed in trough PositionSettings.
 * It is possible to either pass a start point or an HTMLElement as a positioning base.
 */
ConnectedPositioningStrategy = /** @class */ (function () {
    function ConnectedPositioningStrategy(settings) {
        this._defaultSettings = {
            // default Point(0, 0) in getPointFromPositionsSettings
            target: null,
            horizontalDirection: HorizontalAlignment.Right,
            verticalDirection: VerticalAlignment.Bottom,
            horizontalStartPoint: HorizontalAlignment.Left,
            verticalStartPoint: VerticalAlignment.Bottom,
            openAnimation: scaleInVerTop,
            closeAnimation: scaleOutVerTop,
            minSize: { width: 0, height: 0 }
        };
        this.settings = Object.assign({}, this._defaultSettings, settings);
    }
    /** @inheritdoc */
    /**
     * \@inheritdoc
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    ConnectedPositioningStrategy.prototype.position = /**
     * \@inheritdoc
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    function (contentElement, size, document, initialCall) {
        /** @type {?} */
        var targetRect = getTargetRect(this.settings);
        /** @type {?} */
        var contentElementRect = contentElement.getBoundingClientRect();
        this.setStyle(contentElement, targetRect, contentElementRect);
    };
    /**
     * @inheritdoc
     * Creates clone of this position strategy
     * @returns clone of this position strategy
     */
    /**
     * \@inheritdoc
     * Creates clone of this position strategy
     * @return {?} clone of this position strategy
     */
    ConnectedPositioningStrategy.prototype.clone = /**
     * \@inheritdoc
     * Creates clone of this position strategy
     * @return {?} clone of this position strategy
     */
    function () {
        return cloneInstance(this);
    };
    /**
     * Sets element's style which effectively positions provided element according
     * to provided position settings
     * @param element Element to position
     * @param targetRect Bounding rectangle of strategy target
     * @param elementRect Bounding rectangle of the element
     */
    /**
     * Sets element's style which effectively positions provided element according
     * to provided position settings
     * @protected
     * @param {?} element Element to position
     * @param {?} targetRect Bounding rectangle of strategy target
     * @param {?} elementRect Bounding rectangle of the element
     * @return {?}
     */
    ConnectedPositioningStrategy.prototype.setStyle = /**
     * Sets element's style which effectively positions provided element according
     * to provided position settings
     * @protected
     * @param {?} element Element to position
     * @param {?} targetRect Bounding rectangle of strategy target
     * @param {?} elementRect Bounding rectangle of the element
     * @return {?}
     */
    function (element, targetRect, elementRect) {
        /** @type {?} */
        var startPoint = {
            x: targetRect.right + targetRect.width * this.settings.horizontalStartPoint,
            y: targetRect.bottom + targetRect.height * this.settings.verticalStartPoint,
        };
        /** @type {?} */
        var wrapperRect = element.parentElement.getBoundingClientRect();
        //  clean up styles - if auto position strategy is chosen we may pass here several times
        element.style.right = '';
        element.style.left = '';
        element.style.bottom = '';
        element.style.top = '';
        switch (this.settings.horizontalDirection) {
            case HorizontalAlignment.Left:
                element.style.right = Math.round(wrapperRect.right - startPoint.x) + "px";
                break;
            case HorizontalAlignment.Center:
                element.style.left = Math.round(startPoint.x - wrapperRect.left - elementRect.width / 2) + "px";
                break;
            case HorizontalAlignment.Right:
                element.style.left = Math.round(startPoint.x - wrapperRect.left) + "px";
                break;
        }
        switch (this.settings.verticalDirection) {
            case VerticalAlignment.Top:
                element.style.bottom = Math.round(wrapperRect.bottom - startPoint.y) + "px";
                break;
            case VerticalAlignment.Middle:
                element.style.top = Math.round(startPoint.y - wrapperRect.top - elementRect.height / 2) + "px";
                break;
            case VerticalAlignment.Bottom:
                element.style.top = Math.round(startPoint.y - wrapperRect.top) + "px";
                break;
        }
    };
    return ConnectedPositioningStrategy;
}());
/**
 * Positions the element based on the directions and start point passed in trough PositionSettings.
 * It is possible to either pass a start point or an HTMLElement as a positioning base.
 */
export { ConnectedPositioningStrategy };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ConnectedPositioningStrategy.prototype._defaultSettings;
    /**
     * \@inheritdoc
     * @type {?}
     */
    ConnectedPositioningStrategy.prototype.settings;
}
//# sourceMappingURL=data:application/json;base64,