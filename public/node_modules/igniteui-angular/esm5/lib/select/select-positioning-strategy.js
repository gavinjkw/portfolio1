/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { VerticalAlignment, HorizontalAlignment, Point, getViewportRect } from '../services/overlay/utilities';
import { ConnectedPositioningStrategy } from '../services/overlay/position/connected-positioning-strategy';
import { fadeOut, fadeIn } from '../animations/main';
import { isIE } from '../core/utils';
/** @enum {number} */
var Direction = {
    Top: -1,
    Bottom: 1,
    None: 0,
};
Direction[Direction.Top] = 'Top';
Direction[Direction.Bottom] = 'Bottom';
Direction[Direction.None] = 'None';
/**
 * @hidden \@internal
 */
var /**
 * @hidden \@internal
 */
SelectPositioningStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(SelectPositioningStrategy, _super);
    function SelectPositioningStrategy(select, settings) {
        var _this = _super.call(this) || this;
        _this.select = select;
        _this._selectDefaultSettings = {
            target: null,
            horizontalDirection: HorizontalAlignment.Right,
            verticalDirection: VerticalAlignment.Bottom,
            horizontalStartPoint: HorizontalAlignment.Left,
            verticalStartPoint: VerticalAlignment.Top,
            openAnimation: fadeIn,
            closeAnimation: fadeOut
        };
        _this.defaultWindowToListOffset = 5;
        _this.viewPort = getViewportRect(document);
        _this.settings = Object.assign({}, _this._selectDefaultSettings, settings);
        return _this;
    }
    /**
     * @private
     * @param {?} contentElement
     * @param {?} outBoundsAmount
     * @return {?}
     */
    SelectPositioningStrategy.prototype.positionAndScrollBottom = /**
     * @private
     * @param {?} contentElement
     * @param {?} outBoundsAmount
     * @return {?}
     */
    function (contentElement, outBoundsAmount) {
        contentElement.style.top = this.viewPort.bottom - this.listContainerBoundRect.height - this.defaultWindowToListOffset + "px";
        contentElement.firstElementChild.scrollTop -= outBoundsAmount - (this.inputBorderTop - this.defaultWindowToListOffset);
        this.deltaY = this.viewPort.bottom - this.listContainerBoundRect.height -
            this.defaultWindowToListOffset - ((/** @type {?} */ (this.select.input.nativeElement.getBoundingClientRect()))).top;
    };
    /**
     * @private
     * @param {?} contentElement
     * @param {?} CURRENT_POSITION_Y
     * @return {?}
     */
    SelectPositioningStrategy.prototype.positionNoScroll = /**
     * @private
     * @param {?} contentElement
     * @param {?} CURRENT_POSITION_Y
     * @return {?}
     */
    function (contentElement, CURRENT_POSITION_Y) {
        contentElement.style.top = CURRENT_POSITION_Y - this.inputBorderTop + "px";
        this.deltaY = CURRENT_POSITION_Y - this.inputBorderTop -
            ((/** @type {?} */ (this.select.input.nativeElement.getBoundingClientRect()))).top;
    };
    /**
     * @private
     * @param {?} contentElement
     * @param {?} outBoundsAmount
     * @return {?}
     */
    SelectPositioningStrategy.prototype.positionAndScrollTop = /**
     * @private
     * @param {?} contentElement
     * @param {?} outBoundsAmount
     * @return {?}
     */
    function (contentElement, outBoundsAmount) {
        contentElement.style.top = this.viewPort.top + this.defaultWindowToListOffset + "px";
        contentElement.firstElementChild.scrollTop += outBoundsAmount + this.inputBorderTop + this.defaultWindowToListOffset;
        this.deltaY = this.viewPort.top + this.defaultWindowToListOffset -
            ((/** @type {?} */ (this.select.input.nativeElement.getBoundingClientRect()))).top;
    };
    /**
     * @private
     * @param {?} contentElement
     * @param {?} itemHeight
     * @return {?}
     */
    SelectPositioningStrategy.prototype.getItemsOutOfView = /**
     * @private
     * @param {?} contentElement
     * @param {?} itemHeight
     * @return {?}
     */
    function (contentElement, itemHeight) {
        if (contentElement.firstElementChild.scrollHeight <= contentElement.firstElementChild.clientHeight) {
            return {
                'currentScroll': 0,
                'remainingScroll': 0
            };
        }
        /** @type {?} */
        var currentScroll = contentElement.firstElementChild.scrollTop;
        /** @type {?} */
        var remainingScroll = this.select.items.length * itemHeight - currentScroll - this.listContainerBoundRect.height;
        return {
            'currentScroll': currentScroll,
            'remainingScroll': remainingScroll
        };
    };
    /**
     * @private
     * @param {?} elementContainer
     * @param {?} document
     * @return {?}
     */
    SelectPositioningStrategy.prototype.listOutOfBounds = /**
     * @private
     * @param {?} elementContainer
     * @param {?} document
     * @return {?}
     */
    function (elementContainer, document) {
        /** @type {?} */
        var container = {
            TOP: elementContainer.top,
            BOTTOM: elementContainer.bottom,
        };
        /** @type {?} */
        var viewPort = getViewportRect(document);
        /** @type {?} */
        var documentElement = {
            TOP: viewPort.top,
            BOTTOM: viewPort.bottom
        };
        /** @type {?} */
        var returnVals = {
            Direction: Direction.None,
            Amount: 0
        };
        if (documentElement.TOP + this.defaultWindowToListOffset > container.TOP) {
            returnVals.Direction = Direction.Top;
            returnVals.Amount = documentElement.TOP - container.TOP;
        }
        else if (documentElement.BOTTOM - this.defaultWindowToListOffset < container.BOTTOM) {
            returnVals.Direction = Direction.Bottom;
            returnVals.Amount = container.BOTTOM - documentElement.BOTTOM;
        }
        else {
            return null;
        }
        return returnVals;
    };
    /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    SelectPositioningStrategy.prototype.position = /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    function (contentElement, size, document, initialCall) {
        /** @type {?} */
        var inputElement = this.select.input.nativeElement;
        /** @type {?} */
        var inputRect = (/** @type {?} */ (inputElement.getBoundingClientRect()));
        this.listContainerBoundRect = (/** @type {?} */ (contentElement.getBoundingClientRect()));
        /** @type {?} */
        var LIST_HEIGHT = this.listContainerBoundRect.height;
        if (!initialCall) {
            this.deltaX = inputRect.left - this.itemTextPadding - this.itemTextIndent;
            /** @type {?} */
            var point = new Point(this.deltaX, inputRect.top + this.deltaY);
            this.settings.target = point;
            _super.prototype.position.call(this, contentElement, size);
            return;
        }
        /** @type {?} */
        var START = {
            X: inputRect.left,
            Y: inputRect.top
        };
        /** @type {?} */
        var itemElement;
        if (this.select.selectedItem) {
            itemElement = this.select.selectedItem.element.nativeElement;
            // D.P. Feb 22 2019, #3921 Force item scroll before measuring in IE11, due to base scrollToItem delay
            if (isIE()) {
                contentElement.firstElementChild.scrollTop = this.select.calculateScrollPosition(this.select.selectedItem);
            }
        }
        else {
            itemElement = this.select.getFirstItemElement();
        }
        /** @type {?} */
        var inputHeight = inputRect.height;
        /** @type {?} */
        var itemBoundRect = (/** @type {?} */ (itemElement.getBoundingClientRect()));
        /** @type {?} */
        var itemTopListOffset = itemBoundRect.top - this.listContainerBoundRect.top;
        /** @type {?} */
        var itemHeight = itemBoundRect.height;
        /** @type {?} */
        var CURRENT_POSITION_Y = START.Y - itemTopListOffset;
        /** @type {?} */
        var CURRENT_BOTTOM_Y = CURRENT_POSITION_Y + this.listContainerBoundRect.height;
        /** @type {?} */
        var OUT_OF_BOUNDS = this.listOutOfBounds({ top: CURRENT_POSITION_Y, bottom: CURRENT_BOTTOM_Y }, document);
        if (OUT_OF_BOUNDS) {
            if (OUT_OF_BOUNDS.Direction === Direction.Top) {
                CURRENT_POSITION_Y = START.Y;
            }
            else {
                CURRENT_POSITION_Y = -1 * (LIST_HEIGHT - (itemHeight - (itemHeight - inputHeight) / 2));
                CURRENT_POSITION_Y += START.Y;
            }
        }
        /** @type {?} */
        var inputBorderTop = window.getComputedStyle(inputElement).borderTopWidth;
        this.inputBorderTop = parseInt(inputBorderTop.slice(0, inputBorderTop.indexOf('p')), 10) || 0;
        /** @type {?} */
        var itemLeftPadding = window.getComputedStyle(itemElement).paddingLeft;
        /** @type {?} */
        var itemTextIndent = window.getComputedStyle(itemElement).textIndent;
        /** @type {?} */
        var numericPadding = parseInt(itemLeftPadding.slice(0, itemLeftPadding.indexOf('p')), 10) || 0;
        /** @type {?} */
        var numericTextIndent = parseInt(itemTextIndent.slice(0, itemTextIndent.indexOf('r')), 10) || 0;
        this.itemTextPadding = numericPadding;
        this.itemTextIndent = numericTextIndent;
        contentElement.style.left += START.X - numericPadding - numericTextIndent + "px";
        contentElement.style.width = inputRect.width + 24 + 32 + 'px';
        this.deltaX = START.X - numericPadding - numericTextIndent;
        /** @type {?} */
        var currentScroll = this.getItemsOutOfView(contentElement, itemHeight)['currentScroll'];
        /** @type {?} */
        var remainingScroll = this.getItemsOutOfView(contentElement, itemHeight)['remainingScroll'];
        // (5 items or less) no scroll and respectively no remaining scroll
        if (remainingScroll === 0 && currentScroll === 0) {
            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);
        }
        // (more than 5 items) there is scroll OR remaining scroll
        if (remainingScroll !== 0 || currentScroll !== 0) {
            if (remainingScroll !== 0 && !OUT_OF_BOUNDS) {
                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);
            }
            // (more than 5 items) and container getting out of the visible port
            if (remainingScroll !== 0 && OUT_OF_BOUNDS) {
                // if there is enough remaining scroll to scroll the item
                if (remainingScroll > itemHeight) {
                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {
                        this.positionAndScrollTop(contentElement, OUT_OF_BOUNDS.Amount);
                        return;
                    }
                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {
                        // (more than 5 items) and no current scroll
                        if (currentScroll === 0) {
                            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);
                            return;
                            // (more than 5 items) and current scroll
                        }
                        else {
                            this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);
                            return;
                        }
                    }
                }
                // if there is no enough remaining scroll to scroll the item
                if (remainingScroll < itemHeight) {
                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {
                        this.positionNoScroll(contentElement, CURRENT_POSITION_Y);
                    }
                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {
                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);
                    }
                }
            }
            // (more than 5 items) and no remaining scroll
            if (remainingScroll === 0 && currentScroll !== 0) {
                if (OUT_OF_BOUNDS) {
                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {
                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);
                        return;
                    }
                }
                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);
            }
        }
    };
    return SelectPositioningStrategy;
}(ConnectedPositioningStrategy));
/**
 * @hidden \@internal
 */
export { SelectPositioningStrategy };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype._selectDefaultSettings;
    /** @type {?} */
    SelectPositioningStrategy.prototype.settings;
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype.defaultWindowToListOffset;
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype.viewPort;
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype.deltaY;
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype.deltaX;
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype.itemTextPadding;
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype.itemTextIndent;
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype.inputBorderTop;
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype.listContainerBoundRect;
    /** @type {?} */
    SelectPositioningStrategy.prototype.select;
}
//# sourceMappingURL=data:application/json;base64,