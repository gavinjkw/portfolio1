/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostListener, Input, NgModule, ChangeDetectorRef, Output, EventEmitter, Optional, HostBinding, Inject } from '@angular/core';
import { useAnimation } from '@angular/animations';
import { scaleInCenter } from '../../animations/scale/index';
import { fadeOut } from '../../animations/fade/index';
import { IgxOverlayService } from '../../services/overlay/overlay';
import { HorizontalAlignment, AutoPositionStrategy } from '../../services';
import { CommonModule } from '@angular/common';
import { IgxNavigationService } from '../../core/navigation';
import { IgxToggleDirective, IgxToggleActionDirective } from '../toggle/toggle.directive';
/**
 * @record
 */
export function ITooltipShowEventArgs() { }
if (false) {
    /** @type {?} */
    ITooltipShowEventArgs.prototype.target;
    /** @type {?} */
    ITooltipShowEventArgs.prototype.tooltip;
    /** @type {?} */
    ITooltipShowEventArgs.prototype.cancel;
}
/**
 * @record
 */
export function ITooltipHideEventArgs() { }
if (false) {
    /** @type {?} */
    ITooltipHideEventArgs.prototype.target;
    /** @type {?} */
    ITooltipHideEventArgs.prototype.tooltip;
    /** @type {?} */
    ITooltipHideEventArgs.prototype.cancel;
}
/**
 * **Ignite UI for Angular Tooltip Target** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)
 *
 * The Ignite UI for Angular Tooltip Target directive is used to mark an HTML element in the markup as one that has a tooltip.
 * The tooltip target is used in combination with the Ignite UI for Angular Tooltip by assigning the exported tooltip reference to the
 * target's selector property.
 *
 * Example:
 * ```html
 * <button [igxTooltipTarget]="tooltipRef">Hover me</button>
 * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
 * ```
 */
var IgxTooltipTargetDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IgxTooltipTargetDirective, _super);
    function IgxTooltipTargetDirective(_element, _navigationService) {
        var _this = _super.call(this, _element, _navigationService) || this;
        _this._element = _element;
        _this._navigationService = _navigationService;
        /**
         * Gets/sets the amount of milliseconds that should pass before showing the tooltip.
         *
         * ```typescript
         * // get
         * let tooltipShowDelay = this.tooltipTarget.showDelay;
         * ```
         *
         * ```html
         * <!--set-->
         * <button [igxTooltipTarget]="tooltipRef" showDelay="1500">Hover me</button>
         * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
         * ```
         */
        _this.showDelay = 500;
        /**
         * Gets/sets the amount of milliseconds that should pass before hiding the tooltip.
         *
         * ```typescript
         * // get
         * let tooltipHideDelay = this.tooltipTarget.hideDelay;
         * ```
         *
         * ```html
         * <!--set-->
         * <button [igxTooltipTarget]="tooltipRef" hideDelay="1500">Hover me</button>
         * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
         * ```
         */
        _this.hideDelay = 500;
        /**
         * Specifies if the tooltip should not show when hovering its target with the mouse. (defaults to false)
         * While setting this property to 'true' will disable the user interactions that shows/hides the tooltip,
         * the developer will still be able to show/hide the tooltip through the API.
         *
         * ```typescript
         * // get
         * let tooltipDisabledValue = this.tooltipTarget.tooltipDisabled;
         * ```
         *
         * ```html
         * <!--set-->
         * <button [igxTooltipTarget]="tooltipRef" [tooltipDisabled]="true">Hover me</button>
         * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
         * ```
         */
        _this.tooltipDisabled = false;
        /**
         * Emits an event when the tooltip that is associated with this target starts showing.
         * This event is fired before the start of the countdown to showing the tooltip.
         *
         * ```typescript
         * tooltipShowing(args: ITooltipShowEventArgs) {
         *    alert("Tooltip started showing!");
         * }
         * ```
         *
         * ```html
         * <button [igxTooltipTarget]="tooltipRef"
         *         (onTooltipShow)='tooltipShowing($event)'>Hover me</button>
         * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
         * ```
         */
        _this.onTooltipShow = new EventEmitter();
        /**
         * Emits an event when the tooltip that is associated with this target starts hiding.
         * This event is fired before the start of the countdown to hiding the tooltip.
         *
         * ```typescript
         * tooltipHiding(args: ITooltipHideEventArgs) {
         *    alert("Tooltip started hiding!");
         * }
         * ```
         *
         * ```html
         * <button [igxTooltipTarget]="tooltipRef"
         *         (onTooltipHide)='tooltipHiding($event)'>Hover me</button>
         * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
         * ```
         */
        _this.onTooltipHide = new EventEmitter();
        return _this;
    }
    Object.defineProperty(IgxTooltipTargetDirective.prototype, "target", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            if (typeof this._target === 'string') {
                return this._navigationService.get(this._target);
            }
            return this._target;
        },
        /**
         * @hidden
         */
        set: /**
         * @hidden
         * @param {?} target
         * @return {?}
         */
        function (target) {
            if (target !== null && target !== '') {
                this._target = target;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTooltipTargetDirective.prototype, "nativeElement", {
        /**
         * Gets the respective native element of the directive.
         *
         * ```typescript
         * let tooltipTargetElement = this.tooltipTarget.nativeElement;
         * ```
         */
        get: /**
         * Gets the respective native element of the directive.
         *
         * ```typescript
         * let tooltipTargetElement = this.tooltipTarget.nativeElement;
         * ```
         * @return {?}
         */
        function () {
            return this._element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTooltipTargetDirective.prototype, "tooltipHidden", {
        /**
         * Indicates if the tooltip that is is associated with this target is currently hidden.
         *
         * ```typescript
         * let tooltipHiddenValue = this.tooltipTarget.tooltipHidden;
         * ```
         */
        get: /**
         * Indicates if the tooltip that is is associated with this target is currently hidden.
         *
         * ```typescript
         * let tooltipHiddenValue = this.tooltipTarget.tooltipHidden;
         * ```
         * @return {?}
         */
        function () {
            return !this.target || this.target.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxTooltipTargetDirective.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        /** @type {?} */
        var positionSettings = {
            target: this.nativeElement,
            horizontalDirection: HorizontalAlignment.Center,
            horizontalStartPoint: HorizontalAlignment.Center,
            openAnimation: useAnimation(scaleInCenter, { params: { duration: '150ms' } }),
            closeAnimation: useAnimation(fadeOut, { params: { duration: '75ms' } })
        };
        this._overlayDefaults.positionStrategy = new AutoPositionStrategy(positionSettings);
        this._overlayDefaults.closeOnOutsideClick = false;
    };
    /**
     * @private
     * @return {?}
     */
    IgxTooltipTargetDirective.prototype.checkOutletAndOutsideClick = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.closeOnOutsideClick !== undefined) {
            this._overlayDefaults.closeOnOutsideClick = this.closeOnOutsideClick;
        }
        if (this.outlet) {
            this._overlayDefaults.outlet = this.outlet;
        }
    };
    Object.defineProperty(IgxTooltipTargetDirective.prototype, "mergedOverlaySettings", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return Object.assign({}, this._overlayDefaults, this.overlaySettings);
        },
        enumerable: true,
        configurable: true
    });
    // Return true if the execution in onMouseEnter should be terminated after this method
    // Return true if the execution in onMouseEnter should be terminated after this method
    /**
     * @private
     * @return {?}
     */
    IgxTooltipTargetDirective.prototype.preMouseEnterCheck = 
    // Return true if the execution in onMouseEnter should be terminated after this method
    /**
     * @private
     * @return {?}
     */
    function () {
        // If tooltip is about to be opened
        if (this.target.toBeShown) {
            clearTimeout(this.target.timeoutId);
            this.target.toBeShown = false;
        }
        // If Tooltip is opened or about to be hidden
        if (!this.target.collapsed || this.target.toBeHidden) {
            clearTimeout(this.target.timeoutId);
            /** @type {?} */
            var hidingArgs = { target: this, tooltip: this.target, cancel: false };
            this.onTooltipHide.emit(hidingArgs);
            if (hidingArgs.cancel) {
                return true;
            }
            //  if close animation has started finish it, or close the tooltip with no animation
            this.target.forceClose(this.mergedOverlaySettings);
            this.target.toBeHidden = false;
        }
        return false;
    };
    // Return true if the execution in onMouseLeave should be terminated after this method
    // Return true if the execution in onMouseLeave should be terminated after this method
    /**
     * @private
     * @return {?}
     */
    IgxTooltipTargetDirective.prototype.preMouseLeaveCheck = 
    // Return true if the execution in onMouseLeave should be terminated after this method
    /**
     * @private
     * @return {?}
     */
    function () {
        clearTimeout(this.target.timeoutId);
        // If tooltip is about to be opened
        if (this.target.toBeShown) {
            this.target.toBeShown = false;
            this.target.toBeHidden = false;
            return true;
        }
        return false;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxTooltipTargetDirective.prototype.onKeydownEscape = /**
     * @hidden
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hidingArgs = { target: this, tooltip: this.target, cancel: false };
        this.onTooltipHide.emit(hidingArgs);
        if (hidingArgs.cancel) {
            return;
        }
        this.target.toBeHidden = true;
        this.target.close();
        this.target.toBeHidden = false;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxTooltipTargetDirective.prototype.onClick = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (!this.target.collapsed) {
            /** @type {?} */
            var hidingArgs = { target: this, tooltip: this.target, cancel: false };
            this.onTooltipHide.emit(hidingArgs);
            if (hidingArgs.cancel) {
                return;
            }
            this.target.forceClose(this.mergedOverlaySettings);
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxTooltipTargetDirective.prototype.onMouseEnter = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.tooltipDisabled) {
            return;
        }
        this.checkOutletAndOutsideClick();
        /** @type {?} */
        var shouldReturn = this.preMouseEnterCheck();
        if (shouldReturn) {
            return;
        }
        /** @type {?} */
        var showingArgs = { target: this, tooltip: this.target, cancel: false };
        this.onTooltipShow.emit(showingArgs);
        if (showingArgs.cancel) {
            return;
        }
        this.target.toBeShown = true;
        this.target.timeoutId = setTimeout(function () {
            _this.target.open(_this.mergedOverlaySettings); // Call open() of IgxTooltipDirective
            _this.target.toBeShown = false;
        }, this.showDelay);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxTooltipTargetDirective.prototype.onMouseLeave = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.tooltipDisabled) {
            return;
        }
        this.checkOutletAndOutsideClick();
        /** @type {?} */
        var shouldReturn = this.preMouseLeaveCheck();
        if (shouldReturn || this.target.collapsed) {
            return;
        }
        /** @type {?} */
        var hidingArgs = { target: this, tooltip: this.target, cancel: false };
        this.onTooltipHide.emit(hidingArgs);
        if (hidingArgs.cancel) {
            return;
        }
        this.target.toBeHidden = true;
        this.target.timeoutId = setTimeout(function () {
            _this.target.close(); // Call close() of IgxTooltipDirective
            _this.target.toBeHidden = false;
        }, this.hideDelay);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxTooltipTargetDirective.prototype.onTouchStart = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.tooltipDisabled) {
            return;
        }
        event.preventDefault();
        this.showTooltip();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxTooltipTargetDirective.prototype.onDocumentTouchStart = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.tooltipDisabled) {
            return;
        }
        if (this.nativeElement !== event.target &&
            !this.nativeElement.contains(event.target)) {
            this.hideTooltip();
        }
    };
    /**
     * Shows the tooltip by respecting the 'showDelay' property.
     *
     * ```typescript
     * this.tooltipTarget.showTooltip();
     * ```
     */
    /**
     * Shows the tooltip by respecting the 'showDelay' property.
     *
     * ```typescript
     * this.tooltipTarget.showTooltip();
     * ```
     * @return {?}
     */
    IgxTooltipTargetDirective.prototype.showTooltip = /**
     * Shows the tooltip by respecting the 'showDelay' property.
     *
     * ```typescript
     * this.tooltipTarget.showTooltip();
     * ```
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.target.timeoutId);
        if (!this.target.collapsed) {
            /** @type {?} */
            var hidingArgs = { target: this, tooltip: this.target, cancel: false };
            this.onTooltipHide.emit(hidingArgs);
            if (hidingArgs.cancel) {
                return;
            }
            //  if close animation has started finish it, or close the tooltip with no animation
            this.target.forceClose(this.mergedOverlaySettings);
            this.target.toBeHidden = false;
        }
        /** @type {?} */
        var showingArgs = { target: this, tooltip: this.target, cancel: false };
        this.onTooltipShow.emit(showingArgs);
        if (showingArgs.cancel) {
            return;
        }
        this.target.toBeShown = true;
        this.target.timeoutId = setTimeout(function () {
            _this.target.open(_this.mergedOverlaySettings); // Call open() of IgxTooltipDirective
            _this.target.toBeShown = false;
        }, this.showDelay);
    };
    /**
     * Hides the tooltip by respecting the 'hideDelay' property.
     *
     * ```typescript
     * this.tooltipTarget.hideTooltip();
     * ```
     */
    /**
     * Hides the tooltip by respecting the 'hideDelay' property.
     *
     * ```typescript
     * this.tooltipTarget.hideTooltip();
     * ```
     * @return {?}
     */
    IgxTooltipTargetDirective.prototype.hideTooltip = /**
     * Hides the tooltip by respecting the 'hideDelay' property.
     *
     * ```typescript
     * this.tooltipTarget.hideTooltip();
     * ```
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.target.collapsed && this.target.toBeShown) {
            clearTimeout(this.target.timeoutId);
        }
        if (this.target.collapsed || this.target.toBeHidden) {
            return;
        }
        /** @type {?} */
        var hidingArgs = { target: this, tooltip: this.target, cancel: false };
        this.onTooltipHide.emit(hidingArgs);
        if (hidingArgs.cancel) {
            return;
        }
        this.target.toBeHidden = true;
        this.target.timeoutId = setTimeout(function () {
            _this.target.close(); // Call close() of IgxTooltipDirective
            _this.target.toBeHidden = false;
        }, this.hideDelay);
    };
    IgxTooltipTargetDirective.decorators = [
        { type: Directive, args: [{
                    exportAs: 'tooltipTarget',
                    selector: '[igxTooltipTarget]'
                },] }
    ];
    /** @nocollapse */
    IgxTooltipTargetDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: IgxNavigationService, decorators: [{ type: Optional }] }
    ]; };
    IgxTooltipTargetDirective.propDecorators = {
        showDelay: [{ type: Input, args: ['showDelay',] }],
        hideDelay: [{ type: Input, args: ['hideDelay',] }],
        tooltipDisabled: [{ type: Input, args: ['tooltipDisabled',] }],
        target: [{ type: Input, args: ['igxTooltipTarget',] }],
        onTooltipShow: [{ type: Output }],
        onTooltipHide: [{ type: Output }],
        onKeydownEscape: [{ type: HostListener, args: ['document:keydown.escape', ['$event'],] }],
        onClick: [{ type: HostListener, args: ['click',] }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }],
        onTouchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
        onDocumentTouchStart: [{ type: HostListener, args: ['document:touchstart', ['$event'],] }]
    };
    return IgxTooltipTargetDirective;
}(IgxToggleActionDirective));
export { IgxTooltipTargetDirective };
if (false) {
    /**
     * Gets/sets the amount of milliseconds that should pass before showing the tooltip.
     *
     * ```typescript
     * // get
     * let tooltipShowDelay = this.tooltipTarget.showDelay;
     * ```
     *
     * ```html
     * <!--set-->
     * <button [igxTooltipTarget]="tooltipRef" showDelay="1500">Hover me</button>
     * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
     * ```
     * @type {?}
     */
    IgxTooltipTargetDirective.prototype.showDelay;
    /**
     * Gets/sets the amount of milliseconds that should pass before hiding the tooltip.
     *
     * ```typescript
     * // get
     * let tooltipHideDelay = this.tooltipTarget.hideDelay;
     * ```
     *
     * ```html
     * <!--set-->
     * <button [igxTooltipTarget]="tooltipRef" hideDelay="1500">Hover me</button>
     * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
     * ```
     * @type {?}
     */
    IgxTooltipTargetDirective.prototype.hideDelay;
    /**
     * Specifies if the tooltip should not show when hovering its target with the mouse. (defaults to false)
     * While setting this property to 'true' will disable the user interactions that shows/hides the tooltip,
     * the developer will still be able to show/hide the tooltip through the API.
     *
     * ```typescript
     * // get
     * let tooltipDisabledValue = this.tooltipTarget.tooltipDisabled;
     * ```
     *
     * ```html
     * <!--set-->
     * <button [igxTooltipTarget]="tooltipRef" [tooltipDisabled]="true">Hover me</button>
     * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
     * ```
     * @type {?}
     */
    IgxTooltipTargetDirective.prototype.tooltipDisabled;
    /**
     * Emits an event when the tooltip that is associated with this target starts showing.
     * This event is fired before the start of the countdown to showing the tooltip.
     *
     * ```typescript
     * tooltipShowing(args: ITooltipShowEventArgs) {
     *    alert("Tooltip started showing!");
     * }
     * ```
     *
     * ```html
     * <button [igxTooltipTarget]="tooltipRef"
     *         (onTooltipShow)='tooltipShowing($event)'>Hover me</button>
     * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
     * ```
     * @type {?}
     */
    IgxTooltipTargetDirective.prototype.onTooltipShow;
    /**
     * Emits an event when the tooltip that is associated with this target starts hiding.
     * This event is fired before the start of the countdown to hiding the tooltip.
     *
     * ```typescript
     * tooltipHiding(args: ITooltipHideEventArgs) {
     *    alert("Tooltip started hiding!");
     * }
     * ```
     *
     * ```html
     * <button [igxTooltipTarget]="tooltipRef"
     *         (onTooltipHide)='tooltipHiding($event)'>Hover me</button>
     * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
     * ```
     * @type {?}
     */
    IgxTooltipTargetDirective.prototype.onTooltipHide;
    /**
     * @type {?}
     * @private
     */
    IgxTooltipTargetDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    IgxTooltipTargetDirective.prototype._navigationService;
}
/** @type {?} */
var NEXT_ID = 0;
/**
 * **Ignite UI for Angular Tooltip** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)
 *
 * The Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.
 * The tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the
 * respective target's selector property.
 *
 * Example:
 * ```html
 * <button [igxTooltipTarget]="tooltipRef">Hover me</button>
 * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
 * ```
 */
var IgxTooltipDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IgxTooltipDirective, _super);
    /** @hidden */
    function IgxTooltipDirective(elementRef, cdr, overlayService, navigationService) {
        var _this = 
        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future
        _super.call(this, elementRef, cdr, overlayService, navigationService) || this;
        /**
         * @hidden
         * Returns whether close time out has started
         */
        _this.toBeHidden = false;
        /**
         * @hidden
         * Returns whether open time out has started
         */
        _this.toBeShown = false;
        /**
         * Identifier for the tooltip.
         * If this is property is not explicitly set, it will be automatically generated.
         *
         * ```typescript
         * let tooltipId = this.tooltip.id;
         * ```
         */
        _this.id = "igx-tooltip-" + NEXT_ID++;
        return _this;
    }
    Object.defineProperty(IgxTooltipDirective.prototype, "hiddenClass", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTooltipDirective.prototype, "defaultClass", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return !this.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTooltipDirective.prototype, "role", {
        /**
         * Get the role attribute of the tooltip.
         *
         * ```typescript
         * let tooltipRole = this.tooltip.role;
         * ```
         */
        get: /**
         * Get the role attribute of the tooltip.
         *
         * ```typescript
         * let tooltipRole = this.tooltip.role;
         * ```
         * @return {?}
         */
        function () {
            return 'tooltip';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * If there is open animation in progress this method will finish is.
     * If there is no open animation in progress this method will open the toggle with no animation.
     * @param overlaySettings setting to use for opening the toggle
     */
    /**
     * If there is open animation in progress this method will finish is.
     * If there is no open animation in progress this method will open the toggle with no animation.
     * @protected
     * @param {?=} overlaySettings setting to use for opening the toggle
     * @return {?}
     */
    IgxTooltipDirective.prototype.forceOpen = /**
     * If there is open animation in progress this method will finish is.
     * If there is no open animation in progress this method will open the toggle with no animation.
     * @protected
     * @param {?=} overlaySettings setting to use for opening the toggle
     * @return {?}
     */
    function (overlaySettings) {
        /** @type {?} */
        var info = this.overlayService.getOverlayById(this._overlayId);
        /** @type {?} */
        var hasOpenAnimation = info ? info.openAnimationPlayer : false;
        if (hasOpenAnimation) {
            info.openAnimationPlayer.finish();
            info.openAnimationPlayer.reset();
            info.openAnimationPlayer = null;
        }
        else if (this.collapsed) {
            /** @type {?} */
            var animation = overlaySettings.positionStrategy.settings.openAnimation;
            overlaySettings.positionStrategy.settings.openAnimation = null;
            this.open(overlaySettings);
            overlaySettings.positionStrategy.settings.openAnimation = animation;
        }
    };
    /**
     * If there is close animation in progress this method will finish is.
     * If there is no close animation in progress this method will close the toggle with no animation.
     * @param overlaySettings settings to use for closing the toggle
     */
    /**
     * If there is close animation in progress this method will finish is.
     * If there is no close animation in progress this method will close the toggle with no animation.
     * @protected
     * @param {?=} overlaySettings settings to use for closing the toggle
     * @return {?}
     */
    IgxTooltipDirective.prototype.forceClose = /**
     * If there is close animation in progress this method will finish is.
     * If there is no close animation in progress this method will close the toggle with no animation.
     * @protected
     * @param {?=} overlaySettings settings to use for closing the toggle
     * @return {?}
     */
    function (overlaySettings) {
        /** @type {?} */
        var info = this.overlayService.getOverlayById(this._overlayId);
        /** @type {?} */
        var hasCloseAnimation = info ? info.closeAnimationPlayer : false;
        if (hasCloseAnimation) {
            info.closeAnimationPlayer.finish();
            info.closeAnimationPlayer.reset();
            info.closeAnimationPlayer = null;
        }
        else if (!this.collapsed) {
            /** @type {?} */
            var animation = overlaySettings.positionStrategy.settings.closeAnimation;
            overlaySettings.positionStrategy.settings.closeAnimation = null;
            this.close();
            overlaySettings.positionStrategy.settings.closeAnimation = animation;
        }
    };
    IgxTooltipDirective.decorators = [
        { type: Directive, args: [{
                    exportAs: 'tooltip',
                    selector: '[igxTooltip]'
                },] }
    ];
    /** @nocollapse */
    IgxTooltipDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
        { type: IgxNavigationService, decorators: [{ type: Optional }] }
    ]; };
    IgxTooltipDirective.propDecorators = {
        hiddenClass: [{ type: HostBinding, args: ['class.igx-tooltip--hidden',] }],
        defaultClass: [{ type: HostBinding, args: ['class.igx-tooltip--desktop',] }],
        context: [{ type: Input, args: ['context',] }],
        id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
        role: [{ type: HostBinding, args: ['attr.role',] }]
    };
    return IgxTooltipDirective;
}(IgxToggleDirective));
export { IgxTooltipDirective };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    IgxTooltipDirective.prototype.timeoutId;
    /**
     * @hidden
     * Returns whether close time out has started
     * @type {?}
     */
    IgxTooltipDirective.prototype.toBeHidden;
    /**
     * @hidden
     * Returns whether open time out has started
     * @type {?}
     */
    IgxTooltipDirective.prototype.toBeShown;
    /**
     * Gets/sets any tooltip related data.
     * The 'context' can be used for storing any information that is necessary
     * to access when working with the tooltip.
     *
     * ```typescript
     * // get
     * let tooltipContext = this.tooltip.context;
     * ```
     *
     * ```typescript
     * // set
     * this.tooltip.context = "Tooltip's context";
     * ```
     * @type {?}
     */
    IgxTooltipDirective.prototype.context;
    /**
     * Identifier for the tooltip.
     * If this is property is not explicitly set, it will be automatically generated.
     *
     * ```typescript
     * let tooltipId = this.tooltip.id;
     * ```
     * @type {?}
     */
    IgxTooltipDirective.prototype.id;
}
/**
 * @hidden
 */
var IgxTooltipModule = /** @class */ (function () {
    function IgxTooltipModule() {
    }
    IgxTooltipModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxTooltipDirective, IgxTooltipTargetDirective],
                    exports: [IgxTooltipDirective, IgxTooltipTargetDirective],
                    imports: [CommonModule],
                    providers: [IgxOverlayService]
                },] }
    ];
    return IgxTooltipModule;
}());
export { IgxTooltipModule };
//# sourceMappingURL=data:application/json;base64,