/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, NgModule, Optional, Output, Inject } from '@angular/core';
import { IgxNavigationService } from '../../core/navigation';
import { IgxOverlayService } from '../../services/overlay/overlay';
import { ConnectedPositioningStrategy, AbsoluteScrollStrategy } from '../../services';
import { filter, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { DeprecateProperty } from '../../core/deprecateDecorators';
var IgxToggleDirective = /** @class */ (function () {
    /**
     * @hidden
     */
    function IgxToggleDirective(elementRef, cdr, overlayService, navigationService) {
        var _this = this;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.overlayService = overlayService;
        this.navigationService = navigationService;
        this.destroy$ = new Subject();
        this._overlaySubFilter = [
            filter(function (x) { return x.id === _this._overlayId; }),
            takeUntil(this.destroy$)
        ];
        /**
         * Emits an event after the toggle container is opened.
         *
         * ```typescript
         * onToggleOpened(event) {
         *    alert("Toggle opened!");
         * }
         * ```
         *
         * ```html
         * <div
         *   igxToggle
         *   (onOpened)='onToggleOpened($event)'>
         * </div>
         * ```
         */
        this.onOpened = new EventEmitter();
        /**
         * Emits an event before the toggle container is opened.
         *
         * ```typescript
         * onToggleOpening(event) {
         *  alert("Toggle opening!");
         * }
         * ```
         *
         * ```html
         * <div
         *   igxToggle
         *   (onOpening)='onToggleOpening($event)'>
         * </div>
         * ```
         */
        this.onOpening = new EventEmitter();
        /**
         * Emits an event after the toggle container is closed.
         *
         * ```typescript
         * onToggleClosed(event) {
         *  alert("Toggle closed!");
         * }
         * ```
         *
         * ```html
         * <div
         *   igxToggle
         *   (onClosed)='onToggleClosed($event)'>
         * </div>
         * ```
         */
        this.onClosed = new EventEmitter();
        /**
         * Emits an event before the toggle container is closed.
         *
         * ```typescript
         * onToggleClosing(event) {
         *  alert("Toggle closing!");
         * }
         * ```
         *
         * ```html
         * <div
         *  igxToggle
         *  (onClosing)='onToggleClosing($event)'>
         * </div>
         * ```
         */
        this.onClosing = new EventEmitter();
        this._collapsed = true;
        this.overlayClosed = function () {
            _this._collapsed = true;
            _this.cdr.detectChanges();
            delete _this._overlayId;
            _this.unsubscribe();
            _this.onClosed.emit();
        };
    }
    Object.defineProperty(IgxToggleDirective.prototype, "collapsed", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxToggleDirective.prototype, "element", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxToggleDirective.prototype, "hiddenClass", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxToggleDirective.prototype, "defaultClass", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return !this.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Opens the toggle.
     *
     * ```typescript
     * this.myToggle.open();
     * ```
     */
    /**
     * Opens the toggle.
     *
     * ```typescript
     * this.myToggle.open();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    IgxToggleDirective.prototype.open = /**
     * Opens the toggle.
     *
     * ```typescript
     * this.myToggle.open();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    function (overlaySettings) {
        var _this = this;
        var _a, _b, _c;
        //  if there is open animation do nothing
        //  if toggle is not collapsed and there is no close animation do nothing
        /** @type {?} */
        var info = this.overlayService.getOverlayById(this._overlayId);
        /** @type {?} */
        var hasOpenAnimation = info ? info.openAnimationPlayer : false;
        /** @type {?} */
        var hasCloseAnimation = info ? info.closeAnimationPlayer : false;
        if (hasOpenAnimation || !(this._collapsed || hasCloseAnimation)) {
            return;
        }
        if (!info) {
            this._overlayId = this.overlayService.attach(this.elementRef, overlaySettings);
        }
        this._collapsed = false;
        this.cdr.detectChanges();
        /** @type {?} */
        var openEventArgs = { cancel: false };
        this.onOpening.emit(openEventArgs);
        if (openEventArgs.cancel) {
            this._collapsed = true;
            this.cdr.detectChanges();
            return;
        }
        this.overlayService.show(this._overlayId, overlaySettings);
        this.unsubscribe();
        this._overlayOpenedSub = (_a = this.overlayService.onOpened).pipe.apply(_a, tslib_1.__spread(this._overlaySubFilter)).subscribe(function () {
            _this.onOpened.emit();
        });
        this._overlayClosingSub = (_b = this.overlayService
            .onClosing).pipe.apply(_b, tslib_1.__spread(this._overlaySubFilter)).subscribe(function (e) {
            /** @type {?} */
            var eventArgs = { cancel: false, event: e.event };
            _this.onClosing.emit(eventArgs);
            e.cancel = eventArgs.cancel;
            //  in case event is not canceled this will close the toggle and we need to unsubscribe.
            //  Otherwise if for some reason, e.g. close on outside click, close() gets called before
            //  onClosed was fired we will end with calling onClosing more than once
            if (!e.cancel) {
                _this.clearSubscription(_this._overlayClosingSub);
            }
        });
        this._overlayClosedSub = (_c = this.overlayService.onClosed).pipe.apply(_c, tslib_1.__spread(this._overlaySubFilter)).subscribe(this.overlayClosed);
    };
    /**
     * Closes the toggle.
     *
     * ```typescript
     * this.myToggle.close();
     * ```
     */
    /**
     * Closes the toggle.
     *
     * ```typescript
     * this.myToggle.close();
     * ```
     * @return {?}
     */
    IgxToggleDirective.prototype.close = /**
     * Closes the toggle.
     *
     * ```typescript
     * this.myToggle.close();
     * ```
     * @return {?}
     */
    function () {
        //  if toggle is collapsed do nothing
        //  if there is close animation do nothing, toggle will close anyway
        /** @type {?} */
        var info = this.overlayService.getOverlayById(this._overlayId);
        /** @type {?} */
        var hasCloseAnimation = info ? info.closeAnimationPlayer : false;
        if (this._collapsed || hasCloseAnimation) {
            return;
        }
        this.overlayService.hide(this._overlayId);
    };
    /**
     * Opens or closes the toggle, depending on its current state.
     *
     * ```typescript
     * this.myToggle.toggle();
     * ```
     */
    /**
     * Opens or closes the toggle, depending on its current state.
     *
     * ```typescript
     * this.myToggle.toggle();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    IgxToggleDirective.prototype.toggle = /**
     * Opens or closes the toggle, depending on its current state.
     *
     * ```typescript
     * this.myToggle.toggle();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    function (overlaySettings) {
        //  if toggle is collapsed call open
        //  if there is close animation call open
        if (this.collapsed || this.isClosing) {
            this.open(overlaySettings);
        }
        else {
            this.close();
        }
    };
    Object.defineProperty(IgxToggleDirective.prototype, "isClosing", {
        /** @hidden @internal */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            /** @type {?} */
            var info = this.overlayService.getOverlayById(this._overlayId);
            return info ? info.closeAnimationPlayer : false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Repositions the toggle.
     * ```typescript
     * this.myToggle.reposition();
     * ```
     */
    /**
     * Repositions the toggle.
     * ```typescript
     * this.myToggle.reposition();
     * ```
     * @return {?}
     */
    IgxToggleDirective.prototype.reposition = /**
     * Repositions the toggle.
     * ```typescript
     * this.myToggle.reposition();
     * ```
     * @return {?}
     */
    function () {
        this.overlayService.reposition(this._overlayId);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxToggleDirective.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.navigationService && this.id) {
            this.navigationService.add(this.id, this);
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxToggleDirective.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.navigationService && this.id) {
            this.navigationService.remove(this.id);
        }
        if (!this.collapsed && this._overlayId) {
            this.overlayService.hide(this._overlayId);
        }
        this.unsubscribe();
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    /**
     * @private
     * @return {?}
     */
    IgxToggleDirective.prototype.unsubscribe = /**
     * @private
     * @return {?}
     */
    function () {
        this.clearSubscription(this._overlayOpenedSub);
        this.clearSubscription(this._overlayClosingSub);
        this.clearSubscription(this._overlayClosedSub);
    };
    /**
     * @private
     * @param {?} subscription
     * @return {?}
     */
    IgxToggleDirective.prototype.clearSubscription = /**
     * @private
     * @param {?} subscription
     * @return {?}
     */
    function (subscription) {
        if (subscription && !subscription.closed) {
            subscription.unsubscribe();
        }
    };
    IgxToggleDirective.decorators = [
        { type: Directive, args: [{
                    exportAs: 'toggle',
                    selector: '[igxToggle]'
                },] }
    ];
    /** @nocollapse */
    IgxToggleDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
        { type: IgxNavigationService, decorators: [{ type: Optional }] }
    ]; };
    IgxToggleDirective.propDecorators = {
        onOpened: [{ type: Output }],
        onOpening: [{ type: Output }],
        onClosed: [{ type: Output }],
        onClosing: [{ type: Output }],
        id: [{ type: Input }],
        hiddenClass: [{ type: HostBinding, args: ['class.igx-toggle--hidden',] }, { type: HostBinding, args: ['attr.aria-hidden',] }],
        defaultClass: [{ type: HostBinding, args: ['class.igx-toggle',] }]
    };
    return IgxToggleDirective;
}());
export { IgxToggleDirective };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    IgxToggleDirective.prototype._overlayId;
    /**
     * @type {?}
     * @private
     */
    IgxToggleDirective.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    IgxToggleDirective.prototype._overlaySubFilter;
    /**
     * @type {?}
     * @private
     */
    IgxToggleDirective.prototype._overlayOpenedSub;
    /**
     * @type {?}
     * @private
     */
    IgxToggleDirective.prototype._overlayClosingSub;
    /**
     * @type {?}
     * @private
     */
    IgxToggleDirective.prototype._overlayClosedSub;
    /**
     * Emits an event after the toggle container is opened.
     *
     * ```typescript
     * onToggleOpened(event) {
     *    alert("Toggle opened!");
     * }
     * ```
     *
     * ```html
     * <div
     *   igxToggle
     *   (onOpened)='onToggleOpened($event)'>
     * </div>
     * ```
     * @type {?}
     */
    IgxToggleDirective.prototype.onOpened;
    /**
     * Emits an event before the toggle container is opened.
     *
     * ```typescript
     * onToggleOpening(event) {
     *  alert("Toggle opening!");
     * }
     * ```
     *
     * ```html
     * <div
     *   igxToggle
     *   (onOpening)='onToggleOpening($event)'>
     * </div>
     * ```
     * @type {?}
     */
    IgxToggleDirective.prototype.onOpening;
    /**
     * Emits an event after the toggle container is closed.
     *
     * ```typescript
     * onToggleClosed(event) {
     *  alert("Toggle closed!");
     * }
     * ```
     *
     * ```html
     * <div
     *   igxToggle
     *   (onClosed)='onToggleClosed($event)'>
     * </div>
     * ```
     * @type {?}
     */
    IgxToggleDirective.prototype.onClosed;
    /**
     * Emits an event before the toggle container is closed.
     *
     * ```typescript
     * onToggleClosing(event) {
     *  alert("Toggle closing!");
     * }
     * ```
     *
     * ```html
     * <div
     *  igxToggle
     *  (onClosing)='onToggleClosing($event)'>
     * </div>
     * ```
     * @type {?}
     */
    IgxToggleDirective.prototype.onClosing;
    /**
     * @type {?}
     * @private
     */
    IgxToggleDirective.prototype._collapsed;
    /**
     * Identifier which is registered into `IgxNavigationService`
     *
     * ```typescript
     * let myToggleId = this.toggle.id;
     * ```
     * @type {?}
     */
    IgxToggleDirective.prototype.id;
    /**
     * @type {?}
     * @private
     */
    IgxToggleDirective.prototype.overlayClosed;
    /**
     * @type {?}
     * @private
     */
    IgxToggleDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    IgxToggleDirective.prototype.cdr;
    /**
     * @type {?}
     * @protected
     */
    IgxToggleDirective.prototype.overlayService;
    /**
     * @type {?}
     * @private
     */
    IgxToggleDirective.prototype.navigationService;
}
var IgxToggleActionDirective = /** @class */ (function () {
    function IgxToggleActionDirective(element, navigationService) {
        this.element = element;
        this.navigationService = navigationService;
    }
    Object.defineProperty(IgxToggleActionDirective.prototype, "closeOnOutsideClick", {
        /**
         * DEPRECATED. Determines whether the toggle should close when you click outside.
         *
         * ```typescript
         * // get
         * let closesOnOutsideClick = this.toggle.closeOnOutsideClick;
         * ```
         */
        get: /**
         * DEPRECATED. Determines whether the toggle should close when you click outside.
         *
         * ```typescript
         * // get
         * let closesOnOutsideClick = this.toggle.closeOnOutsideClick;
         * ```
         * @return {?}
         */
        function () {
            return this._closeOnOutsideClick;
        },
        /**
         * ```html
         * <!--set-->
         * <div igxToggleAction [closeOnOutsideClick]="'true'"></div>
         * ```
         */
        set: /**
         * ```html
         * <!--set-->
         * <div igxToggleAction [closeOnOutsideClick]="'true'"></div>
         * ```
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._closeOnOutsideClick = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxToggleActionDirective.prototype, "target", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            if (typeof this._target === 'string') {
                return this.navigationService.get(this._target);
            }
            return this._target;
        },
        /**
         * @hidden
         */
        set: /**
         * @hidden
         * @param {?} target
         * @return {?}
         */
        function (target) {
            if (target !== null && target !== '') {
                this._target = target;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxToggleActionDirective.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._overlayDefaults = {
            positionStrategy: new ConnectedPositioningStrategy({ target: this.element.nativeElement }),
            scrollStrategy: new AbsoluteScrollStrategy(),
            closeOnOutsideClick: true,
            modal: false,
            excludePositionTarget: true
        };
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxToggleActionDirective.prototype.onClick = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this._closeOnOutsideClick !== undefined) {
            this._overlayDefaults.closeOnOutsideClick = this._closeOnOutsideClick;
        }
        if (this.outlet) {
            this._overlayDefaults.outlet = this.outlet;
        }
        /** @type {?} */
        var clonedSettings = Object.assign({}, this._overlayDefaults, this.overlaySettings);
        this.updateOverlaySettings(clonedSettings);
        this.target.toggle(clonedSettings);
    };
    /**
     * Updates provided overlay settings
     * @param settings settings to update
     * @returns returns updated copy of provided overlay settings
     */
    /**
     * Updates provided overlay settings
     * @protected
     * @param {?} settings settings to update
     * @return {?} returns updated copy of provided overlay settings
     */
    IgxToggleActionDirective.prototype.updateOverlaySettings = /**
     * Updates provided overlay settings
     * @protected
     * @param {?} settings settings to update
     * @return {?} returns updated copy of provided overlay settings
     */
    function (settings) {
        if (settings && settings.positionStrategy) {
            /** @type {?} */
            var positionStrategyClone = settings.positionStrategy.clone();
            positionStrategyClone.settings.target = this.element.nativeElement;
            settings.positionStrategy = positionStrategyClone;
        }
        return settings;
    };
    IgxToggleActionDirective.decorators = [
        { type: Directive, args: [{
                    exportAs: 'toggle-action',
                    selector: '[igxToggleAction]'
                },] }
    ];
    /** @nocollapse */
    IgxToggleActionDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: IgxNavigationService, decorators: [{ type: Optional }] }
    ]; };
    IgxToggleActionDirective.propDecorators = {
        overlaySettings: [{ type: Input }],
        closeOnOutsideClick: [{ type: Input }],
        outlet: [{ type: Input, args: ['igxToggleOutlet',] }],
        target: [{ type: Input, args: ['igxToggleAction',] }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    tslib_1.__decorate([
        DeprecateProperty("igxToggleAction 'closeOnOutsideClick' input is deprecated. Use 'overlaySettings' input object instead."),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxToggleActionDirective.prototype, "closeOnOutsideClick", null);
    return IgxToggleActionDirective;
}());
export { IgxToggleActionDirective };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    IgxToggleActionDirective.prototype._overlayDefaults;
    /**
     * Provide settings that control the toggle overlay positioning, interaction and scroll behavior.
     * ```typescript
     * const settings: OverlaySettings = {
     *      closeOnOutsideClick: false,
     *      modal: false
     *  }
     * ```
     * ---
     * ```html
     * <!--set-->
     * <div igxToggleAction [overlaySettings]="settings"></div>
     * ```
     * @type {?}
     */
    IgxToggleActionDirective.prototype.overlaySettings;
    /**
     * @type {?}
     * @private
     */
    IgxToggleActionDirective.prototype._closeOnOutsideClick;
    /**
     * Determines where the toggle element overlay should be attached.
     *
     * ```html
     * <!--set-->
     * <div igxToggleAction [igxToggleOutlet]="outlet"></div>
     * ```
     * Where `outlet` in an instance of `IgxOverlayOutletDirective` or an `ElementRef`
     * @type {?}
     */
    IgxToggleActionDirective.prototype.outlet;
    /**
     * @type {?}
     * @protected
     */
    IgxToggleActionDirective.prototype._target;
    /**
     * @type {?}
     * @private
     */
    IgxToggleActionDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    IgxToggleActionDirective.prototype.navigationService;
}
/**
 * Mark an element as an igxOverlay outlet container.
 * Directive instance is exported as `overlay-outlet` to be assigned to templates variables:
 * ```html
 * <div igxOverlayOutlet #outlet="overlay-outlet"></div>
 * ```
 */
var IgxOverlayOutletDirective = /** @class */ (function () {
    function IgxOverlayOutletDirective(element) {
        this.element = element;
    }
    Object.defineProperty(IgxOverlayOutletDirective.prototype, "nativeElement", {
        /** @hidden */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    IgxOverlayOutletDirective.decorators = [
        { type: Directive, args: [{
                    exportAs: 'overlay-outlet',
                    selector: '[igxOverlayOutlet]'
                },] }
    ];
    /** @nocollapse */
    IgxOverlayOutletDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgxOverlayOutletDirective;
}());
export { IgxOverlayOutletDirective };
if (false) {
    /** @type {?} */
    IgxOverlayOutletDirective.prototype.element;
}
/**
 * @hidden
 */
var IgxToggleModule = /** @class */ (function () {
    function IgxToggleModule() {
    }
    IgxToggleModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],
                    exports: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],
                    providers: [IgxNavigationService]
                },] }
    ];
    return IgxToggleModule;
}());
export { IgxToggleModule };
//# sourceMappingURL=data:application/json;base64,