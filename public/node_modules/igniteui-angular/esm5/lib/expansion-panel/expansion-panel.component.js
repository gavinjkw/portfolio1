/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectorRef, EventEmitter, HostBinding, Input, Output, ContentChild, forwardRef, } from '@angular/core';
import { AnimationBuilder, useAnimation } from '@angular/animations';
import { growVerOut, growVerIn } from '../animations/main';
import { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';
import { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';
import { IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';
/** @type {?} */
var NEXT_ID = 0;
/**
 * @record
 */
export function AnimationSettings() { }
if (false) {
    /** @type {?} */
    AnimationSettings.prototype.openAnimation;
    /** @type {?} */
    AnimationSettings.prototype.closeAnimation;
}
var IgxExpansionPanelComponent = /** @class */ (function () {
    function IgxExpansionPanelComponent(cdr, builder) {
        this.cdr = cdr;
        this.builder = builder;
        /**
         * Sets/gets the animation settings of the expansion panel component
         * Open and Close animation should be passed
         *
         * Get
         * ```typescript
         *  const currentAnimations = this.panel.animationSettings;
         * ```
         * Set
         * ```typescript
         *  import { slideInLeft, slideOutRight } from 'igniteui-angular';
         *  ...
         *  this.panel.animationsSettings = {
         *      openAnimation: slideInLeft,
         *      closeAnimation: slideOutRight
         * };
         * ```
         * or via template
         * ```typescript
         *  import { slideInLeft, slideOutRight } from 'igniteui-angular';
         *  ...
         *  myCustomAnimationObject = {
         *      openAnimation: slideInLeft,
         *      closeAnimation: slideOutRight
         * };
         * ```html
         *  <igx-expansion-panel [animationSettings]='myCustomAnimationObject'>
         *  ...
         *  </igx-expansion-panel>
         * ```
         */
        this.animationSettings = {
            openAnimation: growVerIn,
            closeAnimation: growVerOut
        };
        /**
         * Sets/gets the `id` of the expansion panel component.
         * If not set, `id` will have value `"igx-expansion-panel-0"`;
         * ```html
         * <igx-expansion-panel id = "my-first-expansion-panel"></igx-expansion-panel>
         * ```
         * ```typescript
         * let panelId =  this.panel.id;
         * ```
         * \@memberof IgxExpansionPanelComponent
         */
        this.id = "igx-expansion-panel-" + NEXT_ID++;
        /**
         * @hidden
         */
        this.cssClass = 'igx-expansion-panel';
        /**
         * Gets/sets whether the component is collapsed (its content is hidden)
         * Get
         * ```typescript
         *  const myPanelState: boolean = this.panel.collapsed;
         * ```
         * Set
         * ```html
         *  this.panel.collapsed = true;
         * ```
         */
        this.collapsed = true;
        /**
         * Emitted when the expansion panel finishes collapsing
         * ```typescript
         *  handleCollapsed(event: {
         *  panel: IgxExpansionPanelComponent,
         *  event: Event
         * })
         * ```
         * ```html
         *  <igx-expansion-panel (onCollapsed)="handleCollapsed($event)">
         *      ...
         *  </igx-expansion-panel>
         * ```
         */
        this.onCollapsed = new EventEmitter();
        /**
         * Emitted when the expansion panel finishes expanding
         * ```typescript
         *  handleExpanded(event: {
         *  panel: IgxExpansionPanelComponent,
         *  event: Event
         * })
         * ```
         * ```html
         *  <igx-expansion-panel (onExpanded)="handleExpanded($event)">
         *      ...
         *  </igx-expansion-panel>
         * ```
         */
        this.onExpanded = new EventEmitter();
    }
    Object.defineProperty(IgxExpansionPanelComponent.prototype, "headerId", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.header ? this.id + "-header" : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} cb
     * @return {?}
     */
    IgxExpansionPanelComponent.prototype.playOpenAnimation = /**
     * @private
     * @param {?} cb
     * @return {?}
     */
    function (cb) {
        if (!this.body) { // if not body element is passed, there is nothing to animate
            return;
        }
        /** @type {?} */
        var animation = useAnimation(this.animationSettings.openAnimation);
        /** @type {?} */
        var animationBuilder = this.builder.build(animation);
        /** @type {?} */
        var openAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);
        openAnimationPlayer.onDone(function () {
            cb();
            openAnimationPlayer.reset();
        });
        openAnimationPlayer.play();
    };
    /**
     * @private
     * @param {?} cb
     * @return {?}
     */
    IgxExpansionPanelComponent.prototype.playCloseAnimation = /**
     * @private
     * @param {?} cb
     * @return {?}
     */
    function (cb) {
        if (!this.body) { // if not body element is passed, there is nothing to animate
            return;
        }
        /** @type {?} */
        var animation = useAnimation(this.animationSettings.closeAnimation);
        /** @type {?} */
        var animationBuilder = this.builder.build(animation);
        /** @type {?} */
        var closeAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);
        closeAnimationPlayer.onDone(function () {
            cb();
            closeAnimationPlayer.reset();
        });
        closeAnimationPlayer.play();
    };
    /**
     * Collapses the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button (click)="myPanel.collapse($event)">Collpase Panel</button>
     * ```
     */
    /**
     * Collapses the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button (click)="myPanel.collapse($event)">Collpase Panel</button>
     * ```
     * @param {?=} evt
     * @return {?}
     */
    IgxExpansionPanelComponent.prototype.collapse = /**
     * Collapses the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button (click)="myPanel.collapse($event)">Collpase Panel</button>
     * ```
     * @param {?=} evt
     * @return {?}
     */
    function (evt) {
        var _this = this;
        if (this.collapsed) { // If expansion panel is already collapsed, do nothing
            return;
        }
        this.playCloseAnimation(function () {
            _this.onCollapsed.emit({ event: evt, panel: _this });
            _this.collapsed = true;
        });
    };
    /**
     * Expands the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button (click)="myPanel.expand($event)">Expand Panel</button>
     * ```
     */
    /**
     * Expands the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button (click)="myPanel.expand($event)">Expand Panel</button>
     * ```
     * @param {?=} evt
     * @return {?}
     */
    IgxExpansionPanelComponent.prototype.expand = /**
     * Expands the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button (click)="myPanel.expand($event)">Expand Panel</button>
     * ```
     * @param {?=} evt
     * @return {?}
     */
    function (evt) {
        var _this = this;
        if (!this.collapsed) { // If the panel is already opened, do nothing
            return;
        }
        this.collapsed = false;
        this.cdr.detectChanges();
        this.playOpenAnimation(function () {
            _this.onExpanded.emit({ event: evt, panel: _this });
        });
    };
    /**
     * Toggles the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button (click)="myPanel.toggle($event)">Expand Panel</button>
     * ```
     */
    /**
     * Toggles the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button (click)="myPanel.toggle($event)">Expand Panel</button>
     * ```
     * @param {?=} evt
     * @return {?}
     */
    IgxExpansionPanelComponent.prototype.toggle = /**
     * Toggles the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button (click)="myPanel.toggle($event)">Expand Panel</button>
     * ```
     * @param {?=} evt
     * @return {?}
     */
    function (evt) {
        if (this.collapsed) {
            this.open(evt);
        }
        else {
            this.close(evt);
        }
    };
    /**
     * @param {?=} evt
     * @return {?}
     */
    IgxExpansionPanelComponent.prototype.open = /**
     * @param {?=} evt
     * @return {?}
     */
    function (evt) {
        this.expand(evt);
    };
    /**
     * @param {?=} evt
     * @return {?}
     */
    IgxExpansionPanelComponent.prototype.close = /**
     * @param {?=} evt
     * @return {?}
     */
    function (evt) {
        this.collapse(evt);
    };
    IgxExpansionPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-expansion-panel',
                    template: "<ng-content select=\"igx-expansion-panel-header\"></ng-content>\n<ng-content *ngIf=\"!collapsed\" select=\"igx-expansion-panel-body\"></ng-content>\n",
                    providers: [{ provide: IGX_EXPANSION_PANEL_COMPONENT, useExisting: IgxExpansionPanelComponent }]
                }] }
    ];
    /** @nocollapse */
    IgxExpansionPanelComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: AnimationBuilder }
    ]; };
    IgxExpansionPanelComponent.propDecorators = {
        animationSettings: [{ type: Input }],
        id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
        cssClass: [{ type: HostBinding, args: ['class.igx-expansion-panel',] }],
        collapsed: [{ type: Input }],
        onCollapsed: [{ type: Output }],
        onExpanded: [{ type: Output }],
        body: [{ type: ContentChild, args: [forwardRef(function () { return IgxExpansionPanelBodyComponent; }), { read: forwardRef(function () { return IgxExpansionPanelBodyComponent; }) },] }],
        header: [{ type: ContentChild, args: [forwardRef(function () { return IgxExpansionPanelHeaderComponent; }), { read: forwardRef(function () { return IgxExpansionPanelHeaderComponent; }) },] }]
    };
    return IgxExpansionPanelComponent;
}());
export { IgxExpansionPanelComponent };
if (false) {
    /**
     * Sets/gets the animation settings of the expansion panel component
     * Open and Close animation should be passed
     *
     * Get
     * ```typescript
     *  const currentAnimations = this.panel.animationSettings;
     * ```
     * Set
     * ```typescript
     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';
     *  ...
     *  this.panel.animationsSettings = {
     *      openAnimation: slideInLeft,
     *      closeAnimation: slideOutRight
     * };
     * ```
     * or via template
     * ```typescript
     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';
     *  ...
     *  myCustomAnimationObject = {
     *      openAnimation: slideInLeft,
     *      closeAnimation: slideOutRight
     * };
     * ```html
     *  <igx-expansion-panel [animationSettings]='myCustomAnimationObject'>
     *  ...
     *  </igx-expansion-panel>
     * ```
     * @type {?}
     */
    IgxExpansionPanelComponent.prototype.animationSettings;
    /**
     * Sets/gets the `id` of the expansion panel component.
     * If not set, `id` will have value `"igx-expansion-panel-0"`;
     * ```html
     * <igx-expansion-panel id = "my-first-expansion-panel"></igx-expansion-panel>
     * ```
     * ```typescript
     * let panelId =  this.panel.id;
     * ```
     * \@memberof IgxExpansionPanelComponent
     * @type {?}
     */
    IgxExpansionPanelComponent.prototype.id;
    /**
     * @hidden
     * @type {?}
     */
    IgxExpansionPanelComponent.prototype.cssClass;
    /**
     * Gets/sets whether the component is collapsed (its content is hidden)
     * Get
     * ```typescript
     *  const myPanelState: boolean = this.panel.collapsed;
     * ```
     * Set
     * ```html
     *  this.panel.collapsed = true;
     * ```
     * @type {?}
     */
    IgxExpansionPanelComponent.prototype.collapsed;
    /**
     * Emitted when the expansion panel finishes collapsing
     * ```typescript
     *  handleCollapsed(event: {
     *  panel: IgxExpansionPanelComponent,
     *  event: Event
     * })
     * ```
     * ```html
     *  <igx-expansion-panel (onCollapsed)="handleCollapsed($event)">
     *      ...
     *  </igx-expansion-panel>
     * ```
     * @type {?}
     */
    IgxExpansionPanelComponent.prototype.onCollapsed;
    /**
     * Emitted when the expansion panel finishes expanding
     * ```typescript
     *  handleExpanded(event: {
     *  panel: IgxExpansionPanelComponent,
     *  event: Event
     * })
     * ```
     * ```html
     *  <igx-expansion-panel (onExpanded)="handleExpanded($event)">
     *      ...
     *  </igx-expansion-panel>
     * ```
     * @type {?}
     */
    IgxExpansionPanelComponent.prototype.onExpanded;
    /**
     * @hidden
     * @type {?}
     */
    IgxExpansionPanelComponent.prototype.body;
    /**
     * @hidden
     * @type {?}
     */
    IgxExpansionPanelComponent.prototype.header;
    /**
     * @type {?}
     * @private
     */
    IgxExpansionPanelComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    IgxExpansionPanelComponent.prototype.builder;
}
//# sourceMappingURL=data:application/json;base64,