/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { Component, ElementRef, HostBinding, Input, NgModule, TemplateRef, ViewChild } from '@angular/core';
import { IgxIconModule } from '../icon/index';
/** @type {?} */
var NEXT_ID = 0;
/** @enum {string} */
var Size = {
    SMALL: 'small',
    MEDIUM: 'medium',
    LARGE: 'large',
};
export { Size };
/** @enum {string} */
var AvatarType = {
    DEFAULT: 'default',
    INITIALS: 'initials',
    IMAGE: 'image',
    ICON: 'icon',
};
export { AvatarType };
/**
 * **Ignite UI for Angular Avatar** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/avatar.html)
 *
 * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an
 * image, someone's initials or a material icon from the google material icon set.
 *
 * Example:
 * ```html
 * <igx-avatar initials="MS" roundShape="true" size="large">
 * </igx-avatar>
 * ```
 */
var IgxAvatarComponent = /** @class */ (function () {
    function IgxAvatarComponent(elementRef) {
        this.elementRef = elementRef;
        /**
         * Returns the `aria-label` of the avatar.
         *
         * ```typescript
         * let ariaLabel = this.avatar.ariaLabel;
         * ```
         *
         */
        this.ariaLabel = 'avatar';
        /**
         * Returns the `role` attribute of the avatar.
         *
         * ```typescript
         * let avatarRole = this.avatar.role;
         * ```
         *
         * \@memberof IgxAvatarComponent
         */
        this.role = 'img';
        /**
         * Returns the class of the avatar.
         *
         * ```typescript
         * let avatarCLass =  this.avatar.cssClass;
         * ```
         *
         * \@memberof IgxAvatarComponent
         */
        this.cssClass = 'igx-avatar';
        /**
         * @hidden
         */
        this._size = 'small';
        /**
         * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `"igx-avatar-0"`.
         *
         * ```html
         * <igx-avatar id="my-first-avatar"></igx-avatar>
         * ```
         *
         * \@memberof IgxAvatarComponent
         */
        this.id = "igx-avatar-" + NEXT_ID++;
        /**
         * Sets a round shape to the avatar if `roundShape` is `"true"`.
         * By default the shape of the avatar is a square.
         *
         * ```html
         * <igx-avatar roundShape = "true" ></igx-avatar>
         * ```
         *
         * \@memberof IgxAvatarComponent
         */
        this.roundShape = false;
    }
    Object.defineProperty(IgxAvatarComponent.prototype, "size", {
        /**
         * Returns the `size` of the avatar.
         *
         * ```typescript
         *let avatarSize =  this.avatar.size;
         * ```
         *
         * @memberof IgxAvatarComponent
         */
        get: /**
         * Returns the `size` of the avatar.
         *
         * ```typescript
         * let avatarSize =  this.avatar.size;
         * ```
         *
         * \@memberof IgxAvatarComponent
         * @return {?}
         */
        function () {
            return this._size;
        },
        /**
         * Sets the `size`  of the avatar.
         * By default the `size` is `"small"`. It can be set to `"medium"` or `"large"`.
         *
         * ```
         * <igx-avatar size="large"></igx-avatar>
         * ```
         *
         * @memberof IgxAvatarComponent
         */
        set: /**
         * Sets the `size`  of the avatar.
         * By default the `size` is `"small"`. It can be set to `"medium"` or `"large"`.
         *
         * ```
         * <igx-avatar size="large"></igx-avatar>
         * ```
         *
         * \@memberof IgxAvatarComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            switch (value) {
                case 'small':
                case 'medium':
                case 'large':
                    this._size = value;
                    break;
                default:
                    this._size = 'small';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAvatarComponent.prototype, "type", {
        /**
         * Returns the type of the avatar.
         *
         * ```typescript
         * let avatarType = this.avatar.type;
         * ```
         *
         * @memberof IgxAvatarComponent
         */
        get: /**
         * Returns the type of the avatar.
         *
         * ```typescript
         * let avatarType = this.avatar.type;
         * ```
         *
         * \@memberof IgxAvatarComponent
         * @return {?}
         */
        function () {
            if (this.src) {
                return AvatarType.IMAGE;
            }
            if (this.icon) {
                return AvatarType.ICON;
            }
            if (this.initials) {
                return AvatarType.INITIALS;
            }
            return AvatarType.DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAvatarComponent.prototype, "template", {
        /**
         * Returns the template of the avatar.
         *
         * ```typescript
         * let template = this.avatar.template;
         * ```
         *
         * @memberof IgxAvatarComponent
         */
        get: /**
         * Returns the template of the avatar.
         *
         * ```typescript
         * let template = this.avatar.template;
         * ```
         *
         * \@memberof IgxAvatarComponent
         * @return {?}
         */
        function () {
            switch (this.type) {
                case AvatarType.IMAGE:
                    return this.imageTemplate;
                case AvatarType.INITIALS:
                    return this.initialsTemplate;
                case AvatarType.ICON:
                    return this.iconTemplate;
                default:
                    return this.defaultTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxAvatarComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.roleDescription = this.getRole();
    };
    /**
     *@hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxAvatarComponent.prototype.ngAfterViewInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.classList
            .add("igx-avatar--" + this._size, "igx-avatar--" + this.type);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @private
     * @return {?}
     */
    IgxAvatarComponent.prototype.getRole = /**
     * @hidden
     * @private
     * @return {?}
     */
    function () {
        switch (this.type) {
            case AvatarType.IMAGE:
                return 'image avatar';
            case AvatarType.ICON:
                return 'icon avatar';
            case AvatarType.INITIALS:
                return 'initials avatar';
            default:
                return 'custom avatar';
        }
    };
    /**
     * Returns the url of the `image`.
     *
     * ```typescript
     * let imageSourceUrl = this.avatar.getSrcUrl();
     * ```
     *
     * @memberof IgxAvatarComponent
     */
    /**
     * Returns the url of the `image`.
     *
     * ```typescript
     * let imageSourceUrl = this.avatar.getSrcUrl();
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @return {?}
     */
    IgxAvatarComponent.prototype.getSrcUrl = /**
     * Returns the url of the `image`.
     *
     * ```typescript
     * let imageSourceUrl = this.avatar.getSrcUrl();
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @return {?}
     */
    function () {
        return "url(" + this.src + ")";
    };
    IgxAvatarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-avatar',
                    template: "<ng-template #defaultTemplate>\n    <ng-content></ng-content>\n</ng-template>\n\n<ng-template #imageTemplate>\n    <div #image class=\"igx-avatar__image\" [style.backgroundImage]=\"getSrcUrl()\"></div>\n</ng-template>\n\n<ng-template #initialsTemplate>\n    <span>{{initials.substring(0, 2)}}</span>\n</ng-template>\n\n<ng-template #iconTemplate>\n     <igx-icon>{{icon}}</igx-icon>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template\"></ng-container>\n"
                }] }
    ];
    /** @nocollapse */
    IgxAvatarComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    IgxAvatarComponent.propDecorators = {
        image: [{ type: ViewChild, args: ['image',] }],
        defaultTemplate: [{ type: ViewChild, args: ['defaultTemplate', { read: TemplateRef },] }],
        imageTemplate: [{ type: ViewChild, args: ['imageTemplate', { read: TemplateRef },] }],
        initialsTemplate: [{ type: ViewChild, args: ['initialsTemplate', { read: TemplateRef },] }],
        iconTemplate: [{ type: ViewChild, args: ['iconTemplate', { read: TemplateRef },] }],
        ariaLabel: [{ type: HostBinding, args: ['attr.aria-label',] }],
        role: [{ type: HostBinding, args: ['attr.role',] }],
        cssClass: [{ type: HostBinding, args: ['class.igx-avatar',] }],
        roleDescription: [{ type: HostBinding, args: ['attr.aria-roledescription',] }],
        id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
        roundShape: [{ type: HostBinding, args: ['class.igx-avatar--rounded',] }, { type: Input }],
        color: [{ type: HostBinding, args: ['style.color',] }, { type: Input }],
        bgColor: [{ type: HostBinding, args: ['style.background',] }, { type: Input }],
        initials: [{ type: Input }],
        icon: [{ type: Input }],
        src: [{ type: Input }],
        size: [{ type: Input }]
    };
    return IgxAvatarComponent;
}());
export { IgxAvatarComponent };
if (false) {
    /**
     * This is a reference to the avatar `image` element in the DOM.
     *
     * ```typescript
     *  let image =  this.avatar.image;
     * ```
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.image;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxAvatarComponent.prototype.defaultTemplate;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxAvatarComponent.prototype.imageTemplate;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxAvatarComponent.prototype.initialsTemplate;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxAvatarComponent.prototype.iconTemplate;
    /**
     * Returns the `aria-label` of the avatar.
     *
     * ```typescript
     * let ariaLabel = this.avatar.ariaLabel;
     * ```
     *
     * @type {?}
     */
    IgxAvatarComponent.prototype.ariaLabel;
    /**
     * Returns the `role` attribute of the avatar.
     *
     * ```typescript
     * let avatarRole = this.avatar.role;
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.role;
    /**
     * Returns the class of the avatar.
     *
     * ```typescript
     * let avatarCLass =  this.avatar.cssClass;
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.cssClass;
    /**
     * Returns the type of the avatar.
     * The avatar can be: `"initials type avatar"`, `"icon type avatar"` or `"image type avatar"`.
     *
     * ```typescript
     * let avatarDescription = this.avatar.roleDescription;
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.roleDescription;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxAvatarComponent.prototype._size;
    /**
     * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `"igx-avatar-0"`.
     *
     * ```html
     * <igx-avatar id="my-first-avatar"></igx-avatar>
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.id;
    /**
     * Sets a round shape to the avatar if `roundShape` is `"true"`.
     * By default the shape of the avatar is a square.
     *
     * ```html
     * <igx-avatar roundShape = "true" ></igx-avatar>
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.roundShape;
    /**
     * Sets the avatar's `initials`/`icon` color.
     *
     * ```html
     * <igx-avatar color="blue"></igx-avatar>
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.color;
    /**
     * Sets the background color of the avatar.
     *
     * ```html
     * <igx-avatar bgColor="yellow"></igx-avatar>
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.bgColor;
    /**
     * Sets `initials` to the avatar.
     *
     * ```html
     * <igx-avatar initials="MN"></igx-avatar>
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.initials;
    /**
     * Sets an `icon` to the avatar. All icons from the material icon set are supported.
     *
     * ```html
     * <igx-avatar icon="phone"></igx-avatar>
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.icon;
    /**
     * Sets the `image` source of the avatar.
     *
     * ```html
     * <igx-avatar src="images/picture.jpg"></igx-avatar>
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.src;
    /** @type {?} */
    IgxAvatarComponent.prototype.elementRef;
}
/**
 * @hidden
 */
var IgxAvatarModule = /** @class */ (function () {
    function IgxAvatarModule() {
    }
    IgxAvatarModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxAvatarComponent],
                    exports: [IgxAvatarComponent],
                    imports: [CommonModule, IgxIconModule]
                },] }
    ];
    return IgxAvatarModule;
}());
export { IgxAvatarModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvYXZhdGFyL2F2YXRhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBRUgsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsS0FBSyxFQUNMLFFBQVEsRUFFUixXQUFXLEVBQ1gsU0FBUyxFQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7O0lBRTFDLE9BQU8sR0FBRyxDQUFDOzs7SUFHWCxPQUFRLE9BQU87SUFDZixRQUFTLFFBQVE7SUFDakIsT0FBUSxPQUFPOzs7OztJQUlmLFNBQVUsU0FBUztJQUNuQixVQUFXLFVBQVU7SUFDckIsT0FBUSxPQUFPO0lBQ2YsTUFBTyxNQUFNOzs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JqQjtJQThRSSw0QkFBbUIsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTs7Ozs7Ozs7O1FBNU5sQyxjQUFTLEdBQUcsUUFBUSxDQUFDOzs7Ozs7Ozs7O1FBWXJCLFNBQUksR0FBRyxLQUFLLENBQUM7Ozs7Ozs7Ozs7UUFZYixhQUFRLEdBQUcsWUFBWSxDQUFDOzs7O1FBbUJ2QixVQUFLLEdBQWtCLE9BQU8sQ0FBQzs7Ozs7Ozs7OztRQWFoQyxPQUFFLEdBQUcsZ0JBQWMsT0FBTyxFQUFJLENBQUM7Ozs7Ozs7Ozs7O1FBZS9CLGVBQVUsR0FBRyxLQUFLLENBQUM7SUFxSm1CLENBQUM7SUExRTlDLHNCQUNXLG9DQUFJO1FBVmY7Ozs7Ozs7O1dBUUc7Ozs7Ozs7Ozs7O1FBQ0g7WUFFSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdEIsQ0FBQztRQUVEOzs7Ozs7Ozs7V0FTRzs7Ozs7Ozs7Ozs7OztRQUNILFVBQWdC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QUMsa0JBQWtCO2tDQWM5QixXQUFXLFNBQUMsMkJBQTJCO3FCQWlCdkMsV0FBVyxTQUFDLFNBQVMsY0FDckIsS0FBSzs2QkFjTCxXQUFXLFNBQUMsMkJBQTJCLGNBQ3ZDLEtBQUs7d0JBYUwsV0FBVyxTQUFDLGFBQWEsY0FDekIsS0FBSzswQkFhTCxXQUFXLFNBQUMsa0JBQWtCLGNBQzlCLEtBQUs7MkJBWUwsS0FBSzt1QkFZTCxLQUFLO3NCQVlMLEtBQUs7dUJBWUwsS0FBSzs7SUF1SFYseUJBQUM7Q0FBQSxBQTNURCxJQTJUQztTQXZUWSxrQkFBa0I7Ozs7Ozs7Ozs7O0lBVTNCLG1DQUN5Qjs7Ozs7O0lBS3pCLDZDQUM0Qzs7Ozs7O0lBSzVDLDJDQUMwQzs7Ozs7O0lBSzFDLDhDQUM2Qzs7Ozs7O0lBSzdDLDBDQUN5Qzs7Ozs7Ozs7OztJQVV6Qyx1Q0FDNEI7Ozs7Ozs7Ozs7O0lBVzVCLGtDQUNvQjs7Ozs7Ozs7Ozs7SUFXcEIsc0NBQytCOzs7Ozs7Ozs7Ozs7SUFhL0IsNkNBQytCOzs7Ozs7SUFLL0IsbUNBQXVDOzs7Ozs7Ozs7OztJQVd2QyxnQ0FFc0M7Ozs7Ozs7Ozs7OztJQWF0Qyx3Q0FFMEI7Ozs7Ozs7Ozs7O0lBWTFCLG1DQUVxQjs7Ozs7Ozs7Ozs7SUFZckIscUNBRXVCOzs7Ozs7Ozs7OztJQVd2QixzQ0FDd0I7Ozs7Ozs7Ozs7O0lBV3hCLGtDQUNvQjs7Ozs7Ozs7Ozs7SUFXcEIsaUNBQ21COztJQXFGUCx3Q0FBNkI7Ozs7O0FBa0Q3QztJQUFBO0lBSytCLENBQUM7O2dCQUwvQixRQUFRLFNBQUM7b0JBQ04sWUFBWSxFQUFFLENBQUMsa0JBQWtCLENBQUM7b0JBQ2xDLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDO29CQUM3QixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDO2lCQUN6Qzs7SUFDOEIsc0JBQUM7Q0FBQSxBQUxoQyxJQUtnQztTQUFuQixlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gICAgQWZ0ZXJWaWV3SW5pdCxcbiAgICBDb21wb25lbnQsXG4gICAgRWxlbWVudFJlZixcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbnB1dCxcbiAgICBOZ01vZHVsZSxcbiAgICBPbkluaXQsXG4gICAgVGVtcGxhdGVSZWYsXG4gICAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4SWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vaW5kZXgnO1xuXG5sZXQgTkVYVF9JRCA9IDA7XG5cbmV4cG9ydCBlbnVtIFNpemUge1xuICAgIFNNQUxMID0gJ3NtYWxsJyxcbiAgICBNRURJVU0gPSAnbWVkaXVtJyxcbiAgICBMQVJHRSA9ICdsYXJnZSdcbn1cblxuZXhwb3J0IGVudW0gQXZhdGFyVHlwZSB7XG4gICAgREVGQVVMVCA9ICdkZWZhdWx0JyxcbiAgICBJTklUSUFMUyA9ICdpbml0aWFscycsXG4gICAgSU1BR0UgPSAnaW1hZ2UnLFxuICAgIElDT04gPSAnaWNvbidcbn1cblxuLyoqXG4gKiAqKklnbml0ZSBVSSBmb3IgQW5ndWxhciBBdmF0YXIqKiAtXG4gKiBbRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly93d3cuaW5mcmFnaXN0aWNzLmNvbS9wcm9kdWN0cy9pZ25pdGUtdWktYW5ndWxhci9hbmd1bGFyL2NvbXBvbmVudHMvYXZhdGFyLmh0bWwpXG4gKlxuICogVGhlIElnbml0ZSBVSSBBdmF0YXIgcHJvdmlkZXMgYW4gZWFzeSB3YXkgdG8gYWRkIGFuIGF2YXRhciBpY29uIHRvIHlvdXIgYXBwbGljYXRpb24uICBUaGlzIGljb24gY2FuIGJlIGFuXG4gKiBpbWFnZSwgc29tZW9uZSdzIGluaXRpYWxzIG9yIGEgbWF0ZXJpYWwgaWNvbiBmcm9tIHRoZSBnb29nbGUgbWF0ZXJpYWwgaWNvbiBzZXQuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYGh0bWxcbiAqIDxpZ3gtYXZhdGFyIGluaXRpYWxzPVwiTVNcIiByb3VuZFNoYXBlPVwidHJ1ZVwiIHNpemU9XCJsYXJnZVwiPlxuICogPC9pZ3gtYXZhdGFyPlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaWd4LWF2YXRhcicsXG4gICAgdGVtcGxhdGVVcmw6ICdhdmF0YXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIElneEF2YXRhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIHRoZSBhdmF0YXIgYGltYWdlYCBlbGVtZW50IGluIHRoZSBET00uXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogIGxldCBpbWFnZSA9ICB0aGlzLmF2YXRhci5pbWFnZTtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4QXZhdGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgQFZpZXdDaGlsZCgnaW1hZ2UnKVxuICAgIHB1YmxpYyBpbWFnZTogRWxlbWVudFJlZjtcblxuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGQoJ2RlZmF1bHRUZW1wbGF0ZScsIHsgcmVhZDogVGVtcGxhdGVSZWYgfSlcbiAgICBwcm90ZWN0ZWQgZGVmYXVsdFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgQFZpZXdDaGlsZCgnaW1hZ2VUZW1wbGF0ZScsIHsgcmVhZDogVGVtcGxhdGVSZWYgfSlcbiAgICBwcm90ZWN0ZWQgaW1hZ2VUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGQoJ2luaXRpYWxzVGVtcGxhdGUnLCB7IHJlYWQ6IFRlbXBsYXRlUmVmIH0pXG4gICAgcHJvdGVjdGVkIGluaXRpYWxzVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBAVmlld0NoaWxkKCdpY29uVGVtcGxhdGUnLCB7IHJlYWQ6IFRlbXBsYXRlUmVmIH0pXG4gICAgcHJvdGVjdGVkIGljb25UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGBhcmlhLWxhYmVsYCBvZiB0aGUgYXZhdGFyLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBhcmlhTGFiZWwgPSB0aGlzLmF2YXRhci5hcmlhTGFiZWw7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1sYWJlbCcpXG4gICAgcHVibGljIGFyaWFMYWJlbCA9ICdhdmF0YXInO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYHJvbGVgIGF0dHJpYnV0ZSBvZiB0aGUgYXZhdGFyLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBhdmF0YXJSb2xlID0gdGhpcy5hdmF0YXIucm9sZTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBJZ3hBdmF0YXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIucm9sZScpXG4gICAgcHVibGljIHJvbGUgPSAnaW1nJztcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNsYXNzIG9mIHRoZSBhdmF0YXIuXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGF2YXRhckNMYXNzID0gIHRoaXMuYXZhdGFyLmNzc0NsYXNzO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIElneEF2YXRhckNvbXBvbmVudFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWF2YXRhcicpXG4gICAgcHVibGljIGNzc0NsYXNzID0gJ2lneC1hdmF0YXInO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdHlwZSBvZiB0aGUgYXZhdGFyLlxuICAgICAqIFRoZSBhdmF0YXIgY2FuIGJlOiBgXCJpbml0aWFscyB0eXBlIGF2YXRhclwiYCwgYFwiaWNvbiB0eXBlIGF2YXRhclwiYCBvciBgXCJpbWFnZSB0eXBlIGF2YXRhclwiYC5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgYXZhdGFyRGVzY3JpcHRpb24gPSB0aGlzLmF2YXRhci5yb2xlRGVzY3JpcHRpb247XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgSWd4QXZhdGFyQ29tcG9uZW50XG4gICAgICovXG5cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1yb2xlZGVzY3JpcHRpb24nKVxuICAgIHB1YmxpYyByb2xlRGVzY3JpcHRpb246IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9zaXplOiBzdHJpbmcgfCBTaXplID0gJ3NtYWxsJztcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGBpZGAgb2YgdGhlIGF2YXRhci4gSWYgbm90IHNldCwgdGhlIGZpcnN0IGF2YXRhciBjb21wb25lbnQgd2lsbCBoYXZlIGBpZGAgPSBgXCJpZ3gtYXZhdGFyLTBcImAuXG4gICAgICpcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1hdmF0YXIgaWQ9XCJteS1maXJzdC1hdmF0YXJcIj48L2lneC1hdmF0YXI+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgSWd4QXZhdGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmlkJylcbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBpZCA9IGBpZ3gtYXZhdGFyLSR7TkVYVF9JRCsrfWA7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgcm91bmQgc2hhcGUgdG8gdGhlIGF2YXRhciBpZiBgcm91bmRTaGFwZWAgaXMgYFwidHJ1ZVwiYC5cbiAgICAgKiBCeSBkZWZhdWx0IHRoZSBzaGFwZSBvZiB0aGUgYXZhdGFyIGlzIGEgc3F1YXJlLlxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtYXZhdGFyIHJvdW5kU2hhcGUgPSBcInRydWVcIiA+PC9pZ3gtYXZhdGFyPlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIElneEF2YXRhckNvbXBvbmVudFxuICAgICAqL1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtYXZhdGFyLS1yb3VuZGVkJylcbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyByb3VuZFNoYXBlID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBhdmF0YXIncyBgaW5pdGlhbHNgL2BpY29uYCBjb2xvci5cbiAgICAgKlxuICAgICAqYGBgaHRtbFxuICAgICAqPGlneC1hdmF0YXIgY29sb3I9XCJibHVlXCI+PC9pZ3gtYXZhdGFyPlxuICAgICAqYGBgXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgSWd4QXZhdGFyQ29tcG9uZW50XG4gICAgICovXG5cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLmNvbG9yJylcbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBjb2xvcjogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYmFja2dyb3VuZCBjb2xvciBvZiB0aGUgYXZhdGFyLlxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtYXZhdGFyIGJnQ29sb3I9XCJ5ZWxsb3dcIj48L2lneC1hdmF0YXI+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgSWd4QXZhdGFyQ29tcG9uZW50XG4gICAgICovXG5cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLmJhY2tncm91bmQnKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGJnQ29sb3I6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFNldHMgYGluaXRpYWxzYCB0byB0aGUgYXZhdGFyLlxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtYXZhdGFyIGluaXRpYWxzPVwiTU5cIj48L2lneC1hdmF0YXI+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgSWd4QXZhdGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaW5pdGlhbHM6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFNldHMgYW4gYGljb25gIHRvIHRoZSBhdmF0YXIuIEFsbCBpY29ucyBmcm9tIHRoZSBtYXRlcmlhbCBpY29uIHNldCBhcmUgc3VwcG9ydGVkLlxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtYXZhdGFyIGljb249XCJwaG9uZVwiPjwvaWd4LWF2YXRhcj5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBJZ3hBdmF0YXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBpY29uOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgaW1hZ2VgIHNvdXJjZSBvZiB0aGUgYXZhdGFyLlxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtYXZhdGFyIHNyYz1cImltYWdlcy9waWN0dXJlLmpwZ1wiPjwvaWd4LWF2YXRhcj5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBJZ3hBdmF0YXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBzcmM6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGBzaXplYCBvZiB0aGUgYXZhdGFyLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqbGV0IGF2YXRhclNpemUgPSAgdGhpcy5hdmF0YXIuc2l6ZTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBJZ3hBdmF0YXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgc2l6ZSgpOiBzdHJpbmcgfCBTaXplIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHNpemVgICBvZiB0aGUgYXZhdGFyLlxuICAgICAqIEJ5IGRlZmF1bHQgdGhlIGBzaXplYCBpcyBgXCJzbWFsbFwiYC4gSXQgY2FuIGJlIHNldCB0byBgXCJtZWRpdW1cImAgb3IgYFwibGFyZ2VcImAuXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiA8aWd4LWF2YXRhciBzaXplPVwibGFyZ2VcIj48L2lneC1hdmF0YXI+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgSWd4QXZhdGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIHNldCBzaXplKHZhbHVlOiBzdHJpbmcgfCBTaXplKSB7XG4gICAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NtYWxsJzpcbiAgICAgICAgICAgIGNhc2UgJ21lZGl1bSc6XG4gICAgICAgICAgICBjYXNlICdsYXJnZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLl9zaXplID0gJ3NtYWxsJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHR5cGUgb2YgdGhlIGF2YXRhci5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgYXZhdGFyVHlwZSA9IHRoaXMuYXZhdGFyLnR5cGU7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgSWd4QXZhdGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgZ2V0IHR5cGUoKTogQXZhdGFyVHlwZSB7XG4gICAgICAgIGlmICh0aGlzLnNyYykge1xuICAgICAgICAgICAgcmV0dXJuIEF2YXRhclR5cGUuSU1BR0U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pY29uKSB7XG4gICAgICAgICAgICByZXR1cm4gQXZhdGFyVHlwZS5JQ09OO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaW5pdGlhbHMpIHtcbiAgICAgICAgICAgIHJldHVybiBBdmF0YXJUeXBlLklOSVRJQUxTO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIEF2YXRhclR5cGUuREVGQVVMVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0ZW1wbGF0ZSBvZiB0aGUgYXZhdGFyLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCB0ZW1wbGF0ZSA9IHRoaXMuYXZhdGFyLnRlbXBsYXRlO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIElneEF2YXRhckNvbXBvbmVudFxuICAgICAqL1xuICAgIGdldCB0ZW1wbGF0ZSgpOiBUZW1wbGF0ZVJlZjxhbnk+IHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQXZhdGFyVHlwZS5JTUFHRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbWFnZVRlbXBsYXRlO1xuICAgICAgICAgICAgY2FzZSBBdmF0YXJUeXBlLklOSVRJQUxTOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmluaXRpYWxzVGVtcGxhdGU7XG4gICAgICAgICAgICBjYXNlIEF2YXRhclR5cGUuSUNPTjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pY29uVGVtcGxhdGU7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRUZW1wbGF0ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7IH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMucm9sZURlc2NyaXB0aW9uID0gdGhpcy5nZXRSb2xlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0XG4gICAgICAgICAgICAuYWRkKGBpZ3gtYXZhdGFyLS0ke3RoaXMuX3NpemV9YCwgYGlneC1hdmF0YXItLSR7dGhpcy50eXBlfWApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIGdldFJvbGUoKTogc3RyaW5nIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQXZhdGFyVHlwZS5JTUFHRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2ltYWdlIGF2YXRhcic7XG4gICAgICAgICAgICBjYXNlIEF2YXRhclR5cGUuSUNPTjpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2ljb24gYXZhdGFyJztcbiAgICAgICAgICAgIGNhc2UgQXZhdGFyVHlwZS5JTklUSUFMUzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2luaXRpYWxzIGF2YXRhcic7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAnY3VzdG9tIGF2YXRhcic7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB1cmwgb2YgdGhlIGBpbWFnZWAuXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGltYWdlU291cmNlVXJsID0gdGhpcy5hdmF0YXIuZ2V0U3JjVXJsKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgSWd4QXZhdGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIGdldFNyY1VybCgpIHtcbiAgICAgICAgcmV0dXJuIGB1cmwoJHt0aGlzLnNyY30pYDtcbiAgICB9XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW0lneEF2YXRhckNvbXBvbmVudF0sXG4gICAgZXhwb3J0czogW0lneEF2YXRhckNvbXBvbmVudF0sXG4gICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgSWd4SWNvbk1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgSWd4QXZhdGFyTW9kdWxlIHsgfVxuIl19