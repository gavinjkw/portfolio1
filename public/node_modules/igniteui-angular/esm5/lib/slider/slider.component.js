/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { Component, ElementRef, EventEmitter, HostBinding, Input, NgModule, Output, Renderer2, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/** @enum {number} */
var SliderType = {
    /**
     * Slider with single thumb.
     */
    SLIDER: 0,
    /**
     *  Range slider with multiple thumbs, that can mark the range.
     */
    RANGE: 1,
};
export { SliderType };
SliderType[SliderType.SLIDER] = 'SLIDER';
SliderType[SliderType.RANGE] = 'RANGE';
/** @enum {number} */
var SliderHandle = {
    FROM: 0,
    TO: 1,
};
SliderHandle[SliderHandle.FROM] = 'FROM';
SliderHandle[SliderHandle.TO] = 'TO';
/**
 * @record
 */
export function IRangeSliderValue() { }
if (false) {
    /** @type {?} */
    IRangeSliderValue.prototype.lower;
    /** @type {?} */
    IRangeSliderValue.prototype.upper;
}
/**
 * @record
 */
export function ISliderValueChangeEventArgs() { }
if (false) {
    /** @type {?} */
    ISliderValueChangeEventArgs.prototype.oldValue;
    /** @type {?} */
    ISliderValueChangeEventArgs.prototype.value;
}
/** @type {?} */
var noop = function () {
};
var Éµ0 = noop;
/** @type {?} */
var NEXT_ID = 0;
/**
 * **Ignite UI for Angular Slider** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/slider.html)
 *
 * The Ignite UI Slider allows selection in a given range by moving the thumb along the track. The track
 * can be defined as continuous or stepped, and you can choose between single and range slider types.
 *
 * Example:
 * ```html
 * <igx-slider id="slider"
 *            [minValue]="0" [maxValue]="100"
 *            [isContinuous]=true [(ngModel)]="volume">
 * </igx-slider>
 * ```
 */
var IgxSliderComponent = /** @class */ (function () {
    function IgxSliderComponent(renderer) {
        this.renderer = renderer;
        /**
         * An \@Input property that sets the value of the `id` attribute.
         * If not provided it will be automatically generated.
         * ```html
         * <igx-slider [id]="'igx-slider-32'" [(ngModel)]="task.percentCompleted" [step]="5" [lowerBound]="20">
         * ```
         */
        this.id = "igx-slider-" + NEXT_ID++;
        /**
         * An \@Input property that marks the `IgxSliderComponent` as continuous.
         * By default is considered that the `IgxSliderComponent` is discrete.
         * Discrete `IgxSliderComponent` does not have ticks and does not shows bubble labels for values.
         * ```html
         * <igx-slider #slider [isContinuous]="'true'" [(ngModel)]="task.percentCompleted" [step]="5" [lowerBound]="20">
         * ```
         */
        this.isContinuous = false;
        /**
         * An \@Input property that sets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.
         * ```typescript
         * sliderType: SliderType = SliderType.RANGE;
         * //...
         * ```
         * ```html
         * <igx-slider #slider2 [type]="sliderType" [(ngModel)]="rangeValue" [minValue]="0" [maxValue]="100">
         * ```
         */
        this.type = SliderType.SLIDER;
        /**
         * An \@Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.
         * ```html
         * <igx-slider #slider [thumbLabelVisibilityDuration]="3000" [(ngModel)]="task.percentCompleted" [step]="5">
         * ```
         */
        this.thumbLabelVisibilityDuration = 750;
        /**
         * An \@Input property that sets the incremental/decremental step of the value when dragging the thumb.
         * The default step is 1, and step should not be less or equal than 0.
         * ```html
         * <igx-slider #slider [(ngModel)]="task.percentCompleted" [step]="5">
         * ```
         */
        this.step = 1;
        /**
         * This event is emitted when user has stopped interacting the thumb and value is changed.
         * ```typescript
         * public change(event){
         *    alert("The value has been changed!");
         * }
         * ```
         * ```html
         * <igx-slider (onValueChange)="change($event)" #slider [(ngModel)]="task.percentCompleted" [step]="5">
         * ```
         */
        this.onValueChange = new EventEmitter();
        /**
         * @hidden
         */
        this.isActiveLabel = false;
        this.activeHandle = SliderHandle.TO;
        // Measures & Coordinates
        this.width = 0;
        this.xOffset = 0;
        this.xPointer = 0;
        this.pPointer = 0;
        // Limit handle travel zone
        this.pMin = 0;
        this.pMax = 1;
        // From/upperValue in percent values
        this.hasViewInit = false;
        this._minValue = 0;
        this._maxValue = 100;
        this._onChangeCallback = noop;
        this._onTouchedCallback = noop;
    }
    Object.defineProperty(IgxSliderComponent.prototype, "isRange", {
        /**
         *Returns whether the `IgxSliderComponent` type is RANGE.
         *```typescript
         *@ViewChild("slider")
         *public slider: IgxSliderComponent;
         *ngAfterViewInit(){
         *    let sliderRange = this.slider.isRange;
         *}
         * ```
         */
        get: /**
         * Returns whether the `IgxSliderComponent` type is RANGE.
         * ```typescript
         * \@ViewChild("slider")
         * public slider: IgxSliderComponent;
         * ngAfterViewInit(){
         *    let sliderRange = this.slider.isRange;
         * }
         * ```
         * @return {?}
         */
        function () {
            /** @type {?} */
            var isRange = this.type === SliderType.RANGE;
            return isRange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "maxValue", {
        /**
         * Returns the maximum value for the `IgxSliderComponent`.
         * ```typescript
         *@ViewChild("slider")
         *public slider: IgxSliderComponent;
         *ngAfterViewInit(){
         *    let sliderMax = this.slider.maxValue;
         *}
         * ```
         */
        get: /**
         * Returns the maximum value for the `IgxSliderComponent`.
         * ```typescript
         * \@ViewChild("slider")
         * public slider: IgxSliderComponent;
         * ngAfterViewInit(){
         *    let sliderMax = this.slider.maxValue;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._maxValue;
        },
        /**
         * Sets the maximal value for the `IgxSliderComponent`.
         * The default maximum value is 100.
         * ```html
         * <igx-slider [type]="sliderType" [minValue]="56" [maxValue]="256">
         * ```
         */
        set: /**
         * Sets the maximal value for the `IgxSliderComponent`.
         * The default maximum value is 100.
         * ```html
         * <igx-slider [type]="sliderType" [minValue]="56" [maxValue]="256">
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value <= this._minValue) {
                this._maxValue = this._minValue + 1;
            }
            else {
                this._maxValue = value;
            }
            if (this._trackUpperBound) {
                this._upperBound = this._maxValue;
            }
            this.invalidateValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "minValue", {
        /**
         *Returns the minimal value of the `IgxSliderComponent`.
         *```typescript
         *@ViewChild("slider2")
         *public slider: IgxSliderComponent;
         *ngAfterViewInit(){
         *    let sliderMin = this.slider.minValue;
         *}
         *```
         */
        get: /**
         * Returns the minimal value of the `IgxSliderComponent`.
         * ```typescript
         * \@ViewChild("slider2")
         * public slider: IgxSliderComponent;
         * ngAfterViewInit(){
         *    let sliderMin = this.slider.minValue;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._minValue;
        },
        /**
         * Sets the minimal value for the `IgxSliderComponent`.
         * The default minimal value is 0.
         * ```html
         * <igx-slider [type]="sliderType" [minValue]="56" [maxValue]="100">
         * ```
         */
        set: /**
         * Sets the minimal value for the `IgxSliderComponent`.
         * The default minimal value is 0.
         * ```html
         * <igx-slider [type]="sliderType" [minValue]="56" [maxValue]="100">
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value >= this.maxValue) {
                this._minValue = this.maxValue - 1;
            }
            else {
                this._minValue = value;
            }
            if (this._trackLowerBound) {
                this._lowerBound = this._minValue;
            }
            this.invalidateValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "lowerBound", {
        /**
         * Returns the lower boundary of the `IgxSliderComponent`.
         *```typescript
         *@ViewChild("slider")
         *public slider: IgxSliderComponent;
         *ngAfterViewInit(){
         *    let sliderLowBound = this.slider.lowerBound;
         *}
         *```
         */
        get: /**
         * Returns the lower boundary of the `IgxSliderComponent`.
         * ```typescript
         * \@ViewChild("slider")
         * public slider: IgxSliderComponent;
         * ngAfterViewInit(){
         *    let sliderLowBound = this.slider.lowerBound;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._lowerBound;
        },
        /**
         * Sets the lower boundary of the `IgxSliderComponent`.
         * If not set is the same as min value.
         * ```html
         * <igx-slider [step]="5" [lowerBound]="20">
         * ```
         */
        set: /**
         * Sets the lower boundary of the `IgxSliderComponent`.
         * If not set is the same as min value.
         * ```html
         * <igx-slider [step]="5" [lowerBound]="20">
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._trackLowerBound) {
                this._trackLowerBound = false;
            }
            if (value >= this.upperBound) {
                this._lowerBound = this.minValue;
                return;
            }
            this._lowerBound = this.valueInRange(value, this.minValue, this.maxValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "upperBound", {
        /**
         * Returns the upper boundary of the `IgxSliderComponent`.
         * ```typescript
         *@ViewChild("slider")
         *public slider: IgxSliderComponent;
         *ngAfterViewInit(){
         *    let sliderUpBound = this.slider.upperBound;
         *}
         * ```
         */
        get: /**
         * Returns the upper boundary of the `IgxSliderComponent`.
         * ```typescript
         * \@ViewChild("slider")
         * public slider: IgxSliderComponent;
         * ngAfterViewInit(){
         *    let sliderUpBound = this.slider.upperBound;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._upperBound;
        },
        /**
         * Sets the upper boundary of the `IgxSliderComponent`.
         * If not set is the same as max value.
         * ```html
         * <igx-slider [step]="5" [upperBound]="20">
         * ```
         */
        set: /**
         * Sets the upper boundary of the `IgxSliderComponent`.
         * If not set is the same as max value.
         * ```html
         * <igx-slider [step]="5" [upperBound]="20">
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._trackUpperBound) {
                this._trackUpperBound = false;
            }
            if (value <= this.lowerBound) {
                this._upperBound = this.maxValue;
                return;
            }
            this._upperBound = this.valueInRange(value, this.minValue, this.maxValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "lowerValue", {
        /**
         * Returns the lower value of the `IgxSliderComponent`.
         * ```typescript
         * @ViewChild("slider")
         * public slider: IgxSliderComponent;
         * public lowValue(event){
         *    let sliderLowValue = this.slider.lowerValue;
         *}
         *```
         */
        get: /**
         * Returns the lower value of the `IgxSliderComponent`.
         * ```typescript
         * \@ViewChild("slider")
         * public slider: IgxSliderComponent;
         * public lowValue(event){
         *    let sliderLowValue = this.slider.lowerValue;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._lowerValue;
        },
        /**
         *Sets the lower value of the `IgxSliderComponent`.
         *```typescript
         *@ViewChild("slider2")
         *public slider: IgxSliderComponent;
         *public lowValue(event){
         *    this.slider.lowerValue = 120;
         *}
         *```
         */
        set: /**
         * Sets the lower value of the `IgxSliderComponent`.
         * ```typescript
         * \@ViewChild("slider2")
         * public slider: IgxSliderComponent;
         * public lowValue(event){
         *    this.slider.lowerValue = 120;
         * }
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value = this.valueInRange(value, this.lowerBound, this.upperBound);
            if (this.isRange && value > this.upperValue) {
                return;
            }
            this._lowerValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "upperValue", {
        /**
         *Returns the upper value of the `IgxSliderComponent`.
         *```typescript
         *@ViewChild("slider2")
         *public slider: IgxSliderComponent;
         *public upperValue(event){
         *    let upperValue = this.slider.upperValue;
         *}
         *```
         */
        get: /**
         * Returns the upper value of the `IgxSliderComponent`.
         * ```typescript
         * \@ViewChild("slider2")
         * public slider: IgxSliderComponent;
         * public upperValue(event){
         *    let upperValue = this.slider.upperValue;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._upperValue;
        },
        /**
         *Sets the upper value of the `IgxSliderComponent`.
         *```typescript
         *@ViewChild("slider2")
         *public slider: IgxSliderComponent;
         *public upperValue(event){
         *    this.slider.upperValue = 120;
         *}
         *```
         */
        set: /**
         * Sets the upper value of the `IgxSliderComponent`.
         * ```typescript
         * \@ViewChild("slider2")
         * public slider: IgxSliderComponent;
         * public upperValue(event){
         *    this.slider.upperValue = 120;
         * }
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value = this.valueInRange(value, this.lowerBound, this.upperBound);
            if (this.isRange && value < this.lowerValue) {
                return;
            }
            this._upperValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "value", {
        /**
         * Returns the slider value. If the slider is of type SLIDER the returned value is number.
         * If the slider type is RANGE the returned value is object containing lower and upper properties for the values.
         *```typescript
         *@ViewChild("slider2")
         *public slider: IgxSliderComponent;
         *public sliderValue(event){
         *    let sliderVal = this.slider.value;
         *}
         *```
         */
        get: /**
         * Returns the slider value. If the slider is of type SLIDER the returned value is number.
         * If the slider type is RANGE the returned value is object containing lower and upper properties for the values.
         * ```typescript
         * \@ViewChild("slider2")
         * public slider: IgxSliderComponent;
         * public sliderValue(event){
         *    let sliderVal = this.slider.value;
         * }
         * ```
         * @return {?}
         */
        function () {
            if (this.isRange) {
                return {
                    lower: this.snapValueToStep(this.lowerValue),
                    upper: this.snapValueToStep(this.upperValue)
                };
            }
            else {
                /** @type {?} */
                var val = this.snapValueToStep(this.upperValue);
                return val;
            }
        },
        /**
         * Sets the slider value.
         * If the slider is of type SLIDER the argument is number. By default if no value is set the default value is
         * same as lower upper bound.
         * If the slider type is RANGE the the argument is object containing lower and upper properties for the values.
         * By default if no value is set the default value is for lower value it is the same as lower bound and if no
         * value is set for the upper value it is the same as the upper bound.
         * ```typescript
         *rangeValue = {
         *   lower: 30,
         *   upper: 60
         *};
         * ```
         * ```html
         * <igx-slider [type]="sliderType" [(ngModel)]="rangeValue" [minValue]="56" [maxValue]="256">
         * ```
         */
        set: /**
         * Sets the slider value.
         * If the slider is of type SLIDER the argument is number. By default if no value is set the default value is
         * same as lower upper bound.
         * If the slider type is RANGE the the argument is object containing lower and upper properties for the values.
         * By default if no value is set the default value is for lower value it is the same as lower bound and if no
         * value is set for the upper value it is the same as the upper bound.
         * ```typescript
         * rangeValue = {
         *   lower: 30,
         *   upper: 60
         * };
         * ```
         * ```html
         * <igx-slider [type]="sliderType" [(ngModel)]="rangeValue" [minValue]="56" [maxValue]="256">
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!this.isRange) {
                this.upperValue = this.snapValueToStep((/** @type {?} */ (value)));
            }
            else {
                this.upperValue =
                    this.snapValueToStep(((/** @type {?} */ (value))) == null ? null : ((/** @type {?} */ (value))).upper);
                this.lowerValue =
                    this.snapValueToStep(((/** @type {?} */ (value))) == null ? null : ((/** @type {?} */ (value))).lower);
            }
            this._onChangeCallback(this.value);
            if (this.hasViewInit) {
                this.positionHandlesAndUpdateTrack();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxSliderComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.lowerBound === undefined) {
            this.lowerBound = this.minValue;
            this._trackLowerBound = true;
        }
        if (this.upperBound === undefined) {
            this.upperBound = this.maxValue;
            this._trackUpperBound = true;
        }
        if (this.isRange) {
            if (Number.isNaN(((/** @type {?} */ (this.value))).lower)) {
                this.value = {
                    lower: this.lowerBound,
                    upper: ((/** @type {?} */ (this.value))).upper
                };
            }
            if (Number.isNaN(((/** @type {?} */ (this.value))).upper)) {
                this.value = {
                    lower: ((/** @type {?} */ (this.value))).lower,
                    upper: this.upperBound
                };
            }
        }
        else {
            if (Number.isNaN((/** @type {?} */ (this.value)))) {
                this.value = this.lowerBound;
            }
        }
        this.pMin = this.valueToFraction(this.lowerBound) || 0;
        this.pMax = this.valueToFraction(this.upperBound) || 1;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxSliderComponent.prototype.ngAfterViewInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.hasViewInit = true;
        this.positionHandlesAndUpdateTrack();
        this.setTickInterval();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxSliderComponent.prototype.writeValue = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    IgxSliderComponent.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChangeCallback = fn;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    IgxSliderComponent.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouchedCallback = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    IgxSliderComponent.prototype.getEditElement = /**
     * @hidden
     * @return {?}
     */
    function () {
        return this.isRange ? this.thumbFrom.nativeElement : this.thumbTo.nativeElement;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxSliderComponent.prototype.showThumbsLabels = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        if (this.isContinuous) {
            return;
        }
        if (this.timer !== null) {
            clearInterval(this.timer);
        }
        this.isActiveLabel = true;
    };
    /**
     *
     * @hidden
     */
    /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    IgxSliderComponent.prototype.onFocus = /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.isRange && $event.target === this.thumbFrom.nativeElement) {
            this.activeHandle = SliderHandle.FROM;
        }
        if ($event.target === this.thumbTo.nativeElement) {
            this.activeHandle = SliderHandle.TO;
        }
        this.toggleThumbLabel();
    };
    /**
     *
     * @hidden
     */
    /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    IgxSliderComponent.prototype.onPanEnd = /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.hideThumbsLabels();
        this.emitValueChanged(null);
    };
    /**
     *
     * @hidden
     */
    /**
     *
     * @hidden
     * @return {?}
     */
    IgxSliderComponent.prototype.hideThumbLabelsOnBlur = /**
     *
     * @hidden
     * @return {?}
     */
    function () {
        if (this.timer !== null) {
            clearInterval(this.timer);
        }
        this.isActiveLabel = false;
    };
    /**
     *
     * @hidden
     */
    /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    IgxSliderComponent.prototype.onKeyDown = /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.disabled) {
            return true;
        }
        /** @type {?} */
        var incrementSign;
        if ($event.key.endsWith('Left')) {
            incrementSign = -1;
        }
        else if ($event.key.endsWith('Right')) {
            incrementSign = 1;
        }
        else {
            return;
        }
        /** @type {?} */
        var value = this.value;
        if (this.isRange) {
            if (this.activeHandle === SliderHandle.FROM) {
                /** @type {?} */
                var newLower = ((/** @type {?} */ (this.value))).lower + incrementSign * this.step;
                if (newLower >= ((/** @type {?} */ (this.value))).upper) {
                    this.thumbTo.nativeElement.focus();
                    return;
                }
                this.value = {
                    lower: newLower,
                    upper: ((/** @type {?} */ (this.value))).upper
                };
            }
            else {
                /** @type {?} */
                var newUpper = ((/** @type {?} */ (this.value))).upper + incrementSign * this.step;
                if (newUpper <= ((/** @type {?} */ (this.value))).lower) {
                    this.thumbFrom.nativeElement.focus();
                    return;
                }
                this.value = {
                    lower: ((/** @type {?} */ (this.value))).lower,
                    upper: ((/** @type {?} */ (this.value))).upper + incrementSign * this.step
                };
            }
        }
        else {
            this.value = (/** @type {?} */ (this.value)) + incrementSign * this.step;
        }
        if (this.hasValueChanged(value)) {
            this.emitValueChanged(value);
        }
        this.showThumbsLabels();
    };
    /**
     *
     * @hidden
     */
    /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    IgxSliderComponent.prototype.onTap = /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var value = this.value;
        this.update($event);
        if (this.hasValueChanged(value)) {
            this.emitValueChanged(value);
        }
    };
    /**
     *
     * @hidden
     */
    /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    IgxSliderComponent.prototype.update = /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.disabled) {
            return;
        }
        if ($event.type === 'tap') {
            this.toggleThumbLabel();
        }
        // Set width and offset first
        this.setSliderWidth();
        this.setSliderOffset();
        // Then get pointer coordinates
        this.setPointerPosition($event);
        this.setPointerPercent();
        // Find the closest handle if dual slider
        if (this.isRange) {
            this.closestHandle();
        }
        // Update To/From Values
        this.setValues();
        // this.printInfo();
        // Finally do positionHandlesAndUpdateTrack the DOM
        // based on data values
        this.positionHandlesAndUpdateTrack();
        this._onTouchedCallback();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxSliderComponent.prototype.hideThumbsLabels = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.disabled) {
            return;
        }
        if (this.isContinuous) {
            return;
        }
        this.timer = setTimeout(function () { return _this.isActiveLabel = false; }, this.thumbLabelVisibilityDuration);
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    IgxSliderComponent.prototype.valueInRange = /**
     * @private
     * @param {?} value
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    function (value, min, max) {
        if (min === void 0) { min = 0; }
        if (max === void 0) { max = 100; }
        return Math.max(Math.min(value, max), min);
    };
    /**
     * @private
     * @return {?}
     */
    IgxSliderComponent.prototype.invalidateValue = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.isRange) {
            if (this.value >= this._lowerBound && this.value <= this._upperBound) {
                this.positionHandlesAndUpdateTrack();
            }
            else if (this.value < this._lowerBound) {
                this.value = this._lowerBound;
            }
            else if (this.value > this._upperBound) {
                this.value = this._upperBound;
            }
        }
        else {
            /** @type {?} */
            var value = (/** @type {?} */ (this.value));
            if (value.lower >= this._lowerBound && value.lower <= this._upperBound) {
                this.positionHandlesAndUpdateTrack();
            }
            else if (value.lower < this._lowerBound) {
                this.value = {
                    lower: this._lowerBound,
                    upper: value.upper
                };
            }
            else if (value.lower > this._upperBound) {
                this.value = {
                    lower: value.lower,
                    upper: this._upperBound
                };
            }
            if (value.upper >= this._lowerBound && value.upper <= this._upperBound) {
                this.positionHandlesAndUpdateTrack();
            }
            else if (value.upper < this._lowerBound) {
                this.value = {
                    lower: this._lowerBound,
                    upper: value.upper
                };
            }
            else if (value.upper > this._upperBound) {
                this.value = {
                    lower: value.lower,
                    upper: this._upperBound
                };
            }
        }
    };
    /**
     * @private
     * @param {?} color
     * @param {?} interval
     * @return {?}
     */
    IgxSliderComponent.prototype.generateTickMarks = /**
     * @private
     * @param {?} color
     * @param {?} interval
     * @return {?}
     */
    function (color, interval) {
        return "repeating-linear-gradient(\n            " + 'to left' + ",\n            " + color + ",\n            " + color + " 1.5px,\n            transparent 1.5px,\n            transparent " + interval + "%\n        ), repeating-linear-gradient(\n            " + 'to right' + ",\n            " + color + ",\n            " + color + " 1.5px,\n            transparent 1.5px,\n            transparent " + interval + "%\n        )";
    };
    /**
     * @private
     * @return {?}
     */
    IgxSliderComponent.prototype.toggleThumbLabel = /**
     * @private
     * @return {?}
     */
    function () {
        this.showThumbsLabels();
        this.hideThumbsLabels();
    };
    /**
     * @private
     * @return {?}
     */
    IgxSliderComponent.prototype.getSliderOffset = /**
     * @private
     * @return {?}
     */
    function () {
        return this.xOffset;
    };
    /**
     * @private
     * @param {?} num
     * @return {?}
     */
    IgxSliderComponent.prototype.toFixed = /**
     * @private
     * @param {?} num
     * @return {?}
     */
    function (num) {
        num = parseFloat(num.toFixed(20));
        return num;
    };
    /**
     * @private
     * @param {?} handle
     * @param {?} position
     * @return {?}
     */
    IgxSliderComponent.prototype.positionHandle = /**
     * @private
     * @param {?} handle
     * @param {?} position
     * @return {?}
     */
    function (handle, position) {
        handle.nativeElement.style.left = this.valueToFraction(position) * 100 + "%";
    };
    /**
     * @private
     * @return {?}
     */
    IgxSliderComponent.prototype.positionHandlesAndUpdateTrack = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.isRange) {
            this.positionHandle(this.thumbTo, (/** @type {?} */ (this.value)));
        }
        else {
            this.positionHandle(this.thumbTo, ((/** @type {?} */ (this.value))).upper);
            this.positionHandle(this.thumbFrom, ((/** @type {?} */ (this.value))).lower);
        }
        this.updateTrack();
    };
    /**
     * @private
     * @return {?}
     */
    IgxSliderComponent.prototype.closestHandle = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var fromOffset = this.thumbFrom.nativeElement.offsetLeft + this.thumbFrom.nativeElement.offsetWidth / 2;
        /** @type {?} */
        var toOffset = this.thumbTo.nativeElement.offsetLeft + this.thumbTo.nativeElement.offsetWidth / 2;
        /** @type {?} */
        var match = this.closestTo(this.xPointer, [fromOffset, toOffset]);
        if (match === toOffset) {
            this.thumbTo.nativeElement.focus();
        }
        else if (match === fromOffset) {
            this.thumbFrom.nativeElement.focus();
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxSliderComponent.prototype.setTickInterval = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isContinuous) {
            return;
        }
        /** @type {?} */
        var interval = this.step > 1 ? this.step : null;
        this.renderer.setStyle(this.ticks.nativeElement, 'background', this.generateTickMarks('white', interval));
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    IgxSliderComponent.prototype.snapValueToStep = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var valueModStep = (value - this.minValue) % this.step;
        /** @type {?} */
        var snapValue = value - valueModStep;
        if (Math.abs(valueModStep) * 2 >= this.step) {
            snapValue += (valueModStep > 0) ? this.step : (-this.step);
        }
        return parseFloat(snapValue.toFixed(20));
    };
    /**
     * @private
     * @param {?} goal
     * @param {?} positions
     * @return {?}
     */
    IgxSliderComponent.prototype.closestTo = /**
     * @private
     * @param {?} goal
     * @param {?} positions
     * @return {?}
     */
    function (goal, positions) {
        return positions.reduce(function (previous, current) {
            return (Math.abs(goal - current) < Math.abs(goal - previous) ? current : previous);
        });
    };
    // Set Values for To/From based on active handle
    // Set Values for To/From based on active handle
    /**
     * @private
     * @return {?}
     */
    IgxSliderComponent.prototype.setValues = 
    // Set Values for To/From based on active handle
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.activeHandle === SliderHandle.TO) {
            if (this.isRange) {
                this.value = {
                    lower: ((/** @type {?} */ (this.value))).lower,
                    upper: this.fractionToValue(this.pPointer)
                };
            }
            else {
                this.value = this.fractionToValue(this.pPointer);
            }
        }
        if (this.activeHandle === SliderHandle.FROM) {
            this.value = {
                lower: this.fractionToValue(this.pPointer),
                upper: ((/** @type {?} */ (this.value))).upper
            };
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxSliderComponent.prototype.setSliderWidth = /**
     * @private
     * @return {?}
     */
    function () {
        this.width = this.slider.nativeElement.offsetWidth;
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    IgxSliderComponent.prototype.setPointerPosition = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.xPointer = e.center.x - this.getSliderOffset();
    };
    /**
     * @private
     * @return {?}
     */
    IgxSliderComponent.prototype.setSliderOffset = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rect = this.slider.nativeElement.getBoundingClientRect();
        this.xOffset = rect.left;
    };
    /**
     * @private
     * @return {?}
     */
    IgxSliderComponent.prototype.setPointerPercent = /**
     * @private
     * @return {?}
     */
    function () {
        this.pPointer = this.valueInRange(this.toFixed(this.xPointer / this.width), this.pMin, this.pMax);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    IgxSliderComponent.prototype.valueToFraction = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.valueInRange((value - this.minValue) / (this.maxValue - this.minValue), this.pMin, this.pMax);
    };
    /**
     * @private
     * @param {?} fraction
     * @return {?}
     */
    IgxSliderComponent.prototype.fractionToValue = /**
     * @private
     * @param {?} fraction
     * @return {?}
     */
    function (fraction) {
        /** @type {?} */
        var max = this.maxValue;
        /** @type {?} */
        var min = this.minValue;
        return (max - min) * fraction + min;
    };
    /**
     * @private
     * @return {?}
     */
    IgxSliderComponent.prototype.updateTrack = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var fromPosition = this.valueToFraction(this.lowerValue);
        /** @type {?} */
        var toPosition = this.valueToFraction(this.upperValue);
        /** @type {?} */
        var positionGap = (this.valueToFraction(this.upperValue) - this.valueToFraction(this.lowerValue));
        if (!this.isRange) {
            this.track.nativeElement.style.transform = "scaleX(" + toPosition + ")";
        }
        if (this.isRange) {
            this.track.nativeElement.style.transform = "scaleX(" + 1 + ")";
            this.track.nativeElement.style.left = fromPosition * 100 + "%";
            this.track.nativeElement.style.width = positionGap * 100 + "%";
        }
    };
    /**
     * @private
     * @param {?} oldValue
     * @return {?}
     */
    IgxSliderComponent.prototype.hasValueChanged = /**
     * @private
     * @param {?} oldValue
     * @return {?}
     */
    function (oldValue) {
        /** @type {?} */
        var isSliderWithDifferentValue = !this.isRange && oldValue !== this.value;
        /** @type {?} */
        var isRangeWithOneDifferentValue = this.isRange &&
            (((/** @type {?} */ (oldValue))).lower !== ((/** @type {?} */ (this.value))).lower ||
                ((/** @type {?} */ (oldValue))).upper !== ((/** @type {?} */ (this.value))).upper);
        return isSliderWithDifferentValue || isRangeWithOneDifferentValue;
    };
    /**
     * @private
     * @param {?} oldValue
     * @return {?}
     */
    IgxSliderComponent.prototype.emitValueChanged = /**
     * @private
     * @param {?} oldValue
     * @return {?}
     */
    function (oldValue) {
        this.onValueChange.emit({ oldValue: oldValue, value: this.value });
    };
    IgxSliderComponent.decorators = [
        { type: Component, args: [{
                    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSliderComponent, multi: true }],
                    selector: 'igx-slider',
                    template: "<div class=\"igx-slider\" [class.igx-slider--disabled]=\"disabled\" #slider (panstart)=\"showThumbsLabels()\" (panend)=\"onPanEnd($event)\"\n    (pan)=\"update($event)\" (tap)=\"onTap($event)\">\n    <div class=\"igx-slider__track\">\n        <div #track class=\"igx-slider__track-fill\"></div>\n        <div #ticks class=\"igx-slider__track-ticks\"></div>\n    </div>\n    <div class=\"igx-slider__thumbs\">\n        <div (keydown)=\"onKeyDown($event);\" (keyup)=\"hideThumbsLabels()\" (blur)=\"hideThumbLabelsOnBlur()\" (focus)=\"onFocus($event);\"\n            *ngIf=\"isRange\" class=\"igx-slider__thumb-from\" tabindex=\"1\" [ngClass]=\"{ 'igx-slider__thumb-from--active': isActiveLabel }\"\n            #thumbFrom>\n            <span class=\"label\">{{ lowerValue}}</span>\n            <span class=\"dot\"></span>\n        </div>\n        <div (keydown)=\"onKeyDown($event);\" (keyup)=\"hideThumbsLabels()\" (blur)=\"hideThumbLabelsOnBlur()\" (focus)=\"onFocus($event);\"\n            class=\"igx-slider__thumb-to\" tabindex=\"1\" [ngClass]=\"{ 'igx-slider__thumb-to--active': isActiveLabel }\" #thumbTo>\n            <span *ngIf=\"isRange\" class=\"label\">{{ upperValue}}</span>\n            <span *ngIf=\"!isRange\" class=\"label\">{{ value }}</span>\n            <span class=\"dot\"></span>\n        </div>\n    </div>\n</div>\n",
                    styles: ["\n        :host {\n            display: block;\n        }\n    "]
                }] }
    ];
    /** @nocollapse */
    IgxSliderComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    IgxSliderComponent.propDecorators = {
        id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
        disabled: [{ type: Input }],
        isContinuous: [{ type: Input }],
        type: [{ type: Input }],
        thumbLabelVisibilityDuration: [{ type: Input }],
        step: [{ type: Input }],
        onValueChange: [{ type: Output }],
        slider: [{ type: ViewChild, args: ['slider',] }],
        track: [{ type: ViewChild, args: ['track',] }],
        ticks: [{ type: ViewChild, args: ['ticks',] }],
        thumbFrom: [{ type: ViewChild, args: ['thumbFrom',] }],
        thumbTo: [{ type: ViewChild, args: ['thumbTo',] }],
        maxValue: [{ type: Input }],
        minValue: [{ type: Input }],
        lowerBound: [{ type: Input }],
        upperBound: [{ type: Input }],
        value: [{ type: Input }]
    };
    return IgxSliderComponent;
}());
export { IgxSliderComponent };
if (false) {
    /**
     * An \@Input property that sets the value of the `id` attribute.
     * If not provided it will be automatically generated.
     * ```html
     * <igx-slider [id]="'igx-slider-32'" [(ngModel)]="task.percentCompleted" [step]="5" [lowerBound]="20">
     * ```
     * @type {?}
     */
    IgxSliderComponent.prototype.id;
    /**
     * An \@Input property that disables or enables UI interaction.
     * ```html
     * <igx-slider #slider [disabled]="'true'" [(ngModel)]="task.percentCompleted" [step]="5" [lowerBound]="20">
     * ```
     * @type {?}
     */
    IgxSliderComponent.prototype.disabled;
    /**
     * An \@Input property that marks the `IgxSliderComponent` as continuous.
     * By default is considered that the `IgxSliderComponent` is discrete.
     * Discrete `IgxSliderComponent` does not have ticks and does not shows bubble labels for values.
     * ```html
     * <igx-slider #slider [isContinuous]="'true'" [(ngModel)]="task.percentCompleted" [step]="5" [lowerBound]="20">
     * ```
     * @type {?}
     */
    IgxSliderComponent.prototype.isContinuous;
    /**
     * An \@Input property that sets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.
     * ```typescript
     * sliderType: SliderType = SliderType.RANGE;
     * //...
     * ```
     * ```html
     * <igx-slider #slider2 [type]="sliderType" [(ngModel)]="rangeValue" [minValue]="0" [maxValue]="100">
     * ```
     * @type {?}
     */
    IgxSliderComponent.prototype.type;
    /**
     * An \@Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.
     * ```html
     * <igx-slider #slider [thumbLabelVisibilityDuration]="3000" [(ngModel)]="task.percentCompleted" [step]="5">
     * ```
     * @type {?}
     */
    IgxSliderComponent.prototype.thumbLabelVisibilityDuration;
    /**
     * An \@Input property that sets the incremental/decremental step of the value when dragging the thumb.
     * The default step is 1, and step should not be less or equal than 0.
     * ```html
     * <igx-slider #slider [(ngModel)]="task.percentCompleted" [step]="5">
     * ```
     * @type {?}
     */
    IgxSliderComponent.prototype.step;
    /**
     * This event is emitted when user has stopped interacting the thumb and value is changed.
     * ```typescript
     * public change(event){
     *    alert("The value has been changed!");
     * }
     * ```
     * ```html
     * <igx-slider (onValueChange)="change($event)" #slider [(ngModel)]="task.percentCompleted" [step]="5">
     * ```
     * @type {?}
     */
    IgxSliderComponent.prototype.onValueChange;
    /**
     * @hidden
     * @type {?}
     */
    IgxSliderComponent.prototype.isActiveLabel;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype.activeHandle;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype.slider;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype.track;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype.ticks;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype.thumbFrom;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype.thumbTo;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype.width;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype.xOffset;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype.xPointer;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype.pPointer;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype.pMin;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype.pMax;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype.hasViewInit;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype.timer;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype._minValue;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype._maxValue;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype._lowerBound;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype._upperBound;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype._lowerValue;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype._upperValue;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype._trackUpperBound;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype._trackLowerBound;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype._onChangeCallback;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype._onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    IgxSliderComponent.prototype.renderer;
}
/**
 * @hidden
 */
var IgxSliderModule = /** @class */ (function () {
    function IgxSliderModule() {
    }
    IgxSliderModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxSliderComponent],
                    exports: [IgxSliderComponent],
                    imports: [CommonModule]
                },] }
    ];
    return IgxSliderModule;
}());
export { IgxSliderModule };
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvc2xpZGVyL3NsaWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQ1ksU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQ3RDLFdBQVcsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFVLE1BQU0sRUFBRSxTQUFTLEVBQ25FLFNBQVMsRUFDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztJQUlyRTs7T0FFRztJQUNILFNBQU07SUFDTjs7T0FFRztJQUNILFFBQUs7Ozs7Ozs7SUFJTCxPQUFJO0lBQ0osS0FBRTs7Ozs7OztBQUdOLHVDQUdDOzs7SUFGRyxrQ0FBYzs7SUFDZCxrQ0FBYzs7Ozs7QUFHbEIsaURBR0M7OztJQUZHLCtDQUFxQzs7SUFDckMsNENBQWtDOzs7SUFHaEMsSUFBSSxHQUFHO0FBQ2IsQ0FBQzs7O0lBRUcsT0FBTyxHQUFHLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQmY7SUF3SUksNEJBQW9CLFFBQW1CO1FBQW5CLGFBQVEsR0FBUixRQUFRLENBQVc7Ozs7Ozs7O1FBbkhoQyxPQUFFLEdBQUcsZ0JBQWMsT0FBTyxFQUFJLENBQUM7Ozs7Ozs7OztRQW1CL0IsaUJBQVksR0FBRyxLQUFLLENBQUM7Ozs7Ozs7Ozs7O1FBYXJCLFNBQUksR0FBZSxVQUFVLENBQUMsTUFBTSxDQUFDOzs7Ozs7O1FBU3JDLGlDQUE0QixHQUFHLEdBQUcsQ0FBQzs7Ozs7Ozs7UUFVbkMsU0FBSSxHQUFHLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7O1FBY1Qsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBK0IsQ0FBQzs7OztRQUtoRSxrQkFBYSxHQUFHLEtB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aUJBQzFCOztJQUVELHNCQUFDO0NBQUEsQUFORCxJQU1DO1NBRFksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICAgIEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLFxuICAgIGZvcndhcmRSZWYsIEhvc3RCaW5kaW5nLCBJbnB1dCwgTmdNb2R1bGUsIE9uSW5pdCwgT3V0cHV0LCBSZW5kZXJlcjIsXG4gICAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRWRpdG9yUHJvdmlkZXIgfSBmcm9tICcuLi9jb3JlL2VkaXQtcHJvdmlkZXInO1xuXG5leHBvcnQgZW51bSBTbGlkZXJUeXBlIHtcbiAgICAvKipcbiAgICAgKiBTbGlkZXIgd2l0aCBzaW5nbGUgdGh1bWIuXG4gICAgICovXG4gICAgU0xJREVSLFxuICAgIC8qKlxuICAgICAqICBSYW5nZSBzbGlkZXIgd2l0aCBtdWx0aXBsZSB0aHVtYnMsIHRoYXQgY2FuIG1hcmsgdGhlIHJhbmdlLlxuICAgICAqL1xuICAgIFJBTkdFXG59XG5cbmVudW0gU2xpZGVySGFuZGxlIHtcbiAgICBGUk9NLFxuICAgIFRPXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJhbmdlU2xpZGVyVmFsdWUge1xuICAgIGxvd2VyOiBudW1iZXI7XG4gICAgdXBwZXI6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU2xpZGVyVmFsdWVDaGFuZ2VFdmVudEFyZ3Mge1xuICAgIG9sZFZhbHVlOiBudW1iZXIgfCBJUmFuZ2VTbGlkZXJWYWx1ZTtcbiAgICB2YWx1ZTogbnVtYmVyIHwgSVJhbmdlU2xpZGVyVmFsdWU7XG59XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7XG59O1xuXG5sZXQgTkVYVF9JRCA9IDA7XG5cbi8qKlxuICogKipJZ25pdGUgVUkgZm9yIEFuZ3VsYXIgU2xpZGVyKiogLVxuICogW0RvY3VtZW50YXRpb25dKGh0dHBzOi8vd3d3LmluZnJhZ2lzdGljcy5jb20vcHJvZHVjdHMvaWduaXRlLXVpLWFuZ3VsYXIvYW5ndWxhci9jb21wb25lbnRzL3NsaWRlci5odG1sKVxuICpcbiAqIFRoZSBJZ25pdGUgVUkgU2xpZGVyIGFsbG93cyBzZWxlY3Rpb24gaW4gYSBnaXZlbiByYW5nZSBieSBtb3ZpbmcgdGhlIHRodW1iIGFsb25nIHRoZSB0cmFjay4gVGhlIHRyYWNrXG4gKiBjYW4gYmUgZGVmaW5lZCBhcyBjb250aW51b3VzIG9yIHN0ZXBwZWQsIGFuZCB5b3UgY2FuIGNob29zZSBiZXR3ZWVuIHNpbmdsZSBhbmQgcmFuZ2Ugc2xpZGVyIHR5cGVzLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGBodG1sXG4gKiA8aWd4LXNsaWRlciBpZD1cInNsaWRlclwiXG4gKiAgICAgICAgICAgIFttaW5WYWx1ZV09XCIwXCIgW21heFZhbHVlXT1cIjEwMFwiXG4gKiAgICAgICAgICAgIFtpc0NvbnRpbnVvdXNdPXRydWUgWyhuZ01vZGVsKV09XCJ2b2x1bWVcIj5cbiAqIDwvaWd4LXNsaWRlcj5cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLCB1c2VFeGlzdGluZzogSWd4U2xpZGVyQ29tcG9uZW50LCBtdWx0aTogdHJ1ZSB9XSxcbiAgICBzZWxlY3RvcjogJ2lneC1zbGlkZXInLFxuICAgIHRlbXBsYXRlVXJsOiAnc2xpZGVyLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZXM6IFtgXG4gICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICB9XG4gICAgYF1cbn0pXG5leHBvcnQgY2xhc3MgSWd4U2xpZGVyQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIEVkaXRvclByb3ZpZGVyLCBPbkluaXQsIEFmdGVyVmlld0luaXQge1xuXG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgc2V0cyB0aGUgdmFsdWUgb2YgdGhlIGBpZGAgYXR0cmlidXRlLlxuICAgICAqIElmIG5vdCBwcm92aWRlZCBpdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXNsaWRlciBbaWRdPVwiJ2lneC1zbGlkZXItMzInXCIgWyhuZ01vZGVsKV09XCJ0YXNrLnBlcmNlbnRDb21wbGV0ZWRcIiBbc3RlcF09XCI1XCIgW2xvd2VyQm91bmRdPVwiMjBcIj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuaWQnKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGlkID0gYGlneC1zbGlkZXItJHtORVhUX0lEKyt9YDtcbiAgICAvKipcbiAgICAgKkFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IGRpc2FibGVzIG9yIGVuYWJsZXMgVUkgaW50ZXJhY3Rpb24uXG4gICAgICpgYGBodG1sXG4gICAgICo8aWd4LXNsaWRlciAjc2xpZGVyIFtkaXNhYmxlZF09XCIndHJ1ZSdcIiBbKG5nTW9kZWwpXT1cInRhc2sucGVyY2VudENvbXBsZXRlZFwiIFtzdGVwXT1cIjVcIiBbbG93ZXJCb3VuZF09XCIyMFwiPlxuICAgICAqYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBtYXJrcyB0aGUgYElneFNsaWRlckNvbXBvbmVudGAgYXMgY29udGludW91cy5cbiAgICAgKiBCeSBkZWZhdWx0IGlzIGNvbnNpZGVyZWQgdGhhdCB0aGUgYElneFNsaWRlckNvbXBvbmVudGAgaXMgZGlzY3JldGUuXG4gICAgICogRGlzY3JldGUgYElneFNsaWRlckNvbXBvbmVudGAgZG9lcyBub3QgaGF2ZSB0aWNrcyBhbmQgZG9lcyBub3Qgc2hvd3MgYnViYmxlIGxhYmVscyBmb3IgdmFsdWVzLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXNsaWRlciAjc2xpZGVyIFtpc0NvbnRpbnVvdXNdPVwiJ3RydWUnXCIgWyhuZ01vZGVsKV09XCJ0YXNrLnBlcmNlbnRDb21wbGV0ZWRcIiBbc3RlcF09XCI1XCIgW2xvd2VyQm91bmRdPVwiMjBcIj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBpc0NvbnRpbnVvdXMgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIHR5cGUgb2YgdGhlIGBJZ3hTbGlkZXJDb21wb25lbnRgLiBUaGUgc2xpZGVyIGNhbiBiZSBTbGlkZXJUeXBlLlNMSURFUihkZWZhdWx0KSBvciBTbGlkZXJUeXBlLlJBTkdFLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBzbGlkZXJUeXBlOiBTbGlkZXJUeXBlID0gU2xpZGVyVHlwZS5SQU5HRTtcbiAgICAgKiAvLy4uLlxuICAgICAqIGBgYFxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXNsaWRlciAjc2xpZGVyMiBbdHlwZV09XCJzbGlkZXJUeXBlXCIgWyhuZ01vZGVsKV09XCJyYW5nZVZhbHVlXCIgW21pblZhbHVlXT1cIjBcIiBbbWF4VmFsdWVdPVwiMTAwXCI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdHlwZTogU2xpZGVyVHlwZSA9IFNsaWRlclR5cGUuU0xJREVSO1xuXG4gICAgLyoqXG4gICAgICpBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSBkdXJhdGlvbiB2aXNpYmlsaXR5IG9mIHRodW1icyBsYWJlbHMuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDc1MCBtaWxsaXNlY29uZHMuXG4gICAgICpgYGBodG1sXG4gICAgICo8aWd4LXNsaWRlciAjc2xpZGVyIFt0aHVtYkxhYmVsVmlzaWJpbGl0eUR1cmF0aW9uXT1cIjMwMDBcIiBbKG5nTW9kZWwpXT1cInRhc2sucGVyY2VudENvbXBsZXRlZFwiIFtzdGVwXT1cIjVcIj5cbiAgICAgKmBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHRodW1iTGFiZWxWaXNpYmlsaXR5RHVyYXRpb24gPSA3NTA7XG5cbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSBpbmNyZW1lbnRhbC9kZWNyZW1lbnRhbCBzdGVwIG9mIHRoZSB2YWx1ZSB3aGVuIGRyYWdnaW5nIHRoZSB0aHVtYi5cbiAgICAgKiBUaGUgZGVmYXVsdCBzdGVwIGlzIDEsIGFuZCBzdGVwIHNob3VsZCBub3QgYmUgbGVzcyBvciBlcXVhbCB0aGFuIDAuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtc2xpZGVyICNzbGlkZXIgWyhuZ01vZGVsKV09XCJ0YXNrLnBlcmNlbnRDb21wbGV0ZWRcIiBbc3RlcF09XCI1XCI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgc3RlcCA9IDE7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGV2ZW50IGlzIGVtaXR0ZWQgd2hlbiB1c2VyIGhhcyBzdG9wcGVkIGludGVyYWN0aW5nIHRoZSB0aHVtYiBhbmQgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogcHVibGljIGNoYW5nZShldmVudCl7XG4gICAgICogICAgYWxlcnQoXCJUaGUgdmFsdWUgaGFzIGJlZW4gY2hhbmdlZCFcIik7XG4gICAgICp9XG4gICAgICogYGBgXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtc2xpZGVyIChvblZhbHVlQ2hhbmdlKT1cImNoYW5nZSgkZXZlbnQpXCIgI3NsaWRlciBbKG5nTW9kZWwpXT1cInRhc2sucGVyY2VudENvbXBsZXRlZFwiIFtzdGVwXT1cIjVcIj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgb25WYWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8SVNsaWRlclZhbHVlQ2hhbmdlRXZlbnRBcmdzPigpO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBpc0FjdGl2ZUxhYmVsID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIGFjdGl2ZUhhbmRsZTogU2xpZGVySGFuZGxlID0gU2xpZGVySGFuZGxlLlRPO1xuXG4gICAgQFZpZXdDaGlsZCgnc2xpZGVyJylcbiAgICBwcml2YXRlIHNsaWRlcjogRWxlbWVudFJlZjtcblxuICAgIEBWaWV3Q2hpbGQoJ3RyYWNrJylcbiAgICBwcml2YXRlIHRyYWNrOiBFbGVtZW50UmVmO1xuXG4gICAgQFZpZXdDaGlsZCgndGlja3MnKVxuICAgIHByaXZhdGUgdGlja3M6IEVsZW1lbnRSZWY7XG5cbiAgICBAVmlld0NoaWxkKCd0aHVtYkZyb20nKVxuICAgIHByaXZhdGUgdGh1bWJGcm9tOiBFbGVtZW50UmVmO1xuXG4gICAgQFZpZXdDaGlsZCgndGh1bWJUbycpXG4gICAgcHJpdmF0ZSB0aHVtYlRvOiBFbGVtZW50UmVmO1xuXG5cbiAgICAvLyBNZWFzdXJlcyAmIENvb3JkaW5hdGVzXG4gICAgcHJpdmF0ZSB3aWR0aCA9IDA7XG4gICAgcHJpdmF0ZSB4T2Zmc2V0ID0gMDtcbiAgICBwcml2YXRlIHhQb2ludGVyID0gMDtcbiAgICBwcml2YXRlIHBQb2ludGVyID0gMDtcblxuICAgIC8vIExpbWl0IGhhbmRsZSB0cmF2ZWwgem9uZVxuICAgIHByaXZhdGUgcE1pbiA9IDA7XG4gICAgcHJpdmF0ZSBwTWF4ID0gMTtcblxuICAgIC8vIEZyb20vdXBwZXJWYWx1ZSBpbiBwZXJjZW50IHZhbHVlc1xuICAgIHByaXZhdGUgaGFzVmlld0luaXQgPSBmYWxzZTtcbiAgICBwcml2YXRlIHRpbWVyO1xuICAgIHByaXZhdGUgX21pblZhbHVlID0gMDtcbiAgICBwcml2YXRlIF9tYXhWYWx1ZSA9IDEwMDtcbiAgICBwcml2YXRlIF9sb3dlckJvdW5kPzogbnVtYmVyO1xuICAgIHByaXZhdGUgX3VwcGVyQm91bmQ/OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfbG93ZXJWYWx1ZTogbnVtYmVyO1xuICAgIHByaXZhdGUgX3VwcGVyVmFsdWU6IG51bWJlcjtcbiAgICBwcml2YXRlIF90cmFja1VwcGVyQm91bmQ6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfdHJhY2tMb3dlckJvdW5kOiBib29sZWFuO1xuXG4gICAgcHJpdmF0ZSBfb25DaGFuZ2VDYWxsYmFjazogKF86IGFueSkgPT4gdm9pZCA9IG5vb3A7XG4gICAgcHJpdmF0ZSBfb25Ub3VjaGVkQ2FsbGJhY2s6ICgpID0+IHZvaWQgPSBub29wO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpSZXR1cm5zIHdoZXRoZXIgdGhlIGBJZ3hTbGlkZXJDb21wb25lbnRgIHR5cGUgaXMgUkFOR0UuXG4gICAgICpgYGB0eXBlc2NyaXB0XG4gICAgICpAVmlld0NoaWxkKFwic2xpZGVyXCIpXG4gICAgICpwdWJsaWMgc2xpZGVyOiBJZ3hTbGlkZXJDb21wb25lbnQ7XG4gICAgICpuZ0FmdGVyVmlld0luaXQoKXtcbiAgICAgKiAgICBsZXQgc2xpZGVyUmFuZ2UgPSB0aGlzLnNsaWRlci5pc1JhbmdlO1xuICAgICAqfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgaXNSYW5nZSgpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgaXNSYW5nZTogYm9vbGVhbiA9IHRoaXMudHlwZSA9PT0gU2xpZGVyVHlwZS5SQU5HRTtcblxuICAgICAgICByZXR1cm4gaXNSYW5nZTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUgZm9yIHRoZSBgSWd4U2xpZGVyQ29tcG9uZW50YC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICpAVmlld0NoaWxkKFwic2xpZGVyXCIpXG4gICAgICpwdWJsaWMgc2xpZGVyOiBJZ3hTbGlkZXJDb21wb25lbnQ7XG4gICAgICpuZ0FmdGVyVmlld0luaXQoKXtcbiAgICAgKiAgICBsZXQgc2xpZGVyTWF4ID0gdGhpcy5zbGlkZXIubWF4VmFsdWU7XG4gICAgICp9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIGdldCBtYXhWYWx1ZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWF4VmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWF4aW1hbCB2YWx1ZSBmb3IgdGhlIGBJZ3hTbGlkZXJDb21wb25lbnRgLlxuICAgICAqIFRoZSBkZWZhdWx0IG1heGltdW0gdmFsdWUgaXMgMTAwLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXNsaWRlciBbdHlwZV09XCJzbGlkZXJUeXBlXCIgW21pblZhbHVlXT1cIjU2XCIgW21heFZhbHVlXT1cIjI1NlwiPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHNldCBtYXhWYWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGlmICh2YWx1ZSA8PSB0aGlzLl9taW5WYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fbWF4VmFsdWUgPSB0aGlzLl9taW5WYWx1ZSArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9tYXhWYWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3RyYWNrVXBwZXJCb3VuZCkge1xuICAgICAgICAgICAgdGhpcy5fdXBwZXJCb3VuZCA9IHRoaXMuX21heFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW52YWxpZGF0ZVZhbHVlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpSZXR1cm5zIHRoZSBtaW5pbWFsIHZhbHVlIG9mIHRoZSBgSWd4U2xpZGVyQ29tcG9uZW50YC5cbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKkBWaWV3Q2hpbGQoXCJzbGlkZXIyXCIpXG4gICAgICpwdWJsaWMgc2xpZGVyOiBJZ3hTbGlkZXJDb21wb25lbnQ7XG4gICAgICpuZ0FmdGVyVmlld0luaXQoKXtcbiAgICAgKiAgICBsZXQgc2xpZGVyTWluID0gdGhpcy5zbGlkZXIubWluVmFsdWU7XG4gICAgICp9XG4gICAgICpgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IG1pblZhbHVlKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9taW5WYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtaW5pbWFsIHZhbHVlIGZvciB0aGUgYElneFNsaWRlckNvbXBvbmVudGAuXG4gICAgICogVGhlIGRlZmF1bHQgbWluaW1hbCB2YWx1ZSBpcyAwLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXNsaWRlciBbdHlwZV09XCJzbGlkZXJUeXBlXCIgW21pblZhbHVlXT1cIjU2XCIgW21heFZhbHVlXT1cIjEwMFwiPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHNldCBtaW5WYWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGlmICh2YWx1ZSA+PSB0aGlzLm1heFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9taW5WYWx1ZSA9IHRoaXMubWF4VmFsdWUgLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbWluVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl90cmFja0xvd2VyQm91bmQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvd2VyQm91bmQgPSB0aGlzLl9taW5WYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmludmFsaWRhdGVWYWx1ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBgSWd4U2xpZGVyQ29tcG9uZW50YC5cbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKkBWaWV3Q2hpbGQoXCJzbGlkZXJcIilcbiAgICAgKnB1YmxpYyBzbGlkZXI6IElneFNsaWRlckNvbXBvbmVudDtcbiAgICAgKm5nQWZ0ZXJWaWV3SW5pdCgpe1xuICAgICAqICAgIGxldCBzbGlkZXJMb3dCb3VuZCA9IHRoaXMuc2xpZGVyLmxvd2VyQm91bmQ7XG4gICAgICp9XG4gICAgICpgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGxvd2VyQm91bmQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvd2VyQm91bmQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbG93ZXIgYm91bmRhcnkgb2YgdGhlIGBJZ3hTbGlkZXJDb21wb25lbnRgLlxuICAgICAqIElmIG5vdCBzZXQgaXMgdGhlIHNhbWUgYXMgbWluIHZhbHVlLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXNsaWRlciBbc3RlcF09XCI1XCIgW2xvd2VyQm91bmRdPVwiMjBcIj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBzZXQgbG93ZXJCb3VuZCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLl90cmFja0xvd2VyQm91bmQpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYWNrTG93ZXJCb3VuZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlID49IHRoaXMudXBwZXJCb3VuZCkge1xuICAgICAgICAgICAgdGhpcy5fbG93ZXJCb3VuZCA9IHRoaXMubWluVmFsdWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sb3dlckJvdW5kID0gdGhpcy52YWx1ZUluUmFuZ2UodmFsdWUsIHRoaXMubWluVmFsdWUsIHRoaXMubWF4VmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBgSWd4U2xpZGVyQ29tcG9uZW50YC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICpAVmlld0NoaWxkKFwic2xpZGVyXCIpXG4gICAgICpwdWJsaWMgc2xpZGVyOiBJZ3hTbGlkZXJDb21wb25lbnQ7XG4gICAgICpuZ0FmdGVyVmlld0luaXQoKXtcbiAgICAgKiAgICBsZXQgc2xpZGVyVXBCb3VuZCA9IHRoaXMuc2xpZGVyLnVwcGVyQm91bmQ7XG4gICAgICp9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIGdldCB1cHBlckJvdW5kKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl91cHBlckJvdW5kO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBgSWd4U2xpZGVyQ29tcG9uZW50YC5cbiAgICAgKiBJZiBub3Qgc2V0IGlzIHRoZSBzYW1lIGFzIG1heCB2YWx1ZS5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1zbGlkZXIgW3N0ZXBdPVwiNVwiIFt1cHBlckJvdW5kXT1cIjIwXCI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgc2V0IHVwcGVyQm91bmQodmFsdWU6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5fdHJhY2tVcHBlckJvdW5kKSB7XG4gICAgICAgICAgICB0aGlzLl90cmFja1VwcGVyQm91bmQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZSA8PSB0aGlzLmxvd2VyQm91bmQpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwcGVyQm91bmQgPSB0aGlzLm1heFZhbHVlO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl91cHBlckJvdW5kID0gdGhpcy52YWx1ZUluUmFuZ2UodmFsdWUsIHRoaXMubWluVmFsdWUsIHRoaXMubWF4VmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxvd2VyIHZhbHVlIG9mIHRoZSBgSWd4U2xpZGVyQ29tcG9uZW50YC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogQFZpZXdDaGlsZChcInNsaWRlclwiKVxuICAgICAqIHB1YmxpYyBzbGlkZXI6IElneFNsaWRlckNvbXBvbmVudDtcbiAgICAgKiBwdWJsaWMgbG93VmFsdWUoZXZlbnQpe1xuICAgICAqICAgIGxldCBzbGlkZXJMb3dWYWx1ZSA9IHRoaXMuc2xpZGVyLmxvd2VyVmFsdWU7XG4gICAgICp9XG4gICAgICpgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGxvd2VyVmFsdWUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvd2VyVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpTZXRzIHRoZSBsb3dlciB2YWx1ZSBvZiB0aGUgYElneFNsaWRlckNvbXBvbmVudGAuXG4gICAgICpgYGB0eXBlc2NyaXB0XG4gICAgICpAVmlld0NoaWxkKFwic2xpZGVyMlwiKVxuICAgICAqcHVibGljIHNsaWRlcjogSWd4U2xpZGVyQ29tcG9uZW50O1xuICAgICAqcHVibGljIGxvd1ZhbHVlKGV2ZW50KXtcbiAgICAgKiAgICB0aGlzLnNsaWRlci5sb3dlclZhbHVlID0gMTIwO1xuICAgICAqfVxuICAgICAqYGBgXG4gICAgICovXG4gICAgcHVibGljIHNldCBsb3dlclZhbHVlKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgdmFsdWUgPSB0aGlzLnZhbHVlSW5SYW5nZSh2YWx1ZSwgdGhpcy5sb3dlckJvdW5kLCB0aGlzLnVwcGVyQm91bmQpO1xuXG4gICAgICAgIGlmICh0aGlzLmlzUmFuZ2UgJiYgdmFsdWUgPiB0aGlzLnVwcGVyVmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvd2VyVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlJldHVybnMgdGhlIHVwcGVyIHZhbHVlIG9mIHRoZSBgSWd4U2xpZGVyQ29tcG9uZW50YC5cbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKkBWaWV3Q2hpbGQoXCJzbGlkZXIyXCIpXG4gICAgICpwdWJsaWMgc2xpZGVyOiBJZ3hTbGlkZXJDb21wb25lbnQ7XG4gICAgICpwdWJsaWMgdXBwZXJWYWx1ZShldmVudCl7XG4gICAgICogICAgbGV0IHVwcGVyVmFsdWUgPSB0aGlzLnNsaWRlci51cHBlclZhbHVlO1xuICAgICAqfVxuICAgICAqYGBgXG4gICAgICovXG4gICAgcHVibGljIGdldCB1cHBlclZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdXBwZXJWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlNldHMgdGhlIHVwcGVyIHZhbHVlIG9mIHRoZSBgSWd4U2xpZGVyQ29tcG9uZW50YC5cbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKkBWaWV3Q2hpbGQoXCJzbGlkZXIyXCIpXG4gICAgICpwdWJsaWMgc2xpZGVyOiBJZ3hTbGlkZXJDb21wb25lbnQ7XG4gICAgICpwdWJsaWMgdXBwZXJWYWx1ZShldmVudCl7XG4gICAgICogICAgdGhpcy5zbGlkZXIudXBwZXJWYWx1ZSA9IDEyMDtcbiAgICAgKn1cbiAgICAgKmBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgdXBwZXJWYWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHZhbHVlID0gdGhpcy52YWx1ZUluUmFuZ2UodmFsdWUsIHRoaXMubG93ZXJCb3VuZCwgdGhpcy51cHBlckJvdW5kKTtcblxuICAgICAgICBpZiAodGhpcy5pc1JhbmdlICYmIHZhbHVlIDwgdGhpcy5sb3dlclZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl91cHBlclZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc2xpZGVyIHZhbHVlLiBJZiB0aGUgc2xpZGVyIGlzIG9mIHR5cGUgU0xJREVSIHRoZSByZXR1cm5lZCB2YWx1ZSBpcyBudW1iZXIuXG4gICAgICogSWYgdGhlIHNsaWRlciB0eXBlIGlzIFJBTkdFIHRoZSByZXR1cm5lZCB2YWx1ZSBpcyBvYmplY3QgY29udGFpbmluZyBsb3dlciBhbmQgdXBwZXIgcHJvcGVydGllcyBmb3IgdGhlIHZhbHVlcy5cbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKkBWaWV3Q2hpbGQoXCJzbGlkZXIyXCIpXG4gICAgICpwdWJsaWMgc2xpZGVyOiBJZ3hTbGlkZXJDb21wb25lbnQ7XG4gICAgICpwdWJsaWMgc2xpZGVyVmFsdWUoZXZlbnQpe1xuICAgICAqICAgIGxldCBzbGlkZXJWYWwgPSB0aGlzLnNsaWRlci52YWx1ZTtcbiAgICAgKn1cbiAgICAgKmBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgdmFsdWUoKTogbnVtYmVyIHwgSVJhbmdlU2xpZGVyVmFsdWUge1xuICAgICAgICBpZiAodGhpcy5pc1JhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGxvd2VyOiB0aGlzLnNuYXBWYWx1ZVRvU3RlcCh0aGlzLmxvd2VyVmFsdWUpLFxuICAgICAgICAgICAgICAgIHVwcGVyOiB0aGlzLnNuYXBWYWx1ZVRvU3RlcCh0aGlzLnVwcGVyVmFsdWUpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdmFsID0gdGhpcy5zbmFwVmFsdWVUb1N0ZXAodGhpcy51cHBlclZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzbGlkZXIgdmFsdWUuXG4gICAgICogSWYgdGhlIHNsaWRlciBpcyBvZiB0eXBlIFNMSURFUiB0aGUgYXJndW1lbnQgaXMgbnVtYmVyLiBCeSBkZWZhdWx0IGlmIG5vIHZhbHVlIGlzIHNldCB0aGUgZGVmYXVsdCB2YWx1ZSBpc1xuICAgICAqIHNhbWUgYXMgbG93ZXIgdXBwZXIgYm91bmQuXG4gICAgICogSWYgdGhlIHNsaWRlciB0eXBlIGlzIFJBTkdFIHRoZSB0aGUgYXJndW1lbnQgaXMgb2JqZWN0IGNvbnRhaW5pbmcgbG93ZXIgYW5kIHVwcGVyIHByb3BlcnRpZXMgZm9yIHRoZSB2YWx1ZXMuXG4gICAgICogQnkgZGVmYXVsdCBpZiBubyB2YWx1ZSBpcyBzZXQgdGhlIGRlZmF1bHQgdmFsdWUgaXMgZm9yIGxvd2VyIHZhbHVlIGl0IGlzIHRoZSBzYW1lIGFzIGxvd2VyIGJvdW5kIGFuZCBpZiBub1xuICAgICAqIHZhbHVlIGlzIHNldCBmb3IgdGhlIHVwcGVyIHZhbHVlIGl0IGlzIHRoZSBzYW1lIGFzIHRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICpyYW5nZVZhbHVlID0ge1xuICAgICAqICAgbG93ZXI6IDMwLFxuICAgICAqICAgdXBwZXI6IDYwXG4gICAgICp9O1xuICAgICAqIGBgYFxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXNsaWRlciBbdHlwZV09XCJzbGlkZXJUeXBlXCIgWyhuZ01vZGVsKV09XCJyYW5nZVZhbHVlXCIgW21pblZhbHVlXT1cIjU2XCIgW21heFZhbHVlXT1cIjI1NlwiPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHNldCB2YWx1ZSh2YWx1ZTogbnVtYmVyIHwgSVJhbmdlU2xpZGVyVmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUmFuZ2UpIHtcbiAgICAgICAgICAgIHRoaXMudXBwZXJWYWx1ZSA9IHRoaXMuc25hcFZhbHVlVG9TdGVwKHZhbHVlIGFzIG51bWJlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVwcGVyVmFsdWUgPVxuICAgICAgICAgICAgICAgIHRoaXMuc25hcFZhbHVlVG9TdGVwKCh2YWx1ZSBhcyBJUmFuZ2VTbGlkZXJWYWx1ZSkgPT0gbnVsbCA/IG51bGwgOiAodmFsdWUgYXMgSVJhbmdlU2xpZGVyVmFsdWUpLnVwcGVyKTtcbiAgICAgICAgICAgIHRoaXMubG93ZXJWYWx1ZSA9XG4gICAgICAgICAgICAgICAgdGhpcy5zbmFwVmFsdWVUb1N0ZXAoKHZhbHVlIGFzIElSYW5nZVNsaWRlclZhbHVlKSA9PSBudWxsID8gbnVsbCA6ICh2YWx1ZSBhcyBJUmFuZ2VTbGlkZXJWYWx1ZSkubG93ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fb25DaGFuZ2VDYWxsYmFjayh0aGlzLnZhbHVlKTtcblxuICAgICAgICBpZiAodGhpcy5oYXNWaWV3SW5pdCkge1xuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkhhbmRsZXNBbmRVcGRhdGVUcmFjaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMubG93ZXJCb3VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmxvd2VyQm91bmQgPSB0aGlzLm1pblZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fdHJhY2tMb3dlckJvdW5kID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnVwcGVyQm91bmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy51cHBlckJvdW5kID0gdGhpcy5tYXhWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX3RyYWNrVXBwZXJCb3VuZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pc1JhbmdlKSB7XG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKCh0aGlzLnZhbHVlIGFzIElSYW5nZVNsaWRlclZhbHVlKS5sb3dlcikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0ge1xuICAgICAgICAgICAgICAgICAgICBsb3dlcjogdGhpcy5sb3dlckJvdW5kLFxuICAgICAgICAgICAgICAgICAgICB1cHBlcjogKHRoaXMudmFsdWUgYXMgSVJhbmdlU2xpZGVyVmFsdWUpLnVwcGVyXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKE51bWJlci5pc05hTigodGhpcy52YWx1ZSBhcyBJUmFuZ2VTbGlkZXJWYWx1ZSkudXBwZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbG93ZXI6ICh0aGlzLnZhbHVlIGFzIElSYW5nZVNsaWRlclZhbHVlKS5sb3dlcixcbiAgICAgICAgICAgICAgICAgICAgdXBwZXI6IHRoaXMudXBwZXJCb3VuZFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHRoaXMudmFsdWUgYXMgbnVtYmVyKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmxvd2VyQm91bmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBNaW4gPSB0aGlzLnZhbHVlVG9GcmFjdGlvbih0aGlzLmxvd2VyQm91bmQpIHx8IDA7XG4gICAgICAgIHRoaXMucE1heCA9IHRoaXMudmFsdWVUb0ZyYWN0aW9uKHRoaXMudXBwZXJCb3VuZCkgfHwgMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5oYXNWaWV3SW5pdCA9IHRydWU7XG4gICAgICAgIHRoaXMucG9zaXRpb25IYW5kbGVzQW5kVXBkYXRlVHJhY2soKTtcbiAgICAgICAgdGhpcy5zZXRUaWNrSW50ZXJ2YWwoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fb25DaGFuZ2VDYWxsYmFjayA9IGZuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLl9vblRvdWNoZWRDYWxsYmFjayA9IGZuO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgZ2V0RWRpdEVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzUmFuZ2UgPyB0aGlzLnRodW1iRnJvbS5uYXRpdmVFbGVtZW50IDogdGhpcy50aHVtYlRvLm5hdGl2ZUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBzaG93VGh1bWJzTGFiZWxzKCkge1xuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNDb250aW51b3VzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50aW1lciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaXNBY3RpdmVMYWJlbCA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIG9uRm9jdXMoJGV2ZW50OiBGb2N1c0V2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmlzUmFuZ2UgJiYgJGV2ZW50LnRhcmdldCA9PT0gdGhpcy50aHVtYkZyb20ubmF0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVIYW5kbGUgPSBTbGlkZXJIYW5kbGUuRlJPTTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkZXZlbnQudGFyZ2V0ID09PSB0aGlzLnRodW1iVG8ubmF0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVIYW5kbGUgPSBTbGlkZXJIYW5kbGUuVE87XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRvZ2dsZVRodW1iTGFiZWwoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIG9uUGFuRW5kKCRldmVudCkge1xuICAgICAgICB0aGlzLmhpZGVUaHVtYnNMYWJlbHMoKTtcbiAgICAgICAgdGhpcy5lbWl0VmFsdWVDaGFuZ2VkKG51bGwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgaGlkZVRodW1iTGFiZWxzT25CbHVyKCkge1xuICAgICAgICBpZiAodGhpcy50aW1lciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaXNBY3RpdmVMYWJlbCA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgb25LZXlEb3duKCRldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaW5jcmVtZW50U2lnbjtcblxuICAgICAgICBpZiAoJGV2ZW50LmtleS5lbmRzV2l0aCgnTGVmdCcpKSB7XG4gICAgICAgICAgICBpbmNyZW1lbnRTaWduID0gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAoJGV2ZW50LmtleS5lbmRzV2l0aCgnUmlnaHQnKSkge1xuICAgICAgICAgICAgaW5jcmVtZW50U2lnbiA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWU7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNSYW5nZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlSGFuZGxlID09PSBTbGlkZXJIYW5kbGUuRlJPTSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0xvd2VyID0gKHRoaXMudmFsdWUgYXMgSVJhbmdlU2xpZGVyVmFsdWUpLmxvd2VyICsgaW5jcmVtZW50U2lnbiAqIHRoaXMuc3RlcDtcblxuICAgICAgICAgICAgICAgIGlmIChuZXdMb3dlciA+PSAodGhpcy52YWx1ZSBhcyBJUmFuZ2VTbGlkZXJWYWx1ZSkudXBwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aHVtYlRvLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxvd2VyOiBuZXdMb3dlcixcbiAgICAgICAgICAgICAgICAgICAgdXBwZXI6ICh0aGlzLnZhbHVlIGFzIElSYW5nZVNsaWRlclZhbHVlKS51cHBlclxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1VwcGVyID0gKHRoaXMudmFsdWUgYXMgSVJhbmdlU2xpZGVyVmFsdWUpLnVwcGVyICsgaW5jcmVtZW50U2lnbiAqIHRoaXMuc3RlcDtcblxuICAgICAgICAgICAgICAgIGlmIChuZXdVcHBlciA8PSAodGhpcy52YWx1ZSBhcyBJUmFuZ2VTbGlkZXJWYWx1ZSkubG93ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aHVtYkZyb20ubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbG93ZXI6ICh0aGlzLnZhbHVlIGFzIElSYW5nZVNsaWRlclZhbHVlKS5sb3dlcixcbiAgICAgICAgICAgICAgICAgICAgdXBwZXI6ICh0aGlzLnZhbHVlIGFzIElSYW5nZVNsaWRlclZhbHVlKS51cHBlciArIGluY3JlbWVudFNpZ24gKiB0aGlzLnN0ZXBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUgYXMgbnVtYmVyICsgaW5jcmVtZW50U2lnbiAqIHRoaXMuc3RlcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlQ2hhbmdlZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdFZhbHVlQ2hhbmdlZCh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNob3dUaHVtYnNMYWJlbHMoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIG9uVGFwKCRldmVudCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIHRoaXMudXBkYXRlKCRldmVudCk7XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWVDaGFuZ2VkKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0VmFsdWVDaGFuZ2VkKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGUoJGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJGV2ZW50LnR5cGUgPT09ICd0YXAnKSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZVRodW1iTGFiZWwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB3aWR0aCBhbmQgb2Zmc2V0IGZpcnN0XG4gICAgICAgIHRoaXMuc2V0U2xpZGVyV2lkdGgoKTtcbiAgICAgICAgdGhpcy5zZXRTbGlkZXJPZmZzZXQoKTtcblxuICAgICAgICAvLyBUaGVuIGdldCBwb2ludGVyIGNvb3JkaW5hdGVzXG4gICAgICAgIHRoaXMuc2V0UG9pbnRlclBvc2l0aW9uKCRldmVudCk7XG4gICAgICAgIHRoaXMuc2V0UG9pbnRlclBlcmNlbnQoKTtcblxuICAgICAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IGhhbmRsZSBpZiBkdWFsIHNsaWRlclxuICAgICAgICBpZiAodGhpcy5pc1JhbmdlKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3Nlc3RIYW5kbGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBUby9Gcm9tIFZhbHVlc1xuICAgICAgICB0aGlzLnNldFZhbHVlcygpO1xuICAgICAgICAvLyB0aGlzLnByaW50SW5mbygpO1xuXG4gICAgICAgIC8vIEZpbmFsbHkgZG8gcG9zaXRpb25IYW5kbGVzQW5kVXBkYXRlVHJhY2sgdGhlIERPTVxuICAgICAgICAvLyBiYXNlZCBvbiBkYXRhIHZhbHVlc1xuICAgICAgICB0aGlzLnBvc2l0aW9uSGFuZGxlc0FuZFVwZGF0ZVRyYWNrKCk7XG4gICAgICAgIHRoaXMuX29uVG91Y2hlZENhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBoaWRlVGh1bWJzTGFiZWxzKCkge1xuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNDb250aW51b3VzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dChcbiAgICAgICAgICAgICgpID0+IHRoaXMuaXNBY3RpdmVMYWJlbCA9IGZhbHNlLFxuICAgICAgICAgICAgdGhpcy50aHVtYkxhYmVsVmlzaWJpbGl0eUR1cmF0aW9uXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB2YWx1ZUluUmFuZ2UodmFsdWUsIG1pbiA9IDAsIG1heCA9IDEwMCkge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4odmFsdWUsIG1heCksIG1pbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbnZhbGlkYXRlVmFsdWUoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1JhbmdlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZSA+PSB0aGlzLl9sb3dlckJvdW5kICYmIHRoaXMudmFsdWUgPD0gdGhpcy5fdXBwZXJCb3VuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb25IYW5kbGVzQW5kVXBkYXRlVHJhY2soKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy52YWx1ZSA8IHRoaXMuX2xvd2VyQm91bmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5fbG93ZXJCb3VuZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy52YWx1ZSA+IHRoaXMuX3VwcGVyQm91bmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5fdXBwZXJCb3VuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZSBhcyBJUmFuZ2VTbGlkZXJWYWx1ZTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlLmxvd2VyID49IHRoaXMuX2xvd2VyQm91bmQgJiYgdmFsdWUubG93ZXIgPD0gdGhpcy5fdXBwZXJCb3VuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb25IYW5kbGVzQW5kVXBkYXRlVHJhY2soKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUubG93ZXIgPCB0aGlzLl9sb3dlckJvdW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbG93ZXI6IHRoaXMuX2xvd2VyQm91bmQsXG4gICAgICAgICAgICAgICAgICAgIHVwcGVyOiB2YWx1ZS51cHBlclxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLmxvd2VyID4gdGhpcy5fdXBwZXJCb3VuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxvd2VyOiB2YWx1ZS5sb3dlcixcbiAgICAgICAgICAgICAgICAgICAgdXBwZXI6IHRoaXMuX3VwcGVyQm91bmRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodmFsdWUudXBwZXIgPj0gdGhpcy5fbG93ZXJCb3VuZCAmJiB2YWx1ZS51cHBlciA8PSB0aGlzLl91cHBlckJvdW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkhhbmRsZXNBbmRVcGRhdGVUcmFjaygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS51cHBlciA8IHRoaXMuX2xvd2VyQm91bmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0ge1xuICAgICAgICAgICAgICAgICAgICBsb3dlcjogdGhpcy5fbG93ZXJCb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgdXBwZXI6IHZhbHVlLnVwcGVyXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUudXBwZXIgPiB0aGlzLl91cHBlckJvdW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbG93ZXI6IHZhbHVlLmxvd2VyLFxuICAgICAgICAgICAgICAgICAgICB1cHBlcjogdGhpcy5fdXBwZXJCb3VuZFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlVGlja01hcmtzKGNvbG9yOiBzdHJpbmcsIGludGVydmFsOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIGByZXBlYXRpbmctbGluZWFyLWdyYWRpZW50KFxuICAgICAgICAgICAgJHsndG8gbGVmdCd9LFxuICAgICAgICAgICAgJHtjb2xvcn0sXG4gICAgICAgICAgICAke2NvbG9yfSAxLjVweCxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50IDEuNXB4LFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgJHtpbnRlcnZhbH0lXG4gICAgICAgICksIHJlcGVhdGluZy1saW5lYXItZ3JhZGllbnQoXG4gICAgICAgICAgICAkeyd0byByaWdodCd9LFxuICAgICAgICAgICAgJHtjb2xvcn0sXG4gICAgICAgICAgICAke2NvbG9yfSAxLjVweCxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50IDEuNXB4LFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgJHtpbnRlcnZhbH0lXG4gICAgICAgIClgO1xuICAgIH1cblxuICAgIHByaXZhdGUgdG9nZ2xlVGh1bWJMYWJlbCgpIHtcbiAgICAgICAgdGhpcy5zaG93VGh1bWJzTGFiZWxzKCk7XG4gICAgICAgIHRoaXMuaGlkZVRodW1ic0xhYmVscygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0U2xpZGVyT2Zmc2V0KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnhPZmZzZXQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b0ZpeGVkKG51bTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgbnVtID0gcGFyc2VGbG9hdChudW0udG9GaXhlZCgyMCkpO1xuICAgICAgICByZXR1cm4gbnVtO1xuICAgIH1cblxuICAgIHByaXZhdGUgcG9zaXRpb25IYW5kbGUoaGFuZGxlOiBFbGVtZW50UmVmLCBwb3NpdGlvbjogbnVtYmVyKSB7XG4gICAgICAgIGhhbmRsZS5uYXRpdmVFbGVtZW50LnN0eWxlLmxlZnQgPSBgJHt0aGlzLnZhbHVlVG9GcmFjdGlvbihwb3NpdGlvbikgKiAxMDB9JWA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwb3NpdGlvbkhhbmRsZXNBbmRVcGRhdGVUcmFjaygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUmFuZ2UpIHtcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25IYW5kbGUodGhpcy50aHVtYlRvLCB0aGlzLnZhbHVlIGFzIG51bWJlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uSGFuZGxlKHRoaXMudGh1bWJUbywgKHRoaXMudmFsdWUgYXMgSVJhbmdlU2xpZGVyVmFsdWUpLnVwcGVyKTtcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25IYW5kbGUodGhpcy50aHVtYkZyb20sICh0aGlzLnZhbHVlIGFzIElSYW5nZVNsaWRlclZhbHVlKS5sb3dlcik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnVwZGF0ZVRyYWNrKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbG9zZXN0SGFuZGxlKCkge1xuICAgICAgICBjb25zdCBmcm9tT2Zmc2V0ID0gdGhpcy50aHVtYkZyb20ubmF0aXZlRWxlbWVudC5vZmZzZXRMZWZ0ICsgdGhpcy50aHVtYkZyb20ubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCAvIDI7XG4gICAgICAgIGNvbnN0IHRvT2Zmc2V0ID0gdGhpcy50aHVtYlRvLm5hdGl2ZUVsZW1lbnQub2Zmc2V0TGVmdCArIHRoaXMudGh1bWJUby5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoIC8gMjtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLmNsb3Nlc3RUbyh0aGlzLnhQb2ludGVyLCBbZnJvbU9mZnNldCwgdG9PZmZzZXRdKTtcblxuICAgICAgICBpZiAobWF0Y2ggPT09IHRvT2Zmc2V0KSB7XG4gICAgICAgICAgICB0aGlzLnRodW1iVG8ubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9IGVsc2UgaWYgKG1hdGNoID09PSBmcm9tT2Zmc2V0KSB7XG4gICAgICAgICAgICB0aGlzLnRodW1iRnJvbS5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFRpY2tJbnRlcnZhbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDb250aW51b3VzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHRoaXMuc3RlcCA+IDEgPyB0aGlzLnN0ZXAgOiBudWxsO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMudGlja3MubmF0aXZlRWxlbWVudCwgJ2JhY2tncm91bmQnLCB0aGlzLmdlbmVyYXRlVGlja01hcmtzKCd3aGl0ZScsIGludGVydmFsKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzbmFwVmFsdWVUb1N0ZXAodmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IHZhbHVlTW9kU3RlcCA9ICh2YWx1ZSAtIHRoaXMubWluVmFsdWUpICUgdGhpcy5zdGVwO1xuICAgICAgICBsZXQgc25hcFZhbHVlID0gdmFsdWUgLSB2YWx1ZU1vZFN0ZXA7XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKHZhbHVlTW9kU3RlcCkgKiAyID49IHRoaXMuc3RlcCkge1xuICAgICAgICAgICAgc25hcFZhbHVlICs9ICh2YWx1ZU1vZFN0ZXAgPiAwKSA/IHRoaXMuc3RlcCA6ICgtdGhpcy5zdGVwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHNuYXBWYWx1ZS50b0ZpeGVkKDIwKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbG9zZXN0VG8oZ29hbDogbnVtYmVyLCBwb3NpdGlvbnM6IG51bWJlcltdKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9ucy5yZWR1Y2UoKHByZXZpb3VzLCBjdXJyZW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKE1hdGguYWJzKGdvYWwgLSBjdXJyZW50KSA8IE1hdGguYWJzKGdvYWwgLSBwcmV2aW91cykgPyBjdXJyZW50IDogcHJldmlvdXMpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBTZXQgVmFsdWVzIGZvciBUby9Gcm9tIGJhc2VkIG9uIGFjdGl2ZSBoYW5kbGVcbiAgICBwcml2YXRlIHNldFZhbHVlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlSGFuZGxlID09PSBTbGlkZXJIYW5kbGUuVE8pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0ge1xuICAgICAgICAgICAgICAgICAgICBsb3dlcjogKHRoaXMudmFsdWUgYXMgSVJhbmdlU2xpZGVyVmFsdWUpLmxvd2VyLFxuICAgICAgICAgICAgICAgICAgICB1cHBlcjogdGhpcy5mcmFjdGlvblRvVmFsdWUodGhpcy5wUG9pbnRlcilcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5mcmFjdGlvblRvVmFsdWUodGhpcy5wUG9pbnRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5hY3RpdmVIYW5kbGUgPT09IFNsaWRlckhhbmRsZS5GUk9NKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0ge1xuICAgICAgICAgICAgICAgIGxvd2VyOiB0aGlzLmZyYWN0aW9uVG9WYWx1ZSh0aGlzLnBQb2ludGVyKSxcbiAgICAgICAgICAgICAgICB1cHBlcjogKHRoaXMudmFsdWUgYXMgSVJhbmdlU2xpZGVyVmFsdWUpLnVwcGVyXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRTbGlkZXJXaWR0aCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuc2xpZGVyLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRQb2ludGVyUG9zaXRpb24oZSkge1xuICAgICAgICB0aGlzLnhQb2ludGVyID0gZS5jZW50ZXIueCAtIHRoaXMuZ2V0U2xpZGVyT2Zmc2V0KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRTbGlkZXJPZmZzZXQoKSB7XG4gICAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLnNsaWRlci5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB0aGlzLnhPZmZzZXQgPSByZWN0LmxlZnQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRQb2ludGVyUGVyY2VudCgpIHtcbiAgICAgICAgdGhpcy5wUG9pbnRlciA9IHRoaXMudmFsdWVJblJhbmdlKHRoaXMudG9GaXhlZCh0aGlzLnhQb2ludGVyIC8gdGhpcy53aWR0aCksIHRoaXMucE1pbiwgdGhpcy5wTWF4KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHZhbHVlVG9GcmFjdGlvbih2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlSW5SYW5nZSgodmFsdWUgLSB0aGlzLm1pblZhbHVlKSAvICh0aGlzLm1heFZhbHVlIC0gdGhpcy5taW5WYWx1ZSksIHRoaXMucE1pbiwgdGhpcy5wTWF4KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZyYWN0aW9uVG9WYWx1ZShmcmFjdGlvbjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgbWF4OiBudW1iZXIgPSB0aGlzLm1heFZhbHVlO1xuICAgICAgICBjb25zdCBtaW46IG51bWJlciA9IHRoaXMubWluVmFsdWU7XG5cbiAgICAgICAgcmV0dXJuIChtYXggLSBtaW4pICogZnJhY3Rpb24gKyBtaW47XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVUcmFjaygpIHtcbiAgICAgICAgY29uc3QgZnJvbVBvc2l0aW9uID0gdGhpcy52YWx1ZVRvRnJhY3Rpb24odGhpcy5sb3dlclZhbHVlKTtcbiAgICAgICAgY29uc3QgdG9Qb3NpdGlvbiA9IHRoaXMudmFsdWVUb0ZyYWN0aW9uKHRoaXMudXBwZXJWYWx1ZSk7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uR2FwID0gKHRoaXMudmFsdWVUb0ZyYWN0aW9uKHRoaXMudXBwZXJWYWx1ZSkgLSB0aGlzLnZhbHVlVG9GcmFjdGlvbih0aGlzLmxvd2VyVmFsdWUpKTtcblxuICAgICAgICBpZiAoIXRoaXMuaXNSYW5nZSkge1xuICAgICAgICAgICAgdGhpcy50cmFjay5uYXRpdmVFbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGBzY2FsZVgoJHt0b1Bvc2l0aW9ufSlgO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNSYW5nZSkge1xuICAgICAgICAgICAgdGhpcy50cmFjay5uYXRpdmVFbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGBzY2FsZVgoJHsxfSlgO1xuICAgICAgICAgICAgdGhpcy50cmFjay5uYXRpdmVFbGVtZW50LnN0eWxlLmxlZnQgPSBgJHtmcm9tUG9zaXRpb24gKiAxMDB9JWA7XG4gICAgICAgICAgICB0aGlzLnRyYWNrLm5hdGl2ZUVsZW1lbnQuc3R5bGUud2lkdGggPSBgJHtwb3NpdGlvbkdhcCAqIDEwMH0lYDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlIGhhc1ZhbHVlQ2hhbmdlZChvbGRWYWx1ZSkge1xuICAgICAgICBjb25zdCBpc1NsaWRlcldpdGhEaWZmZXJlbnRWYWx1ZTogYm9vbGVhbiA9ICF0aGlzLmlzUmFuZ2UgJiYgb2xkVmFsdWUgIT09IHRoaXMudmFsdWU7XG4gICAgICAgIGNvbnN0IGlzUmFuZ2VXaXRoT25lRGlmZmVyZW50VmFsdWU6IGJvb2xlYW4gPSB0aGlzLmlzUmFuZ2UgJiZcbiAgICAgICAgICAgICgob2xkVmFsdWUgYXMgSVJhbmdlU2xpZGVyVmFsdWUpLmxvd2VyICE9PSAodGhpcy52YWx1ZSBhcyBJUmFuZ2VTbGlkZXJWYWx1ZSkubG93ZXIgfHxcbiAgICAgICAgICAgICAgICAob2xkVmFsdWUgYXMgSVJhbmdlU2xpZGVyVmFsdWUpLnVwcGVyICE9PSAodGhpcy52YWx1ZSBhcyBJUmFuZ2VTbGlkZXJWYWx1ZSkudXBwZXIpO1xuXG4gICAgICAgIHJldHVybiBpc1NsaWRlcldpdGhEaWZmZXJlbnRWYWx1ZSB8fCBpc1JhbmdlV2l0aE9uZURpZmZlcmVudFZhbHVlO1xuICAgIH1cblxuICAgIHByaXZhdGUgZW1pdFZhbHVlQ2hhbmdlZChvbGRWYWx1ZTogbnVtYmVyIHwgSVJhbmdlU2xpZGVyVmFsdWUpIHtcbiAgICAgICAgdGhpcy5vblZhbHVlQ2hhbmdlLmVtaXQoeyBvbGRWYWx1ZSwgdmFsdWU6IHRoaXMudmFsdWUgfSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtJZ3hTbGlkZXJDb21wb25lbnRdLFxuICAgIGV4cG9ydHM6IFtJZ3hTbGlkZXJDb21wb25lbnRdLFxuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIElneFNsaWRlck1vZHVsZSB7XG59XG4iXX0=