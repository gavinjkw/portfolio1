/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { IgxSorting, IgxDataRecordSorting } from './sorting-strategy';
import { IgxGrouping } from './grouping-strategy';
import { PagingError } from './paging-state.interface';
import { TreeGridFilteringStrategy } from '../grids/tree-grid/tree-grid.filtering.pipe';
import { FilteringStrategy } from './filtering-strategy';
import { cloneValue, mergeObjects } from '../core/utils';
import { TransactionType } from '../services/transaction/transaction';
/** @enum {string} */
var DataType = {
    String: 'string',
    Number: 'number',
    Boolean: 'boolean',
    Date: 'date',
};
export { DataType };
/**
 * @hidden
 */
var /**
 * @hidden
 */
DataUtil = /** @class */ (function () {
    function DataUtil() {
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} expressions
     * @param {?=} sorting
     * @return {?}
     */
    DataUtil.sort = /**
     * @template T
     * @param {?} data
     * @param {?} expressions
     * @param {?=} sorting
     * @return {?}
     */
    function (data, expressions, sorting) {
        if (sorting === void 0) { sorting = new IgxSorting(); }
        return sorting.sort(data, expressions);
    };
    /**
     * @param {?} hierarchicalData
     * @param {?} expressions
     * @param {?=} parent
     * @return {?}
     */
    DataUtil.treeGridSort = /**
     * @param {?} hierarchicalData
     * @param {?} expressions
     * @param {?=} parent
     * @return {?}
     */
    function (hierarchicalData, expressions, parent) {
        /** @type {?} */
        var res = [];
        hierarchicalData.forEach(function (hr) {
            /** @type {?} */
            var rec = DataUtil.cloneTreeGridRecord(hr);
            rec.parent = parent;
            if (rec.children) {
                rec.children = DataUtil.treeGridSort(rec.children, expressions, rec);
            }
            res.push(rec);
        });
        res = DataUtil.sort(res, expressions, new IgxDataRecordSorting());
        return res;
    };
    /**
     * @param {?} hierarchicalRecord
     * @return {?}
     */
    DataUtil.cloneTreeGridRecord = /**
     * @param {?} hierarchicalRecord
     * @return {?}
     */
    function (hierarchicalRecord) {
        /** @type {?} */
        var rec = {
            rowID: hierarchicalRecord.rowID,
            data: hierarchicalRecord.data,
            children: hierarchicalRecord.children,
            isFilteredOutParent: hierarchicalRecord.isFilteredOutParent,
            level: hierarchicalRecord.level,
            expanded: hierarchicalRecord.expanded
        };
        return rec;
    };
    /**
     * @template T
     * @param {?} data
     * @param {?} state
     * @param {?=} grid
     * @param {?=} groupsRecords
     * @return {?}
     */
    DataUtil.group = /**
     * @template T
     * @param {?} data
     * @param {?} state
     * @param {?=} grid
     * @param {?=} groupsRecords
     * @return {?}
     */
    function (data, state, grid, groupsRecords) {
        if (grid === void 0) { grid = null; }
        if (groupsRecords === void 0) { groupsRecords = []; }
        /** @type {?} */
        var grouping = new IgxGrouping();
        groupsRecords.splice(0, groupsRecords.length);
        return grouping.groupBy(data, state.expressions, grid, groupsRecords);
    };
    /**
     * @param {?} groupData
     * @param {?} state
     * @return {?}
     */
    DataUtil.restoreGroups = /**
     * @param {?} groupData
     * @param {?} state
     * @return {?}
     */
    function (groupData, state) {
        if (state.expressions.length === 0) {
            return groupData.data;
        }
        return this.restoreGroupsIterative(groupData, state);
    };
    /**
     * @private
     * @param {?} groupData
     * @param {?} state
     * @return {?}
     */
    DataUtil.restoreGroupsIterative = /**
     * @private
     * @param {?} groupData
     * @param {?} state
     * @return {?}
     */
    function (groupData, state) {
        var _this = this;
        /** @type {?} */
        var metadata = groupData.metadata;
        /** @type {?} */
        var result = [];
        /** @type {?} */
        var added = [];
        /** @type {?} */
        var chain;
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var j;
        /** @type {?} */
        var pointer;
        /** @type {?} */
        var expanded;
        for (i = 0; i < metadata.length;) {
            chain = [metadata[i]];
            pointer = metadata[i].groupParent;
            // break off if the parent is already added
            while (pointer && added[0] !== pointer) {
                chain.push(pointer);
                if (added[0] && added[0].level === pointer.level) {
                    added.shift();
                }
                pointer = pointer.groupParent;
            }
            var _loop_1 = function () {
                result.push(chain[j]);
                added.unshift(chain[j]);
                /** @type {?} */
                var hierarchy = this_1.getHierarchy(chain[j]);
                /** @type {?} */
                var expandState = state.expansion.find(function (s) {
                    return _this.isHierarchyMatch(s.hierarchy || [{ fieldName: chain[j].expression.fieldName, value: chain[j].value }], hierarchy);
                });
                expanded = expandState ? expandState.expanded : state.defaultExpanded;
                if (!expanded) {
                    return "break";
                }
            };
            var this_1 = this;
            for (j = chain.length - 1; j >= 0; j--) {
                var state_1 = _loop_1();
                if (state_1 === "break")
                    break;
            }
            added.shift();
            j = Math.max(j, 0);
            /** @type {?} */
            var start = chain[j].records.findIndex(function (r) { return r === groupData.data[i]; });
            /** @type {?} */
            var end = Math.min(metadata.length - i + start, chain[j].records.length);
            if (expanded) {
                result.push.apply(result, tslib_1.__spread(chain[j].records.slice(start, end)));
            }
            i += end - start;
        }
        return result;
    };
    /**
     * @template T
     * @param {?} data
     * @param {?} state
     * @return {?}
     */
    DataUtil.page = /**
     * @template T
     * @param {?} data
     * @param {?} state
     * @return {?}
     */
    function (data, state) {
        if (!state) {
            return data;
        }
        /** @type {?} */
        var len = data.length;
        /** @type {?} */
        var index = state.index;
        /** @type {?} */
        var res = [];
        /** @type {?} */
        var recordsPerPage = state.recordsPerPage;
        state.metadata = {
            countPages: 0,
            countRecords: data.length,
            error: PagingError.None
        };
        if (index < 0 || isNaN(index)) {
            state.metadata.error = PagingError.IncorrectPageIndex;
            return res;
        }
        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {
            state.metadata.error = PagingError.IncorrectRecordsPerPage;
            return res;
        }
        state.metadata.countPages = Math.ceil(len / recordsPerPage);
        if (!len) {
            return data;
        }
        if (index >= state.metadata.countPages) {
            state.metadata.error = PagingError.IncorrectPageIndex;
            return res;
        }
        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);
    };
    /**
     * @template T
     * @param {?} data
     * @param {?} state
     * @return {?}
     */
    DataUtil.filter = /**
     * @template T
     * @param {?} data
     * @param {?} state
     * @return {?}
     */
    function (data, state) {
        if (!state.strategy) {
            state.strategy = new FilteringStrategy();
        }
        return state.strategy.filter(data, state.expressionsTree);
    };
    /**
     * @param {?} data
     * @param {?} state
     * @return {?}
     */
    DataUtil.treeGridFilter = /**
     * @param {?} data
     * @param {?} state
     * @return {?}
     */
    function (data, state) {
        if (!state.strategy) {
            state.strategy = new TreeGridFilteringStrategy();
        }
        return state.strategy.filter(data, state.expressionsTree);
    };
    /**
     * @param {?} gRow
     * @return {?}
     */
    DataUtil.getHierarchy = /**
     * @param {?} gRow
     * @return {?}
     */
    function (gRow) {
        /** @type {?} */
        var hierarchy = [];
        if (gRow !== undefined && gRow.expression) {
            hierarchy.push({ fieldName: gRow.expression.fieldName, value: gRow.value });
            while (gRow.groupParent) {
                gRow = gRow.groupParent;
                hierarchy.unshift({ fieldName: gRow.expression.fieldName, value: gRow.value });
            }
        }
        return hierarchy;
    };
    /**
     * @param {?} h1
     * @param {?} h2
     * @return {?}
     */
    DataUtil.isHierarchyMatch = /**
     * @param {?} h1
     * @param {?} h2
     * @return {?}
     */
    function (h1, h2) {
        if (h1.length !== h2.length) {
            return false;
        }
        return h1.every(function (level, index) {
            return level.fieldName === h2[index].fieldName && level.value === h2[index].value;
        });
    };
    /**
     * Merges all changes from provided transactions into provided data collection
     * @param data Collection to merge
     * @param transactions Transactions to merge into data
     * @param primaryKey Primary key of the collection, if any
     * @param deleteRows Should delete rows with DELETE transaction type from data
     * @returns Provided data collections updated with all provided transactions
     */
    /**
     * Merges all changes from provided transactions into provided data collection
     * @template T
     * @param {?} data Collection to merge
     * @param {?} transactions Transactions to merge into data
     * @param {?=} primaryKey Primary key of the collection, if any
     * @param {?=} deleteRows Should delete rows with DELETE transaction type from data
     * @return {?} Provided data collections updated with all provided transactions
     */
    DataUtil.mergeTransactions = /**
     * Merges all changes from provided transactions into provided data collection
     * @template T
     * @param {?} data Collection to merge
     * @param {?} transactions Transactions to merge into data
     * @param {?=} primaryKey Primary key of the collection, if any
     * @param {?=} deleteRows Should delete rows with DELETE transaction type from data
     * @return {?} Provided data collections updated with all provided transactions
     */
    function (data, transactions, primaryKey, deleteRows) {
        if (deleteRows === void 0) { deleteRows = false; }
        data.forEach(function (item, index) {
            /** @type {?} */
            var rowId = primaryKey ? item[primaryKey] : item;
            /** @type {?} */
            var transaction = transactions.find(function (t) { return t.id === rowId; });
            if (transaction && transaction.type === TransactionType.UPDATE) {
                data[index] = transaction.newValue;
            }
        });
        if (deleteRows) {
            transactions
                .filter(function (t) { return t.type === TransactionType.DELETE; })
                .forEach(function (t) {
                /** @type {?} */
                var index = primaryKey ? data.findIndex(function (d) { return d[primaryKey] === t.id; }) : data.findIndex(function (d) { return d === t.id; });
                if (0 <= index && index < data.length) {
                    data.splice(index, 1);
                }
            });
        }
        data.push.apply(data, tslib_1.__spread(transactions
            .filter(function (t) { return t.type === TransactionType.ADD; })
            .map(function (t) { return t.newValue; })));
        return data;
    };
    /**
     * Merges all changes from provided transactions into provided hierarchical data collection
     * @param data Collection to merge
     * @param transactions Transactions to merge into data
     * @param childDataKey Data key of child collections
     * @param primaryKey Primary key of the collection, if any
     * @param deleteRows Should delete rows with DELETE transaction type from data
     * @returns Provided data collections updated with all provided transactions
     */
    /**
     * Merges all changes from provided transactions into provided hierarchical data collection
     * @param {?} data Collection to merge
     * @param {?} transactions Transactions to merge into data
     * @param {?} childDataKey Data key of child collections
     * @param {?=} primaryKey Primary key of the collection, if any
     * @param {?=} deleteRows Should delete rows with DELETE transaction type from data
     * @return {?} Provided data collections updated with all provided transactions
     */
    DataUtil.mergeHierarchicalTransactions = /**
     * Merges all changes from provided transactions into provided hierarchical data collection
     * @param {?} data Collection to merge
     * @param {?} transactions Transactions to merge into data
     * @param {?} childDataKey Data key of child collections
     * @param {?=} primaryKey Primary key of the collection, if any
     * @param {?=} deleteRows Should delete rows with DELETE transaction type from data
     * @return {?} Provided data collections updated with all provided transactions
     */
    function (data, transactions, childDataKey, primaryKey, deleteRows) {
        if (deleteRows === void 0) { deleteRows = false; }
        var e_1, _a;
        var _loop_2 = function (transaction) {
            if (transaction.path) {
                /** @type {?} */
                var parent_1 = this_2.findParentFromPath(data, primaryKey, childDataKey, transaction.path);
                /** @type {?} */
                var collection = parent_1 ? parent_1[childDataKey] : data;
                switch (transaction.type) {
                    case TransactionType.ADD:
                        //  if there is no parent this is ADD row at root level
                        if (parent_1 && !parent_1[childDataKey]) {
                            parent_1[childDataKey] = collection = [];
                        }
                        collection.push(transaction.newValue);
                        break;
                    case TransactionType.UPDATE:
                        /** @type {?} */
                        var updateIndex = collection.findIndex(function (x) { return x[primaryKey] === transaction.id; });
                        if (updateIndex !== -1) {
                            collection[updateIndex] = mergeObjects(cloneValue(collection[updateIndex]), transaction.newValue);
                        }
                        break;
                    case TransactionType.DELETE:
                        if (deleteRows) {
                            /** @type {?} */
                            var deleteIndex = collection.findIndex(function (r) { return r[primaryKey] === transaction.id; });
                            if (deleteIndex !== -1) {
                                collection.splice(deleteIndex, 1);
                            }
                        }
                        break;
                }
            }
            else {
                //  if there is no path this is ADD row in root. Push the newValue to data
                data.push(transaction.newValue);
            }
        };
        var this_2 = this;
        try {
            for (var transactions_1 = tslib_1.__values(transactions), transactions_1_1 = transactions_1.next(); !transactions_1_1.done; transactions_1_1 = transactions_1.next()) {
                var transaction = transactions_1_1.value;
                _loop_2(transaction);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (transactions_1_1 && !transactions_1_1.done && (_a = transactions_1.return)) _a.call(transactions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return data;
    };
    /**
     * @private
     * @param {?} data
     * @param {?} primaryKey
     * @param {?} childDataKey
     * @param {?} path
     * @return {?}
     */
    DataUtil.findParentFromPath = /**
     * @private
     * @param {?} data
     * @param {?} primaryKey
     * @param {?} childDataKey
     * @param {?} path
     * @return {?}
     */
    function (data, primaryKey, childDataKey, path) {
        var e_2, _a;
        /** @type {?} */
        var collection = data;
        /** @type {?} */
        var result;
        var _loop_3 = function (id) {
            result = collection && collection.find(function (x) { return x[primaryKey] === id; });
            if (!result) {
                return "break";
            }
            collection = result[childDataKey];
        };
        try {
            for (var path_1 = tslib_1.__values(path), path_1_1 = path_1.next(); !path_1_1.done; path_1_1 = path_1.next()) {
                var id = path_1_1.value;
                var state_2 = _loop_3(id);
                if (state_2 === "break")
                    break;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (path_1_1 && !path_1_1.done && (_a = path_1.return)) _a.call(path_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return result;
    };
    return DataUtil;
}());
/**
 * @hidden
 */
export { DataUtil };
//# sourceMappingURL=data:application/json;base64,