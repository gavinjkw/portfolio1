/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { animate, animation, style } from '@angular/animations';
import { EaseIn, EaseOut } from '../easings';
/** @type {?} */
var base = [
    style({
        opacity: "{{startOpacity}}",
        transform: "{{fromPosition}}"
    }),
    animate("{{duration}} {{delay}} {{easing}}", style({
        opacity: "{{endOpacity}}",
        transform: "{{toPosition}}"
    }))
];
/** @type {?} */
var baseInParams = {
    delay: '0s',
    duration: '350ms',
    easing: EaseOut.quad,
    endOpacity: 1,
    fromPosition: 'translateY(-500px)',
    startOpacity: 0,
    toPosition: 'translateY(0)'
};
/** @type {?} */
var baseOutParams = {
    delay: '0s',
    duration: '350ms',
    easing: EaseIn.quad,
    endOpacity: 0,
    fromPosition: 'translateY(0)',
    startOpacity: 1,
    toPosition: 'translateY(-500px)'
};
/** @type {?} */
var slideInTop = animation(base, { params: baseInParams });
/** @type {?} */
var slideInLeft = animation(base, {
    params: {
        delay: '0s',
        duration: '350ms',
        easing: EaseOut.quad,
        endOpacity: 1,
        fromPosition: 'translateX(-500px)',
        startOpacity: 0,
        toPosition: 'translateY(0)'
    }
});
/** @type {?} */
var slideInRight = animation(base, {
    params: {
        delay: '0s',
        duration: '350ms',
        easing: EaseOut.quad,
        endOpacity: 1,
        fromPosition: 'translateX(500px)',
        startOpacity: 0,
        toPosition: 'translateY(0)'
    }
});
/** @type {?} */
var slideInBottom = animation(base, {
    params: {
        delay: '0s',
        duration: '350ms',
        easing: EaseOut.quad,
        endOpacity: 1,
        fromPosition: 'translateY(500px)',
        startOpacity: 0,
        toPosition: 'translateY(0)'
    }
});
/** @type {?} */
var slideInTr = animation(base, {
    params: tslib_1.__assign({}, baseInParams, { fromPosition: 'translateY(-500px) translateX(500px)', toPosition: 'translateY(0) translateX(0)' })
});
/** @type {?} */
var slideInTl = animation(base, {
    params: tslib_1.__assign({}, baseInParams, { fromPosition: 'translateY(-500px) translateX(-500px)', toPosition: 'translateY(0) translateX(0)' })
});
/** @type {?} */
var slideInBr = animation(base, {
    params: tslib_1.__assign({}, baseInParams, { fromPosition: 'translateY(500px) translateX(500px)', toPosition: 'translateY(0) translateX(0)' })
});
/** @type {?} */
var slideInBl = animation(base, {
    params: tslib_1.__assign({}, baseInParams, { fromPosition: 'translateY(500px) translateX(-500px)', toPosition: 'translateY(0) translateX(0)' })
});
/** @type {?} */
var slideOutTop = animation(base, { params: baseOutParams });
/** @type {?} */
var slideOutRight = animation(base, {
    params: tslib_1.__assign({}, baseOutParams, { toPosition: 'translateX(500px)' })
});
/** @type {?} */
var slideOutBottom = animation(base, {
    params: {
        delay: '0s',
        duration: '350ms',
        easing: EaseIn.quad,
        endOpacity: 0,
        fromPosition: 'translateY(0)',
        startOpacity: 1,
        toPosition: 'translateY(500px)'
    }
});
/** @type {?} */
var slideOutLeft = animation(base, {
    params: tslib_1.__assign({}, baseOutParams, { toPosition: 'translateX(-500px)' })
});
/** @type {?} */
var slideOutTr = animation(base, {
    params: tslib_1.__assign({}, baseOutParams, { fromPosition: 'translateY(0) translateX(0)', toPosition: 'translateY(-500px) translateX(500px)' })
});
/** @type {?} */
var slideOutBr = animation(base, {
    params: tslib_1.__assign({}, baseOutParams, { fromPosition: 'translateY(0) translateX(0)', toPosition: 'translateY(500px) translateX(500px)' })
});
/** @type {?} */
var slideOutBl = animation(base, {
    params: tslib_1.__assign({}, baseOutParams, { fromPosition: 'translateY(0) translateX(0)', toPosition: 'translateY(500px) translateX(-500px)' })
});
/** @type {?} */
var slideOutTl = animation(base, {
    params: tslib_1.__assign({}, baseOutParams, { fromPosition: 'translateY(0) translateX(0)', toPosition: 'translateY(-500px) translateX(-500px)' })
});
export { slideInTop, slideInRight, slideInBottom, slideInLeft, slideInTr, slideInBr, slideInBl, slideInTl, slideOutTop, slideOutBottom, slideOutRight, slideOutLeft, slideOutTr, slideOutBr, slideOutBl, slideOutTl };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2FuaW1hdGlvbnMvc2xpZGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBaUQsS0FBSyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0csT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7O0lBR3ZDLElBQUksR0FBd0I7SUFDOUIsS0FBSyxDQUFDO1FBQ0YsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixTQUFTLEVBQUUsa0JBQWtCO0tBQ2hDLENBQUM7SUFDRixPQUFPLENBQ0gsbUNBQW1DLEVBQ25DLEtBQUssQ0FBQztRQUNGLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsU0FBUyxFQUFFLGdCQUFnQjtLQUM5QixDQUFDLENBQ0w7Q0FDSjs7SUFFSyxZQUFZLEdBQXFCO0lBQ25DLEtBQUssRUFBRSxJQUFJO0lBQ1gsUUFBUSxFQUFFLE9BQU87SUFDakIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxJQUFJO0lBQ3BCLFVBQVUsRUFBRSxDQUFDO0lBQ2IsWUFBWSxFQUFFLG9CQUFvQjtJQUNsQyxZQUFZLEVBQUUsQ0FBQztJQUNmLFVBQVUsRUFBRSxlQUFlO0NBQzlCOztJQUVLLGFBQWEsR0FBcUI7SUFDcEMsS0FBSyxFQUFFLElBQUk7SUFDWCxRQUFRLEVBQUUsT0FBTztJQUNqQixNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUk7SUFDbkIsVUFBVSxFQUFFLENBQUM7SUFDYixZQUFZLEVBQUUsZUFBZTtJQUM3QixZQUFZLEVBQUUsQ0FBQztJQUNmLFVBQVUsRUFBRSxvQkFBb0I7Q0FDbkM7O0lBRUssVUFBVSxHQUErQixTQUFTLENBQUMsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxDQUFDOztJQUVsRixXQUFXLEdBQStCLFNBQVMsQ0FB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LFlBQVksRUFBRSw2QkFBNkIsRUFDM0MsVUFBVSxFQUFFLHFDQUFxQyxHQUNwRDtDQUNKLENBQ0o7O0lBRUssVUFBVSxHQUErQixTQUFTLENBQUMsSUFBSSxFQUN6RDtJQUNJLE1BQU0sdUJBQ0MsYUFBYSxJQUNoQixZQUFZLEVBQUUsNkJBQTZCLEVBQzNDLFVBQVUsRUFBRSxzQ0FBc0MsR0FDckQ7Q0FDSixDQUNKOztJQUVLLFVBQVUsR0FBK0IsU0FBUyxDQUFDLElBQUksRUFDekQ7SUFDSSxNQUFNLHVCQUNDLGFBQWEsSUFDaEIsWUFBWSxFQUFFLDZCQUE2QixFQUMzQyxVQUFVLEVBQUUsdUNBQXVDLEdBQ3REO0NBQ0osQ0FDSjtBQUVELE9BQU8sRUFDSCxVQUFVLEVBQ1YsWUFBWSxFQUNaLGFBQWEsRUFDYixXQUFXLEVBQ1gsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFdBQVcsRUFDWCxjQUFjLEVBQ2QsYUFBYSxFQUNiLFlBQVksRUFDWixVQUFVLEVBQ1YsVUFBVSxFQUNWLFVBQVUsRUFDVixVQUFVLEVBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFuaW1hdGUsIGFuaW1hdGlvbiwgQW5pbWF0aW9uTWV0YWRhdGEsIEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhLCBzdHlsZSB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgRWFzZUluLCBFYXNlT3V0IH0gZnJvbSAnLi4vZWFzaW5ncyc7XG5pbXBvcnQgeyBJQW5pbWF0aW9uUGFyYW1zIH0gZnJvbSAnLi4vbWFpbic7XG5cbmNvbnN0IGJhc2U6IEFuaW1hdGlvbk1ldGFkYXRhW10gPSBbXG4gICAgc3R5bGUoe1xuICAgICAgICBvcGFjaXR5OiBge3tzdGFydE9wYWNpdHl9fWAsXG4gICAgICAgIHRyYW5zZm9ybTogYHt7ZnJvbVBvc2l0aW9ufX1gXG4gICAgfSksXG4gICAgYW5pbWF0ZShcbiAgICAgICAgYHt7ZHVyYXRpb259fSB7e2RlbGF5fX0ge3tlYXNpbmd9fWAsXG4gICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IGB7e2VuZE9wYWNpdHl9fWAsXG4gICAgICAgICAgICB0cmFuc2Zvcm06IGB7e3RvUG9zaXRpb259fWBcbiAgICAgICAgfSlcbiAgICApXG5dO1xuXG5jb25zdCBiYXNlSW5QYXJhbXM6IElBbmltYXRpb25QYXJhbXMgPSB7XG4gICAgZGVsYXk6ICcwcycsXG4gICAgZHVyYXRpb246ICczNTBtcycsXG4gICAgZWFzaW5nOiBFYXNlT3V0LnF1YWQsXG4gICAgZW5kT3BhY2l0eTogMSxcbiAgICBmcm9tUG9zaXRpb246ICd0cmFuc2xhdGVZKC01MDBweCknLFxuICAgIHN0YXJ0T3BhY2l0eTogMCxcbiAgICB0b1Bvc2l0aW9uOiAndHJhbnNsYXRlWSgwKSdcbn07XG5cbmNvbnN0IGJhc2VPdXRQYXJhbXM6IElBbmltYXRpb25QYXJhbXMgPSB7XG4gICAgZGVsYXk6ICcwcycsXG4gICAgZHVyYXRpb246ICczNTBtcycsXG4gICAgZWFzaW5nOiBFYXNlSW4ucXVhZCxcbiAgICBlbmRPcGFjaXR5OiAwLFxuICAgIGZyb21Qb3NpdGlvbjogJ3RyYW5zbGF0ZVkoMCknLFxuICAgIHN0YXJ0T3BhY2l0eTogMSxcbiAgICB0b1Bvc2l0aW9uOiAndHJhbnNsYXRlWSgtNTAwcHgpJ1xufTtcblxuY29uc3Qgc2xpZGVJblRvcDogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZSwgeyBwYXJhbXM6IGJhc2VJblBhcmFtcyB9KTtcblxuY29uc3Qgc2xpZGVJbkxlZnQ6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2UsXG4gICAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIGRlbGF5OiAnMHMnLFxuICAgICAgICAgICAgZHVyYXRpb246ICczNTBtcycsXG4gICAgICAgICAgICBlYXNpbmc6IEVhc2VPdXQucXVhZCxcbiAgICAgICAgICAgIGVuZE9wYWNpdHk6IDEsXG4gICAgICAgICAgICBmcm9tUG9zaXRpb246ICd0cmFuc2xhdGVYKC01MDBweCknLFxuICAgICAgICAgICAgc3RhcnRPcGFjaXR5OiAwLFxuICAgICAgICAgICAgdG9Qb3NpdGlvbjogJ3RyYW5zbGF0ZVkoMCknXG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5jb25zdCBzbGlkZUluUmlnaHQ6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2UsXG4gICAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIGRlbGF5OiAnMHMnLFxuICAgICAgICAgICAgZHVyYXRpb246ICczNTBtcycsXG4gICAgICAgICAgICBlYXNpbmc6IEVhc2VPdXQucXVhZCxcbiAgICAgICAgICAgIGVuZE9wYWNpdHk6IDEsXG4gICAgICAgICAgICBmcm9tUG9zaXRpb246ICd0cmFuc2xhdGVYKDUwMHB4KScsXG4gICAgICAgICAgICBzdGFydE9wYWNpdHk6IDAsXG4gICAgICAgICAgICB0b1Bvc2l0aW9uOiAndHJhbnNsYXRlWSgwKSdcbiAgICAgICAgfVxuICAgIH1cbik7XG5cbmNvbnN0IHNsaWRlSW5Cb3R0b206IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2UsXG4gICAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIGRlbGF5OiAnMHMnLFxuICAgICAgICAgICAgZHVyYXRpb246ICczNTBtcycsXG4gICAgICAgICAgICBlYXNpbmc6IEVhc2VPdXQucXVhZCxcbiAgICAgICAgICAgIGVuZE9wYWNpdHk6IDEsXG4gICAgICAgICAgICBmcm9tUG9zaXRpb246ICd0cmFuc2xhdGVZKDUwMHB4KScsXG4gICAgICAgICAgICBzdGFydE9wYWNpdHk6IDAsXG4gICAgICAgICAgICB0b1Bvc2l0aW9uOiAndHJhbnNsYXRlWSgwKSdcbiAgICAgICAgfVxuICAgIH1cbik7XG5cbmNvbnN0IHNsaWRlSW5UcjogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZSxcbiAgICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgLi4uYmFzZUluUGFyYW1zLFxuICAgICAgICAgICAgZnJvbVBvc2l0aW9uOiAndHJhbnNsYXRlWSgtNTAwcHgpIHRyYW5zbGF0ZVgoNTAwcHgpJyxcbiAgICAgICAgICAgIHRvUG9zaXRpb246ICd0cmFuc2xhdGVZKDApIHRyYW5zbGF0ZVgoMCknXG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5jb25zdCBzbGlkZUluVGw6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2UsXG4gICAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIC4uLmJhc2VJblBhcmFtcyxcbiAgICAgICAgICAgIGZyb21Qb3NpdGlvbjogJ3RyYW5zbGF0ZVkoLTUwMHB4KSB0cmFuc2xhdGVYKC01MDBweCknLFxuICAgICAgICAgICAgdG9Qb3NpdGlvbjogJ3RyYW5zbGF0ZVkoMCkgdHJhbnNsYXRlWCgwKSdcbiAgICAgICAgfVxuICAgIH1cbik7XG5cbmNvbnN0IHNsaWRlSW5CcjogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZSxcbiAgICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgLi4uYmFzZUluUGFyYW1zLFxuICAgICAgICAgICAgZnJvbVBvc2l0aW9uOiAndHJhbnNsYXRlWSg1MDBweCkgdHJhbnNsYXRlWCg1MDBweCknLFxuICAgICAgICAgICAgdG9Qb3NpdGlvbjogJ3RyYW5zbGF0ZVkoMCkgdHJhbnNsYXRlWCgwKSdcbiAgICAgICAgfVxuICAgIH1cbik7XG5cbmNvbnN0IHNsaWRlSW5CbDogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZSxcbiAgICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgLi4uYmFzZUluUGFyYW1zLFxuICAgICAgICAgICAgZnJvbVBvc2l0aW9uOiAndHJhbnNsYXRlWSg1MDBweCkgdHJhbnNsYXRlWCgtNTAwcHgpJyxcbiAgICAgICAgICAgIHRvUG9zaXRpb246ICd0cmFuc2xhdGVZKDApIHRyYW5zbGF0ZVgoMCknXG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5jb25zdCBzbGlkZU91dFRvcDogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZSwgeyBwYXJhbXM6IGJhc2VPdXRQYXJhbXMgfSk7XG5cbmNvbnN0IHNsaWRlT3V0UmlnaHQ6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2UsXG4gICAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIC4uLmJhc2VPdXRQYXJhbXMsXG4gICAgICAgICAgICB0b1Bvc2l0aW9uOiAndHJhbnNsYXRlWCg1MDBweCknXG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5jb25zdCBzbGlkZU91dEJvdHRvbTogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZSxcbiAgICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgZGVsYXk6ICcwcycsXG4gICAgICAgICAgICBkdXJhdGlvbjogJzM1MG1zJyxcbiAgICAgICAgICAgIGVhc2luZzogRWFzZUluLnF1YWQsXG4gICAgICAgICAgICBlbmRPcGFjaXR5OiAwLFxuICAgICAgICAgICAgZnJvbVBvc2l0aW9uOiAndHJhbnNsYXRlWSgwKScsXG4gICAgICAgICAgICBzdGFydE9wYWNpdHk6IDEsXG4gICAgICAgICAgICB0b1Bvc2l0aW9uOiAndHJhbnNsYXRlWSg1MDBweCknXG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5jb25zdCBzbGlkZU91dExlZnQ6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2UsXG4gICAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIC4uLmJhc2VPdXRQYXJhbXMsXG4gICAgICAgICAgICB0b1Bvc2l0aW9uOiAndHJhbnNsYXRlWCgtNTAwcHgpJ1xuICAgICAgICB9XG4gICAgfVxuKTtcblxuY29uc3Qgc2xpZGVPdXRUcjogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZSxcbiAgICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgLi4uYmFzZU91dFBhcmFtcyxcbiAgICAgICAgICAgIGZyb21Qb3NpdGlvbjogJ3RyYW5zbGF0ZVkoMCkgdHJhbnNsYXRlWCgwKScsXG4gICAgICAgICAgICB0b1Bvc2l0aW9uOiAndHJhbnNsYXRlWSgtNTAwcHgpIHRyYW5zbGF0ZVgoNTAwcHgpJ1xuICAgICAgICB9XG4gICAgfVxuKTtcblxuY29uc3Qgc2xpZGVPdXRCcjogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZSxcbiAgICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgLi4uYmFzZU91dFBhcmFtcyxcbiAgICAgICAgICAgIGZyb21Qb3NpdGlvbjogJ3RyYW5zbGF0ZVkoMCkgdHJhbnNsYXRlWCgwKScsXG4gICAgICAgICAgICB0b1Bvc2l0aW9uOiAndHJhbnNsYXRlWSg1MDBweCkgdHJhbnNsYXRlWCg1MDBweCknXG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5jb25zdCBzbGlkZU91dEJsOiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSA9IGFuaW1hdGlvbihiYXNlLFxuICAgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAuLi5iYXNlT3V0UGFyYW1zLFxuICAgICAgICAgICAgZnJvbVBvc2l0aW9uOiAndHJhbnNsYXRlWSgwKSB0cmFuc2xhdGVYKDApJyxcbiAgICAgICAgICAgIHRvUG9zaXRpb246ICd0cmFuc2xhdGVZKDUwMHB4KSB0cmFuc2xhdGVYKC01MDBweCknXG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5jb25zdCBzbGlkZU91dFRsOiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSA9IGFuaW1hdGlvbihiYXNlLFxuICAgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAuLi5iYXNlT3V0UGFyYW1zLFxuICAgICAgICAgICAgZnJvbVBvc2l0aW9uOiAndHJhbnNsYXRlWSgwKSB0cmFuc2xhdGVYKDApJyxcbiAgICAgICAgICAgIHRvUG9zaXRpb246ICd0cmFuc2xhdGVZKC01MDBweCkgdHJhbnNsYXRlWCgtNTAwcHgpJ1xuICAgICAgICB9XG4gICAgfVxuKTtcblxuZXhwb3J0IHtcbiAgICBzbGlkZUluVG9wLFxuICAgIHNsaWRlSW5SaWdodCxcbiAgICBzbGlkZUluQm90dG9tLFxuICAgIHNsaWRlSW5MZWZ0LFxuICAgIHNsaWRlSW5UcixcbiAgICBzbGlkZUluQnIsXG4gICAgc2xpZGVJbkJsLFxuICAgIHNsaWRlSW5UbCxcbiAgICBzbGlkZU91dFRvcCxcbiAgICBzbGlkZU91dEJvdHRvbSxcbiAgICBzbGlkZU91dFJpZ2h0LFxuICAgIHNsaWRlT3V0TGVmdCxcbiAgICBzbGlkZU91dFRyLFxuICAgIHNsaWRlT3V0QnIsXG4gICAgc2xpZGVPdXRCbCxcbiAgICBzbGlkZU91dFRsXG59O1xuIl19