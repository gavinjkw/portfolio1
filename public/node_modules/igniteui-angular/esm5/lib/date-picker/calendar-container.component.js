/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, Input, Output, EventEmitter, HostListener, HostBinding } from '@angular/core';
import { IgxCalendarComponent } from '../calendar';
import { InteractionMode } from '../core/enums';
/**
 * @hidden
 */
var IgxCalendarContainerComponent = /** @class */ (function () {
    function IgxCalendarContainerComponent() {
        this.mode = InteractionMode.Dialog;
        this.vertical = false;
        this.onClose = new EventEmitter();
        this.onTodaySelection = new EventEmitter();
        this.styleClass = 'igx-date-picker';
    }
    Object.defineProperty(IgxCalendarContainerComponent.prototype, "dropdownCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return this.mode === InteractionMode.DropDown;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarContainerComponent.prototype, "verticalCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return this.vertical && this.mode === InteractionMode.Dialog;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    IgxCalendarContainerComponent.prototype.onEscape = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.onClose.emit();
    };
    Object.defineProperty(IgxCalendarContainerComponent.prototype, "isReadonly", {
        /**
         * Returns whether the date-picker is in readonly dialog mode.
         *
         * @hidden
        */
        get: /**
         * Returns whether the date-picker is in readonly dialog mode.
         *
         * @hidden
         * @return {?}
         */
        function () {
            return this.mode === InteractionMode.Dialog;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Emits close event for the calendar.
     */
    /**
     * Emits close event for the calendar.
     * @return {?}
     */
    IgxCalendarContainerComponent.prototype.closeCalendar = /**
     * Emits close event for the calendar.
     * @return {?}
     */
    function () {
        this.onClose.emit();
    };
    /**
    * Emits today selection event for the calendar.
    */
    /**
     * Emits today selection event for the calendar.
     * @return {?}
     */
    IgxCalendarContainerComponent.prototype.triggerTodaySelection = /**
     * Emits today selection event for the calendar.
     * @return {?}
     */
    function () {
        this.onTodaySelection.emit();
    };
    IgxCalendarContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-calendar-container',
                    template: "<igx-calendar #calendar></igx-calendar>\n<div class=\"igx-date-picker__buttons\" *ngIf=\"isReadonly &&\n    (cancelButtonLabel || todayButtonLabel)\">\n    <button #closeButton *ngIf=\"cancelButtonLabel\" igxButton=\"flat\" igxRipple (click)=\"closeCalendar()\">\n        {{ cancelButtonLabel }}\n    </button>\n    <button #todayButton *ngIf=\"todayButtonLabel\" igxButton=\"flat\" igxRipple (click)=\"triggerTodaySelection()\">\n        {{ todayButtonLabel }}\n    </button>\n</div>",
                    styles: [':host {display: block;}']
                }] }
    ];
    IgxCalendarContainerComponent.propDecorators = {
        calendar: [{ type: ViewChild, args: ['calendar',] }],
        mode: [{ type: Input }],
        vertical: [{ type: Input }],
        cancelButtonLabel: [{ type: Input }],
        todayButtonLabel: [{ type: Input }],
        onClose: [{ type: Output }],
        onTodaySelection: [{ type: Output }],
        styleClass: [{ type: HostBinding, args: ['class.igx-date-picker',] }],
        dropdownCSS: [{ type: HostBinding, args: ['class.igx-date-picker--dropdown',] }],
        verticalCSS: [{ type: HostBinding, args: ['class.igx-date-picker--vertical',] }],
        onEscape: [{ type: HostListener, args: ['keydown.esc', ['$event'],] }, { type: HostListener, args: ['keydown.alt.arrowup', ['$event'],] }]
    };
    return IgxCalendarContainerComponent;
}());
export { IgxCalendarContainerComponent };
if (false) {
    /** @type {?} */
    IgxCalendarContainerComponent.prototype.calendar;
    /** @type {?} */
    IgxCalendarContainerComponent.prototype.mode;
    /** @type {?} */
    IgxCalendarContainerComponent.prototype.vertical;
    /** @type {?} */
    IgxCalendarContainerComponent.prototype.cancelButtonLabel;
    /** @type {?} */
    IgxCalendarContainerComponent.prototype.todayButtonLabel;
    /** @type {?} */
    IgxCalendarContainerComponent.prototype.onClose;
    /** @type {?} */
    IgxCalendarContainerComponent.prototype.onTodaySelection;
    /** @type {?} */
    IgxCalendarContainerComponent.prototype.styleClass;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZGF0ZS1waWNrZXIvY2FsZW5kYXItY29udGFpbmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUtoRDtJQUFBO1FBVVcsU0FBSSxHQUFvQixlQUFlLENBQUMsTUFBTSxDQUFDO1FBRy9DLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFTakIsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFHN0IscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUd0QyxlQUFVLEdBQUcsaUJBQWlCLENBQUM7SUF5QzFDLENBQUM7SUF2Q0csc0JBQ0ksc0RBQVc7Ozs7UUFEZjtZQUVJLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxlQUFlLENBQUMsUUFBUSxDQUFDO1FBQ2xELENBQUM7OztPQUFBO0lBRUQsc0JBQ0ksc0RBQVc7Ozs7UUFEZjtZQUVJLE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLGVBQWUsQ0FBQyxNQUFNLENBQUM7UUFDakUsQ0FBQzs7O09BQUE7Ozs7O0lBSU0sZ0RBQVE7Ozs7SUFGZixVQUVnQixLQUFLO1FBQ2pCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFPRCxzQkFBVyxxREFBVTtRQUxyQjs7OztVQUlFOzs7Ozs7O1FBQ0Y7WUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssZUFBZSxDQUFDLE1BQU0sQ0FBQztRQUNoRCxDQUFDOzs7T0FBQTtJQUVEOztPQUVHOzs7OztJQUNJLHFEQUFhOzs7O0lBQXBCO1FBQ0ksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQ7O01BRUU7Ozs7O0lBQ0ssNkRBQXFCOzs7O0lBQTVCO1FBQ0ksSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2pDLENBQUM7O2dCQXBFSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLHdCQUF3QjtvQkFFbEMsZ2ZBQWdEOzZCQUR2Qyx5QkFBeUI7aUJBRXJDOzs7MkJBRUksU0FBUyxTQUFDLFVBQVU7dUJBR3BCLEtBQUs7MkJBR0wsS0FBSztvQ0FHTCxLQUFLO21DQUdMLEtBQUs7MEJBR0wsTUFBTTttQ0FHTixNQUFNOzZCQUdOLFdBQVcsU0FBQyx1QkFBdUI7OEJBR25DLFdBQVcsU0FBQyxpQ0FBaUM7OEJBSzdDLFdBQVcsU0FBQyxpQ0FBaUM7MkJBSzdDLFlBQVksU0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRLENBQUMsY0FDdEMsWUFBWSxTQUFDLHFCQUFxQixFQUFFLENBQUMsUUFBUSxDQUFDOztJQTRCbkQsb0NBQUM7Q0FBQSxBQXJFRCxJQXFFQztTQWhFWSw2QkFBNkI7OztJQUN0QyxpREFDc0M7O0lBRXRDLDZDQUNzRDs7SUFFdEQsaURBQ3dCOztJQUV4QiwwREFDaUM7O0lBRWpDLHlEQUNnQzs7SUFFaEMsZ0RBQ29DOztJQUVwQyx5REFDNkM7O0lBRTdDLG1EQUNzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVmlld0NoaWxkLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneENhbGVuZGFyQ29tcG9uZW50IH0gZnJvbSAnLi4vY2FsZW5kYXInO1xuaW1wb3J0IHsgSW50ZXJhY3Rpb25Nb2RlIH0gZnJvbSAnLi4vY29yZS9lbnVtcyc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lneC1jYWxlbmRhci1jb250YWluZXInLFxuICAgIHN0eWxlczogWyc6aG9zdCB7ZGlzcGxheTogYmxvY2s7fSddLFxuICAgIHRlbXBsYXRlVXJsOiAnY2FsZW5kYXItY29udGFpbmVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDYWxlbmRhckNvbnRhaW5lckNvbXBvbmVudCB7XG4gICAgQFZpZXdDaGlsZCgnY2FsZW5kYXInKVxuICAgIHB1YmxpYyBjYWxlbmRhcjogSWd4Q2FsZW5kYXJDb21wb25lbnQ7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBtb2RlOiBJbnRlcmFjdGlvbk1vZGUgPSBJbnRlcmFjdGlvbk1vZGUuRGlhbG9nO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdmVydGljYWwgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGNhbmNlbEJ1dHRvbkxhYmVsOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyB0b2RheUJ1dHRvbkxhYmVsOiBzdHJpbmc7XG5cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgb25DbG9zZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvblRvZGF5U2VsZWN0aW9uID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtZGF0ZS1waWNrZXInKVxuICAgIHB1YmxpYyBzdHlsZUNsYXNzID0gJ2lneC1kYXRlLXBpY2tlcic7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1kYXRlLXBpY2tlci0tZHJvcGRvd24nKVxuICAgIGdldCBkcm9wZG93bkNTUygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZSA9PT0gSW50ZXJhY3Rpb25Nb2RlLkRyb3BEb3duO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWRhdGUtcGlja2VyLS12ZXJ0aWNhbCcpXG4gICAgZ2V0IHZlcnRpY2FsQ1NTKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJ0aWNhbCAmJiB0aGlzLm1vZGUgPT09IEludGVyYWN0aW9uTW9kZS5EaWFsb2c7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5lc2MnLCBbJyRldmVudCddKVxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uYWx0LmFycm93dXAnLCBbJyRldmVudCddKVxuICAgIHB1YmxpYyBvbkVzY2FwZShldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLm9uQ2xvc2UuZW1pdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgZGF0ZS1waWNrZXIgaXMgaW4gcmVhZG9ubHkgZGlhbG9nIG1vZGUuXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgKi9cbiAgICBwdWJsaWMgZ2V0IGlzUmVhZG9ubHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGUgPT09IEludGVyYWN0aW9uTW9kZS5EaWFsb2c7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW1pdHMgY2xvc2UgZXZlbnQgZm9yIHRoZSBjYWxlbmRhci5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2xvc2VDYWxlbmRhcigpIHtcbiAgICAgICAgdGhpcy5vbkNsb3NlLmVtaXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEVtaXRzIHRvZGF5IHNlbGVjdGlvbiBldmVudCBmb3IgdGhlIGNhbGVuZGFyLlxuICAgICovXG4gICAgcHVibGljIHRyaWdnZXJUb2RheVNlbGVjdGlvbigpIHtcbiAgICAgICAgdGhpcy5vblRvZGF5U2VsZWN0aW9uLmVtaXQoKTtcbiAgICB9XG59XG4iXX0=