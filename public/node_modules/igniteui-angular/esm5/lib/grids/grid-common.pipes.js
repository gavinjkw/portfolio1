/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { GridBaseAPIService } from './api.service';
import { DataUtil } from '../data-operations/data-util';
import { cloneArray } from '../core/utils';
var IgxGridCellStylesPipe = /** @class */ (function () {
    function IgxGridCellStylesPipe() {
    }
    /**
     * @param {?} cssClasses
     * @param {?} _value
     * @param {?} data
     * @param {?} field
     * @return {?}
     */
    IgxGridCellStylesPipe.prototype.transform = /**
     * @param {?} cssClasses
     * @param {?} _value
     * @param {?} data
     * @param {?} field
     * @return {?}
     */
    function (cssClasses, _value, data, field) {
        if (!cssClasses) {
            return '';
        }
        /** @type {?} */
        var result = [];
        Object.entries(cssClasses).forEach(function (_a) {
            var _b = tslib_1.__read(_a, 2), cssClass = _b[0], callbackOrValue = _b[1];
            /** @type {?} */
            var apply = typeof callbackOrValue === 'function' ? callbackOrValue(data, field) : callbackOrValue;
            if (apply) {
                result.push(cssClass);
            }
        });
        return result.join(' ');
    };
    IgxGridCellStylesPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'igxCellStyles'
                },] }
    ];
    return IgxGridCellStylesPipe;
}());
export { IgxGridCellStylesPipe };
/**
 * @hidden
 * \@internal
 */
var IgxGridNotGroupedPipe = /** @class */ (function () {
    function IgxGridNotGroupedPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IgxGridNotGroupedPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.filter(function (item) { return !item.columnGroup; });
    };
    IgxGridNotGroupedPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'igxNotGrouped'
                },] }
    ];
    return IgxGridNotGroupedPipe;
}());
export { IgxGridNotGroupedPipe };
var IgxGridTopLevelColumns = /** @class */ (function () {
    function IgxGridTopLevelColumns() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IgxGridTopLevelColumns.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.filter(function (item) { return item.level === 0; });
    };
    IgxGridTopLevelColumns.decorators = [
        { type: Pipe, args: [{
                    name: 'igxTopLevel'
                },] }
    ];
    return IgxGridTopLevelColumns;
}());
export { IgxGridTopLevelColumns };
/**
 * @hidden
 */
var IgxGridFilterConditionPipe = /** @class */ (function () {
    function IgxGridFilterConditionPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IgxGridFilterConditionPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.split(/(?=[A-Z])/).join(' ');
    };
    IgxGridFilterConditionPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'filterCondition',
                    pure: true
                },] }
    ];
    return IgxGridFilterConditionPipe;
}());
export { IgxGridFilterConditionPipe };
/**
 * @hidden
 */
var IgxGridTransactionPipe = /** @class */ (function () {
    function IgxGridTransactionPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    /**
     * @param {?} collection
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    IgxGridTransactionPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    function (collection, id, pipeTrigger) {
        /** @type {?} */
        var grid = this.gridAPI.grid;
        if (collection && grid.transactions.enabled) {
            /** @type {?} */
            var result = DataUtil.mergeTransactions(cloneArray(collection), grid.transactions.getAggregatedChanges(true), grid.primaryKey);
            return result;
        }
        return collection;
    };
    IgxGridTransactionPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gridTransaction',
                    pure: true
                },] }
    ];
    /** @nocollapse */
    IgxGridTransactionPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    return IgxGridTransactionPipe;
}());
export { IgxGridTransactionPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridTransactionPipe.prototype.gridAPI;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1jb21tb24ucGlwZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2dyaWRzL2dyaWQtY29tbW9uLnBpcGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDO0lBQUE7SUFxQkEsQ0FBQzs7Ozs7Ozs7SUFoQkcseUNBQVM7Ozs7Ozs7SUFBVCxVQUFVLFVBQWUsRUFBRSxNQUFXLEVBQUUsSUFBUyxFQUFFLEtBQWE7UUFDNUQsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNiLE9BQU8sRUFBRSxDQUFDO1NBQ2I7O1lBRUssTUFBTSxHQUFHLEVBQUU7UUFFakIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxFQUEyQjtnQkFBM0IsMEJBQTJCLEVBQTFCLGdCQUFRLEVBQUUsdUJBQWU7O2dCQUNwRCxLQUFLLEdBQUcsT0FBTyxlQUFlLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlO1lBQ3BHLElBQUksS0FBSyxFQUFFO2dCQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDekI7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDOztnQkFwQkosSUFBSSxTQUFDO29CQUNGLElBQUksRUFBRSxlQUFlO2lCQUN4Qjs7SUFtQkQsNEJBQUM7Q0FBQSxBQXJCRCxJQXFCQztTQWxCWSxxQkFBcUI7Ozs7O0FBd0JsQztJQUFBO0lBUUEsQ0FBQzs7Ozs7SUFIRyx5Q0FBUzs7OztJQUFULFVBQVUsS0FBWTtRQUNsQixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQWpCLENBQWlCLENBQUMsQ0FBQztJQUNuRCxDQUFDOztnQkFQSixJQUFJLFNBQUM7b0JBQ0YsSUFBSSxFQUFFLGVBQWU7aUJBQ3hCOztJQU1ELDRCQUFDO0NBQUEsQUFSRCxJQVFDO1NBTFkscUJBQXFCO0FBT2xDO0lBQUE7SUFRQSxDQUFDOzs7OztJQUhHLDBDQUFTOzs7O0lBQVQsVUFBVSxLQUFZO1FBQ2xCLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFoQixDQUFnQixDQUFDLENBQUM7SUFDbEQsQ0FBQzs7Z0JBUEosSUFBSSxTQUFDO29CQUNGLElBQUksRUFBRSxhQUFhO2lCQUN0Qjs7SUFNRCw2QkFBQztDQUFBLEFBUkQsSUFRQztTQUxZLHNCQUFzQjs7OztBQVNuQztJQUFBO0lBU0EsQ0FBQzs7Ozs7SUFIVSw4Q0FBUzs7OztJQUFoQixVQUFpQixLQUFhO1FBQzFCLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7Z0JBUkosSUFBSSxTQUFDO29CQUNGLElBQUksRUFBRSxpQkFBaUI7b0JBQ3ZCLElBQUksRUFBRSxJQUFJO2lCQUNiOztJQU1ELGlDQUFDO0NBQUEsQUFURCxJQVNDO1NBTFksMEJBQTBCOzs7O0FBUXZDO0lBTUksZ0NBQW9CLE9BQXFFO1FBQXJFLFlBQU8sR0FBUCxPQUFPLENBQThEO0lBQUksQ0FBQzs7Ozs7OztJQUU5RiwwQ0FBUzs7Ozs7O0lBQVQsVUFBVSxVQUFpQixFQUFFLEVBQVUsRUFBRSxXQUFtQjs7WUFDbEQsSUFBSSxHQUF5QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUk7UUFFcEQsSUFBSSxVQUFVLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUU7O2dCQUNuQyxNQUFNLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixDQUNyQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQ3RCLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEVBQzVDLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDcEIsT0FBTyxNQUFNLENBQUM7U0FDakI7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUN0QixDQUFDOztnQkFuQkosSUFBSSxTQUFDO29CQUNGLElBQUksRUFBRSxpQkFBaUI7b0JBQ3ZCLElBQUksRUFBRSxJQUFJO2lCQUNiOzs7O2dCQXJFUSxrQkFBa0I7O0lBc0YzQiw2QkFBQztDQUFBLEFBcEJELElBb0JDO1NBaEJZLHNCQUFzQjs7Ozs7O0lBRW5CLHlDQUE2RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdyaWRCYXNlQVBJU2VydmljZSB9IGZyb20gJy4vYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgSWd4R3JpZEJhc2VDb21wb25lbnQsIElHcmlkRGF0YUJpbmRhYmxlIH0gZnJvbSAnLi9ncmlkLWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IERhdGFVdGlsIH0gZnJvbSAnLi4vZGF0YS1vcGVyYXRpb25zL2RhdGEtdXRpbCc7XG5pbXBvcnQgeyBjbG9uZUFycmF5IH0gZnJvbSAnLi4vY29yZS91dGlscyc7XG5cbkBQaXBlKHtcbiAgICBuYW1lOiAnaWd4Q2VsbFN0eWxlcydcbn0pXG5leHBvcnQgY2xhc3MgSWd4R3JpZENlbGxTdHlsZXNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgICB0cmFuc2Zvcm0oY3NzQ2xhc3NlczogYW55LCBfdmFsdWU6IGFueSwgZGF0YTogYW55LCBmaWVsZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKCFjc3NDbGFzc2VzKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcblxuICAgICAgICBPYmplY3QuZW50cmllcyhjc3NDbGFzc2VzKS5mb3JFYWNoKChbY3NzQ2xhc3MsIGNhbGxiYWNrT3JWYWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFwcGx5ID0gdHlwZW9mIGNhbGxiYWNrT3JWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGxiYWNrT3JWYWx1ZShkYXRhLCBmaWVsZCkgOiBjYWxsYmFja09yVmFsdWU7XG4gICAgICAgICAgICBpZiAoYXBwbHkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjc3NDbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQuam9pbignICcpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKiBAaW50ZXJuYWxcbiAqL1xuQFBpcGUoe1xuICAgIG5hbWU6ICdpZ3hOb3RHcm91cGVkJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hHcmlkTm90R3JvdXBlZFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICAgIHRyYW5zZm9ybSh2YWx1ZTogYW55W10pOiBhbnlbXSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5maWx0ZXIoaXRlbSA9PiAhaXRlbS5jb2x1bW5Hcm91cCk7XG4gICAgfVxufVxuXG5AUGlwZSh7XG4gICAgbmFtZTogJ2lneFRvcExldmVsJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hHcmlkVG9wTGV2ZWxDb2x1bW5zIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgICB0cmFuc2Zvcm0odmFsdWU6IGFueVtdKTogYW55W10ge1xuICAgICAgICByZXR1cm4gdmFsdWUuZmlsdGVyKGl0ZW0gPT4gaXRlbS5sZXZlbCA9PT0gMCk7XG4gICAgfVxufVxuLyoqXG4gKkBoaWRkZW5cbiAqL1xuQFBpcGUoe1xuICAgIG5hbWU6ICdmaWx0ZXJDb25kaXRpb24nLFxuICAgIHB1cmU6IHRydWVcbn0pXG5leHBvcnQgY2xhc3MgSWd4R3JpZEZpbHRlckNvbmRpdGlvblBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICAgIHB1YmxpYyB0cmFuc2Zvcm0odmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5zcGxpdCgvKD89W0EtWl0pLykuam9pbignICcpO1xuICAgIH1cbn1cblxuLyoqIEBoaWRkZW4gKi9cbkBQaXBlKHtcbiAgICBuYW1lOiAnZ3JpZFRyYW5zYWN0aW9uJyxcbiAgICBwdXJlOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIElneEdyaWRUcmFuc2FjdGlvblBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZ3JpZEFQSTogR3JpZEJhc2VBUElTZXJ2aWNlPElneEdyaWRCYXNlQ29tcG9uZW50ICYgSUdyaWREYXRhQmluZGFibGU+KSB7IH1cblxuICAgIHRyYW5zZm9ybShjb2xsZWN0aW9uOiBhbnlbXSwgaWQ6IHN0cmluZywgcGlwZVRyaWdnZXI6IG51bWJlcikge1xuICAgICAgICBjb25zdCBncmlkOiBJZ3hHcmlkQmFzZUNvbXBvbmVudCA9IHRoaXMuZ3JpZEFQSS5ncmlkO1xuXG4gICAgICAgIGlmIChjb2xsZWN0aW9uICYmIGdyaWQudHJhbnNhY3Rpb25zLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IERhdGFVdGlsLm1lcmdlVHJhbnNhY3Rpb25zKFxuICAgICAgICAgICAgICAgIGNsb25lQXJyYXkoY29sbGVjdGlvbiksXG4gICAgICAgICAgICAgICAgZ3JpZC50cmFuc2FjdGlvbnMuZ2V0QWdncmVnYXRlZENoYW5nZXModHJ1ZSksXG4gICAgICAgICAgICAgICAgZ3JpZC5wcmltYXJ5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxufVxuIl19