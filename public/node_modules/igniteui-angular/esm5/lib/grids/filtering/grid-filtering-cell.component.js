/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, Input, TemplateRef, ViewChild, HostBinding, ElementRef, HostListener, ChangeDetectionStrategy } from '@angular/core';
import { IgxColumnComponent } from '../column.component';
import { IgxChipsAreaComponent, IgxChipComponent } from '../../chips';
import { IgxFilteringService } from './grid-filtering.service';
import { IgxGridNavigationService } from '../grid-navigation.service';
/**
 * @hidden
 */
var IgxGridFilteringCellComponent = /** @class */ (function () {
    function IgxGridFilteringCellComponent(cdr, filteringService, navService) {
        this.cdr = cdr;
        this.filteringService = filteringService;
        this.navService = navService;
        this.baseClass = 'igx-grid__filtering-cell-indicator';
        this.currentTemplate = null;
        this.moreFiltersCount = 0;
        this.cssClass = 'igx-grid__filtering-cell';
        this.filteringService.subscribeToEvents();
    }
    /**
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);
    };
    /**
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.updateFilterCellArea();
    };
    /**
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.updateFilterCellArea();
    };
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.onTabKeyDown = /**
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        if (this.isLastElementFocused()) {
            this.filteringService.grid.navigation.navigateNextFilterCell(this.column, eventArgs);
        }
        eventArgs.stopPropagation();
    };
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.onShiftTabKeyDown = /**
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        if (this.isFirstElementFocused()) {
            this.filteringService.grid.navigation.navigatePrevFilterCell(this.column, eventArgs);
        }
        eventArgs.stopPropagation();
    };
    /**
     * Returns whether a chip with a given index is visible or not.
     */
    /**
     * Returns whether a chip with a given index is visible or not.
     * @param {?} index
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.isChipVisible = /**
     * Returns whether a chip with a given index is visible or not.
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var expression = this.expressionsList[index];
        return !!(expression && expression.isVisible);
    };
    /**
     * Updates the filtering cell area.
     */
    /**
     * Updates the filtering cell area.
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.updateFilterCellArea = /**
     * Updates the filtering cell area.
     * @return {?}
     */
    function () {
        this.expressionsList = this.filteringService.getExpressions(this.column.field);
        this.updateVisibleFilters();
    };
    Object.defineProperty(IgxGridFilteringCellComponent.prototype, "template", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.column.filterable) {
                this.currentTemplate = null;
                return null;
            }
            if (this.column.filterCellTemplate) {
                this.currentTemplate = this.column.filterCellTemplate;
                return this.column.filterCellTemplate;
            }
            /** @type {?} */
            var expressionTree = this.column.filteringExpressionsTree;
            if (!expressionTree || expressionTree.filteringOperands.length === 0) {
                this.currentTemplate = this.emptyFilter;
                return this.emptyFilter;
            }
            if (this.filteringService.isFilterComplex(this.column.field)) {
                this.currentTemplate = this.complexFilter;
                return this.complexFilter;
            }
            this.currentTemplate = this.defaultFilter;
            return this.defaultFilter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilteringCellComponent.prototype, "context", {
        /**
         * Gets the context passed to the filter template.
         * @memberof IgxGridFilteringCellComponent
         */
        get: /**
         * Gets the context passed to the filter template.
         * \@memberof IgxGridFilteringCellComponent
         * @return {?}
         */
        function () {
            return {
                column: this.column
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Chip clicked event handler.
     */
    /**
     * Chip clicked event handler.
     * @param {?=} expression
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.onChipClicked = /**
     * Chip clicked event handler.
     * @param {?=} expression
     * @return {?}
     */
    function (expression) {
        if (expression) {
            this.expressionsList.forEach(function (item) {
                item.isSelected = (item.expression === expression);
            });
        }
        else if (this.expressionsList.length > 0) {
            this.expressionsList.forEach(function (item) {
                item.isSelected = false;
            });
            this.expressionsList[0].isSelected = true;
        }
        /** @type {?} */
        var index = this.filteringService.unpinnedFilterableColumns.indexOf(this.column);
        if (index >= 0 && !this.isColumnRightVisible(index)) {
            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], true);
        }
        else if (index >= 0 && !this.isColumnLeftVisible(index)) {
            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], false);
        }
        this.filteringService.filteredColumn = this.column;
        this.filteringService.isFilterRowVisible = true;
        this.filteringService.selectedExpression = expression;
    };
    /**
     * Chip removed event handler.
     */
    /**
     * Chip removed event handler.
     * @param {?} eventArgs
     * @param {?} item
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.onChipRemoved = /**
     * Chip removed event handler.
     * @param {?} eventArgs
     * @param {?} item
     * @return {?}
     */
    function (eventArgs, item) {
        /** @type {?} */
        var indexToRemove = this.expressionsList.indexOf(item);
        this.removeExpression(indexToRemove);
        this.focusChip();
    };
    /**
     * Clears the filtering.
     */
    /**
     * Clears the filtering.
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.clearFiltering = /**
     * Clears the filtering.
     * @return {?}
     */
    function () {
        this.filteringService.clearFilter(this.column.field);
        this.cdr.detectChanges();
    };
    /**
     * Chip keydown event handler.
     */
    /**
     * Chip keydown event handler.
     * @param {?} eventArgs
     * @param {?=} expression
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.onChipKeyDown = /**
     * Chip keydown event handler.
     * @param {?} eventArgs
     * @param {?=} expression
     * @return {?}
     */
    function (eventArgs, expression) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            eventArgs.preventDefault();
            this.onChipClicked(expression);
        }
    };
    /**
     * Returns the filtering indicator class.
     */
    /**
     * Returns the filtering indicator class.
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.filteringIndicatorClass = /**
     * Returns the filtering indicator class.
     * @return {?}
     */
    function () {
        var _a;
        return _a = {},
            _a[this.baseClass] = !this.isMoreIconHidden(),
            _a[this.baseClass + "--hidden"] = this.isMoreIconHidden(),
            _a;
    };
    /**
     * Focus a chip depending on the current visible template.
     */
    /**
     * Focus a chip depending on the current visible template.
     * @param {?=} focusFirst
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.focusChip = /**
     * Focus a chip depending on the current visible template.
     * @param {?=} focusFirst
     * @return {?}
     */
    function (focusFirst) {
        if (focusFirst === void 0) { focusFirst = false; }
        if (this.currentTemplate === this.defaultFilter) {
            if (focusFirst) {
                this.focusFirstElement();
            }
            else {
                this.focusElement();
            }
        }
        else if (this.currentTemplate === this.emptyFilter) {
            this.ghostChip.elementRef.nativeElement.querySelector(".igx-chip__item").focus();
        }
        else if (this.currentTemplate === this.complexFilter) {
            this.complexChip.elementRef.nativeElement.querySelector(".igx-chip__item").focus();
        }
    };
    /**
     * @private
     * @param {?} indexToRemove
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.removeExpression = /**
     * @private
     * @param {?} indexToRemove
     * @return {?}
     */
    function (indexToRemove) {
        if (indexToRemove === 0 && this.expressionsList.length === 1) {
            this.clearFiltering();
            return;
        }
        this.filteringService.removeExpression(this.column.field, indexToRemove);
        this.updateVisibleFilters();
        this.filteringService.filterInternal(this.column.field);
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.isMoreIconHidden = /**
     * @private
     * @return {?}
     */
    function () {
        return this.filteringService.columnToMoreIconHidden.get(this.column.field);
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.updateVisibleFilters = /**
     * @private
     * @return {?}
     */
    function () {
        this.expressionsList.forEach(function (ex) { return ex.isVisible = true; });
        if (this.moreIcon) {
            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);
        }
        this.cdr.detectChanges();
        if (this.chipsArea && this.expressionsList.length > 1) {
            /** @type {?} */
            var areaWidth = this.chipsArea.element.nativeElement.offsetWidth;
            /** @type {?} */
            var viewWidth = 0;
            /** @type {?} */
            var chipsAreaElements = this.chipsArea.element.nativeElement.children;
            /** @type {?} */
            var visibleChipsCount = 0;
            /** @type {?} */
            var moreIconWidth = this.moreIcon.nativeElement.offsetWidth -
                parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);
            for (var index = 0; index < chipsAreaElements.length - 1; index++) {
                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {
                    viewWidth += chipsAreaElements[index].offsetWidth;
                    if (index % 2 === 0) {
                        visibleChipsCount++;
                    }
                    else {
                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);
                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);
                    }
                }
                else {
                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {
                        visibleChipsCount--;
                    }
                    else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {
                        visibleChipsCount--;
                    }
                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;
                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);
                    break;
                }
            }
            for (var i = visibleChipsCount; i < this.expressionsList.length; i++) {
                this.expressionsList[i].isVisible = false;
            }
            this.cdr.detectChanges();
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.isFirstElementFocused = /**
     * @private
     * @return {?}
     */
    function () {
        return !(this.chipsArea && this.chipsArea.chipsList.length > 0 &&
            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(".igx-chip__item") !== document.activeElement);
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.isLastElementFocused = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.chipsArea) {
            if (this.isMoreIconHidden() && this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(".igx-chip__remove") !==
                document.activeElement) {
                return false;
            }
            else if (!this.isMoreIconHidden() && this.moreIcon.nativeElement !== document.activeElement) {
                return false;
            }
        }
        return true;
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.focusFirstElement = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.chipsArea.chipsList.length > 0) {
            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(".igx-chip__item").focus();
        }
        else {
            this.moreIcon.nativeElement.focus();
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.focusElement = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.filteringService.shouldFocusNext) {
            if (!this.isMoreIconHidden() && this.chipsArea.chipsList.length === 0) {
                this.moreIcon.nativeElement.focus();
            }
            else {
                this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(".igx-chip__item").focus();
            }
        }
        else {
            if (!this.isMoreIconHidden()) {
                this.moreIcon.nativeElement.focus();
            }
            else {
                this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(".igx-chip__remove").focus();
            }
        }
    };
    /**
     * @private
     * @param {?} columnIndex
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.isColumnRightVisible = /**
     * @private
     * @param {?} columnIndex
     * @return {?}
     */
    function (columnIndex) {
        if (this.filteringService.areAllColumnsInView) {
            return true;
        }
        /** @type {?} */
        var currentColumnRight = 0;
        for (var index = 0; index < this.filteringService.unpinnedColumns.length; index++) {
            currentColumnRight += parseInt(this.filteringService.unpinnedColumns[index].width, 10);
            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {
                break;
            }
        }
        /** @type {?} */
        var width = this.filteringService.displayContainerWidth + this.filteringService.displayContainerScrollLeft;
        return currentColumnRight <= width;
    };
    /**
     * @private
     * @param {?} columnIndex
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.isColumnLeftVisible = /**
     * @private
     * @param {?} columnIndex
     * @return {?}
     */
    function (columnIndex) {
        if (this.filteringService.areAllColumnsInView) {
            return true;
        }
        /** @type {?} */
        var currentColumnLeft = 0;
        for (var index = 0; index < this.filteringService.unpinnedColumns.length; index++) {
            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {
                break;
            }
            currentColumnLeft += parseInt(this.filteringService.unpinnedColumns[index].width, 10);
        }
        return currentColumnLeft >= this.filteringService.displayContainerScrollLeft;
    };
    IgxGridFilteringCellComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    selector: 'igx-grid-filtering-cell',
                    template: "<ng-template #emptyFilter>\n        <igx-chips-area [attr.draggable]=\"false\" class=\"igx-filtering-chips\">\n            <igx-chip #ghostChip [attr.draggable]=\"false\" (click)=\"onChipClicked()\" (keydown)=\"onChipKeyDown($event)\" [displayDensity]=\"'cosy'\">\n                <igx-icon [attr.draggable]=\"false\" igxPrefix>filter_list</igx-icon>\n                <span [attr.draggable]=\"false\">{{filteringService.grid.resourceStrings.igx_grid_filter}}</span>\n            </igx-chip>\n        </igx-chips-area>\n</ng-template>\n\n<ng-template #defaultFilter>\n    <igx-chips-area #chipsArea class=\"igx-filtering-chips\">\n        <ng-container *ngFor=\"let item of expressionsList; let last = last; let index = index;\" >\n            <igx-chip\n                *ngIf=\"isChipVisible(index)\"\n                [removable]=\"true\"\n                [displayDensity]=\"'cosy'\"\n                (click)=\"onChipClicked(item.expression)\"\n                (keydown)=\"onChipKeyDown($event, item.expression)\"\n                (onRemove)=\"onChipRemoved($event, item)\">\n                <igx-icon igxPrefix\n                    fontSet=\"filtering-icons\"\n                    [name]=\"item.expression.condition.iconName\">\n                </igx-icon>\n                <span #label>\n                    {{filteringService.getChipLabel(item.expression)}}\n                </span>\n            </igx-chip>\n            <span class=\"igx-filtering-chips__connector\" *ngIf=\"!last && isChipVisible(index + 1)\">{{filteringService.getOperatorAsString(item.afterOperator)}}</span>\n        </ng-container>\n        <div #moreIcon [ngClass]=\"filteringIndicatorClass()\" (click)=\"onChipClicked()\" (keydown)=\"onChipKeyDown($event)\" tabindex=\"0\">\n            <igx-icon>filter_list</igx-icon>\n            <igx-badge [value]=\"moreFiltersCount\"></igx-badge>\n        </div>\n    </igx-chips-area>\n</ng-template>\n\n<ng-template #complexFilter>\n    <igx-chip #complexChip [removable]=\"true\" [displayDensity]=\"'cosy'\" (onRemove)=\"clearFiltering()\">\n        <igx-icon igxPrefix>filter_list</igx-icon>\n        <span>{{filteringService.grid.resourceStrings.igx_grid_complex_filter}}</span>\n    </igx-chip>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template; context: context\"></ng-container>\n"
                }] }
    ];
    /** @nocollapse */
    IgxGridFilteringCellComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: IgxFilteringService },
        { type: IgxGridNavigationService }
    ]; };
    IgxGridFilteringCellComponent.propDecorators = {
        column: [{ type: Input }],
        emptyFilter: [{ type: ViewChild, args: ['emptyFilter', { read: TemplateRef },] }],
        defaultFilter: [{ type: ViewChild, args: ['defaultFilter', { read: TemplateRef },] }],
        complexFilter: [{ type: ViewChild, args: ['complexFilter', { read: TemplateRef },] }],
        chipsArea: [{ type: ViewChild, args: ['chipsArea', { read: IgxChipsAreaComponent },] }],
        moreIcon: [{ type: ViewChild, args: ['moreIcon', { read: ElementRef },] }],
        ghostChip: [{ type: ViewChild, args: ['ghostChip', { read: IgxChipComponent },] }],
        complexChip: [{ type: ViewChild, args: ['complexChip', { read: IgxChipComponent },] }],
        cssClass: [{ type: HostBinding, args: ['class.igx-grid__filtering-cell',] }],
        onTabKeyDown: [{ type: HostListener, args: ['keydown.tab', ['$event'],] }],
        onShiftTabKeyDown: [{ type: HostListener, args: ['keydown.shift.tab', ['$event'],] }]
    };
    return IgxGridFilteringCellComponent;
}());
export { IgxGridFilteringCellComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridFilteringCellComponent.prototype.baseClass;
    /**
     * @type {?}
     * @private
     */
    IgxGridFilteringCellComponent.prototype.currentTemplate;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.expressionsList;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.moreFiltersCount;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.column;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringCellComponent.prototype.emptyFilter;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringCellComponent.prototype.defaultFilter;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringCellComponent.prototype.complexFilter;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringCellComponent.prototype.chipsArea;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringCellComponent.prototype.moreIcon;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringCellComponent.prototype.ghostChip;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringCellComponent.prototype.complexChip;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.cssClass;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.cdr;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.filteringService;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.navService;
}
//# sourceMappingURL=data:application/json;base64,