/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ViewChild, HostBinding, ChangeDetectionStrategy, TemplateRef, Directive, ElementRef } from '@angular/core';
import { HorizontalAlignment, VerticalAlignment, ConnectedPositioningStrategy, AbsoluteScrollStrategy } from '../../../services/index';
import { IgxStringFilteringOperand, IgxNumberFilteringOperand, IgxBooleanFilteringOperand, IgxDateFilteringOperand, InFilteringOperation, InDateFilteringOperation } from '../../../data-operations/filtering-condition';
import { FilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';
import { FilteringLogic } from '../../../data-operations/filtering-expression.interface';
import { cloneArray } from '../../../core/utils';
import { DataType, DataUtil } from '../../../data-operations/data-util';
import { IgxExcelStyleSearchComponent } from './excel-style-search.component';
import { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';
import { Subscription, Subject } from 'rxjs';
import { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';
import { takeUntil } from 'rxjs/operators';
import { IgxDropDownComponent } from '../../../drop-down';
/**
 * @hidden
 */
var /**
 * @hidden
 */
FilterListItem = /** @class */ (function () {
    function FilterListItem() {
        this.isSpecial = false;
    }
    return FilterListItem;
}());
/**
 * @hidden
 */
export { FilterListItem };
if (false) {
    /** @type {?} */
    FilterListItem.prototype.value;
    /** @type {?} */
    FilterListItem.prototype.label;
    /** @type {?} */
    FilterListItem.prototype.isSelected;
    /** @type {?} */
    FilterListItem.prototype.indeterminate;
    /** @type {?} */
    FilterListItem.prototype.isSpecial;
}
var IgxExcelStyleSortingTemplateDirective = /** @class */ (function () {
    function IgxExcelStyleSortingTemplateDirective(template) {
        this.template = template;
    }
    IgxExcelStyleSortingTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxExcelStyleSortingTemplate]'
                },] }
    ];
    /** @nocollapse */
    IgxExcelStyleSortingTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxExcelStyleSortingTemplateDirective;
}());
export { IgxExcelStyleSortingTemplateDirective };
if (false) {
    /** @type {?} */
    IgxExcelStyleSortingTemplateDirective.prototype.template;
}
var IgxExcelStyleMovingTemplateDirective = /** @class */ (function () {
    function IgxExcelStyleMovingTemplateDirective(template) {
        this.template = template;
    }
    IgxExcelStyleMovingTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxExcelStyleMovingTemplate]'
                },] }
    ];
    /** @nocollapse */
    IgxExcelStyleMovingTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxExcelStyleMovingTemplateDirective;
}());
export { IgxExcelStyleMovingTemplateDirective };
if (false) {
    /** @type {?} */
    IgxExcelStyleMovingTemplateDirective.prototype.template;
}
var IgxExcelStyleHidingTemplateDirective = /** @class */ (function () {
    function IgxExcelStyleHidingTemplateDirective(template) {
        this.template = template;
    }
    IgxExcelStyleHidingTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxExcelStyleHidingTemplate]'
                },] }
    ];
    /** @nocollapse */
    IgxExcelStyleHidingTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxExcelStyleHidingTemplateDirective;
}());
export { IgxExcelStyleHidingTemplateDirective };
if (false) {
    /** @type {?} */
    IgxExcelStyleHidingTemplateDirective.prototype.template;
}
var IgxExcelStylePinningTemplateDirective = /** @class */ (function () {
    function IgxExcelStylePinningTemplateDirective(template) {
        this.template = template;
    }
    IgxExcelStylePinningTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxExcelStylePinningTemplate]'
                },] }
    ];
    /** @nocollapse */
    IgxExcelStylePinningTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxExcelStylePinningTemplateDirective;
}());
export { IgxExcelStylePinningTemplateDirective };
if (false) {
    /** @type {?} */
    IgxExcelStylePinningTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
var IgxGridExcelStyleFilteringComponent = /** @class */ (function () {
    function IgxGridExcelStyleFilteringComponent(cdr) {
        this.cdr = cdr;
        this.shouldOpenSubMenu = true;
        this.expressionsList = new Array();
        this.destroy$ = new Subject();
        this.containsNullOrEmpty = false;
        this.selectAllSelected = true;
        this.selectAllIndeterminate = false;
        this.filterValues = new Set();
        this.columnMoving = new Subscription();
        this.listData = new Array();
        this.uniqueValues = [];
        this._subMenuPositionSettings = {
            verticalStartPoint: VerticalAlignment.Top
        };
        this._subMenuOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false,
            positionStrategy: new ConnectedPositioningStrategy(this._subMenuPositionSettings),
            scrollStrategy: new AbsoluteScrollStrategy()
        };
        this.className = 'igx-excel-filter';
    }
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "grid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.filteringService.grid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "conditions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column.filters.conditionList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "subMenuText", {
        get: /**
         * @return {?}
         */
        function () {
            switch (this.column.dataType) {
                case DataType.Boolean:
                    return this.grid.resourceStrings.igx_grid_excel_boolean_filter;
                case DataType.Number:
                    return this.grid.resourceStrings.igx_grid_excel_number_filter;
                case DataType.Date:
                    return this.grid.resourceStrings.igx_grid_excel_date_filter;
                default:
                    return this.grid.resourceStrings.igx_grid_excel_text_filter;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    /**
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.expressionsList = new Array();
        this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);
        if (this.expressionsList && this.expressionsList.length &&
            this.expressionsList[0].expression.condition.name !== 'in') {
            this.customDialog.expressionsList = this.expressionsList;
        }
        this.populateColumnData();
        if (this.excelStyleSorting) {
            /** @type {?} */
            var se = this.grid.sortingExpressions.find(function (expr) { return expr.fieldName === _this.column.field; });
            if (se) {
                this.excelStyleSorting.selectButton(se.dir);
            }
        }
        requestAnimationFrame(function () {
            _this.excelStyleSearch.searchInput.nativeElement.focus();
        });
    };
    /**
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.clearFilterClass = /**
     * @return {?}
     */
    function () {
        if (this.column.filteringExpressionsTree) {
            return 'igx-excel-filter__actions-clear';
        }
        return 'igx-excel-filter__actions-clear--disabled';
    };
    /**
     * @param {?} column
     * @param {?} filteringService
     * @param {?} overlayService
     * @param {?} overlayComponentId
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.initialize = /**
     * @param {?} column
     * @param {?} filteringService
     * @param {?} overlayService
     * @param {?} overlayComponentId
     * @return {?}
     */
    function (column, filteringService, overlayService, overlayComponentId) {
        var _this = this;
        this.column = column;
        this.filteringService = filteringService;
        this.overlayService = overlayService;
        this.overlayComponentId = overlayComponentId;
        this._subMenuOverlaySettings.outlet = this.grid.outlet;
        this.columnMoving = this.grid.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(function () {
            _this.closeDropdown();
        });
    };
    /**
     * Returns the filtering operation condition for a given value.
     */
    /**
     * Returns the filtering operation condition for a given value.
     * @param {?} value
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.getCondition = /**
     * Returns the filtering operation condition for a given value.
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.column.filters.condition(value);
    };
    /**
     * Returns the translated condition name for a given value.
     */
    /**
     * Returns the translated condition name for a given value.
     * @param {?} value
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.translateCondition = /**
     * Returns the translated condition name for a given value.
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.grid.resourceStrings["igx_grid_filter_" + this.getCondition(value).name] || value;
    };
    /**
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.onPin = /**
     * @return {?}
     */
    function () {
        this.column.pinned = !this.column.pinned;
        this.closeDropdown();
    };
    /**
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.onHide = /**
     * @return {?}
     */
    function () {
        this.column.hidden = true;
        this.grid.onColumnVisibilityChanged.emit({ column: this.column, newValue: true });
        this.closeDropdown();
    };
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.onTextFilterClick = /**
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        if (this.shouldOpenSubMenu) {
            this._subMenuOverlaySettings.positionStrategy.settings.target = eventArgs.currentTarget;
            /** @type {?} */
            var gridRect = this.grid.nativeElement.getBoundingClientRect();
            /** @type {?} */
            var dropdownRect = this.mainDropdown.nativeElement.getBoundingClientRect();
            /** @type {?} */
            var x = dropdownRect.left + dropdownRect.width;
            /** @type {?} */
            var x1 = gridRect.left + gridRect.width;
            x += window.pageXOffset;
            x1 += window.pageXOffset;
            if (Math.abs(x - x1) < 200) {
                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Left;
                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Left;
            }
            else {
                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Right;
                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Right;
            }
            this.subMenu.open(this._subMenuOverlaySettings);
            this.shouldOpenSubMenu = false;
        }
    };
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.onTextFilterKeyDown = /**
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            this.onTextFilterClick(eventArgs);
        }
    };
    /**
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.onSubMenuClosed = /**
     * @return {?}
     */
    function () {
        var _this = this;
        requestAnimationFrame(function () {
            _this.shouldOpenSubMenu = true;
        });
    };
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.onSubMenuSelection = /**
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        this.customDialog.selectedOperator = eventArgs.newSelection.value;
        eventArgs.cancel = true;
        this.mainDropdown.nativeElement.style.display = 'none';
        this.subMenu.close();
        this.customDialog.open();
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.areExpressionsSelectable = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.expressionsList.length === 1 &&
            (this.expressionsList[0].expression.condition.name === 'equals' ||
                this.expressionsList[0].expression.condition.name === 'true' ||
                this.expressionsList[0].expression.condition.name === 'false' ||
                this.expressionsList[0].expression.condition.name === 'empty' ||
                this.expressionsList[0].expression.condition.name === 'in')) {
            return true;
        }
        /** @type {?} */
        var selectableExpressionsCount = this.expressionsList.filter(function (exp) {
            return (exp.beforeOperator === 1 || exp.afterOperator === 1) &&
                (exp.expression.condition.name === 'equals' ||
                    exp.expression.condition.name === 'true' ||
                    exp.expression.condition.name === 'false' ||
                    exp.expression.condition.name === 'empty' ||
                    exp.expression.condition.name === 'in');
        }).length;
        return selectableExpressionsCount === this.expressionsList.length;
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.areExpressionsValuesInTheList = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.column.dataType === DataType.Boolean) {
            return true;
        }
        if (this.filterValues.size === 1) {
            /** @type {?} */
            var firstValue = this.filterValues.values().next().value;
            if (!firstValue && firstValue !== 0) {
                return true;
            }
        }
        for (var index = 0; index < this.uniqueValues.length; index++) {
            if (this.filterValues.has(this.uniqueValues[index])) {
                return true;
            }
        }
        return false;
    };
    /**
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.populateColumnData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var e_1, _a;
        /** @type {?} */
        var data = this.column.gridAPI.get_all_data(this.grid.id);
        /** @type {?} */
        var gridExpressionsTree = this.grid.filteringExpressionsTree;
        /** @type {?} */
        var expressionsTree = new FilteringExpressionsTree(gridExpressionsTree.operator, gridExpressionsTree.fieldName);
        try {
            for (var _b = tslib_1.__values(gridExpressionsTree.filteringOperands), _c = _b.next(); !_c.done; _c = _b.next()) {
                var operand = _c.value;
                if (operand instanceof FilteringExpressionsTree) {
                    /** @type {?} */
                    var columnExprTree = (/** @type {?} */ (operand));
                    if (columnExprTree.fieldName === this.column.field) {
                        break;
                    }
                }
                expressionsTree.filteringOperands.push(operand);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (expressionsTree.filteringOperands.length) {
            /** @type {?} */
            var state = { expressionsTree: expressionsTree };
            data = DataUtil.filter(cloneArray(data), state);
        }
        if (this.column.dataType === DataType.Date) {
            this.uniqueValues = Array.from(new Set(data.map(function (record) {
                return record[_this.column.field] ? record[_this.column.field].toDateString() : record[_this.column.field];
            })));
            this.filterValues = new Set(this.expressionsList.reduce(function (arr, e) {
                if (e.expression.condition.name === 'in') {
                    return tslib_1.__spread(arr, Array.from(((/** @type {?} */ (e.expression.searchVal))).values()).map(function (v) {
                        return new Date(v).toDateString();
                    }));
                }
                return tslib_1.__spread(arr, [e.expression.searchVal ? e.expression.searchVal.toDateString() : e.expression.searchVal]);
            }, []));
        }
        else {
            this.uniqueValues = Array.from(new Set(data.map(function (record) { return record[_this.column.field]; })));
            this.filterValues = new Set(this.expressionsList.reduce(function (arr, e) {
                if (e.expression.condition.name === 'in') {
                    return tslib_1.__spread(arr, Array.from(((/** @type {?} */ (e.expression.searchVal))).values()));
                }
                return tslib_1.__spread(arr, [e.expression.searchVal]);
            }, []));
        }
        this.listData = new Array();
        /** @type {?} */
        var shouldUpdateSelection = this.areExpressionsSelectable() && this.areExpressionsValuesInTheList();
        if (this.column.dataType === DataType.Boolean) {
            this.addBooleanItems();
        }
        else {
            this.addItems(shouldUpdateSelection);
        }
        this.listData.sort(function (a, b) { return _this.sortData(a, b); });
        if (this.column.dataType === DataType.Date) {
            this.uniqueValues = this.uniqueValues.map(function (value) { return new Date(value); });
        }
        if (this.containsNullOrEmpty) {
            this.addBlanksItem(shouldUpdateSelection);
        }
        this.addSelectAllItem();
        this.cdr.detectChanges();
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.addBooleanItems = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.selectAllSelected = true;
        this.selectAllIndeterminate = false;
        this.uniqueValues.forEach(function (element) {
            /** @type {?} */
            var filterListItem = new FilterListItem();
            if (element !== undefined && element !== null && element !== '') {
                if (_this.column.filteringExpressionsTree) {
                    if (element === true && _this.expressionsList.find(function (exp) { return exp.expression.condition.name === 'true'; })) {
                        filterListItem.isSelected = true;
                        _this.selectAllIndeterminate = true;
                    }
                    else if (element === false && _this.expressionsList.find(function (exp) { return exp.expression.condition.name === 'false'; })) {
                        filterListItem.isSelected = true;
                        _this.selectAllIndeterminate = true;
                    }
                    else {
                        filterListItem.isSelected = false;
                    }
                }
                else {
                    filterListItem.isSelected = true;
                }
                filterListItem.value = element;
                filterListItem.label = element;
                filterListItem.indeterminate = false;
                _this.listData.push(filterListItem);
            }
            else {
                _this.containsNullOrEmpty = true;
            }
        });
    };
    /**
     * @private
     * @param {?} shouldUpdateSelection
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.addItems = /**
     * @private
     * @param {?} shouldUpdateSelection
     * @return {?}
     */
    function (shouldUpdateSelection) {
        var _this = this;
        this.selectAllSelected = true;
        this.selectAllIndeterminate = false;
        this.uniqueValues.forEach(function (element) {
            if (element !== undefined && element !== null && element !== '') {
                /** @type {?} */
                var filterListItem = new FilterListItem();
                if (_this.column.filteringExpressionsTree) {
                    if (shouldUpdateSelection) {
                        if (_this.filterValues.has(element)) {
                            filterListItem.isSelected = true;
                        }
                        else {
                            filterListItem.isSelected = false;
                        }
                        _this.selectAllIndeterminate = true;
                    }
                    else {
                        filterListItem.isSelected = false;
                        _this.selectAllSelected = false;
                    }
                }
                else {
                    filterListItem.isSelected = true;
                }
                if (_this.column.dataType === DataType.Date) {
                    filterListItem.value = new Date(element);
                    filterListItem.label = new Date(element);
                }
                else {
                    filterListItem.value = element;
                    filterListItem.label = element;
                }
                filterListItem.indeterminate = false;
                _this.listData.push(filterListItem);
            }
            else {
                _this.containsNullOrEmpty = true;
            }
        });
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.addSelectAllItem = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selectAll = new FilterListItem();
        selectAll.isSelected = this.selectAllSelected;
        selectAll.value = this.grid.resourceStrings.igx_grid_excel_select_all;
        selectAll.label = this.grid.resourceStrings.igx_grid_excel_select_all;
        selectAll.indeterminate = this.selectAllIndeterminate;
        selectAll.isSpecial = true;
        this.listData.unshift(selectAll);
    };
    /**
     * @private
     * @param {?} shouldUpdateSelection
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.addBlanksItem = /**
     * @private
     * @param {?} shouldUpdateSelection
     * @return {?}
     */
    function (shouldUpdateSelection) {
        /** @type {?} */
        var blanks = new FilterListItem();
        if (this.column.filteringExpressionsTree) {
            if (shouldUpdateSelection) {
                if (this.filterValues.has(null)) {
                    blanks.isSelected = true;
                }
                else {
                    blanks.isSelected = false;
                }
            }
        }
        else {
            blanks.isSelected = true;
        }
        blanks.value = null;
        blanks.label = this.grid.resourceStrings.igx_grid_excel_blanks;
        blanks.indeterminate = false;
        blanks.isSpecial = true;
        this.listData.unshift(blanks);
    };
    /**
     * @private
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.sortData = /**
     * @private
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        /** @type {?} */
        var valueA = a.value;
        /** @type {?} */
        var valueB = b.value;
        if (typeof (a) === DataType.String) {
            valueA = a.value.toUpperCase();
            valueB = b.value.toUpperCase();
        }
        if (valueA < valueB) {
            return -1;
        }
        else if (valueA > valueB) {
            return 1;
        }
        else {
            return 0;
        }
    };
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "sortingTemplate", {
        // TODO: sort members by access modifier
        get: 
        // TODO: sort members by access modifier
        /**
         * @return {?}
         */
        function () {
            if (this.grid.excelStyleSortingTemplateDirective) {
                return this.grid.excelStyleSortingTemplateDirective.template;
            }
            else {
                return this.defaultExcelStyleSortingTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "movingTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.grid.excelStyleMovingTemplateDirective) {
                return this.grid.excelStyleMovingTemplateDirective.template;
            }
            else {
                return this.defaultExcelStyleMovingTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "pinningTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.grid.excelStylePinningTemplateDirective) {
                return this.grid.excelStylePinningTemplateDirective.template;
            }
            else {
                return this.defaultExcelStylePinningTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "hidingTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.grid.excelStyleHidingTemplateDirective) {
                return this.grid.excelStyleHidingTemplateDirective.template;
            }
            else {
                return this.defaultExcelStyleHidingTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "applyButtonDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.listData[0] && !this.listData[0].isSelected && !this.listData[0].indeterminate;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.applyFilter = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.column.field);
        /** @type {?} */
        var selectedItems = this.listData.slice(1, this.listData.length).filter(function (el) { return el.isSelected === true; });
        /** @type {?} */
        var unselectedItem = this.listData.slice(1, this.listData.length).find(function (el) { return el.isSelected === false; });
        if (unselectedItem) {
            if (selectedItems.length <= IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold) {
                selectedItems.forEach(function (element) {
                    /** @type {?} */
                    var condition = null;
                    if (element.value !== null && element.value !== undefined) {
                        if (_this.column.dataType === DataType.Boolean) {
                            condition = _this.createCondition(element.value.toString());
                        }
                        else {
                            condition = _this.createCondition('equals');
                        }
                    }
                    else {
                        condition = _this.createCondition('empty');
                    }
                    filterTree.filteringOperands.push({
                        condition: condition,
                        fieldName: _this.column.field,
                        ignoreCase: _this.column.filteringIgnoreCase,
                        searchVal: element.value
                    });
                });
            }
            else {
                /** @type {?} */
                var blanksItemIndex = selectedItems.findIndex(function (e) { return e.value === null || e.value === undefined; });
                /** @type {?} */
                var blanksItem = void 0;
                if (blanksItemIndex >= 0) {
                    blanksItem = selectedItems[blanksItemIndex];
                    selectedItems.splice(blanksItemIndex, 1);
                }
                if (this.column.dataType === DataType.Date) {
                    filterTree.filteringOperands.push({
                        condition: new InDateFilteringOperation(),
                        fieldName: this.column.field,
                        ignoreCase: this.column.filteringIgnoreCase,
                        searchVal: new Set(selectedItems.map(function (d) {
                            return new Date(d.value.getFullYear(), d.value.getMonth(), d.value.getDate()).toISOString();
                        }))
                    });
                }
                else {
                    filterTree.filteringOperands.push({
                        condition: new InFilteringOperation(),
                        fieldName: this.column.field,
                        ignoreCase: this.column.filteringIgnoreCase,
                        searchVal: new Set(selectedItems.map(function (e) { return e.value; }))
                    });
                }
                if (blanksItem) {
                    filterTree.filteringOperands.push({
                        condition: this.createCondition('empty'),
                        fieldName: this.column.field,
                        ignoreCase: this.column.filteringIgnoreCase,
                        searchVal: blanksItem.value
                    });
                }
            }
            this.expressionsList = new Array();
            this.filteringService.filterInternal(this.column.field, filterTree);
        }
        else {
            this.filteringService.clearFilter(this.column.field);
        }
        this.closeDropdown();
    };
    /**
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.closeDropdown = /**
     * @return {?}
     */
    function () {
        if (this.overlayComponentId) {
            this.overlayService.hide(this.overlayComponentId);
            this.overlayComponentId = null;
        }
    };
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.onKeyDown = /**
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        if (eventArgs.key === "Escape" /* ESCAPE */ || eventArgs.key === "Esc" /* ESCAPE_IE */) {
            this.closeDropdown();
        }
        eventArgs.stopPropagation();
    };
    /**
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.clearFilter = /**
     * @return {?}
     */
    function () {
        this.filteringService.clearFilter(this.column.field);
        this.populateColumnData();
    };
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.onClearFilterKeyDown = /**
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            this.clearFilter();
        }
    };
    /**
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.showCustomFilterItem = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var exprTree = this.column.filteringExpressionsTree;
        return exprTree && exprTree.filteringOperands && exprTree.filteringOperands.length &&
            !(((/** @type {?} */ (exprTree.filteringOperands[0]))).condition &&
                ((/** @type {?} */ (exprTree.filteringOperands[0]))).condition.name === 'in');
    };
    /**
     * @private
     * @param {?} conditionName
     * @return {?}
     */
    IgxGridExcelStyleFilteringComponent.prototype.createCondition = /**
     * @private
     * @param {?} conditionName
     * @return {?}
     */
    function (conditionName) {
        switch (this.column.dataType) {
            case DataType.Boolean:
                return IgxBooleanFilteringOperand.instance().condition(conditionName);
            case DataType.Number:
                return IgxNumberFilteringOperand.instance().condition(conditionName);
            case DataType.Date:
                return IgxDateFilteringOperand.instance().condition(conditionName);
            default:
                return IgxStringFilteringOperand.instance().condition(conditionName);
        }
    };
    IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold = 2;
    IgxGridExcelStyleFilteringComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    selector: 'igx-grid-excel-style-filtering',
                    template: "<article #dropdown\n    class=\"igx-excel-filter__menu\"\n    [id]=\"overlayComponentId\"\n    (keydown)=\"onKeyDown($event)\">\n\n    <header class=\"igx-excel-filter__menu-header\">\n        <h4 class=\"igx-typography__h6\">{{ column.header || column.field }}</h4>\n        <div *ngIf=\"grid.displayDensity!=='comfortable'\" class=\"igx-excel-filter__menu-header-actions\">\n            <button *ngIf=\"!column.disablePinning && !column.pinned\"\n                igxButton=\"icon\"\n                [displayDensity]=\"grid.displayDensity\"\n                (click)=\"onPin()\"\n                tabindex=\"0\">\n                <igx-icon fontSet=\"filtering-icons\" name=\"pin\"></igx-icon>\n            </button>\n            <button *ngIf=\"!column.disablePinning && column.pinned\"\n                igxButton=\"icon\"\n                [displayDensity]=\"grid.displayDensity\"\n                (click)=\"onPin()\"\n                tabindex=\"0\">\n                <igx-icon fontSet=\"filtering-icons\" name=\"unpin\"></igx-icon>\n            </button>\n            <button *ngIf=\"!column.disableHiding\"\n                igxButton=\"icon\"\n                [displayDensity]=\"grid.displayDensity\"\n                tabindex=\"0\"\n                (click)=\"onHide()\">\n                <igx-icon>visibility_off</igx-icon>\n            </button>\n        </div>\n    </header>\n\n    <ng-template #defaultExcelStyleSortingTemplate>\n        <igx-excel-style-sorting\n            #excelStyleSorting\n            [ngClass]=\"(grid.displayDensity==='compact')? 'igx-excel-filter__sort--compact': 'igx-excel-filter__sort'\"\n            [column]=\"column\"\n            [grid]=\"grid\"\n            [displayDensity]=\"grid.displayDensity\">\n        </igx-excel-style-sorting>\n    </ng-template>\n\n    <div *ngIf=\"column.sortable\">\n        <ng-container *ngTemplateOutlet=\"sortingTemplate\"></ng-container>\n    </div>\n\n    <section class=\"igx-excel-filter__actions\">\n\n        <ng-template #defaultExcelStyleMovingTemplate>\n            <igx-excel-style-column-moving\n                [ngClass]=\"(grid.displayDensity==='compact')? 'igx-excel-filter__move--compact': 'igx-excel-filter__move'\"\n                [column]=\"column\"\n                [grid]=\"grid\"\n                [displayDensity]=\"grid.displayDensity\">\n            </igx-excel-style-column-moving>\n        </ng-template>\n\n        <div *ngIf=\"column.movable\">\n            <ng-container *ngTemplateOutlet=\"movingTemplate\"></ng-container>\n        </div>\n\n        <ng-template #defaultExcelStylePinningTemplate>\n            <div class=\"igx-excel-filter__actions-pin\"\n                (click)=\"onPin()\"\n                tabindex=\"0\"\n                *ngIf=\"!column.pinned\">\n                <span>{{ grid.resourceStrings.igx_grid_excel_pin }}</span>\n                <igx-icon fontSet=\"filtering-icons\" name=\"pin\"></igx-icon>\n            </div>\n\n            <div class=\"igx-excel-filter__actions-unpin\"\n                (click)=\"onPin()\"\n                tabindex=\"0\"\n                *ngIf=\"column.pinned\">\n                <span>{{ grid.resourceStrings.igx_grid_excel_unpin }}</span>\n                <igx-icon fontSet=\"filtering-icons\" name=\"unpin\"></igx-icon>\n            </div>\n        </ng-template>\n\n        <div *ngIf=\"!column.disablePinning && grid.displayDensity==='comfortable'\">\n            <ng-container *ngTemplateOutlet=\"pinningTemplate\"></ng-container>\n        </div>\n\n        <ng-template #defaultExcelStyleHidingTemplate>\n            <div class=\"igx-excel-filter__actions-hide\"\n                tabindex=\"0\"\n                (click)=\"onHide()\">\n                <span>{{ grid.resourceStrings.igx_grid_excel_hide }}</span>\n                <igx-icon>visibility_off</igx-icon>\n            </div>\n        </ng-template>\n\n        <div *ngIf=\"!column.disableHiding && grid.displayDensity==='comfortable'\">\n            <ng-container *ngTemplateOutlet=\"hidingTemplate\"></ng-container>\n        </div>\n\n        <div\n            tabindex=\"0\"\n            [ngClass]=\"clearFilterClass()\"\n            (keydown)=\"onClearFilterKeyDown($event)\"\n            (click)=\"clearFilter()\">\n            <span>{{ grid.resourceStrings.igx_grid_excel_custom_dialog_clear }}</span>\n            <igx-icon>clear</igx-icon>\n        </div>\n\n        <div\n            tabindex=\"0\"\n            class=\"igx-excel-filter__actions-filter\"\n            (keydown)=\"onTextFilterKeyDown($event)\"\n            (click)=\"onTextFilterClick($event)\"\n            [igxDropDownItemNavigation]=\"subMenu\" >\n            <span>{{ subMenuText }}</span>\n            <igx-icon>keyboard_arrow_right</igx-icon>\n        </div>\n    </section>\n\n    <igx-excel-style-search\n        class=\"igx-excel-filter__menu-main\"\n        #excelStyleSearch\n        [column]=\"column\"\n        [data]=\"listData\"\n        [displayDensity]=\"grid.displayDensity\">\n    </igx-excel-style-search>\n\n    <footer class=\"igx-excel-filter__menu-footer\">\n        <button igxButton [displayDensity]=\"grid.displayDensity\" (click)=\"closeDropdown()\">{{ grid.resourceStrings.igx_grid_excel_cancel }}</button>\n        <button igxButton=\"raised\" [displayDensity]=\"grid.displayDensity\" [disabled]=\"applyButtonDisabled\" (click)=\"applyFilter()\">{{ grid.resourceStrings.igx_grid_excel_apply }}</button>\n    </footer>\n</article>\n\n<igx-drop-down [maxHeight]=\"'397px'\" #subMenu (onSelection)=\"onSubMenuSelection($event)\" (onClosed)=\"onSubMenuClosed()\">\n    <div>\n        <igx-drop-down-item\n            *ngFor=\"let condition of conditions\"\n            [value]=\"condition\">\n            <igx-icon fontSet=\"filtering-icons\" [name]=\"getCondition(condition).iconName\"></igx-icon>\n            <span style=\"margin-left: 16px\">{{ translateCondition(condition) }}</span>\n        </igx-drop-down-item>\n        <igx-drop-down-item *ngIf=\"showCustomFilterItem()\">\n            <igx-icon>filter_list</igx-icon>\n            <span style=\"margin-left: 16px\">{{ grid.resourceStrings.igx_grid_excel_custom_filter }}</span>\n        </igx-drop-down-item>\n    </div>\n</igx-drop-down>\n\n<igx-excel-style-custom-dialog\n    #customDialog\n    [column]=\"column\"\n    [filteringService]=\"filteringService\"\n    [overlayComponentId]=\"overlayComponentId\"\n    [overlayService]=\"overlayService\"\n    [displayDensity]=\"grid.displayDensity\">\n</igx-excel-style-custom-dialog>\n"
                }] }
    ];
    /** @nocollapse */
    IgxGridExcelStyleFilteringComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    IgxGridExcelStyleFilteringComponent.propDecorators = {
        className: [{ type: HostBinding, args: ['class.igx-excel-filter',] }],
        mainDropdown: [{ type: ViewChild, args: ['dropdown', { read: ElementRef },] }],
        subMenu: [{ type: ViewChild, args: ['subMenu', { read: IgxDropDownComponent },] }],
        customDialog: [{ type: ViewChild, args: ['customDialog', { read: IgxExcelStyleCustomDialogComponent },] }],
        excelStyleSearch: [{ type: ViewChild, args: ['excelStyleSearch', { read: IgxExcelStyleSearchComponent },] }],
        excelStyleSorting: [{ type: ViewChild, args: ['excelStyleSorting', { read: IgxExcelStyleSortingComponent },] }],
        defaultExcelStyleSortingTemplate: [{ type: ViewChild, args: ['defaultExcelStyleSortingTemplate', { read: TemplateRef },] }],
        defaultExcelStyleHidingTemplate: [{ type: ViewChild, args: ['defaultExcelStyleHidingTemplate', { read: TemplateRef },] }],
        defaultExcelStyleMovingTemplate: [{ type: ViewChild, args: ['defaultExcelStyleMovingTemplate', { read: TemplateRef },] }],
        defaultExcelStylePinningTemplate: [{ type: ViewChild, args: ['defaultExcelStylePinningTemplate', { read: TemplateRef },] }]
    };
    return IgxGridExcelStyleFilteringComponent;
}());
export { IgxGridExcelStyleFilteringComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype.shouldOpenSubMenu;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype.expressionsList;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype.containsNullOrEmpty;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype.selectAllSelected;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype.selectAllIndeterminate;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype.filterValues;
    /**
     * @type {?}
     * @protected
     */
    IgxGridExcelStyleFilteringComponent.prototype.columnMoving;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.column;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.filteringService;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.listData;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.uniqueValues;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.overlayService;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.overlayComponentId;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype._subMenuPositionSettings;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype._subMenuOverlaySettings;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.className;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.mainDropdown;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.subMenu;
    /** @type {?} */
    IgxGridExcelStyleFilteringComponent.prototype.customDialog;
    /**
     * @type {?}
     * @protected
     */
    IgxGridExcelStyleFilteringComponent.prototype.excelStyleSearch;
    /**
     * @type {?}
     * @protected
     */
    IgxGridExcelStyleFilteringComponent.prototype.excelStyleSorting;
    /**
     * @type {?}
     * @protected
     */
    IgxGridExcelStyleFilteringComponent.prototype.defaultExcelStyleSortingTemplate;
    /**
     * @type {?}
     * @protected
     */
    IgxGridExcelStyleFilteringComponent.prototype.defaultExcelStyleHidingTemplate;
    /**
     * @type {?}
     * @protected
     */
    IgxGridExcelStyleFilteringComponent.prototype.defaultExcelStyleMovingTemplate;
    /**
     * @type {?}
     * @protected
     */
    IgxGridExcelStyleFilteringComponent.prototype.defaultExcelStylePinningTemplate;
    /**
     * @type {?}
     * @private
     */
    IgxGridExcelStyleFilteringComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,