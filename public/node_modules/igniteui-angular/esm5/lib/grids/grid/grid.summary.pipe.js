/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
import { GridSummaryPosition, GridSummaryCalculationMode } from '../grid-base.component';
/**
 * @hidden
 */
var IgxGridSummaryPipe = /** @class */ (function () {
    function IgxGridSummaryPipe(gridAPI) {
        this.gridAPI = (/** @type {?} */ (gridAPI));
    }
    /**
     * @param {?} flatData
     * @param {?} hasSummary
     * @param {?} summaryCalculationMode
     * @param {?} summaryPosition
     * @param {?} id
     * @param {?} pipeTrigger
     * @param {?} summaryPipeTrigger
     * @return {?}
     */
    IgxGridSummaryPipe.prototype.transform = /**
     * @param {?} flatData
     * @param {?} hasSummary
     * @param {?} summaryCalculationMode
     * @param {?} summaryPosition
     * @param {?} id
     * @param {?} pipeTrigger
     * @param {?} summaryPipeTrigger
     * @return {?}
     */
    function (flatData, hasSummary, summaryCalculationMode, summaryPosition, id, pipeTrigger, summaryPipeTrigger) {
        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {
            return flatData;
        }
        return this.addSummaryRows(id, flatData, summaryPosition);
    };
    /**
     * @private
     * @param {?} gridId
     * @param {?} collection
     * @param {?} summaryPosition
     * @return {?}
     */
    IgxGridSummaryPipe.prototype.addSummaryRows = /**
     * @private
     * @param {?} gridId
     * @param {?} collection
     * @param {?} summaryPosition
     * @return {?}
     */
    function (gridId, collection, summaryPosition) {
        /** @type {?} */
        var recordsWithSummary = [];
        /** @type {?} */
        var lastChildMap = new Map();
        /** @type {?} */
        var grid = this.gridAPI.grid;
        /** @type {?} */
        var maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();
        for (var i = 0; i < collection.length; i++) {
            /** @type {?} */
            var record = collection[i];
            recordsWithSummary.push(record);
            /** @type {?} */
            var recordId = void 0;
            /** @type {?} */
            var groupByRecord = null;
            if (grid.isGroupByRecord(record)) {
                groupByRecord = (/** @type {?} */ (record));
                recordId = this.gridAPI.get_groupBy_record_id(groupByRecord);
            }
            else {
                recordId = this.gridAPI.get_row_id(record);
            }
            if (summaryPosition === GridSummaryPosition.bottom && lastChildMap.has(recordId)) {
                /** @type {?} */
                var groupRecords = lastChildMap.get(recordId);
                for (var j = 0; j < groupRecords.length; j++) {
                    /** @type {?} */
                    var groupRecord = groupRecords[j];
                    /** @type {?} */
                    var groupRecordId = this.gridAPI.get_groupBy_record_id(groupRecord);
                    /** @type {?} */
                    var records = this.removeDeletedRecord(grid, groupRecord.records.slice());
                    /** @type {?} */
                    var summaries = grid.summaryService.calculateSummaries(groupRecordId, records);
                    /** @type {?} */
                    var summaryRecord = {
                        summaries: summaries,
                        max: maxSummaryHeight
                    };
                    recordsWithSummary.push(summaryRecord);
                }
            }
            if (groupByRecord === null || !grid.isExpandedGroup(groupByRecord)) {
                continue;
            }
            if (summaryPosition === GridSummaryPosition.top) {
                /** @type {?} */
                var records = this.removeDeletedRecord(grid, groupByRecord.records.slice());
                /** @type {?} */
                var summaries = grid.summaryService.calculateSummaries(recordId, records);
                /** @type {?} */
                var summaryRecord = {
                    summaries: summaries,
                    max: maxSummaryHeight
                };
                recordsWithSummary.push(summaryRecord);
            }
            else if (summaryPosition === GridSummaryPosition.bottom) {
                /** @type {?} */
                var lastChild = groupByRecord;
                while (lastChild.groups && lastChild.groups.length > 0 && grid.isExpandedGroup(lastChild)) {
                    lastChild = lastChild.groups[lastChild.groups.length - 1];
                }
                /** @type {?} */
                var lastChildId = void 0;
                if (grid.isExpandedGroup(lastChild)) {
                    lastChildId = this.gridAPI.get_row_id(lastChild.records[lastChild.records.length - 1]);
                }
                else {
                    lastChildId = this.gridAPI.get_groupBy_record_id(lastChild);
                }
                /** @type {?} */
                var groupRecords = lastChildMap.get(lastChildId);
                if (!groupRecords) {
                    groupRecords = [];
                    lastChildMap.set(lastChildId, groupRecords);
                }
                groupRecords.unshift(groupByRecord);
            }
        }
        return recordsWithSummary;
    };
    /**
     * @private
     * @param {?} grid
     * @param {?} data
     * @return {?}
     */
    IgxGridSummaryPipe.prototype.removeDeletedRecord = /**
     * @private
     * @param {?} grid
     * @param {?} data
     * @return {?}
     */
    function (grid, data) {
        if (!grid.transactions.enabled) {
            return data;
        }
        /** @type {?} */
        var deletedRows = grid.transactions.getTransactionLog().filter(function (t) { return t.type === 'delete'; }).map(function (t) { return t.id; });
        deletedRows.forEach(function (rowID) {
            /** @type {?} */
            var tempData = grid.primaryKey ? data.map(function (rec) { return rec[grid.primaryKey]; }) : data;
            /** @type {?} */
            var index = tempData.indexOf(rowID);
            if (index !== -1) {
                data.splice(index, 1);
            }
        });
        return data;
    };
    IgxGridSummaryPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gridSummary',
                    pure: true
                },] }
    ];
    /** @nocollapse */
    IgxGridSummaryPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    return IgxGridSummaryPipe;
}());
export { IgxGridSummaryPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridSummaryPipe.prototype.gridAPI;
}
//# sourceMappingURL=data:application/json;base64,