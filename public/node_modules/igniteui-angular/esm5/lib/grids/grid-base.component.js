/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DOCUMENT } from '@angular/common';
import { ChangeDetectorRef, ComponentFactoryResolver, ContentChildren, ContentChild, ElementRef, EventEmitter, HostBinding, Inject, Input, IterableDiffers, NgZone, Output, QueryList, TemplateRef, ViewChild, ViewChildren, ViewContainerRef, InjectionToken, Optional } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil, first, filter } from 'rxjs/operators';
import { IgxSelectionAPIService } from '../core/selection';
import { cloneArray, isEdge, isNavigationKey, flatten, mergeObjects } from '../core/utils';
import { DataType } from '../data-operations/data-util';
import { FilteringLogic } from '../data-operations/filtering-expression.interface';
import { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';
import { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';
import { AbsoluteScrollStrategy, HorizontalAlignment, VerticalAlignment, IgxOverlayService } from '../services/index';
import { IgxCheckboxComponent } from './../checkbox/checkbox.component';
import { GridBaseAPIService } from './api.service';
import { IgxColumnComponent } from './column.component';
import { DropPosition, ContainerPositioningStrategy, IgxDecimalPipeComponent, IgxDatePipeComponent } from './grid.common';
import { IgxGridToolbarComponent } from './grid-toolbar.component';
import { IgxRowComponent } from './row.component';
import { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';
import { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
import { TransactionType } from '../services/index';
import { IgxRowEditTemplateDirective, IgxRowEditTabStopDirective, IgxRowEditTextDirective, IgxRowEditActionsDirective } from './grid.rowEdit.directive';
import { IgxGridNavigationService } from './grid-navigation.service';
import { DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';
import { IgxFilteringService } from './filtering/grid-filtering.service';
import { WatchChanges } from './watch-changes';
import { IgxGridHeaderGroupComponent } from './grid-header-group.component';
import { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { IgxGridSummaryService } from './summaries/grid-summary.service';
import { IgxSummaryRowComponent } from './summaries/summary-row.component';
import { DeprecateMethod, DeprecateProperty } from '../core/deprecateDecorators';
import { IgxGridSelectionService, IgxGridCRUDService, IgxRow, IgxCell } from '../core/grid-selection';
import { DragScrollDirection } from './drag-select.directive';
import { IgxExcelStyleSortingTemplateDirective, IgxExcelStylePinningTemplateDirective, IgxExcelStyleHidingTemplateDirective, IgxExcelStyleMovingTemplateDirective } from './filtering/excel-style/grid.excel-style-filtering.component';
import { IgxGridColumnResizerComponent } from './grid-column-resizer.component';
import { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';
/** @type {?} */
var MINIMUM_COLUMN_WIDTH = 136;
/** @type {?} */
var FILTER_ROW_HEIGHT = 50;
// By default row editing overlay outlet is inside grid body so that overlay is hidden below grid header when scrolling.
// In cases when grid has 1-2 rows there isn't enough space in grid body and row editing overlay should be shown above header.
// Default row editing overlay height is higher then row height that is why the case is valid also for row with 2 rows.
// More accurate calculation is not possible, cause row editing overlay is still not shown and we don't know its height,
// but in the same time we need to set row editing overlay outlet before opening the overlay itself.
/** @type {?} */
var MIN_ROW_EDITING_COUNT_THRESHOLD = 2;
/** @type {?} */
export var IgxGridTransaction = new InjectionToken('IgxGridTransaction');
/**
 * @record
 */
export function IGridCellEventArgs() { }
if (false) {
    /** @type {?} */
    IGridCellEventArgs.prototype.cell;
    /** @type {?} */
    IGridCellEventArgs.prototype.event;
}
/**
 * @record
 */
export function IGridEditEventArgs() { }
if (false) {
    /** @type {?} */
    IGridEditEventArgs.prototype.rowID;
    /** @type {?|undefined} */
    IGridEditEventArgs.prototype.cellID;
    /** @type {?} */
    IGridEditEventArgs.prototype.oldValue;
    /** @type {?|undefined} */
    IGridEditEventArgs.prototype.newValue;
    /** @type {?|undefined} */
    IGridEditEventArgs.prototype.event;
}
/**
 * @record
 */
export function IPinColumnEventArgs() { }
if (false) {
    /** @type {?} */
    IPinColumnEventArgs.prototype.column;
    /** @type {?} */
    IPinColumnEventArgs.prototype.insertAtIndex;
    /** @type {?} */
    IPinColumnEventArgs.prototype.isPinned;
}
/**
 * @record
 */
export function IPageEventArgs() { }
if (false) {
    /** @type {?} */
    IPageEventArgs.prototype.previous;
    /** @type {?} */
    IPageEventArgs.prototype.current;
}
/**
 * @record
 */
export function IRowDataEventArgs() { }
if (false) {
    /** @type {?} */
    IRowDataEventArgs.prototype.data;
}
/**
 * @record
 */
export function IColumnResizeEventArgs() { }
if (false) {
    /** @type {?} */
    IColumnResizeEventArgs.prototype.column;
    /** @type {?} */
    IColumnResizeEventArgs.prototype.prevWidth;
    /** @type {?} */
    IColumnResizeEventArgs.prototype.newWidth;
}
/**
 * @record
 */
export function IRowSelectionEventArgs() { }
if (false) {
    /** @type {?} */
    IRowSelectionEventArgs.prototype.oldSelection;
    /** @type {?} */
    IRowSelectionEventArgs.prototype.newSelection;
    /** @type {?|undefined} */
    IRowSelectionEventArgs.prototype.row;
    /** @type {?|undefined} */
    IRowSelectionEventArgs.prototype.event;
}
/**
 * @record
 */
export function ISearchInfo() { }
if (false) {
    /** @type {?} */
    ISearchInfo.prototype.searchText;
    /** @type {?} */
    ISearchInfo.prototype.caseSensitive;
    /** @type {?} */
    ISearchInfo.prototype.exactMatch;
    /** @type {?} */
    ISearchInfo.prototype.activeMatchIndex;
    /** @type {?} */
    ISearchInfo.prototype.matchInfoCache;
}
/**
 * @record
 */
export function IGridToolbarExportEventArgs() { }
if (false) {
    /** @type {?} */
    IGridToolbarExportEventArgs.prototype.grid;
    /** @type {?} */
    IGridToolbarExportEventArgs.prototype.exporter;
    /** @type {?} */
    IGridToolbarExportEventArgs.prototype.options;
    /** @type {?} */
    IGridToolbarExportEventArgs.prototype.cancel;
}
/**
 * @record
 */
export function IColumnMovingStartEventArgs() { }
if (false) {
    /** @type {?} */
    IColumnMovingStartEventArgs.prototype.source;
}
/**
 * @record
 */
export function IColumnMovingEventArgs() { }
if (false) {
    /** @type {?} */
    IColumnMovingEventArgs.prototype.source;
    /** @type {?} */
    IColumnMovingEventArgs.prototype.cancel;
}
/**
 * @record
 */
export function IColumnMovingEndEventArgs() { }
if (false) {
    /** @type {?} */
    IColumnMovingEndEventArgs.prototype.source;
    /** @type {?} */
    IColumnMovingEndEventArgs.prototype.target;
}
/**
 * @record
 */
export function IFocusChangeEventArgs() { }
if (false) {
    /** @type {?} */
    IFocusChangeEventArgs.prototype.cell;
    /** @type {?} */
    IFocusChangeEventArgs.prototype.event;
    /** @type {?} */
    IFocusChangeEventArgs.prototype.cancel;
}
/**
 * @record
 */
export function IGridKeydownEventArgs() { }
if (false) {
    /** @type {?} */
    IGridKeydownEventArgs.prototype.targetType;
    /** @type {?} */
    IGridKeydownEventArgs.prototype.target;
    /** @type {?} */
    IGridKeydownEventArgs.prototype.event;
    /** @type {?} */
    IGridKeydownEventArgs.prototype.cancel;
}
/**
 * @record
 */
export function ICellPosition() { }
if (false) {
    /** @type {?} */
    ICellPosition.prototype.rowIndex;
    /** @type {?} */
    ICellPosition.prototype.visibleColumnIndex;
}
/**
 * @record
 */
export function IGridDataBindable() { }
if (false) {
    /** @type {?} */
    IGridDataBindable.prototype.data;
    /** @type {?} */
    IGridDataBindable.prototype.filteredData;
}
/**
 * @record
 */
export function IRowDragEndEventArgs() { }
if (false) {
    /** @type {?} */
    IRowDragEndEventArgs.prototype.owner;
    /** @type {?} */
    IRowDragEndEventArgs.prototype.dragData;
    /** @type {?} */
    IRowDragEndEventArgs.prototype.animation;
}
/**
 * @record
 */
export function IRowDragStartEventArgs() { }
if (false) {
    /** @type {?} */
    IRowDragStartEventArgs.prototype.owner;
    /** @type {?} */
    IRowDragStartEventArgs.prototype.dragData;
}
/** @enum {string} */
var GridSummaryPosition = {
    top: 'top',
    bottom: 'bottom',
};
export { GridSummaryPosition };
/** @enum {string} */
var GridSummaryCalculationMode = {
    rootLevelOnly: 'rootLevelOnly',
    childLevelsOnly: 'childLevelsOnly',
    rootAndChildLevels: 'rootAndChildLevels',
};
export { GridSummaryCalculationMode };
/** @enum {string} */
var FilterMode = {
    quickFilter: 'quickFilter',
    excelStyleFilter: 'excelStyleFilter',
};
export { FilterMode };
/** @enum {string} */
var GridKeydownTargetType = {
    dataCell: 'dataCell',
    summaryCell: 'summaryCell',
    groupRow: 'groupRow',
    hierarchicalRow: 'hierarchicalRow',
};
export { GridKeydownTargetType };
/**
 * @abstract
 */
var IgxGridBaseComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxGridBaseComponent, _super);
    function IgxGridBaseComponent(selectionService, crudService, gridAPI, selection, _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation, filteringService, overlayService, summaryService, _displayDensityOptions) {
        var _this = _super.call(this, _displayDensityOptions) || this;
        _this.selectionService = selectionService;
        _this.crudService = crudService;
        _this.gridAPI = gridAPI;
        _this.selection = selection;
        _this._transactions = _transactions;
        _this.elementRef = elementRef;
        _this.zone = zone;
        _this.document = document;
        _this.cdr = cdr;
        _this.resolver = resolver;
        _this.differs = differs;
        _this.viewRef = viewRef;
        _this.navigation = navigation;
        _this.filteringService = filteringService;
        _this.overlayService = overlayService;
        _this.summaryService = summaryService;
        _this._displayDensityOptions = _displayDensityOptions;
        _this._resourceStrings = CurrentResourceStrings.GridResStrings;
        _this._emptyGridMessage = null;
        _this._emptyFilteredGridMessage = null;
        _this._isLoading = false;
        _this._locale = null;
        _this._destroyed = false;
        _this.overlayIDs = [];
        /**
         * An \@Input property that autogenerates the `IgxGridComponent` columns.
         * The default value is false.
         * ```html
         * <igx-grid [data]="Data" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.autoGenerate = false;
        /**
         * @hidden
         * \@internal
         */
        _this.rowDragging = false;
        /**
         * An \@Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.
         * ```html
         * <igx-grid #grid [data]="Data" [evenRowCSS]="'igx-grid--my-even-class'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.evenRowCSS = 'igx-grid__tr--even';
        /**
         * An \@Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.
         * ```html
         * <igx-grid #grid [data]="Data" [evenRowCSS]="'igx-grid--my-odd-class'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.oddRowCSS = 'igx-grid__tr--odd';
        /**
         * An \@Input property that sets the title to be displayed in the built-in column hiding UI.
         * ```html
         * <igx-grid [showToolbar]="true" [columnHiding]="true" columnHidingTitle="Column Hiding"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.columnHidingTitle = '';
        /**
         * An \@Input property that sets the title to be displayed in the UI of the column pinning.
         * ```html
         * <igx-grid #grid [data]="localData" [columnPinning]="'true" [columnPinningTitle]="'Column Hiding'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.columnPinningTitle = '';
        /**
         * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.
         * ```html
         * <igx-grid #grid (onCellClick)="onCellClick($event)" [data]="localData" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * ```typescript
         * public onCellClick(e){
         *     alert("The cell has been clicked!");
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onCellClick = new EventEmitter();
        /**
         * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.
         * ```html
         * <igx-grid #grid (onSelection)="onCellSelect($event)" [data]="localData" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * ```typescript
         * public onCellSelect(e){
         *     alert("The cell has been selected!");
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onSelection = new EventEmitter();
        /**
         *  Emitted when `IgxGridRowComponent` is selected.
         * ```html
         * <igx-grid #grid (onRowSelectionChange)="onRowClickChange($event)" [data]="localData" [autoGenerate]="true"></igx-grid>
         * ```
         * ```typescript
         * public onCellClickChange(e){
         *     alert("The selected row has been changed!");
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onRowSelectionChange = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` is pinned.
         * The index that the column is inserted at may be changed through the `insertAtIndex` property.
         * ```typescript
         * public columnPinning(event) {
         *     if (event.column.field === "Name") {
         *       event.insertAtIndex = 0;
         *     }
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onColumnPinning = new EventEmitter();
        /**
         * An \@Output property emitting an event when `IgxGridCellComponent`
         * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      cellID: {
         *          columnID: int,
         *          rowID: int,
         *          rowIndex: int
         *      }
         *      newValue: object,
         *      oldValue: object,
         *      rowID: int
         *  }
         *
         * ```typescript
         * editCancel(event: IGridEditEventArgs){
         *    const rowID: IgxColumnComponent = event.rowID;
         * }
         * ```
         * ```html
         * <igx-grid #grid3 (onCellEditCancel)="editCancel($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowSelectable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * \@memberof IgxGridComponent
         */
        _this.onCellEditCancel = new EventEmitter();
        /**
         * An \@Output property emitting an event when `IgxGridCellComponent` enters edit mode.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      cellID: {
         *          columnID: int,
         *          rowID: int,
         *          rowIndex: int
         *      }
         *      oldValue: object,
         *      rowID: int
         *  }
         *
         * ```typescript
         * editStart(event: IGridEditEventArgs){
         *    const value: IgxColumnComponent = event.newValue;
         * }
         * ```
         * ```html
         * <igx-grid #grid3 (onCellEditEnter)="editStart($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowSelectable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * \@memberof IgxGridComponent
         */
        _this.onCellEditEnter = new EventEmitter();
        /**
         * An \@Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.
         * Event is fired after editing is completed, when the cell is exiting edit mode.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      cellID: {
         *          columnID: int,
         *          rowID: int,
         *          rowIndex: int
         *      }
         *      newValue: object,
         *      oldValue: object,
         *      rowID: int
         *  }
         *
         * ```typescript
         * editDone(event: IGridEditEventArgs){
         *    const value: IgxColumnComponent = event.newValue;
         * }
         * ```
         * ```html
         * <igx-grid #grid3 (onCellEdit)="editDone($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowSelectable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onCellEdit = new EventEmitter();
        /**
         * An \@Output property emitting an event when [rowEditable]="true" a row enters edit mode.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      oldValue: <rowObj>,
         *      rowID: int
         *  }
         *
         * Bind to the event in markup as follows:
         * ```html
         * <igx-grid #grid3 (onRowEditEnter)="editStart($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowSelectable]="true" [rowEditable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * ```typescript
         *      editStart(event: IGridEditEventArgs) {
         *          const editedRowObj = event.oldValue;
         *          const cancelValue = event.cancel;
         *          const rowID = event.rowID;
         *      }
         * ```
         * \@memberof IgxGridComponent
         */
        _this.onRowEditEnter = new EventEmitter();
        /**
         * An \@Output property emitting an event when [rowEditable]="true" & `endEdit(true)` is called.
         * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,
         * performing paging operation, column resizing, pinning, moving or hitting  `Done`
         * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      newValue: <rowObj>,
         *      oldValue: <rowObj>,
         *      rowID: int
         *  }
         *
         * Bind to the event in markup as follows:
         * ```html
         * <igx-grid #grid3 (onRowEdit)="editDone($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowSelectable]="true" [rowEditable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         *
         * ```typescript
         *      editDone(event: IGridEditEventArgs) {
         *          const originalRowObj = event.oldValue;
         *          const updatedRowObj = event.newValue;
         *          const cancelValue = event.cancel;
         *          const rowID = event.rowID;
         *      }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onRowEdit = new EventEmitter();
        /**
         * An \@Output property emitting an event when [rowEditable]="true" & `endEdit(false)` is called.
         * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button
         * in the row editing overlay.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      newValue: <rowObj>,
         *      oldValue: <rowObj>,
         *      rowID: int
         *  }
         *
         * Bind to the event in markup as follows:
         * ```html
         * <igx-grid #grid3 (onRowEditCancel)="editCancel($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowSelectable]="true" [rowEditable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * ```typescript
         *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {
         *          const originalRowObj = event.oldValue;
         *          const updatedRowObj = event.newValue;
         *          const cancelValue = event.cancel;
         *          const rowID = event.rowID;
         *      }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onRowEditCancel = new EventEmitter();
        /**
         * Emitted when a grid column is initialized. Returns the column object.
         * ```html
         * <igx-grid #grid [data]="localData" [onColumnInit]="initColumns($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * ```typescript
         * initColumns(event: IgxColumnComponent) {
         * const column: IgxColumnComponent = event;
         *       column.filterable = true;
         *       column.sortable = true;
         *       column.editable = true;
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onColumnInit = new EventEmitter();
        /**
         * Emitted when sorting is performed through the UI. Returns the sorting expression.
         * ```html
         * <igx-grid #grid [data]="localData" [autoGenerate]="true" (onSortingDone)="sortingDone($event)"></igx-grid>
         * ```
         * ```typescript
         * sortingDone(event: SortingDirection){
         *     const sortingDirection = event;
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onSortingDone = new EventEmitter();
        /**
         * Emitted when filtering is performed through the UI.
         * Returns the filtering expressions tree of the column for which filtering was performed.
         * ```typescript
         * filteringDone(event: IFilteringExpressionsTree){
         *     const filteringTree = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true" (onFilteringDone)="filteringDone($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onFilteringDone = new EventEmitter();
        /**
         * Emitted when paging is performed. Returns an object consisting of the previous and next pages.
         * ```typescript
         * pagingDone(event: IPageEventArgs){
         *     const paging = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true" (onPagingDone)="pagingDone($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onPagingDone = new EventEmitter();
        /**
         * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.
         * Returns the data for the new `IgxGridRowComponent` object.
         * ```typescript
         * rowAdded(event: IRowDataEventArgs){
         *    const rowInfo = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onRowAdded)="rowAdded($event)" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onRowAdded = new EventEmitter();
        /**
         * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.
         * Returns an `IRowDataEventArgs` object.
         * ```typescript
         * rowDeleted(event: IRowDataEventArgs){
         *    const rowInfo = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onRowDeleted)="rowDeleted($event)" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onRowDeleted = new EventEmitter();
        /**
         * Emitted when a new chunk of data is loaded from virtualization.
         * ```typescript
         *  <igx-grid #grid [data]="localData" [autoGenerate]="true" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onDataPreLoad = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` is resized.
         * Returns the `IgxColumnComponent` object's old and new width.
         * ```typescript
         * resizing(event: IColumnResizeEventArgs){
         *     const grouping = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onColumnResized)="resizing($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onColumnResized = new EventEmitter();
        /**
         * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.
         * ```typescript
         * contextMenu(event: IGridCellEventArgs){
         *     const resizing = event;
         *     console.log(resizing);
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onContextMenu)="contextMenu($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onContextMenu = new EventEmitter();
        /**
         * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.
         * ```typescript
         * dblClick(event: IGridCellEventArgs){
         *     const dblClick = event;
         *     console.log(dblClick);
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onDoubleClick)="dblClick($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onDoubleClick = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }
         * ```typescript
         * visibilityChanged(event: IColumnVisibilityChangedEventArgs){
         *    const visiblity = event;
         * }
         * ```
         * ```html
         * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnVisibilityChanged)="visibilityChanged($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onColumnVisibilityChanged = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.
         * ```typescript
         * movingStart(event: IColumnMovingStartEventArgs){
         *     const movingStarts = event;
         * }
         * ```
         * ```html
         * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMovingStart)="movingStart($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onColumnMovingStart = new EventEmitter();
        /**
         * Emitted throughout the `IgxColumnComponent` moving operation.
         * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.
         * ```typescript
         * moving(event: IColumnMovingEventArgs){
         *     const moving = event;
         * }
         * ```
         * ```html
         * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMoving)="moving($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onColumnMoving = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` moving ends.
         * Returns the source and target `IgxColumnComponent` objects.
         * ```typescript
         * movingEnds(event: IColumnMovingEndEventArgs){
         *     const movingEnds = event;
         * }
         * ```
         * ```html
         * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMovingEnd)="movingEnds($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onColumnMovingEnd = new EventEmitter();
        /**
         * @deprecated you should use onGridKeydown event
         */
        _this.onFocusChange = new EventEmitter();
        /**
         * Emitted when keydown is triggered over element inside grid's body.
         * This event is fired only if the key combination is supported in the grid.
         * Return the target type, target object and the original event. This event is cancelable.
         * ```typescript
         * customKeydown(args: IGridKeydownEventArgs) {
         *  const keydownEvent = args.event;
         * }
         * ```
         * ```html
         *  <igx-grid (onGridKeydown)="customKeydown($event)"></igx-grid>
         * ```
         */
        _this.onGridKeydown = new EventEmitter();
        /**
         * Emitted when start dragging a row.
         * Return the dragged row.
         */
        _this.onRowDragStart = new EventEmitter();
        /**
         * Emitted when dropping a row.
         * Return the dropped row.
         */
        _this.onRowDragEnd = new EventEmitter();
        /**
         * @hidden
         */
        _this.tabindex = 0;
        /**
         * @hidden
         */
        _this.hostRole = 'grid';
        /**
         * @hidden
         */
        _this.columnsWithNoSetWidths = null;
        /* Toolbar related definitions */
        _this._showToolbar = false;
        _this._exportExcel = false;
        _this._exportCsv = false;
        _this._toolbarTitle = null;
        _this._exportText = null;
        _this._exportExcelText = null;
        _this._exportCsvText = null;
        _this._rowEditable = false;
        _this._filteredSortedData = null;
        /**
         * Provides access to the `IgxToolbarComponent`.
         * ```typescript
         * const gridToolbar = this.grid.toolbar;
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.toolbar = null;
        _this.toolbarHtml = null;
        /**
         * Emitted when an export process is initiated by the user.
         * ```typescript
         * toolbarExporting(event: IGridToolbarExportEventArgs){
         *     const toolbarExporting = event;
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onToolbarExporting = new EventEmitter();
        /* End of toolbar related definitions */
        // TODO: Document
        _this.onRangeSelection = new EventEmitter();
        /**
         * @hidden
         */
        _this.calcHeight = 0;
        /**
         * @hidden
         */
        _this.chipsGoupingExpressions = [];
        /**
         * @hidden
         */
        _this.allRowsSelected = false;
        /**
         * @hidden
         */
        _this.disableTransitions = false;
        /**
         * @hidden
         */
        _this.lastSearchInfo = {
            searchText: '',
            caseSensitive: false,
            exactMatch: false,
            activeMatchIndex: 0,
            matchInfoCache: []
        };
        /**
         * @hidden
         */
        _this.columnWidthSetByUser = false;
        // abstract dataLength;
        /**
         * @hidden
         */
        _this.destroy$ = new Subject();
        /**
         * @hidden
         */
        _this._perPage = 15;
        /**
         * @hidden
         */
        _this._page = 0;
        /**
         * @hidden
         */
        _this._paging = false;
        /**
         * @hidden
         */
        _this._rowSelection = false;
        /**
         * @hidden
         */
        _this._rowDrag = false;
        /**
         * @hidden
         */
        _this._pipeTrigger = 0;
        /**
         * @hidden
         */
        _this._summaryPipeTrigger = 0;
        /**
         * @hidden
         */
        _this._columns = [];
        /**
         * @hidden
         */
        _this._pinnedColumns = [];
        /**
         * @hidden
         */
        _this._unpinnedColumns = [];
        /**
         * @hidden
         */
        _this._filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);
        /**
         * @hidden
         */
        _this._sortingExpressions = [];
        /**
         * @hidden
         */
        _this._maxLevelHeaderDepth = null;
        /**
         * @hidden
         */
        _this._columnHiding = false;
        /**
         * @hidden
         */
        _this._columnPinning = false;
        /**
         * @hidden
         */
        _this._keydownListener = null;
        /**
         * @hidden
         */
        _this._vScrollListener = null;
        /**
         * @hidden
         */
        _this._hScrollListener = null;
        /**
         * @hidden
         */
        _this._wheelListener = null;
        _this._allowFiltering = false;
        _this._filterMode = FilterMode.quickFilter;
        _this._hiddenColumnsText = '';
        _this._pinnedColumnsText = '';
        _this._height = '100%';
        _this._width = '100%';
        _this._ngAfterViewInitPassed = false;
        _this._multiRowLayoutRowSize = 1;
        // Caches
        _this._totalWidth = NaN;
        _this._pinnedVisible = [];
        _this._unpinnedVisible = [];
        _this._pinnedWidth = NaN;
        _this._unpinnedWidth = NaN;
        _this._visibleColumns = [];
        _this._columnGroups = false;
        _this._defaultTargetRecordNumber = 10;
        _this._summaryPosition = GridSummaryPosition.bottom;
        _this._summaryCalculationMode = GridSummaryCalculationMode.rootAndChildLevels;
        _this.rowEditPositioningStrategy = new ContainerPositioningStrategy({
            horizontalDirection: HorizontalAlignment.Right,
            verticalDirection: VerticalAlignment.Bottom,
            horizontalStartPoint: HorizontalAlignment.Left,
            verticalStartPoint: VerticalAlignment.Bottom,
            closeAnimation: null
        });
        _this.rowEditSettings = {
            scrollStrategy: new AbsoluteScrollStrategy(),
            modal: false,
            closeOnOutsideClick: false,
            outlet: _this.rowOutletDirective,
            positionStrategy: _this.rowEditPositioningStrategy
        };
        _this.resizeHandler = function () {
            _this.zone.run(function () { return _this.calculateGridSizes(); });
        };
        return _this;
    }
    Object.defineProperty(IgxGridBaseComponent.prototype, "scrollWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this._scrollWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "resourceStrings", {
        /**
         * An accessor that returns the resource strings.
        */
        get: /**
         * An accessor that returns the resource strings.
         * @return {?}
         */
        function () {
            return this._resourceStrings;
        },
        /**
         * An accessor that sets the resource strings.
         * By default it uses EN resources.
        */
        set: /**
         * An accessor that sets the resource strings.
         * By default it uses EN resources.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._resourceStrings = Object.assign({}, this._resourceStrings, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "filteringLogic", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filteringExpressionsTree.operator;
        },
        /**
         * Sets the filtering logic of the `IgxGridComponent`.
         * The default is AND.
         * ```html
         * <igx-grid [data]="Data" [autoGenerate]="true" [filteringLogic]="filtering"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the filtering logic of the `IgxGridComponent`.
         * The default is AND.
         * ```html
         * <igx-grid [data]="Data" [autoGenerate]="true" [filteringLogic]="filtering"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filteringExpressionsTree.operator = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "filteringExpressionsTree", {
        /**
         * Returns the filtering state of `IgxGridComponent`.
         * ```typescript
         * let filteringExpressionsTree = this.grid.filteringExpressionsTree;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the filtering state of `IgxGridComponent`.
         * ```typescript
         * let filteringExpressionsTree = this.grid.filteringExpressionsTree;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._filteringExpressionsTree;
        },
        /**
         * Sets the filtering state of the `IgxGridComponent`.
         * ```typescript
         * const logic = new FilteringExpressionsTree(FilteringLogic.And, "ID");
         * logic.filteringOperands = [
         *     {
         *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),
         *          fieldName: 'ID',
         *          searchVal: 1
         *     }
         * ];
         * this.grid.filteringExpressionsTree = (logic);
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the filtering state of the `IgxGridComponent`.
         * ```typescript
         * const logic = new FilteringExpressionsTree(FilteringLogic.And, "ID");
         * logic.filteringOperands = [
         *     {
         *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),
         *          fieldName: 'ID',
         *          searchVal: 1
         *     }
         * ];
         * this.grid.filteringExpressionsTree = (logic);
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value instanceof FilteringExpressionsTree) {
                /** @type {?} */
                var val = ((/** @type {?} */ (value)));
                for (var index = 0; index < val.filteringOperands.length; index++) {
                    if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {
                        /** @type {?} */
                        var newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);
                        newExpressionsTree.filteringOperands.push((/** @type {?} */ (val.filteringOperands[index])));
                        val.filteringOperands[index] = newExpressionsTree;
                    }
                }
                // clone the filtering expression tree in order to trigger the filtering pipe
                /** @type {?} */
                var filteringExpressionTreeClone = new FilteringExpressionsTree(value.operator, value.fieldName);
                filteringExpressionTreeClone.filteringOperands = value.filteringOperands;
                this._filteringExpressionsTree = filteringExpressionTreeClone;
                if (this.filteringService.isFilteringExpressionsTreeEmpty()) {
                    this.filteredData = null;
                }
                this.filteringService.refreshExpressions();
                this.summaryService.clearSummaryCache();
                this.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "locale", {
        /**
         * Returns the locale of the grid.
         * If not set, returns browser's language.
         */
        get: /**
         * Returns the locale of the grid.
         * If not set, returns browser's language.
         * @return {?}
         */
        function () {
            if (this._locale) {
                return this._locale;
            }
            else {
                return 'en';
            }
        },
        /**
         * Sets the locale of the grid.
         */
        set: /**
         * Sets the locale of the grid.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._locale = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "paging", {
        /**
         * Returns whether the paging feature is enabled/disabled.
         * The default state is disabled (false).
         * ```
         * const paging = this.grid.paging;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns whether the paging feature is enabled/disabled.
         * The default state is disabled (false).
         * ```
         * const paging = this.grid.paging;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._paging;
        },
        /**
         * Enables/Disables the paging feature.
         * ```html
         * <igx-grid #grid [data]="Data" [autoGenerate]="true" [paging]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Enables/Disables the paging feature.
         * ```html
         * <igx-grid #grid [data]="Data" [autoGenerate]="true" [paging]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._paging = value;
            this._pipeTrigger++;
            if (this._ngAfterViewInitPassed) {
                this.cdr.detectChanges();
                this.calculateGridHeight();
                this.cdr.detectChanges();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "page", {
        /**
         * Returns the current page index.
         * ```html
         * let gridPage = this.grid.page;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the current page index.
         * ```html
         * let gridPage = this.grid.page;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._page;
        },
        /**
         * Sets the current page index.
         * <igx-grid #grid [data]="Data" [paging]="true" [page]="5" [autoGenerate]="true"></igx-grid>
         */
        set: /**
         * Sets the current page index.
         * <igx-grid #grid [data]="Data" [paging]="true" [page]="5" [autoGenerate]="true"></igx-grid>
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val === this._page || val < 0 || val > this.totalPages - 1) {
                return;
            }
            this.onPagingDone.emit({ previous: this._page, current: val });
            this._page = val;
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "perPage", {
        /**
         * Returns the number of visible items per page of the `IgxGridComponent`.
         * The default is 15.
         * ```html
         * let itemsPerPage = this.grid.perPage;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the number of visible items per page of the `IgxGridComponent`.
         * The default is 15.
         * ```html
         * let itemsPerPage = this.grid.perPage;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._perPage;
        },
        /**
         * Sets the number of visible items per page of the `IgxGridComponent`.
         * ```html
         * <igx-grid #grid [data]="Data" [paging]="true" [perPage]="5" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the number of visible items per page of the `IgxGridComponent`.
         * ```html
         * <igx-grid #grid [data]="Data" [paging]="true" [perPage]="5" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val < 0) {
                return;
            }
            this.selectionService.clear();
            this._perPage = val;
            this.page = 0;
            this.endEdit(true);
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "columnHiding", {
        /**
         * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.
         * By default it is disabled (false).
         * ```typescript
         * let gridColHiding = this.grid.columnHiding;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.
         * By default it is disabled (false).
         * ```typescript
         * let gridColHiding = this.grid.columnHiding;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._columnHiding;
        },
        /**
         * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.
         * In order for the UI to work, you need to enable the toolbar as shown in the example below.
         * ```html
         * <igx-grid [data]="Data" [autoGenerate]="true" [showToolbar]="true" [columnHiding]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.
         * In order for the UI to work, you need to enable the toolbar as shown in the example below.
         * ```html
         * <igx-grid [data]="Data" [autoGenerate]="true" [showToolbar]="true" [columnHiding]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._columnHiding !== value) {
                this._columnHiding = value;
                if (this.gridAPI.grid) {
                    this.markForCheck();
                    if (this._ngAfterViewInitPassed) {
                        this.calculateGridSizes();
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowSelectable", {
        /**
         * Sets whether the `IgxGridRowComponent` selection is enabled.
         * By default it is set to false.
         * ```typescript
         * let rowSelectable = this.grid.rowSelectable;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Sets whether the `IgxGridRowComponent` selection is enabled.
         * By default it is set to false.
         * ```typescript
         * let rowSelectable = this.grid.rowSelectable;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._rowSelection;
        },
        /**
         * Sets whether rows can be selected.
         * ```html
         * <igx-grid #grid [showToolbar]="true" [rowSelectable]="true" [columnHiding]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets whether rows can be selected.
         * ```html
         * <igx-grid #grid [showToolbar]="true" [rowSelectable]="true" [columnHiding]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._rowSelection = val;
            if (this.gridAPI.grid && this.columnList) {
                // should selection persist?
                this.allRowsSelected = false;
                this.deselectAllRows();
                this.calculateGridSizes();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowDraggable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rowDrag;
        },
        /**
         * Sets whether rows can be moved.
         * ```html
         * <igx-grid #grid [rowDraggable]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets whether rows can be moved.
         * ```html
         * <igx-grid #grid [rowDraggable]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._rowDrag = val;
            if (this.gridAPI.grid && this.columnList) {
                this.calculateGridSizes();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowEditable", {
        /**
     * Sets whether the `IgxGridRowComponent` is editable.
     * By default it is set to false.
     * ```typescript
     * let rowEditable = this.grid.rowEditable;
     * ```
     * @memberof IgxGridBaseComponent
     */
        get: /**
         * Sets whether the `IgxGridRowComponent` is editable.
         * By default it is set to false.
         * ```typescript
         * let rowEditable = this.grid.rowEditable;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._rowEditable;
        },
        /**
        * Sets whether rows can be edited.
        * ```html
        * <igx-grid #grid [showToolbar]="true" [rowEditable]="true" [primaryKey]="'ProductID'" [columnHiding]="true"></igx-grid>
        * ```
        * @memberof IgxGridBaseComponent
        */
        set: /**
         * Sets whether rows can be edited.
         * ```html
         * <igx-grid #grid [showToolbar]="true" [rowEditable]="true" [primaryKey]="'ProductID'" [columnHiding]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val && (this.primaryKey === undefined || this.primaryKey === null)) {
                console.warn('The grid must have a `primaryKey` specified when using `rowEditable`!');
            }
            this._rowEditable = val;
            if (this.gridAPI.grid) {
                this.refreshGridState();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "height", {
        /**
         * Returns the height of the `IgxGridComponent`.
         * ```typescript
         * let gridHeight = this.grid.height;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the height of the `IgxGridComponent`.
         * ```typescript
         * let gridHeight = this.grid.height;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * Sets the height of the `IgxGridComponent`.
         * ```html
         * <igx-grid #grid [data]="Data" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the height of the `IgxGridComponent`.
         * ```html
         * <igx-grid #grid [data]="Data" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (this._height !== value) {
                this._height = value;
                requestAnimationFrame(function () {
                    if (!_this._destroyed) {
                        _this.reflow();
                        _this.cdr.markForCheck();
                    }
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "width", {
        /**
         * Returns the width of the `IgxGridComponent`.
         * ```typescript
         * let gridWidth = this.grid.width;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the width of the `IgxGridComponent`.
         * ```typescript
         * let gridWidth = this.grid.width;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._width;
        },
        /**
         * Sets the width of the `IgxGridComponent`.
         * ```html
         * <igx-grid #grid [data]="Data" [width]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the width of the `IgxGridComponent`.
         * ```html
         * <igx-grid #grid [data]="Data" [width]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (this._width !== value) {
                this._width = value;
                requestAnimationFrame(function () {
                    // Calling reflow(), because the width calculation
                    // might make the horizontal scrollbar appear/disappear.
                    // This will change the height, which should be recalculated.
                    if (!_this._destroyed) {
                        _this.reflow();
                    }
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "headerWidth", {
        /**
         * Returns the width of the header of the `IgxGridComponent`.
         * ```html
         * let gridHeaderWidth = this.grid.headerWidth;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the width of the header of the `IgxGridComponent`.
         * ```html
         * let gridHeaderWidth = this.grid.headerWidth;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return parseInt(this._width, 10) - 17;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowHeight", {
        /**
         * Returns the row height.
         * ```typescript
         * const rowHeight = this.grid.rowHeight;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the row height.
         * ```typescript
         * const rowHeight = this.grid.rowHeight;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._rowHeight ? this._rowHeight : this.defaultRowHeight;
        },
        /**
         * Sets the row height.
         * ```html
         * <igx-grid #grid [data]="localData" [showToolbar]="true" [rowHeight]="100" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the row height.
         * ```html
         * <igx-grid #grid [data]="localData" [showToolbar]="true" [rowHeight]="100" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._rowHeight = parseInt(value, 10);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "columnWidth", {
        /**
         * An @Input property that sets the default width of the `IgxGridComponent`'s columns.
         * ```html
         * <igx-grid #grid [data]="localData" [showToolbar]="true" [columnWidth]="100" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * An \@Input property that sets the default width of the `IgxGridComponent`'s columns.
         * ```html
         * <igx-grid #grid [data]="localData" [showToolbar]="true" [columnWidth]="100" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._columnWidth;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._columnWidth = value;
            this.columnWidthSetByUser = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "emptyGridMessage", {
        /**
         * An accessor that returns the message displayed when there are no records.
        */
        get: /**
         * An accessor that returns the message displayed when there are no records.
         * @return {?}
         */
        function () {
            return this._emptyGridMessage || this.resourceStrings.igx_grid_emptyGrid_message;
        },
        /**
         * An @Input property that sets the message displayed when there are no records.
         * ```html
         * <igx-grid #grid [data]="Data" [emptyGridMessage]="'The grid is empty'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * An \@Input property that sets the message displayed when there are no records.
         * ```html
         * <igx-grid #grid [data]="Data" [emptyGridMessage]="'The grid is empty'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._emptyGridMessage = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "isLoading", {
        /**
         * An accessor that returns whether the grid is showing loading indicator.
         */
        get: /**
         * An accessor that returns whether the grid is showing loading indicator.
         * @return {?}
         */
        function () {
            return this._isLoading;
        },
        /**
         * An @Input property that sets whether the grid is going to show loading indicator.
         * ```html
         * <igx-grid #grid [data]="Data" [isLoading]="true" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * An \@Input property that sets whether the grid is going to show loading indicator.
         * ```html
         * <igx-grid #grid [data]="Data" [isLoading]="true" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isLoading = value;
            if (this.gridAPI.grid) {
                this.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "emptyFilteredGridMessage", {
        /**
         * An accessor that returns the message displayed when there are no records and the grid is filtered.
        */
        get: /**
         * An accessor that returns the message displayed when there are no records and the grid is filtered.
         * @return {?}
         */
        function () {
            return this._emptyFilteredGridMessage || this.resourceStrings.igx_grid_emptyFilteredGrid_message;
        },
        /**
         * An @Input property that sets the message displayed when there are no records and the grid is filtered.
         * ```html
         * <igx-grid #grid [data]="Data" [emptyGridMessage]="'The grid is empty'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * An \@Input property that sets the message displayed when there are no records and the grid is filtered.
         * ```html
         * <igx-grid #grid [data]="Data" [emptyGridMessage]="'The grid is empty'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._emptyFilteredGridMessage = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "columnPinning", {
        /**
         * Returns if the built-in column pinning UI should be shown in the toolbar.
         * ```typescript
         *  let colPinning = this.grid.columnPinning;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the built-in column pinning UI should be shown in the toolbar.
         * ```typescript
         *  let colPinning = this.grid.columnPinning;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._columnPinning;
        },
        /**
         * Sets if the built-in column pinning UI should be shown in the toolbar.
         * By default it's disabled.
         * ```html
         * <igx-grid #grid [data]="localData" [columnPinning]="'true" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets if the built-in column pinning UI should be shown in the toolbar.
         * By default it's disabled.
         * ```html
         * <igx-grid #grid [data]="localData" [columnPinning]="'true" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._columnPinning !== value) {
                this._columnPinning = value;
                if (this.gridAPI.grid) {
                    this.markForCheck();
                    if (this._ngAfterViewInitPassed) {
                        this.calculateGridSizes();
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "allowFiltering", {
        /**
         * Returns if the filtering is enabled.
         * ```typescript
         *  let filtering = this.grid.allowFiltering;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the filtering is enabled.
         * ```typescript
         *  let filtering = this.grid.allowFiltering;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._allowFiltering;
        },
        /**
         * Sets if the filtering is enabled.
         * By default it's disabled.
         * ```html
         * <igx-grid #grid [data]="localData" [allowFiltering]="'true" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets if the filtering is enabled.
         * By default it's disabled.
         * ```html
         * <igx-grid #grid [data]="localData" [allowFiltering]="'true" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._allowFiltering !== value) {
                this._allowFiltering = value;
                if (this.calcHeight) {
                    this.calcHeight += value ? -FILTER_ROW_HEIGHT : FILTER_ROW_HEIGHT;
                }
                if (this._ngAfterViewInitPassed) {
                    if (this.maxLevelHeaderDepth) {
                        this.theadRow.nativeElement.style.height = (this.maxLevelHeaderDepth + 1) * this.defaultRowHeight +
                            (value && this.filterMode === FilterMode.quickFilter ? FILTER_ROW_HEIGHT : 0) + 1 + "px";
                    }
                }
                this.filteringService.isFilterRowVisible = false;
                this.filteringService.filteredColumn = null;
                this.filteringService.registerSVGIcons();
                if (this.gridAPI.grid) {
                    this.markForCheck();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "filterMode", {
        /**
         * Returns the filter mode.
         * ```typescript
         *  let filtering = this.grid.filterMode;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the filter mode.
         * ```typescript
         *  let filtering = this.grid.filterMode;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._filterMode;
        },
        /**
         * Sets filter mode.
         * By default it's set to FilterMode.quickFilter.
         * ```html
         * <igx-grid #grid [data]="localData" [filterMode]="'quickFilter'" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets filter mode.
         * By default it's set to FilterMode.quickFilter.
         * ```html
         * <igx-grid #grid [data]="localData" [filterMode]="'quickFilter'" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filterMode = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "summaryPosition", {
        /**
         * Returns the summary position.
         * ```typescript
         *  let summaryPosition = this.grid.summaryPosition;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the summary position.
         * ```typescript
         *  let summaryPosition = this.grid.summaryPosition;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._summaryPosition;
        },
        /**
         * Sets summary position.
         * By default it is bottom.
         * ```html
         * <igx-grid #grid [data]="localData" summaryPosition="top" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets summary position.
         * By default it is bottom.
         * ```html
         * <igx-grid #grid [data]="localData" summaryPosition="top" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._summaryPosition = value;
            if (this.gridAPI.grid) {
                this.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "summaryCalculationMode", {
        /**
         * Returns the summary calculation mode.
         * ```typescript
         *  let summaryCalculationMode = this.grid.summaryCalculationMode;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the summary calculation mode.
         * ```typescript
         *  let summaryCalculationMode = this.grid.summaryCalculationMode;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._summaryCalculationMode;
        },
        /**
         * Sets summary calculation mode.
         * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.
         * ```html
         * <igx-grid #grid [data]="localData" summaryCalculationMode="rootLevelOnly" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets summary calculation mode.
         * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.
         * ```html
         * <igx-grid #grid [data]="localData" summaryCalculationMode="rootLevelOnly" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._summaryCalculationMode = value;
            if (this.gridAPI.grid) {
                this.summaryService.resetSummaryHeight();
                this.endEdit(true);
                this.calculateGridHeight();
                this.cdr.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "headerGroupsList", {
        /**
         * A list of all `IgxGridHeaderGroupComponent`.
         * ```typescript
         * const headerGroupsList = this.grid.headerGroupsList;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * A list of all `IgxGridHeaderGroupComponent`.
         * ```typescript
         * const headerGroupsList = this.grid.headerGroupsList;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.headerGroups ? flatten(this.headerGroups.toArray()) : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "headerCellList", {
        /**
         * A list of all `IgxGridHeaderComponent`.
         * ```typescript
         * const headers = this.grid.headerCellList;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * A list of all `IgxGridHeaderComponent`.
         * ```typescript
         * const headers = this.grid.headerCellList;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.headerGroupsList.map(function (headerGroup) { return headerGroup.headerCell; }).filter(function (headerCell) { return headerCell; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "filterCellList", {
        /**
         * A list of all `IgxGridFilteringCellComponent`.
         * ```typescript
         * const filterCells = this.grid.filterCellList;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * A list of all `IgxGridFilteringCellComponent`.
         * ```typescript
         * const filterCells = this.grid.filterCellList;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.headerGroupsList.map(function (headerGroup) { return headerGroup.filterCell; }).filter(function (filterCell) { return filterCell; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "summariesRowList", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var res = new QueryList();
            if (!this._summaryRowList) {
                return res;
            }
            /** @type {?} */
            var sumList = this._summaryRowList.filter(function (item) {
                return item.element.nativeElement.parentElement !== null;
            });
            res.reset(sumList);
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowList", {
        /**
         * A list of `IgxGridRowComponent`.
         * ```typescript
         * const rowList = this.grid.rowList;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * A list of `IgxGridRowComponent`.
         * ```typescript
         * const rowList = this.grid.rowList;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            /** @type {?} */
            var res = new QueryList();
            if (!this._rowList) {
                return res;
            }
            /** @type {?} */
            var rList = this._rowList
                .filter(function (item) {
                return item.element.nativeElement.parentElement !== null;
            })
                .sort(function (a, b) {
                return a.index - b.index;
            });
            res.reset(rList);
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "dataRowList", {
        /**
         * A list of `IgxGridRowComponent`, currently rendered.
         * ```typescript
         * const dataList = this.grid.dataRowList;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * A list of `IgxGridRowComponent`, currently rendered.
         * ```typescript
         * const dataList = this.grid.dataRowList;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            /** @type {?} */
            var res = new QueryList();
            if (!this._dataRowList) {
                return res;
            }
            /** @type {?} */
            var rList = this._dataRowList.filter(function (item) {
                return item.element.nativeElement.parentElement !== null;
            }).sort(function (a, b) {
                return a.index - b.index;
            });
            res.reset(rList);
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "toolbarCustomContentTemplate", {
        /**
         * Returns the template which will be used by the toolbar to show custom content.
         * ```typescript
         * let customContentTemplate = this.grid.toolbarCustomContentTemplate;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the template which will be used by the toolbar to show custom content.
         * ```typescript
         * let customContentTemplate = this.grid.toolbarCustomContentTemplate;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.toolbarCustomContentTemplates.first;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "outletDirective", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._outletDirective;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowOutletDirective", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.rowEditingOutletDirective;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "parentRowOutletDirective", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowEditContainer", {
        /** @hidden */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowInEditMode", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            /** @type {?} */
            var editRowState = this.crudService.row;
            return editRowState !== null ? this.rowList.find(function (e) { return e.rowID === editRowState.id; }) : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "firstEditableColumnIndex", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            /** @type {?} */
            var index = tslib_1.__spread(this.pinnedColumns, this.unpinnedColumns).filter(function (e) { return !e.columnGroup; }).findIndex(function (e) { return e.editable; });
            return index !== -1 ? index : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "lastEditableColumnIndex", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            /** @type {?} */
            var orderedColumns = tslib_1.__spread(this.pinnedColumns, this.unpinnedColumns).filter(function (e) { return !e.columnGroup; });
            /** @type {?} */
            var index = orderedColumns.reverse().findIndex(function (e) { return e.editable; });
            return index !== -1 ? orderedColumns.length - 1 - index : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowEditTabs", {
        /**
         * @hidden
         * TODO: Nav service logic doesn't handle 0 results from this querylist
         */
        get: /**
         * @hidden
         * TODO: Nav service logic doesn't handle 0 results from this querylist
         * @return {?}
         */
        function () {
            return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hostClass", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.getComponentDensityClass('igx-grid');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "bannerClass", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var position = this.rowEditPositioningStrategy.isTop ? 'igx-banner__border-top' : 'igx-banner__border-bottom';
            return this.getComponentDensityClass('igx-banner') + " " + position;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "pipeTrigger", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._pipeTrigger;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "summaryPipeTrigger", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._summaryPipeTrigger;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "sortingExpressions", {
        /**
         * Returns the sorting state of the `IgxGridComponent`.
         * ```typescript
         * const sortingState = this.grid.sortingExpressions;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the sorting state of the `IgxGridComponent`.
         * ```typescript
         * const sortingState = this.grid.sortingExpressions;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._sortingExpressions;
        },
        /**
         * Sets the sorting state of the `IgxGridComponent`.
         * ```typescript
         * this.grid.sortingExpressions = [{
         *     fieldName: "ID",
         *     dir: SortingDirection.Desc,
         *     ignoreCase: true
         * }];
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the sorting state of the `IgxGridComponent`.
         * ```typescript
         * this.grid.sortingExpressions = [{
         *     fieldName: "ID",
         *     dir: SortingDirection.Desc,
         *     ignoreCase: true
         * }];
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._sortingExpressions = cloneArray(value);
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "virtualizationState", {
        /**
         * Returns the state of the grid virtualization, including the start index and how many records are rendered.
         * ```typescript
         * const gridVirtState = this.grid1.virtualizationState;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the state of the grid virtualization, including the start index and how many records are rendered.
         * ```typescript
         * const gridVirtState = this.grid1.virtualizationState;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.verticalScrollContainer.state;
        },
        /**
         * @hidden
         */
        set: /**
         * @hidden
         * @param {?} state
         * @return {?}
         */
        function (state) {
            this.verticalScrollContainer.state = state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "totalItemCount", {
        /**
         * Returns the total number of records in the data source.
         * Works only with remote grid virtualization.
         * ```typescript
         * const itemCount = this.grid1.totalItemCount;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the total number of records in the data source.
         * Works only with remote grid virtualization.
         * ```typescript
         * const itemCount = this.grid1.totalItemCount;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.verticalScrollContainer.totalItemCount;
        },
        /**
         * Sets the total number of records in the data source.
         * This property is required for virtualization to function when the grid is bound remotely.
         * ```typescript
         * this.grid1.totalItemCount = 55;
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the total number of records in the data source.
         * This property is required for virtualization to function when the grid is bound remotely.
         * ```typescript
         * this.grid1.totalItemCount = 55;
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} count
         * @return {?}
         */
        function (count) {
            this.verticalScrollContainer.totalItemCount = count;
            this.cdr.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "maxLevelHeaderDepth", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            if (this._maxLevelHeaderDepth === null) {
                this._maxLevelHeaderDepth = this.hasColumnLayouts ?
                    this.columnList.reduce(function (acc, col) { return Math.max(acc, col.rowStart); }, 0) :
                    this.columnList.reduce(function (acc, col) { return Math.max(acc, col.level); }, 0);
            }
            return this._maxLevelHeaderDepth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hiddenColumnsCount", {
        /**
         * Returns the number of hidden `IgxColumnComponent`.
         * ```typescript
         * const hiddenCol = this.grid.hiddenColumnsCount;
         * ``
         */
        get: /**
         * Returns the number of hidden `IgxColumnComponent`.
         * ```typescript
         * const hiddenCol = this.grid.hiddenColumnsCount;
         * ``
         * @return {?}
         */
        function () {
            return this.columnList.filter(function (col) { return col.columnGroup === false && col.hidden === true; }).length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hiddenColumnsText", {
        /**
         * Returns the text to be displayed inside the toggle button
         * for the built-in column hiding UI of the`IgxColumnComponent`.
         * ```typescript
         * const hiddenColText = this.grid.hiddenColumnsText;
         * ``
         */
        get: /**
         * Returns the text to be displayed inside the toggle button
         * for the built-in column hiding UI of the`IgxColumnComponent`.
         * ```typescript
         * const hiddenColText = this.grid.hiddenColumnsText;
         * ``
         * @return {?}
         */
        function () {
            return this._hiddenColumnsText;
        },
        /**
         * Sets the text to be displayed inside the toggle button
         * for the built-in column hiding UI of the`IgxColumnComponent`.
         * ```typescript
         * <igx-grid [columnHiding]="true" [showToolbar]="true" [hiddenColumnsText]="'Hidden Columns'"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the text to be displayed inside the toggle button
         * for the built-in column hiding UI of the`IgxColumnComponent`.
         * ```typescript
         * <igx-grid [columnHiding]="true" [showToolbar]="true" [hiddenColumnsText]="'Hidden Columns'"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hiddenColumnsText = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "pinnedColumnsText", {
        /**
         * Returns the text to be displayed inside the toggle button
         * for the built-in column pinning UI of the`IgxColumnComponent`.
         * ```typescript
         * const pinnedText = this.grid.pinnedColumnsText;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the text to be displayed inside the toggle button
         * for the built-in column pinning UI of the`IgxColumnComponent`.
         * ```typescript
         * const pinnedText = this.grid.pinnedColumnsText;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._pinnedColumnsText;
        },
        /**
         * Sets the text to be displayed inside the toggle button
         * for the built-in column pinning UI of the`IgxColumnComponent`.
         * ```html
         * <igx-grid [pinnedColumnsText]="'PinnedCols Text" [data]="data" [width]="'100%'" [height]="'500px'"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the text to be displayed inside the toggle button
         * for the built-in column pinning UI of the`IgxColumnComponent`.
         * ```html
         * <igx-grid [pinnedColumnsText]="'PinnedCols Text" [data]="data" [width]="'100%'" [height]="'500px'"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._pinnedColumnsText = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "transactions", {
        /**
         * Get transactions service for the grid.
         */
        get: /**
         * Get transactions service for the grid.
         * @return {?}
         */
        function () {
            return this._transactions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "currentRowState", {
        /**
         * @hidden
        */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._currentRowState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "showToolbar", {
        /**
         * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.
         * ```typescript
         * const toolbarGrid = this.grid.showToolbar;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.
         * ```typescript
         * const toolbarGrid = this.grid.showToolbar;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._showToolbar;
        },
        /**
         * Shows or hides the `IgxGridComponent`'s toolbar.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" ></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Shows or hides the `IgxGridComponent`'s toolbar.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" ></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this._showToolbar !== newValue) {
                this._showToolbar = newValue;
                this.cdr.markForCheck();
                if (this._ngAfterViewInitPassed) {
                    this.calculateGridSizes();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "toolbarTitle", {
        /**
         * Returns the toolbar's title.
         * ```typescript
         * const toolbarTitle  = this.grid.toolbarTitle;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the toolbar's title.
         * ```typescript
         * const toolbarTitle  = this.grid.toolbarTitle;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._toolbarTitle;
        },
        /**
         * Sets the toolbar's title.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [toolbarTitle]="'My Grid'"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the toolbar's title.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [toolbarTitle]="'My Grid'"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this._toolbarTitle !== newValue) {
                this._toolbarTitle = newValue;
                this.cdr.markForCheck();
                if (this._ngAfterViewInitPassed) {
                    this.calculateGridSizes();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "exportExcel", {
        /**
         * Returns whether the option for exporting to MS Excel is enabled or disabled.
         * ```typescript
         * cosnt excelExporter = this.grid.exportExcel;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns whether the option for exporting to MS Excel is enabled or disabled.
         * ```typescript
         * cosnt excelExporter = this.grid.exportExcel;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.getExportExcel();
        },
        /**
         * Enable or disable the option for exporting to MS Excel.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [exportExcel]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Enable or disable the option for exporting to MS Excel.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [exportExcel]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this._exportExcel !== newValue) {
                this._exportExcel = newValue;
                this.cdr.markForCheck();
                if (this._ngAfterViewInitPassed) {
                    this.calculateGridSizes();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "exportCsv", {
        /**
         * Returns whether the option for exporting to CSV is enabled or disabled.
         * ```typescript
         * const exportCsv = this.grid.exportCsv;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns whether the option for exporting to CSV is enabled or disabled.
         * ```typescript
         * const exportCsv = this.grid.exportCsv;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.getExportCsv();
        },
        /**
         * Enable or disable the option for exporting to CSV.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [exportCsv]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Enable or disable the option for exporting to CSV.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [exportCsv]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this._exportCsv !== newValue) {
                this._exportCsv = newValue;
                this.cdr.markForCheck();
                if (this._ngAfterViewInitPassed) {
                    this.calculateGridSizes();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "exportText", {
        /**
         * Returns the textual content for the main export button.
         * ```typescript
         * const exportText = this.grid.exportText;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the textual content for the main export button.
         * ```typescript
         * const exportText = this.grid.exportText;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._exportText;
        },
        /**
         * Sets the textual content for the main export button.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [exportText]="'My Exporter'" [exportCsv]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the textual content for the main export button.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [exportText]="'My Exporter'" [exportCsv]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this._exportText !== newValue) {
                this._exportText = newValue;
                this.cdr.markForCheck();
                if (this._ngAfterViewInitPassed) {
                    this.calculateGridSizes();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "exportExcelText", {
        /**
         * Returns the textual content for the MS Excel export button.
         * ```typescript
         * const excelText = this.grid.exportExcelText;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the textual content for the MS Excel export button.
         * ```typescript
         * const excelText = this.grid.exportExcelText;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._exportExcelText;
        },
        /**
         * Sets the textual content for the MS Excel export button.
         * ```html
         * <igx-grid [exportExcelText]="'My Excel Exporter" [showToolbar]="true" [exportText]="'My Exporter'" [exportCsv]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the textual content for the MS Excel export button.
         * ```html
         * <igx-grid [exportExcelText]="'My Excel Exporter" [showToolbar]="true" [exportText]="'My Exporter'" [exportCsv]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this._exportExcelText !== newValue) {
                this._exportExcelText = newValue;
                this.cdr.markForCheck();
                if (this._ngAfterViewInitPassed) {
                    this.calculateGridSizes();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "exportCsvText", {
        /**
         * Returns the textual content for the CSV export button.
         * ```typescript
         * const csvText = this.grid.exportCsvText;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the textual content for the CSV export button.
         * ```typescript
         * const csvText = this.grid.exportCsvText;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._exportCsvText;
        },
        /**
         * Sets the textual content for the CSV export button.
         * ```html
         * <igx-grid [exportCsvText]="'My Csv Exporter" [showToolbar]="true" [exportText]="'My Exporter'" [exportExcel]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the textual content for the CSV export button.
         * ```html
         * <igx-grid [exportCsvText]="'My Csv Exporter" [showToolbar]="true" [exportText]="'My Exporter'" [exportExcel]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this._exportCsvText !== newValue) {
                this._exportCsvText = newValue;
                this.cdr.markForCheck();
                if (this._ngAfterViewInitPassed) {
                    this.calculateGridSizes();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    IgxGridBaseComponent.prototype.verticalScrollHandler = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.verticalScrollContainer.onScroll(event);
        if (isEdge()) {
            this.wheelHandler(false);
        }
        this.disableTransitions = true;
        this.zone.run(function () {
            _this.zone.onStable.pipe(first()).subscribe(function () {
                _this.verticalScrollContainer.onChunkLoad.emit(_this.verticalScrollContainer.state);
            });
            if (_this.rowEditable) {
                _this.changeRowEditingOverlayStateOnScroll(_this.rowInEditMode);
            }
            _this.disableTransitions = false;
        });
        this.hideOverlays();
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    IgxGridBaseComponent.prototype.horizontalScrollHandler = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var scrollLeft = event.target.scrollLeft;
        if (isEdge()) {
            this.wheelHandler(true);
        }
        this.headerContainer.onHScroll(scrollLeft);
        this._horizontalForOfs.forEach(function (vfor) { return vfor.onHScroll(scrollLeft); });
        this.cdr.markForCheck();
        this.zone.run(function () {
            _this.zone.onStable.pipe(first()).subscribe(function () {
                _this.parentVirtDir.onChunkLoad.emit(_this.headerContainer.state);
            });
        });
        this.hideOverlays();
    };
    /**
    * @hidden
    * @internal
    */
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    IgxGridBaseComponent.prototype.hideOverlays = /**
     * @hidden
     * \@internal
     * @return {?}
     */
    function () {
        var _this = this;
        this.overlayIDs.forEach(function (overlayID) {
            _this.overlayService.hide(overlayID);
            _this.overlayService.onClosed.pipe(filter(function (o) { return o.id === overlayID; }), takeUntil(_this.destroy$)).subscribe(function () {
                _this.nativeElement.focus();
            });
        });
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    IgxGridBaseComponent.prototype.keydownHandler = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var key = event.key.toLowerCase();
        if ((isNavigationKey(key) && event.keyCode !== 32) || key === 'tab' || key === 'pagedown' || key === 'pageup') {
            event.preventDefault();
            if (key === 'pagedown') {
                this.verticalScrollContainer.scrollNextPage();
                this.nativeElement.focus();
            }
            else if (key === 'pageup') {
                this.verticalScrollContainer.scrollPrevPage();
                this.nativeElement.focus();
            }
        }
    };
    /**
     * @return {?}
     */
    IgxGridBaseComponent.prototype._setupServices = /**
     * @return {?}
     */
    function () {
        this.gridAPI.grid = this;
        this.crudService.grid = this;
        this.navigation.grid = this;
        this.filteringService.grid = this;
        this.summaryService.grid = this;
    };
    /**
     * @return {?}
     */
    IgxGridBaseComponent.prototype._setupListeners = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var destructor = takeUntil(this.destroy$);
        this.onRowAdded.pipe(destructor).subscribe(function (args) { return _this.refreshGridState(args); });
        this.onRowDeleted.pipe(destructor).subscribe(function (args) {
            _this.summaryService.deleteOperation = true;
            _this.summaryService.clearSummaryCache(args);
        });
        this.transactions.onStateUpdate.pipe(takeUntil(this.destroy$)).subscribe(function () {
            _this.summaryService.clearSummaryCache();
            _this._pipeTrigger++;
            _this.markForCheck();
            if (_this.transactions.getAggregatedChanges(false).length === 0) {
                // Needs better check, calling 'transactions.clear()' will also trigger this
                if (_this.gridAPI.atInexistingPage()) {
                    _this.page--;
                }
            }
        });
        this.onPagingDone.pipe(destructor).subscribe(function () {
            _this.endEdit(true);
            _this.selectionService.clear();
            _this.selectionService.activeElement = null;
        });
        this.onColumnMoving.pipe(destructor).subscribe(function () { return _this.endEdit(true); });
        this.onColumnResized.pipe(destructor).subscribe(function () { return _this.endEdit(true); });
        this.overlayService.onOpened.pipe(takeUntil(this.destroy$)).subscribe(function (event) {
            if (_this.overlayService.getOverlayById(event.id).settings.outlet === _this.outletDirective &&
                _this.overlayIDs.indexOf(event.id) < 0) {
                _this.overlayIDs.push(event.id);
            }
        });
        this.overlayService.onClosed.pipe(takeUntil(this.destroy$)).subscribe(function (event) {
            /** @type {?} */
            var ind = _this.overlayIDs.indexOf(event.id);
            if (ind !== -1) {
                _this.overlayIDs.splice(ind, 1);
            }
        });
    };
    // TODO: Refactor
    /**
     * @hidden
     */
    // TODO: Refactor
    /**
     * @hidden
     * @return {?}
     */
    IgxGridBaseComponent.prototype.ngOnInit = 
    // TODO: Refactor
    /**
     * @hidden
     * @return {?}
     */
    function () {
        this._setupServices();
        this._setupListeners();
        this.columnListDiffer = this.differs.find([]).create(null);
        this.calcWidth = this._width && this._width.indexOf('%') === -1 ? parseInt(this._width, 10) : 0;
        this.shouldGenerate = this.autoGenerate;
        this._scrollWidth = this.getScrollWidth();
    };
    /**
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.setupColumns = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.autoGenerate) {
            this.autogenerateColumns();
        }
        this.initColumns(this.columnList, function (col) { return _this.onColumnInit.emit(col); });
        this.columnListDiffer.diff(this.columnList);
        this.markForCheck();
        this.resetCaches();
        this._derivePossibleHeight();
        this.columnList.changes
            .pipe(takeUntil(this.destroy$))
            .subscribe(function (change) { _this.onColumnsChanged(change); });
    };
    /**
     * @hidden
     * @internal
     */
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    IgxGridBaseComponent.prototype.resetColumnsVisibleIndexCache = /**
     * @hidden
     * \@internal
     * @return {?}
     */
    function () {
        this.columnList.forEach(function (column) { return column.resetVisibleIndex(); });
    };
    /**
     * @hidden
     * @internal
     */
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    IgxGridBaseComponent.prototype.resetForOfCache = /**
     * @hidden
     * \@internal
     * @return {?}
     */
    function () {
        /** @type {?} */
        var firstVirtRow = this.dataRowList.first;
        if (firstVirtRow) {
            firstVirtRow.virtDirRow.assumeMaster();
        }
    };
    /**
     * @hidden
     * @internal
     */
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    IgxGridBaseComponent.prototype.resetColumnCollections = /**
     * @hidden
     * \@internal
     * @return {?}
     */
    function () {
        this._visibleColumns.length = 0;
        this._pinnedVisible.length = 0;
        this._unpinnedVisible.length = 0;
    };
    /**
     * @hidden
     * @internal
     */
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    IgxGridBaseComponent.prototype.resetCachedWidths = /**
     * @hidden
     * \@internal
     * @return {?}
     */
    function () {
        this._unpinnedWidth = NaN;
        this._pinnedWidth = NaN;
        this._totalWidth = NaN;
    };
    /**
     * @hidden
     * @internal
     */
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    IgxGridBaseComponent.prototype.resetCaches = /**
     * @hidden
     * \@internal
     * @return {?}
     */
    function () {
        this.resetForOfCache();
        this.resetColumnsVisibleIndexCache();
        this.resetColumnCollections();
        this.resetCachedWidths();
        this._columnGroups = this.columnList.some(function (col) { return col.columnGroup; });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxGridBaseComponent.prototype.ngAfterContentInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.setupColumns();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxGridBaseComponent.prototype.ngAfterViewInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.document.defaultView.addEventListener('resize', _this.resizeHandler);
            _this._keydownListener = _this.keydownHandler.bind(_this);
            _this.nativeElement.addEventListener('keydown', _this._keydownListener);
        });
        this.initPinning();
        this.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(function () {
            requestAnimationFrame(function () {
                _this.summaryService.summaryHeight = 0;
                _this.reflow();
                _this.verticalScrollContainer.recalcUpdateSizes();
            });
        });
        this._ngAfterViewInitPassed = true;
        this.calculateGridSizes();
        // In some rare cases we get the AfterViewInit before the grid is added to the DOM
        // and as a result we get 0 width and can't size ourselves properly.
        // In order to prevent that add a mutation observer that watches if we have been added.
        if (!this.isAttachedToDom) {
            /** @type {?} */
            var config = { childList: true, subtree: true };
            /** @type {?} */
            var callback = function (mutationsList) {
                /** @type {?} */
                var childListHasChanged = mutationsList.filter(function (mutation) {
                    return mutation.type === 'childList';
                }).length > 0;
                if (childListHasChanged && _this.isAttachedToDom) {
                    _this.reflow();
                    _this._observer.disconnect();
                    _this._observer = null;
                }
            };
            this._observer = new MutationObserver(callback);
            this._observer.observe(this.document.body, config);
        }
        this._dataRowList.changes.pipe(takeUntil(this.destroy$)).subscribe(function (list) {
            return _this._horizontalForOfs = _this.combineForOfCollections(list.toArray()
                .filter(function (item) { return item.element.nativeElement.parentElement !== null; }), _this._summaryRowList);
        });
        this._summaryRowList.changes.pipe(takeUntil(this.destroy$)).subscribe(function (summaryList) {
            return _this._horizontalForOfs - _this.combineForOfCollections(_this._dataRowList, summaryList.toArray()
                .filter(function (item) { return item.element.nativeElement.parentElement !== null; }));
        });
        this.zone.runOutsideAngular(function () {
            _this._vScrollListener = _this.verticalScrollHandler.bind(_this);
            _this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', _this._vScrollListener);
        });
        this.zone.runOutsideAngular(function () {
            _this._hScrollListener = _this.horizontalScrollHandler.bind(_this);
            _this.parentVirtDir.getHorizontalScroll().addEventListener('scroll', _this._hScrollListener);
        });
        this._horizontalForOfs = this.combineForOfCollections(this._dataRowList, this._summaryRowList);
        /** @type {?} */
        var vertScrDC = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;
        vertScrDC.addEventListener('scroll', function (evt) { _this.scrollHandler(evt); });
        vertScrDC.addEventListener('wheel', function () { _this.wheelHandler(); });
        this.verticalScrollContainer.onDataChanged.pipe(takeUntil(this.destroy$)).subscribe(function () {
            requestAnimationFrame(function () {
                if (!_this._destroyed) {
                    _this.reflow();
                }
            });
        });
    };
    /**
     * @private
     * @param {?} dataList
     * @param {?} summaryList
     * @return {?}
     */
    IgxGridBaseComponent.prototype.combineForOfCollections = /**
     * @private
     * @param {?} dataList
     * @param {?} summaryList
     * @return {?}
     */
    function (dataList, summaryList) {
        return dataList.map(function (row) { return row.virtDirRow; }).concat(summaryList.map(function (row) { return row.virtDirRow; }));
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxGridBaseComponent.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.document.defaultView.removeEventListener('resize', _this.resizeHandler);
            _this.nativeElement.removeEventListener('keydown', _this._keydownListener);
            _this.verticalScrollContainer.getVerticalScroll().removeEventListener('scroll', _this._vScrollListener);
            _this.parentVirtDir.getHorizontalScroll().removeEventListener('scroll', _this._hScrollListener);
            /** @type {?} */
            var vertScrDC = _this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;
            vertScrDC.removeEventListener('scroll', function (evt) { _this.scrollHandler(evt); });
            vertScrDC.removeEventListener('wheel', function () { _this.wheelHandler(); });
        });
        if (this._observer) {
            this._observer.disconnect();
        }
        this.destroy$.next(true);
        this.destroy$.complete();
        this._destroyed = true;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxGridBaseComponent.prototype.dataLoading = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onDataPreLoad.emit(event);
    };
    /**
     * Toggles the specified column's visibility.
     * ```typescript
     * this.grid1.toggleColumnVisibility({
     *       column: this.grid1.columns[0],
     *       newValue: true
     * });
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Toggles the specified column's visibility.
     * ```typescript
     * this.grid1.toggleColumnVisibility({
     *       column: this.grid1.columns[0],
     *       newValue: true
     * });
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} args
     * @return {?}
     */
    IgxGridBaseComponent.prototype.toggleColumnVisibility = /**
     * Toggles the specified column's visibility.
     * ```typescript
     * this.grid1.toggleColumnVisibility({
     *       column: this.grid1.columns[0],
     *       newValue: true
     * });
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} args
     * @return {?}
     */
    function (args) {
        /** @type {?} */
        var col = args.column ? this.columnList.find(function (c) { return c === args.column; }) : undefined;
        if (!col) {
            return;
        }
        col.hidden = args.newValue;
        this.onColumnVisibilityChanged.emit(args);
        this.markForCheck();
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "nativeElement", {
        /**
         * Returns the native element of the `IgxGridComponent`.
         * ```typescript
         * const nativeEl = this.grid.nativeElement.
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the native element of the `IgxGridComponent`.
         * ```typescript
         * const nativeEl = this.grid.nativeElement.
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "outlet", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @protected
         * @return {?}
         */
        function () {
            return this.outletDirective;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "defaultRowHeight", {
        /**
         * Returns the `IgxGridComponent`'s rows height.
         * ```typescript
         * const rowHeigh = this.grid.defaultRowHeight;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the `IgxGridComponent`'s rows height.
         * ```typescript
         * const rowHeigh = this.grid.defaultRowHeight;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            switch (this.displayDensity) {
                case DisplayDensity.cosy:
                    return 40;
                case DisplayDensity.compact:
                    return 32;
                default:
                    return 50;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "defaultSummaryHeight", {
        get: /**
         * @return {?}
         */
        function () {
            switch (this.displayDensity) {
                case DisplayDensity.cosy:
                    return 30;
                case DisplayDensity.compact:
                    return 24;
                default:
                    return 36;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "defaultHeaderGroupMinWidth", {
        /**
         * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.
         * Used internally for restricting header group component width.
         * The values below depend on the header cell default right/left padding values.
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.
         * Used internally for restricting header group component width.
         * The values below depend on the header cell default right/left padding values.
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            switch (this.displayDensity) {
                case DisplayDensity.cosy:
                    return 32;
                case DisplayDensity.compact:
                    return 24;
                default:
                    return 48;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "calcPinnedContainerMaxWidth", {
        /**
         * Returns the maximum width of the container for the pinned `IgxColumnComponent`s.
         * The width is 80% of the total grid width.
         * ```typescript
         * const maxPinnedColWidth = this.grid.calcPinnedContainerMaxWidth;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the maximum width of the container for the pinned `IgxColumnComponent`s.
         * The width is 80% of the total grid width.
         * ```typescript
         * const maxPinnedColWidth = this.grid.calcPinnedContainerMaxWidth;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return (this.calcWidth * 80) / 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "unpinnedAreaMinWidth", {
        /**
         * Returns the minimum width of the container for the unpinned `IgxColumnComponent`s.
         * The width is 20% of the total grid width.
         * ```typescript
         * const minUnpinnedColWidth = this.grid.unpinnedAreaMinWidth;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the minimum width of the container for the unpinned `IgxColumnComponent`s.
         * The width is 20% of the total grid width.
         * ```typescript
         * const minUnpinnedColWidth = this.grid.unpinnedAreaMinWidth;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return (this.calcWidth * 20) / 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "pinnedWidth", {
        /**
         * Returns the current width of the container for the pinned `IgxColumnComponent`s.
         * ```typescript
         * const pinnedWidth = this.grid.getPinnedWidth;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the current width of the container for the pinned `IgxColumnComponent`s.
         * ```typescript
         * const pinnedWidth = this.grid.getPinnedWidth;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (!isNaN(this._pinnedWidth)) {
                return this._pinnedWidth;
            }
            this._pinnedWidth = this.getPinnedWidth();
            return this._pinnedWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "unpinnedWidth", {
        /**
         * Returns the current width of the container for the unpinned `IgxColumnComponent`s.
         * ```typescript
         * const unpinnedWidth = this.grid.getUnpinnedWidth;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the current width of the container for the unpinned `IgxColumnComponent`s.
         * ```typescript
         * const unpinnedWidth = this.grid.getUnpinnedWidth;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (!isNaN(this._unpinnedWidth)) {
                return this._unpinnedWidth;
            }
            this._unpinnedWidth = this.getUnpinnedWidth();
            return this._unpinnedWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "featureColumnsWidth", {
        /**
         * @hidden
         * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.
         * TODO: Update for Angular 8. Calling parent class getter using super is not supported for now.
         */
        get: /**
         * @hidden
         * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.
         * TODO: Update for Angular 8. Calling parent class getter using super is not supported for now.
         * @return {?}
         */
        function () {
            return this.getFeatureColumnsWidth();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "summariesMargin", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.rowSelectable || this.rowDraggable ? this.featureColumnsWidth : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "columns", {
        /**
         * Returns an array of `IgxColumnComponent`s.
         * ```typescript
         * const colums = this.grid.columns.
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns an array of `IgxColumnComponent`s.
         * ```typescript
         * const colums = this.grid.columns.
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._columns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "pinnedColumns", {
        /**
         * Returns an array of the pinned `IgxColumnComponent`s.
         * ```typescript
         * const pinnedColumns = this.grid.pinnedColumns.
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns an array of the pinned `IgxColumnComponent`s.
         * ```typescript
         * const pinnedColumns = this.grid.pinnedColumns.
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (this._pinnedVisible.length) {
                return this._pinnedVisible;
            }
            this._pinnedVisible = this._pinnedColumns.filter(function (col) { return !col.hidden; });
            return this._pinnedVisible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "unpinnedColumns", {
        /**
         * Returns an array of unpinned `IgxColumnComponent`s.
         * ```typescript
         * const unpinnedColumns = this.grid.unpinnedColumns.
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns an array of unpinned `IgxColumnComponent`s.
         * ```typescript
         * const unpinnedColumns = this.grid.unpinnedColumns.
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (this._unpinnedVisible.length) {
                return this._unpinnedVisible;
            }
            this._unpinnedVisible = this._unpinnedColumns.filter(function (col) { return !col.hidden; });
            return this._unpinnedVisible;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.
     * @memberof IgxGridBaseComponent
     */
    /**
     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.
     * \@memberof IgxGridBaseComponent
     * @param {?} column
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getHeaderGroupWidth = /**
     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.
     * \@memberof IgxGridBaseComponent
     * @param {?} column
     * @return {?}
     */
    function (column) {
        if (this.hasColumnLayouts) {
            return '';
        }
        /** @type {?} */
        var colWidth = column.width;
        /** @type {?} */
        var minWidth = this.defaultHeaderGroupMinWidth;
        /** @type {?} */
        var isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;
        if (!isPercentageWidth && parseInt(column.width, 10) < minWidth) {
            return minWidth.toString();
        }
        return column.width;
    };
    /**
     * Returns the `IgxColumnComponent` by field name.
     * ```typescript
     * const myCol = this.grid1.getColumnByName("ID");
     * ```
     * @param name
     * @memberof IgxGridBaseComponent
     */
    /**
     * Returns the `IgxColumnComponent` by field name.
     * ```typescript
     * const myCol = this.grid1.getColumnByName("ID");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} name
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getColumnByName = /**
     * Returns the `IgxColumnComponent` by field name.
     * ```typescript
     * const myCol = this.grid1.getColumnByName("ID");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.columnList.find(function (col) { return col.field === name; });
    };
    /**
     * Returns the `IgxColumnComponent` by index.
     * ```typescript
     * const myRow = this.grid1.getRowByIndex(1);
     * ```
     * @param index
     * @memberof IgxGridBaseComponent
     */
    /**
     * Returns the `IgxColumnComponent` by index.
     * ```typescript
     * const myRow = this.grid1.getRowByIndex(1);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} index
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getRowByIndex = /**
     * Returns the `IgxColumnComponent` by index.
     * ```typescript
     * const myRow = this.grid1.getRowByIndex(1);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.gridAPI.get_row_by_index(index);
    };
    /**
     * Returns `IgxGridRowComponent` object by the specified primary key .
     * Requires that the `primaryKey` property is set.
     * ```typescript
     * const myRow = this.grid1.getRowByKey("cell5");
     * ```
     * @param keyValue
     * @memberof IgxGridBaseComponent
     */
    /**
     * Returns `IgxGridRowComponent` object by the specified primary key .
     * Requires that the `primaryKey` property is set.
     * ```typescript
     * const myRow = this.grid1.getRowByKey("cell5");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} keyValue
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getRowByKey = /**
     * Returns `IgxGridRowComponent` object by the specified primary key .
     * Requires that the `primaryKey` property is set.
     * ```typescript
     * const myRow = this.grid1.getRowByKey("cell5");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} keyValue
     * @return {?}
     */
    function (keyValue) {
        return this.gridAPI.get_row_by_key(keyValue);
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "visibleColumns", {
        /**
         * Returns an array of visible `IgxColumnComponent`s.
         * ```typescript
         * const visibleColumns = this.grid.visibleColumns.
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns an array of visible `IgxColumnComponent`s.
         * ```typescript
         * const visibleColumns = this.grid.visibleColumns.
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (this._visibleColumns.length) {
                return this._visibleColumns;
            }
            this._visibleColumns = this.columnList.filter(function (c) { return !c.hidden; });
            return this._visibleColumns;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the `IgxGridCellComponent` that matches the conditions.
     * ```typescript
     * const myCell = this.grid1.getCellByColumn(2,"UnitPrice");
     * ```
     * @param rowIndex
     * @param columnField
     * @memberof IgxGridBaseComponent
     */
    /**
     * Returns the `IgxGridCellComponent` that matches the conditions.
     * ```typescript
     * const myCell = this.grid1.getCellByColumn(2,"UnitPrice");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIndex
     * @param {?} columnField
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getCellByColumn = /**
     * Returns the `IgxGridCellComponent` that matches the conditions.
     * ```typescript
     * const myCell = this.grid1.getCellByColumn(2,"UnitPrice");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIndex
     * @param {?} columnField
     * @return {?}
     */
    function (rowIndex, columnField) {
        /** @type {?} */
        var columnId = this.columnList.map(function (column) { return column.field; }).indexOf(columnField);
        if (columnId !== -1) {
            return this.gridAPI.get_cell_by_index(rowIndex, columnId);
        }
    };
    /**
     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.
     * Requires that the primaryKey property is set.
     * ```typescript
     * grid.getCellByKey(1, 'index');
     * ```
     * @param rowSelector match any rowID
     * @param columnField
     * @memberof IgxGridBaseComponent
     */
    /**
     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.
     * Requires that the primaryKey property is set.
     * ```typescript
     * grid.getCellByKey(1, 'index');
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowSelector match any rowID
     * @param {?} columnField
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getCellByKey = /**
     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.
     * Requires that the primaryKey property is set.
     * ```typescript
     * grid.getCellByKey(1, 'index');
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowSelector match any rowID
     * @param {?} columnField
     * @return {?}
     */
    function (rowSelector, columnField) {
        return this.gridAPI.get_cell_by_key(rowSelector, columnField);
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "totalPages", {
        /**
         * Returns the total number of pages.
         * ```typescript
         * const totalPages = this.grid.totalPages;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the total number of pages.
         * ```typescript
         * const totalPages = this.grid.totalPages;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (this.pagingState) {
                return this.pagingState.metadata.countPages;
            }
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "totalRecords", {
        /**
         * Returns the total number of records.
         * Only functions when paging is enabled.
         * ```typescript
         * const totalRecords = this.grid.totalRecords;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the total number of records.
         * Only functions when paging is enabled.
         * ```typescript
         * const totalRecords = this.grid.totalRecords;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (this.pagingState) {
                return this.pagingState.metadata.countRecords;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "isFirstPage", {
        /**
         * Returns if the current page is the first page.
         * ```typescript
         * const firstPage = this.grid.isFirstPage;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the current page is the first page.
         * ```typescript
         * const firstPage = this.grid.isFirstPage;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.page === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "isLastPage", {
        /**
         * Returns if the current page is the last page.
         * ```typescript
         * const lastPage = this.grid.isLastPage;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the current page is the last page.
         * ```typescript
         * const lastPage = this.grid.isLastPage;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.page + 1 >= this.totalPages;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "totalWidth", {
        /**
         * Returns the total width of the `IgxGridComponent`.
         * ```typescript
         * const gridWidth = this.grid.totalWidth;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the total width of the `IgxGridComponent`.
         * ```typescript
         * const gridWidth = this.grid.totalWidth;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (!isNaN(this._totalWidth)) {
                return this._totalWidth;
            }
            // Take only top level columns
            /** @type {?} */
            var cols = this.visibleColumns.filter(function (col) { return col.level === 0 && !col.pinned; });
            /** @type {?} */
            var totalWidth = 0;
            /** @type {?} */
            var i = 0;
            for (i; i < cols.length; i++) {
                totalWidth += parseInt(cols[i].calcWidth, 10) || 0;
            }
            this._totalWidth = totalWidth;
            return totalWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "showRowCheckboxes", {
        get: /**
         * @return {?}
         */
        function () {
            return this.rowSelectable && this.columns.length > this.hiddenColumnsCount;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} from
     * @param {?} to
     * @param {?} pos
     * @return {?}
     */
    IgxGridBaseComponent.prototype._moveColumns = /**
     * @hidden
     * @protected
     * @param {?} from
     * @param {?} to
     * @param {?} pos
     * @return {?}
     */
    function (from, to, pos) {
        /** @type {?} */
        var list = this.columnList.toArray();
        /** @type {?} */
        var fromIndex = list.indexOf(from);
        /** @type {?} */
        var toIndex = list.indexOf(to);
        if (pos === DropPosition.BeforeDropTarget) {
            toIndex--;
            if (toIndex < 0) {
                toIndex = 0;
            }
        }
        if (pos === DropPosition.AfterDropTarget) {
            toIndex++;
        }
        list.splice.apply(list, tslib_1.__spread([toIndex, 0], list.splice(fromIndex, 1)));
        /** @type {?} */
        var newList = this._resetColumnList(list);
        this.columnList.reset(newList);
        this.columnList.notifyOnChanges();
        this._columns = this.columnList.toArray();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?=} list
     * @return {?}
     */
    IgxGridBaseComponent.prototype._resetColumnList = /**
     * @hidden
     * @protected
     * @param {?=} list
     * @return {?}
     */
    function (list) {
        if (!list) {
            list = this.columnList.toArray();
        }
        /** @type {?} */
        var newList = [];
        list.filter(function (c) { return c.level === 0; }).forEach(function (p) {
            newList.push(p);
            if (p.columnGroup) {
                newList = newList.concat(p.allChildren);
            }
        });
        return newList;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} from
     * @param {?} to
     * @param {?} position
     * @return {?}
     */
    IgxGridBaseComponent.prototype._reorderPinnedColumns = /**
     * @hidden
     * @protected
     * @param {?} from
     * @param {?} to
     * @param {?} position
     * @return {?}
     */
    function (from, to, position) {
        /** @type {?} */
        var pinned = this._pinnedColumns;
        /** @type {?} */
        var dropIndex = pinned.indexOf(to);
        if (to.columnGroup) {
            dropIndex += to.allChildren.length;
        }
        if (position === DropPosition.BeforeDropTarget) {
            dropIndex--;
        }
        if (position === DropPosition.AfterDropTarget) {
            dropIndex++;
        }
        pinned.splice.apply(pinned, tslib_1.__spread([dropIndex, 0], pinned.splice(pinned.indexOf(from), 1)));
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} parent
     * @param {?} from
     * @param {?} to
     * @param {?} pos
     * @return {?}
     */
    IgxGridBaseComponent.prototype._moveChildColumns = /**
     * @hidden
     * @protected
     * @param {?} parent
     * @param {?} from
     * @param {?} to
     * @param {?} pos
     * @return {?}
     */
    function (parent, from, to, pos) {
        /** @type {?} */
        var buffer = parent.children.toArray();
        /** @type {?} */
        var fromIndex = buffer.indexOf(from);
        /** @type {?} */
        var toIndex = buffer.indexOf(to);
        if (pos === DropPosition.BeforeDropTarget) {
            toIndex--;
        }
        if (pos === DropPosition.AfterDropTarget) {
            toIndex++;
        }
        buffer.splice.apply(buffer, tslib_1.__spread([toIndex, 0], buffer.splice(fromIndex, 1)));
        parent.children.reset(buffer);
    };
    /**
     * Moves a column to the specified drop target.
     * ```typescript
     * grid.moveColumn(compName, persDetails);
     * ```
      * @memberof IgxGridBaseComponent
      */
    /**
     * Moves a column to the specified drop target.
     * ```typescript
     * grid.moveColumn(compName, persDetails);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} column
     * @param {?} dropTarget
     * @param {?=} pos
     * @return {?}
     */
    IgxGridBaseComponent.prototype.moveColumn = /**
     * Moves a column to the specified drop target.
     * ```typescript
     * grid.moveColumn(compName, persDetails);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} column
     * @param {?} dropTarget
     * @param {?=} pos
     * @return {?}
     */
    function (column, dropTarget, pos) {
        if (pos === void 0) { pos = DropPosition.None; }
        /** @type {?} */
        var position = pos;
        /** @type {?} */
        var fromIndex = column.visibleIndex;
        /** @type {?} */
        var toIndex = dropTarget.visibleIndex;
        if (pos === DropPosition.BeforeDropTarget && fromIndex < toIndex) {
            position = DropPosition.BeforeDropTarget;
        }
        else if (pos === DropPosition.AfterDropTarget && fromIndex > toIndex) {
            position = DropPosition.AfterDropTarget;
        }
        else {
            position = DropPosition.None;
        }
        if ((column.level !== dropTarget.level) ||
            (column.topLevelParent !== dropTarget.topLevelParent)) {
            return;
        }
        this.endEdit(true);
        if (column.level) {
            this._moveChildColumns(column.parent, column, dropTarget, position);
        }
        if (dropTarget.pinned && column.pinned) {
            this._reorderPinnedColumns(column, dropTarget, position);
        }
        if (dropTarget.pinned && !column.pinned) {
            column.pin();
            this._reorderPinnedColumns(column, dropTarget, position);
        }
        if (!dropTarget.pinned && column.pinned) {
            column.unpin();
            /** @type {?} */
            var list = this.columnList.toArray();
            /** @type {?} */
            var fi = list.indexOf(column);
            /** @type {?} */
            var ti = list.indexOf(dropTarget);
            if (pos === DropPosition.BeforeDropTarget && fi < ti) {
                position = DropPosition.BeforeDropTarget;
            }
            else if (pos === DropPosition.AfterDropTarget && fi > ti) {
                position = DropPosition.AfterDropTarget;
            }
            else {
                position = DropPosition.None;
            }
        }
        this._moveColumns(column, dropTarget, position);
        this.cdr.detectChanges();
        /** @type {?} */
        var args = {
            source: column,
            target: dropTarget
        };
        this.onColumnMovingEnd.emit(args);
    };
    /**
     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.
     * ```typescript
     * this.grid1.nextPage();
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.
     * ```typescript
     * this.grid1.nextPage();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    IgxGridBaseComponent.prototype.nextPage = /**
     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.
     * ```typescript
     * this.grid1.nextPage();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    function () {
        if (!this.isLastPage) {
            this.page += 1;
        }
    };
    /**
     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.
     * ```typescript
     * this.grid1.previousPage();
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.
     * ```typescript
     * this.grid1.previousPage();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    IgxGridBaseComponent.prototype.previousPage = /**
     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.
     * ```typescript
     * this.grid1.previousPage();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    function () {
        if (!this.isFirstPage) {
            this.page -= 1;
        }
    };
    /**
     * Goes to the desired page index.
     * ```typescript
     * this.grid1.paginate(1);
     * ```
     * @param val
     * @memberof IgxGridBaseComponent
     */
    /**
     * Goes to the desired page index.
     * ```typescript
     * this.grid1.paginate(1);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} val
     * @return {?}
     */
    IgxGridBaseComponent.prototype.paginate = /**
     * Goes to the desired page index.
     * ```typescript
     * this.grid1.paginate(1);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val < 0 || val > this.totalPages - 1) {
            return;
        }
        this.page = val;
    };
    /**
     * Manually marks the `IgxGridComponent` for change detection.
     * ```typescript
     * this.grid1.markForCheck();
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Manually marks the `IgxGridComponent` for change detection.
     * ```typescript
     * this.grid1.markForCheck();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    IgxGridBaseComponent.prototype.markForCheck = /**
     * Manually marks the `IgxGridComponent` for change detection.
     * ```typescript
     * this.grid1.markForCheck();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    function () {
        this.cdr.detectChanges();
    };
    /**
     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.
     * ```typescript
     * const record = {
     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,
     *     Name: this.newRecord
     * };
     * this.grid1.addRow(record);
     * ```
     * @param data
     * @memberof IgxGridBaseComponent
     */
    /**
     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.
     * ```typescript
     * const record = {
     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,
     *     Name: this.newRecord
     * };
     * this.grid1.addRow(record);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} data
     * @return {?}
     */
    IgxGridBaseComponent.prototype.addRow = /**
     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.
     * ```typescript
     * const record = {
     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,
     *     Name: this.newRecord
     * };
     * this.grid1.addRow(record);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.gridAPI.addRowToData(data);
        this.onRowAdded.emit({ data: data });
        this._pipeTrigger++;
        this.cdr.markForCheck();
    };
    /**
     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.
     * Requires that the `primaryKey` property is set.
     * The method accept rowSelector as a parameter, which is the rowID.
     * ```typescript
     * this.grid1.deleteRow(0);
     * ```
     * @param rowSelector
     * @memberof IgxGridBaseComponent
     */
    /**
     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.
     * Requires that the `primaryKey` property is set.
     * The method accept rowSelector as a parameter, which is the rowID.
     * ```typescript
     * this.grid1.deleteRow(0);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowSelector
     * @return {?}
     */
    IgxGridBaseComponent.prototype.deleteRow = /**
     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.
     * Requires that the `primaryKey` property is set.
     * The method accept rowSelector as a parameter, which is the rowID.
     * ```typescript
     * this.grid1.deleteRow(0);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowSelector
     * @return {?}
     */
    function (rowSelector) {
        if (this.primaryKey !== undefined && this.primaryKey !== null) {
            this.deleteRowById(rowSelector);
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} rowId
     * @return {?}
     */
    IgxGridBaseComponent.prototype.deleteRowById = /**
     * @hidden
     * @param {?} rowId
     * @return {?}
     */
    function (rowId) {
        this.gridAPI.deleteRowById(rowId);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    IgxGridBaseComponent.prototype.deleteRowFromData = /**
     * @hidden
     * @protected
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    function (rowID, index) {
        //  if there is a row (index !== 0) delete it
        //  if there is a row in ADD or UPDATE state change it's state to DELETE
        if (index !== -1) {
            if (this.transactions.enabled) {
                /** @type {?} */
                var transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };
                this.transactions.add(transaction, this.data[index]);
            }
            else {
                this.data.splice(index, 1);
            }
        }
        else {
            /** @type {?} */
            var state = this.transactions.getState(rowID);
            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);
        }
    };
    /**
     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.
     * Requires that the `primaryKey` property is set.
     * ```typescript
     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');
     * ```
     * @param value the new value which is to be set.
     * @param rowSelector corresponds to rowID.
     * @param column corresponds to column field.
     * @memberof IgxGridBaseComponent
     */
    /**
     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.
     * Requires that the `primaryKey` property is set.
     * ```typescript
     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value the new value which is to be set.
     * @param {?} rowSelector corresponds to rowID.
     * @param {?} column corresponds to column field.
     * @return {?}
     */
    IgxGridBaseComponent.prototype.updateCell = /**
     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.
     * Requires that the `primaryKey` property is set.
     * ```typescript
     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value the new value which is to be set.
     * @param {?} rowSelector corresponds to rowID.
     * @param {?} column corresponds to column field.
     * @return {?}
     */
    function (value, rowSelector, column) {
        if (this.isDefined(this.primaryKey)) {
            /** @type {?} */
            var col = this.columnList.toArray().find(function (c) { return c.field === column; });
            if (col) {
                // Simplify
                /** @type {?} */
                var rowData = this.gridAPI.getRowData(rowSelector);
                /** @type {?} */
                var index = this.gridAPI.get_row_index_in_data(rowSelector);
                // If row passed is invalid
                if (index < 0) {
                    return;
                }
                /** @type {?} */
                var id = {
                    rowID: rowSelector,
                    columnID: col.index,
                    rowIndex: index
                };
                /** @type {?} */
                var cell = new IgxCell(id, index, col, rowData[col.field], rowData[col.field], rowData);
                /** @type {?} */
                var args = this.gridAPI.update_cell(cell, value);
                if (this.crudService.cell && this.crudService.sameCell(cell)) {
                    if (args.cancel) {
                        return;
                    }
                    this.gridAPI.escape_editMode();
                }
                this.cdr.markForCheck();
            }
        }
    };
    /**
     * Updates the `IgxGridRowComponent`, which is specified by
     * rowSelector parameter and the data source record with the passed value.
     * This method will apply requested update only if primary key is specified in the grid.
     * ```typescript
     * grid.updateRow({
     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')
     *   }, 1);
     * ```
     * @param value
     * @param rowSelector correspond to rowID
     * @memberof IgxGridBaseComponent
     */
    /**
     * Updates the `IgxGridRowComponent`, which is specified by
     * rowSelector parameter and the data source record with the passed value.
     * This method will apply requested update only if primary key is specified in the grid.
     * ```typescript
     * grid.updateRow({
     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')
     *   }, 1);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @param {?} rowSelector correspond to rowID
     * @return {?}
     */
    IgxGridBaseComponent.prototype.updateRow = /**
     * Updates the `IgxGridRowComponent`, which is specified by
     * rowSelector parameter and the data source record with the passed value.
     * This method will apply requested update only if primary key is specified in the grid.
     * ```typescript
     * grid.updateRow({
     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')
     *   }, 1);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @param {?} rowSelector correspond to rowID
     * @return {?}
     */
    function (value, rowSelector) {
        if (this.isDefined(this.primaryKey)) {
            /** @type {?} */
            var editableCell = this.crudService.cell;
            if (editableCell && editableCell.id.rowID === rowSelector) {
                this.gridAPI.escape_editMode();
            }
            /** @type {?} */
            var row = new IgxRow(rowSelector, -1, this.gridAPI.getRowData(rowSelector));
            this.gridAPI.update_row(row, value);
            this.cdr.markForCheck();
        }
    };
    /**
     * Sort a single `IgxColumnComponent`.
     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.
     * ```typescript
     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Sort a single `IgxColumnComponent`.
     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.
     * ```typescript
     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} expression
     * @return {?}
     */
    IgxGridBaseComponent.prototype.sort = /**
     * Sort a single `IgxColumnComponent`.
     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.
     * ```typescript
     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} expression
     * @return {?}
     */
    function (expression) {
        this.endEdit(false);
        if (expression instanceof Array) {
            this.gridAPI.sort_multiple(expression);
        }
        else {
            this.gridAPI.sort(expression);
        }
        this.onSortingDone.emit(expression);
    };
    /**
     * Filters a single `IgxColumnComponent`.
     * ```typescript
     * public filter(term) {
     *      this.grid.filter("ProductName", term, IgxStringFilteringOperand.instance().condition("contains"));
     * }
     * ```
     * @param name
     * @param value
     * @param conditionOrExpressionTree
     * @param ignoreCase
     * @memberof IgxGridBaseComponent
     */
    /**
     * Filters a single `IgxColumnComponent`.
     * ```typescript
     * public filter(term) {
     *      this.grid.filter("ProductName", term, IgxStringFilteringOperand.instance().condition("contains"));
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} name
     * @param {?} value
     * @param {?=} conditionOrExpressionTree
     * @param {?=} ignoreCase
     * @return {?}
     */
    IgxGridBaseComponent.prototype.filter = /**
     * Filters a single `IgxColumnComponent`.
     * ```typescript
     * public filter(term) {
     *      this.grid.filter("ProductName", term, IgxStringFilteringOperand.instance().condition("contains"));
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} name
     * @param {?} value
     * @param {?=} conditionOrExpressionTree
     * @param {?=} ignoreCase
     * @return {?}
     */
    function (name, value, conditionOrExpressionTree, ignoreCase) {
        this.filteringService.filter(name, value, conditionOrExpressionTree, ignoreCase);
    };
    /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     * ```typescript
     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));
     * ```
     * @param value
     * @param condition
     * @param ignoreCase
     * @memberof IgxGridBaseComponent
     */
    /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     * ```typescript
     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @param {?=} condition
     * @param {?=} ignoreCase
     * @return {?}
     */
    IgxGridBaseComponent.prototype.filterGlobal = /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     * ```typescript
     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @param {?=} condition
     * @param {?=} ignoreCase
     * @return {?}
     */
    function (value, condition, ignoreCase) {
        this.filteringService.filterGlobal(value, condition, ignoreCase);
    };
    /**
     * Enables summaries for the specified column and applies your customSummary.
     * If you do not provide the customSummary, then the default summary for the column data type will be applied.
     * ```typescript
     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);
     * ```
     * Enable summaries for the listed columns.
     * ```typescript
     * grid.enableSummaries('ProductName');
     * ```
     * @param rest
     * @memberof IgxGridBaseComponent
     */
    /**
     * Enables summaries for the specified column and applies your customSummary.
     * If you do not provide the customSummary, then the default summary for the column data type will be applied.
     * ```typescript
     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);
     * ```
     * Enable summaries for the listed columns.
     * ```typescript
     * grid.enableSummaries('ProductName');
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {...?} rest
     * @return {?}
     */
    IgxGridBaseComponent.prototype.enableSummaries = /**
     * Enables summaries for the specified column and applies your customSummary.
     * If you do not provide the customSummary, then the default summary for the column data type will be applied.
     * ```typescript
     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);
     * ```
     * Enable summaries for the listed columns.
     * ```typescript
     * grid.enableSummaries('ProductName');
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {...?} rest
     * @return {?}
     */
    function () {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        if (rest.length === 1 && Array.isArray(rest[0])) {
            this._multipleSummaries(rest[0], true);
        }
        else {
            this._summaries(rest[0], true, rest[1]);
        }
        this.calculateGridHeight();
        this.cdr.detectChanges();
    };
    /**
     * Disable summaries for the specified column.
     * ```typescript
     * grid.disableSummaries('ProductName');
     * ```
     *
     * Disable summaries for the listed columns.
     * ```typescript
     * grid.disableSummaries([{ fieldName: 'ProductName' }]);
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Disable summaries for the specified column.
     * ```typescript
     * grid.disableSummaries('ProductName');
     * ```
     *
     * Disable summaries for the listed columns.
     * ```typescript
     * grid.disableSummaries([{ fieldName: 'ProductName' }]);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {...?} rest
     * @return {?}
     */
    IgxGridBaseComponent.prototype.disableSummaries = /**
     * Disable summaries for the specified column.
     * ```typescript
     * grid.disableSummaries('ProductName');
     * ```
     *
     * Disable summaries for the listed columns.
     * ```typescript
     * grid.disableSummaries([{ fieldName: 'ProductName' }]);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {...?} rest
     * @return {?}
     */
    function () {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        if (rest.length === 1 && Array.isArray(rest[0])) {
            this._disableMultipleSummaries(rest[0]);
        }
        else {
            this._summaries(rest[0], false);
        }
    };
    /**
     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,
     * otherwise clears the filtering state of all `IgxColumnComponent`s.
     * ```typescript
     * this.grid.clearFilter();
     * ```
     * @param name
     * @memberof IgxGridBaseComponent
     */
    /**
     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,
     * otherwise clears the filtering state of all `IgxColumnComponent`s.
     * ```typescript
     * this.grid.clearFilter();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} name
     * @return {?}
     */
    IgxGridBaseComponent.prototype.clearFilter = /**
     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,
     * otherwise clears the filtering state of all `IgxColumnComponent`s.
     * ```typescript
     * this.grid.clearFilter();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} name
     * @return {?}
     */
    function (name) {
        this.filteringService.clearFilter(name);
    };
    /**
     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,
     * otherwise clears the sorting state of all `IgxColumnComponent`.
     * ```typescript
     * this.grid.clearSort();
     * ```
     * @param name
     * @memberof IgxGridBaseComponent
     */
    /**
     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,
     * otherwise clears the sorting state of all `IgxColumnComponent`.
     * ```typescript
     * this.grid.clearSort();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} name
     * @return {?}
     */
    IgxGridBaseComponent.prototype.clearSort = /**
     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,
     * otherwise clears the sorting state of all `IgxColumnComponent`.
     * ```typescript
     * this.grid.clearSort();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} name
     * @return {?}
     */
    function (name) {
        if (!name) {
            this.sortingExpressions = [];
            return;
        }
        if (!this.gridAPI.get_column_by_name(name)) {
            return;
        }
        this.gridAPI.clear_sort(name);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?=} args
     * @return {?}
     */
    IgxGridBaseComponent.prototype.clearSummaryCache = /**
     * @hidden
     * @param {?=} args
     * @return {?}
     */
    function (args) {
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?=} args
     * @return {?}
     */
    IgxGridBaseComponent.prototype.refreshGridState = /**
     * @hidden
     * @param {?=} args
     * @return {?}
     */
    function (args) {
        this.endEdit(true);
        this.summaryService.clearSummaryCache(args);
    };
    // TODO: We have return values here. Move them to event args ??
    /**
     * Pins a column by field name. Returns whether the operation is successful.
     * ```typescript
     * this.grid.pinColumn("ID");
     * ```
     * @param columnName
     * @param index
     * @memberof IgxGridBaseComponent
     */
    // TODO: We have return values here. Move them to event args ??
    /**
     * Pins a column by field name. Returns whether the operation is successful.
     * ```typescript
     * this.grid.pinColumn("ID");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} columnName
     * @param {?=} index
     * @return {?}
     */
    IgxGridBaseComponent.prototype.pinColumn = 
    // TODO: We have return values here. Move them to event args ??
    /**
     * Pins a column by field name. Returns whether the operation is successful.
     * ```typescript
     * this.grid.pinColumn("ID");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} columnName
     * @param {?=} index
     * @return {?}
     */
    function (columnName, index) {
        /** @type {?} */
        var col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);
        return col.pin(index);
    };
    /**
     * Unpins a column by field name. Returns whether the operation is successful.
     * ```typescript
     * this.grid.pinColumn("ID");
     * ```
     * @param columnName
     * @param index
     * @memberof IgxGridBaseComponent
     */
    /**
     * Unpins a column by field name. Returns whether the operation is successful.
     * ```typescript
     * this.grid.pinColumn("ID");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} columnName
     * @param {?=} index
     * @return {?}
     */
    IgxGridBaseComponent.prototype.unpinColumn = /**
     * Unpins a column by field name. Returns whether the operation is successful.
     * ```typescript
     * this.grid.pinColumn("ID");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} columnName
     * @param {?=} index
     * @return {?}
     */
    function (columnName, index) {
        /** @type {?} */
        var col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);
        return col.unpin(index);
    };
    /**
     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.
     * ```typescript
     * this.grid.reflow();
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.
     * ```typescript
     * this.grid.reflow();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    IgxGridBaseComponent.prototype.reflow = /**
     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.
     * ```typescript
     * this.grid.reflow();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    function () {
        this.calculateGridSizes();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxGridBaseComponent.prototype.recalculateSummaries = /**
     * @hidden
     * @return {?}
     */
    function () {
    };
    /**
     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.
     * Returns how many times the grid contains the string.
     * ```typescript
     * this.grid.findNext("financial");
     * ```
     * @param text the string to search.
     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).
     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).
     * @memberof IgxGridBaseComponent
     */
    /**
     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.
     * Returns how many times the grid contains the string.
     * ```typescript
     * this.grid.findNext("financial");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} text the string to search.
     * @param {?=} caseSensitive optionally, if the search should be case sensitive (defaults to false).
     * @param {?=} exactMatch optionally, if the text should match the entire value  (defaults to false).
     * @return {?}
     */
    IgxGridBaseComponent.prototype.findNext = /**
     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.
     * Returns how many times the grid contains the string.
     * ```typescript
     * this.grid.findNext("financial");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} text the string to search.
     * @param {?=} caseSensitive optionally, if the search should be case sensitive (defaults to false).
     * @param {?=} exactMatch optionally, if the text should match the entire value  (defaults to false).
     * @return {?}
     */
    function (text, caseSensitive, exactMatch) {
        return this.find(text, 1, caseSensitive, exactMatch);
    };
    /**
     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.
     * Returns how many times the grid contains the string.
     * ```typescript
     * this.grid.findPrev("financial");
     * ````
     * @param text the string to search.
     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).
     * @param exactMatch optionally, if the text should match the entire value (defaults to false).
     * @memberof IgxGridBaseComponent
     */
    /**
     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.
     * Returns how many times the grid contains the string.
     * ```typescript
     * this.grid.findPrev("financial");
     * ````
     * \@memberof IgxGridBaseComponent
     * @param {?} text the string to search.
     * @param {?=} caseSensitive optionally, if the search should be case sensitive (defaults to false).
     * @param {?=} exactMatch optionally, if the text should match the entire value (defaults to false).
     * @return {?}
     */
    IgxGridBaseComponent.prototype.findPrev = /**
     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.
     * Returns how many times the grid contains the string.
     * ```typescript
     * this.grid.findPrev("financial");
     * ````
     * \@memberof IgxGridBaseComponent
     * @param {?} text the string to search.
     * @param {?=} caseSensitive optionally, if the search should be case sensitive (defaults to false).
     * @param {?=} exactMatch optionally, if the text should match the entire value (defaults to false).
     * @return {?}
     */
    function (text, caseSensitive, exactMatch) {
        return this.find(text, -1, caseSensitive, exactMatch);
    };
    /**
     * Reapplies the existing search.
     * Returns how many times the grid contains the last search.
     * ```typescript
     * this.grid.refreshSearch();
     * ```
     * @param updateActiveInfo
     * @memberof IgxGridBaseComponent
     */
    /**
     * Reapplies the existing search.
     * Returns how many times the grid contains the last search.
     * ```typescript
     * this.grid.refreshSearch();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} updateActiveInfo
     * @return {?}
     */
    IgxGridBaseComponent.prototype.refreshSearch = /**
     * Reapplies the existing search.
     * Returns how many times the grid contains the last search.
     * ```typescript
     * this.grid.refreshSearch();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} updateActiveInfo
     * @return {?}
     */
    function (updateActiveInfo) {
        var _this = this;
        if (this.lastSearchInfo.searchText) {
            this.rebuildMatchCache();
            if (updateActiveInfo) {
                /** @type {?} */
                var activeInfo_1 = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);
                this.lastSearchInfo.matchInfoCache.forEach(function (match, i) {
                    if (match.column === activeInfo_1.column &&
                        match.row === activeInfo_1.row &&
                        match.index === activeInfo_1.index) {
                        _this.lastSearchInfo.activeMatchIndex = i;
                    }
                });
            }
            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);
        }
        else {
            return 0;
        }
    };
    /**
     * Removes all the highlights in the cell.
     * ```typescript
     * this.grid.clearSearch();
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Removes all the highlights in the cell.
     * ```typescript
     * this.grid.clearSearch();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    IgxGridBaseComponent.prototype.clearSearch = /**
     * Removes all the highlights in the cell.
     * ```typescript
     * this.grid.clearSearch();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    function () {
        this.lastSearchInfo = {
            searchText: '',
            caseSensitive: false,
            exactMatch: false,
            activeMatchIndex: 0,
            matchInfoCache: []
        };
        this.rowList.forEach(function (row) {
            if (row.cells) {
                row.cells.forEach(function (c) {
                    c.clearHighlight();
                });
            }
        });
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "hasSortableColumns", {
        /**
         * Returns if the `IgxGridComponent` has sortable columns.
         * ```typescript
         * const sortableGrid = this.grid.hasSortableColumns;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the `IgxGridComponent` has sortable columns.
         * ```typescript
         * const sortableGrid = this.grid.hasSortableColumns;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.columnList.some(function (col) { return col.sortable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hasEditableColumns", {
        /**
         * Returns if the `IgxGridComponent` has editable columns.
         * ```typescript
         * const editableGrid = this.grid.hasEditableColumns;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the `IgxGridComponent` has editable columns.
         * ```typescript
         * const editableGrid = this.grid.hasEditableColumns;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.columnList.some(function (col) { return col.editable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hasFilterableColumns", {
        /**
         * Returns if the `IgxGridComponent` has fiterable columns.
         * ```typescript
         * const filterableGrid = this.grid.hasFilterableColumns;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the `IgxGridComponent` has fiterable columns.
         * ```typescript
         * const filterableGrid = this.grid.hasFilterableColumns;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.columnList.some(function (col) { return col.filterable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hasSummarizedColumns", {
        /**
         * Returns if the `IgxGridComponent` has summarized columns.
         * ```typescript
         * const summarizedGrid = this.grid.hasSummarizedColumns;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the `IgxGridComponent` has summarized columns.
         * ```typescript
         * const summarizedGrid = this.grid.hasSummarizedColumns;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.summaryService.hasSummarizedColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rootSummariesEnabled", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.summaryCalculationMode !== GridSummaryCalculationMode.childLevelsOnly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hasMovableColumns", {
        /**
         * Returns if the `IgxGridComponent` has moveable columns.
         * ```typescript
         * const movableGrid = this.grid.hasMovableColumns;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the `IgxGridComponent` has moveable columns.
         * ```typescript
         * const movableGrid = this.grid.hasMovableColumns;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.columnList && this.columnList.some(function (col) { return col.movable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hasColumnGroups", {
        /**
         * Returns if the `IgxGridComponent` has column groups.
         * ```typescript
         * const groupGrid = this.grid.hasColumnGroups;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the `IgxGridComponent` has column groups.
         * ```typescript
         * const groupGrid = this.grid.hasColumnGroups;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._columnGroups;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hasColumnLayouts", {
        /**
         * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.
         * ```typescript
         * const layoutGrid = this.grid.hasColumnLayouts;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.
         * ```typescript
         * const layoutGrid = this.grid.hasColumnLayouts;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return !!this.columnList.some(function (col) { return col.columnLayout; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "selectedCells", {
        /**
         * Returns an array of the selected `IgxGridCellComponent`s.
         * ```typescript
         * const selectedCells = this.grid.selectedCells;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns an array of the selected `IgxGridCellComponent`s.
         * ```typescript
         * const selectedCells = this.grid.selectedCells;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (this.dataRowList) {
                return this.dataRowList.map(function (row) { return row.cells.filter(function (cell) { return cell.selected; }); })
                    .reduce(function (a, b) { return a.concat(b); }, []);
            }
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "multiRowLayoutRowSize", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._multiRowLayoutRowSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowBasedHeight", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @protected
         * @return {?}
         */
        function () {
            return this.dataLength * this.rowHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "isPercentWidth", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @protected
         * @return {?}
         */
        function () {
            return this._width && this._width.indexOf('%') !== -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "isPercentHeight", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @protected
         * @return {?}
         */
        function () {
            return this._height && this._height.indexOf('%') !== -1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Sets this._height
     */
    /**
     * @hidden
     * Sets this._height
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype._derivePossibleHeight = /**
     * @hidden
     * Sets this._height
     * @protected
     * @return {?}
     */
    function () {
        if (!this.isPercentHeight || !this._height || !this.isAttachedToDom || this.rowBasedHeight === 0) {
            return;
        }
        if (!this.nativeElement.parentNode || !this.nativeElement.parentNode.clientHeight) {
            /** @type {?} */
            var viewPortHeight = document.documentElement.clientHeight;
            this._height = this.rowBasedHeight <= viewPortHeight ? null : viewPortHeight.toString();
        }
        else {
            /** @type {?} */
            var parentHeight = this.nativeElement.parentNode.getBoundingClientRect().height;
            this._height = this.rowBasedHeight <= parentHeight ? null : this._height;
        }
    };
    /**
     * @hidden
     * Sets columns defaultWidth property
     */
    /**
     * @hidden
     * Sets columns defaultWidth property
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype._derivePossibleWidth = /**
     * @hidden
     * Sets columns defaultWidth property
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.columnWidthSetByUser) {
            this._columnWidth = this.getPossibleColumnWidth();
            this.columnList.forEach(function (column) {
                if (_this.hasColumnLayouts && parseInt(_this._columnWidth, 10)) {
                    /** @type {?} */
                    var columnWidthCombined = parseInt(_this._columnWidth, 10) * (column.colEnd ? column.colEnd - column.colStart : 1);
                    column.defaultWidth = columnWidthCombined + 'px';
                }
                else {
                    column.defaultWidth = _this._columnWidth;
                }
            });
            this.resetCachedWidths();
        }
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "defaultTargetBodyHeight", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @protected
         * @return {?}
         */
        function () {
            /** @type {?} */
            var allItems = this.totalItemCount || this.dataLength;
            return this.rowHeight * Math.min(this._defaultTargetRecordNumber, this.paging ? Math.min(allItems, this.perPage) : allItems);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Sets TBODY height i.e. this.calcHeight
     */
    /**
     * @hidden
     * Sets TBODY height i.e. this.calcHeight
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.calculateGridHeight = /**
     * @hidden
     * Sets TBODY height i.e. this.calcHeight
     * @protected
     * @return {?}
     */
    function () {
        this._derivePossibleHeight();
        // TODO: Calculate based on grid density
        if (this.maxLevelHeaderDepth) {
            this.theadRow.nativeElement.style.height = (this.maxLevelHeaderDepth + 1) * this.defaultRowHeight +
                (this.allowFiltering && this.filterMode === FilterMode.quickFilter ? FILTER_ROW_HEIGHT : 0) + 1 + "px";
        }
        this.summariesHeight = 0;
        if (!this._height) {
            this.calcHeight = null;
            if (this.hasSummarizedColumns && this.rootSummariesEnabled) {
                this.summariesHeight = this.summaryService.calcMaxSummaryHeight();
            }
            return;
        }
        if (this.hasSummarizedColumns && this.rootSummariesEnabled) {
            this.summariesHeight = this.summaryService.calcMaxSummaryHeight();
        }
        this.calcHeight = this._calculateGridBodyHeight();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getGroupAreaHeight = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        return 0;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getToolbarHeight = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var toolbarHeight = 0;
        if (this.showToolbar && this.toolbarHtml != null) {
            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?
                this.toolbarHtml.nativeElement.offsetHeight : 0;
        }
        return toolbarHeight;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getPagingHeight = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var pagingHeight = 0;
        if (this.paging && this.paginator) {
            pagingHeight = this.paginator.nativeElement.firstElementChild ?
                this.paginator.nativeElement.offsetHeight : 0;
        }
        return pagingHeight;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype._calculateGridBodyHeight = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var footerBordersAndScrollbars = this.tfoot.nativeElement.offsetHeight -
            this.tfoot.nativeElement.clientHeight;
        /** @type {?} */
        var computed = this.document.defaultView.getComputedStyle(this.nativeElement);
        /** @type {?} */
        var toolbarHeight = this.getToolbarHeight();
        /** @type {?} */
        var pagingHeight = this.getPagingHeight();
        /** @type {?} */
        var groupAreaHeight = this.getGroupAreaHeight();
        /** @type {?} */
        var gridHeight;
        if (this.isPercentHeight) {
            /*height in %*/
            if (computed.getPropertyValue('height').indexOf('%') === -1) {
                gridHeight = parseInt(computed.getPropertyValue('height'), 10);
            }
            else {
                return this.defaultTargetBodyHeight;
            }
        }
        else {
            gridHeight = parseInt(this._height, 10);
        }
        /** @type {?} */
        var height = Math.abs(gridHeight - toolbarHeight -
            this.theadRow.nativeElement.offsetHeight -
            this.summariesHeight - pagingHeight -
            groupAreaHeight - footerBordersAndScrollbars -
            this.scr.nativeElement.clientHeight);
        if (height === 0 || isNaN(gridHeight)) {
            /** @type {?} */
            var bodyHeight = this.defaultTargetBodyHeight;
            return bodyHeight > 0 ? bodyHeight : null;
        }
        return height;
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "outerWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this.hasVerticalSroll() ? this.calcWidth + this.scrollWidth : this.calcWidth;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Gets the visible content height that includes header + tbody + footer.
     */
    /**
     * @hidden
     * Gets the visible content height that includes header + tbody + footer.
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getVisibleContentHeight = /**
     * @hidden
     * Gets the visible content height that includes header + tbody + footer.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var height = this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;
        if (this.hasSummarizedColumns) {
            height += this.tfoot.nativeElement.clientHeight;
        }
        return height;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?=} baseWidth
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getPossibleColumnWidth = /**
     * @hidden
     * @param {?=} baseWidth
     * @return {?}
     */
    function (baseWidth) {
        if (baseWidth === void 0) { baseWidth = null; }
        /** @type {?} */
        var computedWidth;
        if (baseWidth !== null) {
            computedWidth = baseWidth;
        }
        else {
            computedWidth = this.calcWidth ||
                parseInt(this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);
        }
        if (this.showRowCheckboxes) {
            computedWidth -= this.headerCheckboxContainer ? this.headerCheckboxContainer.nativeElement.offsetWidth : 0;
        }
        /** @type {?} */
        var visibleChildColumns = this.visibleColumns.filter(function (c) { return !c.columnGroup; });
        // Column layouts related
        /** @type {?} */
        var visibleCols = [];
        /** @type {?} */
        var columnBlocks = this.visibleColumns.filter(function (c) { return c.columnGroup; });
        /** @type {?} */
        var colsPerBlock = columnBlocks.map(function (block) { return block.getInitialChildColumnSizes(block.children); });
        /** @type {?} */
        var combinedBlocksSize = colsPerBlock.reduce(function (acc, item) { return acc + item.length; }, 0);
        colsPerBlock.forEach(function (blockCols) { return visibleCols = visibleCols.concat(blockCols); });
        //
        /** @type {?} */
        var columnsWithSetWidths = this.hasColumnLayouts ?
            visibleCols.filter(function (c) { return c.widthSetByUser; }) :
            visibleChildColumns.filter(function (c) { return c.widthSetByUser; });
        /** @type {?} */
        var columnsToSize = this.hasColumnLayouts ?
            combinedBlocksSize - columnsWithSetWidths.length :
            visibleChildColumns.length - columnsWithSetWidths.length;
        /** @type {?} */
        var sumExistingWidths = columnsWithSetWidths
            .reduce(function (prev, curr) {
            /** @type {?} */
            var colWidth = curr.width;
            /** @type {?} */
            var widthValue = parseInt(colWidth, 10);
            /** @type {?} */
            var currWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1 ?
                widthValue / 100 * computedWidth :
                widthValue;
            return prev + currWidth;
        }, 0);
        /** @type {?} */
        var columnWidth = Math.floor(!Number.isFinite(sumExistingWidths) ?
            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :
            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH));
        return columnWidth.toString();
    };
    /**
     * @hidden
     * Sets grid width i.e. this.calcWidth
     */
    /**
     * @hidden
     * Sets grid width i.e. this.calcWidth
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.calculateGridWidth = /**
     * @hidden
     * Sets grid width i.e. this.calcWidth
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var width;
        /** @type {?} */
        var computed = this.document.defaultView.getComputedStyle(this.nativeElement);
        /** @type {?} */
        var el = this.document.getElementById(this.nativeElement.id);
        if (this.isPercentWidth) {
            /* width in %*/
            width = computed.getPropertyValue('width').indexOf('%') === -1 ?
                parseInt(computed.getPropertyValue('width'), 10) : null;
        }
        else {
            width = parseInt(this._width, 10);
        }
        if (!width && el) {
            width = el.offsetWidth;
        }
        if (!width) {
            width = this.columnList.reduce(function (sum, item) { return sum + parseInt((item.width || item.defaultWidth), 10); }, 0);
        }
        if (this.hasVerticalSroll()) {
            width -= this.scrollWidth;
        }
        if (Number.isFinite(width) && width !== this.calcWidth) {
            this.calcWidth = width;
            this.cdr.detectChanges();
        }
        this._derivePossibleWidth();
    };
    /**
     * @return {?}
     */
    IgxGridBaseComponent.prototype.hasVerticalSroll = /**
     * @return {?}
     */
    function () {
        if (!this._ngAfterViewInitPassed) {
            return false;
        }
        /** @type {?} */
        var isScrollable = this.verticalScrollContainer.isScrollable();
        return !!(this.calcWidth && this.verticalScrollContainer.igxForOf &&
            this.verticalScrollContainer.igxForOf.length > 0 &&
            isScrollable);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} change
     * @return {?}
     */
    IgxGridBaseComponent.prototype.onColumnsChanged = /**
     * @hidden
     * @protected
     * @param {?} change
     * @return {?}
     */
    function (change) {
        var _this = this;
        /** @type {?} */
        var diff = this.columnListDiffer.diff(change);
        if (diff) {
            /** @type {?} */
            var added_1 = false;
            /** @type {?} */
            var removed_1 = false;
            this.initColumns(this.columnList);
            diff.forEachAddedItem(function (record) {
                _this.onColumnInit.emit(record.item);
                added_1 = true;
            });
            diff.forEachRemovedItem(function (record) {
                // Clear Filtering
                _this.gridAPI.clear_filter(record.item.field);
                // Clear Sorting
                _this.gridAPI.clear_sort(record.item.field);
                removed_1 = true;
            });
            this.resetCaches();
            if (added_1 || removed_1) {
                this.summaryService.clearSummaryCache();
                this.calculateGridSizes();
            }
        }
        this.markForCheck();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.calculateGridSizes = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        /*
            TODO: (R.K.) This layered lasagne should be refactored
            ASAP. The reason I have to reset the caches so many times is because
            after teach `detectChanges` call they are filled with invalid
            state. Of course all of this happens midway through the grid
            sizing process which of course, uses values from the caches, thus resulting
            in a broken layout.
        */
        this.resetCaches();
        /** @type {?} */
        var hasScroll = this.hasVerticalSroll();
        this.calculateGridWidth();
        this.cdr.detectChanges();
        this.resetCaches();
        this.calculateGridHeight();
        if (this.rowEditable) {
            this.repositionRowEditingOverlay(this.rowInEditMode);
        }
        this.cdr.detectChanges();
        this.resetCaches();
        // in case scrollbar has appeared recalc to size correctly.
        if (hasScroll !== this.hasVerticalSroll()) {
            this.calculateGridWidth();
            this.cdr.detectChanges();
            this.resetCaches();
        }
    };
    /**
     * @hidden
     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.
     * Method used to override the calculations.
     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.
     */
    /**
     * @hidden
     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.
     * Method used to override the calculations.
     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getFeatureColumnsWidth = /**
     * @hidden
     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.
     * Method used to override the calculations.
     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var width = 0;
        if (this.headerCheckboxContainer) {
            width += this.headerCheckboxContainer.nativeElement.getBoundingClientRect().width;
        }
        if (this.headerDragContainer) {
            width += this.headerDragContainer.nativeElement.getBoundingClientRect().width;
        }
        return width;
    };
    /**
     * Gets calculated width of the pinned area.
     * ```typescript
     * const pinnedWidth = this.grid.getPinnedWidth();
     * ```
     * @param takeHidden If we should take into account the hidden columns in the pinned area.
     * @memberof IgxGridBaseComponent
     */
    /**
     * Gets calculated width of the pinned area.
     * ```typescript
     * const pinnedWidth = this.grid.getPinnedWidth();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} takeHidden If we should take into account the hidden columns in the pinned area.
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getPinnedWidth = /**
     * Gets calculated width of the pinned area.
     * ```typescript
     * const pinnedWidth = this.grid.getPinnedWidth();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} takeHidden If we should take into account the hidden columns in the pinned area.
     * @return {?}
     */
    function (takeHidden) {
        if (takeHidden === void 0) { takeHidden = false; }
        var e_1, _a;
        /** @type {?} */
        var fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;
        /** @type {?} */
        var sum = 0;
        try {
            for (var fc_1 = tslib_1.__values(fc), fc_1_1 = fc_1.next(); !fc_1_1.done; fc_1_1 = fc_1.next()) {
                var col = fc_1_1.value;
                if (col.level === 0) {
                    sum += parseInt(col.width, 10);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (fc_1_1 && !fc_1_1.done && (_a = fc_1.return)) _a.call(fc_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        sum += this.featureColumnsWidth;
        return sum;
    };
    /**
     * @hidden
     * Gets calculated width of the unpinned area
     * @param takeHidden If we should take into account the hidden columns in the pinned area.
     * @memberof IgxGridBaseComponent
     */
    /**
     * @hidden
     * Gets calculated width of the unpinned area
     * \@memberof IgxGridBaseComponent
     * @protected
     * @param {?=} takeHidden If we should take into account the hidden columns in the pinned area.
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getUnpinnedWidth = /**
     * @hidden
     * Gets calculated width of the unpinned area
     * \@memberof IgxGridBaseComponent
     * @protected
     * @param {?=} takeHidden If we should take into account the hidden columns in the pinned area.
     * @return {?}
     */
    function (takeHidden) {
        if (takeHidden === void 0) { takeHidden = false; }
        /** @type {?} */
        var width = this.isPercentWidth ?
            this.calcWidth :
            parseInt(this._width, 10);
        if (this.hasVerticalSroll() && !this.isPercentWidth) {
            width -= this.scrollWidth;
        }
        return width - this.getPinnedWidth(takeHidden);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} fieldName
     * @param {?} hasSummary
     * @param {?=} summaryOperand
     * @return {?}
     */
    IgxGridBaseComponent.prototype._summaries = /**
     * @hidden
     * @protected
     * @param {?} fieldName
     * @param {?} hasSummary
     * @param {?=} summaryOperand
     * @return {?}
     */
    function (fieldName, hasSummary, summaryOperand) {
        /** @type {?} */
        var column = this.gridAPI.get_column_by_name(fieldName);
        if (column) {
            column.hasSummary = hasSummary;
            if (summaryOperand) {
                if (this.rootSummariesEnabled) {
                    this.summaryService.retriggerRootPipe++;
                }
                column.summaries = summaryOperand;
            }
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} expressions
     * @param {?} hasSummary
     * @return {?}
     */
    IgxGridBaseComponent.prototype._multipleSummaries = /**
     * @hidden
     * @protected
     * @param {?} expressions
     * @param {?} hasSummary
     * @return {?}
     */
    function (expressions, hasSummary) {
        var _this = this;
        expressions.forEach(function (element) {
            _this._summaries(element.fieldName, hasSummary, element.customSummary);
        });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} expressions
     * @return {?}
     */
    IgxGridBaseComponent.prototype._disableMultipleSummaries = /**
     * @hidden
     * @protected
     * @param {?} expressions
     * @return {?}
     */
    function (expressions) {
        var _this = this;
        expressions.forEach(function (column) {
            /** @type {?} */
            var columnName = column && column.fieldName ? column.fieldName : column;
            _this._summaries(columnName, false);
        });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} rec
     * @return {?}
     */
    IgxGridBaseComponent.prototype.resolveDataTypes = /**
     * @hidden
     * @protected
     * @param {?} rec
     * @return {?}
     */
    function (rec) {
        if (typeof rec === 'number') {
            return DataType.Number;
        }
        else if (typeof rec === 'boolean') {
            return DataType.Boolean;
        }
        else if (typeof rec === 'object' && rec instanceof Date) {
            return DataType.Date;
        }
        return DataType.String;
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getScrollWidth = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var div = document.createElement('div');
        /** @type {?} */
        var style = div.style;
        style.width = '100px';
        style.height = '100px';
        style.position = 'absolute';
        style.top = '-10000px';
        style.top = '-10000px';
        style.overflow = 'scroll';
        document.body.appendChild(div);
        /** @type {?} */
        var scrollWidth = div.offsetWidth - div.clientWidth;
        document.body.removeChild(div);
        return scrollWidth;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.autogenerateColumns = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var data = this.gridAPI.get_data();
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(IgxColumnComponent);
        /** @type {?} */
        var fields = this.generateDataFields(data);
        /** @type {?} */
        var columns = [];
        fields.forEach(function (field) {
            /** @type {?} */
            var ref = _this.viewRef.createComponent(factory, null, _this.viewRef.injector);
            ref.instance.field = field;
            ref.instance.dataType = _this.resolveDataTypes(data[0][field]);
            ref.changeDetectorRef.detectChanges();
            columns.push(ref.instance);
        });
        this.columnList.reset(columns);
        if (data && data.length > 0) {
            this.shouldGenerate = false;
        }
    };
    /**
     * @protected
     * @param {?} data
     * @return {?}
     */
    IgxGridBaseComponent.prototype.generateDataFields = /**
     * @protected
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return Object.keys(data && data.length !== 0 ? data[0] : []);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} arr
     * @return {?}
     */
    IgxGridBaseComponent.prototype.onlyTopLevel = /**
     * @hidden
     * @param {?} arr
     * @return {?}
     */
    function (arr) {
        return arr.filter(function (c) { return c.level === 0; });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} collection
     * @param {?=} cb
     * @return {?}
     */
    IgxGridBaseComponent.prototype.initColumns = /**
     * @hidden
     * @protected
     * @param {?} collection
     * @param {?=} cb
     * @return {?}
     */
    function (collection, cb) {
        var _this = this;
        if (cb === void 0) { cb = null; }
        // XXX: Deprecate index
        this._columnGroups = this.columnList.some(function (col) { return col.columnGroup; });
        if (this.hasColumnLayouts) {
            // Set overall row layout size
            this.columnList.forEach(function (col) {
                if (col.columnLayout) {
                    /** @type {?} */
                    var layoutSize = col.children ?
                        col.children.reduce(function (acc, val) { return Math.max(val.rowStart + val.gridRowSpan - 1, acc); }, 1) :
                        1;
                    _this._multiRowLayoutRowSize = Math.max(layoutSize, _this._multiRowLayoutRowSize);
                }
            });
        }
        if (this.hasColumnLayouts && this.hasColumnGroups) {
            // invalid configuration - multi-row and column groups
            // remove column groups
            /** @type {?} */
            var columnLayoutColumns = this.columnList.filter(function (col) { return col.columnLayout || (col.parent && col.parent.columnLayout); });
            this.columnList.reset(columnLayoutColumns);
        }
        this._columns = this.columnList.toArray();
        collection.forEach(function (column) {
            column.grid = _this;
            column.defaultWidth = _this.columnWidth;
            _this.setColumnEditState(column);
            if (cb) {
                cb(column);
            }
        });
        this.reinitPinStates();
    };
    /**
     * @private
     * @param {?} column
     * @return {?}
     */
    IgxGridBaseComponent.prototype.setColumnEditState = /**
     * @private
     * @param {?} column
     * @return {?}
     */
    function (column) {
        // When rowEditable is true, then all columns, with defined field, excluding priamaryKey, are set to editable by default.
        if (this.rowEditable && column.editable === null &&
            column.field && column.field !== this.primaryKey) {
            column.editable = this.rowEditable;
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.reinitPinStates = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        if (this.hasColumnGroups) {
            this._pinnedColumns = this.columnList.filter(function (c) { return c.pinned; });
        }
        this._unpinnedColumns = this.columnList.filter(function (c) { return !c.pinned; });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} fieldName
     * @return {?}
     */
    IgxGridBaseComponent.prototype.isColumnGrouped = /**
     * @hidden
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        return false;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @param {?} filteredData
     * @return {?}
     */
    IgxGridBaseComponent.prototype.onHeaderCheckboxClick = /**
     * @hidden
     * @param {?} event
     * @param {?} filteredData
     * @return {?}
     */
    function (event, filteredData) {
        this.allRowsSelected = event.checked;
        /** @type {?} */
        var newSelection = event.checked ?
            filteredData ?
                this.selection.add_items(this.id, this.selection.get_all_ids(filteredData, this.primaryKey)) :
                this.selection.get_all_ids(this.gridAPI.get_all_data(true), this.primaryKey) :
            filteredData ?
                this.selection.delete_items(this.id, this.selection.get_all_ids(filteredData, this.primaryKey)) :
                this.selection.get_empty();
        this.triggerRowSelectionChange(newSelection, null, event, event.checked);
        this.checkHeaderCheckboxStatus(event.checked);
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "headerCheckboxAriaLabel", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._filteringExpressionsTree.filteringOperands.length > 0 ?
                this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all filtered' : 'Select all filtered' :
                this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all' : 'Select all';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?=} headerStatus
     * @return {?}
     */
    IgxGridBaseComponent.prototype.checkHeaderCheckboxStatus = /**
     * @hidden
     * @param {?=} headerStatus
     * @return {?}
     */
    function (headerStatus) {
        if (headerStatus === undefined) {
            /** @type {?} */
            var filteredData = this.filteringService.filteredData;
            /** @type {?} */
            var dataLength = filteredData ? filteredData.length : this.dataLength;
            this.allRowsSelected = this.selection.are_all_selected(this.id, dataLength);
            if (this.headerCheckbox) {
                this.headerCheckbox.indeterminate = !this.allRowsSelected && !this.selection.are_none_selected(this.id);
                if (!this.headerCheckbox.indeterminate) {
                    this.headerCheckbox.checked =
                        this.allRowsSelected;
                }
            }
            this.cdr.markForCheck();
        }
        else if (this.headerCheckbox) {
            this.headerCheckbox.checked = headerStatus !== undefined ? headerStatus : false;
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} componentID
     * @param {?} filteredData
     * @param {?=} primaryKey
     * @return {?}
     */
    IgxGridBaseComponent.prototype.filteredItemsStatus = /**
     * @hidden
     * @param {?} componentID
     * @param {?} filteredData
     * @param {?=} primaryKey
     * @return {?}
     */
    function (componentID, filteredData, primaryKey) {
        var e_2, _a;
        /** @type {?} */
        var currSelection = this.selection.get(componentID);
        /** @type {?} */
        var atLeastOneSelected = false;
        /** @type {?} */
        var notAllSelected = false;
        if (currSelection) {
            try {
                for (var _b = tslib_1.__values(Object.keys(filteredData)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    /** @type {?} */
                    var dataItem = primaryKey ? filteredData[key][primaryKey] : filteredData[key];
                    if (currSelection.has(dataItem)) {
                        atLeastOneSelected = true;
                        if (notAllSelected) {
                            return 'indeterminate';
                        }
                    }
                    else {
                        notAllSelected = true;
                        if (atLeastOneSelected) {
                            return 'indeterminate';
                        }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return atLeastOneSelected ? 'allSelected' : 'noneSelected';
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} data
     * @return {?}
     */
    IgxGridBaseComponent.prototype.updateHeaderCheckboxStatusOnFilter = /**
     * @hidden
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (!data) {
            this.checkHeaderCheckboxStatus();
            return;
        }
        switch (this.filteredItemsStatus(this.id, data, this.primaryKey)) {
            case 'allSelected': {
                if (!this.allRowsSelected) {
                    this.allRowsSelected = true;
                }
                if (this.headerCheckbox.indeterminate) {
                    this.headerCheckbox.indeterminate = false;
                }
                break;
            }
            case 'noneSelected': {
                if (this.allRowsSelected) {
                    this.allRowsSelected = false;
                }
                if (this.headerCheckbox.indeterminate) {
                    this.headerCheckbox.indeterminate = false;
                }
                break;
            }
            default: {
                if (!this.headerCheckbox.indeterminate) {
                    this.headerCheckbox.indeterminate = true;
                }
                if (this.allRowsSelected) {
                    this.allRowsSelected = false;
                }
                break;
            }
        }
    };
    /**
     * Get current selection state.
     * Returns an array with selected rows' IDs (primaryKey or rowData)
     * ```typescript
     * const selectedRows = this.grid.selectedRows();
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Get current selection state.
     * Returns an array with selected rows' IDs (primaryKey or rowData)
     * ```typescript
     * const selectedRows = this.grid.selectedRows();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    IgxGridBaseComponent.prototype.selectedRows = /**
     * Get current selection state.
     * Returns an array with selected rows' IDs (primaryKey or rowData)
     * ```typescript
     * const selectedRows = this.grid.selectedRows();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selection;
        selection = this.selection.get(this.id);
        return selection ? Array.from(selection) : [];
    };
    /**
     * Select specified rows by ID.
     * ```typescript
     * this.grid.selectRows([1,2,5], true);
     * ```
     * @param rowIDs
     * @param clearCurrentSelection if true clears the current selection
     * @memberof IgxGridBaseComponent
     */
    /**
     * Select specified rows by ID.
     * ```typescript
     * this.grid.selectRows([1,2,5], true);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIDs
     * @param {?=} clearCurrentSelection if true clears the current selection
     * @return {?}
     */
    IgxGridBaseComponent.prototype.selectRows = /**
     * Select specified rows by ID.
     * ```typescript
     * this.grid.selectRows([1,2,5], true);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIDs
     * @param {?=} clearCurrentSelection if true clears the current selection
     * @return {?}
     */
    function (rowIDs, clearCurrentSelection) {
        var _this = this;
        /** @type {?} */
        var newSelection;
        /** @type {?} */
        var selectableRows = [];
        if (this.transactions.enabled) {
            selectableRows = rowIDs.filter(function (e) { return !_this.gridAPI.row_deleted_transaction(e); });
        }
        else {
            selectableRows = rowIDs;
        }
        newSelection = this.selection.add_items(this.id, selectableRows, clearCurrentSelection);
        this.triggerRowSelectionChange(newSelection);
    };
    /**
     * Deselect specified rows by ID.
     * ```typescript
     * this.grid.deselectRows([1,2,5]);
     * ```
     * @param rowIDs
     * @memberof IgxGridBaseComponent
     */
    /**
     * Deselect specified rows by ID.
     * ```typescript
     * this.grid.deselectRows([1,2,5]);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIDs
     * @return {?}
     */
    IgxGridBaseComponent.prototype.deselectRows = /**
     * Deselect specified rows by ID.
     * ```typescript
     * this.grid.deselectRows([1,2,5]);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIDs
     * @return {?}
     */
    function (rowIDs) {
        /** @type {?} */
        var newSelection;
        newSelection = this.selection.delete_items(this.id, rowIDs);
        this.triggerRowSelectionChange(newSelection);
    };
    /**
     * Selects all rows
     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.
     * ```typescript
     * this.grid.selectAllRows();
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Selects all rows
     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.
     * ```typescript
     * this.grid.selectAllRows();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    IgxGridBaseComponent.prototype.selectAllRows = /**
     * Selects all rows
     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.
     * ```typescript
     * this.grid.selectAllRows();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    function () {
        this.triggerRowSelectionChange(this.selection.get_all_ids(this.gridAPI.get_all_data(true), this.primaryKey));
    };
    /**
     * Deselects all rows
     * ```typescript
     * this.grid.deselectAllRows();
     * ```
     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.
     */
    /**
     * Deselects all rows
     * ```typescript
     * this.grid.deselectAllRows();
     * ```
     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.
     * @return {?}
     */
    IgxGridBaseComponent.prototype.deselectAllRows = /**
     * Deselects all rows
     * ```typescript
     * this.grid.deselectAllRows();
     * ```
     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.
     * @return {?}
     */
    function () {
        this.triggerRowSelectionChange(this.selection.get_empty());
    };
    /**
     * @return {?}
     */
    IgxGridBaseComponent.prototype.clearCellSelection = /**
     * @return {?}
     */
    function () {
        this.selectionService.clear();
        this.selectionService.activeElement = null;
        this.cdr.markForCheck();
    };
    /**
     * @param {?} dir
     * @return {?}
     */
    IgxGridBaseComponent.prototype.dragScroll = /**
     * @param {?} dir
     * @return {?}
     */
    function (dir) {
        /** @type {?} */
        var scrollDelta = 48;
        /** @type {?} */
        var horizontal = this.parentVirtDir.getHorizontalScroll();
        /** @type {?} */
        var vertical = this.verticalScrollContainer.getVerticalScroll();
        switch (dir) {
            case DragScrollDirection.LEFT:
                horizontal.scrollLeft -= scrollDelta;
                break;
            case DragScrollDirection.RIGHT:
                horizontal.scrollLeft += scrollDelta;
                break;
            case DragScrollDirection.TOP:
                vertical.scrollTop -= scrollDelta;
                break;
            case DragScrollDirection.BOTTOM:
                vertical.scrollTop += scrollDelta;
                break;
            case DragScrollDirection.BOTTOMLEFT:
                horizontal.scrollLeft -= scrollDelta;
                vertical.scrollTop += scrollDelta;
                break;
            case DragScrollDirection.BOTTOMRIGHT:
                horizontal.scrollLeft += scrollDelta;
                vertical.scrollTop += scrollDelta;
                break;
            case DragScrollDirection.TOPLEFT:
                horizontal.scrollLeft -= scrollDelta;
                vertical.scrollTop -= scrollDelta;
                break;
            case DragScrollDirection.TOPRIGHT:
                horizontal.scrollLeft += scrollDelta;
                vertical.scrollTop -= scrollDelta;
                break;
            default:
                return;
        }
        this.wheelHandler();
    };
    /**
     * @param {?} arg
     * @return {?}
     */
    IgxGridBaseComponent.prototype.isDefined = /**
     * @param {?} arg
     * @return {?}
     */
    function (arg) {
        return arg !== undefined && arg !== null;
    };
    /**
     * @param {?} arg
     * @return {?}
     */
    IgxGridBaseComponent.prototype.selectRange = /**
     * @param {?} arg
     * @return {?}
     */
    function (arg) {
        var _this = this;
        if (!this.isDefined(arg)) {
            this.clearCellSelection();
            return;
        }
        if (arg instanceof Array) {
            arg.forEach(function (range) { return _this.setSelection(range); });
        }
        else {
            this.setSelection(arg);
        }
        this.cdr.markForCheck();
    };
    /**
     * @param {?} field
     * @return {?}
     */
    IgxGridBaseComponent.prototype.columnToVisibleIndex = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var visibleColumns = this.visibleColumns;
        if (typeof field === 'number') {
            return field;
        }
        return visibleColumns.find(function (column) { return column.field === field; }).visibleIndex;
    };
    /**
     * @param {?} range
     * @return {?}
     */
    IgxGridBaseComponent.prototype.setSelection = /**
     * @param {?} range
     * @return {?}
     */
    function (range) {
        /** @type {?} */
        var startNode = { row: range.rowStart, column: this.columnToVisibleIndex(range.columnStart) };
        /** @type {?} */
        var endNode = { row: range.rowEnd, column: this.columnToVisibleIndex(range.columnEnd) };
        this.selectionService.pointerState.node = startNode;
        this.selectionService.selectRange(endNode, this.selectionService.pointerState);
        this.selectionService.addRangeMeta(endNode, this.selectionService.pointerState);
        this.selectionService.initPointerState();
    };
    /**
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getSelectedRanges = /**
     * @return {?}
     */
    function () {
        return this.selectionService.ranges;
    };
    /**
     * @param {?} source
     * @return {?}
     */
    IgxGridBaseComponent.prototype.extractDataFromSelection = /**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        var e_3, _a, e_4, _b;
        /** @type {?} */
        var column;
        /** @type {?} */
        var record = {};
        /** @type {?} */
        var selectedData = [];
        /** @type {?} */
        var selectionMap = Array.from(this.selectionService.selection)
            .filter(function (tuple) { return tuple[0] < source.length; });
        /** @type {?} */
        var visibleColumns = this.visibleColumns
            .filter(function (col) { return !col.columnGroup; })
            .sort(function (a, b) { return a.visibleIndex - b.visibleIndex; });
        try {
            for (var selectionMap_1 = tslib_1.__values(selectionMap), selectionMap_1_1 = selectionMap_1.next(); !selectionMap_1_1.done; selectionMap_1_1 = selectionMap_1.next()) {
                var _c = tslib_1.__read(selectionMap_1_1.value, 2), row = _c[0], set = _c[1];
                if (!source[row]) {
                    continue;
                }
                /** @type {?} */
                var temp = Array.from(set);
                try {
                    for (var temp_1 = tslib_1.__values(temp), temp_1_1 = temp_1.next(); !temp_1_1.done; temp_1_1 = temp_1.next()) {
                        var each = temp_1_1.value;
                        column = visibleColumns[each];
                        if (column) {
                            record[column.field] = source[row][column.field];
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (temp_1_1 && !temp_1_1.done && (_b = temp_1.return)) _b.call(temp_1);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                if (Object.keys(record).length) {
                    selectedData.push(record);
                }
                record = {};
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (selectionMap_1_1 && !selectionMap_1_1.done && (_a = selectionMap_1.return)) _a.call(selectionMap_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return selectedData;
    };
    /**
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getSelectedData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var source = this.verticalScrollContainer.igxForOf;
        return this.extractDataFromSelection(source);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} newSelectionAsSet
     * @param {?=} row
     * @param {?=} event
     * @param {?=} headerStatus
     * @return {?}
     */
    IgxGridBaseComponent.prototype.triggerRowSelectionChange = /**
     * @hidden
     * @param {?} newSelectionAsSet
     * @param {?=} row
     * @param {?=} event
     * @param {?=} headerStatus
     * @return {?}
     */
    function (newSelectionAsSet, row, event, headerStatus) {
        /** @type {?} */
        var oldSelectionAsSet = this.selection.get(this.id);
        /** @type {?} */
        var oldSelection = oldSelectionAsSet ? Array.from(oldSelectionAsSet) : [];
        /** @type {?} */
        var newSelection = newSelectionAsSet ? Array.from(newSelectionAsSet) : [];
        /** @type {?} */
        var args = { oldSelection: oldSelection, newSelection: newSelection, row: row, event: event };
        this.onRowSelectionChange.emit(args);
        newSelectionAsSet = this.selection.get_empty();
        for (var i = 0; i < args.newSelection.length; i++) {
            newSelectionAsSet.add(args.newSelection[i]);
        }
        this.selection.set(this.id, newSelectionAsSet);
        this.checkHeaderCheckboxStatus(headerStatus);
    };
    /**
     * @hidden
     */
    // @HostListener('scroll', ['$event'])
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    // @HostListener('scroll', ['$event'])
    IgxGridBaseComponent.prototype.scrollHandler = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    // @HostListener('scroll', ['$event'])
    function (event) {
        this.parentVirtDir.getHorizontalScroll().scrollLeft += event.target.scrollLeft;
        this.verticalScrollContainer.getVerticalScroll().scrollTop += event.target.scrollTop;
        event.target.scrollLeft = 0;
        event.target.scrollTop = 0;
    };
    /**
     * This method allows you to navigate to a position
     * in the grid based on provided `rowindex` and `visibleColumnIndex`,
     * also to execute a custom logic over the target element,
     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }
     * ```typescript
     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * This method allows you to navigate to a position
     * in the grid based on provided `rowindex` and `visibleColumnIndex`,
     * also to execute a custom logic over the target element,
     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }
     * ```typescript
     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIndex
     * @param {?=} visibleColIndex
     * @param {?=} cb
     * @return {?}
     */
    IgxGridBaseComponent.prototype.navigateTo = /**
     * This method allows you to navigate to a position
     * in the grid based on provided `rowindex` and `visibleColumnIndex`,
     * also to execute a custom logic over the target element,
     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }
     * ```typescript
     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIndex
     * @param {?=} visibleColIndex
     * @param {?=} cb
     * @return {?}
     */
    function (rowIndex, visibleColIndex, cb) {
        var _this = this;
        if (visibleColIndex === void 0) { visibleColIndex = -1; }
        if (cb === void 0) { cb = null; }
        if (rowIndex < 0 || rowIndex > this.verticalScrollContainer.igxForOf.length - 1
            || (visibleColIndex !== -1 && this.columnList.map(function (col) { return col.visibleIndex; }).indexOf(visibleColIndex) === -1)) {
            return;
        }
        this.wheelHandler();
        if (this.verticalScrollContainer.igxForOf.slice(rowIndex, rowIndex + 1).find(function (rec) { return rec.expression || rec.childGridsData; })) {
            visibleColIndex = -1;
        }
        if (visibleColIndex === -1 || (this.navigation.isColumnFullyVisible(visibleColIndex)
            && this.navigation.isColumnLeftFullyVisible(visibleColIndex))) {
            if (this.navigation.shouldPerformVerticalScroll(rowIndex)) {
                this.verticalScrollContainer.scrollTo(rowIndex);
                this.verticalScrollContainer.onChunkLoad
                    .pipe(first()).subscribe(function () {
                    _this.executeCallback(rowIndex, visibleColIndex, cb);
                });
            }
            else {
                this.executeCallback(rowIndex, visibleColIndex, cb);
            }
        }
        else {
            /** @type {?} */
            var unpinnedIndex = this.navigation.getColumnUnpinnedIndex(visibleColIndex);
            this.parentVirtDir.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                if (_this.navigation.shouldPerformVerticalScroll(rowIndex)) {
                    _this.verticalScrollContainer.scrollTo(rowIndex);
                    _this.verticalScrollContainer.onChunkLoad
                        .pipe(first()).subscribe(function () {
                        _this.executeCallback(rowIndex, visibleColIndex, cb);
                    });
                }
                else {
                    _this.executeCallback(rowIndex, visibleColIndex, cb);
                }
            });
            this.navigation.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);
        }
    };
    /**
    * Returns `ICellPosition` which defines the next cell,
    * according to the current position, that match specific criteria.
    * You can pass callback function as a third parameter of `getPreviousCell` method.
    * The callback function accepts IgxColumnComponent as a param
    * ```typescript
    *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);
    * ```
    * @memberof IgxGridBaseComponent
    */
    /**
     * Returns `ICellPosition` which defines the next cell,
     * according to the current position, that match specific criteria.
     * You can pass callback function as a third parameter of `getPreviousCell` method.
     * The callback function accepts IgxColumnComponent as a param
     * ```typescript
     *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} currRowIndex
     * @param {?} curVisibleColIndex
     * @param {?=} callback
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getNextCell = /**
     * Returns `ICellPosition` which defines the next cell,
     * according to the current position, that match specific criteria.
     * You can pass callback function as a third parameter of `getPreviousCell` method.
     * The callback function accepts IgxColumnComponent as a param
     * ```typescript
     *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} currRowIndex
     * @param {?} curVisibleColIndex
     * @param {?=} callback
     * @return {?}
     */
    function (currRowIndex, curVisibleColIndex, callback) {
        if (callback === void 0) { callback = null; }
        /** @type {?} */
        var columns = this.columnList.filter(function (col) { return !col.columnGroup && col.visibleIndex >= 0; });
        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {
            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };
        }
        /** @type {?} */
        var colIndexes = callback ? columns.filter(function (col) { return callback(col); }).map(function (editCol) { return editCol.visibleIndex; }).sort(function (a, b) { return a - b; }) :
            columns.map(function (editCol) { return editCol.visibleIndex; }).sort(function (a, b) { return a - b; });
        /** @type {?} */
        var nextCellIndex = colIndexes.find(function (index) { return index > curVisibleColIndex; });
        if (this.verticalScrollContainer.igxForOf.slice(currRowIndex, currRowIndex + 1)
            .find(function (rec) { return !rec.expression && !rec.summaries && !rec.childGridsData; }) && nextCellIndex !== undefined) {
            return { rowIndex: currRowIndex, visibleColumnIndex: nextCellIndex };
        }
        else {
            if (colIndexes.length === 0 || this.getNextDataRowIndex(currRowIndex) === currRowIndex) {
                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };
            }
            else {
                return { rowIndex: this.getNextDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };
            }
        }
    };
    /**
    * Returns `ICellPosition` which defines the previous cell,
    * according to the current position, that match specific criteria.
    * You can pass callback function as a third parameter of `getPreviousCell` method.
    * The callback function accepts IgxColumnComponent as a param
    * ```typescript
    *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);
    * ```
    * @memberof IgxGridBaseComponent
    */
    /**
     * Returns `ICellPosition` which defines the previous cell,
     * according to the current position, that match specific criteria.
     * You can pass callback function as a third parameter of `getPreviousCell` method.
     * The callback function accepts IgxColumnComponent as a param
     * ```typescript
     *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} currRowIndex
     * @param {?} curVisibleColIndex
     * @param {?=} callback
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getPreviousCell = /**
     * Returns `ICellPosition` which defines the previous cell,
     * according to the current position, that match specific criteria.
     * You can pass callback function as a third parameter of `getPreviousCell` method.
     * The callback function accepts IgxColumnComponent as a param
     * ```typescript
     *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} currRowIndex
     * @param {?} curVisibleColIndex
     * @param {?=} callback
     * @return {?}
     */
    function (currRowIndex, curVisibleColIndex, callback) {
        if (callback === void 0) { callback = null; }
        /** @type {?} */
        var columns = this.columnList.filter(function (col) { return !col.columnGroup && col.visibleIndex >= 0; });
        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {
            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };
        }
        /** @type {?} */
        var colIndexes = callback ? columns.filter(function (col) { return callback(col); }).map(function (editCol) { return editCol.visibleIndex; }).sort(function (a, b) { return b - a; }) :
            columns.map(function (editCol) { return editCol.visibleIndex; }).sort(function (a, b) { return b - a; });
        /** @type {?} */
        var prevCellIndex = colIndexes.find(function (index) { return index < curVisibleColIndex; });
        if (this.verticalScrollContainer.igxForOf.slice(currRowIndex, currRowIndex + 1)
            .find(function (rec) { return !rec.expression && !rec.summaries && !rec.childGridsData; }) && prevCellIndex !== undefined) {
            return { rowIndex: currRowIndex, visibleColumnIndex: prevCellIndex };
        }
        else {
            if (colIndexes.length === 0 || this.getPrevDataRowIndex(currRowIndex) === currRowIndex) {
                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };
            }
            else {
                return { rowIndex: this.getPrevDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };
            }
        }
    };
    /**
     * @private
     * @param {?} rowIndex
     * @param {?=} visibleColIndex
     * @param {?=} cb
     * @return {?}
     */
    IgxGridBaseComponent.prototype.executeCallback = /**
     * @private
     * @param {?} rowIndex
     * @param {?=} visibleColIndex
     * @param {?=} cb
     * @return {?}
     */
    function (rowIndex, visibleColIndex, cb) {
        if (visibleColIndex === void 0) { visibleColIndex = -1; }
        if (cb === void 0) { cb = null; }
        if (!cb) {
            return;
        }
        /** @type {?} */
        var targetType;
        /** @type {?} */
        var target;
        /** @type {?} */
        var row = this.summariesRowList.filter(function (s) { return s.index !== 0; }).concat(this.rowList.toArray()).find(function (r) { return r.index === rowIndex; });
        if (!row) {
            return;
        }
        switch (row.nativeElement.tagName.toLowerCase()) {
            case 'igx-grid-groupby-row':
                targetType = GridKeydownTargetType.groupRow;
                target = row;
                break;
            case 'igx-grid-summary-row':
                targetType = GridKeydownTargetType.summaryCell;
                target = visibleColIndex !== -1 ?
                    row.summaryCells.find(function (c) { return c.visibleColumnIndex === visibleColIndex; }) : row.summaryCells.first;
                break;
            case 'igx-child-grid-row':
                targetType = GridKeydownTargetType.hierarchicalRow;
                target = row;
                break;
            default:
                targetType = GridKeydownTargetType.dataCell;
                target = visibleColIndex !== -1 ? row.cells.find(function (c) { return c.visibleColumnIndex === visibleColIndex; }) : row.cells.first;
                break;
        }
        /** @type {?} */
        var args = { targetType: targetType, target: target };
        cb(args);
    };
    /**
     * @private
     * @param {?} currentRowIndex
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getPrevDataRowIndex = /**
     * @private
     * @param {?} currentRowIndex
     * @return {?}
     */
    function (currentRowIndex) {
        if (currentRowIndex <= 0) {
            return currentRowIndex;
        }
        /** @type {?} */
        var prevRow = this.verticalScrollContainer.igxForOf.slice(0, currentRowIndex).reverse()
            .find(function (rec) { return !rec.expression && !rec.summaries && !rec.childGridsData; });
        return prevRow ? this.verticalScrollContainer.igxForOf.indexOf(prevRow) : currentRowIndex;
    };
    /**
     * @private
     * @param {?} currentRowIndex
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getNextDataRowIndex = /**
     * @private
     * @param {?} currentRowIndex
     * @return {?}
     */
    function (currentRowIndex) {
        if (currentRowIndex === this.verticalScrollContainer.igxForOf.length) {
            return currentRowIndex;
        }
        /** @type {?} */
        var nextRow = this.verticalScrollContainer.igxForOf.slice(currentRowIndex + 1, this.verticalScrollContainer.igxForOf.length)
            .find(function (rec) { return !rec.expression && !rec.summaries && !rec.childGridsData; });
        return nextRow ? this.verticalScrollContainer.igxForOf.indexOf(nextRow) : currentRowIndex;
    };
    /**
     * @private
     * @param {?} rowIndex
     * @param {?} colIndex
     * @return {?}
     */
    IgxGridBaseComponent.prototype.isValidPosition = /**
     * @private
     * @param {?} rowIndex
     * @param {?} colIndex
     * @return {?}
     */
    function (rowIndex, colIndex) {
        /** @type {?} */
        var rows = this.summariesRowList.filter(function (s) { return s.index !== 0; }).concat(this.rowList.toArray()).length;
        /** @type {?} */
        var cols = this.columnList.filter(function (col) { return !col.columnGroup && col.visibleIndex >= 0; }).length;
        if (rows < 1 || cols < 1) {
            return false;
        }
        if (rowIndex > -1 && rowIndex < this.verticalScrollContainer.igxForOf.length &&
            colIndex > -1 && colIndex <= this.unpinnedColumns[this.unpinnedColumns.length - 1].visibleIndex) {
            return true;
        }
        return false;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?=} isScroll
     * @return {?}
     */
    IgxGridBaseComponent.prototype.wheelHandler = /**
     * @hidden
     * @param {?=} isScroll
     * @return {?}
     */
    function (isScroll) {
        if (isScroll === void 0) { isScroll = false; }
        if (document.activeElement &&
            // tslint:disable-next-line:no-bitwise
            (document.activeElement.compareDocumentPosition(this.tbody.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS ||
                // tslint:disable-next-line:no-bitwise
                (document.activeElement.compareDocumentPosition(this.tfoot.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS && isScroll))) {
            ((/** @type {?} */ (document.activeElement))).blur();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} index
     * @param {?} col
     * @return {?}
     */
    IgxGridBaseComponent.prototype.trackColumnChanges = /**
     * @hidden
     * @param {?} index
     * @param {?} col
     * @return {?}
     */
    function (index, col) {
        return col.field + col.calcWidth;
    };
    /**
     * @private
     * @param {?} text
     * @param {?} increment
     * @param {?=} caseSensitive
     * @param {?=} exactMatch
     * @param {?=} scroll
     * @return {?}
     */
    IgxGridBaseComponent.prototype.find = /**
     * @private
     * @param {?} text
     * @param {?} increment
     * @param {?=} caseSensitive
     * @param {?=} exactMatch
     * @param {?=} scroll
     * @return {?}
     */
    function (text, increment, caseSensitive, exactMatch, scroll) {
        if (!this.rowList) {
            return 0;
        }
        this.endEdit(false);
        if (!text) {
            this.clearSearch();
            return 0;
        }
        /** @type {?} */
        var caseSensitiveResolved = caseSensitive ? true : false;
        /** @type {?} */
        var exactMatchResolved = exactMatch ? true : false;
        /** @type {?} */
        var rebuildCache = false;
        if (this.lastSearchInfo.searchText !== text ||
            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||
            this.lastSearchInfo.exactMatch !== exactMatchResolved) {
            this.lastSearchInfo = {
                searchText: text,
                activeMatchIndex: 0,
                caseSensitive: caseSensitiveResolved,
                exactMatch: exactMatchResolved,
                matchInfoCache: []
            };
            rebuildCache = true;
        }
        else {
            this.lastSearchInfo.activeMatchIndex += increment;
        }
        if (rebuildCache) {
            this.rowList.forEach(function (row) {
                if (row.cells) {
                    row.cells.forEach(function (c) {
                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);
                    });
                }
            });
            this.rebuildMatchCache();
        }
        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {
            this.lastSearchInfo.activeMatchIndex = 0;
        }
        else if (this.lastSearchInfo.activeMatchIndex < 0) {
            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;
        }
        if (this.lastSearchInfo.matchInfoCache.length) {
            /** @type {?} */
            var matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];
            this.lastSearchInfo = tslib_1.__assign({}, this.lastSearchInfo);
            if (scroll !== false) {
                this.scrollTo(matchInfo.row, matchInfo.column);
            }
            IgxTextHighlightDirective.setActiveHighlight(this.id, {
                column: matchInfo.column,
                row: matchInfo.row,
                index: matchInfo.index,
            });
        }
        else {
            IgxTextHighlightDirective.clearActiveHighlight(this.id);
        }
        return this.lastSearchInfo.matchInfoCache.length;
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "filteredSortedData", {
        /**
         * Returns an array containing the filtered sorted data.
         * ```typescript
         * const filteredSortedData = this.grid1.filteredSortedData;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns an array containing the filtered sorted data.
         * ```typescript
         * const filteredSortedData = this.grid1.filteredSortedData;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._filteredSortedData;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filteredSortedData = value;
            this.refreshSearch(true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.initPinning = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentPinnedWidth = 0;
        /** @type {?} */
        var pinnedColumns = [];
        /** @type {?} */
        var unpinnedColumns = [];
        /** @type {?} */
        var newUnpinnedCols = [];
        this.calculateGridWidth();
        this.resetCaches();
        // When a column is a group or is inside a group, pin all related.
        this._pinnedColumns.forEach(function (col) {
            if (col.parent) {
                col.parent.pinned = true;
            }
            if (col.columnGroup) {
                col.children.forEach(function (child) { return child.pinned = true; });
            }
        });
        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.
        // We take into account top level columns (top level groups and non groups).
        // If top level is unpinned the pinning handles all children to be unpinned as well.
        for (var i = 0; i < this._columns.length; i++) {
            if (this._columns[i].pinned && !this._columns[i].parent) {
                // Pinned column. Check if with it the unpinned min width is exceeded.
                /** @type {?} */
                var colWidth = parseInt(this._columns[i].width, 10);
                if (currentPinnedWidth + colWidth > this.calcWidth - this.unpinnedAreaMinWidth) {
                    // unpinned min width is exceeded. Unpin the columns and add it to the unpinned collection.
                    this._columns[i].pinned = false;
                    unpinnedColumns.push(this._columns[i]);
                    newUnpinnedCols.push(this._columns[i]);
                }
                else {
                    // unpinned min width is not exceeded. Keep it pinned and add it to the pinned collection.
                    currentPinnedWidth += colWidth;
                    pinnedColumns.push(this._columns[i]);
                }
            }
            else if (this._columns[i].pinned && this._columns[i].parent) {
                if (this._columns[i].topLevelParent.pinned) {
                    pinnedColumns.push(this._columns[i]);
                }
                else {
                    this._columns[i].pinned = false;
                    unpinnedColumns.push(this._columns[i]);
                }
            }
            else {
                unpinnedColumns.push(this._columns[i]);
            }
        }
        if (newUnpinnedCols.length) {
            console.warn('igxGrid - The pinned area exceeds maximum pinned width. ' +
                'The following columns were unpinned to prevent further issues:' +
                newUnpinnedCols.map(function (col) { return '"' + col.header + '"'; }).toString() + '. For more info see our documentation.');
        }
        // Assign the applicaple collections.
        this._pinnedColumns = pinnedColumns;
        this._unpinnedColumns = unpinnedColumns;
        this.cdr.markForCheck();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    IgxGridBaseComponent.prototype.scrollTo = /**
     * @hidden
     * @protected
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (row, column) {
        var _this = this;
        /** @type {?} */
        var delayScrolling = false;
        if (this.paging && typeof (row) !== 'number') {
            /** @type {?} */
            var rowIndex = this.filteredSortedData.indexOf(row);
            /** @type {?} */
            var page = Math.floor(rowIndex / this.perPage);
            if (this.page !== page) {
                delayScrolling = true;
                this.page = page;
            }
        }
        if (delayScrolling) {
            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(function () {
                _this.scrollDirective(_this.verticalScrollContainer, typeof (row) === 'number' ? row : _this.verticalScrollContainer.igxForOf.indexOf(row));
            });
        }
        else {
            this.scrollDirective(this.verticalScrollContainer, typeof (row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(row));
        }
        this.scrollToHorizontally(column);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} column
     * @return {?}
     */
    IgxGridBaseComponent.prototype.scrollToHorizontally = /**
     * @hidden
     * @protected
     * @param {?} column
     * @return {?}
     */
    function (column) {
        /** @type {?} */
        var columnIndex = typeof column === 'number' ? column : this.getColumnByName(column).visibleIndex;
        /** @type {?} */
        var scrollRow = this.rowList.find(function (r) { return r.virtDirRow; });
        /** @type {?} */
        var virtDir = scrollRow ? scrollRow.virtDirRow : null;
        if (this.pinnedColumns.length) {
            if (columnIndex >= this.pinnedColumns.length) {
                columnIndex -= this.pinnedColumns.length;
                this.scrollDirective(virtDir, columnIndex);
            }
        }
        else {
            this.scrollDirective(virtDir, columnIndex);
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} directive
     * @param {?} goal
     * @return {?}
     */
    IgxGridBaseComponent.prototype.scrollDirective = /**
     * @hidden
     * @protected
     * @param {?} directive
     * @param {?} goal
     * @return {?}
     */
    function (directive, goal) {
        if (!directive) {
            return;
        }
        // directive.onChunkLoad.pipe(first())
        //     .subscribe(() => requestAnimationFrame(() => this.cdr.detectChanges()));
        directive.scrollTo(goal);
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridBaseComponent.prototype.rebuildMatchCache = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.lastSearchInfo.matchInfoCache = [];
        /** @type {?} */
        var caseSensitive = this.lastSearchInfo.caseSensitive;
        /** @type {?} */
        var exactMatch = this.lastSearchInfo.exactMatch;
        /** @type {?} */
        var searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();
        /** @type {?} */
        var data = this.filteredSortedData;
        /** @type {?} */
        var columnItems = this.visibleColumns.filter(function (c) { return !c.columnGroup; }).sort(function (c1, c2) { return c1.visibleIndex - c2.visibleIndex; });
        /** @type {?} */
        var numberPipe = new IgxDecimalPipeComponent(this.locale);
        /** @type {?} */
        var datePipe = new IgxDatePipeComponent(this.locale);
        data.forEach(function (dataRow) {
            columnItems.forEach(function (c) {
                /** @type {?} */
                var value = c.formatter ? c.formatter(dataRow[c.field]) :
                    c.dataType === 'number' ? numberPipe.transform(dataRow[c.field], _this.locale) :
                        c.dataType === 'date' ? datePipe.transform(dataRow[c.field], _this.locale)
                            : dataRow[c.field];
                if (value !== undefined && value !== null && c.searchable) {
                    /** @type {?} */
                    var searchValue = caseSensitive ? String(value) : String(value).toLowerCase();
                    if (exactMatch) {
                        if (searchValue === searchText) {
                            _this.lastSearchInfo.matchInfoCache.push({
                                row: dataRow,
                                column: c.field,
                                index: 0,
                            });
                        }
                    }
                    else {
                        /** @type {?} */
                        var occurenceIndex = 0;
                        /** @type {?} */
                        var searchIndex = searchValue.indexOf(searchText);
                        while (searchIndex !== -1) {
                            _this.lastSearchInfo.matchInfoCache.push({
                                row: dataRow,
                                column: c.field,
                                index: occurenceIndex++,
                            });
                            searchValue = searchValue.substring(searchIndex + searchText.length);
                            searchIndex = searchValue.indexOf(searchText);
                        }
                    }
                }
            });
        });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} _group
     * @return {?}
     */
    IgxGridBaseComponent.prototype.isExpandedGroup = /**
     * @hidden
     * @param {?} _group
     * @return {?}
     */
    function (_group) {
        return undefined;
    };
    /**
    * @hidden
    */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getGroupByRecords = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        return null;
    };
    /**
     * @protected
     * @param {?} row
     * @return {?}
     */
    IgxGridBaseComponent.prototype.changeRowEditingOverlayStateOnScroll = /**
     * @protected
     * @param {?} row
     * @return {?}
     */
    function (row) {
        if (!this.rowEditable || this.rowEditingOverlay.collapsed) {
            return;
        }
        if (!row) {
            this.toggleRowEditingOverlay(false);
        }
        else {
            this.repositionRowEditingOverlay(row);
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    IgxGridBaseComponent.prototype.openRowOverlay = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.configureRowEditingOverlay(id, this.rowList.length <= MIN_ROW_EDITING_COUNT_THRESHOLD);
        this.rowEditingOverlay.open(this.rowEditSettings);
        this.rowEditPositioningStrategy.isTopInitialPosition = this.rowEditPositioningStrategy.isTop;
        this._wheelListener = this.rowEditingWheelHandler.bind(this);
        this.rowEditingOverlay.element.addEventListener('wheel', this._wheelListener);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxGridBaseComponent.prototype.closeRowEditingOverlay = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.rowEditingOverlay.element.removeEventListener('wheel', this._wheelListener);
        this.rowEditPositioningStrategy.isTopInitialPosition = null;
        this.rowEditingOverlay.close();
        this.rowEditingOverlay.element.parentElement.style.display = '';
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} show
     * @return {?}
     */
    IgxGridBaseComponent.prototype.toggleRowEditingOverlay = /**
     * @hidden
     * @param {?} show
     * @return {?}
     */
    function (show) {
        /** @type {?} */
        var rowStyle = this.rowEditingOverlay.element.style;
        if (show) {
            rowStyle.display = 'block';
        }
        else {
            rowStyle.display = 'none';
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} row
     * @return {?}
     */
    IgxGridBaseComponent.prototype.repositionRowEditingOverlay = /**
     * @hidden
     * @param {?} row
     * @return {?}
     */
    function (row) {
        if (!this.rowEditingOverlay.collapsed) {
            /** @type {?} */
            var rowStyle = this.rowEditingOverlay.element.parentElement.style;
            if (row) {
                rowStyle.display = '';
                this.configureRowEditingOverlay(row.rowID);
                this.rowEditingOverlay.reposition();
            }
            else {
                rowStyle.display = 'none';
            }
        }
    };
    /**
     * @private
     * @param {?} rowID
     * @param {?=} useOuter
     * @return {?}
     */
    IgxGridBaseComponent.prototype.configureRowEditingOverlay = /**
     * @private
     * @param {?} rowID
     * @param {?=} useOuter
     * @return {?}
     */
    function (rowID, useOuter) {
        if (useOuter === void 0) { useOuter = false; }
        this.rowEditSettings.outlet = useOuter ? this.parentRowOutletDirective : this.rowOutletDirective;
        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;
        /** @type {?} */
        var targetRow = this.gridAPI.get_row_by_key(rowID);
        if (!targetRow) {
            return;
        }
        this.rowEditPositioningStrategy.settings.target = targetRow.element.nativeElement;
        this.toggleRowEditingOverlay(true);
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowChangesCount", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            if (!this.crudService.row) {
                return 0;
            }
            /** @type {?} */
            var rowChanges = this.transactions.getAggregatedValue(this.crudService.row.id, false);
            return rowChanges ? Object.keys(rowChanges).length : 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @protected
     * @param {?} rowIndex
     * @param {?} value
     * @return {?}
     */
    IgxGridBaseComponent.prototype.writeToData = /**
     * @protected
     * @param {?} rowIndex
     * @param {?} value
     * @return {?}
     */
    function (rowIndex, value) {
        mergeObjects(this.gridAPI.get_all_data()[rowIndex], value);
    };
    /**
     * @param {?} commit
     * @param {?} row
     * @return {?}
     */
    IgxGridBaseComponent.prototype.endRowTransaction = /**
     * @param {?} commit
     * @param {?} row
     * @return {?}
     */
    function (commit, row) {
        row.newData = this.transactions.getAggregatedValue(row.id, true);
        /** @type {?} */
        var args = row.createEditEventArgs();
        if (!commit) {
            this.onRowEditCancel.emit(args);
            this.transactions.endPending(false);
        }
        else {
            args = this.gridAPI.update_row(row, row.newData);
        }
        if (args.cancel) {
            this.transactions.startPending();
            return;
        }
        this.crudService.endRowEdit();
        this.closeRowEditingOverlay();
    };
    // TODO: Refactor
    /**
     * Finishes the row transactions on the current row.
     * If `commit === true`, passes them from the pending state to the data (or transaction service)
     *
     * Binding to the event
     * ```html
     * <button igxButton (click)="grid.endEdit(true)">Commit Row</button>
     * ```
     * @param commit
     */
    // TODO: Refactor
    /**
     * Finishes the row transactions on the current row.
     * If `commit === true`, passes them from the pending state to the data (or transaction service)
     *
     * Binding to the event
     * ```html
     * <button igxButton (click)="grid.endEdit(true)">Commit Row</button>
     * ```
     * @param {?=} commit
     * @param {?=} event
     * @return {?}
     */
    IgxGridBaseComponent.prototype.endEdit = 
    // TODO: Refactor
    /**
     * Finishes the row transactions on the current row.
     * If `commit === true`, passes them from the pending state to the data (or transaction service)
     *
     * Binding to the event
     * ```html
     * <button igxButton (click)="grid.endEdit(true)">Commit Row</button>
     * ```
     * @param {?=} commit
     * @param {?=} event
     * @return {?}
     */
    function (commit, event) {
        if (commit === void 0) { commit = true; }
        /** @type {?} */
        var row = this.crudService.row;
        /** @type {?} */
        var cell = this.crudService.cell;
        /** @type {?} */
        var columnindex = cell ? cell.column.index : -1;
        /** @type {?} */
        var ri = row ? row.index : -1;
        // TODO: Merge the crudService with wht BaseAPI service
        if (!row && !cell) {
            return;
        }
        commit ? this.gridAPI.submit_value() : this.gridAPI.escape_editMode();
        if (!this.rowEditable || this.rowEditingOverlay && this.rowEditingOverlay.collapsed || !row) {
            return;
        }
        this.endRowTransaction(commit, row);
        /** @type {?} */
        var currentCell = this.gridAPI.get_cell_by_index(ri, columnindex);
        if (currentCell && event) {
            currentCell.nativeElement.focus();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @private
     * @param {?} event
     * @return {?}
     */
    IgxGridBaseComponent.prototype.rowEditingWheelHandler = /**
     * @hidden
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.deltaY > 0) {
            this.verticalScrollContainer.scrollNext();
        }
        else {
            this.verticalScrollContainer.scrollPrev();
        }
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "dataWithAddedInTransactionRows", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            /** @type {?} */
            var result = (/** @type {?} */ (cloneArray(this.gridAPI.get_all_data())));
            if (this.transactions.enabled) {
                result.push.apply(result, tslib_1.__spread(this.transactions.getAggregatedChanges(true)
                    .filter(function (t) { return t.type === TransactionType.ADD; })
                    .map(function (t) { return t.newValue; })));
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "dataLength", {
        get: /**
         * @return {?}
         */
        function () {
            return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data().length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxGridBaseComponent.prototype.hasHorizontalScroll = /**
     * @return {?}
     */
    function () {
        return this.totalWidth - this.unpinnedWidth > 0;
    };
    /**
     * @protected
     * @param {?} row
     * @return {?}
     */
    IgxGridBaseComponent.prototype._restoreVirtState = /**
     * @protected
     * @param {?} row
     * @return {?}
     */
    function (row) {
        // check virtualization state of data record added from cache
        // in case state is no longer valid - update it.
        /** @type {?} */
        var rowForOf = row.virtDirRow;
        /** @type {?} */
        var gridScrLeft = rowForOf.getHorizontalScroll().scrollLeft;
        /** @type {?} */
        var left = -parseInt(rowForOf.dc.instance._viewContainer.element.nativeElement.style.left, 10);
        /** @type {?} */
        var actualScrollLeft = left + rowForOf.getColumnScrollLeft(rowForOf.state.startIndex);
        if (gridScrLeft !== actualScrollLeft) {
            rowForOf.onHScroll(gridScrLeft);
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getExportExcel = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        return this._exportExcel;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getExportCsv = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        return this._exportCsv;
    };
    /**
    * @hidden
    */
    /**
     * @hidden
     * @param {?} rowData
     * @return {?}
     */
    IgxGridBaseComponent.prototype.isSummaryRow = /**
     * @hidden
     * @param {?} rowData
     * @return {?}
     */
    function (rowData) {
        return rowData.summaries && (rowData.summaries instanceof Map);
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "isAttachedToDom", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @protected
         * @return {?}
         */
        function () {
            return this.document.body.contains(this.nativeElement);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} args
     * @return {?}
     */
    IgxGridBaseComponent.prototype.cachedViewLoaded = /**
     * @hidden
     * @param {?} args
     * @return {?}
     */
    function (args) {
        var _this = this;
        if (args.context['templateID'] === 'dataRow' && args.context['$implicit'] === args.oldContext['$implicit']) {
            args.view.detectChanges();
            /** @type {?} */
            var row = this.getRowByIndex(args.context.index);
            if (row && row.cells) {
                row.cells.forEach(function (c) {
                    c.highlightText(_this.lastSearchInfo.searchText, _this.lastSearchInfo.caseSensitive, _this.lastSearchInfo.exactMatch);
                });
            }
        }
        if (this.hasHorizontalScroll()) {
            /** @type {?} */
            var tmplId = args.context.templateID;
            /** @type {?} */
            var index_1 = args.context.index;
            args.view.detectChanges();
            /** @type {?} */
            var row = tmplId === 'dataRow' ? this.getRowByIndex(index_1) : null;
            /** @type {?} */
            var summaryRow = tmplId === 'summaryRow' ? this.summariesRowList.toArray().find(function (sr) { return sr.dataRowIndex === index_1; }) : null;
            if (row && row instanceof IgxRowComponent) {
                this._restoreVirtState(row);
            }
            else if (summaryRow) {
                this._restoreVirtState(summaryRow);
            }
        }
    };
    /** @nocollapse */
    IgxGridBaseComponent.ctorParameters = function () { return [
        { type: IgxGridSelectionService },
        { type: IgxGridCRUDService },
        { type: GridBaseAPIService },
        { type: IgxSelectionAPIService },
        { type: undefined, decorators: [{ type: Inject, args: [IgxGridTransaction,] }] },
        { type: ElementRef },
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: IterableDiffers },
        { type: ViewContainerRef },
        { type: IgxGridNavigationService },
        { type: IgxFilteringService },
        { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
        { type: IgxGridSummaryService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    IgxGridBaseComponent.propDecorators = {
        resourceStrings: [{ type: Input }],
        autoGenerate: [{ type: Input }],
        emptyGridTemplate: [{ type: Input }],
        loadingGridTemplate: [{ type: Input }],
        filteringLogic: [{ type: Input }],
        filteringExpressionsTree: [{ type: Input }],
        locale: [{ type: Input }],
        paging: [{ type: Input }],
        page: [{ type: Input }],
        perPage: [{ type: Input }],
        paginationTemplate: [{ type: Input }],
        columnHiding: [{ type: Input }],
        rowSelectable: [{ type: Input }],
        rowDraggable: [{ type: Input }],
        rowEditable: [{ type: Input }],
        height: [{ type: HostBinding, args: ['style.height',] }, { type: Input }],
        width: [{ type: HostBinding, args: ['style.width',] }, { type: Input }],
        evenRowCSS: [{ type: Input }],
        oddRowCSS: [{ type: Input }],
        rowHeight: [{ type: Input }],
        columnWidth: [{ type: Input }],
        primaryKey: [{ type: Input }],
        emptyGridMessage: [{ type: Input }],
        isLoading: [{ type: Input }],
        emptyFilteredGridMessage: [{ type: Input }],
        columnHidingTitle: [{ type: Input }],
        columnPinning: [{ type: Input }],
        columnPinningTitle: [{ type: Input }],
        allowFiltering: [{ type: Input }],
        filterMode: [{ type: Input }],
        summaryPosition: [{ type: Input }],
        summaryCalculationMode: [{ type: Input }],
        onCellClick: [{ type: Output }],
        onSelection: [{ type: Output }],
        onRowSelectionChange: [{ type: Output }],
        onColumnPinning: [{ type: Output }],
        onCellEditCancel: [{ type: Output }],
        onCellEditEnter: [{ type: Output }],
        onCellEdit: [{ type: Output }],
        onRowEditEnter: [{ type: Output }],
        onRowEdit: [{ type: Output }],
        onRowEditCancel: [{ type: Output }],
        onColumnInit: [{ type: Output }],
        onSortingDone: [{ type: Output }],
        onFilteringDone: [{ type: Output }],
        onPagingDone: [{ type: Output }],
        onRowAdded: [{ type: Output }],
        onRowDeleted: [{ type: Output }],
        onDataPreLoad: [{ type: Output }],
        onColumnResized: [{ type: Output }],
        onContextMenu: [{ type: Output }],
        onDoubleClick: [{ type: Output }],
        onColumnVisibilityChanged: [{ type: Output }],
        onColumnMovingStart: [{ type: Output }],
        onColumnMoving: [{ type: Output }],
        onColumnMovingEnd: [{ type: Output }],
        onFocusChange: [{ type: Output }],
        onGridKeydown: [{ type: Output }],
        onRowDragStart: [{ type: Output }],
        onRowDragEnd: [{ type: Output }],
        resizeLine: [{ type: ViewChild, args: [IgxGridColumnResizerComponent,] }],
        columnList: [{ type: ContentChildren, args: [IgxColumnComponent, { read: IgxColumnComponent, descendants: true },] }],
        excelStyleSortingTemplateDirective: [{ type: ContentChild, args: [IgxExcelStyleSortingTemplateDirective, { read: IgxExcelStyleSortingTemplateDirective },] }],
        excelStyleMovingTemplateDirective: [{ type: ContentChild, args: [IgxExcelStyleMovingTemplateDirective, { read: IgxExcelStyleMovingTemplateDirective },] }],
        excelStyleHidingTemplateDirective: [{ type: ContentChild, args: [IgxExcelStyleHidingTemplateDirective, { read: IgxExcelStyleHidingTemplateDirective },] }],
        excelStylePinningTemplateDirective: [{ type: ContentChild, args: [IgxExcelStylePinningTemplateDirective, { read: IgxExcelStylePinningTemplateDirective },] }],
        headerGroups: [{ type: ViewChildren, args: [IgxGridHeaderGroupComponent, { read: IgxGridHeaderGroupComponent },] }],
        _rowList: [{ type: ViewChildren, args: ['row',] }],
        _summaryRowList: [{ type: ViewChildren, args: ['summaryRow', { read: IgxSummaryRowComponent },] }],
        _dataRowList: [{ type: ViewChildren, args: [IgxRowComponent, { read: IgxRowComponent },] }],
        emptyFilteredGridTemplate: [{ type: ViewChild, args: ['emptyFilteredGrid', { read: TemplateRef },] }],
        emptyGridDefaultTemplate: [{ type: ViewChild, args: ['defaultEmptyGrid', { read: TemplateRef },] }],
        loadingGridDefaultTemplate: [{ type: ViewChild, args: ['defaultLoadingGrid', { read: TemplateRef },] }],
        parentVirtDir: [{ type: ViewChild, args: ['scrollContainer', { read: IgxGridForOfDirective },] }],
        toolbarCustomContentTemplates: [{ type: ContentChildren, args: [IgxGridToolbarCustomContentDirective, { read: IgxGridToolbarCustomContentDirective, descendants: false },] }],
        verticalScrollContainer: [{ type: ViewChild, args: ['verticalScrollContainer', { read: IgxGridForOfDirective },] }],
        verticalScroll: [{ type: ViewChild, args: ['verticalScrollHolder', { read: IgxGridForOfDirective },] }],
        scr: [{ type: ViewChild, args: ['scr', { read: ElementRef },] }],
        paginator: [{ type: ViewChild, args: ['paginator', { read: ElementRef },] }],
        headerContainer: [{ type: ViewChild, args: ['headerContainer', { read: IgxGridForOfDirective },] }],
        headerCheckboxContainer: [{ type: ViewChild, args: ['headerCheckboxContainer',] }],
        headerDragContainer: [{ type: ViewChild, args: ['headerDragContainer',] }],
        headerGroupContainer: [{ type: ViewChild, args: ['headerGroupContainer',] }],
        headerCheckbox: [{ type: ViewChild, args: ['headerCheckbox', { read: IgxCheckboxComponent },] }],
        filteringRow: [{ type: ViewChild, args: ['filteringRow', { read: IgxGridFilteringRowComponent },] }],
        theadRow: [{ type: ViewChild, args: ['theadRow',] }],
        tbody: [{ type: ViewChild, args: ['tbody',] }],
        tfoot: [{ type: ViewChild, args: ['tfoot',] }],
        _outletDirective: [{ type: ViewChild, args: ['igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective },] }],
        rowEditingOutletDirective: [{ type: ViewChild, args: ['igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective },] }],
        dragIndicatorIconBase: [{ type: ViewChild, args: ['dragIndicatorIconBase', { read: TemplateRef },] }],
        defaultRowEditTemplate: [{ type: ViewChild, args: ['defaultRowEditTemplate', { read: TemplateRef },] }],
        rowEditCustom: [{ type: ContentChild, args: [IgxRowEditTemplateDirective, { read: TemplateRef },] }],
        rowEditText: [{ type: ContentChild, args: [IgxRowEditTextDirective, { read: TemplateRef },] }],
        rowEditActions: [{ type: ContentChild, args: [IgxRowEditActionsDirective, { read: TemplateRef },] }],
        rowEditTabsDEFAULT: [{ type: ViewChildren, args: [IgxRowEditTabStopDirective,] }],
        rowEditTabsCUSTOM: [{ type: ContentChildren, args: [IgxRowEditTabStopDirective,] }],
        rowEditingOverlay: [{ type: ViewChild, args: [IgxToggleDirective,] }],
        tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        hostClass: [{ type: HostBinding, args: ['attr.class',] }],
        hostRole: [{ type: HostBinding, args: ['attr.role',] }],
        sortingExpressions: [{ type: Input }],
        hiddenColumnsText: [{ type: Input }],
        pinnedColumnsText: [{ type: Input }],
        toolbar: [{ type: ViewChild, args: ['toolbar', { read: IgxGridToolbarComponent },] }],
        toolbarHtml: [{ type: ViewChild, args: ['toolbar', { read: ElementRef },] }],
        showToolbar: [{ type: Input }],
        toolbarTitle: [{ type: Input }],
        exportExcel: [{ type: Input }],
        exportCsv: [{ type: Input }],
        exportText: [{ type: Input }],
        exportExcelText: [{ type: Input }],
        exportCsvText: [{ type: Input }],
        onToolbarExporting: [{ type: Output }],
        onRangeSelection: [{ type: Output }]
    };
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxGridBaseComponent.prototype, "filteringLogic", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxGridBaseComponent.prototype, "filteringExpressionsTree", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxGridBaseComponent.prototype, "rowSelectable", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxGridBaseComponent.prototype, "rowEditable", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGridBaseComponent.prototype, "height", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGridBaseComponent.prototype, "width", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxGridBaseComponent.prototype, "rowHeight", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGridBaseComponent.prototype, "columnWidth", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Object)
    ], IgxGridBaseComponent.prototype, "primaryKey", void 0);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxGridBaseComponent.prototype, "columnPinning", null);
    tslib_1.__decorate([
        DeprecateProperty('onFocusChange event is deprecated. Use onGridKeydown event instead.'),
        tslib_1.__metadata("design:type", Object)
    ], IgxGridBaseComponent.prototype, "onFocusChange", void 0);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], IgxGridBaseComponent.prototype, "sortingExpressions", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxGridBaseComponent.prototype, "hiddenColumnsText", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxGridBaseComponent.prototype, "pinnedColumnsText", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxGridBaseComponent.prototype, "showToolbar", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGridBaseComponent.prototype, "toolbarTitle", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxGridBaseComponent.prototype, "exportExcel", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxGridBaseComponent.prototype, "exportCsv", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGridBaseComponent.prototype, "exportText", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGridBaseComponent.prototype, "exportExcelText", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGridBaseComponent.prototype, "exportCsvText", null);
    tslib_1.__decorate([
        DeprecateMethod('There is no need to call clearSummaryCache method.The summary cache is cleared automatically when needed.'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], IgxGridBaseComponent.prototype, "clearSummaryCache", null);
    tslib_1.__decorate([
        DeprecateMethod('There is no need to call recalculateSummaries method. The summaries are recalculated automatically when needed.'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], IgxGridBaseComponent.prototype, "recalculateSummaries", null);
    return IgxGridBaseComponent;
}(DisplayDensityBase));
export { IgxGridBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._scrollWidth;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._resourceStrings;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._emptyGridMessage;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._emptyFilteredGridMessage;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._isLoading;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._locale;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._observer;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._destroyed;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.overlayIDs;
    /**
     * An \@Input property that autogenerates the `IgxGridComponent` columns.
     * The default value is false.
     * ```html
     * <igx-grid [data]="Data" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.autoGenerate;
    /** @type {?} */
    IgxGridBaseComponent.prototype.id;
    /**
     * An \@Input property that sets a custom template when the `IgxGridComponent` is empty.
     * ```html
     * <igx-grid [id]="'igx-grid-1'" [data]="Data" [emptyGridTemplate]="myTemplate" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.emptyGridTemplate;
    /**
     * An \@Input property that sets a custom template when the `IgxGridComponent` is loading.
     * ```html
     * <igx-grid [id]="'igx-grid-1'" [data]="Data" [loadingGridTemplate]="myTemplate" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.loadingGridTemplate;
    /**
     * You can provide a custom `ng-template` for the pagination UI of the grid.
     * ```html
     * <igx-grid #grid [paging]="true" [myTemplate]="myTemplate" [height]="'305px'"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.paginationTemplate;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowDragging;
    /**
     * An \@Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.
     * ```html
     * <igx-grid #grid [data]="Data" [evenRowCSS]="'igx-grid--my-even-class'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.evenRowCSS;
    /**
     * An \@Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.
     * ```html
     * <igx-grid #grid [data]="Data" [evenRowCSS]="'igx-grid--my-odd-class'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.oddRowCSS;
    /**
     * An \@Input property that sets the primary key of the `IgxGridComponent`.
     * ```html
     * <igx-grid #grid [data]="localData" [showToolbar]="true" [primaryKey]="'ProductID'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.primaryKey;
    /**
     * A property that allows the columns to be auto-generated once again after the initialization of the grid.
     * This will allow to bind the grid to remote data and having auto-generated columns at the same time.
     * Note that after generating the columns, this property would be disabled to avoid re-creating
     * columns each time a new data is assigned.
     * ```typescript
     *  this.grid.shouldGenerate = true;
     *  this.remoteData = this.remoteService.remoteData;
     * ```
     * @type {?}
     */
    IgxGridBaseComponent.prototype.shouldGenerate;
    /**
     * An \@Input property that sets the title to be displayed in the built-in column hiding UI.
     * ```html
     * <igx-grid [showToolbar]="true" [columnHiding]="true" columnHidingTitle="Column Hiding"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.columnHidingTitle;
    /**
     * An \@Input property that sets the title to be displayed in the UI of the column pinning.
     * ```html
     * <igx-grid #grid [data]="localData" [columnPinning]="'true" [columnPinningTitle]="'Column Hiding'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.columnPinningTitle;
    /**
     * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.
     * ```html
     * <igx-grid #grid (onCellClick)="onCellClick($event)" [data]="localData" [height]="'305px'" [autoGenerate]="true"></igx-grid>
     * ```
     * ```typescript
     * public onCellClick(e){
     *     alert("The cell has been clicked!");
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onCellClick;
    /**
     * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.
     * ```html
     * <igx-grid #grid (onSelection)="onCellSelect($event)" [data]="localData" [height]="'305px'" [autoGenerate]="true"></igx-grid>
     * ```
     * ```typescript
     * public onCellSelect(e){
     *     alert("The cell has been selected!");
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onSelection;
    /**
     *  Emitted when `IgxGridRowComponent` is selected.
     * ```html
     * <igx-grid #grid (onRowSelectionChange)="onRowClickChange($event)" [data]="localData" [autoGenerate]="true"></igx-grid>
     * ```
     * ```typescript
     * public onCellClickChange(e){
     *     alert("The selected row has been changed!");
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowSelectionChange;
    /**
     * Emitted when `IgxColumnComponent` is pinned.
     * The index that the column is inserted at may be changed through the `insertAtIndex` property.
     * ```typescript
     * public columnPinning(event) {
     *     if (event.column.field === "Name") {
     *       event.insertAtIndex = 0;
     *     }
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnPinning;
    /**
     * An \@Output property emitting an event when `IgxGridCellComponent`
     * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      cellID: {
     *          columnID: int,
     *          rowID: int,
     *          rowIndex: int
     *      }
     *      newValue: object,
     *      oldValue: object,
     *      rowID: int
     *  }
     *
     * ```typescript
     * editCancel(event: IGridEditEventArgs){
     *    const rowID: IgxColumnComponent = event.rowID;
     * }
     * ```
     * ```html
     * <igx-grid #grid3 (onCellEditCancel)="editCancel($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'" [rowSelectable]="true">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     * \@memberof IgxGridComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onCellEditCancel;
    /**
     * An \@Output property emitting an event when `IgxGridCellComponent` enters edit mode.
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      cellID: {
     *          columnID: int,
     *          rowID: int,
     *          rowIndex: int
     *      }
     *      oldValue: object,
     *      rowID: int
     *  }
     *
     * ```typescript
     * editStart(event: IGridEditEventArgs){
     *    const value: IgxColumnComponent = event.newValue;
     * }
     * ```
     * ```html
     * <igx-grid #grid3 (onCellEditEnter)="editStart($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'" [rowSelectable]="true">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     * \@memberof IgxGridComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onCellEditEnter;
    /**
     * An \@Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.
     * Event is fired after editing is completed, when the cell is exiting edit mode.
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      cellID: {
     *          columnID: int,
     *          rowID: int,
     *          rowIndex: int
     *      }
     *      newValue: object,
     *      oldValue: object,
     *      rowID: int
     *  }
     *
     * ```typescript
     * editDone(event: IGridEditEventArgs){
     *    const value: IgxColumnComponent = event.newValue;
     * }
     * ```
     * ```html
     * <igx-grid #grid3 (onCellEdit)="editDone($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'" [rowSelectable]="true">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onCellEdit;
    /**
     * An \@Output property emitting an event when [rowEditable]="true" a row enters edit mode.
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      oldValue: <rowObj>,
     *      rowID: int
     *  }
     *
     * Bind to the event in markup as follows:
     * ```html
     * <igx-grid #grid3 (onRowEditEnter)="editStart($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'" [rowSelectable]="true" [rowEditable]="true">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     * ```typescript
     *      editStart(event: IGridEditEventArgs) {
     *          const editedRowObj = event.oldValue;
     *          const cancelValue = event.cancel;
     *          const rowID = event.rowID;
     *      }
     * ```
     * \@memberof IgxGridComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowEditEnter;
    /**
     * An \@Output property emitting an event when [rowEditable]="true" & `endEdit(true)` is called.
     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,
     * performing paging operation, column resizing, pinning, moving or hitting  `Done`
     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      newValue: <rowObj>,
     *      oldValue: <rowObj>,
     *      rowID: int
     *  }
     *
     * Bind to the event in markup as follows:
     * ```html
     * <igx-grid #grid3 (onRowEdit)="editDone($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'" [rowSelectable]="true" [rowEditable]="true">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     *
     * ```typescript
     *      editDone(event: IGridEditEventArgs) {
     *          const originalRowObj = event.oldValue;
     *          const updatedRowObj = event.newValue;
     *          const cancelValue = event.cancel;
     *          const rowID = event.rowID;
     *      }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowEdit;
    /**
     * An \@Output property emitting an event when [rowEditable]="true" & `endEdit(false)` is called.
     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button
     * in the row editing overlay.
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      newValue: <rowObj>,
     *      oldValue: <rowObj>,
     *      rowID: int
     *  }
     *
     * Bind to the event in markup as follows:
     * ```html
     * <igx-grid #grid3 (onRowEditCancel)="editCancel($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'" [rowSelectable]="true" [rowEditable]="true">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     * ```typescript
     *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {
     *          const originalRowObj = event.oldValue;
     *          const updatedRowObj = event.newValue;
     *          const cancelValue = event.cancel;
     *          const rowID = event.rowID;
     *      }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowEditCancel;
    /**
     * Emitted when a grid column is initialized. Returns the column object.
     * ```html
     * <igx-grid #grid [data]="localData" [onColumnInit]="initColumns($event)" [autoGenerate]="true"></igx-grid>
     * ```
     * ```typescript
     * initColumns(event: IgxColumnComponent) {
     * const column: IgxColumnComponent = event;
     *       column.filterable = true;
     *       column.sortable = true;
     *       column.editable = true;
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnInit;
    /**
     * Emitted when sorting is performed through the UI. Returns the sorting expression.
     * ```html
     * <igx-grid #grid [data]="localData" [autoGenerate]="true" (onSortingDone)="sortingDone($event)"></igx-grid>
     * ```
     * ```typescript
     * sortingDone(event: SortingDirection){
     *     const sortingDirection = event;
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onSortingDone;
    /**
     * Emitted when filtering is performed through the UI.
     * Returns the filtering expressions tree of the column for which filtering was performed.
     * ```typescript
     * filteringDone(event: IFilteringExpressionsTree){
     *     const filteringTree = event;
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true" (onFilteringDone)="filteringDone($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onFilteringDone;
    /**
     * Emitted when paging is performed. Returns an object consisting of the previous and next pages.
     * ```typescript
     * pagingDone(event: IPageEventArgs){
     *     const paging = event;
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true" (onPagingDone)="pagingDone($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onPagingDone;
    /**
     * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.
     * Returns the data for the new `IgxGridRowComponent` object.
     * ```typescript
     * rowAdded(event: IRowDataEventArgs){
     *    const rowInfo = event;
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" (onRowAdded)="rowAdded($event)" [height]="'305px'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowAdded;
    /**
     * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.
     * Returns an `IRowDataEventArgs` object.
     * ```typescript
     * rowDeleted(event: IRowDataEventArgs){
     *    const rowInfo = event;
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" (onRowDeleted)="rowDeleted($event)" [height]="'305px'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowDeleted;
    /**
     * Emitted when a new chunk of data is loaded from virtualization.
     * ```typescript
     *  <igx-grid #grid [data]="localData" [autoGenerate]="true" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onDataPreLoad;
    /**
     * Emitted when `IgxColumnComponent` is resized.
     * Returns the `IgxColumnComponent` object's old and new width.
     * ```typescript
     * resizing(event: IColumnResizeEventArgs){
     *     const grouping = event;
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" (onColumnResized)="resizing($event)" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnResized;
    /**
     * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.
     * ```typescript
     * contextMenu(event: IGridCellEventArgs){
     *     const resizing = event;
     *     console.log(resizing);
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" (onContextMenu)="contextMenu($event)" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onContextMenu;
    /**
     * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.
     * ```typescript
     * dblClick(event: IGridCellEventArgs){
     *     const dblClick = event;
     *     console.log(dblClick);
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" (onDoubleClick)="dblClick($event)" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onDoubleClick;
    /**
     * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }
     * ```typescript
     * visibilityChanged(event: IColumnVisibilityChangedEventArgs){
     *    const visiblity = event;
     * }
     * ```
     * ```html
     * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnVisibilityChanged)="visibilityChanged($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnVisibilityChanged;
    /**
     * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.
     * ```typescript
     * movingStart(event: IColumnMovingStartEventArgs){
     *     const movingStarts = event;
     * }
     * ```
     * ```html
     * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMovingStart)="movingStart($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnMovingStart;
    /**
     * Emitted throughout the `IgxColumnComponent` moving operation.
     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.
     * ```typescript
     * moving(event: IColumnMovingEventArgs){
     *     const moving = event;
     * }
     * ```
     * ```html
     * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMoving)="moving($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnMoving;
    /**
     * Emitted when `IgxColumnComponent` moving ends.
     * Returns the source and target `IgxColumnComponent` objects.
     * ```typescript
     * movingEnds(event: IColumnMovingEndEventArgs){
     *     const movingEnds = event;
     * }
     * ```
     * ```html
     * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMovingEnd)="movingEnds($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnMovingEnd;
    /**
     * @deprecated you should use onGridKeydown event
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onFocusChange;
    /**
     * Emitted when keydown is triggered over element inside grid's body.
     * This event is fired only if the key combination is supported in the grid.
     * Return the target type, target object and the original event. This event is cancelable.
     * ```typescript
     * customKeydown(args: IGridKeydownEventArgs) {
     *  const keydownEvent = args.event;
     * }
     * ```
     * ```html
     *  <igx-grid (onGridKeydown)="customKeydown($event)"></igx-grid>
     * ```
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onGridKeydown;
    /**
     * Emitted when start dragging a row.
     * Return the dragged row.
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowDragStart;
    /**
     * Emitted when dropping a row.
     * Return the dropped row.
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowDragEnd;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.resizeLine;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.columnList;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.excelStyleSortingTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.excelStyleMovingTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.excelStyleHidingTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.excelStylePinningTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerGroups;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._rowList;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._summaryRowList;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._dataRowList;
    /**
     * A template reference for the template when the filtered `IgxGridComponent` is empty.
     * ```
     * const emptyTempalte = this.grid.emptyGridTemplate;
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.emptyFilteredGridTemplate;
    /**
     * A template reference for the template when the `IgxGridComponent` is empty.
     * ```
     * const emptyTempalte = this.grid.emptyGridTemplate;
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.emptyGridDefaultTemplate;
    /** @type {?} */
    IgxGridBaseComponent.prototype.loadingGridDefaultTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.parentVirtDir;
    /** @type {?} */
    IgxGridBaseComponent.prototype.toolbarCustomContentTemplates;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.verticalScrollContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.verticalScroll;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.scr;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.paginator;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerCheckboxContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerDragContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerGroupContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerCheckbox;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.filteringRow;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.theadRow;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.tbody;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.tfoot;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._outletDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditingOutletDirective;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxGridBaseComponent.prototype.dragIndicatorIconBase;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.defaultRowEditTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditCustom;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditText;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditActions;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditTabsDEFAULT;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditTabsCUSTOM;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditingOverlay;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.tabindex;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.hostRole;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.columnsWithNoSetWidths;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._showToolbar;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._exportExcel;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._exportCsv;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._toolbarTitle;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._exportText;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._exportExcelText;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._exportCsvText;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._rowEditable;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._currentRowState;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._filteredSortedData;
    /**
     * Provides access to the `IgxToolbarComponent`.
     * ```typescript
     * const gridToolbar = this.grid.toolbar;
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.toolbar;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.toolbarHtml;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditMessage;
    /**
     * Emitted when an export process is initiated by the user.
     * ```typescript
     * toolbarExporting(event: IGridToolbarExportEventArgs){
     *     const toolbarExporting = event;
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onToolbarExporting;
    /** @type {?} */
    IgxGridBaseComponent.prototype.onRangeSelection;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.pagingState;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.calcWidth;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.calcHeight;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.tfootHeight;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.chipsGoupingExpressions;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.summariesHeight;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.draggedColumn;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.allRowsSelected;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.disableTransitions;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.lastSearchInfo;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.columnWidthSetByUser;
    /** @type {?} */
    IgxGridBaseComponent.prototype.data;
    /** @type {?} */
    IgxGridBaseComponent.prototype.filteredData;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.destroy$;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._perPage;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._page;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._paging;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._rowSelection;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._rowDrag;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._pipeTrigger;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._summaryPipeTrigger;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._columns;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._pinnedColumns;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._unpinnedColumns;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._filteringExpressionsTree;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._sortingExpressions;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._maxLevelHeaderDepth;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._columnHiding;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._columnPinning;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._keydownListener;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._vScrollListener;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._hScrollListener;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._wheelListener;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._allowFiltering;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._filterMode;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.resizeHandler;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.columnListDiffer;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._hiddenColumnsText;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._pinnedColumnsText;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._width;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._rowHeight;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._ngAfterViewInitPassed;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._horizontalForOfs;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._multiRowLayoutRowSize;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._totalWidth;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._pinnedVisible;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._unpinnedVisible;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._pinnedWidth;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._unpinnedWidth;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._visibleColumns;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._columnGroups;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._columnWidth;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._defaultTargetRecordNumber;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._summaryPosition;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._summaryCalculationMode;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.rowEditPositioningStrategy;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.rowEditSettings;
    /** @type {?} */
    IgxGridBaseComponent.prototype.selectionService;
    /** @type {?} */
    IgxGridBaseComponent.prototype.crudService;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.gridAPI;
    /** @type {?} */
    IgxGridBaseComponent.prototype.selection;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._transactions;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.zone;
    /** @type {?} */
    IgxGridBaseComponent.prototype.document;
    /** @type {?} */
    IgxGridBaseComponent.prototype.cdr;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.resolver;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.differs;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.viewRef;
    /** @type {?} */
    IgxGridBaseComponent.prototype.navigation;
    /** @type {?} */
    IgxGridBaseComponent.prototype.filteringService;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.overlayService;
    /** @type {?} */
    IgxGridBaseComponent.prototype.summaryService;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._displayDensityOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZ3JpZHMvZ3JpZC1iYXNlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBR0gsaUJBQWlCLEVBQ2pCLHdCQUF3QixFQUN4QixlQUFlLEVBQ2YsWUFBWSxFQUNaLFVBQVUsRUFDVixZQUFZLEVBQ1osV0FBVyxFQUNYLE1BQU0sRUFDTixLQUFLLEVBRUwsZUFBZSxFQUNmLE1BQU0sRUFHTixNQUFNLEVBQ04sU0FBUyxFQUNULFdBQVcsRUFDWCxTQUFTLEVBQ1QsWUFBWSxFQUNaLGdCQUFnQixFQUNoQixjQUFjLEVBQ2QsUUFBUSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDM0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUF1QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hILE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsY0FBYyxFQUF3QixNQUFNLG1EQUFtRCxDQUFDO0FBR3pHLE9BQU8sRUFBZSxxQkFBcUIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQzNGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQ2xHLE9BQU8sRUFHSCxzQkFBc0IsRUFDdEIsbUJBQW1CLEVBQ25CLGlCQUFpQixFQUNqQixpQkFBaUIs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Ozs7SUFDNUIsZ0RBQThCOzs7OztJQUM5Qiw0Q0FBMkI7Ozs7O0lBQzNCLDhDQUE2Qjs7Ozs7SUFDN0IsK0NBQTZCOzs7OztJQUM3Qiw2Q0FBOEI7Ozs7O0lBRTlCLDRDQUE2Qjs7Ozs7SUFFN0IsMERBQXdDOzs7OztJQUV4QyxnREFBc0Q7Ozs7O0lBQ3RELHVEQUFnRjs7Ozs7SUFFaEYsMERBTUc7Ozs7O0lBRUgsK0NBTUU7O0lBbUVFLGdEQUFnRDs7SUFDaEQsMkNBQXNDOzs7OztJQUN0Qyx1Q0FBNkU7O0lBQzdFLHlDQUF3Qzs7Ozs7SUFDeEMsNkNBQTJGOzs7OztJQUMzRiwwQ0FBOEI7Ozs7O0lBQzlCLG9DQUFvQjs7SUFDcEIsd0NBQWlDOztJQUNqQyxtQ0FBNkI7Ozs7O0lBQzdCLHdDQUE0Qzs7Ozs7SUFDNUMsdUNBQWtDOzs7OztJQUNsQyx1Q0FBbUM7O0lBQ25DLDBDQUEyQzs7SUFDM0MsZ0RBQTRDOzs7OztJQUM1Qyw4Q0FBc0U7O0lBQ3RFLDhDQUE0Qzs7Ozs7SUFDNUMsc0RBQWlHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgICBBZnRlckNvbnRlbnRJbml0LFxuICAgIEFmdGVyVmlld0luaXQsXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgIENvbnRlbnRDaGlsZHJlbixcbiAgICBDb250ZW50Q2hpbGQsXG4gICAgRWxlbWVudFJlZixcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIEl0ZXJhYmxlQ2hhbmdlUmVjb3JkLFxuICAgIEl0ZXJhYmxlRGlmZmVycyxcbiAgICBOZ1pvbmUsXG4gICAgT25EZXN0cm95LFxuICAgIE9uSW5pdCxcbiAgICBPdXRwdXQsXG4gICAgUXVlcnlMaXN0LFxuICAgIFRlbXBsYXRlUmVmLFxuICAgIFZpZXdDaGlsZCxcbiAgICBWaWV3Q2hpbGRyZW4sXG4gICAgVmlld0NvbnRhaW5lclJlZixcbiAgICBJbmplY3Rpb25Ub2tlbixcbiAgICBPcHRpb25hbFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCwgZmlyc3QsIGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IElneFNlbGVjdGlvbkFQSVNlcnZpY2UgfSBmcm9tICcuLi9jb3JlL3NlbGVjdGlvbic7XG5pbXBvcnQgeyBjbG9uZUFycmF5LCBpc0VkZ2UsIGlzTmF2aWdhdGlvbktleSwgQ2FuY2VsYWJsZUV2ZW50QXJncywgZmxhdHRlbiwgbWVyZ2VPYmplY3RzIH0gZnJvbSAnLi4vY29yZS91dGlscyc7XG5pbXBvcnQgeyBEYXRhVHlwZSB9IGZyb20gJy4uL2RhdGEtb3BlcmF0aW9ucy9kYXRhLXV0aWwnO1xuaW1wb3J0IHsgRmlsdGVyaW5nTG9naWMsIElGaWx0ZXJpbmdFeHByZXNzaW9uIH0gZnJvbSAnLi4vZGF0YS1vcGVyYXRpb25zL2ZpbHRlcmluZy1leHByZXNzaW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBJR3JvdXBCeVJlY29yZCB9IGZyb20gJy4uL2RhdGEtb3BlcmF0aW9ucy9ncm91cGJ5LXJlY29yZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSVNvcnRpbmdFeHByZXNzaW9uIH0gZnJvbSAnLi4vZGF0YS1vcGVyYXRpb25zL3NvcnRpbmctZXhwcmVzc2lvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSUZvck9mU3RhdGUsIElneEdyaWRGb3JPZkRpcmVjdGl2ZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvZm9yLW9mL2Zvcl9vZi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSWd4VGV4dEhpZ2hsaWdodERpcmVjdGl2ZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvdGV4dC1oaWdobGlnaHQvdGV4dC1oaWdobGlnaHQuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gICAgSWd4QmFzZUV4cG9ydGVyLFxuICAgIElneEV4cG9ydGVyT3B0aW9uc0Jhc2UsXG4gICAgQWJzb2x1dGVTY3JvbGxTdHJhdGVneSxcbiAgICBIb3Jpem9udGFsQWxpZ25tZW50LFxuICAgIFZlcnRpY2FsQWxpZ25tZW50LFxuICAgIElneE92ZXJsYXlTZXJ2aWNlXG59IGZyb20gJy4uL3NlcnZpY2VzL2luZGV4JztcbmltcG9ydCB7IElneENoZWNrYm94Q29tcG9uZW50IH0gZnJvbSAnLi8uLi9jaGVja2JveC9jaGVja2JveC5jb21wb25lbnQnO1xuaW1wb3J0IHsgR3JpZEJhc2VBUElTZXJ2aWNlIH0gZnJvbSAnLi9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBJZ3hHcmlkQ2VsbENvbXBvbmVudCB9IGZyb20gJy4vY2VsbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSUNvbHVtblZpc2liaWxpdHlDaGFuZ2VkRXZlbnRBcmdzIH0gZnJvbSAnLi9jb2x1bW4taGlkaW5nLWl0ZW0uZGlyZWN0aXZlJztcbmltcG9ydCB7IElneENvbHVtbkNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJU3VtbWFyeUV4cHJlc3Npb24gfSBmcm9tICcuL3N1bW1hcmllcy9ncmlkLXN1bW1hcnknO1xuaW1wb3J0IHsgRHJvcFBvc2l0aW9uLCBDb250YWluZXJQb3NpdGlvbmluZ1N0cmF0ZWd5LCBJZ3hEZWNpbWFsUGlwZUNvbXBvbmVudCwgSWd4RGF0ZVBpcGVDb21wb25lbnQgfSBmcm9tICcuL2dyaWQuY29tbW9uJztcbmltcG9ydCB7IElneEdyaWRUb29sYmFyQ29tcG9uZW50IH0gZnJvbSAnLi9ncmlkLXRvb2xiYXIuY29tcG9uZW50JztcbmltcG9ydCB7IElneFJvd0NvbXBvbmVudCB9IGZyb20gJy4vcm93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hHcmlkSGVhZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9ncmlkLWhlYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4T3ZlcmxheU91dGxldERpcmVjdGl2ZSwgSWd4VG9nZ2xlRGlyZWN0aXZlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy90b2dnbGUvdG9nZ2xlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUsIElGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUgfSBmcm9tICcuLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLWV4cHJlc3Npb25zLXRyZWUnO1xuaW1wb3J0IHsgSUZpbHRlcmluZ09wZXJhdGlvbiB9IGZyb20gJy4uL2RhdGEtb3BlcmF0aW9ucy9maWx0ZXJpbmctY29uZGl0aW9uJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uLCBUcmFuc2FjdGlvblR5cGUsIFRyYW5zYWN0aW9uU2VydmljZSwgU3RhdGUgfSBmcm9tICcuLi9zZXJ2aWNlcy9pbmRleCc7XG5pbXBvcnQge1xuICAgIElneFJvd0VkaXRUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICBJZ3hSb3dFZGl0VGFiU3RvcERpcmVjdGl2ZSxcbiAgICBJZ3hSb3dFZGl0VGV4dERpcmVjdGl2ZSxcbiAgICBJZ3hSb3dFZGl0QWN0aW9uc0RpcmVjdGl2ZVxufSBmcm9tICcuL2dyaWQucm93RWRpdC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSWd4R3JpZE5hdmlnYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9ncmlkLW5hdmlnYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBJRGlzcGxheURlbnNpdHlPcHRpb25zLCBEaXNwbGF5RGVuc2l0eVRva2VuLCBEaXNwbGF5RGVuc2l0eUJhc2UsIERpc3BsYXlEZW5zaXR5IH0gZnJvbSAnLi4vY29yZS9kaXNwbGF5RGVuc2l0eSc7XG5pbXBvcnQgeyBJZ3hHcmlkUm93Q29tcG9uZW50IH0gZnJvbSAnLi9ncmlkJztcbmltcG9ydCB7IElneEZpbHRlcmluZ1NlcnZpY2UgfSBmcm9tICcuL2ZpbHRlcmluZy9ncmlkLWZpbHRlcmluZy5zZXJ2aWNlJztcbmltcG9ydCB7IElneEdyaWRGaWx0ZXJpbmdDZWxsQ29tcG9uZW50IH0gZnJvbSAnLi9maWx0ZXJpbmcvZ3JpZC1maWx0ZXJpbmctY2VsbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgV2F0Y2hDaGFuZ2VzIH0gZnJvbSAnLi93YXRjaC1jaGFuZ2VzJztcbmltcG9ydCB7IElneEdyaWRIZWFkZXJHcm91cENvbXBvbmVudCB9IGZyb20gJy4vZ3JpZC1oZWFkZXItZ3JvdXAuY29tcG9uZW50JztcbmltcG9ydCB7IElneEdyaWRUb29sYmFyQ3VzdG9tQ29udGVudERpcmVjdGl2ZSB9IGZyb20gJy4vZ3JpZC10b29sYmFyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJR3JpZFJlc291cmNlU3RyaW5ncyB9IGZyb20gJy4uL2NvcmUvaTE4bi9ncmlkLXJlc291cmNlcyc7XG5pbXBvcnQgeyBDdXJyZW50UmVzb3VyY2VTdHJpbmdzIH0gZnJvbSAnLi4vY29yZS9pMThuL3Jlc291cmNlcyc7XG5pbXBvcnQgeyBJZ3hHcmlkU3VtbWFyeVNlcnZpY2UgfSBmcm9tICcuL3N1bW1hcmllcy9ncmlkLXN1bW1hcnkuc2VydmljZSc7XG5pbXBvcnQgeyBJZ3hTdW1tYXJ5Um93Q29tcG9uZW50IH0gZnJvbSAnLi9zdW1tYXJpZXMvc3VtbWFyeS1yb3cuY29tcG9uZW50JztcbmltcG9ydCB7IERlcHJlY2F0ZU1ldGhvZCwgRGVwcmVjYXRlUHJvcGVydHkgfSBmcm9tICcuLi9jb3JlL2RlcHJlY2F0ZURlY29yYXRvcnMnO1xuaW1wb3J0IHsgSWd4R3JpZFNlbGVjdGlvblNlcnZpY2UsIEdyaWRTZWxlY3Rpb25SYW5nZSwgSWd4R3JpZENSVURTZXJ2aWNlLCBJZ3hSb3csIElneENlbGwgfSBmcm9tICcuLi9jb3JlL2dyaWQtc2VsZWN0aW9uJztcbmltcG9ydCB7IERyYWdTY3JvbGxEaXJlY3Rpb24gfSBmcm9tICcuL2RyYWctc2VsZWN0LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJQ2FjaGVkVmlld0xvYWRlZEV2ZW50QXJncyB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvdGVtcGxhdGUtb3V0bGV0L3RlbXBsYXRlX291dGxldC5kaXJlY3RpdmUnO1xuaW1wb3J0IHtcbiAgICBJZ3hFeGNlbFN0eWxlU29ydGluZ1RlbXBsYXRlRGlyZWN0aXZlLFxuICAgIElneEV4Y2VsU3R5bGVQaW5uaW5nVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgSWd4RXhjZWxTdHlsZUhpZGluZ1RlbXBsYXRlRGlyZWN0aXZlLFxuICAgIElneEV4Y2VsU3R5bGVNb3ZpbmdUZW1wbGF0ZURpcmVjdGl2ZVxufSBmcm9tICcuL2ZpbHRlcmluZy9leGNlbC1zdHlsZS9ncmlkLmV4Y2VsLXN0eWxlLWZpbHRlcmluZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4R3JpZENvbHVtblJlc2l6ZXJDb21wb25lbnQgfSBmcm9tICcuL2dyaWQtY29sdW1uLXJlc2l6ZXIuY29tcG9uZW50JztcbmltcG9ydCB7IElneEdyaWRGaWx0ZXJpbmdSb3dDb21wb25lbnQgfSBmcm9tICcuL2ZpbHRlcmluZy9ncmlkLWZpbHRlcmluZy1yb3cuY29tcG9uZW50JztcbmltcG9ydCB7IElneERyYWdJbmRpY2F0b3JJY29uRGlyZWN0aXZlIH0gZnJvbSAnLi9yb3ctZHJhZy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSWd4RHJhZ0RpcmVjdGl2ZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvZHJhZ2Ryb3AvZHJhZ2Ryb3AuZGlyZWN0aXZlJztcblxuY29uc3QgTUlOSU1VTV9DT0xVTU5fV0lEVEggPSAxMzY7XG5jb25zdCBGSUxURVJfUk9XX0hFSUdIVCA9IDUwO1xuXG4vLyBCeSBkZWZhdWx0IHJvdyBlZGl0aW5nIG92ZXJsYXkgb3V0bGV0IGlzIGluc2lkZSBncmlkIGJvZHkgc28gdGhhdCBvdmVybGF5IGlzIGhpZGRlbiBiZWxvdyBncmlkIGhlYWRlciB3aGVuIHNjcm9sbGluZy5cbi8vIEluIGNhc2VzIHdoZW4gZ3JpZCBoYXMgMS0yIHJvd3MgdGhlcmUgaXNuJ3QgZW5vdWdoIHNwYWNlIGluIGdyaWQgYm9keSBhbmQgcm93IGVkaXRpbmcgb3ZlcmxheSBzaG91bGQgYmUgc2hvd24gYWJvdmUgaGVhZGVyLlxuLy8gRGVmYXVsdCByb3cgZWRpdGluZyBvdmVybGF5IGhlaWdodCBpcyBoaWdoZXIgdGhlbiByb3cgaGVpZ2h0IHRoYXQgaXMgd2h5IHRoZSBjYXNlIGlzIHZhbGlkIGFsc28gZm9yIHJvdyB3aXRoIDIgcm93cy5cbi8vIE1vcmUgYWNjdXJhdGUgY2FsY3VsYXRpb24gaXMgbm90IHBvc3NpYmxlLCBjYXVzZSByb3cgZWRpdGluZyBvdmVybGF5IGlzIHN0aWxsIG5vdCBzaG93biBhbmQgd2UgZG9uJ3Qga25vdyBpdHMgaGVpZ2h0LFxuLy8gYnV0IGluIHRoZSBzYW1lIHRpbWUgd2UgbmVlZCB0byBzZXQgcm93IGVkaXRpbmcgb3ZlcmxheSBvdXRsZXQgYmVmb3JlIG9wZW5pbmcgdGhlIG92ZXJsYXkgaXRzZWxmLlxuY29uc3QgTUlOX1JPV19FRElUSU5HX0NPVU5UX1RIUkVTSE9MRCA9IDI7XG5cbmV4cG9ydCBjb25zdCBJZ3hHcmlkVHJhbnNhY3Rpb24gPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPignSWd4R3JpZFRyYW5zYWN0aW9uJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUdyaWRDZWxsRXZlbnRBcmdzIHtcbiAgICBjZWxsOiBJZ3hHcmlkQ2VsbENvbXBvbmVudDtcbiAgICBldmVudDogRXZlbnQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUdyaWRFZGl0RXZlbnRBcmdzIGV4dGVuZHMgQ2FuY2VsYWJsZUV2ZW50QXJncyB7XG4gICAgcm93SUQ6IGFueTtcbiAgICBjZWxsSUQ/OiB7XG4gICAgICAgIHJvd0lEOiBhbnksXG4gICAgICAgIGNvbHVtbklEOiBhbnksXG4gICAgICAgIHJvd0luZGV4OiBudW1iZXJcbiAgICB9O1xuICAgIG9sZFZhbHVlOiBhbnk7XG4gICAgbmV3VmFsdWU/OiBhbnk7XG4gICAgZXZlbnQ/OiBFdmVudDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUGluQ29sdW1uRXZlbnRBcmdzIHtcbiAgICBjb2x1bW46IElneENvbHVtbkNvbXBvbmVudDtcbiAgICBpbnNlcnRBdEluZGV4OiBudW1iZXI7XG4gICAgaXNQaW5uZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBhZ2VFdmVudEFyZ3Mge1xuICAgIHByZXZpb3VzOiBudW1iZXI7XG4gICAgY3VycmVudDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSb3dEYXRhRXZlbnRBcmdzIHtcbiAgICBkYXRhOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbHVtblJlc2l6ZUV2ZW50QXJncyB7XG4gICAgY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQ7XG4gICAgcHJldldpZHRoOiBzdHJpbmc7XG4gICAgbmV3V2lkdGg6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUm93U2VsZWN0aW9uRXZlbnRBcmdzIHtcbiAgICBvbGRTZWxlY3Rpb246IGFueVtdO1xuICAgIG5ld1NlbGVjdGlvbjogYW55W107XG4gICAgcm93PzogSWd4Um93Q29tcG9uZW50PElneEdyaWRCYXNlQ29tcG9uZW50ICYgSUdyaWREYXRhQmluZGFibGU+O1xuICAgIGV2ZW50PzogRXZlbnQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNlYXJjaEluZm8ge1xuICAgIHNlYXJjaFRleHQ6IHN0cmluZztcbiAgICBjYXNlU2Vuc2l0aXZlOiBib29sZWFuO1xuICAgIGV4YWN0TWF0Y2g6IGJvb2xlYW47XG4gICAgYWN0aXZlTWF0Y2hJbmRleDogbnVtYmVyO1xuICAgIG1hdGNoSW5mb0NhY2hlOiBhbnlbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJR3JpZFRvb2xiYXJFeHBvcnRFdmVudEFyZ3Mge1xuICAgIGdyaWQ6IElneEdyaWRCYXNlQ29tcG9uZW50O1xuICAgIGV4cG9ydGVyOiBJZ3hCYXNlRXhwb3J0ZXI7XG4gICAgb3B0aW9uczogSWd4RXhwb3J0ZXJPcHRpb25zQmFzZTtcbiAgICBjYW5jZWw6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbHVtbk1vdmluZ1N0YXJ0RXZlbnRBcmdzIHtcbiAgICBzb3VyY2U6IElneENvbHVtbkNvbXBvbmVudDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ29sdW1uTW92aW5nRXZlbnRBcmdzIHtcbiAgICBzb3VyY2U6IElneENvbHVtbkNvbXBvbmVudDtcbiAgICBjYW5jZWw6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbHVtbk1vdmluZ0VuZEV2ZW50QXJncyB7XG4gICAgc291cmNlOiBJZ3hDb2x1bW5Db21wb25lbnQ7XG4gICAgdGFyZ2V0OiBJZ3hDb2x1bW5Db21wb25lbnQ7XG59XG5cbi8vIFRPRE86IHRvIGJlIGRlbGV0ZWQgd2hlbiBvbkZvY3VzQ2hhbmdlIGV2ZW50IGlzIHJlbW92ZWQgIzQwNTRcbmV4cG9ydCBpbnRlcmZhY2UgSUZvY3VzQ2hhbmdlRXZlbnRBcmdzIHtcbiAgICBjZWxsOiBJZ3hHcmlkQ2VsbENvbXBvbmVudDtcbiAgICBldmVudDogRXZlbnQ7XG4gICAgY2FuY2VsOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElHcmlkS2V5ZG93bkV2ZW50QXJncyB7XG4gICAgdGFyZ2V0VHlwZTogR3JpZEtleWRvd25UYXJnZXRUeXBlO1xuICAgIHRhcmdldDogT2JqZWN0O1xuICAgIGV2ZW50OiBFdmVudDtcbiAgICBjYW5jZWw6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNlbGxQb3NpdGlvbiB7XG4gICAgcm93SW5kZXg6IG51bWJlcjtcbiAgICB2aXNpYmxlQ29sdW1uSW5kZXg6IG51bWJlcjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSUdyaWREYXRhQmluZGFibGUge1xuICAgIGRhdGE6IGFueVtdO1xuICAgIGZpbHRlcmVkRGF0YTogYW55W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJvd0RyYWdFbmRFdmVudEFyZ3Mge1xuICAgIG93bmVyOiBJZ3hEcmFnRGlyZWN0aXZlO1xuICAgIGRyYWdEYXRhOiBJZ3hSb3dDb21wb25lbnQ8SWd4R3JpZEJhc2VDb21wb25lbnQgJiBJR3JpZERhdGFCaW5kYWJsZT47XG4gICAgYW5pbWF0aW9uOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSb3dEcmFnU3RhcnRFdmVudEFyZ3MgZXh0ZW5kcyBDYW5jZWxhYmxlRXZlbnRBcmdzIHtcbiAgICBvd25lcjogSWd4RHJhZ0RpcmVjdGl2ZTtcbiAgICBkcmFnRGF0YTogSWd4Um93Q29tcG9uZW50PElneEdyaWRCYXNlQ29tcG9uZW50ICYgSUdyaWREYXRhQmluZGFibGU+O1xuIH1cblxuZXhwb3J0IGVudW0gR3JpZFN1bW1hcnlQb3NpdGlvbiB7XG4gICAgdG9wID0gJ3RvcCcsXG4gICAgYm90dG9tID0gJ2JvdHRvbSdcbn1cblxuZXhwb3J0IGVudW0gR3JpZFN1bW1hcnlDYWxjdWxhdGlvbk1vZGUge1xuICAgIHJvb3RMZXZlbE9ubHkgPSAncm9vdExldmVsT25seScsXG4gICAgY2hpbGRMZXZlbHNPbmx5ID0gJ2NoaWxkTGV2ZWxzT25seScsXG4gICAgcm9vdEFuZENoaWxkTGV2ZWxzID0gJ3Jvb3RBbmRDaGlsZExldmVscydcbn1cblxuZXhwb3J0IGVudW0gRmlsdGVyTW9kZSB7XG4gICAgcXVpY2tGaWx0ZXIgPSAncXVpY2tGaWx0ZXInLFxuICAgIGV4Y2VsU3R5bGVGaWx0ZXIgPSAnZXhjZWxTdHlsZUZpbHRlcidcbn1cblxuZXhwb3J0IGVudW0gR3JpZEtleWRvd25UYXJnZXRUeXBlIHtcbiAgICBkYXRhQ2VsbCA9ICdkYXRhQ2VsbCcsXG4gICAgc3VtbWFyeUNlbGwgPSAnc3VtbWFyeUNlbGwnLFxuICAgIGdyb3VwUm93ID0gJ2dyb3VwUm93JyxcbiAgICBoaWVyYXJjaGljYWxSb3cgPSAnaGllcmFyY2hpY2FsUm93J1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSWd4R3JpZEJhc2VDb21wb25lbnQgZXh0ZW5kcyBEaXNwbGF5RGVuc2l0eUJhc2UgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSBfc2Nyb2xsV2lkdGg6IG51bWJlcjtcblxuICAgIHB1YmxpYyBnZXQgc2Nyb2xsV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxXaWR0aDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9yZXNvdXJjZVN0cmluZ3MgPSBDdXJyZW50UmVzb3VyY2VTdHJpbmdzLkdyaWRSZXNTdHJpbmdzO1xuICAgIHByaXZhdGUgX2VtcHR5R3JpZE1lc3NhZ2UgPSBudWxsO1xuICAgIHByaXZhdGUgX2VtcHR5RmlsdGVyZWRHcmlkTWVzc2FnZSA9IG51bGw7XG4gICAgcHJpdmF0ZSBfaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBfbG9jYWxlID0gbnVsbDtcbiAgICBwcml2YXRlIF9vYnNlcnZlcjogTXV0YXRpb25PYnNlcnZlcjtcbiAgICBwcml2YXRlIF9kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICBwcml2YXRlIG92ZXJsYXlJRHMgPSBbXTtcbiAgICAvKipcbiAgICAgKiBBbiBhY2Nlc3NvciB0aGF0IHNldHMgdGhlIHJlc291cmNlIHN0cmluZ3MuXG4gICAgICogQnkgZGVmYXVsdCBpdCB1c2VzIEVOIHJlc291cmNlcy5cbiAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IHJlc291cmNlU3RyaW5ncyh2YWx1ZTogSUdyaWRSZXNvdXJjZVN0cmluZ3MpIHtcbiAgICAgICAgdGhpcy5fcmVzb3VyY2VTdHJpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fcmVzb3VyY2VTdHJpbmdzLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gYWNjZXNzb3IgdGhhdCByZXR1cm5zIHRoZSByZXNvdXJjZSBzdHJpbmdzLlxuICAgICovXG4gICAgZ2V0IHJlc291cmNlU3RyaW5ncygpOiBJR3JpZFJlc291cmNlU3RyaW5ncyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvdXJjZVN0cmluZ3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgYXV0b2dlbmVyYXRlcyB0aGUgYElneEdyaWRDb21wb25lbnRgIGNvbHVtbnMuXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgZmFsc2UuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCBbZGF0YV09XCJEYXRhXCIgW2F1dG9HZW5lcmF0ZV09XCJ0cnVlXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgYXV0b0dlbmVyYXRlID0gZmFsc2U7XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgYSBjdXN0b20gdGVtcGxhdGUgd2hlbiB0aGUgYElneEdyaWRDb21wb25lbnRgIGlzIGVtcHR5LlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWdyaWQgW2lkXT1cIidpZ3gtZ3JpZC0xJ1wiIFtkYXRhXT1cIkRhdGFcIiBbZW1wdHlHcmlkVGVtcGxhdGVdPVwibXlUZW1wbGF0ZVwiIFthdXRvR2VuZXJhdGVdPVwidHJ1ZVwiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGVtcHR5R3JpZFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgc2V0cyBhIGN1c3RvbSB0ZW1wbGF0ZSB3aGVuIHRoZSBgSWd4R3JpZENvbXBvbmVudGAgaXMgbG9hZGluZy5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkIFtpZF09XCInaWd4LWdyaWQtMSdcIiBbZGF0YV09XCJEYXRhXCIgW2xvYWRpbmdHcmlkVGVtcGxhdGVdPVwibXlUZW1wbGF0ZVwiIFthdXRvR2VuZXJhdGVdPVwidHJ1ZVwiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGxvYWRpbmdHcmlkVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICBAV2F0Y2hDaGFuZ2VzKClcbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgZmlsdGVyaW5nTG9naWMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUub3BlcmF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZmlsdGVyaW5nIGxvZ2ljIG9mIHRoZSBgSWd4R3JpZENvbXBvbmVudGAuXG4gICAgICogVGhlIGRlZmF1bHQgaXMgQU5ELlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWdyaWQgW2RhdGFdPVwiRGF0YVwiIFthdXRvR2VuZXJhdGVdPVwidHJ1ZVwiIFtmaWx0ZXJpbmdMb2dpY109XCJmaWx0ZXJpbmdcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IGZpbHRlcmluZ0xvZ2ljKHZhbHVlOiBGaWx0ZXJpbmdMb2dpYykge1xuICAgICAgICB0aGlzLl9maWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUub3BlcmF0b3IgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBmaWx0ZXJpbmcgc3RhdGUgb2YgYElneEdyaWRDb21wb25lbnRgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgZmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlID0gdGhpcy5ncmlkLmZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZTtcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQFdhdGNoQ2hhbmdlcygpXG4gICAgQElucHV0KClcbiAgICBnZXQgZmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGZpbHRlcmluZyBzdGF0ZSBvZiB0aGUgYElneEdyaWRDb21wb25lbnRgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBsb2dpYyA9IG5ldyBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUoRmlsdGVyaW5nTG9naWMuQW5kLCBcIklEXCIpO1xuICAgICAqIGxvZ2ljLmZpbHRlcmluZ09wZXJhbmRzID0gW1xuICAgICAqICAgICB7XG4gICAgICogICAgICAgICAgY29uZGl0aW9uOiBJZ3hOdW1iZXJGaWx0ZXJpbmdPcGVyYW5kLmluc3RhbmNlKCkuY29uZGl0aW9uKCdncmVhdGVyVGhhbicpLFxuICAgICAqICAgICAgICAgIGZpZWxkTmFtZTogJ0lEJyxcbiAgICAgKiAgICAgICAgICBzZWFyY2hWYWw6IDFcbiAgICAgKiAgICAgfVxuICAgICAqIF07XG4gICAgICogdGhpcy5ncmlkLmZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSA9IChsb2dpYyk7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHNldCBmaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlKSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSAodmFsdWUgYXMgRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlKTtcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB2YWwuZmlsdGVyaW5nT3BlcmFuZHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEodmFsLmZpbHRlcmluZ09wZXJhbmRzW2luZGV4XSBpbnN0YW5jZW9mIEZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3RXhwcmVzc2lvbnNUcmVlID0gbmV3IEZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZShGaWx0ZXJpbmdMb2dpYy5BbmQsIHZhbC5maWx0ZXJpbmdPcGVyYW5kc1tpbmRleF0uZmllbGROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3RXhwcmVzc2lvbnNUcmVlLmZpbHRlcmluZ09wZXJhbmRzLnB1c2godmFsLmZpbHRlcmluZ09wZXJhbmRzW2luZGV4XSBhcyBJRmlsdGVyaW5nRXhwcmVzc2lvbik7XG4gICAgICAgICAgICAgICAgICAgIHZhbC5maWx0ZXJpbmdPcGVyYW5kc1tpbmRleF0gPSBuZXdFeHByZXNzaW9uc1RyZWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjbG9uZSB0aGUgZmlsdGVyaW5nIGV4cHJlc3Npb24gdHJlZSBpbiBvcmRlciB0byB0cmlnZ2VyIHRoZSBmaWx0ZXJpbmcgcGlwZVxuICAgICAgICAgICAgY29uc3QgZmlsdGVyaW5nRXhwcmVzc2lvblRyZWVDbG9uZSA9IG5ldyBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUodmFsdWUub3BlcmF0b3IsIHZhbHVlLmZpZWxkTmFtZSk7XG4gICAgICAgICAgICBmaWx0ZXJpbmdFeHByZXNzaW9uVHJlZUNsb25lLmZpbHRlcmluZ09wZXJhbmRzID0gdmFsdWUuZmlsdGVyaW5nT3BlcmFuZHM7XG4gICAgICAgICAgICB0aGlzLl9maWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUgPSBmaWx0ZXJpbmdFeHByZXNzaW9uVHJlZUNsb25lO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJpbmdTZXJ2aWNlLmlzRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyZWREYXRhID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5maWx0ZXJpbmdTZXJ2aWNlLnJlZnJlc2hFeHByZXNzaW9ucygpO1xuICAgICAgICAgICAgdGhpcy5zdW1tYXJ5U2VydmljZS5jbGVhclN1bW1hcnlDYWNoZSgpO1xuICAgICAgICAgICAgdGhpcy5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxvY2FsZSBvZiB0aGUgZ3JpZC5cbiAgICAgKiBJZiBub3Qgc2V0LCByZXR1cm5zIGJyb3dzZXIncyBsYW5ndWFnZS5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCBsb2NhbGUoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMuX2xvY2FsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnZW4nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbG9jYWxlIG9mIHRoZSBncmlkLlxuICAgICAqL1xuICAgIHNldCBsb2NhbGUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbG9jYWxlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYWdpbmcgZmVhdHVyZSBpcyBlbmFibGVkL2Rpc2FibGVkLlxuICAgICAqIFRoZSBkZWZhdWx0IHN0YXRlIGlzIGRpc2FibGVkIChmYWxzZSkuXG4gICAgICogYGBgXG4gICAgICogY29uc3QgcGFnaW5nID0gdGhpcy5ncmlkLnBhZ2luZztcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBnZXQgcGFnaW5nKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFnaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMvRGlzYWJsZXMgdGhlIHBhZ2luZyBmZWF0dXJlLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWdyaWQgI2dyaWQgW2RhdGFdPVwiRGF0YVwiIFthdXRvR2VuZXJhdGVdPVwidHJ1ZVwiIFtwYWdpbmddPVwidHJ1ZVwiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHNldCBwYWdpbmcodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fcGFnaW5nID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX3BpcGVUcmlnZ2VyKys7XG5cbiAgICAgICAgaWYgKHRoaXMuX25nQWZ0ZXJWaWV3SW5pdFBhc3NlZCkge1xuICAgICAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVHcmlkSGVpZ2h0KCk7XG4gICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHBhZ2UgaW5kZXguXG4gICAgICogYGBgaHRtbFxuICAgICAqIGxldCBncmlkUGFnZSA9IHRoaXMuZ3JpZC5wYWdlO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCBwYWdlKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYWdlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgcGFnZSBpbmRleC5cbiAgICAgKiA8aWd4LWdyaWQgI2dyaWQgW2RhdGFdPVwiRGF0YVwiIFtwYWdpbmddPVwidHJ1ZVwiIFtwYWdlXT1cIjVcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIj48L2lneC1ncmlkPlxuICAgICAqL1xuICAgIHNldCBwYWdlKHZhbDogbnVtYmVyKSB7XG4gICAgICAgIGlmICh2YWwgPT09IHRoaXMuX3BhZ2UgfHwgdmFsIDwgMCB8fCB2YWwgPiB0aGlzLnRvdGFsUGFnZXMgLSAxKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9uUGFnaW5nRG9uZS5lbWl0KHsgcHJldmlvdXM6IHRoaXMuX3BhZ2UsIGN1cnJlbnQ6IHZhbCB9KTtcbiAgICAgICAgdGhpcy5fcGFnZSA9IHZhbDtcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHZpc2libGUgaXRlbXMgcGVyIHBhZ2Ugb2YgdGhlIGBJZ3hHcmlkQ29tcG9uZW50YC5cbiAgICAgKiBUaGUgZGVmYXVsdCBpcyAxNS5cbiAgICAgKiBgYGBodG1sXG4gICAgICogbGV0IGl0ZW1zUGVyUGFnZSA9IHRoaXMuZ3JpZC5wZXJQYWdlO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCBwZXJQYWdlKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wZXJQYWdlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG51bWJlciBvZiB2aXNpYmxlIGl0ZW1zIHBlciBwYWdlIG9mIHRoZSBgSWd4R3JpZENvbXBvbmVudGAuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCAjZ3JpZCBbZGF0YV09XCJEYXRhXCIgW3BhZ2luZ109XCJ0cnVlXCIgW3BlclBhZ2VdPVwiNVwiIFthdXRvR2VuZXJhdGVdPVwidHJ1ZVwiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHNldCBwZXJQYWdlKHZhbDogbnVtYmVyKSB7XG4gICAgICAgIGlmICh2YWwgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fcGVyUGFnZSA9IHZhbDtcbiAgICAgICAgdGhpcy5wYWdlID0gMDtcbiAgICAgICAgdGhpcy5lbmRFZGl0KHRydWUpO1xuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBjdXN0b20gYG5nLXRlbXBsYXRlYCBmb3IgdGhlIHBhZ2luYXRpb24gVUkgb2YgdGhlIGdyaWQuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCAjZ3JpZCBbcGFnaW5nXT1cInRydWVcIiBbbXlUZW1wbGF0ZV09XCJteVRlbXBsYXRlXCIgW2hlaWdodF09XCInMzA1cHgnXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgcGFnaW5hdGlvblRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBjb2x1bW4gaGlkaW5nIFVJIGZvciB0aGUgYElneEdyaWRDb21wb25lbnRgIGlzIGVuYWJsZWQuXG4gICAgICogQnkgZGVmYXVsdCBpdCBpcyBkaXNhYmxlZCAoZmFsc2UpLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgZ3JpZENvbEhpZGluZyA9IHRoaXMuZ3JpZC5jb2x1bW5IaWRpbmc7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IGNvbHVtbkhpZGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbHVtbkhpZGluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHdoZXRoZXIgdGhlIGNvbHVtbiBoaWRpbmcgVUkgZm9yIHRoZSBgSWd4R3JpZENvbXBvbmVudGAgaXMgZW5hYmxlZC5cbiAgICAgKiBJbiBvcmRlciBmb3IgdGhlIFVJIHRvIHdvcmssIHlvdSBuZWVkIHRvIGVuYWJsZSB0aGUgdG9vbGJhciBhcyBzaG93biBpbiB0aGUgZXhhbXBsZSBiZWxvdy5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkIFtkYXRhXT1cIkRhdGFcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIiBbc2hvd1Rvb2xiYXJdPVwidHJ1ZVwiIFtjb2x1bW5IaWRpbmddPVwidHJ1ZVwiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHNldCBjb2x1bW5IaWRpbmcodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbHVtbkhpZGluZyAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbHVtbkhpZGluZyA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZEFQSS5ncmlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbmdBZnRlclZpZXdJbml0UGFzc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlR3JpZFNpemVzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB3aGV0aGVyIHRoZSBgSWd4R3JpZFJvd0NvbXBvbmVudGAgc2VsZWN0aW9uIGlzIGVuYWJsZWQuXG4gICAgICogQnkgZGVmYXVsdCBpdCBpcyBzZXQgdG8gZmFsc2UuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCByb3dTZWxlY3RhYmxlID0gdGhpcy5ncmlkLnJvd1NlbGVjdGFibGU7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBXYXRjaENoYW5nZXMoKVxuICAgIEBJbnB1dCgpXG4gICAgZ2V0IHJvd1NlbGVjdGFibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yb3dTZWxlY3Rpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB3aGV0aGVyIHJvd3MgY2FuIGJlIHNlbGVjdGVkLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWdyaWQgI2dyaWQgW3Nob3dUb29sYmFyXT1cInRydWVcIiBbcm93U2VsZWN0YWJsZV09XCJ0cnVlXCIgW2NvbHVtbkhpZGluZ109XCJ0cnVlXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgc2V0IHJvd1NlbGVjdGFibGUodmFsOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX3Jvd1NlbGVjdGlvbiA9IHZhbDtcbiAgICAgICAgaWYgKHRoaXMuZ3JpZEFQSS5ncmlkICYmIHRoaXMuY29sdW1uTGlzdCkge1xuXG4gICAgICAgICAgICAvLyBzaG91bGQgc2VsZWN0aW9uIHBlcnNpc3Q/XG4gICAgICAgICAgICB0aGlzLmFsbFJvd3NTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5kZXNlbGVjdEFsbFJvd3MoKTtcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlR3JpZFNpemVzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIGdldCByb3dEcmFnZ2FibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yb3dEcmFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgd2hldGhlciByb3dzIGNhbiBiZSBtb3ZlZC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkIFtyb3dEcmFnZ2FibGVdPVwidHJ1ZVwiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHNldCByb3dEcmFnZ2FibGUodmFsOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX3Jvd0RyYWcgPSB2YWw7XG4gICAgICAgIGlmICh0aGlzLmdyaWRBUEkuZ3JpZCAmJiB0aGlzLmNvbHVtbkxpc3QpIHtcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlR3JpZFNpemVzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIHJvd0RyYWdnaW5nID0gZmFsc2U7XG5cblxuICAgIC8qKlxuICogU2V0cyB3aGV0aGVyIHRoZSBgSWd4R3JpZFJvd0NvbXBvbmVudGAgaXMgZWRpdGFibGUuXG4gKiBCeSBkZWZhdWx0IGl0IGlzIHNldCB0byBmYWxzZS5cbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGxldCByb3dFZGl0YWJsZSA9IHRoaXMuZ3JpZC5yb3dFZGl0YWJsZTtcbiAqIGBgYFxuICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gKi9cbiAgICBAV2F0Y2hDaGFuZ2VzKClcbiAgICBASW5wdXQoKVxuICAgIGdldCByb3dFZGl0YWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jvd0VkaXRhYmxlO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFNldHMgd2hldGhlciByb3dzIGNhbiBiZSBlZGl0ZWQuXG4gICAgKiBgYGBodG1sXG4gICAgKiA8aWd4LWdyaWQgI2dyaWQgW3Nob3dUb29sYmFyXT1cInRydWVcIiBbcm93RWRpdGFibGVdPVwidHJ1ZVwiIFtwcmltYXJ5S2V5XT1cIidQcm9kdWN0SUQnXCIgW2NvbHVtbkhpZGluZ109XCJ0cnVlXCI+PC9pZ3gtZ3JpZD5cbiAgICAqIGBgYFxuICAgICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgKi9cbiAgICBzZXQgcm93RWRpdGFibGUodmFsOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh2YWwgJiYgKHRoaXMucHJpbWFyeUtleSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMucHJpbWFyeUtleSA9PT0gbnVsbCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignVGhlIGdyaWQgbXVzdCBoYXZlIGEgYHByaW1hcnlLZXlgIHNwZWNpZmllZCB3aGVuIHVzaW5nIGByb3dFZGl0YWJsZWAhJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcm93RWRpdGFibGUgPSB2YWw7XG4gICAgICAgIGlmICh0aGlzLmdyaWRBUEkuZ3JpZCkge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoR3JpZFN0YXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBoZWlnaHQgb2YgdGhlIGBJZ3hHcmlkQ29tcG9uZW50YC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGdyaWRIZWlnaHQgPSB0aGlzLmdyaWQuaGVpZ2h0O1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBAV2F0Y2hDaGFuZ2VzKClcbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLmhlaWdodCcpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IGhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoZWlnaHQgb2YgdGhlIGBJZ3hHcmlkQ29tcG9uZW50YC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkIFtkYXRhXT1cIkRhdGFcIiBbaGVpZ2h0XT1cIiczMDVweCdcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IGhlaWdodCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLl9oZWlnaHQgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9oZWlnaHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZsb3coKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB3aWR0aCBvZiB0aGUgYElneEdyaWRDb21wb25lbnRgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgZ3JpZFdpZHRoID0gdGhpcy5ncmlkLndpZHRoO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBAV2F0Y2hDaGFuZ2VzKClcbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLndpZHRoJylcbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93aWR0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB3aWR0aCBvZiB0aGUgYElneEdyaWRDb21wb25lbnRgLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWdyaWQgI2dyaWQgW2RhdGFdPVwiRGF0YVwiIFt3aWR0aF09XCInMzA1cHgnXCIgW2F1dG9HZW5lcmF0ZV09XCJ0cnVlXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIHNldCB3aWR0aCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLl93aWR0aCAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3dpZHRoID0gdmFsdWU7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIENhbGxpbmcgcmVmbG93KCksIGJlY2F1c2UgdGhlIHdpZHRoIGNhbGN1bGF0aW9uXG4gICAgICAgICAgICAgICAgLy8gbWlnaHQgbWFrZSB0aGUgaG9yaXpvbnRhbCBzY3JvbGxiYXIgYXBwZWFyL2Rpc2FwcGVhci5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIHdpbGwgY2hhbmdlIHRoZSBoZWlnaHQsIHdoaWNoIHNob3VsZCBiZSByZWNhbGN1bGF0ZWQuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZsb3coKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHdpZHRoIG9mIHRoZSBoZWFkZXIgb2YgdGhlIGBJZ3hHcmlkQ29tcG9uZW50YC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogbGV0IGdyaWRIZWFkZXJXaWR0aCA9IHRoaXMuZ3JpZC5oZWFkZXJXaWR0aDtcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgZ2V0IGhlYWRlcldpZHRoKCkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5fd2lkdGgsIDEwKSAtIDE3O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IGFkZHMgc3R5bGluZyBjbGFzc2VzIGFwcGxpZWQgdG8gYWxsIGV2ZW4gYElneEdyaWRSb3dDb21wb25lbnRgcyBpbiB0aGUgZ3JpZC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkIFtkYXRhXT1cIkRhdGFcIiBbZXZlblJvd0NTU109XCInaWd4LWdyaWQtLW15LWV2ZW4tY2xhc3MnXCIgW2F1dG9HZW5lcmF0ZV09XCJ0cnVlXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZXZlblJvd0NTUyA9ICdpZ3gtZ3JpZF9fdHItLWV2ZW4nO1xuXG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgYWRkcyBzdHlsaW5nIGNsYXNzZXMgYXBwbGllZCB0byBhbGwgb2RkIGBJZ3hHcmlkUm93Q29tcG9uZW50YHMgaW4gdGhlIGdyaWQuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCAjZ3JpZCBbZGF0YV09XCJEYXRhXCIgW2V2ZW5Sb3dDU1NdPVwiJ2lneC1ncmlkLS1teS1vZGQtY2xhc3MnXCIgW2F1dG9HZW5lcmF0ZV09XCJ0cnVlXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgb2RkUm93Q1NTID0gJ2lneC1ncmlkX190ci0tb2RkJztcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHJvdyBoZWlnaHQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHJvd0hlaWdodCA9IHRoaXMuZ3JpZC5yb3dIZWlnaHQ7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBXYXRjaENoYW5nZXMoKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdldCByb3dIZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yb3dIZWlnaHQgPyB0aGlzLl9yb3dIZWlnaHQgOiB0aGlzLmRlZmF1bHRSb3dIZWlnaHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcm93IGhlaWdodC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkIFtkYXRhXT1cImxvY2FsRGF0YVwiIFtzaG93VG9vbGJhcl09XCJ0cnVlXCIgW3Jvd0hlaWdodF09XCIxMDBcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IHJvd0hlaWdodCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9yb3dIZWlnaHQgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIGRlZmF1bHQgd2lkdGggb2YgdGhlIGBJZ3hHcmlkQ29tcG9uZW50YCdzIGNvbHVtbnMuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCAjZ3JpZCBbZGF0YV09XCJsb2NhbERhdGFcIiBbc2hvd1Rvb2xiYXJdPVwidHJ1ZVwiIFtjb2x1bW5XaWR0aF09XCIxMDBcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBAV2F0Y2hDaGFuZ2VzKClcbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgY29sdW1uV2lkdGgoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbHVtbldpZHRoO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0IGNvbHVtbldpZHRoKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fY29sdW1uV2lkdGggPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5jb2x1bW5XaWR0aFNldEJ5VXNlciA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgc2V0cyB0aGUgcHJpbWFyeSBrZXkgb2YgdGhlIGBJZ3hHcmlkQ29tcG9uZW50YC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkIFtkYXRhXT1cImxvY2FsRGF0YVwiIFtzaG93VG9vbGJhcl09XCJ0cnVlXCIgW3ByaW1hcnlLZXldPVwiJ1Byb2R1Y3RJRCdcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBAV2F0Y2hDaGFuZ2VzKClcbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBwcmltYXJ5S2V5O1xuXG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgc2V0cyB0aGUgbWVzc2FnZSBkaXNwbGF5ZWQgd2hlbiB0aGVyZSBhcmUgbm8gcmVjb3Jkcy5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkIFtkYXRhXT1cIkRhdGFcIiBbZW1wdHlHcmlkTWVzc2FnZV09XCInVGhlIGdyaWQgaXMgZW1wdHknXCIgW2F1dG9HZW5lcmF0ZV09XCJ0cnVlXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBzZXQgZW1wdHlHcmlkTWVzc2FnZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2VtcHR5R3JpZE1lc3NhZ2UgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBhY2Nlc3NvciB0aGF0IHJldHVybnMgdGhlIG1lc3NhZ2UgZGlzcGxheWVkIHdoZW4gdGhlcmUgYXJlIG5vIHJlY29yZHMuXG4gICAgKi9cbiAgICBnZXQgZW1wdHlHcmlkTWVzc2FnZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW1wdHlHcmlkTWVzc2FnZSB8fCB0aGlzLnJlc291cmNlU3RyaW5ncy5pZ3hfZ3JpZF9lbXB0eUdyaWRfbWVzc2FnZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHdoZXRoZXIgdGhlIGdyaWQgaXMgZ29pbmcgdG8gc2hvdyBsb2FkaW5nIGluZGljYXRvci5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkIFtkYXRhXT1cIkRhdGFcIiBbaXNMb2FkaW5nXT1cInRydWVcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHNldCBpc0xvYWRpbmcodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5faXNMb2FkaW5nID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLmdyaWRBUEkuZ3JpZCkge1xuICAgICAgICAgICAgdGhpcy5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIGFjY2Vzc29yIHRoYXQgcmV0dXJucyB3aGV0aGVyIHRoZSBncmlkIGlzIHNob3dpbmcgbG9hZGluZyBpbmRpY2F0b3IuXG4gICAgICovXG4gICAgZ2V0IGlzTG9hZGluZygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzTG9hZGluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHByb3BlcnR5IHRoYXQgYWxsb3dzIHRoZSBjb2x1bW5zIHRvIGJlIGF1dG8tZ2VuZXJhdGVkIG9uY2UgYWdhaW4gYWZ0ZXIgdGhlIGluaXRpYWxpemF0aW9uIG9mIHRoZSBncmlkLlxuICAgICAqIFRoaXMgd2lsbCBhbGxvdyB0byBiaW5kIHRoZSBncmlkIHRvIHJlbW90ZSBkYXRhIGFuZCBoYXZpbmcgYXV0by1nZW5lcmF0ZWQgY29sdW1ucyBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAqIE5vdGUgdGhhdCBhZnRlciBnZW5lcmF0aW5nIHRoZSBjb2x1bW5zLCB0aGlzIHByb3BlcnR5IHdvdWxkIGJlIGRpc2FibGVkIHRvIGF2b2lkIHJlLWNyZWF0aW5nXG4gICAgICogY29sdW1ucyBlYWNoIHRpbWUgYSBuZXcgZGF0YSBpcyBhc3NpZ25lZC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogIHRoaXMuZ3JpZC5zaG91bGRHZW5lcmF0ZSA9IHRydWU7XG4gICAgICogIHRoaXMucmVtb3RlRGF0YSA9IHRoaXMucmVtb3RlU2VydmljZS5yZW1vdGVEYXRhO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBzaG91bGRHZW5lcmF0ZTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIG1lc3NhZ2UgZGlzcGxheWVkIHdoZW4gdGhlcmUgYXJlIG5vIHJlY29yZHMgYW5kIHRoZSBncmlkIGlzIGZpbHRlcmVkLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWdyaWQgI2dyaWQgW2RhdGFdPVwiRGF0YVwiIFtlbXB0eUdyaWRNZXNzYWdlXT1cIidUaGUgZ3JpZCBpcyBlbXB0eSdcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHNldCBlbXB0eUZpbHRlcmVkR3JpZE1lc3NhZ2UodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9lbXB0eUZpbHRlcmVkR3JpZE1lc3NhZ2UgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBhY2Nlc3NvciB0aGF0IHJldHVybnMgdGhlIG1lc3NhZ2UgZGlzcGxheWVkIHdoZW4gdGhlcmUgYXJlIG5vIHJlY29yZHMgYW5kIHRoZSBncmlkIGlzIGZpbHRlcmVkLlxuICAgICovXG4gICAgZ2V0IGVtcHR5RmlsdGVyZWRHcmlkTWVzc2FnZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW1wdHlGaWx0ZXJlZEdyaWRNZXNzYWdlIHx8IHRoaXMucmVzb3VyY2VTdHJpbmdzLmlneF9ncmlkX2VtcHR5RmlsdGVyZWRHcmlkX21lc3NhZ2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgc2V0cyB0aGUgdGl0bGUgdG8gYmUgZGlzcGxheWVkIGluIHRoZSBidWlsdC1pbiBjb2x1bW4gaGlkaW5nIFVJLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWdyaWQgW3Nob3dUb29sYmFyXT1cInRydWVcIiBbY29sdW1uSGlkaW5nXT1cInRydWVcIiBjb2x1bW5IaWRpbmdUaXRsZT1cIkNvbHVtbiBIaWRpbmdcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBjb2x1bW5IaWRpbmdUaXRsZSA9ICcnO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpZiB0aGUgYnVpbHQtaW4gY29sdW1uIHBpbm5pbmcgVUkgc2hvdWxkIGJlIHNob3duIGluIHRoZSB0b29sYmFyLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgbGV0IGNvbFBpbm5pbmcgPSB0aGlzLmdyaWQuY29sdW1uUGlubmluZztcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQFdhdGNoQ2hhbmdlcygpXG4gICAgQElucHV0KClcbiAgICBnZXQgY29sdW1uUGlubmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbHVtblBpbm5pbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBpZiB0aGUgYnVpbHQtaW4gY29sdW1uIHBpbm5pbmcgVUkgc2hvdWxkIGJlIHNob3duIGluIHRoZSB0b29sYmFyLlxuICAgICAqIEJ5IGRlZmF1bHQgaXQncyBkaXNhYmxlZC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkIFtkYXRhXT1cImxvY2FsRGF0YVwiIFtjb2x1bW5QaW5uaW5nXT1cIid0cnVlXCIgW2hlaWdodF09XCInMzA1cHgnXCIgW2F1dG9HZW5lcmF0ZV09XCJ0cnVlXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgc2V0IGNvbHVtblBpbm5pbmcodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbHVtblBpbm5pbmcgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9jb2x1bW5QaW5uaW5nID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAodGhpcy5ncmlkQVBJLmdyaWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9uZ0FmdGVyVmlld0luaXRQYXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVHcmlkU2l6ZXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB0aXRsZSB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIFVJIG9mIHRoZSBjb2x1bW4gcGlubmluZy5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkIFtkYXRhXT1cImxvY2FsRGF0YVwiIFtjb2x1bW5QaW5uaW5nXT1cIid0cnVlXCIgW2NvbHVtblBpbm5pbmdUaXRsZV09XCInQ29sdW1uIEhpZGluZydcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBjb2x1bW5QaW5uaW5nVGl0bGUgPSAnJztcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaWYgdGhlIGZpbHRlcmluZyBpcyBlbmFibGVkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgbGV0IGZpbHRlcmluZyA9IHRoaXMuZ3JpZC5hbGxvd0ZpbHRlcmluZztcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBnZXQgYWxsb3dGaWx0ZXJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hbGxvd0ZpbHRlcmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGlmIHRoZSBmaWx0ZXJpbmcgaXMgZW5hYmxlZC5cbiAgICAgKiBCeSBkZWZhdWx0IGl0J3MgZGlzYWJsZWQuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCAjZ3JpZCBbZGF0YV09XCJsb2NhbERhdGFcIiBbYWxsb3dGaWx0ZXJpbmddPVwiJ3RydWVcIiBbaGVpZ2h0XT1cIiczMDVweCdcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBzZXQgYWxsb3dGaWx0ZXJpbmcodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FsbG93RmlsdGVyaW5nICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fYWxsb3dGaWx0ZXJpbmcgPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbGNIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGNIZWlnaHQgKz0gdmFsdWUgPyAtRklMVEVSX1JPV19IRUlHSFQgOiBGSUxURVJfUk9XX0hFSUdIVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9uZ0FmdGVyVmlld0luaXRQYXNzZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXhMZXZlbEhlYWRlckRlcHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGhlYWRSb3cubmF0aXZlRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBgJHsodGhpcy5tYXhMZXZlbEhlYWRlckRlcHRoICsgMSkgKiB0aGlzLmRlZmF1bHRSb3dIZWlnaHQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHZhbHVlICYmIHRoaXMuZmlsdGVyTW9kZSA9PT0gRmlsdGVyTW9kZS5xdWlja0ZpbHRlciA/IEZJTFRFUl9ST1dfSEVJR0hUIDogMCkgKyAxfXB4YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZmlsdGVyaW5nU2VydmljZS5pc0ZpbHRlclJvd1Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyaW5nU2VydmljZS5maWx0ZXJlZENvbHVtbiA9IG51bGw7XG5cbiAgICAgICAgICAgIHRoaXMuZmlsdGVyaW5nU2VydmljZS5yZWdpc3RlclNWR0ljb25zKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5ncmlkQVBJLmdyaWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZmlsdGVyIG1vZGUuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICBsZXQgZmlsdGVyaW5nID0gdGhpcy5ncmlkLmZpbHRlck1vZGU7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IGZpbHRlck1vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXJNb2RlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgZmlsdGVyIG1vZGUuXG4gICAgICogQnkgZGVmYXVsdCBpdCdzIHNldCB0byBGaWx0ZXJNb2RlLnF1aWNrRmlsdGVyLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWdyaWQgI2dyaWQgW2RhdGFdPVwibG9jYWxEYXRhXCIgW2ZpbHRlck1vZGVdPVwiJ3F1aWNrRmlsdGVyJ1wiIFtoZWlnaHRdPVwiJzMwNXB4J1wiIFthdXRvR2VuZXJhdGVdPVwidHJ1ZVwiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHNldCBmaWx0ZXJNb2RlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2ZpbHRlck1vZGUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzdW1tYXJ5IHBvc2l0aW9uLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgbGV0IHN1bW1hcnlQb3NpdGlvbiA9IHRoaXMuZ3JpZC5zdW1tYXJ5UG9zaXRpb247XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IHN1bW1hcnlQb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1bW1hcnlQb3NpdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHN1bW1hcnkgcG9zaXRpb24uXG4gICAgICogQnkgZGVmYXVsdCBpdCBpcyBib3R0b20uXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCAjZ3JpZCBbZGF0YV09XCJsb2NhbERhdGFcIiBzdW1tYXJ5UG9zaXRpb249XCJ0b3BcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBzZXQgc3VtbWFyeVBvc2l0aW9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3N1bW1hcnlQb3NpdGlvbiA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5ncmlkQVBJLmdyaWQpIHtcbiAgICAgICAgICAgIHRoaXMubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzdW1tYXJ5IGNhbGN1bGF0aW9uIG1vZGUuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICBsZXQgc3VtbWFyeUNhbGN1bGF0aW9uTW9kZSA9IHRoaXMuZ3JpZC5zdW1tYXJ5Q2FsY3VsYXRpb25Nb2RlO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCBzdW1tYXJ5Q2FsY3VsYXRpb25Nb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3VtbWFyeUNhbGN1bGF0aW9uTW9kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHN1bW1hcnkgY2FsY3VsYXRpb24gbW9kZS5cbiAgICAgKiBCeSBkZWZhdWx0IGl0IGlzIHJvb3RBbmRDaGlsZExldmVscyB3aGljaCBtZWFucyB0aGUgc3VtbWFyaWVzIGFyZSBjYWxjdWxhdGVkIGZvciB0aGUgcm9vdCBsZXZlbCBhbmQgZWFjaCBjaGlsZCBsZXZlbC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkIFtkYXRhXT1cImxvY2FsRGF0YVwiIHN1bW1hcnlDYWxjdWxhdGlvbk1vZGU9XCJyb290TGV2ZWxPbmx5XCIgW2F1dG9HZW5lcmF0ZV09XCJ0cnVlXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgc2V0IHN1bW1hcnlDYWxjdWxhdGlvbk1vZGUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fc3VtbWFyeUNhbGN1bGF0aW9uTW9kZSA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5ncmlkQVBJLmdyaWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3VtbWFyeVNlcnZpY2UucmVzZXRTdW1tYXJ5SGVpZ2h0KCk7XG4gICAgICAgICAgICB0aGlzLmVuZEVkaXQodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZUdyaWRIZWlnaHQoKTtcbiAgICAgICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGBJZ3hHcmlkQ2VsbENvbXBvbmVudGAgaXMgY2xpY2tlZC4gUmV0dXJucyB0aGUgYElneEdyaWRDZWxsQ29tcG9uZW50YC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkIChvbkNlbGxDbGljayk9XCJvbkNlbGxDbGljaygkZXZlbnQpXCIgW2RhdGFdPVwibG9jYWxEYXRhXCIgW2hlaWdodF09XCInMzA1cHgnXCIgW2F1dG9HZW5lcmF0ZV09XCJ0cnVlXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogcHVibGljIG9uQ2VsbENsaWNrKGUpe1xuICAgICAqICAgICBhbGVydChcIlRoZSBjZWxsIGhhcyBiZWVuIGNsaWNrZWQhXCIpO1xuICAgICAqIH1cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uQ2VsbENsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxJR3JpZENlbGxFdmVudEFyZ3M+KCk7XG5cbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gYElneEdyaWRDZWxsQ29tcG9uZW50YCBpcyBzZWxlY3RlZC4gUmV0dXJucyB0aGUgYElneEdyaWRDZWxsQ29tcG9uZW50YC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkIChvblNlbGVjdGlvbik9XCJvbkNlbGxTZWxlY3QoJGV2ZW50KVwiIFtkYXRhXT1cImxvY2FsRGF0YVwiIFtoZWlnaHRdPVwiJzMwNXB4J1wiIFthdXRvR2VuZXJhdGVdPVwidHJ1ZVwiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHB1YmxpYyBvbkNlbGxTZWxlY3QoZSl7XG4gICAgICogICAgIGFsZXJ0KFwiVGhlIGNlbGwgaGFzIGJlZW4gc2VsZWN0ZWQhXCIpO1xuICAgICAqIH1cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uU2VsZWN0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjxJR3JpZENlbGxFdmVudEFyZ3M+KCk7XG5cbiAgICAvKipcbiAgICAgKiAgRW1pdHRlZCB3aGVuIGBJZ3hHcmlkUm93Q29tcG9uZW50YCBpcyBzZWxlY3RlZC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkIChvblJvd1NlbGVjdGlvbkNoYW5nZSk9XCJvblJvd0NsaWNrQ2hhbmdlKCRldmVudClcIiBbZGF0YV09XCJsb2NhbERhdGFcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBwdWJsaWMgb25DZWxsQ2xpY2tDaGFuZ2UoZSl7XG4gICAgICogICAgIGFsZXJ0KFwiVGhlIHNlbGVjdGVkIHJvdyBoYXMgYmVlbiBjaGFuZ2VkIVwiKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvblJvd1NlbGVjdGlvbkNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8SVJvd1NlbGVjdGlvbkV2ZW50QXJncz4oKTtcblxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBgSWd4Q29sdW1uQ29tcG9uZW50YCBpcyBwaW5uZWQuXG4gICAgICogVGhlIGluZGV4IHRoYXQgdGhlIGNvbHVtbiBpcyBpbnNlcnRlZCBhdCBtYXkgYmUgY2hhbmdlZCB0aHJvdWdoIHRoZSBgaW5zZXJ0QXRJbmRleGAgcHJvcGVydHkuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHB1YmxpYyBjb2x1bW5QaW5uaW5nKGV2ZW50KSB7XG4gICAgICogICAgIGlmIChldmVudC5jb2x1bW4uZmllbGQgPT09IFwiTmFtZVwiKSB7XG4gICAgICogICAgICAgZXZlbnQuaW5zZXJ0QXRJbmRleCA9IDA7XG4gICAgICogICAgIH1cbiAgICAgKiB9XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvbkNvbHVtblBpbm5pbmcgPSBuZXcgRXZlbnRFbWl0dGVyPElQaW5Db2x1bW5FdmVudEFyZ3M+KCk7XG5cbiAgICAvKipcbiAgICAgKiBBbiBAT3V0cHV0IHByb3BlcnR5IGVtaXR0aW5nIGFuIGV2ZW50IHdoZW4gYElneEdyaWRDZWxsQ29tcG9uZW50YFxuICAgICAqIGVkaXRpbmcgaGFzIGJlZW4gcGVyZm9ybWVkIGluIHRoZSBncmlkIGFuZCB0aGUgdmFsdWVzIGhhdmUgKipub3QqKiBiZWVuIHN1Ym1pdHRlZCAoZS5nLiBgRXNjYCBrZXkgd2FzIHByZXNzZWQpLlxuICAgICAqIFRoaXMgZXZlbnQgaXMgY2FuY2VsYWJsZS5cbiAgICAgKlxuICAgICAqIGFyZ3M6IElHcmlkRWRpdEV2ZW50QXJncyA9IHtcbiAgICAgKiAgICAgIGNhbmNlbDogYm9vbCxcbiAgICAgKiAgICAgIGNlbGxJRDoge1xuICAgICAqICAgICAgICAgIGNvbHVtbklEOiBpbnQsXG4gICAgICogICAgICAgICAgcm93SUQ6IGludCxcbiAgICAgKiAgICAgICAgICByb3dJbmRleDogaW50XG4gICAgICogICAgICB9XG4gICAgICogICAgICBuZXdWYWx1ZTogb2JqZWN0LFxuICAgICAqICAgICAgb2xkVmFsdWU6IG9iamVjdCxcbiAgICAgKiAgICAgIHJvd0lEOiBpbnRcbiAgICAgKiAgfVxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGVkaXRDYW5jZWwoZXZlbnQ6IElHcmlkRWRpdEV2ZW50QXJncyl7XG4gICAgICogICAgY29uc3Qgcm93SUQ6IElneENvbHVtbkNvbXBvbmVudCA9IGV2ZW50LnJvd0lEO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkMyAob25DZWxsRWRpdENhbmNlbCk9XCJlZGl0Q2FuY2VsKCRldmVudClcIiBbZGF0YV09XCJyZW1vdGUgfCBhc3luY1wiIChvblNvcnRpbmdEb25lKT1cInByb2Nlc3MoJGV2ZW50KVwiXG4gICAgICogICAgICAgICAgW3ByaW1hcnlLZXldPVwiJ1Byb2R1Y3RJRCdcIiBbcm93U2VsZWN0YWJsZV09XCJ0cnVlXCI+XG4gICAgICogICAgICAgICAgPGlneC1jb2x1bW4gW3NvcnRhYmxlXT1cInRydWVcIiBbZmllbGRdPVwiJ1Byb2R1Y3RJRCdcIj48L2lneC1jb2x1bW4+XG4gICAgICogICAgICAgICAgPGlneC1jb2x1bW4gW2VkaXRhYmxlXT1cInRydWVcIiBbZmllbGRdPVwiJ1Byb2R1Y3ROYW1lJ1wiPjwvaWd4LWNvbHVtbj5cbiAgICAgKiAgICAgICAgICA8aWd4LWNvbHVtbiBbc29ydGFibGVdPVwidHJ1ZVwiIFtmaWVsZF09XCInVW5pdHNJblN0b2NrJ1wiIFtoZWFkZXJdPVwiJ1VuaXRzIGluIFN0b2NrJ1wiPjwvaWd4LWNvbHVtbj5cbiAgICAgKiA8L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZENvbXBvbmVudFxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvbkNlbGxFZGl0Q2FuY2VsID0gbmV3IEV2ZW50RW1pdHRlcjxJR3JpZEVkaXRFdmVudEFyZ3M+KCk7XG5cbiAgICAvKipcbiAgICAgKiBBbiBAT3V0cHV0IHByb3BlcnR5IGVtaXR0aW5nIGFuIGV2ZW50IHdoZW4gYElneEdyaWRDZWxsQ29tcG9uZW50YCBlbnRlcnMgZWRpdCBtb2RlLlxuICAgICAqIFRoaXMgZXZlbnQgaXMgY2FuY2VsYWJsZS5cbiAgICAgKlxuICAgICAqIGFyZ3M6IElHcmlkRWRpdEV2ZW50QXJncyA9IHtcbiAgICAgKiAgICAgIGNhbmNlbDogYm9vbCxcbiAgICAgKiAgICAgIGNlbGxJRDoge1xuICAgICAqICAgICAgICAgIGNvbHVtbklEOiBpbnQsXG4gICAgICogICAgICAgICAgcm93SUQ6IGludCxcbiAgICAgKiAgICAgICAgICByb3dJbmRleDogaW50XG4gICAgICogICAgICB9XG4gICAgICogICAgICBvbGRWYWx1ZTogb2JqZWN0LFxuICAgICAqICAgICAgcm93SUQ6IGludFxuICAgICAqICB9XG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogZWRpdFN0YXJ0KGV2ZW50OiBJR3JpZEVkaXRFdmVudEFyZ3Mpe1xuICAgICAqICAgIGNvbnN0IHZhbHVlOiBJZ3hDb2x1bW5Db21wb25lbnQgPSBldmVudC5uZXdWYWx1ZTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCAjZ3JpZDMgKG9uQ2VsbEVkaXRFbnRlcik9XCJlZGl0U3RhcnQoJGV2ZW50KVwiIFtkYXRhXT1cInJlbW90ZSB8IGFzeW5jXCIgKG9uU29ydGluZ0RvbmUpPVwicHJvY2VzcygkZXZlbnQpXCJcbiAgICAgKiAgICAgICAgICBbcHJpbWFyeUtleV09XCInUHJvZHVjdElEJ1wiIFtyb3dTZWxlY3RhYmxlXT1cInRydWVcIj5cbiAgICAgKiAgICAgICAgICA8aWd4LWNvbHVtbiBbc29ydGFibGVdPVwidHJ1ZVwiIFtmaWVsZF09XCInUHJvZHVjdElEJ1wiPjwvaWd4LWNvbHVtbj5cbiAgICAgKiAgICAgICAgICA8aWd4LWNvbHVtbiBbZWRpdGFibGVdPVwidHJ1ZVwiIFtmaWVsZF09XCInUHJvZHVjdE5hbWUnXCI+PC9pZ3gtY29sdW1uPlxuICAgICAqICAgICAgICAgIDxpZ3gtY29sdW1uIFtzb3J0YWJsZV09XCJ0cnVlXCIgW2ZpZWxkXT1cIidVbml0c0luU3RvY2snXCIgW2hlYWRlcl09XCInVW5pdHMgaW4gU3RvY2snXCI+PC9pZ3gtY29sdW1uPlxuICAgICAqIDwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQ29tcG9uZW50XG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uQ2VsbEVkaXRFbnRlciA9IG5ldyBFdmVudEVtaXR0ZXI8SUdyaWRFZGl0RXZlbnRBcmdzPigpO1xuXG4gICAgLyoqXG4gICAgICogQW4gQE91dHB1dCBwcm9wZXJ0eSBlbWl0dGluZyBhbiBldmVudCB3aGVuIGBJZ3hHcmlkQ2VsbENvbXBvbmVudGAgZWRpdGluZyBoYXMgYmVlbiBwZXJmb3JtZWQgaW4gdGhlIGdyaWQuXG4gICAgICogRXZlbnQgaXMgZmlyZWQgYWZ0ZXIgZWRpdGluZyBpcyBjb21wbGV0ZWQsIHdoZW4gdGhlIGNlbGwgaXMgZXhpdGluZyBlZGl0IG1vZGUuXG4gICAgICogVGhpcyBldmVudCBpcyBjYW5jZWxhYmxlLlxuICAgICAqXG4gICAgICogYXJnczogSUdyaWRFZGl0RXZlbnRBcmdzID0ge1xuICAgICAqICAgICAgY2FuY2VsOiBib29sLFxuICAgICAqICAgICAgY2VsbElEOiB7XG4gICAgICogICAgICAgICAgY29sdW1uSUQ6IGludCxcbiAgICAgKiAgICAgICAgICByb3dJRDogaW50LFxuICAgICAqICAgICAgICAgIHJvd0luZGV4OiBpbnRcbiAgICAgKiAgICAgIH1cbiAgICAgKiAgICAgIG5ld1ZhbHVlOiBvYmplY3QsXG4gICAgICogICAgICBvbGRWYWx1ZTogb2JqZWN0LFxuICAgICAqICAgICAgcm93SUQ6IGludFxuICAgICAqICB9XG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogZWRpdERvbmUoZXZlbnQ6IElHcmlkRWRpdEV2ZW50QXJncyl7XG4gICAgICogICAgY29uc3QgdmFsdWU6IElneENvbHVtbkNvbXBvbmVudCA9IGV2ZW50Lm5ld1ZhbHVlO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkMyAob25DZWxsRWRpdCk9XCJlZGl0RG9uZSgkZXZlbnQpXCIgW2RhdGFdPVwicmVtb3RlIHwgYXN5bmNcIiAob25Tb3J0aW5nRG9uZSk9XCJwcm9jZXNzKCRldmVudClcIlxuICAgICAqICAgICAgICAgIFtwcmltYXJ5S2V5XT1cIidQcm9kdWN0SUQnXCIgW3Jvd1NlbGVjdGFibGVdPVwidHJ1ZVwiPlxuICAgICAqICAgICAgICAgIDxpZ3gtY29sdW1uIFtzb3J0YWJsZV09XCJ0cnVlXCIgW2ZpZWxkXT1cIidQcm9kdWN0SUQnXCI+PC9pZ3gtY29sdW1uPlxuICAgICAqICAgICAgICAgIDxpZ3gtY29sdW1uIFtlZGl0YWJsZV09XCJ0cnVlXCIgW2ZpZWxkXT1cIidQcm9kdWN0TmFtZSdcIj48L2lneC1jb2x1bW4+XG4gICAgICogICAgICAgICAgPGlneC1jb2x1bW4gW3NvcnRhYmxlXT1cInRydWVcIiBbZmllbGRdPVwiJ1VuaXRzSW5TdG9jaydcIiBbaGVhZGVyXT1cIidVbml0cyBpbiBTdG9jaydcIj48L2lneC1jb2x1bW4+XG4gICAgICogPC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uQ2VsbEVkaXQgPSBuZXcgRXZlbnRFbWl0dGVyPElHcmlkRWRpdEV2ZW50QXJncz4oKTtcblxuICAgIC8qKlxuICAgICAqIEFuIEBPdXRwdXQgcHJvcGVydHkgZW1pdHRpbmcgYW4gZXZlbnQgd2hlbiBbcm93RWRpdGFibGVdPVwidHJ1ZVwiIGEgcm93IGVudGVycyBlZGl0IG1vZGUuXG4gICAgICogVGhpcyBldmVudCBpcyBjYW5jZWxhYmxlLlxuICAgICAqXG4gICAgICogYXJnczogSUdyaWRFZGl0RXZlbnRBcmdzID0ge1xuICAgICAqICAgICAgY2FuY2VsOiBib29sLFxuICAgICAqICAgICAgb2xkVmFsdWU6IDxyb3dPYmo+LFxuICAgICAqICAgICAgcm93SUQ6IGludFxuICAgICAqICB9XG4gICAgICpcbiAgICAgKiBCaW5kIHRvIHRoZSBldmVudCBpbiBtYXJrdXAgYXMgZm9sbG93czpcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkMyAob25Sb3dFZGl0RW50ZXIpPVwiZWRpdFN0YXJ0KCRldmVudClcIiBbZGF0YV09XCJyZW1vdGUgfCBhc3luY1wiIChvblNvcnRpbmdEb25lKT1cInByb2Nlc3MoJGV2ZW50KVwiXG4gICAgICogICAgICAgICAgW3ByaW1hcnlLZXldPVwiJ1Byb2R1Y3RJRCdcIiBbcm93U2VsZWN0YWJsZV09XCJ0cnVlXCIgW3Jvd0VkaXRhYmxlXT1cInRydWVcIj5cbiAgICAgKiAgICAgICAgICA8aWd4LWNvbHVtbiBbc29ydGFibGVdPVwidHJ1ZVwiIFtmaWVsZF09XCInUHJvZHVjdElEJ1wiPjwvaWd4LWNvbHVtbj5cbiAgICAgKiAgICAgICAgICA8aWd4LWNvbHVtbiBbZWRpdGFibGVdPVwidHJ1ZVwiIFtmaWVsZF09XCInUHJvZHVjdE5hbWUnXCI+PC9pZ3gtY29sdW1uPlxuICAgICAqICAgICAgICAgIDxpZ3gtY29sdW1uIFtzb3J0YWJsZV09XCJ0cnVlXCIgW2ZpZWxkXT1cIidVbml0c0luU3RvY2snXCIgW2hlYWRlcl09XCInVW5pdHMgaW4gU3RvY2snXCI+PC9pZ3gtY29sdW1uPlxuICAgICAqIDwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICAgICAgZWRpdFN0YXJ0KGV2ZW50OiBJR3JpZEVkaXRFdmVudEFyZ3MpIHtcbiAgICAgKiAgICAgICAgICBjb25zdCBlZGl0ZWRSb3dPYmogPSBldmVudC5vbGRWYWx1ZTtcbiAgICAgKiAgICAgICAgICBjb25zdCBjYW5jZWxWYWx1ZSA9IGV2ZW50LmNhbmNlbDtcbiAgICAgKiAgICAgICAgICBjb25zdCByb3dJRCA9IGV2ZW50LnJvd0lEO1xuICAgICAqICAgICAgfVxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZENvbXBvbmVudFxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvblJvd0VkaXRFbnRlciA9IG5ldyBFdmVudEVtaXR0ZXI8SUdyaWRFZGl0RXZlbnRBcmdzPigpO1xuXG4gICAgLyoqXG4gICAgICogQW4gQE91dHB1dCBwcm9wZXJ0eSBlbWl0dGluZyBhbiBldmVudCB3aGVuIFtyb3dFZGl0YWJsZV09XCJ0cnVlXCIgJiBgZW5kRWRpdCh0cnVlKWAgaXMgY2FsbGVkLlxuICAgICAqIEVtaXR0ZWQgd2hlbiBjaGFuZ2luZyByb3dzIGR1cmluZyBlZGl0IG1vZGUsIHNlbGVjdGluZyBhbiB1bi1lZGl0YWJsZSBjZWxsIGluIHRoZSBlZGl0ZWQgcm93LFxuICAgICAqIHBlcmZvcm1pbmcgcGFnaW5nIG9wZXJhdGlvbiwgY29sdW1uIHJlc2l6aW5nLCBwaW5uaW5nLCBtb3Zpbmcgb3IgaGl0dGluZyAgYERvbmVgXG4gICAgICogYnV0dG9uIGluc2lkZSBvZiB0aGUgcm93RWRpdGluZ092ZXJsYXksIG9yIGhpdHRpbmcgdGhlIGBFbnRlcmAga2V5IHdoaWxlIGVkaXRpbmcgYSBjZWxsLlxuICAgICAqIFRoaXMgZXZlbnQgaXMgY2FuY2VsYWJsZS5cbiAgICAgKlxuICAgICAqIGFyZ3M6IElHcmlkRWRpdEV2ZW50QXJncyA9IHtcbiAgICAgKiAgICAgIGNhbmNlbDogYm9vbCxcbiAgICAgKiAgICAgIG5ld1ZhbHVlOiA8cm93T2JqPixcbiAgICAgKiAgICAgIG9sZFZhbHVlOiA8cm93T2JqPixcbiAgICAgKiAgICAgIHJvd0lEOiBpbnRcbiAgICAgKiAgfVxuICAgICAqXG4gICAgICogQmluZCB0byB0aGUgZXZlbnQgaW4gbWFya3VwIGFzIGZvbGxvd3M6XG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCAjZ3JpZDMgKG9uUm93RWRpdCk9XCJlZGl0RG9uZSgkZXZlbnQpXCIgW2RhdGFdPVwicmVtb3RlIHwgYXN5bmNcIiAob25Tb3J0aW5nRG9uZSk9XCJwcm9jZXNzKCRldmVudClcIlxuICAgICAqICAgICAgICAgIFtwcmltYXJ5S2V5XT1cIidQcm9kdWN0SUQnXCIgW3Jvd1NlbGVjdGFibGVdPVwidHJ1ZVwiIFtyb3dFZGl0YWJsZV09XCJ0cnVlXCI+XG4gICAgICogICAgICAgICAgPGlneC1jb2x1bW4gW3NvcnRhYmxlXT1cInRydWVcIiBbZmllbGRdPVwiJ1Byb2R1Y3RJRCdcIj48L2lneC1jb2x1bW4+XG4gICAgICogICAgICAgICAgPGlneC1jb2x1bW4gW2VkaXRhYmxlXT1cInRydWVcIiBbZmllbGRdPVwiJ1Byb2R1Y3ROYW1lJ1wiPjwvaWd4LWNvbHVtbj5cbiAgICAgKiAgICAgICAgICA8aWd4LWNvbHVtbiBbc29ydGFibGVdPVwidHJ1ZVwiIFtmaWVsZF09XCInVW5pdHNJblN0b2NrJ1wiIFtoZWFkZXJdPVwiJ1VuaXRzIGluIFN0b2NrJ1wiPjwvaWd4LWNvbHVtbj5cbiAgICAgKiA8L2lneC1ncmlkPlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICAgICAgZWRpdERvbmUoZXZlbnQ6IElHcmlkRWRpdEV2ZW50QXJncykge1xuICAgICAqICAgICAgICAgIGNvbnN0IG9yaWdpbmFsUm93T2JqID0gZXZlbnQub2xkVmFsdWU7XG4gICAgICogICAgICAgICAgY29uc3QgdXBkYXRlZFJvd09iaiA9IGV2ZW50Lm5ld1ZhbHVlO1xuICAgICAqICAgICAgICAgIGNvbnN0IGNhbmNlbFZhbHVlID0gZXZlbnQuY2FuY2VsO1xuICAgICAqICAgICAgICAgIGNvbnN0IHJvd0lEID0gZXZlbnQucm93SUQ7XG4gICAgICogICAgICB9XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvblJvd0VkaXQgPSBuZXcgRXZlbnRFbWl0dGVyPElHcmlkRWRpdEV2ZW50QXJncz4oKTtcblxuICAgIC8qKlxuICAgICAqIEFuIEBPdXRwdXQgcHJvcGVydHkgZW1pdHRpbmcgYW4gZXZlbnQgd2hlbiBbcm93RWRpdGFibGVdPVwidHJ1ZVwiICYgYGVuZEVkaXQoZmFsc2UpYCBpcyBjYWxsZWQuXG4gICAgICogRW1pdHRlZCB3aGVuIGNoYW5naW5nIGhpdHRpbmcgYEVzY2Aga2V5IGR1cmluZyBjZWxsIGVkaXRpbmcgYW5kIHdoZW4gY2xpY2sgb24gdGhlIGBDYW5jZWxgIGJ1dHRvblxuICAgICAqIGluIHRoZSByb3cgZWRpdGluZyBvdmVybGF5LlxuICAgICAqIFRoaXMgZXZlbnQgaXMgY2FuY2VsYWJsZS5cbiAgICAgKlxuICAgICAqIGFyZ3M6IElHcmlkRWRpdEV2ZW50QXJncyA9IHtcbiAgICAgKiAgICAgIGNhbmNlbDogYm9vbCxcbiAgICAgKiAgICAgIG5ld1ZhbHVlOiA8cm93T2JqPixcbiAgICAgKiAgICAgIG9sZFZhbHVlOiA8cm93T2JqPixcbiAgICAgKiAgICAgIHJvd0lEOiBpbnRcbiAgICAgKiAgfVxuICAgICAqXG4gICAgICogQmluZCB0byB0aGUgZXZlbnQgaW4gbWFya3VwIGFzIGZvbGxvd3M6XG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCAjZ3JpZDMgKG9uUm93RWRpdENhbmNlbCk9XCJlZGl0Q2FuY2VsKCRldmVudClcIiBbZGF0YV09XCJyZW1vdGUgfCBhc3luY1wiIChvblNvcnRpbmdEb25lKT1cInByb2Nlc3MoJGV2ZW50KVwiXG4gICAgICogICAgICAgICAgW3ByaW1hcnlLZXldPVwiJ1Byb2R1Y3RJRCdcIiBbcm93U2VsZWN0YWJsZV09XCJ0cnVlXCIgW3Jvd0VkaXRhYmxlXT1cInRydWVcIj5cbiAgICAgKiAgICAgICAgICA8aWd4LWNvbHVtbiBbc29ydGFibGVdPVwidHJ1ZVwiIFtmaWVsZF09XCInUHJvZHVjdElEJ1wiPjwvaWd4LWNvbHVtbj5cbiAgICAgKiAgICAgICAgICA8aWd4LWNvbHVtbiBbZWRpdGFibGVdPVwidHJ1ZVwiIFtmaWVsZF09XCInUHJvZHVjdE5hbWUnXCI+PC9pZ3gtY29sdW1uPlxuICAgICAqICAgICAgICAgIDxpZ3gtY29sdW1uIFtzb3J0YWJsZV09XCJ0cnVlXCIgW2ZpZWxkXT1cIidVbml0c0luU3RvY2snXCIgW2hlYWRlcl09XCInVW5pdHMgaW4gU3RvY2snXCI+PC9pZ3gtY29sdW1uPlxuICAgICAqIDwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICAgICAgZWRpdENhbmNlbChlbWl0dGVkOiB7IHJvdzogSWd4R3JpZFJvd0NvbXBvbmVudCwgbmV3VmFsdWU6IGFueSwgb2xkVmFsdWU6IGFueSB9KTogdm9pZCB7XG4gICAgICogICAgICAgICAgY29uc3Qgb3JpZ2luYWxSb3dPYmogPSBldmVudC5vbGRWYWx1ZTtcbiAgICAgKiAgICAgICAgICBjb25zdCB1cGRhdGVkUm93T2JqID0gZXZlbnQubmV3VmFsdWU7XG4gICAgICogICAgICAgICAgY29uc3QgY2FuY2VsVmFsdWUgPSBldmVudC5jYW5jZWw7XG4gICAgICogICAgICAgICAgY29uc3Qgcm93SUQgPSBldmVudC5yb3dJRDtcbiAgICAgKiAgICAgIH1cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uUm93RWRpdENhbmNlbCA9IG5ldyBFdmVudEVtaXR0ZXI8SUdyaWRFZGl0RXZlbnRBcmdzPigpO1xuXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGEgZ3JpZCBjb2x1bW4gaXMgaW5pdGlhbGl6ZWQuIFJldHVybnMgdGhlIGNvbHVtbiBvYmplY3QuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCAjZ3JpZCBbZGF0YV09XCJsb2NhbERhdGFcIiBbb25Db2x1bW5Jbml0XT1cImluaXRDb2x1bW5zKCRldmVudClcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBpbml0Q29sdW1ucyhldmVudDogSWd4Q29sdW1uQ29tcG9uZW50KSB7XG4gICAgICogY29uc3QgY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQgPSBldmVudDtcbiAgICAgKiAgICAgICBjb2x1bW4uZmlsdGVyYWJsZSA9IHRydWU7XG4gICAgICogICAgICAgY29sdW1uLnNvcnRhYmxlID0gdHJ1ZTtcbiAgICAgKiAgICAgICBjb2x1bW4uZWRpdGFibGUgPSB0cnVlO1xuICAgICAqIH1cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uQ29sdW1uSW5pdCA9IG5ldyBFdmVudEVtaXR0ZXI8SWd4Q29sdW1uQ29tcG9uZW50PigpO1xuXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIHNvcnRpbmcgaXMgcGVyZm9ybWVkIHRocm91Z2ggdGhlIFVJLiBSZXR1cm5zIHRoZSBzb3J0aW5nIGV4cHJlc3Npb24uXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCAjZ3JpZCBbZGF0YV09XCJsb2NhbERhdGFcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIiAob25Tb3J0aW5nRG9uZSk9XCJzb3J0aW5nRG9uZSgkZXZlbnQpXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogc29ydGluZ0RvbmUoZXZlbnQ6IFNvcnRpbmdEaXJlY3Rpb24pe1xuICAgICAqICAgICBjb25zdCBzb3J0aW5nRGlyZWN0aW9uID0gZXZlbnQ7XG4gICAgICogfVxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgb25Tb3J0aW5nRG9uZSA9IG5ldyBFdmVudEVtaXR0ZXI8SVNvcnRpbmdFeHByZXNzaW9uIHwgQXJyYXk8SVNvcnRpbmdFeHByZXNzaW9uPj4oKTtcblxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBmaWx0ZXJpbmcgaXMgcGVyZm9ybWVkIHRocm91Z2ggdGhlIFVJLlxuICAgICAqIFJldHVybnMgdGhlIGZpbHRlcmluZyBleHByZXNzaW9ucyB0cmVlIG9mIHRoZSBjb2x1bW4gZm9yIHdoaWNoIGZpbHRlcmluZyB3YXMgcGVyZm9ybWVkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBmaWx0ZXJpbmdEb25lKGV2ZW50OiBJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlKXtcbiAgICAgKiAgICAgY29uc3QgZmlsdGVyaW5nVHJlZSA9IGV2ZW50O1xuICAgICAqfVxuICAgICAqIGBgYFxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWdyaWQgI2dyaWQgW2RhdGFdPVwibG9jYWxEYXRhXCIgW2hlaWdodF09XCInMzA1cHgnXCIgW2F1dG9HZW5lcmF0ZV09XCJ0cnVlXCIgKG9uRmlsdGVyaW5nRG9uZSk9XCJmaWx0ZXJpbmdEb25lKCRldmVudClcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgb25GaWx0ZXJpbmdEb25lID0gbmV3IEV2ZW50RW1pdHRlcjxJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlPigpO1xuXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIHBhZ2luZyBpcyBwZXJmb3JtZWQuIFJldHVybnMgYW4gb2JqZWN0IGNvbnNpc3Rpbmcgb2YgdGhlIHByZXZpb3VzIGFuZCBuZXh0IHBhZ2VzLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBwYWdpbmdEb25lKGV2ZW50OiBJUGFnZUV2ZW50QXJncyl7XG4gICAgICogICAgIGNvbnN0IHBhZ2luZyA9IGV2ZW50O1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkIFtkYXRhXT1cImxvY2FsRGF0YVwiIFtoZWlnaHRdPVwiJzMwNXB4J1wiIFthdXRvR2VuZXJhdGVdPVwidHJ1ZVwiIChvblBhZ2luZ0RvbmUpPVwicGFnaW5nRG9uZSgkZXZlbnQpXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uUGFnaW5nRG9uZSA9IG5ldyBFdmVudEVtaXR0ZXI8SVBhZ2VFdmVudEFyZ3M+KCk7XG5cbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gYSBgSWd4R3JpZFJvd0NvbXBvbmVudGAgaXMgYmVpbmcgYWRkZWQgdG8gdGhlIGBJZ3hHcmlkQ29tcG9uZW50YCB0aHJvdWdoIHRoZSBBUEkuXG4gICAgICogUmV0dXJucyB0aGUgZGF0YSBmb3IgdGhlIG5ldyBgSWd4R3JpZFJvd0NvbXBvbmVudGAgb2JqZWN0LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiByb3dBZGRlZChldmVudDogSVJvd0RhdGFFdmVudEFyZ3Mpe1xuICAgICAqICAgIGNvbnN0IHJvd0luZm8gPSBldmVudDtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCAjZ3JpZCBbZGF0YV09XCJsb2NhbERhdGFcIiAob25Sb3dBZGRlZCk9XCJyb3dBZGRlZCgkZXZlbnQpXCIgW2hlaWdodF09XCInMzA1cHgnXCIgW2F1dG9HZW5lcmF0ZV09XCJ0cnVlXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uUm93QWRkZWQgPSBuZXcgRXZlbnRFbWl0dGVyPElSb3dEYXRhRXZlbnRBcmdzPigpO1xuXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGEgYElneEdyaWRSb3dDb21wb25lbnRgIGlzIGRlbGV0ZWQgdGhyb3VnaCB0aGUgYElneEdyaWRDb21wb25lbnRgIEFQSS5cbiAgICAgKiBSZXR1cm5zIGFuIGBJUm93RGF0YUV2ZW50QXJnc2Agb2JqZWN0LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiByb3dEZWxldGVkKGV2ZW50OiBJUm93RGF0YUV2ZW50QXJncyl7XG4gICAgICogICAgY29uc3Qgcm93SW5mbyA9IGV2ZW50O1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkIFtkYXRhXT1cImxvY2FsRGF0YVwiIChvblJvd0RlbGV0ZWQpPVwicm93RGVsZXRlZCgkZXZlbnQpXCIgW2hlaWdodF09XCInMzA1cHgnXCIgW2F1dG9HZW5lcmF0ZV09XCJ0cnVlXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uUm93RGVsZXRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8SVJvd0RhdGFFdmVudEFyZ3M+KCk7XG5cbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gYSBuZXcgY2h1bmsgb2YgZGF0YSBpcyBsb2FkZWQgZnJvbSB2aXJ0dWFsaXphdGlvbi5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogIDxpZ3gtZ3JpZCAjZ3JpZCBbZGF0YV09XCJsb2NhbERhdGFcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIiAob25EYXRhUHJlTG9hZCk9J2hhbmRsZURhdGFQcmVsb2FkRXZlbnQoKSc+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uRGF0YVByZUxvYWQgPSBuZXcgRXZlbnRFbWl0dGVyPElGb3JPZlN0YXRlPigpO1xuXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGBJZ3hDb2x1bW5Db21wb25lbnRgIGlzIHJlc2l6ZWQuXG4gICAgICogUmV0dXJucyB0aGUgYElneENvbHVtbkNvbXBvbmVudGAgb2JqZWN0J3Mgb2xkIGFuZCBuZXcgd2lkdGguXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHJlc2l6aW5nKGV2ZW50OiBJQ29sdW1uUmVzaXplRXZlbnRBcmdzKXtcbiAgICAgKiAgICAgY29uc3QgZ3JvdXBpbmcgPSBldmVudDtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCAjZ3JpZCBbZGF0YV09XCJsb2NhbERhdGFcIiAob25Db2x1bW5SZXNpemVkKT1cInJlc2l6aW5nKCRldmVudClcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgb25Db2x1bW5SZXNpemVkID0gbmV3IEV2ZW50RW1pdHRlcjxJQ29sdW1uUmVzaXplRXZlbnRBcmdzPigpO1xuXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGEgYElneEdyaWRDZWxsQ29tcG9uZW50YCBpcyByaWdodCBjbGlja2VkLiBSZXR1cm5zIHRoZSBgSWd4R3JpZENlbGxDb21wb25lbnRgIG9iamVjdC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29udGV4dE1lbnUoZXZlbnQ6IElHcmlkQ2VsbEV2ZW50QXJncyl7XG4gICAgICogICAgIGNvbnN0IHJlc2l6aW5nID0gZXZlbnQ7XG4gICAgICogICAgIGNvbnNvbGUubG9nKHJlc2l6aW5nKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCAjZ3JpZCBbZGF0YV09XCJsb2NhbERhdGFcIiAob25Db250ZXh0TWVudSk9XCJjb250ZXh0TWVudSgkZXZlbnQpXCIgW2F1dG9HZW5lcmF0ZV09XCJ0cnVlXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uQ29udGV4dE1lbnUgPSBuZXcgRXZlbnRFbWl0dGVyPElHcmlkQ2VsbEV2ZW50QXJncz4oKTtcblxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBhIGBJZ3hHcmlkQ2VsbENvbXBvbmVudGAgaXMgZG91YmxlIGNsaWNrZWQuIFJldHVybnMgdGhlIGBJZ3hHcmlkQ2VsbENvbXBvbmVudGAgb2JqZWN0LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBkYmxDbGljayhldmVudDogSUdyaWRDZWxsRXZlbnRBcmdzKXtcbiAgICAgKiAgICAgY29uc3QgZGJsQ2xpY2sgPSBldmVudDtcbiAgICAgKiAgICAgY29uc29sZS5sb2coZGJsQ2xpY2spO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkICNncmlkIFtkYXRhXT1cImxvY2FsRGF0YVwiIChvbkRvdWJsZUNsaWNrKT1cImRibENsaWNrKCRldmVudClcIiBbYXV0b0dlbmVyYXRlXT1cInRydWVcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgb25Eb3VibGVDbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8SUdyaWRDZWxsRXZlbnRBcmdzPigpO1xuXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGBJZ3hDb2x1bW5Db21wb25lbnRgIHZpc2liaWxpdHkgaXMgY2hhbmdlZC4gQXJnczogeyBjb2x1bW46IGFueSwgbmV3VmFsdWU6IGJvb2xlYW4gfVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB2aXNpYmlsaXR5Q2hhbmdlZChldmVudDogSUNvbHVtblZpc2liaWxpdHlDaGFuZ2VkRXZlbnRBcmdzKXtcbiAgICAgKiAgICBjb25zdCB2aXNpYmxpdHkgPSBldmVudDtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCBbY29sdW1uSGlkaW5nXT1cInRydWVcIiBbc2hvd1Rvb2xiYXJdPVwidHJ1ZVwiIChvbkNvbHVtblZpc2liaWxpdHlDaGFuZ2VkKT1cInZpc2liaWxpdHlDaGFuZ2VkKCRldmVudClcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgb25Db2x1bW5WaXNpYmlsaXR5Q2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8SUNvbHVtblZpc2liaWxpdHlDaGFuZ2VkRXZlbnRBcmdzPigpO1xuXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGBJZ3hDb2x1bW5Db21wb25lbnRgIG1vdmluZyBzdGFydHMuIFJldHVybnMgdGhlIG1vdmVkIGBJZ3hDb2x1bW5Db21wb25lbnRgIG9iamVjdC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbW92aW5nU3RhcnQoZXZlbnQ6IElDb2x1bW5Nb3ZpbmdTdGFydEV2ZW50QXJncyl7XG4gICAgICogICAgIGNvbnN0IG1vdmluZ1N0YXJ0cyA9IGV2ZW50O1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkIFtjb2x1bW5IaWRpbmddPVwidHJ1ZVwiIFtzaG93VG9vbGJhcl09XCJ0cnVlXCIgKG9uQ29sdW1uTW92aW5nU3RhcnQpPVwibW92aW5nU3RhcnQoJGV2ZW50KVwiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvbkNvbHVtbk1vdmluZ1N0YXJ0ID0gbmV3IEV2ZW50RW1pdHRlcjxJQ29sdW1uTW92aW5nU3RhcnRFdmVudEFyZ3M+KCk7XG5cbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHRocm91Z2hvdXQgdGhlIGBJZ3hDb2x1bW5Db21wb25lbnRgIG1vdmluZyBvcGVyYXRpb24uXG4gICAgICogUmV0dXJucyB0aGUgc291cmNlIGFuZCB0YXJnZXQgYElneENvbHVtbkNvbXBvbmVudGAgb2JqZWN0cy4gVGhpcyBldmVudCBpcyBjYW5jZWxhYmxlLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBtb3ZpbmcoZXZlbnQ6IElDb2x1bW5Nb3ZpbmdFdmVudEFyZ3Mpe1xuICAgICAqICAgICBjb25zdCBtb3ZpbmcgPSBldmVudDtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCBbY29sdW1uSGlkaW5nXT1cInRydWVcIiBbc2hvd1Rvb2xiYXJdPVwidHJ1ZVwiIChvbkNvbHVtbk1vdmluZyk9XCJtb3ZpbmcoJGV2ZW50KVwiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvbkNvbHVtbk1vdmluZyA9IG5ldyBFdmVudEVtaXR0ZXI8SUNvbHVtbk1vdmluZ0V2ZW50QXJncz4oKTtcblxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBgSWd4Q29sdW1uQ29tcG9uZW50YCBtb3ZpbmcgZW5kcy5cbiAgICAgKiBSZXR1cm5zIHRoZSBzb3VyY2UgYW5kIHRhcmdldCBgSWd4Q29sdW1uQ29tcG9uZW50YCBvYmplY3RzLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBtb3ZpbmdFbmRzKGV2ZW50OiBJQ29sdW1uTW92aW5nRW5kRXZlbnRBcmdzKXtcbiAgICAgKiAgICAgY29uc3QgbW92aW5nRW5kcyA9IGV2ZW50O1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkIFtjb2x1bW5IaWRpbmddPVwidHJ1ZVwiIFtzaG93VG9vbGJhcl09XCJ0cnVlXCIgKG9uQ29sdW1uTW92aW5nRW5kKT1cIm1vdmluZ0VuZHMoJGV2ZW50KVwiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvbkNvbHVtbk1vdmluZ0VuZCA9IG5ldyBFdmVudEVtaXR0ZXI8SUNvbHVtbk1vdmluZ0VuZEV2ZW50QXJncz4oKTtcblxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHlvdSBzaG91bGQgdXNlIG9uR3JpZEtleWRvd24gZXZlbnRcbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBARGVwcmVjYXRlUHJvcGVydHkoJ29uRm9jdXNDaGFuZ2UgZXZlbnQgaXMgZGVwcmVjYXRlZC4gVXNlIG9uR3JpZEtleWRvd24gZXZlbnQgaW5zdGVhZC4nKVxuICAgIHB1YmxpYyBvbkZvY3VzQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxJRm9jdXNDaGFuZ2VFdmVudEFyZ3M+KCk7XG5cbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4ga2V5ZG93biBpcyB0cmlnZ2VyZWQgb3ZlciBlbGVtZW50IGluc2lkZSBncmlkJ3MgYm9keS5cbiAgICAgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIG9ubHkgaWYgdGhlIGtleSBjb21iaW5hdGlvbiBpcyBzdXBwb3J0ZWQgaW4gdGhlIGdyaWQuXG4gICAgICogUmV0dXJuIHRoZSB0YXJnZXQgdHlwZSwgdGFyZ2V0IG9iamVjdCBhbmQgdGhlIG9yaWdpbmFsIGV2ZW50LiBUaGlzIGV2ZW50IGlzIGNhbmNlbGFibGUuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGN1c3RvbUtleWRvd24oYXJnczogSUdyaWRLZXlkb3duRXZlbnRBcmdzKSB7XG4gICAgICogIGNvbnN0IGtleWRvd25FdmVudCA9IGFyZ3MuZXZlbnQ7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqIGBgYGh0bWxcbiAgICAgKiAgPGlneC1ncmlkIChvbkdyaWRLZXlkb3duKT1cImN1c3RvbUtleWRvd24oJGV2ZW50KVwiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uR3JpZEtleWRvd24gPSBuZXcgRXZlbnRFbWl0dGVyPElHcmlkS2V5ZG93bkV2ZW50QXJncz4oKTtcblxuICAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gc3RhcnQgZHJhZ2dpbmcgYSByb3cuXG4gICAgICogUmV0dXJuIHRoZSBkcmFnZ2VkIHJvdy5cbiAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvblJvd0RyYWdTdGFydCA9IG5ldyBFdmVudEVtaXR0ZXI8SVJvd0RyYWdTdGFydEV2ZW50QXJncz4oKTtcblxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBkcm9wcGluZyBhIHJvdy5cbiAgICAgKiBSZXR1cm4gdGhlIGRyb3BwZWQgcm93LlxuICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uUm93RHJhZ0VuZCA9IG5ldyBFdmVudEVtaXR0ZXI8SVJvd0RyYWdFbmRFdmVudEFyZ3M+KCk7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQFZpZXdDaGlsZChJZ3hHcmlkQ29sdW1uUmVzaXplckNvbXBvbmVudClcbiAgICBwdWJsaWMgcmVzaXplTGluZTogSWd4R3JpZENvbHVtblJlc2l6ZXJDb21wb25lbnQ7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQENvbnRlbnRDaGlsZHJlbihJZ3hDb2x1bW5Db21wb25lbnQsIHsgcmVhZDogSWd4Q29sdW1uQ29tcG9uZW50LCBkZXNjZW5kYW50czogdHJ1ZSB9KVxuICAgIHB1YmxpYyBjb2x1bW5MaXN0OiBRdWVyeUxpc3Q8SWd4Q29sdW1uQ29tcG9uZW50PjtcblxuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIEBDb250ZW50Q2hpbGQoSWd4RXhjZWxTdHlsZVNvcnRpbmdUZW1wbGF0ZURpcmVjdGl2ZSwgeyByZWFkOiBJZ3hFeGNlbFN0eWxlU29ydGluZ1RlbXBsYXRlRGlyZWN0aXZlIH0pXG4gICAgcHVibGljIGV4Y2VsU3R5bGVTb3J0aW5nVGVtcGxhdGVEaXJlY3RpdmU6IElneEV4Y2VsU3R5bGVTb3J0aW5nVGVtcGxhdGVEaXJlY3RpdmU7XG5cbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBAQ29udGVudENoaWxkKElneEV4Y2VsU3R5bGVNb3ZpbmdUZW1wbGF0ZURpcmVjdGl2ZSwgeyByZWFkOiBJZ3hFeGNlbFN0eWxlTW92aW5nVGVtcGxhdGVEaXJlY3RpdmUgfSlcbiAgICBwdWJsaWMgZXhjZWxTdHlsZU1vdmluZ1RlbXBsYXRlRGlyZWN0aXZlOiBJZ3hFeGNlbFN0eWxlTW92aW5nVGVtcGxhdGVEaXJlY3RpdmU7XG5cbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBAQ29udGVudENoaWxkKElneEV4Y2VsU3R5bGVIaWRpbmdUZW1wbGF0ZURpcmVjdGl2ZSwgeyByZWFkOiBJZ3hFeGNlbFN0eWxlSGlkaW5nVGVtcGxhdGVEaXJlY3RpdmUgfSlcbiAgICBwdWJsaWMgZXhjZWxTdHlsZUhpZGluZ1RlbXBsYXRlRGlyZWN0aXZlOiBJZ3hFeGNlbFN0eWxlSGlkaW5nVGVtcGxhdGVEaXJlY3RpdmU7XG5cbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBAQ29udGVudENoaWxkKElneEV4Y2VsU3R5bGVQaW5uaW5nVGVtcGxhdGVEaXJlY3RpdmUsIHsgcmVhZDogSWd4RXhjZWxTdHlsZVBpbm5pbmdUZW1wbGF0ZURpcmVjdGl2ZSB9KVxuICAgIHB1YmxpYyBleGNlbFN0eWxlUGlubmluZ1RlbXBsYXRlRGlyZWN0aXZlOiBJZ3hFeGNlbFN0eWxlUGlubmluZ1RlbXBsYXRlRGlyZWN0aXZlO1xuXG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQFZpZXdDaGlsZHJlbihJZ3hHcmlkSGVhZGVyR3JvdXBDb21wb25lbnQsIHsgcmVhZDogSWd4R3JpZEhlYWRlckdyb3VwQ29tcG9uZW50IH0pXG4gICAgcHVibGljIGhlYWRlckdyb3VwczogUXVlcnlMaXN0PElneEdyaWRIZWFkZXJHcm91cENvbXBvbmVudD47XG5cbiAgICAvKipcbiAgICAgKiBBIGxpc3Qgb2YgYWxsIGBJZ3hHcmlkSGVhZGVyR3JvdXBDb21wb25lbnRgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBoZWFkZXJHcm91cHNMaXN0ID0gdGhpcy5ncmlkLmhlYWRlckdyb3Vwc0xpc3Q7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIGdldCBoZWFkZXJHcm91cHNMaXN0KCk6IElneEdyaWRIZWFkZXJHcm91cENvbXBvbmVudFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGVhZGVyR3JvdXBzID8gZmxhdHRlbih0aGlzLmhlYWRlckdyb3Vwcy50b0FycmF5KCkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBsaXN0IG9mIGFsbCBgSWd4R3JpZEhlYWRlckNvbXBvbmVudGAuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGhlYWRlcnMgPSB0aGlzLmdyaWQuaGVhZGVyQ2VsbExpc3Q7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIGdldCBoZWFkZXJDZWxsTGlzdCgpOiBJZ3hHcmlkSGVhZGVyQ29tcG9uZW50W10ge1xuICAgICAgICByZXR1cm4gdGhpcy5oZWFkZXJHcm91cHNMaXN0Lm1hcCgoaGVhZGVyR3JvdXApID0+IGhlYWRlckdyb3VwLmhlYWRlckNlbGwpLmZpbHRlcigoaGVhZGVyQ2VsbCkgPT4gaGVhZGVyQ2VsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBsaXN0IG9mIGFsbCBgSWd4R3JpZEZpbHRlcmluZ0NlbGxDb21wb25lbnRgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBmaWx0ZXJDZWxscyA9IHRoaXMuZ3JpZC5maWx0ZXJDZWxsTGlzdDtcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgZ2V0IGZpbHRlckNlbGxMaXN0KCk6IElneEdyaWRGaWx0ZXJpbmdDZWxsQ29tcG9uZW50W10ge1xuICAgICAgICByZXR1cm4gdGhpcy5oZWFkZXJHcm91cHNMaXN0Lm1hcCgoaGVhZGVyR3JvdXApID0+IGhlYWRlckdyb3VwLmZpbHRlckNlbGwpLmZpbHRlcigoZmlsdGVyQ2VsbCkgPT4gZmlsdGVyQ2VsbCk7XG4gICAgfVxuXG4gICAgQFZpZXdDaGlsZHJlbigncm93JylcbiAgICBwcml2YXRlIF9yb3dMaXN0OiBRdWVyeUxpc3Q8SWd4R3JpZFJvd0NvbXBvbmVudD47XG5cbiAgICBAVmlld0NoaWxkcmVuKCdzdW1tYXJ5Um93JywgeyByZWFkOiBJZ3hTdW1tYXJ5Um93Q29tcG9uZW50IH0pXG4gICAgcHJvdGVjdGVkIF9zdW1tYXJ5Um93TGlzdDogUXVlcnlMaXN0PElneFN1bW1hcnlSb3dDb21wb25lbnQ+O1xuXG4gICAgcHVibGljIGdldCBzdW1tYXJpZXNSb3dMaXN0KCkge1xuICAgICAgICBjb25zdCByZXMgPSBuZXcgUXVlcnlMaXN0PGFueT4oKTtcbiAgICAgICAgaWYgKCF0aGlzLl9zdW1tYXJ5Um93TGlzdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdW1MaXN0ID0gdGhpcy5fc3VtbWFyeVJvd0xpc3QuZmlsdGVyKChpdGVtKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudCAhPT0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5yZXNldChzdW1MaXN0KTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGxpc3Qgb2YgYElneEdyaWRSb3dDb21wb25lbnRgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCByb3dMaXN0ID0gdGhpcy5ncmlkLnJvd0xpc3Q7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgcm93TGlzdCgpIHtcbiAgICAgICAgY29uc3QgcmVzID0gbmV3IFF1ZXJ5TGlzdDxhbnk+KCk7XG4gICAgICAgIGlmICghdGhpcy5fcm93TGlzdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByTGlzdCA9IHRoaXMuX3Jvd0xpc3RcbiAgICAgICAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudCAhPT0gbnVsbDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBhLmluZGV4IC0gYi5pbmRleDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICByZXMucmVzZXQockxpc3QpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIEBWaWV3Q2hpbGRyZW4oSWd4Um93Q29tcG9uZW50LCB7IHJlYWQ6IElneFJvd0NvbXBvbmVudCB9KVxuICAgIHByaXZhdGUgX2RhdGFSb3dMaXN0OiBRdWVyeUxpc3Q8YW55PjtcblxuICAgIC8qKlxuICAgICAqIEEgbGlzdCBvZiBgSWd4R3JpZFJvd0NvbXBvbmVudGAsIGN1cnJlbnRseSByZW5kZXJlZC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgZGF0YUxpc3QgPSB0aGlzLmdyaWQuZGF0YVJvd0xpc3Q7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgZGF0YVJvd0xpc3QoKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IG5ldyBRdWVyeUxpc3Q8YW55PigpO1xuICAgICAgICBpZiAoIXRoaXMuX2RhdGFSb3dMaXN0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJMaXN0ID0gdGhpcy5fZGF0YVJvd0xpc3QuZmlsdGVyKChpdGVtKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudCAhPT0gbnVsbDtcbiAgICAgICAgfSkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O1xuICAgICAgICB9KTtcbiAgICAgICAgcmVzLnJlc2V0KHJMaXN0KTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHRlbXBsYXRlIHJlZmVyZW5jZSBmb3IgdGhlIHRlbXBsYXRlIHdoZW4gdGhlIGZpbHRlcmVkIGBJZ3hHcmlkQ29tcG9uZW50YCBpcyBlbXB0eS5cbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCBlbXB0eVRlbXBhbHRlID0gdGhpcy5ncmlkLmVtcHR5R3JpZFRlbXBsYXRlO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBAVmlld0NoaWxkKCdlbXB0eUZpbHRlcmVkR3JpZCcsIHsgcmVhZDogVGVtcGxhdGVSZWYgfSlcbiAgICBwdWJsaWMgZW1wdHlGaWx0ZXJlZEdyaWRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIC8qKlxuICAgICAqIEEgdGVtcGxhdGUgcmVmZXJlbmNlIGZvciB0aGUgdGVtcGxhdGUgd2hlbiB0aGUgYElneEdyaWRDb21wb25lbnRgIGlzIGVtcHR5LlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IGVtcHR5VGVtcGFsdGUgPSB0aGlzLmdyaWQuZW1wdHlHcmlkVGVtcGxhdGU7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGQoJ2RlZmF1bHRFbXB0eUdyaWQnLCB7IHJlYWQ6IFRlbXBsYXRlUmVmIH0pXG4gICAgcHVibGljIGVtcHR5R3JpZERlZmF1bHRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIEBWaWV3Q2hpbGQoJ2RlZmF1bHRMb2FkaW5nR3JpZCcsIHsgcmVhZDogVGVtcGxhdGVSZWYgfSlcbiAgICBwdWJsaWMgbG9hZGluZ0dyaWREZWZhdWx0VGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQFZpZXdDaGlsZCgnc2Nyb2xsQ29udGFpbmVyJywgeyByZWFkOiBJZ3hHcmlkRm9yT2ZEaXJlY3RpdmUgfSlcbiAgICBwdWJsaWMgcGFyZW50VmlydERpcjogSWd4R3JpZEZvck9mRGlyZWN0aXZlPGFueT47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0ZW1wbGF0ZSB3aGljaCB3aWxsIGJlIHVzZWQgYnkgdGhlIHRvb2xiYXIgdG8gc2hvdyBjdXN0b20gY29udGVudC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGN1c3RvbUNvbnRlbnRUZW1wbGF0ZSA9IHRoaXMuZ3JpZC50b29sYmFyQ3VzdG9tQ29udGVudFRlbXBsYXRlO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgdG9vbGJhckN1c3RvbUNvbnRlbnRUZW1wbGF0ZSgpOiBJZ3hHcmlkVG9vbGJhckN1c3RvbUNvbnRlbnREaXJlY3RpdmUge1xuICAgICAgICByZXR1cm4gdGhpcy50b29sYmFyQ3VzdG9tQ29udGVudFRlbXBsYXRlcy5maXJzdDtcbiAgICB9XG5cbiAgICBAQ29udGVudENoaWxkcmVuKElneEdyaWRUb29sYmFyQ3VzdG9tQ29udGVudERpcmVjdGl2ZSwgeyByZWFkOiBJZ3hHcmlkVG9vbGJhckN1c3RvbUNvbnRlbnREaXJlY3RpdmUsIGRlc2NlbmRhbnRzOiBmYWxzZSB9KVxuICAgIHB1YmxpYyB0b29sYmFyQ3VzdG9tQ29udGVudFRlbXBsYXRlczogUXVlcnlMaXN0PElneEdyaWRUb29sYmFyQ3VzdG9tQ29udGVudERpcmVjdGl2ZT47XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQFZpZXdDaGlsZCgndmVydGljYWxTY3JvbGxDb250YWluZXInLCB7IHJlYWQ6IElneEdyaWRGb3JPZkRpcmVjdGl2ZSB9KVxuICAgIHB1YmxpYyB2ZXJ0aWNhbFNjcm9sbENvbnRhaW5lcjogSWd4R3JpZEZvck9mRGlyZWN0aXZlPGFueT47XG5cbiAgICAgICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGQoJ3ZlcnRpY2FsU2Nyb2xsSG9sZGVyJywgeyByZWFkOiBJZ3hHcmlkRm9yT2ZEaXJlY3RpdmUgfSlcbiAgICBwdWJsaWMgdmVydGljYWxTY3JvbGw6IElneEdyaWRGb3JPZkRpcmVjdGl2ZTxhbnk+O1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGQoJ3NjcicsIHsgcmVhZDogRWxlbWVudFJlZiB9KVxuICAgIHB1YmxpYyBzY3I6IEVsZW1lbnRSZWY7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQFZpZXdDaGlsZCgncGFnaW5hdG9yJywgeyByZWFkOiBFbGVtZW50UmVmIH0pXG4gICAgcHVibGljIHBhZ2luYXRvcjogRWxlbWVudFJlZjtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBAVmlld0NoaWxkKCdoZWFkZXJDb250YWluZXInLCB7IHJlYWQ6IElneEdyaWRGb3JPZkRpcmVjdGl2ZSB9KVxuICAgIHB1YmxpYyBoZWFkZXJDb250YWluZXI6IElneEdyaWRGb3JPZkRpcmVjdGl2ZTxhbnk+O1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGQoJ2hlYWRlckNoZWNrYm94Q29udGFpbmVyJylcbiAgICBwdWJsaWMgaGVhZGVyQ2hlY2tib3hDb250YWluZXI6IEVsZW1lbnRSZWY7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQFZpZXdDaGlsZCgnaGVhZGVyRHJhZ0NvbnRhaW5lcicpXG4gICAgcHVibGljIGhlYWRlckRyYWdDb250YWluZXI6IEVsZW1lbnRSZWY7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQFZpZXdDaGlsZCgnaGVhZGVyR3JvdXBDb250YWluZXInKVxuICAgIHB1YmxpYyBoZWFkZXJHcm91cENvbnRhaW5lcjogRWxlbWVudFJlZjtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBAVmlld0NoaWxkKCdoZWFkZXJDaGVja2JveCcsIHsgcmVhZDogSWd4Q2hlY2tib3hDb21wb25lbnQgfSlcbiAgICBwdWJsaWMgaGVhZGVyQ2hlY2tib3g6IElneENoZWNrYm94Q29tcG9uZW50O1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGQoJ2ZpbHRlcmluZ1JvdycsIHsgcmVhZDogSWd4R3JpZEZpbHRlcmluZ1Jvd0NvbXBvbmVudCB9KVxuICAgIHB1YmxpYyBmaWx0ZXJpbmdSb3c6IElneEdyaWRGaWx0ZXJpbmdSb3dDb21wb25lbnQ7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQFZpZXdDaGlsZCgndGhlYWRSb3cnKVxuICAgIHB1YmxpYyB0aGVhZFJvdzogRWxlbWVudFJlZjtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBAVmlld0NoaWxkKCd0Ym9keScpXG4gICAgcHVibGljIHRib2R5OiBFbGVtZW50UmVmO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGQoJ3Rmb290JylcbiAgICBwdWJsaWMgdGZvb3Q6IEVsZW1lbnRSZWY7XG5cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBAVmlld0NoaWxkKCdpZ3hGaWx0ZXJpbmdPdmVybGF5T3V0bGV0JywgeyByZWFkOiBJZ3hPdmVybGF5T3V0bGV0RGlyZWN0aXZlIH0pXG4gICAgcHJvdGVjdGVkIF9vdXRsZXREaXJlY3RpdmU6IElneE92ZXJsYXlPdXRsZXREaXJlY3RpdmU7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGdldCBvdXRsZXREaXJlY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vdXRsZXREaXJlY3RpdmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGQoJ2lneFJvd0VkaXRpbmdPdmVybGF5T3V0bGV0JywgeyByZWFkOiBJZ3hPdmVybGF5T3V0bGV0RGlyZWN0aXZlIH0pXG4gICAgcHVibGljIHJvd0VkaXRpbmdPdXRsZXREaXJlY3RpdmU6IElneE92ZXJsYXlPdXRsZXREaXJlY3RpdmU7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGdldCByb3dPdXRsZXREaXJlY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvd0VkaXRpbmdPdXRsZXREaXJlY3RpdmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgcGFyZW50Um93T3V0bGV0RGlyZWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgQFZpZXdDaGlsZCgnZHJhZ0luZGljYXRvckljb25CYXNlJywgeyByZWFkOiBUZW1wbGF0ZVJlZiB9KVxuICAgIHB1YmxpYyBkcmFnSW5kaWNhdG9ySWNvbkJhc2U6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQFZpZXdDaGlsZCgnZGVmYXVsdFJvd0VkaXRUZW1wbGF0ZScsIHsgcmVhZDogVGVtcGxhdGVSZWYgfSlcbiAgICBwcml2YXRlIGRlZmF1bHRSb3dFZGl0VGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBDb250ZW50Q2hpbGQoSWd4Um93RWRpdFRlbXBsYXRlRGlyZWN0aXZlLCB7IHJlYWQ6IFRlbXBsYXRlUmVmIH0pXG4gICAgcHVibGljIHJvd0VkaXRDdXN0b206IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHB1YmxpYyBnZXQgcm93RWRpdENvbnRhaW5lcigpOiBUZW1wbGF0ZVJlZjxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm93RWRpdEN1c3RvbSA/IHRoaXMucm93RWRpdEN1c3RvbSA6IHRoaXMuZGVmYXVsdFJvd0VkaXRUZW1wbGF0ZTtcbiAgICB9XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBAQ29udGVudENoaWxkKElneFJvd0VkaXRUZXh0RGlyZWN0aXZlLCB7IHJlYWQ6IFRlbXBsYXRlUmVmIH0pXG4gICAgcHVibGljIHJvd0VkaXRUZXh0OiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQENvbnRlbnRDaGlsZChJZ3hSb3dFZGl0QWN0aW9uc0RpcmVjdGl2ZSwgeyByZWFkOiBUZW1wbGF0ZVJlZiB9KVxuICAgIHB1YmxpYyByb3dFZGl0QWN0aW9uczogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHJvd0luRWRpdE1vZGUoKTogSWd4Um93Q29tcG9uZW50PElneEdyaWRCYXNlQ29tcG9uZW50ICYgSUdyaWREYXRhQmluZGFibGU+IHtcbiAgICAgICAgY29uc3QgZWRpdFJvd1N0YXRlID0gdGhpcy5jcnVkU2VydmljZS5yb3c7XG4gICAgICAgIHJldHVybiBlZGl0Um93U3RhdGUgIT09IG51bGwgPyB0aGlzLnJvd0xpc3QuZmluZChlID0+IGUucm93SUQgPT09IGVkaXRSb3dTdGF0ZS5pZCkgOiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGZpcnN0RWRpdGFibGVDb2x1bW5JbmRleCgpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBpbmRleCA9IFsuLi50aGlzLnBpbm5lZENvbHVtbnMsIC4uLnRoaXMudW5waW5uZWRDb2x1bW5zXS5maWx0ZXIoZSA9PiAhZS5jb2x1bW5Hcm91cCkuZmluZEluZGV4KGUgPT4gZS5lZGl0YWJsZSk7XG4gICAgICAgIHJldHVybiBpbmRleCAhPT0gLTEgPyBpbmRleCA6IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgbGFzdEVkaXRhYmxlQ29sdW1uSW5kZXgoKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3Qgb3JkZXJlZENvbHVtbnMgPSBbLi4udGhpcy5waW5uZWRDb2x1bW5zLCAuLi50aGlzLnVucGlubmVkQ29sdW1uc10uZmlsdGVyKGUgPT4gIWUuY29sdW1uR3JvdXApO1xuICAgICAgICBjb25zdCBpbmRleCA9IG9yZGVyZWRDb2x1bW5zLnJldmVyc2UoKS5maW5kSW5kZXgoZSA9PiBlLmVkaXRhYmxlKTtcbiAgICAgICAgcmV0dXJuIGluZGV4ICE9PSAtMSA/IG9yZGVyZWRDb2x1bW5zLmxlbmd0aCAtIDEgLSBpbmRleCA6IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGRyZW4oSWd4Um93RWRpdFRhYlN0b3BEaXJlY3RpdmUpXG4gICAgcHVibGljIHJvd0VkaXRUYWJzREVGQVVMVDogUXVlcnlMaXN0PElneFJvd0VkaXRUYWJTdG9wRGlyZWN0aXZlPjtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBAQ29udGVudENoaWxkcmVuKElneFJvd0VkaXRUYWJTdG9wRGlyZWN0aXZlKVxuICAgIHB1YmxpYyByb3dFZGl0VGFic0NVU1RPTTogUXVlcnlMaXN0PElneFJvd0VkaXRUYWJTdG9wRGlyZWN0aXZlPjtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBUT0RPOiBOYXYgc2VydmljZSBsb2dpYyBkb2Vzbid0IGhhbmRsZSAwIHJlc3VsdHMgZnJvbSB0aGlzIHF1ZXJ5bGlzdFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgcm93RWRpdFRhYnMoKTogUXVlcnlMaXN0PElneFJvd0VkaXRUYWJTdG9wRGlyZWN0aXZlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvd0VkaXRUYWJzQ1VTVE9NLmxlbmd0aCA/IHRoaXMucm93RWRpdFRhYnNDVVNUT00gOiB0aGlzLnJvd0VkaXRUYWJzREVGQVVMVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQFZpZXdDaGlsZChJZ3hUb2dnbGVEaXJlY3RpdmUpXG4gICAgcHVibGljIHJvd0VkaXRpbmdPdmVybGF5OiBJZ3hUb2dnbGVEaXJlY3RpdmU7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnRhYmluZGV4JylcbiAgICBwdWJsaWMgdGFiaW5kZXggPSAwO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci5jbGFzcycpXG4gICAgZ2V0IGhvc3RDbGFzcygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb21wb25lbnREZW5zaXR5Q2xhc3MoJ2lneC1ncmlkJyk7XG4gICAgfVxuXG4gICAgZ2V0IGJhbm5lckNsYXNzKCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5yb3dFZGl0UG9zaXRpb25pbmdTdHJhdGVneS5pc1RvcCA/ICdpZ3gtYmFubmVyX19ib3JkZXItdG9wJyA6ICdpZ3gtYmFubmVyX19ib3JkZXItYm90dG9tJztcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuZ2V0Q29tcG9uZW50RGVuc2l0eUNsYXNzKCdpZ3gtYmFubmVyJyl9ICR7cG9zaXRpb259YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKVxuICAgIHB1YmxpYyBob3N0Um9sZSA9ICdncmlkJztcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgcGlwZVRyaWdnZXIoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BpcGVUcmlnZ2VyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgc3VtbWFyeVBpcGVUcmlnZ2VyKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdW1tYXJ5UGlwZVRyaWdnZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc29ydGluZyBzdGF0ZSBvZiB0aGUgYElneEdyaWRDb21wb25lbnRgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBzb3J0aW5nU3RhdGUgPSB0aGlzLmdyaWQuc29ydGluZ0V4cHJlc3Npb25zO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBAV2F0Y2hDaGFuZ2VzKClcbiAgICBASW5wdXQoKVxuICAgIGdldCBzb3J0aW5nRXhwcmVzc2lvbnMoKTogSVNvcnRpbmdFeHByZXNzaW9uW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5fc29ydGluZ0V4cHJlc3Npb25zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHNvcnRpbmcgc3RhdGUgb2YgdGhlIGBJZ3hHcmlkQ29tcG9uZW50YC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5ncmlkLnNvcnRpbmdFeHByZXNzaW9ucyA9IFt7XG4gICAgICogICAgIGZpZWxkTmFtZTogXCJJRFwiLFxuICAgICAqICAgICBkaXI6IFNvcnRpbmdEaXJlY3Rpb24uRGVzYyxcbiAgICAgKiAgICAgaWdub3JlQ2FzZTogdHJ1ZVxuICAgICAqIH1dO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBzZXQgc29ydGluZ0V4cHJlc3Npb25zKHZhbHVlOiBJU29ydGluZ0V4cHJlc3Npb25bXSkge1xuICAgICAgICB0aGlzLl9zb3J0aW5nRXhwcmVzc2lvbnMgPSBjbG9uZUFycmF5KHZhbHVlKTtcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3RhdGUgb2YgdGhlIGdyaWQgdmlydHVhbGl6YXRpb24sIGluY2x1ZGluZyB0aGUgc3RhcnQgaW5kZXggYW5kIGhvdyBtYW55IHJlY29yZHMgYXJlIHJlbmRlcmVkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBncmlkVmlydFN0YXRlID0gdGhpcy5ncmlkMS52aXJ0dWFsaXphdGlvblN0YXRlO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBnZXQgdmlydHVhbGl6YXRpb25TdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVydGljYWxTY3JvbGxDb250YWluZXIuc3RhdGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHNldCB2aXJ0dWFsaXphdGlvblN0YXRlKHN0YXRlKSB7XG4gICAgICAgIHRoaXMudmVydGljYWxTY3JvbGxDb250YWluZXIuc3RhdGUgPSBzdGF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0b3RhbCBudW1iZXIgb2YgcmVjb3JkcyBpbiB0aGUgZGF0YSBzb3VyY2UuXG4gICAgICogV29ya3Mgb25seSB3aXRoIHJlbW90ZSBncmlkIHZpcnR1YWxpemF0aW9uLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBpdGVtQ291bnQgPSB0aGlzLmdyaWQxLnRvdGFsSXRlbUNvdW50O1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBnZXQgdG90YWxJdGVtQ291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnRvdGFsSXRlbUNvdW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRvdGFsIG51bWJlciBvZiByZWNvcmRzIGluIHRoZSBkYXRhIHNvdXJjZS5cbiAgICAgKiBUaGlzIHByb3BlcnR5IGlzIHJlcXVpcmVkIGZvciB2aXJ0dWFsaXphdGlvbiB0byBmdW5jdGlvbiB3aGVuIHRoZSBncmlkIGlzIGJvdW5kIHJlbW90ZWx5LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmdyaWQxLnRvdGFsSXRlbUNvdW50ID0gNTU7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHNldCB0b3RhbEl0ZW1Db3VudChjb3VudCkge1xuICAgICAgICB0aGlzLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnRvdGFsSXRlbUNvdW50ID0gY291bnQ7XG4gICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0IG1heExldmVsSGVhZGVyRGVwdGgoKSB7XG4gICAgICAgIGlmICh0aGlzLl9tYXhMZXZlbEhlYWRlckRlcHRoID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXhMZXZlbEhlYWRlckRlcHRoID0gdGhpcy5oYXNDb2x1bW5MYXlvdXRzID9cbiAgICAgICAgICAgICAgICB0aGlzLmNvbHVtbkxpc3QucmVkdWNlKChhY2MsIGNvbCkgPT4gTWF0aC5tYXgoYWNjLCBjb2wucm93U3RhcnQpLCAwKSA6XG4gICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5MaXN0LnJlZHVjZSgoYWNjLCBjb2wpID0+IE1hdGgubWF4KGFjYywgY29sLmxldmVsKSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX21heExldmVsSGVhZGVyRGVwdGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGhpZGRlbiBgSWd4Q29sdW1uQ29tcG9uZW50YC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgaGlkZGVuQ29sID0gdGhpcy5ncmlkLmhpZGRlbkNvbHVtbnNDb3VudDtcbiAgICAgKiBgYFxuICAgICAqL1xuICAgIGdldCBoaWRkZW5Db2x1bW5zQ291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbkxpc3QuZmlsdGVyKChjb2wpID0+IGNvbC5jb2x1bW5Hcm91cCA9PT0gZmFsc2UgJiYgY29sLmhpZGRlbiA9PT0gdHJ1ZSkubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHRleHQgdG8gYmUgZGlzcGxheWVkIGluc2lkZSB0aGUgdG9nZ2xlIGJ1dHRvblxuICAgICAqIGZvciB0aGUgYnVpbHQtaW4gY29sdW1uIGhpZGluZyBVSSBvZiB0aGVgSWd4Q29sdW1uQ29tcG9uZW50YC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgaGlkZGVuQ29sVGV4dCA9IHRoaXMuZ3JpZC5oaWRkZW5Db2x1bW5zVGV4dDtcbiAgICAgKiBgYFxuICAgICAqL1xuICAgIEBXYXRjaENoYW5nZXMoKVxuICAgIEBJbnB1dCgpXG4gICAgZ2V0IGhpZGRlbkNvbHVtbnNUZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGlkZGVuQ29sdW1uc1RleHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGV4dCB0byBiZSBkaXNwbGF5ZWQgaW5zaWRlIHRoZSB0b2dnbGUgYnV0dG9uXG4gICAgICogZm9yIHRoZSBidWlsdC1pbiBjb2x1bW4gaGlkaW5nIFVJIG9mIHRoZWBJZ3hDb2x1bW5Db21wb25lbnRgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiA8aWd4LWdyaWQgW2NvbHVtbkhpZGluZ109XCJ0cnVlXCIgW3Nob3dUb29sYmFyXT1cInRydWVcIiBbaGlkZGVuQ29sdW1uc1RleHRdPVwiJ0hpZGRlbiBDb2x1bW5zJ1wiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHNldCBoaWRkZW5Db2x1bW5zVGV4dCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9oaWRkZW5Db2x1bW5zVGV4dCA9IHZhbHVlO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdGV4dCB0byBiZSBkaXNwbGF5ZWQgaW5zaWRlIHRoZSB0b2dnbGUgYnV0dG9uXG4gICAgICogZm9yIHRoZSBidWlsdC1pbiBjb2x1bW4gcGlubmluZyBVSSBvZiB0aGVgSWd4Q29sdW1uQ29tcG9uZW50YC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgcGlubmVkVGV4dCA9IHRoaXMuZ3JpZC5waW5uZWRDb2x1bW5zVGV4dDtcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQFdhdGNoQ2hhbmdlcygpXG4gICAgQElucHV0KClcbiAgICBnZXQgcGlubmVkQ29sdW1uc1RleHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9waW5uZWRDb2x1bW5zVGV4dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0ZXh0IHRvIGJlIGRpc3BsYXllZCBpbnNpZGUgdGhlIHRvZ2dsZSBidXR0b25cbiAgICAgKiBmb3IgdGhlIGJ1aWx0LWluIGNvbHVtbiBwaW5uaW5nIFVJIG9mIHRoZWBJZ3hDb2x1bW5Db21wb25lbnRgLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWdyaWQgW3Bpbm5lZENvbHVtbnNUZXh0XT1cIidQaW5uZWRDb2xzIFRleHRcIiBbZGF0YV09XCJkYXRhXCIgW3dpZHRoXT1cIicxMDAlJ1wiIFtoZWlnaHRdPVwiJzUwMHB4J1wiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHNldCBwaW5uZWRDb2x1bW5zVGV4dCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9waW5uZWRDb2x1bW5zVGV4dCA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0cmFuc2FjdGlvbnMgc2VydmljZSBmb3IgdGhlIGdyaWQuXG4gICAgICovXG4gICAgZ2V0IHRyYW5zYWN0aW9ucygpOiBUcmFuc2FjdGlvblNlcnZpY2U8VHJhbnNhY3Rpb24sIFN0YXRlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2FjdGlvbnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICovXG4gICAgcHVibGljIGNvbHVtbnNXaXRoTm9TZXRXaWR0aHMgPSBudWxsO1xuXG4gICAgLyogVG9vbGJhciByZWxhdGVkIGRlZmluaXRpb25zICovXG4gICAgcHJpdmF0ZSBfc2hvd1Rvb2xiYXIgPSBmYWxzZTtcbiAgICBwcml2YXRlIF9leHBvcnRFeGNlbCA9IGZhbHNlO1xuICAgIHByaXZhdGUgX2V4cG9ydENzdiA9IGZhbHNlO1xuICAgIHByaXZhdGUgX3Rvb2xiYXJUaXRsZTogc3RyaW5nID0gbnVsbDtcbiAgICBwcml2YXRlIF9leHBvcnRUZXh0OiBzdHJpbmcgPSBudWxsO1xuICAgIHByaXZhdGUgX2V4cG9ydEV4Y2VsVGV4dDogc3RyaW5nID0gbnVsbDtcbiAgICBwcml2YXRlIF9leHBvcnRDc3ZUZXh0OiBzdHJpbmcgPSBudWxsO1xuICAgIHByaXZhdGUgX3Jvd0VkaXRhYmxlID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBfY3VycmVudFJvd1N0YXRlOiBhbnk7XG4gICAgcHJpdmF0ZSBfZmlsdGVyZWRTb3J0ZWREYXRhID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgKi9cbiAgICBwdWJsaWMgZ2V0IGN1cnJlbnRSb3dTdGF0ZSgpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudFJvd1N0YXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgYElneFRvb2xiYXJDb21wb25lbnRgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBncmlkVG9vbGJhciA9IHRoaXMuZ3JpZC50b29sYmFyO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBAVmlld0NoaWxkKCd0b29sYmFyJywgeyByZWFkOiBJZ3hHcmlkVG9vbGJhckNvbXBvbmVudCB9KVxuICAgIHB1YmxpYyB0b29sYmFyOiBJZ3hHcmlkVG9vbGJhckNvbXBvbmVudCA9IG51bGw7XG5cbiAgICBAVmlld0NoaWxkKCd0b29sYmFyJywgeyByZWFkOiBFbGVtZW50UmVmIH0pXG4gICAgcHJpdmF0ZSB0b29sYmFySHRtbDogRWxlbWVudFJlZiA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGBJZ3hHcmlkQ29tcG9uZW50YCdzIHRvb2xiYXIgaXMgc2hvd24gb3IgaGlkZGVuLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCB0b29sYmFyR3JpZCA9IHRoaXMuZ3JpZC5zaG93VG9vbGJhcjtcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQFdhdGNoQ2hhbmdlcygpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IHNob3dUb29sYmFyKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2hvd1Rvb2xiYXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvd3Mgb3IgaGlkZXMgdGhlIGBJZ3hHcmlkQ29tcG9uZW50YCdzIHRvb2xiYXIuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCBbZGF0YV09XCJsb2NhbERhdGFcIiBbc2hvd1Rvb2xiYXJdPVwidHJ1ZVwiIFthdXRvR2VuZXJhdGVdPVwidHJ1ZVwiID48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IHNob3dUb29sYmFyKG5ld1ZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh0aGlzLl9zaG93VG9vbGJhciAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3Nob3dUb29sYmFyID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9uZ0FmdGVyVmlld0luaXRQYXNzZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZUdyaWRTaXplcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdG9vbGJhcidzIHRpdGxlLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCB0b29sYmFyVGl0bGUgID0gdGhpcy5ncmlkLnRvb2xiYXJUaXRsZTtcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQFdhdGNoQ2hhbmdlcygpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IHRvb2xiYXJUaXRsZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fdG9vbGJhclRpdGxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRvb2xiYXIncyB0aXRsZS5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkIFtkYXRhXT1cImxvY2FsRGF0YVwiIFtzaG93VG9vbGJhcl09XCJ0cnVlXCIgW2F1dG9HZW5lcmF0ZV09XCJ0cnVlXCIgW3Rvb2xiYXJUaXRsZV09XCInTXkgR3JpZCdcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IHRvb2xiYXJUaXRsZShuZXdWYWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLl90b29sYmFyVGl0bGUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl90b29sYmFyVGl0bGUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX25nQWZ0ZXJWaWV3SW5pdFBhc3NlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlR3JpZFNpemVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIG9wdGlvbiBmb3IgZXhwb3J0aW5nIHRvIE1TIEV4Y2VsIGlzIGVuYWJsZWQgb3IgZGlzYWJsZWQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvc250IGV4Y2VsRXhwb3J0ZXIgPSB0aGlzLmdyaWQuZXhwb3J0RXhjZWw7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBXYXRjaENoYW5nZXMoKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdldCBleHBvcnRFeGNlbCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RXhwb3J0RXhjZWwoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgb3IgZGlzYWJsZSB0aGUgb3B0aW9uIGZvciBleHBvcnRpbmcgdG8gTVMgRXhjZWwuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCBbZGF0YV09XCJsb2NhbERhdGFcIiBbc2hvd1Rvb2xiYXJdPVwidHJ1ZVwiIFthdXRvR2VuZXJhdGVdPVwidHJ1ZVwiIFtleHBvcnRFeGNlbF09XCJ0cnVlXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIHNldCBleHBvcnRFeGNlbChuZXdWYWx1ZTogYm9vbGVhbikge1xuICAgICAgICBpZiAodGhpcy5fZXhwb3J0RXhjZWwgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9leHBvcnRFeGNlbCA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5fbmdBZnRlclZpZXdJbml0UGFzc2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVHcmlkU2l6ZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgb3B0aW9uIGZvciBleHBvcnRpbmcgdG8gQ1NWIGlzIGVuYWJsZWQgb3IgZGlzYWJsZWQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGV4cG9ydENzdiA9IHRoaXMuZ3JpZC5leHBvcnRDc3Y7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBXYXRjaENoYW5nZXMoKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdldCBleHBvcnRDc3YoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEV4cG9ydENzdigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZSBvciBkaXNhYmxlIHRoZSBvcHRpb24gZm9yIGV4cG9ydGluZyB0byBDU1YuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCBbZGF0YV09XCJsb2NhbERhdGFcIiBbc2hvd1Rvb2xiYXJdPVwidHJ1ZVwiIFthdXRvR2VuZXJhdGVdPVwidHJ1ZVwiIFtleHBvcnRDc3ZdPVwidHJ1ZVwiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgZXhwb3J0Q3N2KG5ld1ZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh0aGlzLl9leHBvcnRDc3YgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9leHBvcnRDc3YgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX25nQWZ0ZXJWaWV3SW5pdFBhc3NlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlR3JpZFNpemVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0ZXh0dWFsIGNvbnRlbnQgZm9yIHRoZSBtYWluIGV4cG9ydCBidXR0b24uXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGV4cG9ydFRleHQgPSB0aGlzLmdyaWQuZXhwb3J0VGV4dDtcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQFdhdGNoQ2hhbmdlcygpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IGV4cG9ydFRleHQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4cG9ydFRleHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGV4dHVhbCBjb250ZW50IGZvciB0aGUgbWFpbiBleHBvcnQgYnV0dG9uLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWdyaWQgW2RhdGFdPVwibG9jYWxEYXRhXCIgW3Nob3dUb29sYmFyXT1cInRydWVcIiBbZXhwb3J0VGV4dF09XCInTXkgRXhwb3J0ZXInXCIgW2V4cG9ydENzdl09XCJ0cnVlXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIHNldCBleHBvcnRUZXh0KG5ld1ZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuX2V4cG9ydFRleHQgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9leHBvcnRUZXh0ID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9uZ0FmdGVyVmlld0luaXRQYXNzZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZUdyaWRTaXplcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdGV4dHVhbCBjb250ZW50IGZvciB0aGUgTVMgRXhjZWwgZXhwb3J0IGJ1dHRvbi5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgZXhjZWxUZXh0ID0gdGhpcy5ncmlkLmV4cG9ydEV4Y2VsVGV4dDtcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgQFdhdGNoQ2hhbmdlcygpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IGV4cG9ydEV4Y2VsVGV4dCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhwb3J0RXhjZWxUZXh0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRleHR1YWwgY29udGVudCBmb3IgdGhlIE1TIEV4Y2VsIGV4cG9ydCBidXR0b24uXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCBbZXhwb3J0RXhjZWxUZXh0XT1cIidNeSBFeGNlbCBFeHBvcnRlclwiIFtzaG93VG9vbGJhcl09XCJ0cnVlXCIgW2V4cG9ydFRleHRdPVwiJ015IEV4cG9ydGVyJ1wiIFtleHBvcnRDc3ZdPVwidHJ1ZVwiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgZXhwb3J0RXhjZWxUZXh0KG5ld1ZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuX2V4cG9ydEV4Y2VsVGV4dCAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2V4cG9ydEV4Y2VsVGV4dCA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5fbmdBZnRlclZpZXdJbml0UGFzc2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVHcmlkU2l6ZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHRleHR1YWwgY29udGVudCBmb3IgdGhlIENTViBleHBvcnQgYnV0dG9uLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBjc3ZUZXh0ID0gdGhpcy5ncmlkLmV4cG9ydENzdlRleHQ7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBXYXRjaENoYW5nZXMoKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdldCBleHBvcnRDc3ZUZXh0KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leHBvcnRDc3ZUZXh0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRleHR1YWwgY29udGVudCBmb3IgdGhlIENTViBleHBvcnQgYnV0dG9uLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWdyaWQgW2V4cG9ydENzdlRleHRdPVwiJ015IENzdiBFeHBvcnRlclwiIFtzaG93VG9vbGJhcl09XCJ0cnVlXCIgW2V4cG9ydFRleHRdPVwiJ015IEV4cG9ydGVyJ1wiIFtleHBvcnRFeGNlbF09XCJ0cnVlXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIHNldCBleHBvcnRDc3ZUZXh0KG5ld1ZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuX2V4cG9ydENzdlRleHQgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9leHBvcnRDc3ZUZXh0ID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9uZ0FmdGVyVmlld0luaXRQYXNzZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZUdyaWRTaXplcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyByb3dFZGl0TWVzc2FnZTtcblxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBhbiBleHBvcnQgcHJvY2VzcyBpcyBpbml0aWF0ZWQgYnkgdGhlIHVzZXIuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRvb2xiYXJFeHBvcnRpbmcoZXZlbnQ6IElHcmlkVG9vbGJhckV4cG9ydEV2ZW50QXJncyl7XG4gICAgICogICAgIGNvbnN0IHRvb2xiYXJFeHBvcnRpbmcgPSBldmVudDtcbiAgICAgKiB9XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvblRvb2xiYXJFeHBvcnRpbmcgPSBuZXcgRXZlbnRFbWl0dGVyPElHcmlkVG9vbGJhckV4cG9ydEV2ZW50QXJncz4oKTtcblxuICAgIC8qIEVuZCBvZiB0b29sYmFyIHJlbGF0ZWQgZGVmaW5pdGlvbnMgKi9cblxuICAgIC8vIFRPRE86IERvY3VtZW50XG4gICAgQE91dHB1dCgpXG4gICAgb25SYW5nZVNlbGVjdGlvbiA9IG5ldyBFdmVudEVtaXR0ZXI8R3JpZFNlbGVjdGlvblJhbmdlPigpO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBwYWdpbmdTdGF0ZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGNhbGNXaWR0aDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2FsY0hlaWdodCA9IDA7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyB0Zm9vdEhlaWdodDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2hpcHNHb3VwaW5nRXhwcmVzc2lvbnMgPSBbXTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIHN1bW1hcmllc0hlaWdodDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBkcmFnZ2VkQ29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQ7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGFsbFJvd3NTZWxlY3RlZCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBkaXNhYmxlVHJhbnNpdGlvbnMgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgbGFzdFNlYXJjaEluZm86IElTZWFyY2hJbmZvID0ge1xuICAgICAgICBzZWFyY2hUZXh0OiAnJyxcbiAgICAgICAgY2FzZVNlbnNpdGl2ZTogZmFsc2UsXG4gICAgICAgIGV4YWN0TWF0Y2g6IGZhbHNlLFxuICAgICAgICBhY3RpdmVNYXRjaEluZGV4OiAwLFxuICAgICAgICBtYXRjaEluZm9DYWNoZTogW11cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBjb2x1bW5XaWR0aFNldEJ5VXNlciA9IGZhbHNlO1xuXG4gICAgYWJzdHJhY3QgZGF0YTogYW55W107XG4gICAgYWJzdHJhY3QgZmlsdGVyZWREYXRhOiBhbnlbXTtcbiAgICAvLyBhYnN0cmFjdCBkYXRhTGVuZ3RoO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PGFueT4oKTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX3BlclBhZ2UgPSAxNTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9wYWdlID0gMDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9wYWdpbmcgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9yb3dTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9yb3dEcmFnID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfcGlwZVRyaWdnZXIgPSAwO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX3N1bW1hcnlQaXBlVHJpZ2dlciA9IDA7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfY29sdW1uczogSWd4Q29sdW1uQ29tcG9uZW50W10gPSBbXTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9waW5uZWRDb2x1bW5zOiBJZ3hDb2x1bW5Db21wb25lbnRbXSA9IFtdO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX3VucGlubmVkQ29sdW1uczogSWd4Q29sdW1uQ29tcG9uZW50W10gPSBbXTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9maWx0ZXJpbmdFeHByZXNzaW9uc1RyZWU6IElGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUgPSBuZXcgRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlKEZpbHRlcmluZ0xvZ2ljLkFuZCk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfc29ydGluZ0V4cHJlc3Npb25zOiBBcnJheTxJU29ydGluZ0V4cHJlc3Npb24+ID0gW107XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfbWF4TGV2ZWxIZWFkZXJEZXB0aCA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfY29sdW1uSGlkaW5nID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfY29sdW1uUGlubmluZyA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2tleWRvd25MaXN0ZW5lciA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfdlNjcm9sbExpc3RlbmVyID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9oU2Nyb2xsTGlzdGVuZXIgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX3doZWVsTGlzdGVuZXIgPSBudWxsO1xuICAgIHByb3RlY3RlZCBfYWxsb3dGaWx0ZXJpbmcgPSBmYWxzZTtcbiAgICBwcm90ZWN0ZWQgX2ZpbHRlck1vZGUgPSBGaWx0ZXJNb2RlLnF1aWNrRmlsdGVyO1xuICAgIHByaXZhdGUgcmVzaXplSGFuZGxlcjtcbiAgICBwcml2YXRlIGNvbHVtbkxpc3REaWZmZXI7XG4gICAgcHJpdmF0ZSBfaGlkZGVuQ29sdW1uc1RleHQgPSAnJztcbiAgICBwcml2YXRlIF9waW5uZWRDb2x1bW5zVGV4dCA9ICcnO1xuICAgIHByaXZhdGUgX2hlaWdodCA9ICcxMDAlJztcbiAgICBwcml2YXRlIF93aWR0aCA9ICcxMDAlJztcbiAgICBwcml2YXRlIF9yb3dIZWlnaHQ7XG4gICAgcHJvdGVjdGVkIF9uZ0FmdGVyVmlld0luaXRQYXNzZWQgPSBmYWxzZTtcbiAgICBwcml2YXRlIF9ob3Jpem9udGFsRm9yT2ZzO1xuICAgIHByaXZhdGUgX211bHRpUm93TGF5b3V0Um93U2l6ZSA9IDE7XG5cbiAgICAvLyBDYWNoZXNcbiAgICBwcml2YXRlIF90b3RhbFdpZHRoID0gTmFOO1xuICAgIHByaXZhdGUgX3Bpbm5lZFZpc2libGUgPSBbXTtcbiAgICBwcml2YXRlIF91bnBpbm5lZFZpc2libGUgPSBbXTtcbiAgICBwcml2YXRlIF9waW5uZWRXaWR0aCA9IE5hTjtcbiAgICBwcml2YXRlIF91bnBpbm5lZFdpZHRoID0gTmFOO1xuICAgIHByaXZhdGUgX3Zpc2libGVDb2x1bW5zID0gW107XG4gICAgcHJpdmF0ZSBfY29sdW1uR3JvdXBzID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIF9jb2x1bW5XaWR0aDogc3RyaW5nO1xuXG4gICAgcHJpdmF0ZSBfZGVmYXVsdFRhcmdldFJlY29yZE51bWJlciA9IDEwO1xuXG4gICAgcHJpdmF0ZSBfc3VtbWFyeVBvc2l0aW9uID0gR3JpZFN1bW1hcnlQb3NpdGlvbi5ib3R0b207XG4gICAgcHJpdmF0ZSBfc3VtbWFyeUNhbGN1bGF0aW9uTW9kZSA9IEdyaWRTdW1tYXJ5Q2FsY3VsYXRpb25Nb2RlLnJvb3RBbmRDaGlsZExldmVscztcblxuICAgIHByaXZhdGUgcm93RWRpdFBvc2l0aW9uaW5nU3RyYXRlZ3kgPSBuZXcgQ29udGFpbmVyUG9zaXRpb25pbmdTdHJhdGVneSh7XG4gICAgICAgIGhvcml6b250YWxEaXJlY3Rpb246IEhvcml6b250YWxBbGlnbm1lbnQuUmlnaHQsXG4gICAgICAgIHZlcnRpY2FsRGlyZWN0aW9uOiBWZXJ0aWNhbEFsaWdubWVudC5Cb3R0b20sXG4gICAgICAgIGhvcml6b250YWxTdGFydFBvaW50OiBIb3Jpem9udGFsQWxpZ25tZW50LkxlZnQsXG4gICAgICAgIHZlcnRpY2FsU3RhcnRQb2ludDogVmVydGljYWxBbGlnbm1lbnQuQm90dG9tLFxuICAgICAgICBjbG9zZUFuaW1hdGlvbjogbnVsbFxuICAgIH0pO1xuXG4gICAgcHJpdmF0ZSByb3dFZGl0U2V0dGluZ3MgPSB7XG4gICAgICAgIHNjcm9sbFN0cmF0ZWd5OiBuZXcgQWJzb2x1dGVTY3JvbGxTdHJhdGVneSgpLFxuICAgICAgICBtb2RhbDogZmFsc2UsXG4gICAgICAgIGNsb3NlT25PdXRzaWRlQ2xpY2s6IGZhbHNlLFxuICAgICAgICBvdXRsZXQ6IHRoaXMucm93T3V0bGV0RGlyZWN0aXZlLFxuICAgICAgICBwb3NpdGlvblN0cmF0ZWd5OiB0aGlzLnJvd0VkaXRQb3NpdGlvbmluZ1N0cmF0ZWd5XG4gICAgfTtcblxuICAgIHByaXZhdGUgdmVydGljYWxTY3JvbGxIYW5kbGVyKGV2ZW50KSB7XG4gICAgICAgIHRoaXMudmVydGljYWxTY3JvbGxDb250YWluZXIub25TY3JvbGwoZXZlbnQpO1xuICAgICAgICBpZiAoaXNFZGdlKCkpIHsgdGhpcy53aGVlbEhhbmRsZXIoZmFsc2UpOyB9XG4gICAgICAgIHRoaXMuZGlzYWJsZVRyYW5zaXRpb25zID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuem9uZS5vblN0YWJsZS5waXBlKGZpcnN0KCkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5vbkNodW5rTG9hZC5lbWl0KHRoaXMudmVydGljYWxTY3JvbGxDb250YWluZXIuc3RhdGUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnJvd0VkaXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VSb3dFZGl0aW5nT3ZlcmxheVN0YXRlT25TY3JvbGwodGhpcy5yb3dJbkVkaXRNb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZVRyYW5zaXRpb25zID0gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBob3Jpem9udGFsU2Nyb2xsSGFuZGxlcihldmVudCkge1xuICAgICAgICBjb25zdCBzY3JvbGxMZWZ0ID0gZXZlbnQudGFyZ2V0LnNjcm9sbExlZnQ7XG4gICAgICAgIGlmIChpc0VkZ2UoKSkgeyB0aGlzLndoZWVsSGFuZGxlcih0cnVlKTsgfVxuICAgICAgICB0aGlzLmhlYWRlckNvbnRhaW5lci5vbkhTY3JvbGwoc2Nyb2xsTGVmdCk7XG4gICAgICAgIHRoaXMuX2hvcml6b250YWxGb3JPZnMuZm9yRWFjaCh2Zm9yID0+IHZmb3Iub25IU2Nyb2xsKHNjcm9sbExlZnQpKTtcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG5cbiAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnpvbmUub25TdGFibGUucGlwZShmaXJzdCgpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50VmlydERpci5vbkNodW5rTG9hZC5lbWl0KHRoaXMuaGVhZGVyQ29udGFpbmVyLnN0YXRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmhpZGVPdmVybGF5cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQGhpZGRlblxuICAgICogQGludGVybmFsXG4gICAgKi9cbiAgICBwdWJsaWMgaGlkZU92ZXJsYXlzKCkge1xuICAgICAgICB0aGlzLm92ZXJsYXlJRHMuZm9yRWFjaChvdmVybGF5SUQgPT4ge1xuICAgICAgICAgICAgdGhpcy5vdmVybGF5U2VydmljZS5oaWRlKG92ZXJsYXlJRCk7XG4gICAgICAgICAgICB0aGlzLm92ZXJsYXlTZXJ2aWNlLm9uQ2xvc2VkLnBpcGUoXG4gICAgICAgICAgICAgICAgZmlsdGVyKG8gPT4gby5pZCA9PT0gb3ZlcmxheUlEKSxcbiAgICAgICAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGtleWRvd25IYW5kbGVyKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoKGlzTmF2aWdhdGlvbktleShrZXkpICYmIGV2ZW50LmtleUNvZGUgIT09IDMyKSB8fCBrZXkgPT09ICd0YWInIHx8IGtleSA9PT0gJ3BhZ2Vkb3duJyB8fCBrZXkgPT09ICdwYWdldXAnKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3BhZ2Vkb3duJykge1xuICAgICAgICAgICAgICAgIHRoaXMudmVydGljYWxTY3JvbGxDb250YWluZXIuc2Nyb2xsTmV4dFBhZ2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAncGFnZXVwJykge1xuICAgICAgICAgICAgICAgIHRoaXMudmVydGljYWxTY3JvbGxDb250YWluZXIuc2Nyb2xsUHJldlBhZ2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgc2VsZWN0aW9uU2VydmljZTogSWd4R3JpZFNlbGVjdGlvblNlcnZpY2UsXG4gICAgICAgIHB1YmxpYyBjcnVkU2VydmljZTogSWd4R3JpZENSVURTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGdyaWRBUEk6IEdyaWRCYXNlQVBJU2VydmljZTxJZ3hHcmlkQmFzZUNvbXBvbmVudCAmIElHcmlkRGF0YUJpbmRhYmxlPixcbiAgICAgICAgcHVibGljIHNlbGVjdGlvbjogSWd4U2VsZWN0aW9uQVBJU2VydmljZSxcbiAgICAgICAgQEluamVjdChJZ3hHcmlkVHJhbnNhY3Rpb24pIHByb3RlY3RlZCBfdHJhbnNhY3Rpb25zOiBUcmFuc2FjdGlvblNlcnZpY2U8VHJhbnNhY3Rpb24sIFN0YXRlPixcbiAgICAgICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICBwcml2YXRlIHpvbmU6IE5nWm9uZSxcbiAgICAgICAgQEluamVjdChET0NVTUVOVCkgcHVibGljIGRvY3VtZW50LFxuICAgICAgICBwdWJsaWMgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgcHJvdGVjdGVkIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgICAgIHByb3RlY3RlZCBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsXG4gICAgICAgIHByb3RlY3RlZCB2aWV3UmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICBwdWJsaWMgbmF2aWdhdGlvbjogSWd4R3JpZE5hdmlnYXRpb25TZXJ2aWNlLFxuICAgICAgICBwdWJsaWMgZmlsdGVyaW5nU2VydmljZTogSWd4RmlsdGVyaW5nU2VydmljZSxcbiAgICAgICAgQEluamVjdChJZ3hPdmVybGF5U2VydmljZSkgcHJvdGVjdGVkIG92ZXJsYXlTZXJ2aWNlOiBJZ3hPdmVybGF5U2VydmljZSxcbiAgICAgICAgcHVibGljIHN1bW1hcnlTZXJ2aWNlOiBJZ3hHcmlkU3VtbWFyeVNlcnZpY2UsXG4gICAgICAgIEBPcHRpb25hbCgpIEBJbmplY3QoRGlzcGxheURlbnNpdHlUb2tlbikgcHJvdGVjdGVkIF9kaXNwbGF5RGVuc2l0eU9wdGlvbnM6IElEaXNwbGF5RGVuc2l0eU9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoX2Rpc3BsYXlEZW5zaXR5T3B0aW9ucyk7XG4gICAgICAgIHRoaXMucmVzaXplSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4gdGhpcy5jYWxjdWxhdGVHcmlkU2l6ZXMoKSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgX3NldHVwU2VydmljZXMoKSB7XG4gICAgICAgIHRoaXMuZ3JpZEFQSS5ncmlkID0gdGhpcztcbiAgICAgICAgdGhpcy5jcnVkU2VydmljZS5ncmlkID0gdGhpcztcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uLmdyaWQgPSB0aGlzO1xuICAgICAgICB0aGlzLmZpbHRlcmluZ1NlcnZpY2UuZ3JpZCA9IHRoaXM7XG4gICAgICAgIHRoaXMuc3VtbWFyeVNlcnZpY2UuZ3JpZCA9IHRoaXM7XG4gICAgfVxuXG4gICAgX3NldHVwTGlzdGVuZXJzKCkge1xuICAgICAgICBjb25zdCBkZXN0cnVjdG9yID0gdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpO1xuXG4gICAgICAgIHRoaXMub25Sb3dBZGRlZC5waXBlKGRlc3RydWN0b3IpLnN1YnNjcmliZShhcmdzID0+IHRoaXMucmVmcmVzaEdyaWRTdGF0ZShhcmdzKSk7XG4gICAgICAgIHRoaXMub25Sb3dEZWxldGVkLnBpcGUoZGVzdHJ1Y3Rvcikuc3Vic2NyaWJlKGFyZ3MgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdW1tYXJ5U2VydmljZS5kZWxldGVPcGVyYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zdW1tYXJ5U2VydmljZS5jbGVhclN1bW1hcnlDYWNoZShhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudHJhbnNhY3Rpb25zLm9uU3RhdGVVcGRhdGUucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnN1bW1hcnlTZXJ2aWNlLmNsZWFyU3VtbWFyeUNhY2hlKCk7XG4gICAgICAgICAgICB0aGlzLl9waXBlVHJpZ2dlcisrO1xuICAgICAgICAgICAgdGhpcy5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYW5zYWN0aW9ucy5nZXRBZ2dyZWdhdGVkQ2hhbmdlcyhmYWxzZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gTmVlZHMgYmV0dGVyIGNoZWNrLCBjYWxsaW5nICd0cmFuc2FjdGlvbnMuY2xlYXIoKScgd2lsbCBhbHNvIHRyaWdnZXIgdGhpc1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyaWRBUEkuYXRJbmV4aXN0aW5nUGFnZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFnZS0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5vblBhZ2luZ0RvbmUucGlwZShkZXN0cnVjdG9yKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbmRFZGl0KHRydWUpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UuYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMub25Db2x1bW5Nb3ZpbmcucGlwZShkZXN0cnVjdG9yKS5zdWJzY3JpYmUoKCkgPT4gdGhpcy5lbmRFZGl0KHRydWUpKTtcbiAgICAgICAgdGhpcy5vbkNvbHVtblJlc2l6ZWQucGlwZShkZXN0cnVjdG9yKS5zdWJzY3JpYmUoKCkgPT4gdGhpcy5lbmRFZGl0KHRydWUpKTtcblxuICAgICAgICB0aGlzLm92ZXJsYXlTZXJ2aWNlLm9uT3BlbmVkLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKS5zdWJzY3JpYmUoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5vdmVybGF5U2VydmljZS5nZXRPdmVybGF5QnlJZChldmVudC5pZCkuc2V0dGluZ3Mub3V0bGV0ID09PSB0aGlzLm91dGxldERpcmVjdGl2ZSAmJlxuICAgICAgICAgICAgICAgIHRoaXMub3ZlcmxheUlEcy5pbmRleE9mKGV2ZW50LmlkKSA8IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm92ZXJsYXlJRHMucHVzaChldmVudC5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm92ZXJsYXlTZXJ2aWNlLm9uQ2xvc2VkLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKS5zdWJzY3JpYmUoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmQgPSB0aGlzLm92ZXJsYXlJRHMuaW5kZXhPZihldmVudC5pZCk7XG4gICAgICAgICAgICBpZiAoaW5kICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMub3ZlcmxheUlEcy5zcGxpY2UoaW5kLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogUmVmYWN0b3JcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLl9zZXR1cFNlcnZpY2VzKCk7XG4gICAgICAgIHRoaXMuX3NldHVwTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuY29sdW1uTGlzdERpZmZlciA9IHRoaXMuZGlmZmVycy5maW5kKFtdKS5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuY2FsY1dpZHRoID0gdGhpcy5fd2lkdGggJiYgdGhpcy5fd2lkdGguaW5kZXhPZignJScpID09PSAtMSA/IHBhcnNlSW50KHRoaXMuX3dpZHRoLCAxMCkgOiAwO1xuICAgICAgICB0aGlzLnNob3VsZEdlbmVyYXRlID0gdGhpcy5hdXRvR2VuZXJhdGU7XG4gICAgICAgIHRoaXMuX3Njcm9sbFdpZHRoID0gdGhpcy5nZXRTY3JvbGxXaWR0aCgpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXR1cENvbHVtbnMoKSB7XG4gICAgICAgIGlmICh0aGlzLmF1dG9HZW5lcmF0ZSkge1xuICAgICAgICAgICAgdGhpcy5hdXRvZ2VuZXJhdGVDb2x1bW5zKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmluaXRDb2x1bW5zKHRoaXMuY29sdW1uTGlzdCwgKGNvbDogSWd4Q29sdW1uQ29tcG9uZW50KSA9PiB0aGlzLm9uQ29sdW1uSW5pdC5lbWl0KGNvbCkpO1xuXG4gICAgICAgIHRoaXMuY29sdW1uTGlzdERpZmZlci5kaWZmKHRoaXMuY29sdW1uTGlzdCk7XG4gICAgICAgIHRoaXMubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIHRoaXMucmVzZXRDYWNoZXMoKTtcbiAgICAgICAgdGhpcy5fZGVyaXZlUG9zc2libGVIZWlnaHQoKTtcblxuICAgICAgICB0aGlzLmNvbHVtbkxpc3QuY2hhbmdlc1xuICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpXG4gICAgICAgIC5zdWJzY3JpYmUoKGNoYW5nZTogUXVlcnlMaXN0PElneENvbHVtbkNvbXBvbmVudD4pID0+IHsgdGhpcy5vbkNvbHVtbnNDaGFuZ2VkKGNoYW5nZSk7IH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzZXRDb2x1bW5zVmlzaWJsZUluZGV4Q2FjaGUoKSB7XG4gICAgICAgIHRoaXMuY29sdW1uTGlzdC5mb3JFYWNoKGNvbHVtbiA9PiBjb2x1bW4ucmVzZXRWaXNpYmxlSW5kZXgoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyByZXNldEZvck9mQ2FjaGUoKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0VmlydFJvdyA9IHRoaXMuZGF0YVJvd0xpc3QuZmlyc3Q7XG4gICAgICAgIGlmIChmaXJzdFZpcnRSb3cpIHtcbiAgICAgICAgICAgIGZpcnN0VmlydFJvdy52aXJ0RGlyUm93LmFzc3VtZU1hc3RlcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyByZXNldENvbHVtbkNvbGxlY3Rpb25zKCkge1xuICAgICAgICB0aGlzLl92aXNpYmxlQ29sdW1ucy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9waW5uZWRWaXNpYmxlLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX3VucGlubmVkVmlzaWJsZS5sZW5ndGggPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzZXRDYWNoZWRXaWR0aHMoKSB7XG4gICAgICAgIHRoaXMuX3VucGlubmVkV2lkdGggPSBOYU47XG4gICAgICAgIHRoaXMuX3Bpbm5lZFdpZHRoID0gTmFOO1xuICAgICAgICB0aGlzLl90b3RhbFdpZHRoID0gTmFOO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzZXRDYWNoZXMoKSB7XG4gICAgICAgIHRoaXMucmVzZXRGb3JPZkNhY2hlKCk7XG4gICAgICAgIHRoaXMucmVzZXRDb2x1bW5zVmlzaWJsZUluZGV4Q2FjaGUoKTtcbiAgICAgICAgdGhpcy5yZXNldENvbHVtbkNvbGxlY3Rpb25zKCk7XG4gICAgICAgIHRoaXMucmVzZXRDYWNoZWRXaWR0aHMoKTtcbiAgICAgICAgdGhpcy5fY29sdW1uR3JvdXBzID0gdGhpcy5jb2x1bW5MaXN0LnNvbWUoY29sID0+IGNvbC5jb2x1bW5Hcm91cCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgICAgIHRoaXMuc2V0dXBDb2x1bW5zKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50LmRlZmF1bHRWaWV3LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVzaXplSGFuZGxlcik7XG4gICAgICAgICAgICB0aGlzLl9rZXlkb3duTGlzdGVuZXIgPSB0aGlzLmtleWRvd25IYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2tleWRvd25MaXN0ZW5lcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmluaXRQaW5uaW5nKCk7XG5cbiAgICAgICAgdGhpcy5vbkRlbnNpdHlDaGFuZ2VkLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1bW1hcnlTZXJ2aWNlLnN1bW1hcnlIZWlnaHQgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMucmVmbG93KCk7XG4gICAgICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5yZWNhbGNVcGRhdGVTaXplcygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9uZ0FmdGVyVmlld0luaXRQYXNzZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZUdyaWRTaXplcygpO1xuXG4gICAgICAgIC8vIEluIHNvbWUgcmFyZSBjYXNlcyB3ZSBnZXQgdGhlIEFmdGVyVmlld0luaXQgYmVmb3JlIHRoZSBncmlkIGlzIGFkZGVkIHRvIHRoZSBET01cbiAgICAgICAgLy8gYW5kIGFzIGEgcmVzdWx0IHdlIGdldCAwIHdpZHRoIGFuZCBjYW4ndCBzaXplIG91cnNlbHZlcyBwcm9wZXJseS5cbiAgICAgICAgLy8gSW4gb3JkZXIgdG8gcHJldmVudCB0aGF0IGFkZCBhIG11dGF0aW9uIG9ic2VydmVyIHRoYXQgd2F0Y2hlcyBpZiB3ZSBoYXZlIGJlZW4gYWRkZWQuXG4gICAgICAgIGlmICghdGhpcy5pc0F0dGFjaGVkVG9Eb20pIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHsgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlIH07XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IChtdXRhdGlvbnNMaXN0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRMaXN0SGFzQ2hhbmdlZCA9IG11dGF0aW9uc0xpc3QuZmlsdGVyKChtdXRhdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkTGlzdCc7XG4gICAgICAgICAgICAgICAgfSkubGVuZ3RoID4gMDtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRMaXN0SGFzQ2hhbmdlZCAmJiB0aGlzLmlzQXR0YWNoZWRUb0RvbSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZmxvdygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29ic2VydmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLl9vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHRoaXMuX29ic2VydmVyLm9ic2VydmUodGhpcy5kb2N1bWVudC5ib2R5LCBjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZGF0YVJvd0xpc3QuY2hhbmdlcy5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSkuc3Vic2NyaWJlKGxpc3QgPT5cbiAgICAgICAgICAgIHRoaXMuX2hvcml6b250YWxGb3JPZnMgPSB0aGlzLmNvbWJpbmVGb3JPZkNvbGxlY3Rpb25zKGxpc3QudG9BcnJheSgpXG4gICAgICAgICAgICAgICAgLmZpbHRlcihpdGVtID0+IGl0ZW0uZWxlbWVudC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQgIT09IG51bGwpLCB0aGlzLl9zdW1tYXJ5Um93TGlzdClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fc3VtbWFyeVJvd0xpc3QuY2hhbmdlcy5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSkuc3Vic2NyaWJlKHN1bW1hcnlMaXN0ID0+XG4gICAgICAgICAgICB0aGlzLl9ob3Jpem9udGFsRm9yT2ZzIC0gdGhpcy5jb21iaW5lRm9yT2ZDb2xsZWN0aW9ucyh0aGlzLl9kYXRhUm93TGlzdCwgc3VtbWFyeUxpc3QudG9BcnJheSgpXG4gICAgICAgICAgICAgICAgLmZpbHRlcihpdGVtID0+IGl0ZW0uZWxlbWVudC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQgIT09IG51bGwpKSk7XG5cbiAgICAgICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3ZTY3JvbGxMaXN0ZW5lciA9IHRoaXMudmVydGljYWxTY3JvbGxIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFZlcnRpY2FsU2Nyb2xsKCkuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5fdlNjcm9sbExpc3RlbmVyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2hTY3JvbGxMaXN0ZW5lciA9IHRoaXMuaG9yaXpvbnRhbFNjcm9sbEhhbmRsZXIuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50VmlydERpci5nZXRIb3Jpem9udGFsU2Nyb2xsKCkuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5faFNjcm9sbExpc3RlbmVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2hvcml6b250YWxGb3JPZnMgPSB0aGlzLmNvbWJpbmVGb3JPZkNvbGxlY3Rpb25zKHRoaXMuX2RhdGFSb3dMaXN0LCB0aGlzLl9zdW1tYXJ5Um93TGlzdCk7XG4gICAgICAgIGNvbnN0IHZlcnRTY3JEQyA9IHRoaXMudmVydGljYWxTY3JvbGxDb250YWluZXIuZGMuaW5zdGFuY2UuX3ZpZXdDb250YWluZXIuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICB2ZXJ0U2NyREMuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKGV2dCkgPT4geyB0aGlzLnNjcm9sbEhhbmRsZXIoZXZ0KTsgfSk7XG4gICAgICAgIHZlcnRTY3JEQy5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsICgpID0+IHsgdGhpcy53aGVlbEhhbmRsZXIoKTsgfSk7XG5cbiAgICAgICAgdGhpcy52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5vbkRhdGFDaGFuZ2VkLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2Rlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZmxvdygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbWJpbmVGb3JPZkNvbGxlY3Rpb25zKGRhdGFMaXN0LCBzdW1tYXJ5TGlzdCkge1xuICAgICAgICByZXR1cm4gZGF0YUxpc3QubWFwKHJvdyA9PiByb3cudmlydERpclJvdykuY29uY2F0KHN1bW1hcnlMaXN0Lm1hcChyb3cgPT4gcm93LnZpcnREaXJSb3cpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5kZWZhdWx0Vmlldy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlc2l6ZUhhbmRsZXIpO1xuICAgICAgICAgICAgdGhpcy5uYXRpdmVFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9rZXlkb3duTGlzdGVuZXIpO1xuICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5nZXRWZXJ0aWNhbFNjcm9sbCgpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuX3ZTY3JvbGxMaXN0ZW5lcik7XG4gICAgICAgICAgICB0aGlzLnBhcmVudFZpcnREaXIuZ2V0SG9yaXpvbnRhbFNjcm9sbCgpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuX2hTY3JvbGxMaXN0ZW5lcik7XG4gICAgICAgICAgICBjb25zdCB2ZXJ0U2NyREMgPSB0aGlzLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmRjLmluc3RhbmNlLl92aWV3Q29udGFpbmVyLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICAgICAgICAgIHZlcnRTY3JEQy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoZXZ0KSA9PiB7IHRoaXMuc2Nyb2xsSGFuZGxlcihldnQpOyB9KTtcbiAgICAgICAgICAgIHZlcnRTY3JEQy5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsICgpID0+IHsgdGhpcy53aGVlbEhhbmRsZXIoKTsgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5fb2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX29ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3Ryb3kkLm5leHQodHJ1ZSk7XG4gICAgICAgIHRoaXMuZGVzdHJveSQuY29tcGxldGUoKTtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGRhdGFMb2FkaW5nKGV2ZW50KSB7XG4gICAgICAgIHRoaXMub25EYXRhUHJlTG9hZC5lbWl0KGV2ZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHRoZSBzcGVjaWZpZWQgY29sdW1uJ3MgdmlzaWJpbGl0eS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5ncmlkMS50b2dnbGVDb2x1bW5WaXNpYmlsaXR5KHtcbiAgICAgKiAgICAgICBjb2x1bW46IHRoaXMuZ3JpZDEuY29sdW1uc1swXSxcbiAgICAgKiAgICAgICBuZXdWYWx1ZTogdHJ1ZVxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgdG9nZ2xlQ29sdW1uVmlzaWJpbGl0eShhcmdzOiBJQ29sdW1uVmlzaWJpbGl0eUNoYW5nZWRFdmVudEFyZ3MpIHtcbiAgICAgICAgY29uc3QgY29sID0gYXJncy5jb2x1bW4gPyB0aGlzLmNvbHVtbkxpc3QuZmluZCgoYykgPT4gYyA9PT0gYXJncy5jb2x1bW4pIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICghY29sKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb2wuaGlkZGVuID0gYXJncy5uZXdWYWx1ZTtcbiAgICAgICAgdGhpcy5vbkNvbHVtblZpc2liaWxpdHlDaGFuZ2VkLmVtaXQoYXJncyk7XG5cbiAgICAgICAgdGhpcy5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuYXRpdmUgZWxlbWVudCBvZiB0aGUgYElneEdyaWRDb21wb25lbnRgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBuYXRpdmVFbCA9IHRoaXMuZ3JpZC5uYXRpdmVFbGVtZW50LlxuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBnZXQgbmF0aXZlRWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0IG91dGxldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3V0bGV0RGlyZWN0aXZlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGBJZ3hHcmlkQ29tcG9uZW50YCdzIHJvd3MgaGVpZ2h0LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCByb3dIZWlnaCA9IHRoaXMuZ3JpZC5kZWZhdWx0Um93SGVpZ2h0O1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBnZXQgZGVmYXVsdFJvd0hlaWdodCgpOiBudW1iZXIge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuZGlzcGxheURlbnNpdHkpIHtcbiAgICAgICAgICAgIGNhc2UgRGlzcGxheURlbnNpdHkuY29zeTpcbiAgICAgICAgICAgICAgICByZXR1cm4gNDA7XG4gICAgICAgICAgICBjYXNlIERpc3BsYXlEZW5zaXR5LmNvbXBhY3Q6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDMyO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gNTA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgZGVmYXVsdFN1bW1hcnlIZWlnaHQoKTogbnVtYmVyIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmRpc3BsYXlEZW5zaXR5KSB7XG4gICAgICAgICAgICBjYXNlIERpc3BsYXlEZW5zaXR5LmNvc3k6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDMwO1xuICAgICAgICAgICAgY2FzZSBEaXNwbGF5RGVuc2l0eS5jb21wYWN0OlxuICAgICAgICAgICAgICAgIHJldHVybiAyNDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDM2O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYElneEdyaWRIZWFkZXJHcm91cENvbXBvbmVudGAncyBtaW5pbXVtIGFsbG93ZWQgd2lkdGguXG4gICAgICogVXNlZCBpbnRlcm5hbGx5IGZvciByZXN0cmljdGluZyBoZWFkZXIgZ3JvdXAgY29tcG9uZW50IHdpZHRoLlxuICAgICAqIFRoZSB2YWx1ZXMgYmVsb3cgZGVwZW5kIG9uIHRoZSBoZWFkZXIgY2VsbCBkZWZhdWx0IHJpZ2h0L2xlZnQgcGFkZGluZyB2YWx1ZXMuXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIGdldCBkZWZhdWx0SGVhZGVyR3JvdXBNaW5XaWR0aCgpOiBudW1iZXIge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuZGlzcGxheURlbnNpdHkpIHtcbiAgICAgICAgICAgIGNhc2UgRGlzcGxheURlbnNpdHkuY29zeTpcbiAgICAgICAgICAgICAgICByZXR1cm4gMzI7XG4gICAgICAgICAgICBjYXNlIERpc3BsYXlEZW5zaXR5LmNvbXBhY3Q6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDI0O1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gNDg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXhpbXVtIHdpZHRoIG9mIHRoZSBjb250YWluZXIgZm9yIHRoZSBwaW5uZWQgYElneENvbHVtbkNvbXBvbmVudGBzLlxuICAgICAqIFRoZSB3aWR0aCBpcyA4MCUgb2YgdGhlIHRvdGFsIGdyaWQgd2lkdGguXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG1heFBpbm5lZENvbFdpZHRoID0gdGhpcy5ncmlkLmNhbGNQaW5uZWRDb250YWluZXJNYXhXaWR0aDtcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgZ2V0IGNhbGNQaW5uZWRDb250YWluZXJNYXhXaWR0aCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gKHRoaXMuY2FsY1dpZHRoICogODApIC8gMTAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1pbmltdW0gd2lkdGggb2YgdGhlIGNvbnRhaW5lciBmb3IgdGhlIHVucGlubmVkIGBJZ3hDb2x1bW5Db21wb25lbnRgcy5cbiAgICAgKiBUaGUgd2lkdGggaXMgMjAlIG9mIHRoZSB0b3RhbCBncmlkIHdpZHRoLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBtaW5VbnBpbm5lZENvbFdpZHRoID0gdGhpcy5ncmlkLnVucGlubmVkQXJlYU1pbldpZHRoO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBnZXQgdW5waW5uZWRBcmVhTWluV2lkdGgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmNhbGNXaWR0aCAqIDIwKSAvIDEwMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHdpZHRoIG9mIHRoZSBjb250YWluZXIgZm9yIHRoZSBwaW5uZWQgYElneENvbHVtbkNvbXBvbmVudGBzLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBwaW5uZWRXaWR0aCA9IHRoaXMuZ3JpZC5nZXRQaW5uZWRXaWR0aDtcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgZ2V0IHBpbm5lZFdpZHRoKCkge1xuICAgICAgICBpZiAoIWlzTmFOKHRoaXMuX3Bpbm5lZFdpZHRoKSkgeyByZXR1cm4gdGhpcy5fcGlubmVkV2lkdGg7IH1cbiAgICAgICAgdGhpcy5fcGlubmVkV2lkdGggPSB0aGlzLmdldFBpbm5lZFdpZHRoKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9waW5uZWRXaWR0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHdpZHRoIG9mIHRoZSBjb250YWluZXIgZm9yIHRoZSB1bnBpbm5lZCBgSWd4Q29sdW1uQ29tcG9uZW50YHMuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHVucGlubmVkV2lkdGggPSB0aGlzLmdyaWQuZ2V0VW5waW5uZWRXaWR0aDtcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgZ2V0IHVucGlubmVkV2lkdGgoKSB7XG4gICAgICAgIGlmICghaXNOYU4odGhpcy5fdW5waW5uZWRXaWR0aCkpIHsgcmV0dXJuIHRoaXMuX3VucGlubmVkV2lkdGg7IH1cbiAgICAgICAgdGhpcy5fdW5waW5uZWRXaWR0aCA9IHRoaXMuZ2V0VW5waW5uZWRXaWR0aCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdW5waW5uZWRXaWR0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogR2V0cyB0aGUgY29tYmluZWQgd2lkdGggb2YgdGhlIGNvbHVtbnMgdGhhdCBhcmUgc3BlY2lmaWMgdG8gdGhlIGVuYWJsZWQgZ3JpZCBmZWF0dXJlcy4gVGhleSBhcmUgZml4ZWQuXG4gICAgICogVE9ETzogVXBkYXRlIGZvciBBbmd1bGFyIDguIENhbGxpbmcgcGFyZW50IGNsYXNzIGdldHRlciB1c2luZyBzdXBlciBpcyBub3Qgc3VwcG9ydGVkIGZvciBub3cuXG4gICAgICovXG4gICAgcHVibGljIGdldCBmZWF0dXJlQ29sdW1uc1dpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRGZWF0dXJlQ29sdW1uc1dpZHRoKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGdldCBzdW1tYXJpZXNNYXJnaW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvd1NlbGVjdGFibGUgfHwgdGhpcy5yb3dEcmFnZ2FibGUgPyB0aGlzLmZlYXR1cmVDb2x1bW5zV2lkdGggOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgYElneENvbHVtbkNvbXBvbmVudGBzLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBjb2x1bXMgPSB0aGlzLmdyaWQuY29sdW1ucy5cbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgZ2V0IGNvbHVtbnMoKTogSWd4Q29sdW1uQ29tcG9uZW50W10ge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sdW1ucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBwaW5uZWQgYElneENvbHVtbkNvbXBvbmVudGBzLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBwaW5uZWRDb2x1bW5zID0gdGhpcy5ncmlkLnBpbm5lZENvbHVtbnMuXG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIGdldCBwaW5uZWRDb2x1bW5zKCk6IElneENvbHVtbkNvbXBvbmVudFtdIHtcbiAgICAgICAgaWYgKHRoaXMuX3Bpbm5lZFZpc2libGUubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcGlubmVkVmlzaWJsZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9waW5uZWRWaXNpYmxlID0gdGhpcy5fcGlubmVkQ29sdW1ucy5maWx0ZXIoY29sID0+ICFjb2wuaGlkZGVuKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Bpbm5lZFZpc2libGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiB1bnBpbm5lZCBgSWd4Q29sdW1uQ29tcG9uZW50YHMuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHVucGlubmVkQ29sdW1ucyA9IHRoaXMuZ3JpZC51bnBpbm5lZENvbHVtbnMuXG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIGdldCB1bnBpbm5lZENvbHVtbnMoKTogSWd4Q29sdW1uQ29tcG9uZW50W10ge1xuICAgICAgICBpZiAodGhpcy5fdW5waW5uZWRWaXNpYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VucGlubmVkVmlzaWJsZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91bnBpbm5lZFZpc2libGUgPSB0aGlzLl91bnBpbm5lZENvbHVtbnMuZmlsdGVyKChjb2wpID0+ICFjb2wuaGlkZGVuKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VucGlubmVkVmlzaWJsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBgd2lkdGhgIHRvIGJlIHNldCBvbiBgSWd4R3JpZEhlYWRlckdyb3VwQ29tcG9uZW50YC5cblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIGdldEhlYWRlckdyb3VwV2lkdGgoY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQpOiBzdHJpbmcge1xuICAgICAgICBpZiAodGhpcy5oYXNDb2x1bW5MYXlvdXRzKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29sV2lkdGggPSBjb2x1bW4ud2lkdGg7XG4gICAgICAgIGNvbnN0IG1pbldpZHRoID0gdGhpcy5kZWZhdWx0SGVhZGVyR3JvdXBNaW5XaWR0aDtcbiAgICAgICAgY29uc3QgaXNQZXJjZW50YWdlV2lkdGggPSBjb2xXaWR0aCAmJiB0eXBlb2YgY29sV2lkdGggPT09ICdzdHJpbmcnICYmIGNvbFdpZHRoLmluZGV4T2YoJyUnKSAhPT0gLTE7XG5cbiAgICAgICAgaWYgKCFpc1BlcmNlbnRhZ2VXaWR0aCAmJiBwYXJzZUludChjb2x1bW4ud2lkdGgsIDEwKSA8IG1pbldpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm4gbWluV2lkdGgudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb2x1bW4ud2lkdGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYElneENvbHVtbkNvbXBvbmVudGAgYnkgZmllbGQgbmFtZS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbXlDb2wgPSB0aGlzLmdyaWQxLmdldENvbHVtbkJ5TmFtZShcIklEXCIpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBuYW1lXG4gICAgICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIGdldENvbHVtbkJ5TmFtZShuYW1lOiBzdHJpbmcpOiBJZ3hDb2x1bW5Db21wb25lbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW5MaXN0LmZpbmQoKGNvbCkgPT4gY29sLmZpZWxkID09PSBuYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBgSWd4Q29sdW1uQ29tcG9uZW50YCBieSBpbmRleC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbXlSb3cgPSB0aGlzLmdyaWQxLmdldFJvd0J5SW5kZXgoMSk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGluZGV4XG4gICAgICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIGdldFJvd0J5SW5kZXgoaW5kZXg6IG51bWJlcik6IElneFJvd0NvbXBvbmVudDxJZ3hHcmlkQmFzZUNvbXBvbmVudCAmIElHcmlkRGF0YUJpbmRhYmxlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWRBUEkuZ2V0X3Jvd19ieV9pbmRleChpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgSWd4R3JpZFJvd0NvbXBvbmVudGAgb2JqZWN0IGJ5IHRoZSBzcGVjaWZpZWQgcHJpbWFyeSBrZXkgLlxuICAgICAqIFJlcXVpcmVzIHRoYXQgdGhlIGBwcmltYXJ5S2V5YCBwcm9wZXJ0eSBpcyBzZXQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG15Um93ID0gdGhpcy5ncmlkMS5nZXRSb3dCeUtleShcImNlbGw1XCIpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBrZXlWYWx1ZVxuICAgICAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRSb3dCeUtleShrZXlWYWx1ZTogYW55KTogSWd4Um93Q29tcG9uZW50PElneEdyaWRCYXNlQ29tcG9uZW50ICYgSUdyaWREYXRhQmluZGFibGU+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZEFQSS5nZXRfcm93X2J5X2tleShrZXlWYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiB2aXNpYmxlIGBJZ3hDb2x1bW5Db21wb25lbnRgcy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgdmlzaWJsZUNvbHVtbnMgPSB0aGlzLmdyaWQudmlzaWJsZUNvbHVtbnMuXG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIGdldCB2aXNpYmxlQ29sdW1ucygpOiBJZ3hDb2x1bW5Db21wb25lbnRbXSB7XG4gICAgICAgIGlmICh0aGlzLl92aXNpYmxlQ29sdW1ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92aXNpYmxlQ29sdW1ucztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92aXNpYmxlQ29sdW1ucyA9IHRoaXMuY29sdW1uTGlzdC5maWx0ZXIoYyA9PiAhYy5oaWRkZW4pO1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlzaWJsZUNvbHVtbnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYElneEdyaWRDZWxsQ29tcG9uZW50YCB0aGF0IG1hdGNoZXMgdGhlIGNvbmRpdGlvbnMuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG15Q2VsbCA9IHRoaXMuZ3JpZDEuZ2V0Q2VsbEJ5Q29sdW1uKDIsXCJVbml0UHJpY2VcIik7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHJvd0luZGV4XG4gICAgICogQHBhcmFtIGNvbHVtbkZpZWxkXG4gICAgICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIGdldENlbGxCeUNvbHVtbihyb3dJbmRleDogbnVtYmVyLCBjb2x1bW5GaWVsZDogc3RyaW5nKTogSWd4R3JpZENlbGxDb21wb25lbnQge1xuICAgICAgICBjb25zdCBjb2x1bW5JZCA9IHRoaXMuY29sdW1uTGlzdC5tYXAoKGNvbHVtbikgPT4gY29sdW1uLmZpZWxkKS5pbmRleE9mKGNvbHVtbkZpZWxkKTtcbiAgICAgICAgaWYgKGNvbHVtbklkICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZEFQSS5nZXRfY2VsbF9ieV9pbmRleChyb3dJbmRleCwgY29sdW1uSWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBgSWd4R3JpZENlbGxDb21wb25lbnRgIG9iamVjdCBieSB0aGUgc3BlY2lmaWVkIHByaW1hcnkga2V5IGFuZCBjb2x1bW4gZmllbGQuXG4gICAgICogUmVxdWlyZXMgdGhhdCB0aGUgcHJpbWFyeUtleSBwcm9wZXJ0eSBpcyBzZXQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGdyaWQuZ2V0Q2VsbEJ5S2V5KDEsICdpbmRleCcpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSByb3dTZWxlY3RvciBtYXRjaCBhbnkgcm93SURcbiAgICAgKiBAcGFyYW0gY29sdW1uRmllbGRcbiAgICAgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Q2VsbEJ5S2V5KHJvd1NlbGVjdG9yOiBhbnksIGNvbHVtbkZpZWxkOiBzdHJpbmcpOiBJZ3hHcmlkQ2VsbENvbXBvbmVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWRBUEkuZ2V0X2NlbGxfYnlfa2V5KHJvd1NlbGVjdG9yLCBjb2x1bW5GaWVsZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdG90YWwgbnVtYmVyIG9mIHBhZ2VzLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCB0b3RhbFBhZ2VzID0gdGhpcy5ncmlkLnRvdGFsUGFnZXM7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIGdldCB0b3RhbFBhZ2VzKCk6IG51bWJlciB7XG4gICAgICAgIGlmICh0aGlzLnBhZ2luZ1N0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYWdpbmdTdGF0ZS5tZXRhZGF0YS5jb3VudFBhZ2VzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0b3RhbCBudW1iZXIgb2YgcmVjb3Jkcy5cbiAgICAgKiBPbmx5IGZ1bmN0aW9ucyB3aGVuIHBhZ2luZyBpcyBlbmFibGVkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCB0b3RhbFJlY29yZHMgPSB0aGlzLmdyaWQudG90YWxSZWNvcmRzO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBnZXQgdG90YWxSZWNvcmRzKCk6IG51bWJlciB7XG4gICAgICAgIGlmICh0aGlzLnBhZ2luZ1N0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYWdpbmdTdGF0ZS5tZXRhZGF0YS5jb3VudFJlY29yZHM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGlmIHRoZSBjdXJyZW50IHBhZ2UgaXMgdGhlIGZpcnN0IHBhZ2UuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGZpcnN0UGFnZSA9IHRoaXMuZ3JpZC5pc0ZpcnN0UGFnZTtcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgZ2V0IGlzRmlyc3RQYWdlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wYWdlID09PSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaWYgdGhlIGN1cnJlbnQgcGFnZSBpcyB0aGUgbGFzdCBwYWdlLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBsYXN0UGFnZSA9IHRoaXMuZ3JpZC5pc0xhc3RQYWdlO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBnZXQgaXNMYXN0UGFnZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFnZSArIDEgPj0gdGhpcy50b3RhbFBhZ2VzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHRvdGFsIHdpZHRoIG9mIHRoZSBgSWd4R3JpZENvbXBvbmVudGAuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGdyaWRXaWR0aCA9IHRoaXMuZ3JpZC50b3RhbFdpZHRoO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBnZXQgdG90YWxXaWR0aCgpOiBudW1iZXIge1xuICAgICAgICBpZiAoIWlzTmFOKHRoaXMuX3RvdGFsV2lkdGgpKSB7IHJldHVybiB0aGlzLl90b3RhbFdpZHRoOyB9XG4gICAgICAgIC8vIFRha2Ugb25seSB0b3AgbGV2ZWwgY29sdW1uc1xuICAgICAgICBjb25zdCBjb2xzID0gdGhpcy52aXNpYmxlQ29sdW1ucy5maWx0ZXIoY29sID0+IGNvbC5sZXZlbCA9PT0gMCAmJiAhY29sLnBpbm5lZCk7XG4gICAgICAgIGxldCB0b3RhbFdpZHRoID0gMDtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBmb3IgKGk7IGkgPCBjb2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b3RhbFdpZHRoICs9IHBhcnNlSW50KGNvbHNbaV0uY2FsY1dpZHRoLCAxMCkgfHwgMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90b3RhbFdpZHRoID0gdG90YWxXaWR0aDtcbiAgICAgICAgcmV0dXJuIHRvdGFsV2lkdGg7XG4gICAgfVxuXG4gICAgZ2V0IHNob3dSb3dDaGVja2JveGVzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5yb3dTZWxlY3RhYmxlICYmIHRoaXMuY29sdW1ucy5sZW5ndGggPiB0aGlzLmhpZGRlbkNvbHVtbnNDb3VudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9tb3ZlQ29sdW1ucyhmcm9tOiBJZ3hDb2x1bW5Db21wb25lbnQsIHRvOiBJZ3hDb2x1bW5Db21wb25lbnQsIHBvczogRHJvcFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSB0aGlzLmNvbHVtbkxpc3QudG9BcnJheSgpO1xuICAgICAgICBjb25zdCBmcm9tSW5kZXggPSBsaXN0LmluZGV4T2YoZnJvbSk7XG4gICAgICAgIGxldCB0b0luZGV4ID0gbGlzdC5pbmRleE9mKHRvKTtcblxuICAgICAgICBpZiAocG9zID09PSBEcm9wUG9zaXRpb24uQmVmb3JlRHJvcFRhcmdldCkge1xuICAgICAgICAgICAgdG9JbmRleC0tO1xuICAgICAgICAgICAgaWYgKHRvSW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgdG9JbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zID09PSBEcm9wUG9zaXRpb24uQWZ0ZXJEcm9wVGFyZ2V0KSB7XG4gICAgICAgICAgICB0b0luZGV4Kys7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnNwbGljZSh0b0luZGV4LCAwLCAuLi5saXN0LnNwbGljZShmcm9tSW5kZXgsIDEpKTtcbiAgICAgICAgY29uc3QgbmV3TGlzdCA9IHRoaXMuX3Jlc2V0Q29sdW1uTGlzdChsaXN0KTtcbiAgICAgICAgdGhpcy5jb2x1bW5MaXN0LnJlc2V0KG5ld0xpc3QpO1xuICAgICAgICB0aGlzLmNvbHVtbkxpc3Qubm90aWZ5T25DaGFuZ2VzKCk7XG4gICAgICAgIHRoaXMuX2NvbHVtbnMgPSB0aGlzLmNvbHVtbkxpc3QudG9BcnJheSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX3Jlc2V0Q29sdW1uTGlzdChsaXN0Pykge1xuICAgICAgICBpZiAoIWxpc3QpIHtcbiAgICAgICAgICAgIGxpc3QgPSB0aGlzLmNvbHVtbkxpc3QudG9BcnJheSgpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuZXdMaXN0ID0gW107XG4gICAgICAgIGxpc3QuZmlsdGVyKGMgPT4gYy5sZXZlbCA9PT0gMCkuZm9yRWFjaChwID0+IHtcbiAgICAgICAgICAgIG5ld0xpc3QucHVzaChwKTtcbiAgICAgICAgICAgIGlmIChwLmNvbHVtbkdyb3VwKSB7XG4gICAgICAgICAgICAgICAgbmV3TGlzdCA9IG5ld0xpc3QuY29uY2F0KHAuYWxsQ2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ld0xpc3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfcmVvcmRlclBpbm5lZENvbHVtbnMoZnJvbTogSWd4Q29sdW1uQ29tcG9uZW50LCB0bzogSWd4Q29sdW1uQ29tcG9uZW50LCBwb3NpdGlvbjogRHJvcFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IHBpbm5lZCA9IHRoaXMuX3Bpbm5lZENvbHVtbnM7XG4gICAgICAgIGxldCBkcm9wSW5kZXggPSBwaW5uZWQuaW5kZXhPZih0byk7XG5cbiAgICAgICAgaWYgKHRvLmNvbHVtbkdyb3VwKSB7XG4gICAgICAgICAgICBkcm9wSW5kZXggKz0gdG8uYWxsQ2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSBEcm9wUG9zaXRpb24uQmVmb3JlRHJvcFRhcmdldCkge1xuICAgICAgICAgICAgZHJvcEluZGV4LS07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPT09IERyb3BQb3NpdGlvbi5BZnRlckRyb3BUYXJnZXQpIHtcbiAgICAgICAgICAgIGRyb3BJbmRleCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgcGlubmVkLnNwbGljZShkcm9wSW5kZXgsIDAsIC4uLnBpbm5lZC5zcGxpY2UocGlubmVkLmluZGV4T2YoZnJvbSksIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9tb3ZlQ2hpbGRDb2x1bW5zKHBhcmVudDogSWd4Q29sdW1uQ29tcG9uZW50LCBmcm9tOiBJZ3hDb2x1bW5Db21wb25lbnQsIHRvOiBJZ3hDb2x1bW5Db21wb25lbnQsIHBvczogRHJvcFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHBhcmVudC5jaGlsZHJlbi50b0FycmF5KCk7XG4gICAgICAgIGNvbnN0IGZyb21JbmRleCA9IGJ1ZmZlci5pbmRleE9mKGZyb20pO1xuICAgICAgICBsZXQgdG9JbmRleCA9IGJ1ZmZlci5pbmRleE9mKHRvKTtcblxuICAgICAgICBpZiAocG9zID09PSBEcm9wUG9zaXRpb24uQmVmb3JlRHJvcFRhcmdldCkge1xuICAgICAgICAgICAgdG9JbmRleC0tO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvcyA9PT0gRHJvcFBvc2l0aW9uLkFmdGVyRHJvcFRhcmdldCkge1xuICAgICAgICAgICAgdG9JbmRleCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgYnVmZmVyLnNwbGljZSh0b0luZGV4LCAwLCAuLi5idWZmZXIuc3BsaWNlKGZyb21JbmRleCwgMSkpO1xuICAgICAgICBwYXJlbnQuY2hpbGRyZW4ucmVzZXQoYnVmZmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW92ZXMgYSBjb2x1bW4gdG8gdGhlIHNwZWNpZmllZCBkcm9wIHRhcmdldC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogZ3JpZC5tb3ZlQ29sdW1uKGNvbXBOYW1lLCBwZXJzRGV0YWlscyk7XG4gICAgICogYGBgXG5cdCAgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcblx0ICAqL1xuICAgIHB1YmxpYyBtb3ZlQ29sdW1uKGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50LCBkcm9wVGFyZ2V0OiBJZ3hDb2x1bW5Db21wb25lbnQsIHBvczogRHJvcFBvc2l0aW9uID0gRHJvcFBvc2l0aW9uLk5vbmUpIHtcblxuICAgICAgICBsZXQgcG9zaXRpb24gPSBwb3M7XG4gICAgICAgIGNvbnN0IGZyb21JbmRleCA9IGNvbHVtbi52aXNpYmxlSW5kZXg7XG4gICAgICAgIGNvbnN0IHRvSW5kZXggPSBkcm9wVGFyZ2V0LnZpc2libGVJbmRleDtcblxuICAgICAgICBpZiAocG9zID09PSBEcm9wUG9zaXRpb24uQmVmb3JlRHJvcFRhcmdldCAmJiBmcm9tSW5kZXggPCB0b0luZGV4KSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IERyb3BQb3NpdGlvbi5CZWZvcmVEcm9wVGFyZ2V0O1xuICAgICAgICB9IGVsc2UgaWYgKHBvcyA9PT0gRHJvcFBvc2l0aW9uLkFmdGVyRHJvcFRhcmdldCAmJiBmcm9tSW5kZXggPiB0b0luZGV4KSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IERyb3BQb3NpdGlvbi5BZnRlckRyb3BUYXJnZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IERyb3BQb3NpdGlvbi5Ob25lO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoKGNvbHVtbi5sZXZlbCAhPT0gZHJvcFRhcmdldC5sZXZlbCkgfHxcbiAgICAgICAgICAgIChjb2x1bW4udG9wTGV2ZWxQYXJlbnQgIT09IGRyb3BUYXJnZXQudG9wTGV2ZWxQYXJlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVuZEVkaXQodHJ1ZSk7XG4gICAgICAgIGlmIChjb2x1bW4ubGV2ZWwpIHtcbiAgICAgICAgICAgIHRoaXMuX21vdmVDaGlsZENvbHVtbnMoY29sdW1uLnBhcmVudCwgY29sdW1uLCBkcm9wVGFyZ2V0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZHJvcFRhcmdldC5waW5uZWQgJiYgY29sdW1uLnBpbm5lZCkge1xuICAgICAgICAgICAgdGhpcy5fcmVvcmRlclBpbm5lZENvbHVtbnMoY29sdW1uLCBkcm9wVGFyZ2V0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZHJvcFRhcmdldC5waW5uZWQgJiYgIWNvbHVtbi5waW5uZWQpIHtcbiAgICAgICAgICAgIGNvbHVtbi5waW4oKTtcbiAgICAgICAgICAgIHRoaXMuX3Jlb3JkZXJQaW5uZWRDb2x1bW5zKGNvbHVtbiwgZHJvcFRhcmdldCwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkcm9wVGFyZ2V0LnBpbm5lZCAmJiBjb2x1bW4ucGlubmVkKSB7XG4gICAgICAgICAgICBjb2x1bW4udW5waW4oKTtcblxuICAgICAgICAgICAgY29uc3QgbGlzdCA9IHRoaXMuY29sdW1uTGlzdC50b0FycmF5KCk7XG4gICAgICAgICAgICBjb25zdCBmaSA9IGxpc3QuaW5kZXhPZihjb2x1bW4pO1xuICAgICAgICAgICAgY29uc3QgdGkgPSBsaXN0LmluZGV4T2YoZHJvcFRhcmdldCk7XG5cbiAgICAgICAgICAgIGlmIChwb3MgPT09IERyb3BQb3NpdGlvbi5CZWZvcmVEcm9wVGFyZ2V0ICYmIGZpIDwgdGkpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IERyb3BQb3NpdGlvbi5CZWZvcmVEcm9wVGFyZ2V0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwb3MgPT09IERyb3BQb3NpdGlvbi5BZnRlckRyb3BUYXJnZXQgJiYgZmkgPiB0aSkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gRHJvcFBvc2l0aW9uLkFmdGVyRHJvcFRhcmdldDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBEcm9wUG9zaXRpb24uTm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX21vdmVDb2x1bW5zKGNvbHVtbiwgZHJvcFRhcmdldCwgcG9zaXRpb24pO1xuICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICAgICAgY29uc3QgYXJncyA9IHtcbiAgICAgICAgICAgIHNvdXJjZTogY29sdW1uLFxuICAgICAgICAgICAgdGFyZ2V0OiBkcm9wVGFyZ2V0XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5vbkNvbHVtbk1vdmluZ0VuZC5lbWl0KGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdvZXMgdG8gdGhlIG5leHQgcGFnZSBvZiB0aGUgYElneEdyaWRDb21wb25lbnRgLCBpZiB0aGUgZ3JpZCBpcyBub3QgYWxyZWFkeSBhdCB0aGUgbGFzdCBwYWdlLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmdyaWQxLm5leHRQYWdlKCk7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBuZXh0UGFnZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzTGFzdFBhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMucGFnZSArPSAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR29lcyB0byB0aGUgcHJldmlvdXMgcGFnZSBvZiB0aGUgYElneEdyaWRDb21wb25lbnRgLCBpZiB0aGUgZ3JpZCBpcyBub3QgYWxyZWFkeSBhdCB0aGUgZmlyc3QgcGFnZS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5ncmlkMS5wcmV2aW91c1BhZ2UoKTtcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIHByZXZpb3VzUGFnZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRmlyc3RQYWdlKSB7XG4gICAgICAgICAgICB0aGlzLnBhZ2UgLT0gMTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdvZXMgdG8gdGhlIGRlc2lyZWQgcGFnZSBpbmRleC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5ncmlkMS5wYWdpbmF0ZSgxKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gdmFsXG4gICAgICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIHBhZ2luYXRlKHZhbDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmICh2YWwgPCAwIHx8IHZhbCA+IHRoaXMudG90YWxQYWdlcyAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGFnZSA9IHZhbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYW51YWxseSBtYXJrcyB0aGUgYElneEdyaWRDb21wb25lbnRgIGZvciBjaGFuZ2UgZGV0ZWN0aW9uLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmdyaWQxLm1hcmtGb3JDaGVjaygpO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgbWFya0ZvckNoZWNrKCkge1xuICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBgSWd4R3JpZFJvd0NvbXBvbmVudGAgYW5kIGFkZHMgdGhlIGRhdGEgcmVjb3JkIHRvIHRoZSBlbmQgb2YgdGhlIGRhdGEgc291cmNlLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCByZWNvcmQgPSB7XG4gICAgICogICAgIElEOiB0aGlzLmdyaWQxLmRhdGFbdGhpcy5ncmlkMS5kYXRhLmxlbmd0aCAtIDFdLklEICsgMSxcbiAgICAgKiAgICAgTmFtZTogdGhpcy5uZXdSZWNvcmRcbiAgICAgKiB9O1xuICAgICAqIHRoaXMuZ3JpZDEuYWRkUm93KHJlY29yZCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgYWRkUm93KGRhdGE6IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLmdyaWRBUEkuYWRkUm93VG9EYXRhKGRhdGEpO1xuXG4gICAgICAgIHRoaXMub25Sb3dBZGRlZC5lbWl0KHsgZGF0YSB9KTtcbiAgICAgICAgdGhpcy5fcGlwZVRyaWdnZXIrKztcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgYElneEdyaWRSb3dDb21wb25lbnRgIGFuZCB0aGUgY29ycmVzcG9uZGluZyBkYXRhIHJlY29yZCBieSBwcmltYXJ5IGtleS5cbiAgICAgKiBSZXF1aXJlcyB0aGF0IHRoZSBgcHJpbWFyeUtleWAgcHJvcGVydHkgaXMgc2V0LlxuICAgICAqIFRoZSBtZXRob2QgYWNjZXB0IHJvd1NlbGVjdG9yIGFzIGEgcGFyYW1ldGVyLCB3aGljaCBpcyB0aGUgcm93SUQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuZ3JpZDEuZGVsZXRlUm93KDApO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSByb3dTZWxlY3RvclxuICAgICAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBkZWxldGVSb3cocm93U2VsZWN0b3I6IGFueSk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5wcmltYXJ5S2V5ICE9PSB1bmRlZmluZWQgJiYgdGhpcy5wcmltYXJ5S2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZVJvd0J5SWQocm93U2VsZWN0b3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBwdWJsaWMgZGVsZXRlUm93QnlJZChyb3dJZDogYW55KSB7XG4gICAgICAgIHRoaXMuZ3JpZEFQSS5kZWxldGVSb3dCeUlkKHJvd0lkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGRlbGV0ZVJvd0Zyb21EYXRhKHJvd0lEOiBhbnksIGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgLy8gIGlmIHRoZXJlIGlzIGEgcm93IChpbmRleCAhPT0gMCkgZGVsZXRlIGl0XG4gICAgICAgIC8vICBpZiB0aGVyZSBpcyBhIHJvdyBpbiBBREQgb3IgVVBEQVRFIHN0YXRlIGNoYW5nZSBpdCdzIHN0YXRlIHRvIERFTEVURVxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50cmFuc2FjdGlvbnMuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiA9IHsgaWQ6IHJvd0lELCB0eXBlOiBUcmFuc2FjdGlvblR5cGUuREVMRVRFLCBuZXdWYWx1ZTogbnVsbCB9O1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNhY3Rpb25zLmFkZCh0cmFuc2FjdGlvbiwgdGhpcy5kYXRhW2luZGV4XSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGU6IFN0YXRlID0gdGhpcy50cmFuc2FjdGlvbnMuZ2V0U3RhdGUocm93SUQpO1xuICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvbnMuYWRkKHsgaWQ6IHJvd0lELCB0eXBlOiBUcmFuc2FjdGlvblR5cGUuREVMRVRFLCBuZXdWYWx1ZTogbnVsbCB9LCBzdGF0ZSAmJiBzdGF0ZS5yZWNvcmRSZWYpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgYElneEdyaWRSb3dDb21wb25lbnRgIGFuZCB0aGUgY29ycmVzcG9uZGluZyBkYXRhIHJlY29yZCBieSBwcmltYXJ5IGtleS5cbiAgICAgKiBSZXF1aXJlcyB0aGF0IHRoZSBgcHJpbWFyeUtleWAgcHJvcGVydHkgaXMgc2V0LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmdyaWRXaXRoUEsudXBkYXRlQ2VsbCgnVXBkYXRlZCcsIDEsICdQcm9kdWN0TmFtZScpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSB2YWx1ZSB0aGUgbmV3IHZhbHVlIHdoaWNoIGlzIHRvIGJlIHNldC5cbiAgICAgKiBAcGFyYW0gcm93U2VsZWN0b3IgY29ycmVzcG9uZHMgdG8gcm93SUQuXG4gICAgICogQHBhcmFtIGNvbHVtbiBjb3JyZXNwb25kcyB0byBjb2x1bW4gZmllbGQuXG4gICAgICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZUNlbGwodmFsdWU6IGFueSwgcm93U2VsZWN0b3I6IGFueSwgY29sdW1uOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuaXNEZWZpbmVkKHRoaXMucHJpbWFyeUtleSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbCA9IHRoaXMuY29sdW1uTGlzdC50b0FycmF5KCkuZmluZChjID0+IGMuZmllbGQgPT09IGNvbHVtbik7XG4gICAgICAgICAgICBpZiAoY29sKSB7XG4gICAgICAgICAgICAgICAgLy8gU2ltcGxpZnlcbiAgICAgICAgICAgICAgICBjb25zdCByb3dEYXRhID0gdGhpcy5ncmlkQVBJLmdldFJvd0RhdGEocm93U2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5ncmlkQVBJLmdldF9yb3dfaW5kZXhfaW5fZGF0YShyb3dTZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgLy8gSWYgcm93IHBhc3NlZCBpcyBpbnZhbGlkXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0ge1xuICAgICAgICAgICAgICAgICAgICByb3dJRDogcm93U2VsZWN0b3IsXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbklEOiBjb2wuaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHJvd0luZGV4OiBpbmRleFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gbmV3IElneENlbGwoaWQsIGluZGV4LCBjb2wsIHJvd0RhdGFbY29sLmZpZWxkXSwgcm93RGF0YVtjb2wuZmllbGRdLCByb3dEYXRhKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhcmdzID0gdGhpcy5ncmlkQVBJLnVwZGF0ZV9jZWxsKGNlbGwsIHZhbHVlKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNydWRTZXJ2aWNlLmNlbGwgJiYgdGhpcy5jcnVkU2VydmljZS5zYW1lQ2VsbChjZWxsKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5jYW5jZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRBUEkuZXNjYXBlX2VkaXRNb2RlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBgSWd4R3JpZFJvd0NvbXBvbmVudGAsIHdoaWNoIGlzIHNwZWNpZmllZCBieVxuICAgICAqIHJvd1NlbGVjdG9yIHBhcmFtZXRlciBhbmQgdGhlIGRhdGEgc291cmNlIHJlY29yZCB3aXRoIHRoZSBwYXNzZWQgdmFsdWUuXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCBhcHBseSByZXF1ZXN0ZWQgdXBkYXRlIG9ubHkgaWYgcHJpbWFyeSBrZXkgaXMgc3BlY2lmaWVkIGluIHRoZSBncmlkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBncmlkLnVwZGF0ZVJvdyh7XG4gICAgICogICAgICAgUHJvZHVjdElEOiAxLCBQcm9kdWN0TmFtZTogJ1NwZWFybWludCcsIEluU3RvY2s6IHRydWUsIFVuaXRzSW5TdG9jazogMSwgT3JkZXJEYXRlOiBuZXcgRGF0ZSgnMjAwNS0wMy0yMScpXG4gICAgICogICB9LCAxKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAcGFyYW0gcm93U2VsZWN0b3IgY29ycmVzcG9uZCB0byByb3dJRFxuICAgICAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVSb3codmFsdWU6IGFueSwgcm93U2VsZWN0b3I6IGFueSk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5pc0RlZmluZWQodGhpcy5wcmltYXJ5S2V5KSkge1xuICAgICAgICAgICAgY29uc3QgZWRpdGFibGVDZWxsID0gdGhpcy5jcnVkU2VydmljZS5jZWxsO1xuICAgICAgICAgICAgaWYgKGVkaXRhYmxlQ2VsbCAmJiBlZGl0YWJsZUNlbGwuaWQucm93SUQgPT09IHJvd1NlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkQVBJLmVzY2FwZV9lZGl0TW9kZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgcm93ID0gbmV3IElneFJvdyhyb3dTZWxlY3RvciwgLTEsIHRoaXMuZ3JpZEFQSS5nZXRSb3dEYXRhKHJvd1NlbGVjdG9yKSk7XG4gICAgICAgICAgICB0aGlzLmdyaWRBUEkudXBkYXRlX3Jvdyhyb3csIHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU29ydCBhIHNpbmdsZSBgSWd4Q29sdW1uQ29tcG9uZW50YC5cbiAgICAgKiBTb3J0IHRoZSBgSWd4R3JpZENvbXBvbmVudGAncyBgSWd4Q29sdW1uQ29tcG9uZW50YCBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgYXJyYXkgb2Ygc29ydGluZyBleHByZXNzaW9ucy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5ncmlkLnNvcnQoeyBmaWVsZE5hbWU6IG5hbWUsIGRpcjogU29ydGluZ0RpcmVjdGlvbi5Bc2MsIGlnbm9yZUNhc2U6IGZhbHNlIH0pO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgc29ydChleHByZXNzaW9uOiBJU29ydGluZ0V4cHJlc3Npb24gfCBBcnJheTxJU29ydGluZ0V4cHJlc3Npb24+KTogdm9pZCB7XG4gICAgICAgIHRoaXMuZW5kRWRpdChmYWxzZSk7XG4gICAgICAgIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIHRoaXMuZ3JpZEFQSS5zb3J0X211bHRpcGxlKGV4cHJlc3Npb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ncmlkQVBJLnNvcnQoZXhwcmVzc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vblNvcnRpbmdEb25lLmVtaXQoZXhwcmVzc2lvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsdGVycyBhIHNpbmdsZSBgSWd4Q29sdW1uQ29tcG9uZW50YC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogcHVibGljIGZpbHRlcih0ZXJtKSB7XG4gICAgICogICAgICB0aGlzLmdyaWQuZmlsdGVyKFwiUHJvZHVjdE5hbWVcIiwgdGVybSwgSWd4U3RyaW5nRmlsdGVyaW5nT3BlcmFuZC5pbnN0YW5jZSgpLmNvbmRpdGlvbihcImNvbnRhaW5zXCIpKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG5hbWVcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAcGFyYW0gY29uZGl0aW9uT3JFeHByZXNzaW9uVHJlZVxuICAgICAqIEBwYXJhbSBpZ25vcmVDYXNlXG4gICAgICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIGZpbHRlcihuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnksIGNvbmRpdGlvbk9yRXhwcmVzc2lvblRyZWU/OiBJRmlsdGVyaW5nT3BlcmF0aW9uIHwgSUZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSxcbiAgICAgICAgaWdub3JlQ2FzZT86IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5maWx0ZXJpbmdTZXJ2aWNlLmZpbHRlcihuYW1lLCB2YWx1ZSwgY29uZGl0aW9uT3JFeHByZXNzaW9uVHJlZSwgaWdub3JlQ2FzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsdGVycyBhbGwgdGhlIGBJZ3hDb2x1bW5Db21wb25lbnRgIGluIHRoZSBgSWd4R3JpZENvbXBvbmVudGAgd2l0aCB0aGUgc2FtZSBjb25kaXRpb24uXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGdyaWQuZmlsdGVyR2xvYmFsKCdzb21lJywgSWd4U3RyaW5nRmlsdGVyaW5nT3BlcmFuZC5pbnN0YW5jZSgpLmNvbmRpdGlvbignY29udGFpbnMnKSk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICogQHBhcmFtIGNvbmRpdGlvblxuICAgICAqIEBwYXJhbSBpZ25vcmVDYXNlXG4gICAgICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIGZpbHRlckdsb2JhbCh2YWx1ZTogYW55LCBjb25kaXRpb24/LCBpZ25vcmVDYXNlPykge1xuICAgICAgICB0aGlzLmZpbHRlcmluZ1NlcnZpY2UuZmlsdGVyR2xvYmFsKHZhbHVlLCBjb25kaXRpb24sIGlnbm9yZUNhc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgc3VtbWFyaWVzIGZvciB0aGUgc3BlY2lmaWVkIGNvbHVtbiBhbmQgYXBwbGllcyB5b3VyIGN1c3RvbVN1bW1hcnkuXG4gICAgICogSWYgeW91IGRvIG5vdCBwcm92aWRlIHRoZSBjdXN0b21TdW1tYXJ5LCB0aGVuIHRoZSBkZWZhdWx0IHN1bW1hcnkgZm9yIHRoZSBjb2x1bW4gZGF0YSB0eXBlIHdpbGwgYmUgYXBwbGllZC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogZ3JpZC5lbmFibGVTdW1tYXJpZXMoW3sgZmllbGROYW1lOiAnUHJvZHVjdE5hbWUnIH0sIHsgZmllbGROYW1lOiAnSUQnIH1dKTtcbiAgICAgKiBgYGBcbiAgICAgKiBFbmFibGUgc3VtbWFyaWVzIGZvciB0aGUgbGlzdGVkIGNvbHVtbnMuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGdyaWQuZW5hYmxlU3VtbWFyaWVzKCdQcm9kdWN0TmFtZScpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSByZXN0XG4gICAgICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIGVuYWJsZVN1bW1hcmllcyguLi5yZXN0KSB7XG4gICAgICAgIGlmIChyZXN0Lmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KHJlc3RbMF0pKSB7XG4gICAgICAgICAgICB0aGlzLl9tdWx0aXBsZVN1bW1hcmllcyhyZXN0WzBdLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3N1bW1hcmllcyhyZXN0WzBdLCB0cnVlLCByZXN0WzFdKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbGN1bGF0ZUdyaWRIZWlnaHQoKTtcbiAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERpc2FibGUgc3VtbWFyaWVzIGZvciB0aGUgc3BlY2lmaWVkIGNvbHVtbi5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogZ3JpZC5kaXNhYmxlU3VtbWFyaWVzKCdQcm9kdWN0TmFtZScpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogRGlzYWJsZSBzdW1tYXJpZXMgZm9yIHRoZSBsaXN0ZWQgY29sdW1ucy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogZ3JpZC5kaXNhYmxlU3VtbWFyaWVzKFt7IGZpZWxkTmFtZTogJ1Byb2R1Y3ROYW1lJyB9XSk7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBkaXNhYmxlU3VtbWFyaWVzKC4uLnJlc3QpIHtcbiAgICAgICAgaWYgKHJlc3QubGVuZ3RoID09PSAxICYmIEFycmF5LmlzQXJyYXkocmVzdFswXSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2Rpc2FibGVNdWx0aXBsZVN1bW1hcmllcyhyZXN0WzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3N1bW1hcmllcyhyZXN0WzBdLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiBuYW1lIGlzIHByb3ZpZGVkLCBjbGVhcnMgdGhlIGZpbHRlcmluZyBzdGF0ZSBvZiB0aGUgY29ycmVzcG9uZGluZyBgSWd4Q29sdW1uQ29tcG9uZW50YCxcbiAgICAgKiBvdGhlcndpc2UgY2xlYXJzIHRoZSBmaWx0ZXJpbmcgc3RhdGUgb2YgYWxsIGBJZ3hDb2x1bW5Db21wb25lbnRgcy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5ncmlkLmNsZWFyRmlsdGVyKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG5hbWVcbiAgICAgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgY2xlYXJGaWx0ZXIobmFtZT86IHN0cmluZykge1xuICAgICAgICB0aGlzLmZpbHRlcmluZ1NlcnZpY2UuY2xlYXJGaWx0ZXIobmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgbmFtZSBpcyBwcm92aWRlZCwgY2xlYXJzIHRoZSBzb3J0aW5nIHN0YXRlIG9mIHRoZSBjb3JyZXNwb25kaW5nIGBJZ3hDb2x1bW5Db21wb25lbnRgLFxuICAgICAqIG90aGVyd2lzZSBjbGVhcnMgdGhlIHNvcnRpbmcgc3RhdGUgb2YgYWxsIGBJZ3hDb2x1bW5Db21wb25lbnRgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmdyaWQuY2xlYXJTb3J0KCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG5hbWVcbiAgICAgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgY2xlYXJTb3J0KG5hbWU/OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgICAgICB0aGlzLnNvcnRpbmdFeHByZXNzaW9ucyA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5ncmlkQVBJLmdldF9jb2x1bW5fYnlfbmFtZShuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ3JpZEFQSS5jbGVhcl9zb3J0KG5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBARGVwcmVjYXRlTWV0aG9kKCdUaGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgY2xlYXJTdW1tYXJ5Q2FjaGUgbWV0aG9kLlRoZSBzdW1tYXJ5IGNhY2hlIGlzIGNsZWFyZWQgYXV0b21hdGljYWxseSB3aGVuIG5lZWRlZC4nKVxuICAgIHB1YmxpYyBjbGVhclN1bW1hcnlDYWNoZShhcmdzPykge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVmcmVzaEdyaWRTdGF0ZShhcmdzPykge1xuICAgICAgICB0aGlzLmVuZEVkaXQodHJ1ZSk7XG4gICAgICAgIHRoaXMuc3VtbWFyeVNlcnZpY2UuY2xlYXJTdW1tYXJ5Q2FjaGUoYXJncyk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogV2UgaGF2ZSByZXR1cm4gdmFsdWVzIGhlcmUuIE1vdmUgdGhlbSB0byBldmVudCBhcmdzID8/XG5cbiAgICAvKipcbiAgICAgKiBQaW5zIGEgY29sdW1uIGJ5IGZpZWxkIG5hbWUuIFJldHVybnMgd2hldGhlciB0aGUgb3BlcmF0aW9uIGlzIHN1Y2Nlc3NmdWwuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuZ3JpZC5waW5Db2x1bW4oXCJJRFwiKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gY29sdW1uTmFtZVxuICAgICAqIEBwYXJhbSBpbmRleFxuICAgICAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBwaW5Db2x1bW4oY29sdW1uTmFtZTogc3RyaW5nIHwgSWd4Q29sdW1uQ29tcG9uZW50LCBpbmRleD8pOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgY29sID0gY29sdW1uTmFtZSBpbnN0YW5jZW9mIElneENvbHVtbkNvbXBvbmVudCA/IGNvbHVtbk5hbWUgOiB0aGlzLmdldENvbHVtbkJ5TmFtZShjb2x1bW5OYW1lKTtcbiAgICAgICAgcmV0dXJuIGNvbC5waW4oaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVucGlucyBhIGNvbHVtbiBieSBmaWVsZCBuYW1lLiBSZXR1cm5zIHdoZXRoZXIgdGhlIG9wZXJhdGlvbiBpcyBzdWNjZXNzZnVsLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmdyaWQucGluQ29sdW1uKFwiSURcIik7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGNvbHVtbk5hbWVcbiAgICAgKiBAcGFyYW0gaW5kZXhcbiAgICAgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgdW5waW5Db2x1bW4oY29sdW1uTmFtZTogc3RyaW5nIHwgSWd4Q29sdW1uQ29tcG9uZW50LCBpbmRleD8pOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgY29sID0gY29sdW1uTmFtZSBpbnN0YW5jZW9mIElneENvbHVtbkNvbXBvbmVudCA/IGNvbHVtbk5hbWUgOiB0aGlzLmdldENvbHVtbkJ5TmFtZShjb2x1bW5OYW1lKTtcbiAgICAgICAgcmV0dXJuIGNvbC51bnBpbihpbmRleCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBSZWNhbGN1bGF0ZXMgZ3JpZCB3aWR0aC9oZWlnaHQgZGltZW5zaW9ucy4gU2hvdWxkIGJlIHJ1biB3aGVuIGNoYW5naW5nIERPTSBlbGVtZW50cyBkaW1lbnRpb25zIG1hbnVhbGx5IHRoYXQgYWZmZWN0IHRoZSBncmlkJ3Mgc2l6ZS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5ncmlkLnJlZmxvdygpO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVmbG93KCkge1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZUdyaWRTaXplcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBARGVwcmVjYXRlTWV0aG9kKCdUaGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgcmVjYWxjdWxhdGVTdW1tYXJpZXMgbWV0aG9kLiBUaGUgc3VtbWFyaWVzIGFyZSByZWNhbGN1bGF0ZWQgYXV0b21hdGljYWxseSB3aGVuIG5lZWRlZC4nKVxuICAgIHB1YmxpYyByZWNhbGN1bGF0ZVN1bW1hcmllcygpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgbmV4dCBvY2N1cnJlbmNlIG9mIGEgZ2l2ZW4gc3RyaW5nIGluIHRoZSBncmlkIGFuZCBzY3JvbGxzIHRvIHRoZSBjZWxsIGlmIGl0IGlzbid0IHZpc2libGUuXG4gICAgICogUmV0dXJucyBob3cgbWFueSB0aW1lcyB0aGUgZ3JpZCBjb250YWlucyB0aGUgc3RyaW5nLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmdyaWQuZmluZE5leHQoXCJmaW5hbmNpYWxcIik7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHRleHQgdGhlIHN0cmluZyB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIGNhc2VTZW5zaXRpdmUgb3B0aW9uYWxseSwgaWYgdGhlIHNlYXJjaCBzaG91bGQgYmUgY2FzZSBzZW5zaXRpdmUgKGRlZmF1bHRzIHRvIGZhbHNlKS5cbiAgICAgKiBAcGFyYW0gZXhhY3RNYXRjaCBvcHRpb25hbGx5LCBpZiB0aGUgdGV4dCBzaG91bGQgbWF0Y2ggdGhlIGVudGlyZSB2YWx1ZSAgKGRlZmF1bHRzIHRvIGZhbHNlKS5cbiAgICAgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgZmluZE5leHQodGV4dDogc3RyaW5nLCBjYXNlU2Vuc2l0aXZlPzogYm9vbGVhbiwgZXhhY3RNYXRjaD86IGJvb2xlYW4pOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5maW5kKHRleHQsIDEsIGNhc2VTZW5zaXRpdmUsIGV4YWN0TWF0Y2gpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSBwcmV2aW91cyBvY2N1cnJlbmNlIG9mIGEgZ2l2ZW4gc3RyaW5nIGluIHRoZSBncmlkIGFuZCBzY3JvbGxzIHRvIHRoZSBjZWxsIGlmIGl0IGlzbid0IHZpc2libGUuXG4gICAgICogUmV0dXJucyBob3cgbWFueSB0aW1lcyB0aGUgZ3JpZCBjb250YWlucyB0aGUgc3RyaW5nLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmdyaWQuZmluZFByZXYoXCJmaW5hbmNpYWxcIik7XG4gICAgICogYGBgYFxuICAgICAqIEBwYXJhbSB0ZXh0IHRoZSBzdHJpbmcgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSBjYXNlU2Vuc2l0aXZlIG9wdGlvbmFsbHksIGlmIHRoZSBzZWFyY2ggc2hvdWxkIGJlIGNhc2Ugc2Vuc2l0aXZlIChkZWZhdWx0cyB0byBmYWxzZSkuXG4gICAgICogQHBhcmFtIGV4YWN0TWF0Y2ggb3B0aW9uYWxseSwgaWYgdGhlIHRleHQgc2hvdWxkIG1hdGNoIHRoZSBlbnRpcmUgdmFsdWUgKGRlZmF1bHRzIHRvIGZhbHNlKS5cbiAgICAgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgZmluZFByZXYodGV4dDogc3RyaW5nLCBjYXNlU2Vuc2l0aXZlPzogYm9vbGVhbiwgZXhhY3RNYXRjaD86IGJvb2xlYW4pOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5maW5kKHRleHQsIC0xLCBjYXNlU2Vuc2l0aXZlLCBleGFjdE1hdGNoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWFwcGxpZXMgdGhlIGV4aXN0aW5nIHNlYXJjaC5cbiAgICAgKiBSZXR1cm5zIGhvdyBtYW55IHRpbWVzIHRoZSBncmlkIGNvbnRhaW5zIHRoZSBsYXN0IHNlYXJjaC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5ncmlkLnJlZnJlc2hTZWFyY2goKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gdXBkYXRlQWN0aXZlSW5mb1xuICAgICAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyByZWZyZXNoU2VhcmNoKHVwZGF0ZUFjdGl2ZUluZm8/OiBib29sZWFuKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMubGFzdFNlYXJjaEluZm8uc2VhcmNoVGV4dCkge1xuICAgICAgICAgICAgdGhpcy5yZWJ1aWxkTWF0Y2hDYWNoZSgpO1xuXG4gICAgICAgICAgICBpZiAodXBkYXRlQWN0aXZlSW5mbykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUluZm8gPSBJZ3hUZXh0SGlnaGxpZ2h0RGlyZWN0aXZlLmhpZ2hsaWdodEdyb3Vwc01hcC5nZXQodGhpcy5pZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0U2VhcmNoSW5mby5tYXRjaEluZm9DYWNoZS5mb3JFYWNoKChtYXRjaCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2guY29sdW1uID09PSBhY3RpdmVJbmZvLmNvbHVtbiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gucm93ID09PSBhY3RpdmVJbmZvLnJvdyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2guaW5kZXggPT09IGFjdGl2ZUluZm8uaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdFNlYXJjaEluZm8uYWN0aXZlTWF0Y2hJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluZCh0aGlzLmxhc3RTZWFyY2hJbmZvLnNlYXJjaFRleHQsIDAsIHRoaXMubGFzdFNlYXJjaEluZm8uY2FzZVNlbnNpdGl2ZSwgdGhpcy5sYXN0U2VhcmNoSW5mby5leGFjdE1hdGNoLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIHRoZSBoaWdobGlnaHRzIGluIHRoZSBjZWxsLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmdyaWQuY2xlYXJTZWFyY2goKTtcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIGNsZWFyU2VhcmNoKCkge1xuICAgICAgICB0aGlzLmxhc3RTZWFyY2hJbmZvID0ge1xuICAgICAgICAgICAgc2VhcmNoVGV4dDogJycsXG4gICAgICAgICAgICBjYXNlU2Vuc2l0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgIGV4YWN0TWF0Y2g6IGZhbHNlLFxuICAgICAgICAgICAgYWN0aXZlTWF0Y2hJbmRleDogMCxcbiAgICAgICAgICAgIG1hdGNoSW5mb0NhY2hlOiBbXVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucm93TGlzdC5mb3JFYWNoKChyb3cpID0+IHtcbiAgICAgICAgICAgIGlmIChyb3cuY2VsbHMpIHtcbiAgICAgICAgICAgICAgICByb3cuY2VsbHMuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjLmNsZWFySGlnaGxpZ2h0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaWYgdGhlIGBJZ3hHcmlkQ29tcG9uZW50YCBoYXMgc29ydGFibGUgY29sdW1ucy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3Qgc29ydGFibGVHcmlkID0gdGhpcy5ncmlkLmhhc1NvcnRhYmxlQ29sdW1ucztcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgZ2V0IGhhc1NvcnRhYmxlQ29sdW1ucygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1uTGlzdC5zb21lKChjb2wpID0+IGNvbC5zb3J0YWJsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpZiB0aGUgYElneEdyaWRDb21wb25lbnRgIGhhcyBlZGl0YWJsZSBjb2x1bW5zLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBlZGl0YWJsZUdyaWQgPSB0aGlzLmdyaWQuaGFzRWRpdGFibGVDb2x1bW5zO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBnZXQgaGFzRWRpdGFibGVDb2x1bW5zKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW5MaXN0LnNvbWUoKGNvbCkgPT4gY29sLmVkaXRhYmxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGlmIHRoZSBgSWd4R3JpZENvbXBvbmVudGAgaGFzIGZpdGVyYWJsZSBjb2x1bW5zLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBmaWx0ZXJhYmxlR3JpZCA9IHRoaXMuZ3JpZC5oYXNGaWx0ZXJhYmxlQ29sdW1ucztcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgZ2V0IGhhc0ZpbHRlcmFibGVDb2x1bW5zKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW5MaXN0LnNvbWUoKGNvbCkgPT4gY29sLmZpbHRlcmFibGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaWYgdGhlIGBJZ3hHcmlkQ29tcG9uZW50YCBoYXMgc3VtbWFyaXplZCBjb2x1bW5zLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBzdW1tYXJpemVkR3JpZCA9IHRoaXMuZ3JpZC5oYXNTdW1tYXJpemVkQ29sdW1ucztcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgZ2V0IGhhc1N1bW1hcml6ZWRDb2x1bW5zKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdW1tYXJ5U2VydmljZS5oYXNTdW1tYXJpemVkQ29sdW1ucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0IHJvb3RTdW1tYXJpZXNFbmFibGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdW1tYXJ5Q2FsY3VsYXRpb25Nb2RlICE9PSBHcmlkU3VtbWFyeUNhbGN1bGF0aW9uTW9kZS5jaGlsZExldmVsc09ubHk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaWYgdGhlIGBJZ3hHcmlkQ29tcG9uZW50YCBoYXMgbW92ZWFibGUgY29sdW1ucy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbW92YWJsZUdyaWQgPSB0aGlzLmdyaWQuaGFzTW92YWJsZUNvbHVtbnM7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIGdldCBoYXNNb3ZhYmxlQ29sdW1ucygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1uTGlzdCAmJiB0aGlzLmNvbHVtbkxpc3Quc29tZSgoY29sKSA9PiBjb2wubW92YWJsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpZiB0aGUgYElneEdyaWRDb21wb25lbnRgIGhhcyBjb2x1bW4gZ3JvdXBzLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBncm91cEdyaWQgPSB0aGlzLmdyaWQuaGFzQ29sdW1uR3JvdXBzO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBnZXQgaGFzQ29sdW1uR3JvdXBzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sdW1uR3JvdXBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGlmIHRoZSBgSWd4R3JpZENvbXBvbmVudGAgaGFzIGNvbHVtbiBsYXlvdXRzIGZvciBtdWx0aS1yb3cgbGF5b3V0IGRlZmluaXRpb24uXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGxheW91dEdyaWQgPSB0aGlzLmdyaWQuaGFzQ29sdW1uTGF5b3V0cztcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIGdldCBoYXNDb2x1bW5MYXlvdXRzKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLmNvbHVtbkxpc3Quc29tZShjb2wgPT4gY29sLmNvbHVtbkxheW91dCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiB0aGUgc2VsZWN0ZWQgYElneEdyaWRDZWxsQ29tcG9uZW50YHMuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHNlbGVjdGVkQ2VsbHMgPSB0aGlzLmdyaWQuc2VsZWN0ZWRDZWxscztcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgZ2V0IHNlbGVjdGVkQ2VsbHMoKTogSWd4R3JpZENlbGxDb21wb25lbnRbXSB8IGFueVtdIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVJvd0xpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFSb3dMaXN0Lm1hcCgocm93KSA9PiByb3cuY2VsbHMuZmlsdGVyKChjZWxsKSA9PiBjZWxsLnNlbGVjdGVkKSlcbiAgICAgICAgICAgICAgICAucmVkdWNlKChhLCBiKSA9PiBhLmNvbmNhdChiKSwgW10pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0IG11bHRpUm93TGF5b3V0Um93U2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX211bHRpUm93TGF5b3V0Um93U2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldCByb3dCYXNlZEhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YUxlbmd0aCAqIHRoaXMucm93SGVpZ2h0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0IGlzUGVyY2VudFdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2lkdGggJiYgdGhpcy5fd2lkdGguaW5kZXhPZignJScpICE9PSAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldCBpc1BlcmNlbnRIZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oZWlnaHQgJiYgdGhpcy5faGVpZ2h0LmluZGV4T2YoJyUnKSAhPT0gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIFNldHMgdGhpcy5faGVpZ2h0XG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9kZXJpdmVQb3NzaWJsZUhlaWdodCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUGVyY2VudEhlaWdodCB8fCAhdGhpcy5faGVpZ2h0IHx8ICF0aGlzLmlzQXR0YWNoZWRUb0RvbSB8fCB0aGlzLnJvd0Jhc2VkSGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLm5hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZSB8fCAhdGhpcy5uYXRpdmVFbGVtZW50LnBhcmVudE5vZGUuY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICBjb25zdCB2aWV3UG9ydEhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLl9oZWlnaHQgPSB0aGlzLnJvd0Jhc2VkSGVpZ2h0IDw9IHZpZXdQb3J0SGVpZ2h0ID8gbnVsbCA6IHZpZXdQb3J0SGVpZ2h0LnRvU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRIZWlnaHQgPSB0aGlzLm5hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLl9oZWlnaHQgPSB0aGlzLnJvd0Jhc2VkSGVpZ2h0IDw9IHBhcmVudEhlaWdodCA/IG51bGwgOiB0aGlzLl9oZWlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogU2V0cyBjb2x1bW5zIGRlZmF1bHRXaWR0aCBwcm9wZXJ0eVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfZGVyaXZlUG9zc2libGVXaWR0aCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbHVtbldpZHRoU2V0QnlVc2VyKSB7XG4gICAgICAgICAgICB0aGlzLl9jb2x1bW5XaWR0aCA9IHRoaXMuZ2V0UG9zc2libGVDb2x1bW5XaWR0aCgpO1xuICAgICAgICAgICAgdGhpcy5jb2x1bW5MaXN0LmZvckVhY2goKGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzQ29sdW1uTGF5b3V0cyAmJiBwYXJzZUludCh0aGlzLl9jb2x1bW5XaWR0aCwgMTApKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbHVtbldpZHRoQ29tYmluZWQgPSBwYXJzZUludCh0aGlzLl9jb2x1bW5XaWR0aCwgMTApICogKGNvbHVtbi5jb2xFbmQgPyBjb2x1bW4uY29sRW5kIC0gY29sdW1uLmNvbFN0YXJ0IDogMSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbi5kZWZhdWx0V2lkdGggPSBjb2x1bW5XaWR0aENvbWJpbmVkICsgJ3B4JztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW4uZGVmYXVsdFdpZHRoID0gdGhpcy5fY29sdW1uV2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnJlc2V0Q2FjaGVkV2lkdGhzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldCBkZWZhdWx0VGFyZ2V0Qm9keUhlaWdodCgpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBhbGxJdGVtcyA9IHRoaXMudG90YWxJdGVtQ291bnQgfHwgdGhpcy5kYXRhTGVuZ3RoO1xuICAgICAgICByZXR1cm4gdGhpcy5yb3dIZWlnaHQgKiBNYXRoLm1pbih0aGlzLl9kZWZhdWx0VGFyZ2V0UmVjb3JkTnVtYmVyLFxuICAgICAgICAgICAgdGhpcy5wYWdpbmcgPyBNYXRoLm1pbihhbGxJdGVtcywgdGhpcy5wZXJQYWdlKSA6IGFsbEl0ZW1zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogU2V0cyBUQk9EWSBoZWlnaHQgaS5lLiB0aGlzLmNhbGNIZWlnaHRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgY2FsY3VsYXRlR3JpZEhlaWdodCgpIHtcbiAgICAgICAgdGhpcy5fZGVyaXZlUG9zc2libGVIZWlnaHQoKTtcbiAgICAgICAgLy8gVE9ETzogQ2FsY3VsYXRlIGJhc2VkIG9uIGdyaWQgZGVuc2l0eVxuICAgICAgICBpZiAodGhpcy5tYXhMZXZlbEhlYWRlckRlcHRoKSB7XG4gICAgICAgICAgICB0aGlzLnRoZWFkUm93Lm5hdGl2ZUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7KHRoaXMubWF4TGV2ZWxIZWFkZXJEZXB0aCArIDEpICogdGhpcy5kZWZhdWx0Um93SGVpZ2h0ICtcbiAgICAgICAgICAgICAgICAodGhpcy5hbGxvd0ZpbHRlcmluZyAmJiB0aGlzLmZpbHRlck1vZGUgPT09IEZpbHRlck1vZGUucXVpY2tGaWx0ZXIgPyBGSUxURVJfUk9XX0hFSUdIVCA6IDApICsgMX1weGA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdW1tYXJpZXNIZWlnaHQgPSAwO1xuICAgICAgICBpZiAoIXRoaXMuX2hlaWdodCkge1xuICAgICAgICAgICAgdGhpcy5jYWxjSGVpZ2h0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc1N1bW1hcml6ZWRDb2x1bW5zICYmIHRoaXMucm9vdFN1bW1hcmllc0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1bW1hcmllc0hlaWdodCA9IHRoaXMuc3VtbWFyeVNlcnZpY2UuY2FsY01heFN1bW1hcnlIZWlnaHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmhhc1N1bW1hcml6ZWRDb2x1bW5zICYmIHRoaXMucm9vdFN1bW1hcmllc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3VtbWFyaWVzSGVpZ2h0ID0gdGhpcy5zdW1tYXJ5U2VydmljZS5jYWxjTWF4U3VtbWFyeUhlaWdodCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWxjSGVpZ2h0ID0gdGhpcy5fY2FsY3VsYXRlR3JpZEJvZHlIZWlnaHQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldEdyb3VwQXJlYUhlaWdodCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldFRvb2xiYXJIZWlnaHQoKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IHRvb2xiYXJIZWlnaHQgPSAwO1xuICAgICAgICBpZiAodGhpcy5zaG93VG9vbGJhciAmJiB0aGlzLnRvb2xiYXJIdG1sICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRvb2xiYXJIZWlnaHQgPSB0aGlzLnRvb2xiYXJIdG1sLm5hdGl2ZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQgP1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbGJhckh0bWwubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQgOiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b29sYmFySGVpZ2h0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0UGFnaW5nSGVpZ2h0KCk6IG51bWJlciB7XG4gICAgICAgIGxldCBwYWdpbmdIZWlnaHQgPSAwO1xuICAgICAgICBpZiAodGhpcy5wYWdpbmcgJiYgdGhpcy5wYWdpbmF0b3IpIHtcbiAgICAgICAgICAgIHBhZ2luZ0hlaWdodCA9IHRoaXMucGFnaW5hdG9yLm5hdGl2ZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQgP1xuICAgICAgICAgICAgICAgIHRoaXMucGFnaW5hdG9yLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0IDogMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFnaW5nSGVpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9jYWxjdWxhdGVHcmlkQm9keUhlaWdodCgpIHtcbiAgICAgICAgY29uc3QgZm9vdGVyQm9yZGVyc0FuZFNjcm9sbGJhcnMgPSB0aGlzLnRmb290Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0IC1cbiAgICAgICAgICAgIHRoaXMudGZvb3QubmF0aXZlRWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIGNvbnN0IGNvbXB1dGVkID0gdGhpcy5kb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKHRoaXMubmF0aXZlRWxlbWVudCk7XG4gICAgICAgIGNvbnN0IHRvb2xiYXJIZWlnaHQgPSB0aGlzLmdldFRvb2xiYXJIZWlnaHQoKTtcbiAgICAgICAgY29uc3QgcGFnaW5nSGVpZ2h0ID0gdGhpcy5nZXRQYWdpbmdIZWlnaHQoKTtcbiAgICAgICAgY29uc3QgZ3JvdXBBcmVhSGVpZ2h0ID0gdGhpcy5nZXRHcm91cEFyZWFIZWlnaHQoKTtcbiAgICAgICAgbGV0IGdyaWRIZWlnaHQ7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNQZXJjZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICAvKmhlaWdodCBpbiAlKi9cbiAgICAgICAgICAgIGlmIChjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCdoZWlnaHQnKS5pbmRleE9mKCclJykgPT09IC0xICkge1xuICAgICAgICAgICAgICAgIGdyaWRIZWlnaHQgPSBwYXJzZUludChjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCdoZWlnaHQnKSwgMTApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0VGFyZ2V0Qm9keUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdyaWRIZWlnaHQgPSBwYXJzZUludCh0aGlzLl9oZWlnaHQsIDEwKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoZWlnaHQgPSBNYXRoLmFicyhncmlkSGVpZ2h0IC0gdG9vbGJhckhlaWdodCAtXG4gICAgICAgICAgICAgICAgdGhpcy50aGVhZFJvdy5uYXRpdmVFbGVtZW50Lm9mZnNldEhlaWdodCAtXG4gICAgICAgICAgICAgICAgdGhpcy5zdW1tYXJpZXNIZWlnaHQgLSBwYWdpbmdIZWlnaHQgLVxuICAgICAgICAgICAgICAgIGdyb3VwQXJlYUhlaWdodCAtIGZvb3RlckJvcmRlcnNBbmRTY3JvbGxiYXJzIC1cbiAgICAgICAgICAgICAgICB0aGlzLnNjci5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodCk7XG5cbiAgICAgICAgaWYgKGhlaWdodCA9PT0gMCB8fCBpc05hTihncmlkSGVpZ2h0KSkge1xuICAgICAgICAgICAgY29uc3QgYm9keUhlaWdodCA9IHRoaXMuZGVmYXVsdFRhcmdldEJvZHlIZWlnaHQ7XG4gICAgICAgICAgICByZXR1cm4gYm9keUhlaWdodCA+IDAgPyBib2R5SGVpZ2h0IDogbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoZWlnaHQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBvdXRlcldpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNWZXJ0aWNhbFNyb2xsKCkgPyB0aGlzLmNhbGNXaWR0aCArIHRoaXMuc2Nyb2xsV2lkdGggOiB0aGlzLmNhbGNXaWR0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogR2V0cyB0aGUgdmlzaWJsZSBjb250ZW50IGhlaWdodCB0aGF0IGluY2x1ZGVzIGhlYWRlciArIHRib2R5ICsgZm9vdGVyLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRWaXNpYmxlQ29udGVudEhlaWdodCgpIHtcbiAgICAgICAgbGV0IGhlaWdodCA9IHRoaXMudGhlYWRSb3cubmF0aXZlRWxlbWVudC5jbGllbnRIZWlnaHQgKyB0aGlzLnRib2R5Lm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICAgICAgICBpZiAodGhpcy5oYXNTdW1tYXJpemVkQ29sdW1ucykge1xuICAgICAgICAgICAgaGVpZ2h0ICs9IHRoaXMudGZvb3QubmF0aXZlRWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGdldFBvc3NpYmxlQ29sdW1uV2lkdGgoYmFzZVdpZHRoOiBudW1iZXIgPSBudWxsKSB7XG4gICAgICAgIGxldCBjb21wdXRlZFdpZHRoO1xuICAgICAgICBpZiAoYmFzZVdpZHRoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb21wdXRlZFdpZHRoID0gYmFzZVdpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tcHV0ZWRXaWR0aCA9IHRoaXMuY2FsY1dpZHRoIHx8XG4gICAgICAgICAgICAgICAgcGFyc2VJbnQodGhpcy5kb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKHRoaXMubmF0aXZlRWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKSwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc2hvd1Jvd0NoZWNrYm94ZXMpIHtcbiAgICAgICAgICAgIGNvbXB1dGVkV2lkdGggLT0gdGhpcy5oZWFkZXJDaGVja2JveENvbnRhaW5lciA/IHRoaXMuaGVhZGVyQ2hlY2tib3hDb250YWluZXIubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCA6IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB2aXNpYmxlQ2hpbGRDb2x1bW5zID0gdGhpcy52aXNpYmxlQ29sdW1ucy5maWx0ZXIoYyA9PiAhYy5jb2x1bW5Hcm91cCk7XG5cblxuICAgICAgICAvLyBDb2x1bW4gbGF5b3V0cyByZWxhdGVkXG4gICAgICAgIGxldCB2aXNpYmxlQ29scyA9IFtdO1xuICAgICAgICBjb25zdCBjb2x1bW5CbG9ja3MgPSB0aGlzLnZpc2libGVDb2x1bW5zLmZpbHRlcihjID0+IGMuY29sdW1uR3JvdXApO1xuICAgICAgICBjb25zdCBjb2xzUGVyQmxvY2sgPSBjb2x1bW5CbG9ja3MubWFwKGJsb2NrID0+IGJsb2NrLmdldEluaXRpYWxDaGlsZENvbHVtblNpemVzKGJsb2NrLmNoaWxkcmVuKSk7XG4gICAgICAgIGNvbnN0IGNvbWJpbmVkQmxvY2tzU2l6ZSA9IGNvbHNQZXJCbG9jay5yZWR1Y2UoKGFjYywgaXRlbSkgPT4gYWNjICsgaXRlbS5sZW5ndGgsIDApO1xuICAgICAgICBjb2xzUGVyQmxvY2suZm9yRWFjaChibG9ja0NvbHMgPT4gdmlzaWJsZUNvbHMgPSB2aXNpYmxlQ29scy5jb25jYXQoYmxvY2tDb2xzKSk7XG4gICAgICAgIC8vXG5cbiAgICAgICAgY29uc3QgY29sdW1uc1dpdGhTZXRXaWR0aHMgPSB0aGlzLmhhc0NvbHVtbkxheW91dHMgP1xuICAgICAgICAgICAgdmlzaWJsZUNvbHMuZmlsdGVyKGMgPT4gYy53aWR0aFNldEJ5VXNlcikgOlxuICAgICAgICAgICAgdmlzaWJsZUNoaWxkQ29sdW1ucy5maWx0ZXIoYyA9PiBjLndpZHRoU2V0QnlVc2VyKTtcblxuICAgICAgICBjb25zdCBjb2x1bW5zVG9TaXplID0gdGhpcy5oYXNDb2x1bW5MYXlvdXRzID9cbiAgICAgICAgICAgIGNvbWJpbmVkQmxvY2tzU2l6ZSAtIGNvbHVtbnNXaXRoU2V0V2lkdGhzLmxlbmd0aCA6XG4gICAgICAgICAgICB2aXNpYmxlQ2hpbGRDb2x1bW5zLmxlbmd0aCAtIGNvbHVtbnNXaXRoU2V0V2lkdGhzLmxlbmd0aDtcblxuICAgICAgICBjb25zdCBzdW1FeGlzdGluZ1dpZHRocyA9IGNvbHVtbnNXaXRoU2V0V2lkdGhzXG4gICAgICAgICAgICAucmVkdWNlKChwcmV2LCBjdXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sV2lkdGggPSBjdXJyLndpZHRoO1xuICAgICAgICAgICAgICAgIGNvbnN0IHdpZHRoVmFsdWUgPSBwYXJzZUludChjb2xXaWR0aCwgMTApO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJXaWR0aCA9IGNvbFdpZHRoICYmIHR5cGVvZiBjb2xXaWR0aCA9PT0gJ3N0cmluZycgJiYgY29sV2lkdGguaW5kZXhPZignJScpICE9PSAtMSA/XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoVmFsdWUgLyAxMDAgKiBjb21wdXRlZFdpZHRoIDpcbiAgICAgICAgICAgICAgICAgICAgd2lkdGhWYWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldiArIGN1cnJXaWR0aDtcbiAgICAgICAgICAgIH0sIDApO1xuXG4gICAgICAgIGNvbnN0IGNvbHVtbldpZHRoID0gTWF0aC5mbG9vcighTnVtYmVyLmlzRmluaXRlKHN1bUV4aXN0aW5nV2lkdGhzKSA/XG4gICAgICAgICAgICBNYXRoLm1heChjb21wdXRlZFdpZHRoIC8gY29sdW1uc1RvU2l6ZSwgTUlOSU1VTV9DT0xVTU5fV0lEVEgpIDpcbiAgICAgICAgICAgIE1hdGgubWF4KChjb21wdXRlZFdpZHRoIC0gc3VtRXhpc3RpbmdXaWR0aHMpIC8gY29sdW1uc1RvU2l6ZSwgTUlOSU1VTV9DT0xVTU5fV0lEVEgpKTtcblxuICAgICAgICByZXR1cm4gY29sdW1uV2lkdGgudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogU2V0cyBncmlkIHdpZHRoIGkuZS4gdGhpcy5jYWxjV2lkdGhcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgY2FsY3VsYXRlR3JpZFdpZHRoKCkge1xuICAgICAgICBsZXQgd2lkdGg7XG4gICAgICAgIGNvbnN0IGNvbXB1dGVkID0gdGhpcy5kb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKHRoaXMubmF0aXZlRWxlbWVudCk7XG4gICAgICAgIGNvbnN0IGVsID0gdGhpcy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLm5hdGl2ZUVsZW1lbnQuaWQpO1xuXG4gICAgICAgIGlmICh0aGlzLmlzUGVyY2VudFdpZHRoKSB7XG4gICAgICAgICAgICAvKiB3aWR0aCBpbiAlKi9cbiAgICAgICAgICAgIHdpZHRoID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKS5pbmRleE9mKCclJykgPT09IC0xID9cbiAgICAgICAgICAgICAgICBwYXJzZUludChjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCd3aWR0aCcpLCAxMCkgOiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2lkdGggPSBwYXJzZUludCh0aGlzLl93aWR0aCwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF3aWR0aCAmJiBlbCkge1xuICAgICAgICAgICAgd2lkdGggPSBlbC5vZmZzZXRXaWR0aDtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKCF3aWR0aCkge1xuICAgICAgICAgICAgd2lkdGggPSB0aGlzLmNvbHVtbkxpc3QucmVkdWNlKChzdW0sIGl0ZW0pID0+ICBzdW0gKyBwYXJzZUludCgoaXRlbS53aWR0aCB8fCBpdGVtLmRlZmF1bHRXaWR0aCksIDEwKSwgMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5oYXNWZXJ0aWNhbFNyb2xsKCkpIHtcbiAgICAgICAgICAgIHdpZHRoIC09IHRoaXMuc2Nyb2xsV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE51bWJlci5pc0Zpbml0ZSh3aWR0aCkgJiYgd2lkdGggIT09IHRoaXMuY2FsY1dpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGNXaWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Rlcml2ZVBvc3NpYmxlV2lkdGgoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaGFzVmVydGljYWxTcm9sbCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9uZ0FmdGVyVmlld0luaXRQYXNzZWQpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgIGNvbnN0IGlzU2Nyb2xsYWJsZSA9IHRoaXMudmVydGljYWxTY3JvbGxDb250YWluZXIuaXNTY3JvbGxhYmxlKCk7XG4gICAgICAgIHJldHVybiAhISh0aGlzLmNhbGNXaWR0aCAmJiB0aGlzLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mICYmXG4gICAgICAgIHRoaXMudmVydGljYWxTY3JvbGxDb250YWluZXIuaWd4Rm9yT2YubGVuZ3RoID4gMCAmJlxuICAgICAgICBpc1Njcm9sbGFibGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgb25Db2x1bW5zQ2hhbmdlZChjaGFuZ2U6IFF1ZXJ5TGlzdDxJZ3hDb2x1bW5Db21wb25lbnQ+KSB7XG4gICAgICAgIGNvbnN0IGRpZmYgPSB0aGlzLmNvbHVtbkxpc3REaWZmZXIuZGlmZihjaGFuZ2UpO1xuICAgICAgICBpZiAoZGlmZikge1xuICAgICAgICAgICAgbGV0IGFkZGVkID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgcmVtb3ZlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICB0aGlzLmluaXRDb2x1bW5zKHRoaXMuY29sdW1uTGlzdCk7XG5cblxuICAgICAgICAgICAgZGlmZi5mb3JFYWNoQWRkZWRJdGVtKChyZWNvcmQ6IEl0ZXJhYmxlQ2hhbmdlUmVjb3JkPElneENvbHVtbkNvbXBvbmVudD4pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ29sdW1uSW5pdC5lbWl0KHJlY29yZC5pdGVtKTtcbiAgICAgICAgICAgICAgICBhZGRlZCA9IHRydWU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZGlmZi5mb3JFYWNoUmVtb3ZlZEl0ZW0oKHJlY29yZDogSXRlcmFibGVDaGFuZ2VSZWNvcmQ8SWd4Q29sdW1uQ29tcG9uZW50PikgPT4ge1xuICAgICAgICAgICAgICAgIC8vIENsZWFyIEZpbHRlcmluZ1xuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZEFQSS5jbGVhcl9maWx0ZXIocmVjb3JkLml0ZW0uZmllbGQpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2xlYXIgU29ydGluZ1xuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZEFQSS5jbGVhcl9zb3J0KHJlY29yZC5pdGVtLmZpZWxkKTtcbiAgICAgICAgICAgICAgICByZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLnJlc2V0Q2FjaGVzKCk7XG5cbiAgICAgICAgICAgIGlmIChhZGRlZCB8fCByZW1vdmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdW1tYXJ5U2VydmljZS5jbGVhclN1bW1hcnlDYWNoZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlR3JpZFNpemVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGNhbGN1bGF0ZUdyaWRTaXplcygpIHtcbiAgICAgICAgLypcbiAgICAgICAgICAgIFRPRE86IChSLksuKSBUaGlzIGxheWVyZWQgbGFzYWduZSBzaG91bGQgYmUgcmVmYWN0b3JlZFxuICAgICAgICAgICAgQVNBUC4gVGhlIHJlYXNvbiBJIGhhdmUgdG8gcmVzZXQgdGhlIGNhY2hlcyBzbyBtYW55IHRpbWVzIGlzIGJlY2F1c2VcbiAgICAgICAgICAgIGFmdGVyIHRlYWNoIGBkZXRlY3RDaGFuZ2VzYCBjYWxsIHRoZXkgYXJlIGZpbGxlZCB3aXRoIGludmFsaWRcbiAgICAgICAgICAgIHN0YXRlLiBPZiBjb3Vyc2UgYWxsIG9mIHRoaXMgaGFwcGVucyBtaWR3YXkgdGhyb3VnaCB0aGUgZ3JpZFxuICAgICAgICAgICAgc2l6aW5nIHByb2Nlc3Mgd2hpY2ggb2YgY291cnNlLCB1c2VzIHZhbHVlcyBmcm9tIHRoZSBjYWNoZXMsIHRodXMgcmVzdWx0aW5nXG4gICAgICAgICAgICBpbiBhIGJyb2tlbiBsYXlvdXQuXG4gICAgICAgICovXG4gICAgICAgIHRoaXMucmVzZXRDYWNoZXMoKTtcbiAgICAgICAgY29uc3QgaGFzU2Nyb2xsID0gdGhpcy5oYXNWZXJ0aWNhbFNyb2xsKCk7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlR3JpZFdpZHRoKCk7XG4gICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgdGhpcy5yZXNldENhY2hlcygpO1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZUdyaWRIZWlnaHQoKTtcblxuICAgICAgICBpZiAodGhpcy5yb3dFZGl0YWJsZSkge1xuICAgICAgICAgICAgdGhpcy5yZXBvc2l0aW9uUm93RWRpdGluZ092ZXJsYXkodGhpcy5yb3dJbkVkaXRNb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgdGhpcy5yZXNldENhY2hlcygpO1xuICAgICAgICAvLyBpbiBjYXNlIHNjcm9sbGJhciBoYXMgYXBwZWFyZWQgcmVjYWxjIHRvIHNpemUgY29ycmVjdGx5LlxuICAgICAgICBpZiAoaGFzU2Nyb2xsICE9PSB0aGlzLmhhc1ZlcnRpY2FsU3JvbGwoKSkge1xuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVHcmlkV2lkdGgoKTtcbiAgICAgICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgICAgIHRoaXMucmVzZXRDYWNoZXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBHZXRzIHRoZSBjb21iaW5lZCB3aWR0aCBvZiB0aGUgY29sdW1ucyB0aGF0IGFyZSBzcGVjaWZpYyB0byB0aGUgZW5hYmxlZCBncmlkIGZlYXR1cmVzLiBUaGV5IGFyZSBmaXhlZC5cbiAgICAgKiBNZXRob2QgdXNlZCB0byBvdmVycmlkZSB0aGUgY2FsY3VsYXRpb25zLlxuICAgICAqIFRPRE86IFJlbW92ZSBmb3IgQW5ndWxhciA4LiBDYWxsaW5nIHBhcmVudCBjbGFzcyBnZXR0ZXIgdXNpbmcgc3VwZXIgaXMgbm90IHN1cHBvcnRlZCBmb3Igbm93LlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRGZWF0dXJlQ29sdW1uc1dpZHRoKCkge1xuICAgICAgICBsZXQgd2lkdGggPSAwO1xuXG4gICAgICAgIGlmICh0aGlzLmhlYWRlckNoZWNrYm94Q29udGFpbmVyKSB7XG4gICAgICAgICAgICB3aWR0aCArPSB0aGlzLmhlYWRlckNoZWNrYm94Q29udGFpbmVyLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGVhZGVyRHJhZ0NvbnRhaW5lcikge1xuICAgICAgICAgICAgd2lkdGggKz0gdGhpcy5oZWFkZXJEcmFnQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdpZHRoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgY2FsY3VsYXRlZCB3aWR0aCBvZiB0aGUgcGlubmVkIGFyZWEuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHBpbm5lZFdpZHRoID0gdGhpcy5ncmlkLmdldFBpbm5lZFdpZHRoKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHRha2VIaWRkZW4gSWYgd2Ugc2hvdWxkIHRha2UgaW50byBhY2NvdW50IHRoZSBoaWRkZW4gY29sdW1ucyBpbiB0aGUgcGlubmVkIGFyZWEuXG4gICAgICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIGdldFBpbm5lZFdpZHRoKHRha2VIaWRkZW4gPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBmYyA9IHRha2VIaWRkZW4gPyB0aGlzLl9waW5uZWRDb2x1bW5zIDogdGhpcy5waW5uZWRDb2x1bW5zO1xuICAgICAgICBsZXQgc3VtID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBjb2wgb2YgZmMpIHtcbiAgICAgICAgICAgIGlmIChjb2wubGV2ZWwgPT09IDApIHtcbiAgICAgICAgICAgICAgICBzdW0gKz0gcGFyc2VJbnQoY29sLndpZHRoLCAxMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3VtICs9IHRoaXMuZmVhdHVyZUNvbHVtbnNXaWR0aDtcblxuICAgICAgICByZXR1cm4gc3VtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBHZXRzIGNhbGN1bGF0ZWQgd2lkdGggb2YgdGhlIHVucGlubmVkIGFyZWFcbiAgICAgKiBAcGFyYW0gdGFrZUhpZGRlbiBJZiB3ZSBzaG91bGQgdGFrZSBpbnRvIGFjY291bnQgdGhlIGhpZGRlbiBjb2x1bW5zIGluIHRoZSBwaW5uZWQgYXJlYS5cbiAgICAgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0VW5waW5uZWRXaWR0aCh0YWtlSGlkZGVuID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IHdpZHRoID0gdGhpcy5pc1BlcmNlbnRXaWR0aCA/XG4gICAgICAgICAgICB0aGlzLmNhbGNXaWR0aCA6XG4gICAgICAgICAgICBwYXJzZUludCh0aGlzLl93aWR0aCwgMTApO1xuICAgICAgICBpZiAodGhpcy5oYXNWZXJ0aWNhbFNyb2xsKCkgJiYgIXRoaXMuaXNQZXJjZW50V2lkdGgpIHtcbiAgICAgICAgICAgIHdpZHRoIC09IHRoaXMuc2Nyb2xsV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdpZHRoIC0gdGhpcy5nZXRQaW5uZWRXaWR0aCh0YWtlSGlkZGVuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9zdW1tYXJpZXMoZmllbGROYW1lOiBzdHJpbmcsIGhhc1N1bW1hcnk6IGJvb2xlYW4sIHN1bW1hcnlPcGVyYW5kPzogYW55KSB7XG4gICAgICAgIGNvbnN0IGNvbHVtbiA9IHRoaXMuZ3JpZEFQSS5nZXRfY29sdW1uX2J5X25hbWUoZmllbGROYW1lKTtcbiAgICAgICAgaWYgKGNvbHVtbikge1xuICAgICAgICAgICAgY29sdW1uLmhhc1N1bW1hcnkgPSBoYXNTdW1tYXJ5O1xuICAgICAgICAgICAgaWYgKHN1bW1hcnlPcGVyYW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucm9vdFN1bW1hcmllc0VuYWJsZWQpIHsgdGhpcy5zdW1tYXJ5U2VydmljZS5yZXRyaWdnZXJSb290UGlwZSsrOyB9XG4gICAgICAgICAgICAgICAgY29sdW1uLnN1bW1hcmllcyA9IHN1bW1hcnlPcGVyYW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfbXVsdGlwbGVTdW1tYXJpZXMoZXhwcmVzc2lvbnM6IElTdW1tYXJ5RXhwcmVzc2lvbltdLCBoYXNTdW1tYXJ5OiBib29sZWFuKSB7XG4gICAgICAgIGV4cHJlc3Npb25zLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3N1bW1hcmllcyhlbGVtZW50LmZpZWxkTmFtZSwgaGFzU3VtbWFyeSwgZWxlbWVudC5jdXN0b21TdW1tYXJ5KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2Rpc2FibGVNdWx0aXBsZVN1bW1hcmllcyhleHByZXNzaW9ucykge1xuICAgICAgICBleHByZXNzaW9ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbk5hbWUgPSBjb2x1bW4gJiYgY29sdW1uLmZpZWxkTmFtZSA/IGNvbHVtbi5maWVsZE5hbWUgOiBjb2x1bW47XG4gICAgICAgICAgICB0aGlzLl9zdW1tYXJpZXMoY29sdW1uTmFtZSwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHJlc29sdmVEYXRhVHlwZXMocmVjKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVjID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIERhdGFUeXBlLk51bWJlcjtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcmVjID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHJldHVybiBEYXRhVHlwZS5Cb29sZWFuO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByZWMgPT09ICdvYmplY3QnICYmIHJlYyBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBEYXRhVHlwZS5EYXRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBEYXRhVHlwZS5TdHJpbmc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRTY3JvbGxXaWR0aCgpIHtcbiAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZGl2LnN0eWxlO1xuICAgICAgICBzdHlsZS53aWR0aCA9ICcxMDBweCc7XG4gICAgICAgIHN0eWxlLmhlaWdodCA9ICcxMDBweCc7XG4gICAgICAgIHN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgc3R5bGUudG9wID0gJy0xMDAwMHB4JztcbiAgICAgICAgc3R5bGUudG9wID0gJy0xMDAwMHB4JztcbiAgICAgICAgc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpO1xuICAgICAgICBjb25zdCBzY3JvbGxXaWR0aCA9IGRpdi5vZmZzZXRXaWR0aCAtIGRpdi5jbGllbnRXaWR0aDtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkaXYpO1xuICAgICAgICByZXR1cm4gc2Nyb2xsV2lkdGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBhdXRvZ2VuZXJhdGVDb2x1bW5zKCkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5ncmlkQVBJLmdldF9kYXRhKCk7XG4gICAgICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KElneENvbHVtbkNvbXBvbmVudCk7XG4gICAgICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMuZ2VuZXJhdGVEYXRhRmllbGRzKGRhdGEpO1xuICAgICAgICBjb25zdCBjb2x1bW5zID0gW107XG5cbiAgICAgICAgZmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZWYgPSB0aGlzLnZpZXdSZWYuY3JlYXRlQ29tcG9uZW50KGZhY3RvcnksIG51bGwsIHRoaXMudmlld1JlZi5pbmplY3Rvcik7XG4gICAgICAgICAgICByZWYuaW5zdGFuY2UuZmllbGQgPSBmaWVsZDtcbiAgICAgICAgICAgIHJlZi5pbnN0YW5jZS5kYXRhVHlwZSA9IHRoaXMucmVzb2x2ZURhdGFUeXBlcyhkYXRhWzBdW2ZpZWxkXSk7XG4gICAgICAgICAgICByZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICAgICAgY29sdW1ucy5wdXNoKHJlZi5pbnN0YW5jZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuY29sdW1uTGlzdC5yZXNldChjb2x1bW5zKTtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnNob3VsZEdlbmVyYXRlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2VuZXJhdGVEYXRhRmllbGRzKGRhdGE6IGFueVtdKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoZGF0YSAmJiBkYXRhLmxlbmd0aCAhPT0gMCA/IGRhdGFbMF0gOiBbXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9ubHlUb3BMZXZlbChhcnIpIHtcbiAgICAgICAgcmV0dXJuIGFyci5maWx0ZXIoYyA9PiBjLmxldmVsID09PSAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGluaXRDb2x1bW5zKGNvbGxlY3Rpb246IFF1ZXJ5TGlzdDxJZ3hDb2x1bW5Db21wb25lbnQ+LCBjYjogRnVuY3Rpb24gPSBudWxsKSB7XG4gICAgICAgIC8vIFhYWDogRGVwcmVjYXRlIGluZGV4XG4gICAgICAgIHRoaXMuX2NvbHVtbkdyb3VwcyA9IHRoaXMuY29sdW1uTGlzdC5zb21lKGNvbCA9PiBjb2wuY29sdW1uR3JvdXApO1xuICAgICAgICBpZiAodGhpcy5oYXNDb2x1bW5MYXlvdXRzKSB7XG4gICAgICAgICAgICAvLyBTZXQgb3ZlcmFsbCByb3cgbGF5b3V0IHNpemVcbiAgICAgICAgICAgIHRoaXMuY29sdW1uTGlzdC5mb3JFYWNoKChjb2wpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29sLmNvbHVtbkxheW91dCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXlvdXRTaXplID0gY29sLmNoaWxkcmVuID9cbiAgICAgICAgICAgICAgICAgICAgIGNvbC5jaGlsZHJlbi5yZWR1Y2UoKGFjYywgdmFsKSA9PiBNYXRoLm1heCh2YWwucm93U3RhcnQgKyB2YWwuZ3JpZFJvd1NwYW4gLSAxLCBhY2MpLCAxKSA6XG4gICAgICAgICAgICAgICAgICAgICAxO1xuICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbXVsdGlSb3dMYXlvdXRSb3dTaXplID0gTWF0aC5tYXgobGF5b3V0U2l6ZSwgdGhpcy5fbXVsdGlSb3dMYXlvdXRSb3dTaXplKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNDb2x1bW5MYXlvdXRzICYmIHRoaXMuaGFzQ29sdW1uR3JvdXBzKSB7XG4gICAgICAgICAgICAvLyBpbnZhbGlkIGNvbmZpZ3VyYXRpb24gLSBtdWx0aS1yb3cgYW5kIGNvbHVtbiBncm91cHNcbiAgICAgICAgICAgIC8vIHJlbW92ZSBjb2x1bW4gZ3JvdXBzXG4gICAgICAgICAgICBjb25zdCBjb2x1bW5MYXlvdXRDb2x1bW5zID0gdGhpcy5jb2x1bW5MaXN0LmZpbHRlcigoY29sKSA9PiBjb2wuY29sdW1uTGF5b3V0IHx8IChjb2wucGFyZW50ICYmIGNvbC5wYXJlbnQuY29sdW1uTGF5b3V0KSk7XG4gICAgICAgICAgICB0aGlzLmNvbHVtbkxpc3QucmVzZXQoY29sdW1uTGF5b3V0Q29sdW1ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY29sdW1ucyA9IHRoaXMuY29sdW1uTGlzdC50b0FycmF5KCk7XG4gICAgICAgIGNvbGxlY3Rpb24uZm9yRWFjaCgoY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQpID0+IHtcbiAgICAgICAgICAgIGNvbHVtbi5ncmlkID0gdGhpcztcbiAgICAgICAgICAgIGNvbHVtbi5kZWZhdWx0V2lkdGggPSB0aGlzLmNvbHVtbldpZHRoO1xuICAgICAgICAgICAgdGhpcy5zZXRDb2x1bW5FZGl0U3RhdGUoY29sdW1uKTtcblxuICAgICAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICAgICAgY2IoY29sdW1uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5yZWluaXRQaW5TdGF0ZXMoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldENvbHVtbkVkaXRTdGF0ZShjb2x1bW46IElneENvbHVtbkNvbXBvbmVudCkge1xuICAgICAgICAvLyBXaGVuIHJvd0VkaXRhYmxlIGlzIHRydWUsIHRoZW4gYWxsIGNvbHVtbnMsIHdpdGggZGVmaW5lZCBmaWVsZCwgZXhjbHVkaW5nIHByaWFtYXJ5S2V5LCBhcmUgc2V0IHRvIGVkaXRhYmxlIGJ5IGRlZmF1bHQuXG4gICAgICAgIGlmICh0aGlzLnJvd0VkaXRhYmxlICYmIGNvbHVtbi5lZGl0YWJsZSA9PT0gbnVsbCAmJlxuICAgICAgICAgICAgY29sdW1uLmZpZWxkICYmIGNvbHVtbi5maWVsZCAhPT0gdGhpcy5wcmltYXJ5S2V5KSB7XG4gICAgICAgICAgICBjb2x1bW4uZWRpdGFibGUgPSB0aGlzLnJvd0VkaXRhYmxlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCByZWluaXRQaW5TdGF0ZXMoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc0NvbHVtbkdyb3Vwcykge1xuICAgICAgICAgICAgdGhpcy5fcGlubmVkQ29sdW1ucyA9IHRoaXMuY29sdW1uTGlzdC5maWx0ZXIoKGMpID0+IGMucGlubmVkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91bnBpbm5lZENvbHVtbnMgPSB0aGlzLmNvbHVtbkxpc3QuZmlsdGVyKChjKSA9PiAhYy5waW5uZWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgaXNDb2x1bW5Hcm91cGVkKGZpZWxkTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIG9uSGVhZGVyQ2hlY2tib3hDbGljayhldmVudCwgZmlsdGVyZWREYXRhKSB7XG4gICAgICAgIHRoaXMuYWxsUm93c1NlbGVjdGVkID0gZXZlbnQuY2hlY2tlZDtcbiAgICAgICAgY29uc3QgbmV3U2VsZWN0aW9uID1cbiAgICAgICAgICAgIGV2ZW50LmNoZWNrZWQgP1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkRGF0YSA/XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uLmFkZF9pdGVtcyh0aGlzLmlkLCB0aGlzLnNlbGVjdGlvbi5nZXRfYWxsX2lkcyhmaWx0ZXJlZERhdGEsIHRoaXMucHJpbWFyeUtleSkpIDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb24uZ2V0X2FsbF9pZHModGhpcy5ncmlkQVBJLmdldF9hbGxfZGF0YSh0cnVlKSwgdGhpcy5wcmltYXJ5S2V5KSA6XG4gICAgICAgICAgICAgICAgZmlsdGVyZWREYXRhID9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb24uZGVsZXRlX2l0ZW1zKHRoaXMuaWQsIHRoaXMuc2VsZWN0aW9uLmdldF9hbGxfaWRzKGZpbHRlcmVkRGF0YSwgdGhpcy5wcmltYXJ5S2V5KSkgOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbi5nZXRfZW1wdHkoKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyUm93U2VsZWN0aW9uQ2hhbmdlKG5ld1NlbGVjdGlvbiwgbnVsbCwgZXZlbnQsIGV2ZW50LmNoZWNrZWQpO1xuICAgICAgICB0aGlzLmNoZWNrSGVhZGVyQ2hlY2tib3hTdGF0dXMoZXZlbnQuY2hlY2tlZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGdldCBoZWFkZXJDaGVja2JveEFyaWFMYWJlbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZS5maWx0ZXJpbmdPcGVyYW5kcy5sZW5ndGggPiAwID9cbiAgICAgICAgICAgIHRoaXMuaGVhZGVyQ2hlY2tib3ggJiYgdGhpcy5oZWFkZXJDaGVja2JveC5jaGVja2VkID8gJ0Rlc2VsZWN0IGFsbCBmaWx0ZXJlZCcgOiAnU2VsZWN0IGFsbCBmaWx0ZXJlZCcgOlxuICAgICAgICAgICAgdGhpcy5oZWFkZXJDaGVja2JveCAmJiB0aGlzLmhlYWRlckNoZWNrYm94LmNoZWNrZWQgPyAnRGVzZWxlY3QgYWxsJyA6ICdTZWxlY3QgYWxsJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGNoZWNrSGVhZGVyQ2hlY2tib3hTdGF0dXMoaGVhZGVyU3RhdHVzPzogYm9vbGVhbikge1xuICAgICAgICBpZiAoaGVhZGVyU3RhdHVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkRGF0YSA9IHRoaXMuZmlsdGVyaW5nU2VydmljZS5maWx0ZXJlZERhdGE7XG4gICAgICAgICAgICBjb25zdCBkYXRhTGVuZ3RoID0gZmlsdGVyZWREYXRhID8gZmlsdGVyZWREYXRhLmxlbmd0aCA6IHRoaXMuZGF0YUxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuYWxsUm93c1NlbGVjdGVkID0gdGhpcy5zZWxlY3Rpb24uYXJlX2FsbF9zZWxlY3RlZCh0aGlzLmlkLCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhlYWRlckNoZWNrYm94KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJDaGVja2JveC5pbmRldGVybWluYXRlID0gIXRoaXMuYWxsUm93c1NlbGVjdGVkICYmICF0aGlzLnNlbGVjdGlvbi5hcmVfbm9uZV9zZWxlY3RlZCh0aGlzLmlkKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaGVhZGVyQ2hlY2tib3guaW5kZXRlcm1pbmF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhlYWRlckNoZWNrYm94LmNoZWNrZWQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGxSb3dzU2VsZWN0ZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5oZWFkZXJDaGVja2JveCkge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJDaGVja2JveC5jaGVja2VkID0gaGVhZGVyU3RhdHVzICE9PSB1bmRlZmluZWQgPyBoZWFkZXJTdGF0dXMgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZmlsdGVyZWRJdGVtc1N0YXR1cyhjb21wb25lbnRJRDogc3RyaW5nLCBmaWx0ZXJlZERhdGE6IGFueVtdLCBwcmltYXJ5S2V5Pykge1xuICAgICAgICBjb25zdCBjdXJyU2VsZWN0aW9uID0gdGhpcy5zZWxlY3Rpb24uZ2V0KGNvbXBvbmVudElEKTtcbiAgICAgICAgbGV0IGF0TGVhc3RPbmVTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgbm90QWxsU2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGN1cnJTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGZpbHRlcmVkRGF0YSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhSXRlbSA9IHByaW1hcnlLZXkgPyBmaWx0ZXJlZERhdGFba2V5XVtwcmltYXJ5S2V5XSA6IGZpbHRlcmVkRGF0YVtrZXldO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyU2VsZWN0aW9uLmhhcyhkYXRhSXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXRMZWFzdE9uZVNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vdEFsbFNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2luZGV0ZXJtaW5hdGUnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbm90QWxsU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXRMZWFzdE9uZVNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2luZGV0ZXJtaW5hdGUnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhdExlYXN0T25lU2VsZWN0ZWQgPyAnYWxsU2VsZWN0ZWQnIDogJ25vbmVTZWxlY3RlZCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVIZWFkZXJDaGVja2JveFN0YXR1c09uRmlsdGVyKGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrSGVhZGVyQ2hlY2tib3hTdGF0dXMoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRoaXMuZmlsdGVyZWRJdGVtc1N0YXR1cyh0aGlzLmlkLCBkYXRhLCB0aGlzLnByaW1hcnlLZXkpKSB7XG4gICAgICAgICAgICBjYXNlICdhbGxTZWxlY3RlZCc6IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYWxsUm93c1NlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsUm93c1NlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGVhZGVyQ2hlY2tib3guaW5kZXRlcm1pbmF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhlYWRlckNoZWNrYm94LmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdub25lU2VsZWN0ZWQnOiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWxsUm93c1NlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsUm93c1NlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhlYWRlckNoZWNrYm94LmluZGV0ZXJtaW5hdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJDaGVja2JveC5pbmRldGVybWluYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5oZWFkZXJDaGVja2JveC5pbmRldGVybWluYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyQ2hlY2tib3guaW5kZXRlcm1pbmF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFsbFJvd3NTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFsbFJvd3NTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBjdXJyZW50IHNlbGVjdGlvbiBzdGF0ZS5cbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IHdpdGggc2VsZWN0ZWQgcm93cycgSURzIChwcmltYXJ5S2V5IG9yIHJvd0RhdGEpXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHNlbGVjdGVkUm93cyA9IHRoaXMuZ3JpZC5zZWxlY3RlZFJvd3MoKTtcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIHNlbGVjdGVkUm93cygpOiBhbnlbXSB7XG4gICAgICAgIGxldCBzZWxlY3Rpb246IFNldDxhbnk+O1xuICAgICAgICBzZWxlY3Rpb24gPSB0aGlzLnNlbGVjdGlvbi5nZXQodGhpcy5pZCk7XG4gICAgICAgIHJldHVybiBzZWxlY3Rpb24gPyBBcnJheS5mcm9tKHNlbGVjdGlvbikgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3Qgc3BlY2lmaWVkIHJvd3MgYnkgSUQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuZ3JpZC5zZWxlY3RSb3dzKFsxLDIsNV0sIHRydWUpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSByb3dJRHNcbiAgICAgKiBAcGFyYW0gY2xlYXJDdXJyZW50U2VsZWN0aW9uIGlmIHRydWUgY2xlYXJzIHRoZSBjdXJyZW50IHNlbGVjdGlvblxuICAgICAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBzZWxlY3RSb3dzKHJvd0lEczogYW55W10sIGNsZWFyQ3VycmVudFNlbGVjdGlvbj86IGJvb2xlYW4pIHtcbiAgICAgICAgbGV0IG5ld1NlbGVjdGlvbjogU2V0PGFueT47XG4gICAgICAgIGxldCBzZWxlY3RhYmxlUm93cyA9IFtdO1xuICAgICAgICBpZiAodGhpcy50cmFuc2FjdGlvbnMuZW5hYmxlZCkge1xuICAgICAgICAgICAgc2VsZWN0YWJsZVJvd3MgPSByb3dJRHMuZmlsdGVyKGUgPT4gIXRoaXMuZ3JpZEFQSS5yb3dfZGVsZXRlZF90cmFuc2FjdGlvbihlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxlY3RhYmxlUm93cyA9IHJvd0lEcztcbiAgICAgICAgfVxuICAgICAgICBuZXdTZWxlY3Rpb24gPSB0aGlzLnNlbGVjdGlvbi5hZGRfaXRlbXModGhpcy5pZCwgc2VsZWN0YWJsZVJvd3MsIGNsZWFyQ3VycmVudFNlbGVjdGlvbik7XG4gICAgICAgIHRoaXMudHJpZ2dlclJvd1NlbGVjdGlvbkNoYW5nZShuZXdTZWxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc2VsZWN0IHNwZWNpZmllZCByb3dzIGJ5IElELlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmdyaWQuZGVzZWxlY3RSb3dzKFsxLDIsNV0pO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSByb3dJRHNcbiAgICAgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgZGVzZWxlY3RSb3dzKHJvd0lEczogYW55W10pIHtcbiAgICAgICAgbGV0IG5ld1NlbGVjdGlvbjogU2V0PGFueT47XG4gICAgICAgIG5ld1NlbGVjdGlvbiA9IHRoaXMuc2VsZWN0aW9uLmRlbGV0ZV9pdGVtcyh0aGlzLmlkLCByb3dJRHMpO1xuICAgICAgICB0aGlzLnRyaWdnZXJSb3dTZWxlY3Rpb25DaGFuZ2UobmV3U2VsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3RzIGFsbCByb3dzXG4gICAgICogTm90ZTogSWYgZmlsdGVyaW5nIGlzIGluIHBsYWNlLCBzZWxlY3RBbGxSb3dzKCkgYW5kIGRlc2VsZWN0QWxsUm93cygpIHNlbGVjdC9kZXNlbGVjdCBhbGwgZmlsdGVyZWQgcm93cy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5ncmlkLnNlbGVjdEFsbFJvd3MoKTtcbiAgICAgKiBgYGBcblx0ICogQG1lbWJlcm9mIElneEdyaWRCYXNlQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIHNlbGVjdEFsbFJvd3MoKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlclJvd1NlbGVjdGlvbkNoYW5nZSh0aGlzLnNlbGVjdGlvbi5nZXRfYWxsX2lkcyh0aGlzLmdyaWRBUEkuZ2V0X2FsbF9kYXRhKHRydWUpLCB0aGlzLnByaW1hcnlLZXkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXNlbGVjdHMgYWxsIHJvd3NcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5ncmlkLmRlc2VsZWN0QWxsUm93cygpO1xuICAgICAqIGBgYFxuICAgICAqIE5vdGU6IElmIGZpbHRlcmluZyBpcyBpbiBwbGFjZSwgc2VsZWN0QWxsUm93cygpIGFuZCBkZXNlbGVjdEFsbFJvd3MoKSBzZWxlY3QvZGVzZWxlY3QgYWxsIGZpbHRlcmVkIHJvd3MuXG4gICAgICovXG4gICAgcHVibGljIGRlc2VsZWN0QWxsUm93cygpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyUm93U2VsZWN0aW9uQ2hhbmdlKHRoaXMuc2VsZWN0aW9uLmdldF9lbXB0eSgpKTtcbiAgICB9XG5cbiAgICBjbGVhckNlbGxTZWxlY3Rpb24oKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZS5jbGVhcigpO1xuICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UuYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cblxuICAgIGRyYWdTY3JvbGwoZGlyOiBEcmFnU2Nyb2xsRGlyZWN0aW9uKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHNjcm9sbERlbHRhID0gNDg7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWwgPSB0aGlzLnBhcmVudFZpcnREaXIuZ2V0SG9yaXpvbnRhbFNjcm9sbCgpO1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IHRoaXMudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0VmVydGljYWxTY3JvbGwoKTtcbiAgICAgICAgc3dpdGNoIChkaXIpIHtcbiAgICAgICAgICAgIGNhc2UgRHJhZ1Njcm9sbERpcmVjdGlvbi5MRUZUOlxuICAgICAgICAgICAgICAgIGhvcml6b250YWwuc2Nyb2xsTGVmdCAtPSBzY3JvbGxEZWx0YTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRHJhZ1Njcm9sbERpcmVjdGlvbi5SSUdIVDpcbiAgICAgICAgICAgICAgICBob3Jpem9udGFsLnNjcm9sbExlZnQgKz0gc2Nyb2xsRGVsdGE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERyYWdTY3JvbGxEaXJlY3Rpb24uVE9QOlxuICAgICAgICAgICAgICAgIHZlcnRpY2FsLnNjcm9sbFRvcCAtPSBzY3JvbGxEZWx0YTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRHJhZ1Njcm9sbERpcmVjdGlvbi5CT1RUT006XG4gICAgICAgICAgICAgICAgdmVydGljYWwuc2Nyb2xsVG9wICs9IHNjcm9sbERlbHRhO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEcmFnU2Nyb2xsRGlyZWN0aW9uLkJPVFRPTUxFRlQ6XG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbC5zY3JvbGxMZWZ0IC09IHNjcm9sbERlbHRhO1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsLnNjcm9sbFRvcCArPSBzY3JvbGxEZWx0YTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRHJhZ1Njcm9sbERpcmVjdGlvbi5CT1RUT01SSUdIVDpcbiAgICAgICAgICAgICAgICBob3Jpem9udGFsLnNjcm9sbExlZnQgKz0gc2Nyb2xsRGVsdGE7XG4gICAgICAgICAgICAgICAgdmVydGljYWwuc2Nyb2xsVG9wICs9IHNjcm9sbERlbHRhO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEcmFnU2Nyb2xsRGlyZWN0aW9uLlRPUExFRlQ6XG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbC5zY3JvbGxMZWZ0IC09IHNjcm9sbERlbHRhO1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsLnNjcm9sbFRvcCAtPSBzY3JvbGxEZWx0YTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRHJhZ1Njcm9sbERpcmVjdGlvbi5UT1BSSUdIVDpcbiAgICAgICAgICAgICAgICBob3Jpem9udGFsLnNjcm9sbExlZnQgKz0gc2Nyb2xsRGVsdGE7XG4gICAgICAgICAgICAgICAgdmVydGljYWwuc2Nyb2xsVG9wIC09IHNjcm9sbERlbHRhO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53aGVlbEhhbmRsZXIoKTtcbiAgICB9XG5cbiAgICBpc0RlZmluZWQoYXJnOiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGFyZyAhPT0gdW5kZWZpbmVkICYmIGFyZyAhPT0gbnVsbDtcbiAgICB9XG5cbiAgICBzZWxlY3RSYW5nZShhcmc6IEdyaWRTZWxlY3Rpb25SYW5nZSB8IEdyaWRTZWxlY3Rpb25SYW5nZVtdIHwgbnVsbCB8IHVuZGVmaW5lZCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuaXNEZWZpbmVkKGFyZykpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJDZWxsU2VsZWN0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICBhcmcuZm9yRWFjaChyYW5nZSA9PiB0aGlzLnNldFNlbGVjdGlvbihyYW5nZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3Rpb24oYXJnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICBjb2x1bW5Ub1Zpc2libGVJbmRleChmaWVsZDogc3RyaW5nIHwgbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgdmlzaWJsZUNvbHVtbnMgPSB0aGlzLnZpc2libGVDb2x1bW5zO1xuICAgICAgICBpZiAodHlwZW9mIGZpZWxkID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2aXNpYmxlQ29sdW1ucy5maW5kKGNvbHVtbiA9PiBjb2x1bW4uZmllbGQgPT09IGZpZWxkKS52aXNpYmxlSW5kZXg7XG4gICAgfVxuXG5cbiAgICBzZXRTZWxlY3Rpb24ocmFuZ2U6IEdyaWRTZWxlY3Rpb25SYW5nZSk6IHZvaWQge1xuICAgICAgICBjb25zdCBzdGFydE5vZGUgPSAgeyByb3c6IHJhbmdlLnJvd1N0YXJ0LCBjb2x1bW46IHRoaXMuY29sdW1uVG9WaXNpYmxlSW5kZXgocmFuZ2UuY29sdW1uU3RhcnQpIH07XG4gICAgICAgIGNvbnN0IGVuZE5vZGUgPSAgeyByb3c6IHJhbmdlLnJvd0VuZCwgY29sdW1uOiB0aGlzLmNvbHVtblRvVmlzaWJsZUluZGV4KHJhbmdlLmNvbHVtbkVuZCkgfTtcblxuICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UucG9pbnRlclN0YXRlLm5vZGUgPSBzdGFydE5vZGU7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZS5zZWxlY3RSYW5nZShlbmROb2RlLCB0aGlzLnNlbGVjdGlvblNlcnZpY2UucG9pbnRlclN0YXRlKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmFkZFJhbmdlTWV0YShlbmROb2RlLCB0aGlzLnNlbGVjdGlvblNlcnZpY2UucG9pbnRlclN0YXRlKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmluaXRQb2ludGVyU3RhdGUoKTtcbiAgICB9XG5cbiAgICBnZXRTZWxlY3RlZFJhbmdlcygpOiBHcmlkU2VsZWN0aW9uUmFuZ2VbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvblNlcnZpY2UucmFuZ2VzO1xuICAgIH1cblxuICAgIGV4dHJhY3REYXRhRnJvbVNlbGVjdGlvbihzb3VyY2U6IGFueVtdKTogYW55W10ge1xuICAgICAgICBsZXQgY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQ7XG4gICAgICAgIGxldCByZWNvcmQgPSB7fTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWREYXRhID0gW107XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uTWFwID0gQXJyYXkuZnJvbSh0aGlzLnNlbGVjdGlvblNlcnZpY2Uuc2VsZWN0aW9uKVxuICAgICAgICAgICAgLmZpbHRlcigodHVwbGUpID0+IHR1cGxlWzBdIDwgc291cmNlLmxlbmd0aCk7XG5cbiAgICAgICAgY29uc3QgdmlzaWJsZUNvbHVtbnMgPSB0aGlzLnZpc2libGVDb2x1bW5zXG4gICAgICAgICAgICAuZmlsdGVyKGNvbCA9PiAhY29sLmNvbHVtbkdyb3VwKVxuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEudmlzaWJsZUluZGV4IC0gYi52aXNpYmxlSW5kZXgpO1xuXG5cbiAgICAgICAgZm9yIChjb25zdCBbcm93LCBzZXRdIG9mIHNlbGVjdGlvbk1hcCkge1xuICAgICAgICAgICAgaWYgKCFzb3VyY2Vbcm93XSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGVtcCA9IEFycmF5LmZyb20oc2V0KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZWFjaCBvZiB0ZW1wKSB7XG4gICAgICAgICAgICAgICAgY29sdW1uID0gdmlzaWJsZUNvbHVtbnNbZWFjaF07XG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbikge1xuICAgICAgICAgICAgICAgICAgICByZWNvcmRbY29sdW1uLmZpZWxkXSA9IHNvdXJjZVtyb3ddW2NvbHVtbi5maWVsZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHJlY29yZCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWREYXRhLnB1c2gocmVjb3JkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlY29yZCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxlY3RlZERhdGE7XG4gICAgfVxuXG4gICAgZ2V0U2VsZWN0ZWREYXRhKCkge1xuICAgICAgICBjb25zdCBzb3VyY2UgPSB0aGlzLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmV4dHJhY3REYXRhRnJvbVNlbGVjdGlvbihzb3VyY2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgdHJpZ2dlclJvd1NlbGVjdGlvbkNoYW5nZShuZXdTZWxlY3Rpb25Bc1NldDogU2V0PGFueT4sIHJvdz86IElneFJvd0NvbXBvbmVudDxJZ3hHcmlkQmFzZUNvbXBvbmVudCAmIElHcmlkRGF0YUJpbmRhYmxlPixcbiAgICAgICAgZXZlbnQ/OiBFdmVudCwgaGVhZGVyU3RhdHVzPzogYm9vbGVhbikge1xuICAgICAgICBjb25zdCBvbGRTZWxlY3Rpb25Bc1NldCA9IHRoaXMuc2VsZWN0aW9uLmdldCh0aGlzLmlkKTtcbiAgICAgICAgY29uc3Qgb2xkU2VsZWN0aW9uID0gb2xkU2VsZWN0aW9uQXNTZXQgPyBBcnJheS5mcm9tKG9sZFNlbGVjdGlvbkFzU2V0KSA6IFtdO1xuICAgICAgICBjb25zdCBuZXdTZWxlY3Rpb24gPSBuZXdTZWxlY3Rpb25Bc1NldCA/IEFycmF5LmZyb20obmV3U2VsZWN0aW9uQXNTZXQpIDogW107XG4gICAgICAgIGNvbnN0IGFyZ3M6IElSb3dTZWxlY3Rpb25FdmVudEFyZ3MgPSB7IG9sZFNlbGVjdGlvbiwgbmV3U2VsZWN0aW9uLCByb3csIGV2ZW50IH07XG4gICAgICAgIHRoaXMub25Sb3dTZWxlY3Rpb25DaGFuZ2UuZW1pdChhcmdzKTtcbiAgICAgICAgbmV3U2VsZWN0aW9uQXNTZXQgPSB0aGlzLnNlbGVjdGlvbi5nZXRfZW1wdHkoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLm5ld1NlbGVjdGlvbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbmV3U2VsZWN0aW9uQXNTZXQuYWRkKGFyZ3MubmV3U2VsZWN0aW9uW2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdGlvbi5zZXQodGhpcy5pZCwgbmV3U2VsZWN0aW9uQXNTZXQpO1xuICAgICAgICB0aGlzLmNoZWNrSGVhZGVyQ2hlY2tib3hTdGF0dXMoaGVhZGVyU3RhdHVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgLy8gQEhvc3RMaXN0ZW5lcignc2Nyb2xsJywgWyckZXZlbnQnXSlcbiAgICBwdWJsaWMgc2Nyb2xsSGFuZGxlcihldmVudCkge1xuICAgICAgICB0aGlzLnBhcmVudFZpcnREaXIuZ2V0SG9yaXpvbnRhbFNjcm9sbCgpLnNjcm9sbExlZnQgKz0gZXZlbnQudGFyZ2V0LnNjcm9sbExlZnQ7XG4gICAgICAgIHRoaXMudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0VmVydGljYWxTY3JvbGwoKS5zY3JvbGxUb3AgKz0gZXZlbnQudGFyZ2V0LnNjcm9sbFRvcDtcbiAgICAgICAgZXZlbnQudGFyZ2V0LnNjcm9sbExlZnQgPSAwO1xuICAgICAgICBldmVudC50YXJnZXQuc2Nyb2xsVG9wID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBhbGxvd3MgeW91IHRvIG5hdmlnYXRlIHRvIGEgcG9zaXRpb25cbiAgICAgKiBpbiB0aGUgZ3JpZCBiYXNlZCBvbiBwcm92aWRlZCBgcm93aW5kZXhgIGFuZCBgdmlzaWJsZUNvbHVtbkluZGV4YCxcbiAgICAgKiBhbHNvIHRvIGV4ZWN1dGUgYSBjdXN0b20gbG9naWMgb3ZlciB0aGUgdGFyZ2V0IGVsZW1lbnQsXG4gICAgICogdGhyb3VnaCBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB7IHRhcmdldFR5cGU6IEdyaWRLZXlkb3duVGFyZ2V0VHlwZSwgdGFyZ2V0OiBPYmplY3QgfVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgdGhpcy5ncmlkLm5hdmlnYXRlVG8oMTAsIDMsIChhcmdzKSA9PiB7IGFyZ3MudGFyZ2V0Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTsgfSk7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBuYXZpZ2F0ZVRvKHJvd0luZGV4OiBudW1iZXIsIHZpc2libGVDb2xJbmRleCA9IC0xLCBjYjogRnVuY3Rpb24gPSBudWxsKSB7XG4gICAgICAgIGlmIChyb3dJbmRleCA8IDAgfHwgcm93SW5kZXggPiB0aGlzLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mLmxlbmd0aCAtIDFcbiAgICAgICAgICAgIHx8ICAodmlzaWJsZUNvbEluZGV4ICE9PSAtMSAmJiB0aGlzLmNvbHVtbkxpc3QubWFwKGNvbCA9PiBjb2wudmlzaWJsZUluZGV4KS5pbmRleE9mKHZpc2libGVDb2xJbmRleCkgPT09IC0xKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2hlZWxIYW5kbGVyKCk7XG4gICAgICAgIGlmICh0aGlzLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mLnNsaWNlKHJvd0luZGV4LCByb3dJbmRleCArIDEpLmZpbmQocmVjID0+IHJlYy5leHByZXNzaW9uIHx8IHJlYy5jaGlsZEdyaWRzRGF0YSkpIHtcbiAgICAgICAgICAgIHZpc2libGVDb2xJbmRleCA9IC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aXNpYmxlQ29sSW5kZXggPT09IC0xIHx8ICh0aGlzLm5hdmlnYXRpb24uaXNDb2x1bW5GdWxseVZpc2libGUodmlzaWJsZUNvbEluZGV4KVxuICAgICAgICAgICAgJiYgdGhpcy5uYXZpZ2F0aW9uLmlzQ29sdW1uTGVmdEZ1bGx5VmlzaWJsZSh2aXNpYmxlQ29sSW5kZXgpKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubmF2aWdhdGlvbi5zaG91bGRQZXJmb3JtVmVydGljYWxTY3JvbGwocm93SW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5zY3JvbGxUbyhyb3dJbmRleCk7XG4gICAgICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5vbkNodW5rTG9hZFxuICAgICAgICAgICAgICAgIC5waXBlKGZpcnN0KCkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXhlY3V0ZUNhbGxiYWNrKHJvd0luZGV4LCB2aXNpYmxlQ29sSW5kZXgsIGNiKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5leGVjdXRlQ2FsbGJhY2socm93SW5kZXgsIHZpc2libGVDb2xJbmRleCwgY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdW5waW5uZWRJbmRleCA9IHRoaXMubmF2aWdhdGlvbi5nZXRDb2x1bW5VbnBpbm5lZEluZGV4KHZpc2libGVDb2xJbmRleCk7XG4gICAgICAgICAgICB0aGlzLnBhcmVudFZpcnREaXIub25DaHVua0xvYWRcbiAgICAgICAgICAgICAgICAucGlwZShmaXJzdCgpKVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm5hdmlnYXRpb24uc2hvdWxkUGVyZm9ybVZlcnRpY2FsU2Nyb2xsKHJvd0luZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnNjcm9sbFRvKHJvd0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5vbkNodW5rTG9hZFxuICAgICAgICAgICAgICAgICAgICAucGlwZShmaXJzdCgpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leGVjdXRlQ2FsbGJhY2socm93SW5kZXgsIHZpc2libGVDb2xJbmRleCwgY2IpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV4ZWN1dGVDYWxsYmFjayhyb3dJbmRleCwgdmlzaWJsZUNvbEluZGV4LCBjYik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGlvbi5ob3Jpem9udGFsU2Nyb2xsKHJvd0luZGV4KS5zY3JvbGxUbyh1bnBpbm5lZEluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICAvKipcbiAgICAgKiBSZXR1cm5zIGBJQ2VsbFBvc2l0aW9uYCB3aGljaCBkZWZpbmVzIHRoZSBuZXh0IGNlbGwsXG4gICAgICogYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBvc2l0aW9uLCB0aGF0IG1hdGNoIHNwZWNpZmljIGNyaXRlcmlhLlxuICAgICAqIFlvdSBjYW4gcGFzcyBjYWxsYmFjayBmdW5jdGlvbiBhcyBhIHRoaXJkIHBhcmFtZXRlciBvZiBgZ2V0UHJldmlvdXNDZWxsYCBtZXRob2QuXG4gICAgICogVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGFjY2VwdHMgSWd4Q29sdW1uQ29tcG9uZW50IGFzIGEgcGFyYW1cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogIGNvbnN0IG5leHRFZGl0YWJsZUNlbGxQb3NpdGlvbiA9IHRoaXMuZ3JpZC5nZXROZXh0Q2VsbCgwLCAzLCAoY29sdW1uKSA9PiBjb2x1bW4uZWRpdGFibGUpO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TmV4dENlbGwoY3VyclJvd0luZGV4OiBudW1iZXIsIGN1clZpc2libGVDb2xJbmRleDogbnVtYmVyLFxuICAgICAgICAgICAgY2FsbGJhY2s6IChJZ3hDb2x1bW5Db21wb25lbnQpID0+IGJvb2xlYW4gPSBudWxsKTogSUNlbGxQb3NpdGlvbiB7XG4gICAgICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLmNvbHVtbkxpc3QuZmlsdGVyKGNvbCA9PiAhY29sLmNvbHVtbkdyb3VwICYmIGNvbC52aXNpYmxlSW5kZXggPj0gMCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRQb3NpdGlvbihjdXJyUm93SW5kZXgsIGN1clZpc2libGVDb2xJbmRleCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7cm93SW5kZXg6IGN1cnJSb3dJbmRleCwgdmlzaWJsZUNvbHVtbkluZGV4OiBjdXJWaXNpYmxlQ29sSW5kZXh9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbEluZGV4ZXMgPSBjYWxsYmFjayA/IGNvbHVtbnMuZmlsdGVyKChjb2wpID0+IGNhbGxiYWNrKGNvbCkpLm1hcChlZGl0Q29sID0+IGVkaXRDb2wudmlzaWJsZUluZGV4KS5zb3J0KChhLCBiKSA9PiBhIC0gYikgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zLm1hcChlZGl0Q29sID0+IGVkaXRDb2wudmlzaWJsZUluZGV4KS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gICAgICAgIGNvbnN0IG5leHRDZWxsSW5kZXggPSBjb2xJbmRleGVzLmZpbmQoaW5kZXggPT4gaW5kZXggPiBjdXJWaXNpYmxlQ29sSW5kZXgpO1xuICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5pZ3hGb3JPZi5zbGljZShjdXJyUm93SW5kZXgsIGN1cnJSb3dJbmRleCArIDEpXG4gICAgICAgICAgICAgICAgLmZpbmQocmVjID0+ICFyZWMuZXhwcmVzc2lvbiAmJiAhcmVjLnN1bW1hcmllcyAmJiAhcmVjLmNoaWxkR3JpZHNEYXRhKSAmJiBuZXh0Q2VsbEluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7cm93SW5kZXg6IGN1cnJSb3dJbmRleCwgdmlzaWJsZUNvbHVtbkluZGV4OiBuZXh0Q2VsbEluZGV4fTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjb2xJbmRleGVzLmxlbmd0aCA9PT0gMCB8fCB0aGlzLmdldE5leHREYXRhUm93SW5kZXgoY3VyclJvd0luZGV4KSA9PT0gY3VyclJvd0luZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtyb3dJbmRleDogY3VyclJvd0luZGV4LCB2aXNpYmxlQ29sdW1uSW5kZXg6IGN1clZpc2libGVDb2xJbmRleH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB7cm93SW5kZXg6IHRoaXMuZ2V0TmV4dERhdGFSb3dJbmRleChjdXJyUm93SW5kZXgpLCB2aXNpYmxlQ29sdW1uSW5kZXg6IGNvbEluZGV4ZXNbMF19O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgIC8qKlxuICAgICAqIFJldHVybnMgYElDZWxsUG9zaXRpb25gIHdoaWNoIGRlZmluZXMgdGhlIHByZXZpb3VzIGNlbGwsXG4gICAgICogYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBvc2l0aW9uLCB0aGF0IG1hdGNoIHNwZWNpZmljIGNyaXRlcmlhLlxuICAgICAqIFlvdSBjYW4gcGFzcyBjYWxsYmFjayBmdW5jdGlvbiBhcyBhIHRoaXJkIHBhcmFtZXRlciBvZiBgZ2V0UHJldmlvdXNDZWxsYCBtZXRob2QuXG4gICAgICogVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGFjY2VwdHMgSWd4Q29sdW1uQ29tcG9uZW50IGFzIGEgcGFyYW1cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogIGNvbnN0IHByZXZpb3VzRWRpdGFibGVDZWxsUG9zaXRpb24gPSB0aGlzLmdyaWQuZ2V0UHJldmlvdXNDZWxsKDAsIDMsIChjb2x1bW4pID0+IGNvbHVtbi5lZGl0YWJsZSk7XG4gICAgICogYGBgXG5cdCAqIEBtZW1iZXJvZiBJZ3hHcmlkQmFzZUNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQcmV2aW91c0NlbGwoY3VyclJvd0luZGV4OiBudW1iZXIsIGN1clZpc2libGVDb2xJbmRleDogbnVtYmVyLFxuICAgICAgICAgICAgY2FsbGJhY2s6IChJZ3hDb2x1bW5Db21wb25lbnQpID0+IGJvb2xlYW4gPSBudWxsKTogSUNlbGxQb3NpdGlvbiB7XG4gICAgICAgIGNvbnN0IGNvbHVtbnMgPSAgdGhpcy5jb2x1bW5MaXN0LmZpbHRlcihjb2wgPT4gIWNvbC5jb2x1bW5Hcm91cCAmJiBjb2wudmlzaWJsZUluZGV4ID49IDApO1xuXG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkUG9zaXRpb24oY3VyclJvd0luZGV4LCBjdXJWaXNpYmxlQ29sSW5kZXgpKSB7XG4gICAgICAgICAgICByZXR1cm4ge3Jvd0luZGV4OiBjdXJyUm93SW5kZXgsIHZpc2libGVDb2x1bW5JbmRleDogY3VyVmlzaWJsZUNvbEluZGV4fTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb2xJbmRleGVzID0gY2FsbGJhY2sgPyBjb2x1bW5zLmZpbHRlcigoY29sKSA9PiBjYWxsYmFjayhjb2wpKS5tYXAoZWRpdENvbCA9PiBlZGl0Q29sLnZpc2libGVJbmRleCkuc29ydCgoYSwgYikgPT4gYiAtIGEpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1ucy5tYXAoZWRpdENvbCA9PiBlZGl0Q29sLnZpc2libGVJbmRleCkuc29ydCgoYSwgYikgPT4gYiAtIGEpO1xuICAgICAgICBjb25zdCBwcmV2Q2VsbEluZGV4ID0gY29sSW5kZXhlcy5maW5kKGluZGV4ID0+IGluZGV4IDwgY3VyVmlzaWJsZUNvbEluZGV4KTtcbiAgICAgICAgaWYgKHRoaXMudmVydGljYWxTY3JvbGxDb250YWluZXIuaWd4Rm9yT2Yuc2xpY2UoY3VyclJvd0luZGV4LCBjdXJyUm93SW5kZXggKyAxKVxuICAgICAgICAgICAgICAgIC5maW5kKHJlYyA9PiAhcmVjLmV4cHJlc3Npb24gJiYgIXJlYy5zdW1tYXJpZXMgJiYgIXJlYy5jaGlsZEdyaWRzRGF0YSkgJiYgcHJldkNlbGxJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4ge3Jvd0luZGV4OiBjdXJyUm93SW5kZXgsIHZpc2libGVDb2x1bW5JbmRleDogcHJldkNlbGxJbmRleH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY29sSW5kZXhlcy5sZW5ndGggPT09IDAgfHwgdGhpcy5nZXRQcmV2RGF0YVJvd0luZGV4KGN1cnJSb3dJbmRleCkgPT09IGN1cnJSb3dJbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7cm93SW5kZXg6IGN1cnJSb3dJbmRleCwgdmlzaWJsZUNvbHVtbkluZGV4OiBjdXJWaXNpYmxlQ29sSW5kZXh9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge3Jvd0luZGV4OiB0aGlzLmdldFByZXZEYXRhUm93SW5kZXgoY3VyclJvd0luZGV4KSwgdmlzaWJsZUNvbHVtbkluZGV4OiBjb2xJbmRleGVzWzBdfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZXhlY3V0ZUNhbGxiYWNrKHJvd0luZGV4LCB2aXNpYmxlQ29sSW5kZXggPSAtMSwgY2I6IEZ1bmN0aW9uID0gbnVsbCkge1xuICAgICAgICBpZiAoIWNiKSB7IHJldHVybjsgfVxuICAgICAgICBsZXQgdGFyZ2V0VHlwZSwgdGFyZ2V0O1xuICAgICAgICBjb25zdCByb3cgPSAgdGhpcy5zdW1tYXJpZXNSb3dMaXN0LmZpbHRlcihzID0+IHMuaW5kZXggIT09IDApLmNvbmNhdCh0aGlzLnJvd0xpc3QudG9BcnJheSgpKS5maW5kKHIgPT4gci5pbmRleCA9PT0gcm93SW5kZXgpO1xuICAgICAgICBpZiAoIXJvdykgeyByZXR1cm47IH1cbiAgICAgICAgc3dpdGNoIChyb3cubmF0aXZlRWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2lneC1ncmlkLWdyb3VwYnktcm93JzpcbiAgICAgICAgICAgICAgICB0YXJnZXRUeXBlID0gR3JpZEtleWRvd25UYXJnZXRUeXBlLmdyb3VwUm93O1xuICAgICAgICAgICAgICAgIHRhcmdldCA9IHJvdztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lneC1ncmlkLXN1bW1hcnktcm93JzpcbiAgICAgICAgICAgICAgICB0YXJnZXRUeXBlID0gR3JpZEtleWRvd25UYXJnZXRUeXBlLnN1bW1hcnlDZWxsO1xuICAgICAgICAgICAgICAgIHRhcmdldCA9IHZpc2libGVDb2xJbmRleCAhPT0gLTEgP1xuICAgICAgICAgICAgICAgICAgICByb3cuc3VtbWFyeUNlbGxzLmZpbmQoYyA9PiBjLnZpc2libGVDb2x1bW5JbmRleCA9PT0gdmlzaWJsZUNvbEluZGV4KSA6IHJvdy5zdW1tYXJ5Q2VsbHMuZmlyc3Q7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpZ3gtY2hpbGQtZ3JpZC1yb3cnOlxuICAgICAgICAgICAgICAgIHRhcmdldFR5cGUgPSBHcmlkS2V5ZG93blRhcmdldFR5cGUuaGllcmFyY2hpY2FsUm93O1xuICAgICAgICAgICAgICAgIHRhcmdldCA9IHJvdztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGFyZ2V0VHlwZSA9IEdyaWRLZXlkb3duVGFyZ2V0VHlwZS5kYXRhQ2VsbDtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB2aXNpYmxlQ29sSW5kZXggIT09IC0xID8gcm93LmNlbGxzLmZpbmQoYyA9PiBjLnZpc2libGVDb2x1bW5JbmRleCA9PT0gdmlzaWJsZUNvbEluZGV4KSA6IHJvdy5jZWxscy5maXJzdDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhcmdzID0geyB0YXJnZXRUeXBlOiB0YXJnZXRUeXBlLCB0YXJnZXQ6IHRhcmdldCB9O1xuICAgICAgICBjYihhcmdzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFByZXZEYXRhUm93SW5kZXgoY3VycmVudFJvd0luZGV4KTogbnVtYmVyIHtcbiAgICAgICAgaWYgKGN1cnJlbnRSb3dJbmRleCA8PSAwKSB7IHJldHVybiBjdXJyZW50Um93SW5kZXg7IH1cblxuICAgICAgICBjb25zdCBwcmV2Um93ID0gdGhpcy52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5pZ3hGb3JPZi5zbGljZSgwLCBjdXJyZW50Um93SW5kZXgpLnJldmVyc2UoKVxuICAgICAgICAgICAgLmZpbmQocmVjID0+ICFyZWMuZXhwcmVzc2lvbiAmJiAhcmVjLnN1bW1hcmllcyAmJiAhcmVjLmNoaWxkR3JpZHNEYXRhKTtcbiAgICAgICAgcmV0dXJuIHByZXZSb3cgPyB0aGlzLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mLmluZGV4T2YocHJldlJvdykgOiBjdXJyZW50Um93SW5kZXg7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXROZXh0RGF0YVJvd0luZGV4KGN1cnJlbnRSb3dJbmRleCk6IG51bWJlciB7XG4gICAgICAgIGlmIChjdXJyZW50Um93SW5kZXggPT09IHRoaXMudmVydGljYWxTY3JvbGxDb250YWluZXIuaWd4Rm9yT2YubGVuZ3RoKSB7cmV0dXJuIGN1cnJlbnRSb3dJbmRleDsgfVxuXG4gICAgICAgIGNvbnN0IG5leHRSb3cgPSB0aGlzLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mLnNsaWNlKGN1cnJlbnRSb3dJbmRleCArIDEsIHRoaXMudmVydGljYWxTY3JvbGxDb250YWluZXIuaWd4Rm9yT2YubGVuZ3RoKVxuICAgICAgICAgICAgLmZpbmQocmVjID0+ICFyZWMuZXhwcmVzc2lvbiAmJiAhcmVjLnN1bW1hcmllcyAmJiAhcmVjLmNoaWxkR3JpZHNEYXRhKTtcbiAgICAgICAgcmV0dXJuIG5leHRSb3cgPyB0aGlzLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mLmluZGV4T2YobmV4dFJvdykgOiBjdXJyZW50Um93SW5kZXg7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc1ZhbGlkUG9zaXRpb24ocm93SW5kZXgsIGNvbEluZGV4KTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHJvd3MgPSB0aGlzLnN1bW1hcmllc1Jvd0xpc3QuZmlsdGVyKHMgPT4gcy5pbmRleCAhPT0gMCkuY29uY2F0KHRoaXMucm93TGlzdC50b0FycmF5KCkpLmxlbmd0aDtcbiAgICAgICAgY29uc3QgY29scyA9IHRoaXMuY29sdW1uTGlzdC5maWx0ZXIoY29sID0+ICFjb2wuY29sdW1uR3JvdXAgJiYgY29sLnZpc2libGVJbmRleCA+PSAwKS5sZW5ndGg7XG4gICAgICAgIGlmIChyb3dzIDwgMSB8fCBjb2xzIDwgMSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgaWYgKHJvd0luZGV4ID4gLTEgJiYgcm93SW5kZXggPCB0aGlzLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mLmxlbmd0aCAmJlxuICAgICAgICAgICAgY29sSW5kZXggPiAtIDEgJiYgY29sSW5kZXggPD0gdGhpcy51bnBpbm5lZENvbHVtbnNbdGhpcy51bnBpbm5lZENvbHVtbnMubGVuZ3RoIC0gMV0udmlzaWJsZUluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgd2hlZWxIYW5kbGVyKGlzU2Nyb2xsID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2VcbiAgICAgICAgICAgIChkb2N1bWVudC5hY3RpdmVFbGVtZW50LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHRoaXMudGJvZHkubmF0aXZlRWxlbWVudCkgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5TIHx8XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1iaXR3aXNlXG4gICAgICAgICAgICAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0aGlzLnRmb290Lm5hdGl2ZUVsZW1lbnQpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9DT05UQUlOUyAmJiBpc1Njcm9sbCkpKSB7XG4gICAgICAgICAgICAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkuYmx1cigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyB0cmFja0NvbHVtbkNoYW5nZXMoaW5kZXgsIGNvbCkge1xuICAgICAgICByZXR1cm4gY29sLmZpZWxkICsgY29sLmNhbGNXaWR0aDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpbmQodGV4dDogc3RyaW5nLCBpbmNyZW1lbnQ6IG51bWJlciwgY2FzZVNlbnNpdGl2ZT86IGJvb2xlYW4sIGV4YWN0TWF0Y2g/OiBib29sZWFuLCBzY3JvbGw/OiBib29sZWFuKSB7XG4gICAgICAgIGlmICghdGhpcy5yb3dMaXN0KSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZW5kRWRpdChmYWxzZSk7XG5cbiAgICAgICAgaWYgKCF0ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyU2VhcmNoKCk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhc2VTZW5zaXRpdmVSZXNvbHZlZCA9IGNhc2VTZW5zaXRpdmUgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIGNvbnN0IGV4YWN0TWF0Y2hSZXNvbHZlZCA9IGV4YWN0TWF0Y2ggPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIGxldCByZWJ1aWxkQ2FjaGUgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5sYXN0U2VhcmNoSW5mby5zZWFyY2hUZXh0ICE9PSB0ZXh0IHx8XG4gICAgICAgICAgICB0aGlzLmxhc3RTZWFyY2hJbmZvLmNhc2VTZW5zaXRpdmUgIT09IGNhc2VTZW5zaXRpdmVSZXNvbHZlZCB8fFxuICAgICAgICAgICAgdGhpcy5sYXN0U2VhcmNoSW5mby5leGFjdE1hdGNoICE9PSBleGFjdE1hdGNoUmVzb2x2ZWQpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdFNlYXJjaEluZm8gPSB7XG4gICAgICAgICAgICAgICAgc2VhcmNoVGV4dDogdGV4dCxcbiAgICAgICAgICAgICAgICBhY3RpdmVNYXRjaEluZGV4OiAwLFxuICAgICAgICAgICAgICAgIGNhc2VTZW5zaXRpdmU6IGNhc2VTZW5zaXRpdmVSZXNvbHZlZCxcbiAgICAgICAgICAgICAgICBleGFjdE1hdGNoOiBleGFjdE1hdGNoUmVzb2x2ZWQsXG4gICAgICAgICAgICAgICAgbWF0Y2hJbmZvQ2FjaGU6IFtdXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZWJ1aWxkQ2FjaGUgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sYXN0U2VhcmNoSW5mby5hY3RpdmVNYXRjaEluZGV4ICs9IGluY3JlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZWJ1aWxkQ2FjaGUpIHtcbiAgICAgICAgICAgIHRoaXMucm93TGlzdC5mb3JFYWNoKChyb3cpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocm93LmNlbGxzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdy5jZWxscy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLmhpZ2hsaWdodFRleHQodGV4dCwgY2FzZVNlbnNpdGl2ZVJlc29sdmVkLCBleGFjdE1hdGNoUmVzb2x2ZWQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5yZWJ1aWxkTWF0Y2hDYWNoZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubGFzdFNlYXJjaEluZm8uYWN0aXZlTWF0Y2hJbmRleCA+PSB0aGlzLmxhc3RTZWFyY2hJbmZvLm1hdGNoSW5mb0NhY2hlLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5sYXN0U2VhcmNoSW5mby5hY3RpdmVNYXRjaEluZGV4ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmxhc3RTZWFyY2hJbmZvLmFjdGl2ZU1hdGNoSW5kZXggPCAwKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RTZWFyY2hJbmZvLmFjdGl2ZU1hdGNoSW5kZXggPSB0aGlzLmxhc3RTZWFyY2hJbmZvLm1hdGNoSW5mb0NhY2hlLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5sYXN0U2VhcmNoSW5mby5tYXRjaEluZm9DYWNoZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoSW5mbyA9IHRoaXMubGFzdFNlYXJjaEluZm8ubWF0Y2hJbmZvQ2FjaGVbdGhpcy5sYXN0U2VhcmNoSW5mby5hY3RpdmVNYXRjaEluZGV4XTtcbiAgICAgICAgICAgIHRoaXMubGFzdFNlYXJjaEluZm8gPSB7Li4udGhpcy5sYXN0U2VhcmNoSW5mb307XG5cbiAgICAgICAgICAgIGlmIChzY3JvbGwgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUbyhtYXRjaEluZm8ucm93LCBtYXRjaEluZm8uY29sdW1uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgSWd4VGV4dEhpZ2hsaWdodERpcmVjdGl2ZS5zZXRBY3RpdmVIaWdobGlnaHQodGhpcy5pZCwge1xuICAgICAgICAgICAgICAgIGNvbHVtbjogbWF0Y2hJbmZvLmNvbHVtbixcbiAgICAgICAgICAgICAgICByb3c6IG1hdGNoSW5mby5yb3csXG4gICAgICAgICAgICAgICAgaW5kZXg6IG1hdGNoSW5mby5pbmRleCxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBJZ3hUZXh0SGlnaGxpZ2h0RGlyZWN0aXZlLmNsZWFyQWN0aXZlSGlnaGxpZ2h0KHRoaXMuaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubGFzdFNlYXJjaEluZm8ubWF0Y2hJbmZvQ2FjaGUubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgZmlsdGVyZWQgc29ydGVkIGRhdGEuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGZpbHRlcmVkU29ydGVkRGF0YSA9IHRoaXMuZ3JpZDEuZmlsdGVyZWRTb3J0ZWREYXRhO1xuICAgICAqIGBgYFxuXHQgKiBAbWVtYmVyb2YgSWd4R3JpZEJhc2VDb21wb25lbnRcbiAgICAgKi9cbiAgICBnZXQgZmlsdGVyZWRTb3J0ZWREYXRhKCk6IGFueVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbHRlcmVkU29ydGVkRGF0YTtcbiAgICB9XG4gICAgc2V0IGZpbHRlcmVkU29ydGVkRGF0YSh2YWx1ZTogYW55W10pIHtcbiAgICAgICAgdGhpcy5fZmlsdGVyZWRTb3J0ZWREYXRhID0gdmFsdWU7XG4gICAgICAgIHRoaXMucmVmcmVzaFNlYXJjaCh0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGluaXRQaW5uaW5nKCkge1xuICAgICAgICBsZXQgY3VycmVudFBpbm5lZFdpZHRoID0gMDtcbiAgICAgICAgY29uc3QgcGlubmVkQ29sdW1ucyA9IFtdO1xuICAgICAgICBjb25zdCB1bnBpbm5lZENvbHVtbnMgPSBbXTtcbiAgICAgICAgY29uc3QgbmV3VW5waW5uZWRDb2xzID0gW107XG5cbiAgICAgICAgdGhpcy5jYWxjdWxhdGVHcmlkV2lkdGgoKTtcbiAgICAgICAgdGhpcy5yZXNldENhY2hlcygpO1xuICAgICAgICAvLyBXaGVuIGEgY29sdW1uIGlzIGEgZ3JvdXAgb3IgaXMgaW5zaWRlIGEgZ3JvdXAsIHBpbiBhbGwgcmVsYXRlZC5cbiAgICAgICAgdGhpcy5fcGlubmVkQ29sdW1ucy5mb3JFYWNoKGNvbCA9PiB7XG4gICAgICAgICAgICBpZiAoY29sLnBhcmVudCkge1xuICAgICAgICAgICAgICAgIGNvbC5wYXJlbnQucGlubmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb2wuY29sdW1uR3JvdXApIHtcbiAgICAgICAgICAgICAgICBjb2wuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiBjaGlsZC5waW5uZWQgPSB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGRvbid0IGV4Y2VlZCB1bnBpbm5lZCBhcmVhIG1pbiB3aWR0aCBhbmQgZ2V0IHBpbm5lZCBhbmQgdW5waW5uZWQgY29sIGNvbGxlY3Rpb25zLlxuICAgICAgICAvLyBXZSB0YWtlIGludG8gYWNjb3VudCB0b3AgbGV2ZWwgY29sdW1ucyAodG9wIGxldmVsIGdyb3VwcyBhbmQgbm9uIGdyb3VwcykuXG4gICAgICAgIC8vIElmIHRvcCBsZXZlbCBpcyB1bnBpbm5lZCB0aGUgcGlubmluZyBoYW5kbGVzIGFsbCBjaGlsZHJlbiB0byBiZSB1bnBpbm5lZCBhcyB3ZWxsLlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NvbHVtbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb2x1bW5zW2ldLnBpbm5lZCAmJiAhdGhpcy5fY29sdW1uc1tpXS5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBQaW5uZWQgY29sdW1uLiBDaGVjayBpZiB3aXRoIGl0IHRoZSB1bnBpbm5lZCBtaW4gd2lkdGggaXMgZXhjZWVkZWQuXG4gICAgICAgICAgICAgICAgY29uc3QgY29sV2lkdGggPSBwYXJzZUludCh0aGlzLl9jb2x1bW5zW2ldLndpZHRoLCAxMCk7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQaW5uZWRXaWR0aCArIGNvbFdpZHRoID4gdGhpcy5jYWxjV2lkdGggLSB0aGlzLnVucGlubmVkQXJlYU1pbldpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVucGlubmVkIG1pbiB3aWR0aCBpcyBleGNlZWRlZC4gVW5waW4gdGhlIGNvbHVtbnMgYW5kIGFkZCBpdCB0byB0aGUgdW5waW5uZWQgY29sbGVjdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29sdW1uc1tpXS5waW5uZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdW5waW5uZWRDb2x1bW5zLnB1c2godGhpcy5fY29sdW1uc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIG5ld1VucGlubmVkQ29scy5wdXNoKHRoaXMuX2NvbHVtbnNbaV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVucGlubmVkIG1pbiB3aWR0aCBpcyBub3QgZXhjZWVkZWQuIEtlZXAgaXQgcGlubmVkIGFuZCBhZGQgaXQgdG8gdGhlIHBpbm5lZCBjb2xsZWN0aW9uLlxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGlubmVkV2lkdGggKz0gY29sV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHBpbm5lZENvbHVtbnMucHVzaCh0aGlzLl9jb2x1bW5zW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2NvbHVtbnNbaV0ucGlubmVkICYmIHRoaXMuX2NvbHVtbnNbaV0ucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbHVtbnNbaV0udG9wTGV2ZWxQYXJlbnQucGlubmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHBpbm5lZENvbHVtbnMucHVzaCh0aGlzLl9jb2x1bW5zW2ldKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb2x1bW5zW2ldLnBpbm5lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB1bnBpbm5lZENvbHVtbnMucHVzaCh0aGlzLl9jb2x1bW5zW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHVucGlubmVkQ29sdW1ucy5wdXNoKHRoaXMuX2NvbHVtbnNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld1VucGlubmVkQ29scy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAnaWd4R3JpZCAtIFRoZSBwaW5uZWQgYXJlYSBleGNlZWRzIG1heGltdW0gcGlubmVkIHdpZHRoLiAnICtcbiAgICAgICAgICAgICAgICAnVGhlIGZvbGxvd2luZyBjb2x1bW5zIHdlcmUgdW5waW5uZWQgdG8gcHJldmVudCBmdXJ0aGVyIGlzc3VlczonICtcbiAgICAgICAgICAgICAgICBuZXdVbnBpbm5lZENvbHMubWFwKGNvbCA9PiAnXCInICsgY29sLmhlYWRlciArICdcIicpLnRvU3RyaW5nKCkgKyAnLiBGb3IgbW9yZSBpbmZvIHNlZSBvdXIgZG9jdW1lbnRhdGlvbi4nXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXNzaWduIHRoZSBhcHBsaWNhcGxlIGNvbGxlY3Rpb25zLlxuICAgICAgICB0aGlzLl9waW5uZWRDb2x1bW5zID0gcGlubmVkQ29sdW1ucztcbiAgICAgICAgdGhpcy5fdW5waW5uZWRDb2x1bW5zID0gdW5waW5uZWRDb2x1bW5zO1xuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHNjcm9sbFRvKHJvdzogYW55IHwgbnVtYmVyLCBjb2x1bW46IGFueSB8IG51bWJlcik6IHZvaWQge1xuICAgICAgICBsZXQgZGVsYXlTY3JvbGxpbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5wYWdpbmcgJiYgdHlwZW9mKHJvdykgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjb25zdCByb3dJbmRleCA9IHRoaXMuZmlsdGVyZWRTb3J0ZWREYXRhLmluZGV4T2Yocm93KTtcbiAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSBNYXRoLmZsb29yKHJvd0luZGV4IC8gdGhpcy5wZXJQYWdlKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucGFnZSAhPT0gcGFnZSkge1xuICAgICAgICAgICAgICAgIGRlbGF5U2Nyb2xsaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2UgPSBwYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlbGF5U2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLm9uRGF0YUNoYW5nZWQucGlwZShmaXJzdCgpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsRGlyZWN0aXZlKHRoaXMudmVydGljYWxTY3JvbGxDb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZihyb3cpID09PSAnbnVtYmVyJyA/IHJvdyA6IHRoaXMudmVydGljYWxTY3JvbGxDb250YWluZXIuaWd4Rm9yT2YuaW5kZXhPZihyb3cpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxEaXJlY3RpdmUodGhpcy52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lcixcbiAgICAgICAgICAgICAgICB0eXBlb2Yocm93KSA9PT0gJ251bWJlcicgPyByb3cgOiB0aGlzLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mLmluZGV4T2Yocm93KSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNjcm9sbFRvSG9yaXpvbnRhbGx5KGNvbHVtbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBzY3JvbGxUb0hvcml6b250YWxseShjb2x1bW46IGFueSB8IG51bWJlcikge1xuICAgICAgICBsZXQgY29sdW1uSW5kZXggPSB0eXBlb2YgY29sdW1uID09PSAnbnVtYmVyJyA/IGNvbHVtbiA6IHRoaXMuZ2V0Q29sdW1uQnlOYW1lKGNvbHVtbikudmlzaWJsZUluZGV4O1xuICAgICAgICBjb25zdCBzY3JvbGxSb3cgPSB0aGlzLnJvd0xpc3QuZmluZChyID0+IHIudmlydERpclJvdyk7XG4gICAgICAgIGNvbnN0IHZpcnREaXIgPSBzY3JvbGxSb3cgPyBzY3JvbGxSb3cudmlydERpclJvdyA6IG51bGw7XG4gICAgICAgIGlmICh0aGlzLnBpbm5lZENvbHVtbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoY29sdW1uSW5kZXggPj0gdGhpcy5waW5uZWRDb2x1bW5zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbHVtbkluZGV4IC09IHRoaXMucGlubmVkQ29sdW1ucy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxEaXJlY3RpdmUodmlydERpciwgY29sdW1uSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxEaXJlY3RpdmUodmlydERpciwgY29sdW1uSW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBzY3JvbGxEaXJlY3RpdmUoZGlyZWN0aXZlOiBJZ3hHcmlkRm9yT2ZEaXJlY3RpdmU8YW55PiwgZ29hbDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmICghZGlyZWN0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGlyZWN0aXZlLm9uQ2h1bmtMb2FkLnBpcGUoZmlyc3QoKSlcbiAgICAgICAgLy8gICAgIC5zdWJzY3JpYmUoKCkgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKSkpO1xuICAgICAgICBkaXJlY3RpdmUuc2Nyb2xsVG8oZ29hbCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWJ1aWxkTWF0Y2hDYWNoZSgpIHtcbiAgICAgICAgdGhpcy5sYXN0U2VhcmNoSW5mby5tYXRjaEluZm9DYWNoZSA9IFtdO1xuXG4gICAgICAgIGNvbnN0IGNhc2VTZW5zaXRpdmUgPSB0aGlzLmxhc3RTZWFyY2hJbmZvLmNhc2VTZW5zaXRpdmU7XG4gICAgICAgIGNvbnN0IGV4YWN0TWF0Y2ggPSB0aGlzLmxhc3RTZWFyY2hJbmZvLmV4YWN0TWF0Y2g7XG4gICAgICAgIGNvbnN0IHNlYXJjaFRleHQgPSBjYXNlU2Vuc2l0aXZlID8gdGhpcy5sYXN0U2VhcmNoSW5mby5zZWFyY2hUZXh0IDogdGhpcy5sYXN0U2VhcmNoSW5mby5zZWFyY2hUZXh0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmZpbHRlcmVkU29ydGVkRGF0YTtcbiAgICAgICAgY29uc3QgY29sdW1uSXRlbXMgPSB0aGlzLnZpc2libGVDb2x1bW5zLmZpbHRlcigoYykgPT4gIWMuY29sdW1uR3JvdXApLnNvcnQoKGMxLCBjMikgPT4gYzEudmlzaWJsZUluZGV4IC0gYzIudmlzaWJsZUluZGV4KTtcblxuICAgICAgICBjb25zdCBudW1iZXJQaXBlID0gbmV3IElneERlY2ltYWxQaXBlQ29tcG9uZW50KHRoaXMubG9jYWxlKTtcbiAgICAgICAgY29uc3QgZGF0ZVBpcGUgPSBuZXcgSWd4RGF0ZVBpcGVDb21wb25lbnQodGhpcy5sb2NhbGUpO1xuICAgICAgICBkYXRhLmZvckVhY2goKGRhdGFSb3cpID0+IHtcbiAgICAgICAgICAgIGNvbHVtbkl0ZW1zLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGMuZm9ybWF0dGVyID8gYy5mb3JtYXR0ZXIoZGF0YVJvd1tjLmZpZWxkXSkgOlxuICAgICAgICAgICAgICAgICAgICBjLmRhdGFUeXBlID09PSAnbnVtYmVyJyA/IG51bWJlclBpcGUudHJhbnNmb3JtKGRhdGFSb3dbYy5maWVsZF0sIHRoaXMubG9jYWxlKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICBjLmRhdGFUeXBlID09PSAnZGF0ZScgPyBkYXRlUGlwZS50cmFuc2Zvcm0oZGF0YVJvd1tjLmZpZWxkXSwgdGhpcy5sb2NhbGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkYXRhUm93W2MuZmllbGRdO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsICYmIGMuc2VhcmNoYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2VhcmNoVmFsdWUgPSBjYXNlU2Vuc2l0aXZlID8gU3RyaW5nKHZhbHVlKSA6IFN0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhhY3RNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlYXJjaFZhbHVlID09PSBzZWFyY2hUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0U2VhcmNoSW5mby5tYXRjaEluZm9DYWNoZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93OiBkYXRhUm93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46IGMuZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9jY3VyZW5jZUluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZWFyY2hJbmRleCA9IHNlYXJjaFZhbHVlLmluZGV4T2Yoc2VhcmNoVGV4dCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RTZWFyY2hJbmZvLm1hdGNoSW5mb0NhY2hlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3c6IGRhdGFSb3csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogYy5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IG9jY3VyZW5jZUluZGV4KyssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hWYWx1ZSA9IHNlYXJjaFZhbHVlLnN1YnN0cmluZyhzZWFyY2hJbmRleCArIHNlYXJjaFRleHQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hJbmRleCA9IHNlYXJjaFZhbHVlLmluZGV4T2Yoc2VhcmNoVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBpc0V4cGFuZGVkR3JvdXAoX2dyb3VwOiBJR3JvdXBCeVJlY29yZCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQGhpZGRlblxuICAgICovXG4gICAgcHJvdGVjdGVkIGdldEdyb3VwQnlSZWNvcmRzKCk6IElHcm91cEJ5UmVjb3JkW10ge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY2hhbmdlUm93RWRpdGluZ092ZXJsYXlTdGF0ZU9uU2Nyb2xsKHJvdzogSWd4Um93Q29tcG9uZW50PElneEdyaWRCYXNlQ29tcG9uZW50ICYgSUdyaWREYXRhQmluZGFibGU+KSB7XG4gICAgICAgIGlmICghdGhpcy5yb3dFZGl0YWJsZSB8fCB0aGlzLnJvd0VkaXRpbmdPdmVybGF5LmNvbGxhcHNlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcm93KSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZVJvd0VkaXRpbmdPdmVybGF5KGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVwb3NpdGlvblJvd0VkaXRpbmdPdmVybGF5KHJvdyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvcGVuUm93T3ZlcmxheShpZCkge1xuICAgICAgICB0aGlzLmNvbmZpZ3VyZVJvd0VkaXRpbmdPdmVybGF5KGlkLCB0aGlzLnJvd0xpc3QubGVuZ3RoIDw9IE1JTl9ST1dfRURJVElOR19DT1VOVF9USFJFU0hPTEQpO1xuXG4gICAgICAgIHRoaXMucm93RWRpdGluZ092ZXJsYXkub3Blbih0aGlzLnJvd0VkaXRTZXR0aW5ncyk7XG4gICAgICAgIHRoaXMucm93RWRpdFBvc2l0aW9uaW5nU3RyYXRlZ3kuaXNUb3BJbml0aWFsUG9zaXRpb24gPSB0aGlzLnJvd0VkaXRQb3NpdGlvbmluZ1N0cmF0ZWd5LmlzVG9wO1xuICAgICAgICB0aGlzLl93aGVlbExpc3RlbmVyID0gdGhpcy5yb3dFZGl0aW5nV2hlZWxIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucm93RWRpdGluZ092ZXJsYXkuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMuX3doZWVsTGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2xvc2VSb3dFZGl0aW5nT3ZlcmxheSgpIHtcbiAgICAgICAgdGhpcy5yb3dFZGl0aW5nT3ZlcmxheS5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5fd2hlZWxMaXN0ZW5lcik7XG4gICAgICAgIHRoaXMucm93RWRpdFBvc2l0aW9uaW5nU3RyYXRlZ3kuaXNUb3BJbml0aWFsUG9zaXRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLnJvd0VkaXRpbmdPdmVybGF5LmNsb3NlKCk7XG4gICAgICAgIHRoaXMucm93RWRpdGluZ092ZXJsYXkuZWxlbWVudC5wYXJlbnRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIHRvZ2dsZVJvd0VkaXRpbmdPdmVybGF5KHNob3cpIHtcbiAgICAgICAgY29uc3Qgcm93U3R5bGUgPSB0aGlzLnJvd0VkaXRpbmdPdmVybGF5LmVsZW1lbnQuc3R5bGU7XG4gICAgICAgIGlmIChzaG93KSB7XG4gICAgICAgICAgICByb3dTdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJvd1N0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIHJlcG9zaXRpb25Sb3dFZGl0aW5nT3ZlcmxheShyb3c6IElneFJvd0NvbXBvbmVudDxJZ3hHcmlkQmFzZUNvbXBvbmVudCAmIElHcmlkRGF0YUJpbmRhYmxlPikge1xuICAgICAgICBpZiAoIXRoaXMucm93RWRpdGluZ092ZXJsYXkuY29sbGFwc2VkKSB7XG4gICAgICAgICAgICBjb25zdCByb3dTdHlsZSA9IHRoaXMucm93RWRpdGluZ092ZXJsYXkuZWxlbWVudC5wYXJlbnRFbGVtZW50LnN0eWxlO1xuICAgICAgICAgICAgaWYgKHJvdykge1xuICAgICAgICAgICAgICAgIHJvd1N0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ3VyZVJvd0VkaXRpbmdPdmVybGF5KHJvdy5yb3dJRCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3dFZGl0aW5nT3ZlcmxheS5yZXBvc2l0aW9uKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvd1N0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbmZpZ3VyZVJvd0VkaXRpbmdPdmVybGF5KHJvd0lEOiBhbnksIHVzZU91dGVyID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5yb3dFZGl0U2V0dGluZ3Mub3V0bGV0ID0gdXNlT3V0ZXIgPyB0aGlzLnBhcmVudFJvd091dGxldERpcmVjdGl2ZSA6IHRoaXMucm93T3V0bGV0RGlyZWN0aXZlO1xuICAgICAgICB0aGlzLnJvd0VkaXRQb3NpdGlvbmluZ1N0cmF0ZWd5LnNldHRpbmdzLmNvbnRhaW5lciA9IHRoaXMudGJvZHkubmF0aXZlRWxlbWVudDtcbiAgICAgICAgY29uc3QgdGFyZ2V0Um93ID0gdGhpcy5ncmlkQVBJLmdldF9yb3dfYnlfa2V5KHJvd0lEKTtcbiAgICAgICAgaWYgKCF0YXJnZXRSb3cpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJvd0VkaXRQb3NpdGlvbmluZ1N0cmF0ZWd5LnNldHRpbmdzLnRhcmdldCA9IHRhcmdldFJvdy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIHRoaXMudG9nZ2xlUm93RWRpdGluZ092ZXJsYXkodHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgcm93Q2hhbmdlc0NvdW50KCkge1xuICAgICAgICBpZiAoIXRoaXMuY3J1ZFNlcnZpY2Uucm93KSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByb3dDaGFuZ2VzID0gdGhpcy50cmFuc2FjdGlvbnMuZ2V0QWdncmVnYXRlZFZhbHVlKHRoaXMuY3J1ZFNlcnZpY2Uucm93LmlkLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiByb3dDaGFuZ2VzID8gT2JqZWN0LmtleXMocm93Q2hhbmdlcykubGVuZ3RoIDogMDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgd3JpdGVUb0RhdGEocm93SW5kZXg6IG51bWJlciwgdmFsdWU6IGFueSkge1xuICAgICAgICBtZXJnZU9iamVjdHModGhpcy5ncmlkQVBJLmdldF9hbGxfZGF0YSgpW3Jvd0luZGV4XSwgdmFsdWUpO1xuICAgIH1cblxuICAgIGVuZFJvd1RyYW5zYWN0aW9uKGNvbW1pdDogYm9vbGVhbiwgcm93OiBJZ3hSb3cpIHtcbiAgICAgICAgcm93Lm5ld0RhdGEgPSB0aGlzLnRyYW5zYWN0aW9ucy5nZXRBZ2dyZWdhdGVkVmFsdWUocm93LmlkLCB0cnVlKTtcblxuICAgICAgICBsZXQgYXJncyA9IHJvdy5jcmVhdGVFZGl0RXZlbnRBcmdzKCk7XG5cbiAgICAgICAgaWYgKCFjb21taXQpIHtcbiAgICAgICAgICAgIHRoaXMub25Sb3dFZGl0Q2FuY2VsLmVtaXQoYXJncyk7XG4gICAgICAgICAgICB0aGlzLnRyYW5zYWN0aW9ucy5lbmRQZW5kaW5nKGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFyZ3MgPSB0aGlzLmdyaWRBUEkudXBkYXRlX3Jvdyhyb3csIHJvdy5uZXdEYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJncy5jYW5jZWwpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNhY3Rpb25zLnN0YXJ0UGVuZGluZygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3J1ZFNlcnZpY2UuZW5kUm93RWRpdCgpO1xuICAgICAgICB0aGlzLmNsb3NlUm93RWRpdGluZ092ZXJsYXkoKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBSZWZhY3RvclxuICAgIC8qKlxuICAgICAqIEZpbmlzaGVzIHRoZSByb3cgdHJhbnNhY3Rpb25zIG9uIHRoZSBjdXJyZW50IHJvdy5cbiAgICAgKiBJZiBgY29tbWl0ID09PSB0cnVlYCwgcGFzc2VzIHRoZW0gZnJvbSB0aGUgcGVuZGluZyBzdGF0ZSB0byB0aGUgZGF0YSAob3IgdHJhbnNhY3Rpb24gc2VydmljZSlcbiAgICAgKlxuICAgICAqIEJpbmRpbmcgdG8gdGhlIGV2ZW50XG4gICAgICogYGBgaHRtbFxuICAgICAqIDxidXR0b24gaWd4QnV0dG9uIChjbGljayk9XCJncmlkLmVuZEVkaXQodHJ1ZSlcIj5Db21taXQgUm93PC9idXR0b24+XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGNvbW1pdFxuICAgICAqL1xuICAgIHB1YmxpYyBlbmRFZGl0KGNvbW1pdCA9IHRydWUsIGV2ZW50PzogRXZlbnQpIHtcbiAgICAgICAgY29uc3Qgcm93ID0gdGhpcy5jcnVkU2VydmljZS5yb3c7XG4gICAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLmNydWRTZXJ2aWNlLmNlbGw7XG4gICAgICAgIGNvbnN0IGNvbHVtbmluZGV4ID0gY2VsbCA/IGNlbGwuY29sdW1uLmluZGV4IDogLTE7XG4gICAgICAgIGNvbnN0IHJpID0gcm93ID8gcm93LmluZGV4IDogLTE7XG5cbiAgICAgICAgLy8gVE9ETzogTWVyZ2UgdGhlIGNydWRTZXJ2aWNlIHdpdGggd2h0IEJhc2VBUEkgc2VydmljZVxuICAgICAgICBpZiAoIXJvdyAmJiAhY2VsbCkgeyByZXR1cm47IH1cblxuICAgICAgICBjb21taXQgPyB0aGlzLmdyaWRBUEkuc3VibWl0X3ZhbHVlKCkgOiB0aGlzLmdyaWRBUEkuZXNjYXBlX2VkaXRNb2RlKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnJvd0VkaXRhYmxlIHx8IHRoaXMucm93RWRpdGluZ092ZXJsYXkgJiYgdGhpcy5yb3dFZGl0aW5nT3ZlcmxheS5jb2xsYXBzZWQgfHwgIXJvdykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbmRSb3dUcmFuc2FjdGlvbihjb21taXQsIHJvdyk7XG5cbiAgICAgICAgY29uc3QgY3VycmVudENlbGwgPSB0aGlzLmdyaWRBUEkuZ2V0X2NlbGxfYnlfaW5kZXgocmksIGNvbHVtbmluZGV4KTtcbiAgICAgICAgaWYgKGN1cnJlbnRDZWxsICYmIGV2ZW50KSB7XG4gICAgICAgICAgICBjdXJyZW50Q2VsbC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgcm93RWRpdGluZ1doZWVsSGFuZGxlcihldmVudDogV2hlZWxFdmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuZGVsdGFZID4gMCkge1xuICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5zY3JvbGxOZXh0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnNjcm9sbFByZXYoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGRhdGFXaXRoQWRkZWRJblRyYW5zYWN0aW9uUm93cygpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gPGFueT5jbG9uZUFycmF5KHRoaXMuZ3JpZEFQSS5nZXRfYWxsX2RhdGEoKSk7XG4gICAgICAgIGlmICh0aGlzLnRyYW5zYWN0aW9ucy5lbmFibGVkKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCguLi50aGlzLnRyYW5zYWN0aW9ucy5nZXRBZ2dyZWdhdGVkQ2hhbmdlcyh0cnVlKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIodCA9PiB0LnR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5BREQpXG4gICAgICAgICAgICAgICAgLm1hcCh0ID0+IHQubmV3VmFsdWUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBkYXRhTGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2FjdGlvbnMuZW5hYmxlZCA/IHRoaXMuZGF0YVdpdGhBZGRlZEluVHJhbnNhY3Rpb25Sb3dzLmxlbmd0aCA6IHRoaXMuZ3JpZEFQSS5nZXRfYWxsX2RhdGEoKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgcHVibGljIGhhc0hvcml6b250YWxTY3JvbGwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvdGFsV2lkdGggLSB0aGlzLnVucGlubmVkV2lkdGggPiAwO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfcmVzdG9yZVZpcnRTdGF0ZShyb3cpIHtcbiAgICAgICAgIC8vIGNoZWNrIHZpcnR1YWxpemF0aW9uIHN0YXRlIG9mIGRhdGEgcmVjb3JkIGFkZGVkIGZyb20gY2FjaGVcbiAgICAgICAgIC8vIGluIGNhc2Ugc3RhdGUgaXMgbm8gbG9uZ2VyIHZhbGlkIC0gdXBkYXRlIGl0LlxuICAgICAgICAgY29uc3Qgcm93Rm9yT2YgPSByb3cudmlydERpclJvdztcbiAgICAgICAgIGNvbnN0IGdyaWRTY3JMZWZ0ID0gcm93Rm9yT2YuZ2V0SG9yaXpvbnRhbFNjcm9sbCgpLnNjcm9sbExlZnQ7XG4gICAgICAgICBjb25zdCBsZWZ0ID0gLXBhcnNlSW50KHJvd0Zvck9mLmRjLmluc3RhbmNlLl92aWV3Q29udGFpbmVyLmVsZW1lbnQubmF0aXZlRWxlbWVudC5zdHlsZS5sZWZ0LCAxMCk7XG4gICAgICAgICBjb25zdCBhY3R1YWxTY3JvbGxMZWZ0ID0gbGVmdCArIHJvd0Zvck9mLmdldENvbHVtblNjcm9sbExlZnQocm93Rm9yT2Yuc3RhdGUuc3RhcnRJbmRleCk7XG4gICAgICAgIGlmIChncmlkU2NyTGVmdCAhPT0gYWN0dWFsU2Nyb2xsTGVmdCkge1xuICAgICAgICAgICAgcm93Rm9yT2Yub25IU2Nyb2xsKGdyaWRTY3JMZWZ0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0RXhwb3J0RXhjZWwoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leHBvcnRFeGNlbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldEV4cG9ydENzdigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4cG9ydENzdjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBoaWRkZW5cbiAgICAqL1xuICAgIHB1YmxpYyBpc1N1bW1hcnlSb3cocm93RGF0YSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gcm93RGF0YS5zdW1tYXJpZXMgJiYgKHJvd0RhdGEuc3VtbWFyaWVzIGluc3RhbmNlb2YgTWFwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldCBpc0F0dGFjaGVkVG9Eb20oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG5cblxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBjYWNoZWRWaWV3TG9hZGVkKGFyZ3M6IElDYWNoZWRWaWV3TG9hZGVkRXZlbnRBcmdzKSB7XG4gICAgICAgIGlmIChhcmdzLmNvbnRleHRbJ3RlbXBsYXRlSUQnXSA9PT0gJ2RhdGFSb3cnICYmIGFyZ3MuY29udGV4dFsnJGltcGxpY2l0J10gPT09IGFyZ3Mub2xkQ29udGV4dFsnJGltcGxpY2l0J10pIHtcbiAgICAgICAgICAgIGFyZ3Mudmlldy5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgICAgICBjb25zdCByb3cgPSB0aGlzLmdldFJvd0J5SW5kZXgoYXJncy5jb250ZXh0LmluZGV4KTtcbiAgICAgICAgICAgIGlmIChyb3cgJiYgcm93LmNlbGxzKSB7XG4gICAgICAgICAgICAgICAgcm93LmNlbGxzLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYy5oaWdobGlnaHRUZXh0KFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0U2VhcmNoSW5mby5zZWFyY2hUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0U2VhcmNoSW5mby5jYXNlU2Vuc2l0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0U2VhcmNoSW5mby5leGFjdE1hdGNoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNIb3Jpem9udGFsU2Nyb2xsKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHRtcGxJZCA9IGFyZ3MuY29udGV4dC50ZW1wbGF0ZUlEO1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBhcmdzLmNvbnRleHQuaW5kZXg7XG4gICAgICAgICAgICBhcmdzLnZpZXcuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICAgICAgY29uc3Qgcm93ID0gdG1wbElkID09PSAnZGF0YVJvdycgPyB0aGlzLmdldFJvd0J5SW5kZXgoaW5kZXgpIDogbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IHN1bW1hcnlSb3cgPSB0bXBsSWQgPT09ICdzdW1tYXJ5Um93JyA/IHRoaXMuc3VtbWFyaWVzUm93TGlzdC50b0FycmF5KCkuZmluZCgoc3IpID0+IHNyLmRhdGFSb3dJbmRleCA9PT0gaW5kZXgpIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChyb3cgJiYgcm93IGluc3RhbmNlb2YgSWd4Um93Q29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzdG9yZVZpcnRTdGF0ZShyb3cpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdW1tYXJ5Um93KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzdG9yZVZpcnRTdGF0ZShzdW1tYXJ5Um93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4iXX0=