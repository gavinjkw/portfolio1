/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, Input, ViewChild } from '@angular/core';
import { IgxSelectionAPIService } from '../../core/selection';
import { GridBaseAPIService } from '.././api.service';
import { IgxRowIslandComponent } from './row-island.component';
var IgxChildGridRowComponent = /** @class */ (function () {
    function IgxChildGridRowComponent(gridAPI, selectionAPI, element, cdr) {
        this.gridAPI = gridAPI;
        this.selectionAPI = selectionAPI;
        this.element = element;
        this.cdr = cdr;
        /**
         * Returns whether the row is expanded.
         * ```typescript
         * const RowExpanded = this.grid1.rowList.first.expanded;
         * ```
         */
        this.expanded = false;
        /**
         *  The data passed to the row component.
         *
         * ```typescript
         * // get the row data for the first selected row
         * let selectedRowData = this.grid.selectedRows[0].rowData;
         * ```
         */
        this.rowData = [];
        /**
         * @hidden
         */
        this.tabindex = 0;
        /**
         * @hidden
         */
        this.role = 'row';
    }
    Object.defineProperty(IgxChildGridRowComponent.prototype, "parentHasScroll", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return !this.parentGrid.verticalScrollContainer.dc.instance.notVirtual;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxChildGridRowComponent.prototype, "parentGrid", {
        /**
         * Get a reference to the grid that contains the selected row.
         *
         * ```typescript
         * handleRowSelection(event) {
         *  // the grid on which the onRowSelectionChange event was triggered
         *  const grid = event.row.grid;
         * }
         * ```
         *
         * ```html
         *  <igx-grid
         *    [data]="data"
         *    (onRowSelectionChange)="handleRowSelection($event)">
         *  </igx-grid>
         * ```
         */
        // TODO: Refactor
        get: /**
         * Get a reference to the grid that contains the selected row.
         *
         * ```typescript
         * handleRowSelection(event) {
         *  // the grid on which the onRowSelectionChange event was triggered
         *  const grid = event.row.grid;
         * }
         * ```
         *
         * ```html
         *  <igx-grid
         *    [data]="data"
         *    (onRowSelectionChange)="handleRowSelection($event)">
         *  </igx-grid>
         * ```
         * @return {?}
         */
        // TODO: Refactor
        function () {
            return this.gridAPI.grid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxChildGridRowComponent.prototype, "level", {
        get: /**
         * @return {?}
         */
        function () {
            return this.layout.level;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxChildGridRowComponent.prototype, "nativeElement", {
        /**
         * The native DOM element representing the row. Could be null in certain environments.
         *
         * ```typescript
         * // get the nativeElement of the second selected row
         * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;
         * ```
         */
        get: /**
         * The native DOM element representing the row. Could be null in certain environments.
         *
         * ```typescript
         * // get the nativeElement of the second selected row
         * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;
         * ```
         * @return {?}
         */
        function () {
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxChildGridRowComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        // setting child data only once on init
        // due to context change issues when moving cached views containing hierarchical child grids
        this.hGrid.data = this.rowData.childGridsData[this.layout.key];
        this.layout.onLayoutChange.subscribe(function (ch) {
            _this._handleLayoutChanges(ch);
        });
        /** @type {?} */
        var changes = this.layout.initialChanges;
        changes.forEach(function (change) {
            _this._handleLayoutChanges(change);
        });
        this.hGrid.parent = this.parentGrid;
        this.hGrid.parentIsland = this.layout;
        this.hGrid.childRow = this;
        this.layout.onGridCreated.emit({
            owner: this.layout,
            parentID: this.rowData.rowID,
            grid: this.hGrid
        });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxChildGridRowComponent.prototype.ngAfterViewInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        this.hGrid.childLayoutList = this.layout.children;
        if (this.layout.childColumns.length > 0 && !this.hGrid.autoGenerate) {
            this.hGrid.createColumnsList(this.layout.childColumns.toArray());
        }
        /** @type {?} */
        var layouts = this.hGrid.childLayoutList.toArray();
        layouts.forEach(function (l) { return _this.hGrid.hgridAPI.registerChildRowIsland(l); });
        this.parentGrid.hgridAPI.registerChildGrid(this.rowData.rowID, this.layout.key, this.hGrid);
        this.layout.rowIslandAPI.registerChildGrid(this.rowData.rowID, this.hGrid);
        this.hGrid.cdr.detectChanges();
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    IgxChildGridRowComponent.prototype._handleLayoutChanges = /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        for (var change in changes) {
            if (changes.hasOwnProperty(change)) {
                this.hGrid[change] = changes[change].currentValue;
            }
        }
    };
    IgxChildGridRowComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    selector: 'igx-child-grid-row',
                    template: "<div class=\"igx-grid__hierarchical-indent\" [ngClass]=\"{'igx-grid__hierarchical-indent--scroll': parentHasScroll}\">\n    <igx-hierarchical-grid #hgrid></igx-hierarchical-grid>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    IgxChildGridRowComponent.ctorParameters = function () { return [
        { type: GridBaseAPIService },
        { type: IgxSelectionAPIService },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    IgxChildGridRowComponent.propDecorators = {
        layout: [{ type: Input }],
        parentGridID: [{ type: Input }],
        rowData: [{ type: Input }],
        index: [{ type: Input }],
        hGrid: [{ type: ViewChild, args: ['hgrid',] }],
        tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        role: [{ type: HostBinding, args: ['attr.role',] }],
        level: [{ type: HostBinding, args: ['attr.data-level',] }]
    };
    return IgxChildGridRowComponent;
}());
export { IgxChildGridRowComponent };
if (false) {
    /**
     * Returns whether the row is expanded.
     * ```typescript
     * const RowExpanded = this.grid1.rowList.first.expanded;
     * ```
     * @type {?}
     */
    IgxChildGridRowComponent.prototype.expanded;
    /** @type {?} */
    IgxChildGridRowComponent.prototype.layout;
    /**
     * @hidden
     * @type {?}
     */
    IgxChildGridRowComponent.prototype.parentGridID;
    /**
     *  The data passed to the row component.
     *
     * ```typescript
     * // get the row data for the first selected row
     * let selectedRowData = this.grid.selectedRows[0].rowData;
     * ```
     * @type {?}
     */
    IgxChildGridRowComponent.prototype.rowData;
    /**
     * The index of the row.
     *
     * ```typescript
     * // get the index of the second selected row
     * let selectedRowIndex = this.grid.selectedRows[1].index;
     * ```
     * @type {?}
     */
    IgxChildGridRowComponent.prototype.index;
    /**
     * @type {?}
     * @private
     */
    IgxChildGridRowComponent.prototype.hGrid;
    /**
     * @hidden
     * @type {?}
     */
    IgxChildGridRowComponent.prototype.tabindex;
    /**
     * @hidden
     * @type {?}
     */
    IgxChildGridRowComponent.prototype.role;
    /** @type {?} */
    IgxChildGridRowComponent.prototype.gridAPI;
    /**
     * @type {?}
     * @private
     */
    IgxChildGridRowComponent.prototype.selectionAPI;
    /** @type {?} */
    IgxChildGridRowComponent.prototype.element;
    /** @type {?} */
    IgxChildGridRowComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,