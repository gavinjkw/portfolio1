{"version":3,"file":"igniteui-angular.umd.js.map","sources":["ng://igniteui-angular/lib/animations/easings.ts","ng://igniteui-angular/lib/animations/fade/index.ts","node_modules/tslib/tslib.es6.js","ng://igniteui-angular/lib/animations/flip/index.ts","ng://igniteui-angular/lib/animations/rotate/index.ts","ng://igniteui-angular/lib/animations/misc/shake.ts","ng://igniteui-angular/lib/animations/misc/pulsate.ts","ng://igniteui-angular/lib/animations/scale/index.ts","ng://igniteui-angular/lib/animations/slide/index.ts","ng://igniteui-angular/lib/animations/swing/index.ts","ng://igniteui-angular/lib/animations/grow/index.ts","ng://igniteui-angular/lib/core/navigation/nav.service.ts","ng://igniteui-angular/lib/core/navigation/directives.ts","ng://igniteui-angular/lib/core/utils.ts","ng://igniteui-angular/lib/data-operations/sorting-expression.interface.ts","ng://igniteui-angular/lib/data-operations/sorting-strategy.ts","ng://igniteui-angular/lib/data-operations/grouping-strategy.ts","ng://igniteui-angular/lib/data-operations/paging-state.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-expressions-tree.ts","ng://igniteui-angular/lib/services/transaction/transaction.ts","ng://igniteui-angular/lib/grids/api.service.ts","ng://igniteui-angular/lib/data-operations/filtering-expression.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-strategy.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.filtering.pipe.ts","ng://igniteui-angular/lib/data-operations/data-util.ts","ng://igniteui-angular/lib/services/exporter-common/export-utilities.ts","ng://igniteui-angular/lib/services/exporter-common/base-export-service.ts","ng://igniteui-angular/lib/services/csv/char-separated-value-data.ts","ng://igniteui-angular/lib/services/exporter-common/exporter-options-base.ts","ng://igniteui-angular/lib/services/csv/csv-exporter-options.ts","ng://igniteui-angular/lib/services/csv/csv-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-enums.ts","ng://igniteui-angular/lib/services/excel/excel-strings.ts","ng://igniteui-angular/lib/services/excel/excel-files.ts","ng://igniteui-angular/lib/services/excel/excel-folders.ts","ng://igniteui-angular/lib/services/excel/excel-elements-factory.ts","ng://igniteui-angular/lib/services/excel/worksheet-data-dictionary.ts","ng://igniteui-angular/lib/services/excel/worksheet-data.ts","ng://igniteui-angular/lib/services/excel/excel-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-exporter-options.ts","ng://igniteui-angular/lib/services/overlay/utilities.ts","ng://igniteui-angular/lib/services/overlay/position/global-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/NoOpScrollStrategy.ts","ng://igniteui-angular/lib/core/deprecateDecorators.ts","ng://igniteui-angular/lib/services/overlay/overlay.ts","ng://igniteui-angular/lib/services/overlay/position/connected-positioning-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/base-fit-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/auto-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/elastic-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/absolute-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/block-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/close-scroll-strategy.ts","ng://igniteui-angular/lib/services/transaction/base-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-hierarchical-transaction.ts","ng://igniteui-angular/lib/directives/toggle/toggle.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.common.ts","ng://igniteui-angular/lib/core/selection.ts","ng://igniteui-angular/lib/drop-down/drop-down-group.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.base.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.component.ts","ng://igniteui-angular/lib/drop-down/drop-down.base.ts","ng://igniteui-angular/lib/directives/for-of/display.container.ts","ng://igniteui-angular/lib/directives/for-of/horizontal.virtual.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/virtual.helper.component.ts","ng://igniteui-angular/lib/directives/scroll-inertia/scroll_inertia.directive.ts","ng://igniteui-angular/lib/directives/for-of/for_of.sync.service.ts","ng://igniteui-angular/lib/directives/for-of/for_of.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-navigation.directive.ts","ng://igniteui-angular/lib/drop-down/index.ts","ng://igniteui-angular/lib/directives/hint/hint.directive.ts","ng://igniteui-angular/lib/input-group/input-group.common.ts","ng://igniteui-angular/lib/directives/input/input.directive.ts","ng://igniteui-angular/lib/directives/label/label.directive.ts","ng://igniteui-angular/lib/directives/prefix/prefix.directive.ts","ng://igniteui-angular/lib/directives/suffix/suffix.directive.ts","ng://igniteui-angular/lib/core/displayDensity.ts","ng://igniteui-angular/lib/input-group/input-group.component.ts","ng://igniteui-angular/lib/directives/autocomplete/autocomplete.directive.ts","ng://igniteui-angular/lib/directives/button/button.directive.ts","ng://igniteui-angular/lib/directives/divider/divider.directive.ts","ng://igniteui-angular/lib/directives/dragdrop/dragdrop.directive.ts","ng://igniteui-angular/lib/directives/filter/filter.directive.ts","ng://igniteui-angular/lib/directives/focus/focus.directive.ts","ng://igniteui-angular/lib/directives/layout/layout.directive.ts","ng://igniteui-angular/lib/directives/mask/mask-helper.ts","ng://igniteui-angular/lib/directives/mask/mask.directive.ts","ng://igniteui-angular/lib/radio/radio.component.ts","ng://igniteui-angular/lib/directives/ripple/ripple.directive.ts","ng://igniteui-angular/lib/directives/radio/radio-group.directive.ts","ng://igniteui-angular/lib/directives/text-highlight/text-highlight.directive.ts","ng://igniteui-angular/lib/directives/text-selection/text-selection.directive.ts","ng://igniteui-angular/lib/directives/tooltip/tooltip.directive.ts","ng://igniteui-angular/lib/data-operations/filtering-condition.ts","ng://igniteui-angular/lib/data-operations/filtering-state.interface.ts","ng://igniteui-angular/lib/data-operations/groupby-record.interface.ts","ng://igniteui-angular/lib/icon/icon.service.ts","ng://igniteui-angular/lib/icon/icon.component.ts","ng://igniteui-angular/lib/icon/index.ts","ng://igniteui-angular/lib/avatar/avatar.component.ts","ng://igniteui-angular/lib/badge/badge.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.common.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-body.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.directives.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-header.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.module.ts","ng://igniteui-angular/lib/banner/banner.directives.ts","ng://igniteui-angular/lib/banner/banner.component.ts","ng://igniteui-angular/lib/buttonGroup/buttonGroup.component.ts","ng://igniteui-angular/lib/core/dates/dateRange.ts","ng://igniteui-angular/lib/calendar/calendar.ts","ng://igniteui-angular/lib/calendar/calendar.directives.ts","ng://igniteui-angular/lib/calendar/calendar-base.ts","ng://igniteui-angular/lib/calendar/month-picker-base.ts","ng://igniteui-angular/lib/calendar/months-view/months-view.component.ts","ng://igniteui-angular/lib/calendar/years-view/years-view.component.ts","ng://igniteui-angular/lib/calendar/days-view/day-item.component.ts","ng://igniteui-angular/lib/calendar/days-view/days-view.component.ts","ng://igniteui-angular/lib/calendar/calendar.component.ts","ng://igniteui-angular/lib/calendar/month-picker/month-picker.component.ts","ng://igniteui-angular/lib/calendar/calendar.module.ts","ng://igniteui-angular/lib/card/card.component.ts","ng://igniteui-angular/lib/carousel/carousel.component.ts","ng://igniteui-angular/lib/checkbox/checkbox.component.ts","ng://igniteui-angular/lib/chips/chip.component.ts","ng://igniteui-angular/lib/chips/chips-area.component.ts","ng://igniteui-angular/lib/chips/chips.module.ts","ng://igniteui-angular/lib/combo/combo.directives.ts","ng://igniteui-angular/lib/combo/combo.api.ts","ng://igniteui-angular/lib/combo/combo-item.component.ts","ng://igniteui-angular/lib/combo/combo.common.ts","ng://igniteui-angular/lib/combo/combo-add-item.component.ts","ng://igniteui-angular/lib/combo/combo-dropdown.component.ts","ng://igniteui-angular/lib/combo/combo.pipes.ts","ng://igniteui-angular/lib/combo/combo.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.utils.ts","ng://igniteui-angular/lib/date-picker/date-picker.common.ts","ng://igniteui-angular/lib/date-picker/date-picker.pipes.ts","ng://igniteui-angular/lib/date-picker/date-picker.directives.ts","ng://igniteui-angular/lib/core/enums.ts","ng://igniteui-angular/lib/date-picker/calendar-container.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.component.ts","ng://igniteui-angular/lib/dialog/dialog.directives.ts","ng://igniteui-angular/lib/dialog/dialog.component.ts","ng://igniteui-angular/lib/core/grid-selection.ts","ng://igniteui-angular/lib/grids/cell.component.ts","ng://igniteui-angular/lib/grids/row.component.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.ts","ng://igniteui-angular/lib/grids/grid-column-resizing.service.ts","ng://igniteui-angular/lib/grids/grid.common.ts","ng://igniteui-angular/lib/grids/column.component.ts","ng://igniteui-angular/lib/grids/column-chooser-item-base.ts","ng://igniteui-angular/lib/grids/column-hiding-item.directive.ts","ng://igniteui-angular/lib/grids/column-chooser-base.ts","ng://igniteui-angular/lib/grids/column-hiding.component.ts","ng://igniteui-angular/lib/grids/column-pinning.component.ts","ng://igniteui-angular/lib/grids/grid-toolbar.component.ts","ng://igniteui-angular/lib/grids/grid/groupby-row.component.ts","ng://igniteui-angular/lib/grids/grid-navigation.service.ts","ng://igniteui-angular/lib/grids/grid.rowEdit.directive.ts","ng://igniteui-angular/lib/grids/filtering/svgIcons.ts","ng://igniteui-angular/lib/grids/grid/grid.pipes.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering.service.ts","ng://igniteui-angular/lib/grids/watch-changes.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-default-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-date-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-custom-dialog.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-sorting.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.component.ts","ng://igniteui-angular/lib/grids/grid-header.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-cell.component.ts","ng://igniteui-angular/lib/grids/grid-header-group.component.ts","ng://igniteui-angular/lib/core/i18n/grid-resources.ts","ng://igniteui-angular/lib/core/i18n/time-picker-resources.ts","ng://igniteui-angular/lib/core/i18n/resources.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.service.ts","ng://igniteui-angular/lib/grids/summaries/summary-cell.component.ts","ng://igniteui-angular/lib/grids/summaries/summary-row.component.ts","ng://igniteui-angular/lib/grids/drag-select.directive.ts","ng://igniteui-angular/lib/grids/grid-column-resizer.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-row.component.ts","ng://igniteui-angular/lib/grids/grid-base.component.ts","ng://igniteui-angular/lib/directives/template-outlet/template_outlet.directive.ts","ng://igniteui-angular/lib/grids/summaries/grid-root-summary.pipe.ts","ng://igniteui-angular/lib/progressbar/progressbar.common.ts","ng://igniteui-angular/lib/progressbar/progressbar.component.ts","ng://igniteui-angular/lib/grids/grid-common.pipes.ts","ng://igniteui-angular/lib/grids/grid-pipes.module.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-column-moving.component.ts","ng://igniteui-angular/lib/list/list.common.ts","ng://igniteui-angular/lib/core/touch.ts","ng://igniteui-angular/lib/list/list-item.component.ts","ng://igniteui-angular/lib/list/list.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.pipe.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.module.ts","ng://igniteui-angular/lib/grids/row-drag.directive.ts","ng://igniteui-angular/lib/grids/grid-common.module.ts","ng://igniteui-angular/lib/grids/grid/grid-api.service.ts","ng://igniteui-angular/lib/grids/grid/grid.directives.ts","ng://igniteui-angular/lib/grids/grid/grid.component.ts","ng://igniteui-angular/lib/grids/grid/grid-row.component.ts","ng://igniteui-angular/lib/grids/grid/grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/grid/grid.module.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.directives.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-row.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.pipes.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-cell.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.module.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/selection.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-base.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-api.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island-api.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/child-grid-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-cell.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.pipes.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.module.ts","ng://igniteui-angular/lib/navbar/navbar.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.directives.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.module.ts","ng://igniteui-angular/lib/slider/slider.component.ts","ng://igniteui-angular/lib/snackbar/snackbar.component.ts","ng://igniteui-angular/lib/switch/switch.component.ts","ng://igniteui-angular/lib/tabbar/tabbar.component.ts","ng://igniteui-angular/lib/tabs/tabs.common.ts","ng://igniteui-angular/lib/tabs/tab-item.component.ts","ng://igniteui-angular/lib/tabs/tabs.directives.ts","ng://igniteui-angular/lib/tabs/tabs-group.component.ts","ng://igniteui-angular/lib/tabs/tabs.component.ts","ng://igniteui-angular/lib/time-picker/time-picker.common.ts","ng://igniteui-angular/lib/time-picker/time-picker.directives.ts","ng://igniteui-angular/lib/time-picker/time-picker.pipes.ts","ng://igniteui-angular/lib/time-picker/time-picker.component.ts","ng://igniteui-angular/lib/toast/toast.component.ts","ng://igniteui-angular/lib/select/select-group.component.ts","ng://igniteui-angular/lib/select/select-item.component.ts","ng://igniteui-angular/lib/select/select-positioning-strategy.ts","ng://igniteui-angular/lib/select/select.component.ts","ng://igniteui-angular/lib/select/select-navigation.directive.ts","ng://igniteui-angular/lib/select/select.module.ts"],"sourcesContent":["enum EaseIn {\n    quad = `cubic-bezier(0.550, 0.085, 0.680, 0.530)` as any,\n    cubic = `cubic-bezier(0.550, 0.055, 0.675, 0.190)` as any,\n    quart = `cubic-bezier(0.895, 0.030, 0.685, 0.220)` as any,\n    quint = `cubic-bezier(0.755, 0.050, 0.855, 0.060)` as any,\n    sine = `cubic-bezier(0.470, 0.000, 0.745, 0.715)` as any,\n    expo = `cubic-bezier(0.950, 0.050, 0.795, 0.035)` as any,\n    circ = `cubic-bezier(0.600, 0.040, 0.980, 0.335)` as any,\n    back = `cubic-bezier(0.600, -0.280, 0.735, 0.045)` as any\n}\n\nenum EaseOut {\n    quad = `cubic-bezier(0.250, 0.460, 0.450, 0.940)` as any,\n    cubic = `cubic-bezier(0.215, 0.610, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.165, 0.840, 0.440, 1.000)` as any,\n    quint = `cubic-bezier(0.230, 1.000, 0.320, 1.000)` as any,\n    sine = `cubic-bezier(0.390, 0.575, 0.565, 1.000)` as any,\n    expo = `cubic-bezier(0.190, 1.000, 0.220, 1.000)` as any,\n    circ = `cubic-bezier(0.075, 0.820, 0.165, 1.000)` as any,\n    back = `cubic-bezier(0.175, 0.885, 0.320, 1.275)` as any\n}\n\nenum EaseInOut {\n    quad = `cubic-bezier(0.455, 0.030, 0.515, 0.955)` as any,\n    cubic = `cubic-bezier(0.645, 0.045, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.770, 0.000, 0.175, 1.000)` as any,\n    quint = `cubic-bezier(0.860, 0.000, 0.070, 1.000)` as any,\n    sine = `cubic-bezier(0.445, 0.050, 0.550, 0.950)` as any,\n    expo = `cubic-bezier(1.000, 0.000, 0.000, 1.000)` as any,\n    circ = `cubic-bezier(0.785, 0.135, 0.150, 0.860)` as any,\n    back = `cubic-bezier(0.680, -0.550, 0.265, 1.550)` as any\n}\n\nexport { EaseIn, EaseOut, EaseInOut };\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.sine,\n    endOpacity: 1,\n    startOpacity: 0\n};\n\nconst fadeIn: AnimationReferenceMetadata = animation(base, {\n    params: baseParams\n});\n\nconst fadeOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        delay: '0s',\n        duration: '350ms',\n        easing: EaseOut.sine,\n        endOpacity: 0,\n        startOpacity: 1\n    }\n});\n\nexport { fadeIn, fadeOut };\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        backfaceVisibility: 'hidden',\n        transformStyle: 'preserve-3d'\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)`\n            }),\n            style({\n                offset: 1,\n                transform: `translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 180,\n    endDistance: '0px',\n    rotateX: 1,\n    rotateY: 0,\n    rotateZ: 0,\n    startAngle: 0,\n    startDistance: '0px'\n};\n\nconst flipTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams\n    }\n});\n\nconst flipBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180\n    }\n});\n\nconst flipLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipHorFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px'\n    }\n});\n\nconst flipHorBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px'\n    }\n});\n\nconst flipVerFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipVerBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nexport {\n    flipTop,\n    flipRight,\n    flipBottom,\n    flipLeft,\n    flipHorFwd,\n    flipHorBck,\n    flipVerFwd,\n    flipVerBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            offset: 0,\n            opacity: `{{endOpacity}}`,\n            transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 0,\n    endOpacity: 1,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 1,\n    startAngle: -360,\n    startOpacity: 0,\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    startOpacity: 1\n};\n\nconst rotateInCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseInParams }\n});\n\nconst rotateOutCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseOutParams }\n});\n\nconst rotateInTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateOutTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateInRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateOutRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateInBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateOutBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateInLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateOutLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateInTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateInBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateInDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nexport {\n    rotateInCenter,\n    rotateInTop,\n    rotateInRight,\n    rotateInLeft,\n    rotateInBottom,\n    rotateInTr,\n    rotateInBr,\n    rotateInBl,\n    rotateInTl,\n    rotateInDiagonal1,\n    rotateInDiagonal2,\n    rotateInHor,\n    rotateInVer,\n    rotateOutCenter,\n    rotateOutTop,\n    rotateOutRight,\n    rotateOutLeft,\n    rotateOutBottom,\n    rotateOutTr,\n    rotateOutBr,\n    rotateOutBl,\n    rotateOutTl,\n    rotateOutDiagonal1,\n    rotateOutDiagonal2,\n    rotateOutHor,\n    rotateOutVer\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseInOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            }),\n            style({\n                offset: 0.1,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.2,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n            }),\n            style({\n                offset: 0.3,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.4,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.5,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.6,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.7,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.8,\n                transform: `rotate(-{{endAngle}}deg) translate{{direction}}({{endDistance}})`\n\n            }),\n            style({\n                offset: 0.9,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{endDistance}})`\n\n            }),\n            style({\n                offset: 1,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '800ms',\n    easing: EaseInOut.quad,\n    endAngle: 0,\n    endDistance: '8px',\n    startAngle: 0,\n    startDistance: '10px',\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst shakeHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'X'\n    }\n});\n\nconst shakeVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y'\n    }\n});\n\nconst shakeTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'top'\n    }\n});\n\nconst shakeBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'center'\n    }\n});\n\nconst shakeLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'center'\n    }\n});\n\nconst shakeCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 8,\n        endDistance: '0',\n        startAngle: 10,\n        startDistance: '0',\n        xPos: 'center',\n        yPos: 'center'\n    }\n});\n\nconst shakeTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst shakeBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nexport {\n    shakeHor,\n    shakeVer,\n    shakeTop,\n    shakeBottom,\n    shakeRight,\n    shakeLeft,\n    shakeCenter,\n    shakeTr,\n    shakeBr,\n    shakeBl,\n    shakeTl\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { IAnimationParams } from '../main';\n\nconst heartbeatBase: AnimationMetadata[] = [\n    style({\n        animationTimingFunction: `ease-out`,\n        transform: `scale(1)`,\n        transformOrigin: `center center`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.1,\n                transform: `scale(0.91)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.17,\n                transform: `scale(0.98)`\n            }),\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.33,\n                transform: `scale(0.87)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.45,\n                transform: `scale(1)`\n            })\n        ])\n    )\n];\n\nconst heartbeatParams: IAnimationParams = {\n    delay: '0s',\n    duration: '1.5s',\n    easing: 'ease-in-out'\n};\n\nconst pulsateBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.5,\n                transform: `scale({{toScale}})`\n            }),\n            style({\n                offset: 1,\n                transform: `scale({{fromScale}})`\n            })\n        ])\n    )\n];\n\nconst pulsateParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.5s',\n    easing: 'ease-in-out',\n    fromScale: 1,\n    toScale: 1.1\n};\n\nconst blinkBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                opacity: .8,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.8,\n                opacity: 0,\n                transform: `scale({{midScale}})`\n            }),\n            style({\n                offset: 1,\n                opacity: 0,\n                transform: `scale({{toScale}})`\n            })\n        ])\n    )\n];\n\nconst blinkParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.8s',\n    easing: 'ease-in-out',\n    fromScale: .2,\n    midScale: 1.2,\n    toScale: 2.2\n};\n\nconst pulsateFwd = animation(pulsateBase, {\n    params: {\n        ...pulsateParams\n    }\n});\n\nconst pulsateBck = animation(pulsateBase, {\n    params: {\n        ...pulsateParams,\n        toScale: .9\n    }\n});\n\nconst heartbeat = animation(heartbeatBase, {\n    params: {\n        ...heartbeatParams\n    }\n});\n\nconst blink = animation(blinkBase, {\n    params: {\n        ...blinkParams\n    }\n});\n\nexport {\n    heartbeat,\n    pulsateFwd,\n    pulsateBck,\n    blink\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `scale{{direction}}({{fromScale}})`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `scale{{direction}}({{toScale}})`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    direction: '',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromScale: .5,\n    startOpacity: 0,\n    toScale: 1,\n    xPos: '50%',\n    yPos: '50%'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseOut.sine,\n    endOpacity: 0,\n    fromScale: 1,\n    startOpacity: 1,\n    toScale: .5\n};\n\nconst scaleInCenter: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst scaleInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTr = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutCenter: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst scaleOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nexport {\n    scaleInTop,\n    scaleInRight,\n    scaleInBottom,\n    scaleInLeft,\n    scaleInCenter,\n    scaleInTr,\n    scaleInBr,\n    scaleInBl,\n    scaleInTl,\n    scaleInVerTop,\n    scaleInVerBottom,\n    scaleInVerCenter,\n    scaleInHorCenter,\n    scaleInHorLeft,\n    scaleInHorRight,\n    scaleOutTop,\n    scaleOutRight,\n    scaleOutBottom,\n    scaleOutLeft,\n    scaleOutCenter,\n    scaleOutTr,\n    scaleOutBr,\n    scaleOutBl,\n    scaleOutTl,\n    scaleOutVerTop,\n    scaleOutVerBottom,\n    scaleOutVerCenter,\n    scaleOutHorCenter,\n    scaleOutHorLeft,\n    scaleOutHorRight\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `{{fromPosition}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `{{toPosition}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromPosition: 'translateY(-500px)',\n    startOpacity: 0,\n    toPosition: 'translateY(0)'\n};\n\nconst baseOutParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    fromPosition: 'translateY(0)',\n    startOpacity: 1,\n    toPosition: 'translateY(-500px)'\n};\n\nconst slideInTop: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst slideInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(-500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateY(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideOutTop: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst slideOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseIn.quad,\n            endOpacity: 0,\n            fromPosition: 'translateY(0)',\n            startOpacity: 1,\n            toPosition: 'translateY(500px)'\n        }\n    }\n);\n\nconst slideOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(-500px)'\n        }\n    }\n);\n\nexport {\n    slideInTop,\n    slideInRight,\n    slideInBottom,\n    slideInLeft,\n    slideInTr,\n    slideInBr,\n    slideInBl,\n    slideInTl,\n    slideOutTop,\n    slideOutBottom,\n    slideOutRight,\n    slideOutLeft,\n    slideOutTr,\n    slideOutBr,\n    slideOutBl,\n    slideOutTl\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst swingBase: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate{{direction}}({{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `rotate{{direction}}({{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst swingParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '.5s',\n    easing: EaseOut.back,\n    endAngle: 0,\n    endOpacity: 1,\n    startAngle: -100,\n    startOpacity: 0,\n    xPos: 'top',\n    yPos: 'center'\n};\n\nconst swingOutParams: IAnimationParams = {\n    ...swingParams,\n    duration: '.55s',\n    easing: EaseIn.back,\n    endAngle: 70,\n    endOpacity: 0,\n    startAngle: 0,\n    startOpacity: 1\n};\n\nconst swingInTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams\n    }\n});\n\nconst swingInRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        startAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        startAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingInTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: 70\n    }\n});\n\nconst swingInRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: 70,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams\n    }\n});\n\nconst swingOutRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        endAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLefttFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        endAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: -100\n    }\n});\n\nconst swingOutRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: -100,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nexport {\n    swingInTopFwd,\n    swingInRightFwd,\n    swingInLeftFwd,\n    swingInBottomFwd,\n    swingInTopBck,\n    swingInRightBck,\n    swingInBottomBck,\n    swingInLeftBck,\n    swingOutTopFwd,\n    swingOutRightFwd,\n    swingOutBottomFwd,\n    swingOutLefttFwd,\n    swingOutTopBck,\n    swingOutRightBck,\n    swingOutBottomBck,\n    swingOutLeftBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut, EaseIn } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{ startOpacity }}`,\n        height: `{{ startHeight }}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{ endOpacity }}`,\n            height: `{{ endHeight }}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    startOpacity: 0,\n    endOpacity: 1,\n    startHeight: '',\n    endHeight: ''\n};\n\nconst growVerIn: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 0,\n        endOpacity: 1,\n        startHeight: '0px',\n        endHeight: '*'\n    }\n});\n\nconst growVerOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 1,\n        endOpacity: 0,\n        startHeight: '*',\n        endHeight: '0px'\n    }\n});\n\nexport { growVerIn, growVerOut };\n","import { IToggleView } from './IToggleView';\n\n/**\n * Common service to be injected between components where those implementing common\n * ToggleView interface can register and toggle directives can call their methods.\n * TODO: Track currently active? Events?\n */\nexport class IgxNavigationService {\n    private navs: { [id: string]: IToggleView; };\n\n    constructor() {\n        this.navs = {};\n    }\n\n    public add(id: string, navItem: IToggleView) {\n        this.navs[id] = navItem;\n    }\n\n    public remove(id: string) {\n        delete this.navs[id];\n    }\n\n    public get(id: string): IToggleView {\n        if (id) {\n            return this.navs[id];\n        }\n    }\n\n    public toggle(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].toggle(...args);\n        }\n    }\n    public open(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].open(...args);\n        }\n    }\n    public close(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].close(...args);\n        }\n    }\n}\n","import { Directive, HostListener, Input, NgModule } from '@angular/core';\nimport {IgxNavigationService} from './nav.service';\n\n/**\n * Directive that can toggle targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavToggle=\"ID\"> Toggle </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavToggle]' })\nexport class IgxNavigationToggleDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavToggle') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public toggleNavigationDrawer() {\n        this.state.toggle(this.target, true);\n    }\n}\n\n/**\n * Directive that can close targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavClose=\"ID\"> Close </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavClose]' })\nexport class IgxNavigationCloseDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavClose') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public closeNavigationDrawer() {\n        this.state.close(this.target, true);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxNavigationModule {}\n","/**\n *@hidden\n */\nexport function cloneArray(array, deep?: boolean) {\n    const arr = [];\n    if (!array) {\n        return arr;\n    }\n    let i = array.length;\n    while (i--) {\n        arr[i] = deep ? cloneValue(array[i]) : array[i];\n    }\n    return arr;\n}\n\n/**\n * Doesn't clone leaf items\n * @hidden\n */\nexport function cloneHierarchicalArray(array: any[], childDataKey: any): any[] {\n    const result: any[] = [];\n    if (!array) {\n        return result;\n    }\n\n    for (const item of array) {\n        const clonedItem = cloneValue(item);\n        if (Array.isArray(item[childDataKey])) {\n            clonedItem[childDataKey] = cloneHierarchicalArray(clonedItem[childDataKey], childDataKey);\n        }\n        result.push(clonedItem);\n    }\n    return result;\n}\n\n/**\n * Deep clones all first level keys of Obj2 and merges them to Obj1\n * @param obj1 Object to merge into\n * @param obj2 Object to merge from\n * @returns Obj1 with merged cloned keys from Obj2\n * @hidden\n */\nexport function mergeObjects(obj1: {}, obj2: {}): any {\n    if (!isObject(obj1)) {\n        throw new Error(`Cannot merge into ${obj1}. First param must be an object.`);\n    }\n\n    if (!isObject(obj2)) {\n        return obj1;\n    }\n\n    for (const key of Object.keys(obj2)) {\n        obj1[key] = cloneValue(obj2[key]);\n    }\n\n    return obj1;\n}\n\n/**\n * Creates deep clone of provided value.\n * Supports primitive values, dates and objects.\n * If passed value is array returns shallow copy of the array.\n * @param value value to clone\n * @returns Deep copy of provided value\n *@hidden\n */\nexport function cloneValue(value: any): any {\n    if (isDate(value)) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return [...value];\n    }\n\n    if (value instanceof Map || value instanceof Set) {\n        return value;\n    }\n\n    if (isObject(value)) {\n        const result = {};\n\n        for (const key of Object.keys(value)) {\n            result[key] = cloneValue(value[key]);\n        }\n        return result;\n    }\n    return value;\n}\n\n/**\n * Checks if provided variable is Object\n * @param value Value to check\n * @returns true if provided variable is Object\n *@hidden\n */\nexport function isObject(value: any): boolean {\n    return value && value.toString() === '[object Object]';\n}\n\n/**\n * Checks if provided variable is Date\n * @param value Value to check\n * @returns true if provided variable is Date\n *@hidden\n */\nexport function isDate(value: any) {\n    return Object.prototype.toString.call(value) === '[object Date]';\n}\n\n/**\n * Checks if the two passed arguments are equal\n * Currently supports date objects\n * @param obj1\n * @param obj2\n * @returns: `boolean`\n * @hidden\n */\nexport function isEqual(obj1, obj2): boolean {\n    if (isDate(obj1) && isDate(obj2)) {\n        return obj1.getTime() === obj2.getTime();\n    }\n    return obj1 === obj2;\n}\n\n/**\n *@hidden\n */\nexport const enum KEYCODES {\n    ENTER = 13,\n    SPACE = 32,\n    ESCAPE = 27,\n    LEFT_ARROW = 37,\n    UP_ARROW = 38,\n    RIGHT_ARROW = 39,\n    DOWN_ARROW = 40,\n    F2 = 113,\n    TAB = 9\n}\n\n/**\n *@hidden\n */\nexport const enum KEYS {\n    ENTER = 'Enter',\n    SPACE = ' ',\n    SPACE_IE = 'Spacebar',\n    ESCAPE = 'Escape',\n    ESCAPE_IE = 'Esc',\n    LEFT_ARROW = 'ArrowLeft',\n    LEFT_ARROW_IE = 'Left',\n    UP_ARROW = 'ArrowUp',\n    UP_ARROW_IE = 'Up',\n    RIGHT_ARROW = 'ArrowRight',\n    RIGHT_ARROW_IE = 'Right',\n    DOWN_ARROW = 'ArrowDown',\n    DOWN_ARROW_IE = 'Down',\n    F2 = 'F2',\n    TAB = 'Tab'\n}\n\n/**\n *@hidden\n* Returns the actual size of the node content, using Range\n* ```typescript\n* let range = document.createRange();\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = getNodeSizeViaRange(range, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaRange(range: Range, node: any): number {\n    let overflow = null;\n    if (isIE() || isEdge()) {\n        overflow = node.style.overflow;\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = 'visible';\n    }\n\n    range.selectNodeContents(node);\n    const width = range.getBoundingClientRect().width;\n\n    if (isIE() || isEdge()) {\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = overflow;\n    }\n\n    return width;\n}\n/**\n *@hidden\n* Returns the actual size of the node content, using Canvas\n* ```typescript\n* let ctx = document.createElement('canvas').getContext('2d');\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = valToPxlsUsingCanvas(ctx, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaCanvas(canvas2dCtx: any, node: any): number {\n    const s = this.grid.document.defaultView.getComputedStyle(node);\n\n    // need to set the font to get correct width\n    canvas2dCtx.font = s.fontSize + ' ' + s.fontFamily;\n\n    return canvas2dCtx.measureText(node.textContent).width;\n}\n/**\n *@hidden\n */\nexport function isIE(): boolean {\n    return navigator.appVersion.indexOf('Trident/') > 0;\n}\n/**\n *@hidden\n */\nexport function isEdge(): boolean {\n    const edgeBrowser = /Edge[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return edgeBrowser;\n}\n\n/**\n *@hidden\n */\nexport function isFirefox(): boolean {\n    const firefoxBrowser = /Firefox[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return firefoxBrowser;\n}\n\n/** @hidden */\nexport function isNavigationKey(key: string): boolean {\n    return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright',\n        'home', 'end', 'space', 'spacebar', ' '].indexOf(key) !== -1;\n}\n\n/**\n *@hidden\n */\nexport function flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            const children = Array.isArray(el.children) ? el.children : el.children.toArray();\n            result = result.concat(flatten(children));\n        }\n    });\n    return result;\n}\n\nexport interface CancelableEventArgs {\n    /**\n     * Provides the ability to cancel the event.\n     */\n    cancel: boolean;\n}\n\nexport interface CancelableBrowserEventArgs extends CancelableEventArgs {\n    /** Browser event */\n    event?: Event;\n}\n\nexport const NAVIGATION_KEYS = new Set(['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright',\n                                'home', 'end', 'space', 'spacebar', ' ']);\nexport const ROW_EXPAND_KEYS = new Set('right down arrowright arrowdown'.split(' '));\nexport const ROW_COLLAPSE_KEYS = new Set('left up arrowleft arrowup'.split(' '));\nexport const SUPPORTED_KEYS = new Set([...Array.from(NAVIGATION_KEYS), 'tab', 'enter', 'f2', 'escape', 'esc']);\n","import { ISortingStrategy } from './sorting-strategy';\n\n/**\n * Represents sorting expressions.\n */\nexport enum SortingDirection {\n    None = 0,\n    Asc = 1,\n    Desc = 2\n}\n\nexport interface ISortingExpression {\n   fieldName: string;\n   dir: SortingDirection;\n   ignoreCase?: boolean;\n   strategy?: ISortingStrategy;\n}\n","import { cloneArray } from '../core/utils';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression, SortingDirection } from './sorting-expression.interface';\nimport { IGroupingExpression } from './grouping-expression.interface';\n\nexport interface ISortingStrategy {\n    sort: (data: any[],\n           fieldName: string,\n           dir: SortingDirection,\n           ignoreCase: boolean,\n           valueResolver: (obj: any, key: string) => any) => any[];\n}\n\nexport class DefaultSortingStrategy implements ISortingStrategy {\n    private static _instance: DefaultSortingStrategy = null;\n\n    protected constructor() {}\n\n    public static instance(): DefaultSortingStrategy {\n        return this._instance || (this._instance = new this());\n    }\n\n    public sort(data: any[],\n                fieldName: string,\n                dir: SortingDirection,\n                ignoreCase: boolean,\n                valueResolver: (obj: any, key: string) => any) {\n        const key = fieldName;\n        const reverse = (dir === SortingDirection.Desc ? -1 : 1);\n        const cmpFunc = (obj1, obj2) => {\n            return this.compareObjects(obj1, obj2, key, reverse, ignoreCase, valueResolver);\n        };\n        return this.arraySort(data, cmpFunc);\n    }\n\n    public compareValues(a: any, b: any) {\n        const an = (a === null || a === undefined);\n        const bn = (b === null || b === undefined);\n        if (an) {\n            if (bn) {\n                return 0;\n            }\n            return -1;\n        } else if (bn) {\n            return 1;\n        }\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n\n    protected compareObjects(obj1: object,\n                             obj2: object,\n                             key: string,\n                             reverse: number,\n                             ignoreCase: boolean,\n                             valueResolver: (obj: any, key: string) => any) {\n        let a = valueResolver(obj1, key);\n        let b = valueResolver(obj2, key);\n        if (ignoreCase) {\n            a = a && a.toLowerCase ? a.toLowerCase() : a;\n            b = b && b.toLowerCase ? b.toLowerCase() : b;\n        }\n        return reverse * this.compareValues(a, b);\n    }\n\n    protected arraySort(data: any[], compareFn?): any[] {\n        return data.sort(compareFn);\n    }\n}\n\nexport class IgxSorting {\n    public sort(data: any[], expressions: ISortingExpression[]): any[] {\n        return this.sortDataRecursive(data, expressions);\n    }\n\n    private groupedRecordsByExpression(data: any[],\n            index: number,\n            expression: IGroupingExpression): any[] {\n        let i;\n        let groupval;\n        const res = [];\n        const key = expression.fieldName;\n        const len = data.length;\n        res.push(data[index]);\n        groupval = this.getFieldValue(data[index], key);\n        index++;\n        const comparer = expression.groupingComparer || DefaultSortingStrategy.instance().compareValues;\n        for (i = index; i < len; i++) {\n            if (comparer(this.getFieldValue(data[i], key), groupval) === 0) {\n                res.push(data[i]);\n            } else {\n                break;\n            }\n        }\n        return res;\n    }\n    private sortDataRecursive<T>(data: T[],\n                                 expressions: ISortingExpression[],\n                                 expressionIndex: number = 0): T[] {\n        let i;\n        let j;\n        let expr: ISortingExpression;\n        let gbData;\n        let gbDataLen;\n        const exprsLen = expressions.length;\n        const dataLen = data.length;\n        expressionIndex = expressionIndex || 0;\n        if (expressionIndex >= exprsLen || dataLen <= 1) {\n            return data;\n        }\n        expr = expressions[expressionIndex];\n        if (!expr.strategy) {\n            expr.strategy = DefaultSortingStrategy.instance();\n        }\n        data = expr.strategy.sort(data, expr.fieldName, expr.dir, expr.ignoreCase, this.getFieldValue);\n        if (expressionIndex === exprsLen - 1) {\n            return data;\n        }\n        // in case of multiple sorting\n        for (i = 0; i < dataLen; i++) {\n            gbData = this.groupedRecordsByExpression(data, i, expr);\n            gbDataLen = gbData.length;\n            if (gbDataLen > 1) {\n                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);\n            }\n            for (j = 0; j < gbDataLen; j++) {\n                data[i + j] = gbData[j];\n            }\n            i += gbDataLen - 1;\n        }\n        return data;\n    }\n    protected groupDataRecursive<T>(data: T[], expressions: ISortingExpression[], level: number,\n        parent: IGroupByRecord, metadata: IGroupByRecord[], grid: any = null, groupsRecords: any[] = []): T[] {\n        let i = 0;\n        let result = [];\n        while (i < data.length) {\n            const group = this.groupedRecordsByExpression(data, i, expressions[level]);\n            const groupRow: IGroupByRecord = {\n                expression: expressions[level],\n                level,\n                records: cloneArray(group),\n                value: group[0][expressions[level].fieldName],\n                groupParent: parent,\n                groups: [],\n                height: grid ? grid.rowHeight : null\n            };\n            if (parent) {\n                parent.groups.push(groupRow);\n            } else {\n                groupsRecords.push(groupRow);\n            }\n            if (level < expressions.length - 1) {\n                result = result.concat(this.groupDataRecursive(group, expressions, level + 1, groupRow, metadata, grid, groupsRecords));\n            } else {\n                for (const groupItem of group) {\n                    metadata.push(groupRow);\n                    result.push(groupItem);\n                }\n            }\n            i += group.length;\n        }\n        return result;\n    }\n    protected getFieldValue(obj: any, key: string): any {\n        return obj[key];\n    }\n}\n\nexport class IgxDataRecordSorting extends IgxSorting {\n    protected getFieldValue(obj: any, key: string): any {\n        return obj.data[key];\n    }\n}\n","import { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression } from './sorting-expression.interface';\nimport { IgxSorting } from './sorting-strategy';\n\nexport interface IGroupByResult {\n    data: any[];\n    metadata: IGroupByRecord[];\n}\n\nexport class IgxGrouping extends IgxSorting {\n    public groupBy(data: any[], expressions: ISortingExpression[], grid?: any, groupsRecords?: any[]): IGroupByResult {\n        const metadata: IGroupByRecord[] = [];\n        const grouping = this.groupDataRecursive(data, expressions, 0, null, metadata, grid, groupsRecords);\n        return {\n            data: grouping,\n            metadata: metadata\n        };\n    }\n}\n\n","export enum PagingError {\n    None,\n    IncorrectPageIndex,\n    IncorrectRecordsPerPage\n}\n\nexport declare interface IPagingState {\n    index: number;\n    recordsPerPage: number;\n    metadata?: {\n        countPages: number;\n        error: PagingError;\n        countRecords: number;\n    };\n}\n","import { IFilteringExpression, FilteringLogic } from './filtering-expression.interface';\n\nexport declare interface IFilteringExpressionsTree {\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[];\n    operator: FilteringLogic;\n    fieldName?: string;\n\n    find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression;\n    findIndex(fieldName: string): number;\n}\n\nexport class FilteringExpressionsTree implements IFilteringExpressionsTree {\n\n    /**\n     * Sets/gets the filtering operands.\n     * ```typescript\n     * const gridExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n     * const expression = [\n     * {\n     *   condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *   fieldName: 'Column Field',\n     *   searchVal: 'Value',\n     *   ignoreCase: false\n     * }];\n     * gridExpressionsTree.filteringOperands.push(expression);\n     * this.grid.filteringExpressionsTree = gridExpressionsTree;\n     * ```\n     * ```typescript\n     * let filteringOperands = gridExpressionsTree.filteringOperands;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[] = [];\n\n    /**\n     * Sets/gets the operator.\n     * ```typescript\n     * gridExpressionsTree.operator = FilteringLogic.And;\n     * ```\n     * ```typescript\n     * let operator = gridExpressionsTree.operator;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    operator: FilteringLogic;\n\n    /**\n     * Sets/gets the field name of the column where the filtering expression is placed.\n     * ```typescript\n     *  gridExpressionTree.fieldName = 'Column Field';\n     * ```\n     * ```typescript\n     * let columnField = expressionTree.fieldName;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    fieldName?: string;\n\n    constructor(operator: FilteringLogic, fieldName?: string) {\n        this.operator = operator;\n        this.fieldName = fieldName;\n    }\n\n    /**\n     * Returns the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpression = gridExpressionTree.find('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression {\n        const index = this.findIndex(fieldName);\n\n        if (index > -1) {\n            return this.filteringOperands[index];\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the index of the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpressionIndex = gridExpressionTree.findIndex('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public findIndex(fieldName: string): number {\n        let expr;\n        for (let i = 0; i < this.filteringOperands.length; i++) {\n            expr = this.filteringOperands[i];\n            if (expr instanceof FilteringExpressionsTree) {\n                if (this.isFilteringExpressionsTreeForColumn(expr, fieldName)) {\n                    return i;\n                }\n            } else {\n                if ((expr as IFilteringExpression).fieldName === fieldName) {\n                    return i;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    protected isFilteringExpressionsTreeForColumn(expressionsTree: IFilteringExpressionsTree, fieldName: string): boolean {\n        if (expressionsTree.fieldName === fieldName) {\n            return true;\n        }\n\n        let expr;\n        for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n            expr = expressionsTree.filteringOperands[i];\n            if ((expr instanceof FilteringExpressionsTree)) {\n                return this.isFilteringExpressionsTreeForColumn(expr, fieldName);\n            } else {\n                return (expr as IFilteringExpression).fieldName === fieldName;\n            }\n        }\n\n        return false;\n    }\n}\n","import { EventEmitter } from '@angular/core';\n\nexport enum TransactionType {\n    ADD = 'add',\n    DELETE = 'delete',\n    UPDATE = 'update'\n}\n\nexport interface Transaction {\n    id: any;\n    type: TransactionType;\n    newValue: any;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalTransaction extends Transaction {\n    path: any[];\n}\n\nexport interface State {\n    value: any;\n    recordRef: any;\n    type: TransactionType;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalState extends State {\n    path: any[];\n}\n\nexport interface TransactionService<T extends Transaction, S extends State> {\n    /**\n     * Returns whether transaction is enabled for this service\n     */\n    readonly enabled: boolean;\n\n    /**\n     * Event fired when transaction state has changed - add transaction, commit all transactions, undo and redo\n     */\n    onStateUpdate?: EventEmitter<void>;\n\n    /**\n     * @returns if there are any transactions in the Undo stack\n     */\n    canUndo: boolean;\n\n    /**\n     * @returns if there are any transactions in the Redo stack\n     */\n    canRedo: boolean;\n\n    /**\n     * Adds provided  transaction with recordRef if any\n     * @param transaction Transaction to be added\n     * @param recordRef Reference to the value of the record in the data source related to the changed item\n     */\n    add(transaction: T, recordRef?: any): void;\n\n    /**\n     * Returns all recorded transactions in chronological order\n     * @param id Optional record id to get transactions for\n     * @returns All transaction in the service or for the specified record\n     */\n    getTransactionLog(id?: any): T[];\n\n    /**\n     * Remove the last transaction if any\n     */\n    undo(): void;\n\n    /**\n     * Applies the last undone transaction if any\n     */\n    redo(): void;\n\n    /**\n     * Returns aggregated changes from all transactions\n     * @param mergeChanges If set to true will merge each state's value over relate recordRef\n     * and will record resulting value in the related transaction\n     * @returns Collection of aggregated transactions for each changed record\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[];\n\n    /**\n     * Returns the state of the record with provided id\n     * @param id The id of the record\n     * @returns State of the record if any\n     */\n    getState(id: any): S;\n\n    /**\n     * Returns value of the required id including all uncommitted changes\n     * @param id The id of the record to return value for\n     * @param mergeChanges If set to true will merge state's value over relate recordRef\n     * and will return merged value\n     * @returns Value with changes or **null**\n     */\n    getAggregatedValue(id: any, mergeChanges: boolean): any;\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     */\n    commit(data: any[]): void;\n\n    /**\n     * Clears all transactions\n     */\n    clear(): void;\n\n    /**\n     * Starts pending transactions. All transactions passed after call to startPending\n     * will not be added to transaction log\n     */\n    startPending(): void;\n\n    /**\n     * Clears all pending transactions and aggregated pending state. If commit is set to true\n     * commits pending states as single transaction\n     * @param commit Should commit the pending states\n     */\n    endPending(commit: boolean): void;\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { cloneArray, isEqual, mergeObjects } from '../core/utils';\nimport { DataUtil, DataType } from '../data-operations/data-util';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression, SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxRowComponent } from './row.component';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { Transaction, TransactionType, State } from '../services/transaction/transaction';\nimport { IgxCell, IgxRow } from '../core/grid-selection';\n/**\n *@hidden\n */\n@Injectable()\nexport class GridBaseAPIService <T extends IgxGridBaseComponent & IGridDataBindable> {\n\n    grid: T;\n    protected editCellState: Map<string, any> = new Map<string, any>();\n    protected editRowState: Map<string, { rowID: any, rowIndex: number }> = new Map();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    public get_column_by_name(name: string): IgxColumnComponent {\n        return this.grid.columnList.find((col) => col.field === name);\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        let data = grid.filteredData;\n        if (!data) {\n            if (grid.transactions.enabled) {\n                data = DataUtil.mergeTransactions(\n                    cloneArray(grid.data),\n                    grid.transactions.getAggregatedChanges(true),\n                    grid.primaryKey\n                );\n                const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n                deletedRows.forEach(rowID => {\n                    const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                    const index = tempData.indexOf(rowID);\n                    if (index !== -1) {\n                       data.splice(index, 1);\n                    }\n                });\n            } else {\n                data = grid.data;\n            }\n        }\n        return data;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getRowData(rowID: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(rowID);\n        return data[index];\n    }\n\n    // TODO: Refactor\n    public escape_editMode() {\n        this.grid.crudService.end();\n        this.grid.refreshSearch();\n    }\n\n    // TODO: Refactor\n    public get_cell_inEditMode(): IgxCell {\n        return this.grid.crudService.cell;\n    }\n\n    public get_row_index_in_data(rowID: any): number {\n        const grid = this.grid as IgxGridBaseComponent;\n        if (!grid) {\n            return -1;\n        }\n        const data = this.get_all_data(grid.transactions.enabled);\n        return grid.primaryKey ? data.findIndex(record => record[grid.primaryKey] === rowID) : data.indexOf(rowID);\n    }\n\n    public get_row_by_key(rowSelector: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        const primaryKey = this.grid.primaryKey;\n        if (primaryKey !== undefined && primaryKey !== null) {\n            return this.grid.dataRowList.find((row) => row.rowData[primaryKey] === rowSelector);\n        } else {\n            return this.grid.dataRowList.find((row) => row.rowData === rowSelector);\n        }\n    }\n\n    public get_row_by_index(rowIndex: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.grid.rowList.find((row) => row.index === rowIndex);\n    }\n\n    public get_cell_by_key(rowSelector: any, field: string): IgxGridCellComponent {\n        const row = this.get_row_by_key(rowSelector);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.column.field === field);\n        }\n    }\n\n    public get_cell_by_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.columnIndex === columnIndex);\n        }\n    }\n\n    public get_cell_by_visible_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.visibleColumnIndex === columnIndex);\n        }\n    }\n\n    public submit_value() {\n        const cell = this.grid.crudService.cell;\n        if (cell) {\n            const args = this.update_cell(cell, cell.editValue);\n            if (args.cancel) {\n                return;\n            }\n            this.escape_editMode();\n        }\n    }\n\n    update_cell(cell: IgxCell, value: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(cell.id.rowID);\n\n        cell.editValue = value;\n\n        const valueInTransactions = this.grid.transactions.getAggregatedValue(cell.id.rowID, true);\n        if (valueInTransactions) {\n            cell.value = valueInTransactions[cell.column.field];\n            cell.rowData = valueInTransactions;\n        }\n\n        const args = cell.createEditEventArgs();\n\n\n        this.grid.onCellEdit.emit(args);\n        if (args.cancel) {\n            return args;\n        }\n\n        // Cast to number after emit\n        // TODO: Clean up this\n        args.newValue = cell.castToNumber(args.newValue);\n\n        if (isEqual(args.oldValue, args.newValue)) {\n            return args;\n        }\n        this.grid.summaryService.clearSummaryCache(args);\n        this.updateData(this.grid, cell.id.rowID, data[index], cell.rowData, { [cell.column.field ]: args.newValue });\n        if (this.grid.primaryKey === cell.column.field) {\n            if (this.grid.selection.is_item_selected(this.grid.id, cell.id.rowID)) {\n                this.grid.selection.deselect_item(this.grid.id, cell.id.rowID);\n                this.grid.selection.select_item(this.grid.id, args.newValue);\n            }\n            if (this.grid.hasSummarizedColumns) {\n                this.grid.summaryService.removeSummaries(cell.id.rowID);\n            }\n        }\n        if (!this.grid.rowEditable || !this.grid.crudService.row ||\n                this.grid.crudService.row.id !== cell.id.rowID || !this.grid.transactions.enabled) {\n            this.grid.summaryService.clearSummaryCache(args);\n            (this.grid as any)._pipeTrigger++;\n        }\n\n        return args;\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(grid, rowID, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {[x: string]: any}) {\n        if (grid.transactions.enabled) {\n            const transaction: Transaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    _update_row(row: IgxRow, value?: any) {\n        const grid = this.grid;\n\n        const rowInEditMode = grid.crudService.row;\n        row.newData = value ? value : grid.transactions.getAggregatedValue(row.id, true);\n\n\n        if (rowInEditMode && row.id === rowInEditMode.id) {\n            row.data = { ...row.data, ...rowInEditMode.transactionState };\n        // TODO: Workaround for updating a row in edit mode through the API\n        } else if (this.grid.transactions.enabled) {\n            const lastCommitedValue = grid.transactions.getState(row.id) ?\n                grid.transactions.getState(row.id).value : null;\n            row.data = lastCommitedValue ? Object.assign(row.data, lastCommitedValue) : row.data;\n        }\n    }\n\n    update_row(row: IgxRow, value: any) {\n        const grid = this.grid;\n        const selected = grid.selection.is_item_selected(grid.id, row.id);\n        const rowInEditMode = grid.crudService.row;\n        const data = this.get_all_data(grid.transactions.enabled);\n        const index = this.get_row_index_in_data(row.id);\n        const hasSummarized = grid.hasSummarizedColumns;\n\n        this._update_row(row, value);\n\n        const args = row.createEditEventArgs();\n\n        // If no valid row is found\n        if (index === -1) {\n            return args;\n        }\n\n        grid.onRowEdit.emit(args);\n\n        if (args.cancel) {\n            return args;\n        }\n\n        if (rowInEditMode) {\n            grid.transactions.endPending(false);\n        }\n\n        if (!args.newValue) {\n            return args;\n        }\n\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(args.rowID);\n        }\n\n        this.updateData(grid, row.id, data[index], args.oldValue, args.newValue);\n        const newId = grid.primaryKey ? args.newValue[grid.primaryKey] : args.newValue;\n        if (selected) {\n            grid.selection.deselect_item(grid.id, row.id);\n            grid.selection.select_item(grid.id, newId);\n        }\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(newId);\n        }\n        (grid as any)._pipeTrigger++;\n\n        return args;\n    }\n\n\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        grid.data[index] = value;\n    }\n\n    public sort(expression: ISortingExpression): void {\n        if (expression.dir === SortingDirection.None) {\n            this.remove_grouping_expression(expression.fieldName);\n        }\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState], expression);\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public sort_multiple(expressions: ISortingExpression[]): void {\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            if (each.dir === SortingDirection.None) {\n                this.remove_grouping_expression(each.fieldName);\n            }\n            this.prepare_sorting_expression([sortingState], each);\n        }\n\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public filter(fieldName: string, term, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase: boolean) {\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        const fieldFilterIndex = filteringTree.findIndex(fieldName);\n        if (fieldFilterIndex > -1) {\n            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);\n        }\n\n        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase, fieldFilterIndex);\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public filter_global(term, condition, ignoreCase) {\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        filteringTree.filteringOperands = [];\n        if (condition) {\n            for (const column of grid.columns) {\n                this.prepare_filtering_expression(filteringTree, column.field, term,\n                    condition, ignoreCase || column.filteringIgnoreCase);\n            }\n        }\n\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public clear_filter(fieldName: string) {\n        if (fieldName) {\n            const column = this.get_column_by_name(fieldName);\n            if (!column) {\n                return;\n            }\n        }\n\n        const grid = this.grid;\n        grid.endEdit(false);\n        const filteringState = grid.filteringExpressionsTree;\n        const index = filteringState.findIndex(fieldName);\n\n        if (index > -1) {\n            filteringState.filteringOperands.splice(index, 1);\n        } else if (!fieldName) {\n            filteringState.filteringOperands = [];\n        }\n\n        grid.filteringExpressionsTree = filteringState;\n    }\n\n    public clear_sort(fieldName: string) {\n        const sortingState = this.grid.sortingExpressions;\n        const index = sortingState.findIndex((expr) => expr.fieldName === fieldName);\n        if (index > -1) {\n            sortingState.splice(index, 1);\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    protected prepare_filtering_expression(filteringState: IFilteringExpressionsTree, fieldName: string, searchVal,\n        conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean, insertAtIndex = -1) {\n\n        let newExpressionsTree;\n        const oldExpressionsTreeIndex = filteringState.findIndex(fieldName);\n        const expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            conditionOrExpressionsTree as IFilteringExpressionsTree : null;\n        const condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            null : conditionOrExpressionsTree as IFilteringOperation;\n        const newExpression: IFilteringExpression = { fieldName, searchVal, condition, ignoreCase };\n\n        if (oldExpressionsTreeIndex === -1) {\n            // no expressions tree found for this field\n            if (expressionsTree) {\n                if (insertAtIndex > -1) {\n                    filteringState.filteringOperands.splice(insertAtIndex, 0, expressionsTree);\n                } else {\n                    filteringState.filteringOperands.push(expressionsTree);\n                }\n            } else if (condition) {\n                // create expressions tree for this field and add the new expression to it\n                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);\n                newExpressionsTree.filteringOperands.push(newExpression);\n                filteringState.filteringOperands.push(newExpressionsTree);\n            }\n        }\n    }\n\n    protected prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression) {\n        if (expression.dir === SortingDirection.None) {\n            stateCollections.forEach(state => {\n                state.splice(state.findIndex((expr) => expr.fieldName === expression.fieldName), 1);\n            });\n            return;\n        }\n\n        /**\n         * We need to make sure the states in each collection with same fields point to the same object reference.\n         * If the different state collections provided have different sizes we need to get the largest one.\n         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.\n         */\n        let maxCollection = stateCollections[0];\n        for (let i = 1; i < stateCollections.length; i++) {\n            if (maxCollection.length < stateCollections[i].length) {\n                maxCollection = stateCollections[i];\n            }\n        }\n        const maxExpr = maxCollection.find((expr) => expr.fieldName === expression.fieldName);\n\n        stateCollections.forEach(collection => {\n            const myExpr = collection.find((expr) => expr.fieldName === expression.fieldName);\n            if (!myExpr && !maxExpr) {\n                // Expression with this fieldName is missing from the current and the max collection.\n                collection.push(expression);\n            } else if (!myExpr && maxExpr) {\n                // Expression with this fieldName is missing from the current and but the max collection has.\n                collection.push(maxExpr);\n                Object.assign(maxExpr, expression);\n            } else {\n                // The current collection has the expression so just update it.\n                Object.assign(myExpr, expression);\n            }\n        });\n    }\n\n    protected remove_grouping_expression(fieldName) {\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number;\n    }\n\n    public get_data(): any[] {\n        const grid = this.grid;\n        const data = grid.data ? grid.data : [];\n        return data;\n    }\n\n    public get_all_data(includeTransactions = false): any[] {\n        const grid = this.grid;\n        let data = grid.data ? grid.data : [];\n        data = includeTransactions ? grid.dataWithAddedInTransactionRows : data;\n        return data;\n    }\n\n    public get_filtered_data(): any[] {\n        return this.grid.filteredData;\n    }\n\n    protected getSortStrategyPerColumn(fieldName: string) {\n        return this.get_column_by_name(fieldName) ?\n            this.get_column_by_name(fieldName).sortStrategy : undefined;\n    }\n\n    public addRowToData(rowData: any) {\n        // Add row goes to transactions and if rowEditable is properly implemented, added rows will go to pending transactions\n        // If there is a row in edit - > commit and close\n        const grid = this.grid;\n        if (grid.transactions.enabled) {\n            const transactionId = grid.primaryKey ? rowData[grid.primaryKey] : rowData;\n            const transaction: Transaction = { id: transactionId, type: TransactionType.ADD, newValue: rowData };\n            grid.transactions.add(transaction);\n        } else {\n            grid.data.push(rowData);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        const grid = this.grid;\n        if (index !== -1) {\n            if (grid.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                grid.transactions.add(transaction, grid.data[index]);\n            } else {\n                grid.data.splice(index, 1);\n            }\n        } else {\n            const state: State = grid.transactions.getState(rowID);\n            grid.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    public deleteRowById(rowId: any) {\n        let index: number;\n        const grid = this.grid;\n        const data = this.get_all_data();\n        if (grid.primaryKey) {\n            index = data.map((record) => record[grid.primaryKey]).indexOf(rowId);\n        } else {\n            index = data.indexOf(rowId);\n        }\n        const state: State = grid.transactions.getState(rowId);\n        const hasRowInNonDeletedState = state && state.type !== TransactionType.DELETE;\n\n        //  if there is a row (index !== -1) and the we have cell in edit mode on same row exit edit mode\n        //  if there is no row (index === -1), but there is a row in ADD or UPDATE state do as above\n        //  Otherwise just exit - there is nothing to delete\n        if (index !== -1 || hasRowInNonDeletedState) {\n            // Always exit edit when row is deleted\n            grid.endEdit(true);\n        } else {\n            return;\n        }\n\n        //  TODO: should we emit this when cascadeOnDelete is true for each row?!?!\n        grid.onRowDeleted.emit({ data: data[index] });\n\n        //  first deselect row then delete it\n        if (grid.rowSelectable && grid.selection.is_item_selected(grid.id, rowId)) {\n            grid.deselectRows([rowId]);\n        } else {\n            grid.checkHeaderCheckboxStatus();\n        }\n\n        this.deleteRowFromData(rowId, index);\n        (grid as any)._pipeTrigger++;\n        grid.cdr.markForCheck();\n        // Data needs to be recalculated if transactions are in place\n        // If no transactions, `data` will be a reference to the grid getter, otherwise it will be stale\n        const dataAfterDelete = grid.transactions.enabled ? grid.dataWithAddedInTransactionRows : data;\n        grid.refreshSearch();\n        if (dataAfterDelete.length % grid.perPage === 0 && dataAfterDelete.length / grid.perPage - 1 < grid.page && grid.page !== 0) {\n            grid.page--;\n        }\n    }\n\n    public get_row_id(rowData) {\n        const grid = this.grid;\n        return grid.primaryKey ? rowData[grid.primaryKey] : rowData;\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if (!grid.transactions.enabled) {\n            return false;\n        }\n        const state = grid.transactions.getState(rowID);\n        if (state) {\n            return state.type === TransactionType.DELETE;\n        }\n\n        return false;\n    }\n\n    public atInexistingPage(): Boolean {\n        const grid = this.grid;\n        return grid.data.length % grid.perPage === 0 && grid.isLastPage && grid.page !== 0;\n    }\n}\n","import { IFilteringOperation } from './filtering-condition';\n\nexport enum FilteringLogic {\n    And,\n    Or\n}\n\n/**\n * Represents filtering expressions.\n */\nexport declare interface IFilteringExpression {\n    fieldName: string;\n    condition: IFilteringOperation;\n    searchVal?: any;\n    ignoreCase?: boolean;\n}\n","import { FilteringLogic, IFilteringExpression } from './filtering-expression.interface';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from './filtering-expressions-tree';\n\nexport interface IFilteringStrategy {\n    filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[];\n}\n\nexport abstract class BaseFilteringStrategy implements IFilteringStrategy  {\n    public abstract filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[];\n\n    protected abstract getFieldValue(rec: object, fieldName: string): any;\n\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = this.getFieldValue(rec, expr.fieldName);\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n\n    public matchRecord(rec: object, expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (expressions) {\n            if (expressions instanceof FilteringExpressionsTree) {\n                const expressionsTree = expressions as IFilteringExpressionsTree;\n                const operator = expressionsTree.operator as FilteringLogic;\n                let matchOperand, operand;\n\n                if (expressionsTree.filteringOperands && expressionsTree.filteringOperands.length) {\n                    for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                        operand = expressionsTree.filteringOperands[i];\n                        matchOperand = this.matchRecord(rec, operand);\n\n                        // Return false if at least one operand does not match and the filtering logic is And\n                        if (!matchOperand && operator === FilteringLogic.And) {\n                            return false;\n                        }\n\n                        // Return true if at least one operand matches and the filtering logic is Or\n                        if (matchOperand && operator === FilteringLogic.Or) {\n                            return true;\n                        }\n                    }\n\n                    return matchOperand;\n                }\n\n                return true;\n            } else {\n                const expression = expressions as IFilteringExpression;\n                return this.findMatchByExpression(rec, expression);\n            }\n        }\n\n        return true;\n    }\n}\n\nexport class FilteringStrategy extends BaseFilteringStrategy {\n    public filter<T>(data: T[], expressionsTree: IFilteringExpressionsTree): T[] {\n        let i;\n        let rec;\n        const len = data.length;\n        const res: T[] = [];\n        if (!expressionsTree || !expressionsTree.filteringOperands || expressionsTree.filteringOperands.length === 0 || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = data[i];\n            if (this.matchRecord(rec, expressionsTree)) {\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        return rec[fieldName];\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { BaseFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IFilteringState } from '../../data-operations/filtering-state.interface';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\n\n/** @hidden */\nexport class TreeGridFilteringStrategy extends BaseFilteringStrategy {\n    public filter(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree): ITreeGridRecord[] {\n        return this.filterImpl(data, expressionsTree, undefined);\n    }\n\n    private filterImpl(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree, parent: ITreeGridRecord): ITreeGridRecord[] {\n        let i: number;\n        let rec: ITreeGridRecord;\n        const len = data.length;\n        const res: ITreeGridRecord[] = [];\n        if (!expressionsTree || !expressionsTree.filteringOperands || expressionsTree.filteringOperands.length === 0 || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = DataUtil.cloneTreeGridRecord(data[i]);\n            rec.parent = parent;\n            if (rec.children) {\n                const filteredChildren = this.filterImpl(rec.children, expressionsTree, rec);\n                rec.children = filteredChildren.length > 0 ? filteredChildren : null;\n            }\n\n            if (this.matchRecord(rec, expressionsTree)) {\n                res.push(rec);\n            } else if (rec.children && rec.children.length > 0) {\n                rec.isFilteredOutParent = true;\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        const hierarchicalRecord = <ITreeGridRecord>rec;\n        return hierarchicalRecord.data[fieldName];\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridFiltering',\n    pure: true\n})\nexport class IgxTreeGridFilteringPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(hierarchyData: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const state = {\n            expressionsTree: expressionsTree,\n            strategy: new TreeGridFilteringStrategy()\n        };\n\n        this.resetFilteredOutProperty(grid.records);\n\n        if (!state.expressionsTree ||\n            !state.expressionsTree.filteringOperands ||\n            state.expressionsTree.filteringOperands.length === 0) {\n            grid.filteredData = null;\n            return hierarchyData;\n        }\n\n        const result = this.filter(hierarchyData, state);\n        const filteredData: any[] = [];\n        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);\n        grid.filteredData = filteredData;\n\n        return result;\n    }\n\n    private resetFilteredOutProperty(map: Map<any, ITreeGridRecord>) {\n        const keys = Array.from(map.keys());\n        for (let i = 0; i < keys.length; i++) {\n            map.get(keys[i]).isFilteredOutParent = undefined;\n        }\n    }\n\n    private expandAllRecursive(grid: IgxTreeGridComponent, data: ITreeGridRecord[],\n        expandedStates: Map<any, boolean>, filteredData: any[]) {\n        for (let i = 0; i < data.length; i++) {\n            const rec = data[i];\n            filteredData.push(rec.data);\n            this.updateNonProcessedRecord(grid, rec);\n\n            if (rec.children && rec.children.length > 0) {\n                expandedStates.set(rec.rowID, true);\n                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);\n            }\n        }\n    }\n\n    private updateNonProcessedRecord(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.isFilteredOutParent = record.isFilteredOutParent;\n    }\n\n    private filter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n}\n","import { IFilteringState } from './filtering-state.interface';\n\nimport { IgxSorting, IgxDataRecordSorting } from './sorting-strategy';\nimport { IGroupByResult, IgxGrouping } from './grouping-strategy';\n\nimport { IPagingState, PagingError } from './paging-state.interface';\n\nimport { IGroupByExpandState, IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { TreeGridFilteringStrategy } from '../grids/tree-grid/tree-grid.filtering.pipe';\nimport { ISortingExpression } from './sorting-expression.interface';\nimport { FilteringStrategy } from './filtering-strategy';\nimport { ITreeGridRecord } from '../grids/tree-grid';\nimport { cloneValue, mergeObjects } from '../core/utils';\nimport { Transaction, TransactionType, HierarchicalTransaction } from '../services/transaction/transaction';\n\n/**\n * @hidden\n */\nexport enum DataType {\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n    Date = 'date'\n}\n\n/**\n * @hidden\n */\nexport class DataUtil {\n    public static sort<T>(data: T[], expressions: ISortingExpression[], sorting: IgxSorting = new IgxSorting()): T[] {\n        return sorting.sort(data, expressions);\n    }\n\n    public static treeGridSort(hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        parent?: ITreeGridRecord): ITreeGridRecord[] {\n        let res: ITreeGridRecord[] = [];\n        hierarchicalData.forEach((hr: ITreeGridRecord) => {\n            const rec: ITreeGridRecord = DataUtil.cloneTreeGridRecord(hr);\n            rec.parent = parent;\n            if (rec.children) {\n                rec.children = DataUtil.treeGridSort(rec.children, expressions, rec);\n            }\n            res.push(rec);\n        });\n\n        res = DataUtil.sort(res, expressions, new IgxDataRecordSorting());\n\n        return res;\n    }\n\n    public static cloneTreeGridRecord(hierarchicalRecord: ITreeGridRecord) {\n        const rec: ITreeGridRecord = {\n            rowID: hierarchicalRecord.rowID,\n            data: hierarchicalRecord.data,\n            children: hierarchicalRecord.children,\n            isFilteredOutParent: hierarchicalRecord.isFilteredOutParent,\n            level: hierarchicalRecord.level,\n            expanded: hierarchicalRecord.expanded\n        };\n        return rec;\n    }\n\n    public static group<T>(data: T[], state: IGroupingState, grid: any = null, groupsRecords: any[] = []): IGroupByResult {\n        const grouping = new IgxGrouping();\n        groupsRecords.splice(0, groupsRecords.length);\n        return grouping.groupBy(data, state.expressions, grid, groupsRecords);\n    }\n    public static restoreGroups(groupData: IGroupByResult, state: IGroupingState): any[] {\n        if (state.expressions.length === 0) {\n            return groupData.data;\n        }\n        return this.restoreGroupsIterative(groupData, state);\n    }\n    private static restoreGroupsIterative(groupData: IGroupByResult, state: IGroupingState): any[] {\n        const metadata = groupData.metadata;\n        const result = [], added = [];\n        let chain: any[];\n        let i = 0, j;\n        let pointer: IGroupByRecord;\n        let expanded: boolean;\n        for (i = 0; i < metadata.length;) {\n            chain = [metadata[i]];\n            pointer = metadata[i].groupParent;\n            // break off if the parent is already added\n            while (pointer && added[0] !== pointer) {\n                chain.push(pointer);\n                if (added[0] && added[0].level === pointer.level) {\n                    added.shift();\n                }\n                pointer = pointer.groupParent;\n            }\n            for (j = chain.length - 1; j >= 0; j--) {\n                result.push(chain[j]);\n                added.unshift(chain[j]);\n                const hierarchy = this.getHierarchy(chain[j]);\n                const expandState: IGroupByExpandState = state.expansion.find((s) =>\n                    this.isHierarchyMatch(s.hierarchy || [{ fieldName: chain[j].expression.fieldName, value: chain[j].value }], hierarchy));\n                expanded = expandState ? expandState.expanded : state.defaultExpanded;\n                if (!expanded) {\n                    break;\n                }\n            }\n            added.shift();\n            j = Math.max(j, 0);\n            const start = chain[j].records.findIndex(r => r === groupData.data[i]);\n            const end = Math.min(metadata.length - i + start, chain[j].records.length);\n            if (expanded) {\n                result.push(...chain[j].records.slice(start, end));\n            }\n            i += end - start;\n        }\n        return result;\n    }\n    public static page<T>(data: T[], state: IPagingState): T[] {\n        if (!state) {\n            return data;\n        }\n        const len = data.length;\n        const index = state.index;\n        const res = [];\n        const recordsPerPage = state.recordsPerPage;\n        state.metadata = {\n            countPages: 0,\n            countRecords: data.length,\n            error: PagingError.None\n        };\n        if (index < 0 || isNaN(index)) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {\n            state.metadata.error = PagingError.IncorrectRecordsPerPage;\n            return res;\n        }\n        state.metadata.countPages = Math.ceil(len / recordsPerPage);\n        if (!len) {\n            return data;\n        }\n        if (index >= state.metadata.countPages) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);\n    }\n    public static filter<T>(data: T[], state: IFilteringState): T[] {\n        if (!state.strategy) {\n            state.strategy = new FilteringStrategy();\n        }\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n\n    public static treeGridFilter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        if (!state.strategy) {\n            state.strategy = new TreeGridFilteringStrategy();\n        }\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n\n    public static getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n        const hierarchy: Array<IGroupByKey> = [];\n        if (gRow !== undefined && gRow.expression) {\n            hierarchy.push({ fieldName: gRow.expression.fieldName, value: gRow.value });\n            while (gRow.groupParent) {\n                gRow = gRow.groupParent;\n                hierarchy.unshift({ fieldName: gRow.expression.fieldName, value: gRow.value });\n            }\n        }\n        return hierarchy;\n    }\n\n    public static isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n        if (h1.length !== h2.length) {\n            return false;\n        }\n        return h1.every((level, index): boolean => {\n            return level.fieldName === h2[index].fieldName && level.value === h2[index].value;\n        });\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeTransactions<T>(data: T[], transactions: Transaction[], primaryKey?: any, deleteRows: boolean = false): T[] {\n        data.forEach((item: any, index: number) => {\n            const rowId = primaryKey ? item[primaryKey] : item;\n            const transaction = transactions.find(t => t.id === rowId);\n            if (transaction && transaction.type === TransactionType.UPDATE) {\n                data[index] = transaction.newValue;\n            }\n        });\n\n        if (deleteRows) {\n            transactions\n                .filter(t => t.type === TransactionType.DELETE)\n                .forEach(t => {\n                    const index = primaryKey ? data.findIndex(d => d[primaryKey] === t.id) : data.findIndex(d => d === t.id);\n                    if (0 <= index && index < data.length) {\n                        data.splice(index, 1);\n                    }\n                });\n        }\n\n        data.push(...transactions\n            .filter(t => t.type === TransactionType.ADD)\n            .map(t => t.newValue));\n\n        return data;\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided hierarchical data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param childDataKey Data key of child collections\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeHierarchicalTransactions(\n        data: any[],\n        transactions: HierarchicalTransaction[],\n        childDataKey: any,\n        primaryKey?: any,\n        deleteRows: boolean = false): any[] {\n\n        for (const transaction of transactions) {\n            if (transaction.path) {\n                const parent = this.findParentFromPath(data, primaryKey, childDataKey, transaction.path);\n                let collection: any[] = parent ? parent[childDataKey] : data;\n                switch (transaction.type) {\n                    case TransactionType.ADD:\n                        //  if there is no parent this is ADD row at root level\n                        if (parent && !parent[childDataKey]) {\n                            parent[childDataKey] = collection = [];\n                        }\n                        collection.push(transaction.newValue);\n                        break;\n                    case TransactionType.UPDATE:\n                        const updateIndex = collection.findIndex(x => x[primaryKey] === transaction.id);\n                        if (updateIndex !== -1) {\n                            collection[updateIndex] = mergeObjects(cloneValue(collection[updateIndex]), transaction.newValue);\n                        }\n                        break;\n                    case TransactionType.DELETE:\n                        if (deleteRows) {\n                            const deleteIndex = collection.findIndex(r => r[primaryKey] === transaction.id);\n                            if (deleteIndex !== -1) {\n                                collection.splice(deleteIndex, 1);\n                            }\n                        }\n                        break;\n                }\n            } else {\n                //  if there is no path this is ADD row in root. Push the newValue to data\n                data.push(transaction.newValue);\n            }\n        }\n        return data;\n    }\n\n    private static findParentFromPath(data: any[], primaryKey: any, childDataKey: any, path: any[]): any {\n        let collection: any[] = data;\n        let result: any;\n\n        for (const id of path) {\n            result = collection && collection.find(x => x[primaryKey] === id);\n            if (!result) {\n                break;\n            }\n\n            collection = result[childDataKey];\n        }\n\n        return result;\n    }\n}\n","\n/**\n * @hidden\n */\nexport class ExportUtilities {\n    public static getKeysFromData(data: any[]) {\n        const length = data.length;\n        if (length === 0) {\n            return [];\n        }\n\n        const dataEntry = data[0];\n        const dataEntryMiddle = data[Math.floor(length / 2)];\n        const dataEntryLast = data[length - 1];\n\n        const keys1 = Object.keys(dataEntry);\n        const keys2 = Object.keys(dataEntryMiddle);\n        const keys3 = Object.keys(dataEntryLast);\n\n        const keys = new Set(keys1.concat(keys2).concat(keys3));\n\n        return !ExportUtilities.isSpecialData(data) ? Array.from(keys) : [ 'Column 1' ];\n    }\n\n    public static saveBlobToFile(blob: Blob, fileName) {\n        const a = document.createElement('a');\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(blob, fileName);\n        } else {\n            const url = window.URL.createObjectURL(blob);\n            a.download = fileName;\n\n            a.href = url;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n\n    public static stringToArrayBuffer(s: string): ArrayBuffer {\n        const buf = new ArrayBuffer(s.length);\n        const view = new Uint8Array(buf);\n        for (let i = 0; i !== s.length; ++i) {\n            /* tslint:disable no-bitwise */\n            view[i] = s.charCodeAt(i) & 0xFF;\n            /* tslint:enable no-bitwise */\n        }\n        return buf;\n    }\n\n    public static isSpecialData(data: any[]): boolean {\n        const dataEntry = data[0];\n        return (typeof dataEntry === 'string' ||\n                typeof dataEntry === 'number' ||\n                dataEntry instanceof Date);\n    }\n\n    public static hasValue(value: any): boolean {\n        return value !== undefined && value !== null;\n    }\n\n    public static isNullOrWhitespaces(value: string): boolean {\n        return value === undefined || value === null || !value.trim();\n    }\n}\n","import {\n    EventEmitter,\n    Output\n} from '@angular/core';\n\nimport { cloneValue } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\n\nimport { ExportUtilities } from './export-utilities';\nimport { IgxExporterOptionsBase } from './exporter-options-base';\nimport { ITreeGridRecord } from '../../grids/tree-grid/tree-grid.interfaces';\n\n/**\n * onRowExport event arguments\n * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n * // set args properties here\n * })\n */\nexport interface IRowExportingEventArgs {\n    /**\n     * Contains the exporting row data\n     */\n    rowData: any;\n\n    /**\n     * Contains the exporting row index\n     */\n    rowIndex: number;\n\n    /**\n     * Skip the exporting row when set to true\n     */\n    cancel: boolean;\n}\n\n/**\n    * onColumnExport event arguments\n    * ```typescript\n    * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n    * // set args properties here\n    * });\n    * ```\n    */\nexport interface IColumnExportingEventArgs {\n    /**\n     * Contains the exporting column header\n     */\n    header: string;\n\n    /**\n     * Contains the exporting column field name\n     */\n    field: string;\n\n    /**\n     * Contains the exporting column index\n     */\n    columnIndex: number;\n\n    /**\n     * Skip the exporting column when set to true\n     */\n    cancel: boolean;\n\n    /**\n     * Export the column's data without applying its formatter, when set to true\n     */\n    skipFormatter: boolean;\n}\n\nexport abstract class IgxBaseExporter {\n    private _columnList: any[];\n    private flatRecords = [];\n\n    protected _isTreeGrid = false;\n    protected _indexOfLastPinnedColumn = -1;\n    protected _sort = null;\n\n    /**\n     * This event is emitted when a row is exported.\n     * ```typescript\n     * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onRowExport = new EventEmitter<IRowExportingEventArgs>();\n\n    /**\n     * This event is emitted when a column is exported.\n     * ```typescript\n     * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onColumnExport = new EventEmitter<IColumnExportingEventArgs>();\n\n    /**\n     * Method for exporting IgxGrid component's data.\n     * ```typescript\n     * this.exporterService.export(this.igxGridForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public export(grid: any, options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        const columns = grid.columnList.toArray();\n        this._columnList = new Array<any>(columns.length);\n\n        const hiddenColumns = [];\n        let lastVisbleColumnIndex = -1;\n\n        columns.forEach((column) => {\n            const columnHeader = column.header !== '' ? column.header : column.field;\n            const exportColumn = !column.hidden || options.ignoreColumnsVisibility;\n            const index = options.ignoreColumnsOrder ? column.index : column.visibleIndex;\n\n            const columnInfo = {\n                header: columnHeader,\n                field: column.field,\n                skip: !exportColumn,\n                formatter: column.formatter,\n                skipFormatter: false\n            };\n\n            if (index !== -1) {\n                this._columnList[index] = columnInfo;\n                lastVisbleColumnIndex = Math.max(lastVisbleColumnIndex, index);\n            } else {\n                hiddenColumns.push(columnInfo);\n            }\n\n            if (column.pinned && exportColumn) {\n                this._indexOfLastPinnedColumn = index;\n            }\n        });\n\n        // Append the hidden columns to the end of the list\n        hiddenColumns.forEach((hiddenColumn) => {\n            this._columnList[++lastVisbleColumnIndex] = hiddenColumn;\n        });\n\n        const data = this.prepareData(grid, options);\n        this.exportData(data, options);\n    }\n\n    /**\n     * Method for exporting any kind of array data.\n     * ```typescript\n     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public exportData(data: any[], options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        if (!this._columnList || this._columnList.length === 0) {\n            const keys = ExportUtilities.getKeysFromData(data);\n            this._columnList = keys.map((k) => ({ header: k, field: k, skip: false }));\n        }\n\n        let skippedPinnedColumnsCount = 0;\n        let columnsWithoutHeaderCount = 1;\n        this._columnList.forEach((column, index) => {\n            if (!column.skip) {\n                const columnExportArgs = {\n                    header: ExportUtilities.isNullOrWhitespaces(column.header) ?\n                        'Column' + columnsWithoutHeaderCount++ : column.header,\n                    field: column.field,\n                    columnIndex: index,\n                    cancel: false,\n                    skipFormatter: false\n                };\n                this.onColumnExport.emit(columnExportArgs);\n\n                column.header = columnExportArgs.header;\n                column.skip = columnExportArgs.cancel;\n                column.skipFormatter = columnExportArgs.skipFormatter;\n\n                if (column.skip && index <= this._indexOfLastPinnedColumn) {\n                    skippedPinnedColumnsCount++;\n                }\n\n                if (this._sort && this._sort.fieldName === column.field) {\n                    if (column.skip) {\n                        this._sort = null;\n                    } else {\n                        this._sort.fieldName = column.header;\n                    }\n                }\n            }\n        });\n\n        this._indexOfLastPinnedColumn -= skippedPinnedColumnsCount;\n\n        const dataToExport = new Array<any>();\n        const isSpecialData = ExportUtilities.isSpecialData(data);\n\n        data.forEach((row, index) => {\n            this.exportRow(dataToExport, row, index, isSpecialData);\n        });\n\n        this.exportDataImplementation(dataToExport, options);\n        this.resetDefaults();\n    }\n\n    protected abstract exportDataImplementation(data: any[], options: IgxExporterOptionsBase): void;\n\n    private exportRow(data: any[], rowData: any, index: number, isSpecialData: boolean) {\n        let row;\n\n        if (!isSpecialData) {\n            row = this._columnList.reduce((a, e) => {\n                if (!e.skip) {\n                    const rawValue = this._isTreeGrid ? rowData.data[e.field] : rowData[e.field];\n                    a[e.header] = e.formatter && !e.skipFormatter ? e.formatter(rawValue) : rawValue;\n                }\n                return a;\n            }, {});\n        } else {\n            row = this._isTreeGrid ? rowData.data : rowData;\n        }\n\n        const rowArgs = {\n            rowData: row,\n            rowIndex: index,\n            cancel: false\n        };\n        this.onRowExport.emit(rowArgs);\n\n        if (!rowArgs.cancel) {\n            data.push({ rowData: rowArgs.rowData, originalRowData: rowData });\n        }\n    }\n\n    private prepareData(grid: any, options: IgxExporterOptionsBase): any[] {\n        this.flatRecords = [];\n        let rootRecords = grid.rootRecords;\n        this._isTreeGrid = rootRecords !== undefined;\n\n        if (this._isTreeGrid) {\n            this.prepareHierarchicalData(rootRecords);\n        }\n\n        let data = this._isTreeGrid ? this.flatRecords : grid.data;\n\n        if (grid.filteringExpressionsTree &&\n            grid.filteringExpressionsTree.filteringOperands.length > 0 &&\n            !options.ignoreFiltering) {\n            const filteringState = {\n                expressionsTree: grid.filteringExpressionsTree,\n                logic: grid.filteringLogic\n            };\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                rootRecords = DataUtil.treeGridFilter(rootRecords, filteringState);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.filter(data, filteringState);\n            }\n        }\n\n        if (grid.sortingExpressions &&\n            grid.sortingExpressions.length > 0 &&\n            !options.ignoreSorting) {\n            this._sort = cloneValue(grid.sortingExpressions[0]);\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                rootRecords = DataUtil.treeGridSort(rootRecords, grid.sortingExpressions);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.sort(data, grid.sortingExpressions);\n            }\n        }\n\n        return data;\n    }\n\n    private prepareHierarchicalData(records: ITreeGridRecord[]) {\n        if (!records) {\n            return;\n        }\n        for (let i = 0; i < records.length; i++) {\n            const hierarchicalRecord = records[i];\n\n            this.flatRecords.push(hierarchicalRecord);\n            this.prepareHierarchicalData(hierarchicalRecord.children);\n        }\n    }\n\n    private resetDefaults() {\n        this._columnList = [];\n        this._indexOfLastPinnedColumn = -1;\n        this._sort = null;\n        this.flatRecords = [];\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/**\n * @hidden\n */\nexport class CharSeparatedValueData {\n    private _headerRecord = '';\n    private _dataRecords = '';\n    private _eor = '\\r\\n';\n    private _delimiter;\n    private _escapeCharacters = ['\\r', '\\n', '\\r\\n'];\n    private _delimiterLength = 1;\n    private _isSpecialData = false;\n\n    constructor(private _data: any[], valueDelimiter: string, private _isTreeGridData = false) {\n        this.setDelimiter(valueDelimiter);\n    }\n\n    public prepareData() {\n        if (!this._data || this._data.length === 0) {\n            return '';\n        }\n\n        this._data = this._data.map((item) => item.rowData);\n\n        const keys = ExportUtilities.getKeysFromData(this._data);\n\n        if (keys.length === 0) {\n            return '';\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(this._data);\n        this._escapeCharacters.push(this._delimiter);\n\n        this._headerRecord = this.processHeaderRecord(keys, this._escapeCharacters);\n        this._dataRecords = this.processDataRecords(this._data, keys, this._escapeCharacters);\n\n        return this._headerRecord + this._dataRecords;\n    }\n\n    private processField(value, escapeChars): string {\n        let safeValue = ExportUtilities.hasValue(value) ? String(value) : '';\n        if (escapeChars.some((v) => safeValue.includes(v))) {\n            safeValue = `\"${safeValue}\"`;\n        }\n        return safeValue + this._delimiter;\n    }\n\n    private processHeaderRecord(keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n            recordData += this.processField(keyName, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processRecord(record, keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n\n            const value = (record[keyName] !== undefined) ? record[keyName] : this._isSpecialData ? record : '';\n            recordData += this.processField(value, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processDataRecords(currentData, keys, escapeChars) {\n        let dataRecords = '';\n        for (const row of currentData) {\n            dataRecords += this.processRecord(row, keys, escapeChars);\n        }\n\n        return dataRecords;\n    }\n\n    private setDelimiter(value) {\n        this._delimiter = value;\n        this._delimiterLength = value.length;\n    }\n}\n","export abstract class IgxExporterOptionsBase {\n    private _fileName: string;\n\n    /**\n     * Specifies whether hidden columns should be exported.\n     * ```typescript\n     * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;\n     * this.exportOptions.ignoreColumnsVisibility = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsVisibility = false;\n\n    /**\n     * Specifies whether filtered out rows should be exported.\n     * ```typescript\n     * let ignoreFiltering = this.exportOptions.ignoreFiltering;\n     * this.exportOptions.ignoreFiltering = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreFiltering = false;\n\n    /**\n     * Specifies if the exporter should ignore the current column order in the IgxGrid.\n     * ```typescript\n     * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;\n     * this.exportOptions.ignoreColumnsOrder = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsOrder = false;\n\n    /**\n     * Specifies whether the exported data should be sorted as in the provided IgxGrid.\n     * ```typescript\n     * let ignoreSorting = this.exportOptions.ignoreSorting;\n     * this.exportOptions.ignoreSorting = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreSorting = false;\n\n    constructor(fileName: string, protected _fileExtension: string) {\n        this.setFileName(fileName);\n    }\n\n    private setFileName(fileName: string): void {\n        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');\n    }\n\n    /**\n     * Gets the file name which will be used for the exporting operation.\n     * ```typescript\n     * let fileName = this.exportOptions.fileName;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    get fileName() {\n        return this._fileName;\n    }\n\n    /**\n     * Sets the file name which will be used for the exporting operation.\n     * ```typescript\n     * this.exportOptions.fileName = 'exportedData01';\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    set fileName(value) {\n        this.setFileName(value);\n    }\n\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the CSV exporting process.\n */\nexport class IgxCsvExporterOptions extends IgxExporterOptionsBase {\n\n    private _valueDelimiter;\n    private _fileType;\n\n    constructor(fileName: string, fileType: CsvFileTypes) {\n        super(fileName, IgxCsvExporterOptions.getExtensionFromFileType(fileType));\n        this.setFileType(fileType);\n        this.setDelimiter();\n    }\n\n    private static getExtensionFromFileType(fType: CsvFileTypes) {\n        let extension = '';\n        switch (fType) {\n            case CsvFileTypes.CSV:\n                extension = '.csv';\n                break;\n            case CsvFileTypes.TSV:\n                extension = '.tsv';\n                break;\n            case CsvFileTypes.TAB:\n                extension = '.tab';\n                break;\n            default:\n                throw Error('Unsupported CSV file type!');\n        }\n        return extension;\n    }\n\n    /**\n     * Gets the value delimiter which will be used for the exporting operation.\n     * ```typescript\n     * let delimiter = this.exportOptions.valueDelimiter;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get valueDelimiter() {\n        return this._valueDelimiter;\n    }\n\n    /**\n     * Sets a value delimiter which will overwrite the default delimiter of the selected export format.\n     * ```typescript\n     * this.exportOptions.valueDelimiter = '|';\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set valueDelimiter(value) {\n        this.setDelimiter(value);\n    }\n\n    /**\n     * Gets the CSV export format.\n     * ```typescript\n     * let filetype = this.exportOptions.fileType;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get fileType() {\n        return this._fileType;\n    }\n\n    /**\n     * Sets the CSV export format.\n     * ```typescript\n     * this.exportOptions.fileType = CsvFileTypes.TAB;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set fileType(value) {\n        this.setFileType(value);\n    }\n\n    private setFileType(value) {\n        if (value !== undefined && value !== null && value !== this._fileType) {\n            this._fileType = value;\n            const extension = IgxCsvExporterOptions.getExtensionFromFileType(value);\n            if (!this.fileName.endsWith(extension)) {\n                const oldExt = '.' + this.fileName.split('.').pop();\n                const newName = this.fileName.replace(oldExt, extension);\n                this._fileExtension = extension;\n                this.fileName = newName;\n            }\n        }\n    }\n\n    private setDelimiter(value?) {\n        if (value !== undefined && value !== '' && value !== null) {\n            this._valueDelimiter = value;\n        } else {\n            switch (this.fileType) {\n                case CsvFileTypes.CSV:\n                    this._valueDelimiter = ',';\n                    break;\n                case CsvFileTypes.TSV:\n                case CsvFileTypes.TAB:\n                    this._valueDelimiter = '\\t';\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * This enumeration is used to configure the default value separator\n * as well as the default file extension used when performing CSV exporting.\n */\nexport enum CsvFileTypes {\n    /**\n     * Character Separated Values, default separator is \"comma\", default file extension is .csv\n     */\n    CSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tsv\n     */\n    TSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tab\n     */\n    TAB\n}\n","import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { CharSeparatedValueData } from './char-separated-value-data';\nimport { CsvFileTypes, IgxCsvExporterOptions } from './csv-exporter-options';\n\nexport interface ICsvExportEndedEventArgs {\n    csvData: string;\n}\n\n/**\n * **Ignite UI for Angular CSV Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_csv.html)\n *\n * The Ignite UI for Angular CSV Exporter service can export data in a Character Separated Values format from\n * both raw data (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private csvExportService: IgxCsvExporterService) {\n * }\n *\n * const opt: IgxCsvExporterOptions = new IgxCsvExporterOptions(\"FileName\", CsvFileTypes.CSV);\n * this.csvExportService.exportData(this.localData, opt);\n * ```\n */\n@Injectable()\nexport class IgxCsvExporterService extends IgxBaseExporter {\n    private _stringData: string;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: ICsvExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxCsvExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<ICsvExportEndedEventArgs>();\n\n    protected exportDataImplementation(data: any[], options: IgxCsvExporterOptions) {\n        const csvData = new CharSeparatedValueData(data, options.valueDelimiter);\n        this._stringData = csvData.prepareData();\n\n        this.saveFile(options);\n        this.onExportEnded.emit({ csvData: this._stringData });\n    }\n\n    private saveFile(options: IgxCsvExporterOptions) {\n        switch (options.fileType) {\n            case CsvFileTypes.CSV:\n                this.exportFile(this._stringData, options.fileName, 'text/csv;charset=utf-8;');\n                break;\n            case CsvFileTypes.TSV:\n            case CsvFileTypes.TAB:\n                this.exportFile(this._stringData, options.fileName, 'text/tab-separated-values;charset=utf-8;');\n                break;\n        }\n    }\n\n    private exportFile(data: string, fileName: string, fileType: string): void {\n        const blob = new Blob(['\\ufeff', data], { type: fileType });\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","/**\n * @hidden\n */\nexport enum ExcelFolderTypes {\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    DocPropsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    TablesExcelFolder\n}\n/**\n * @hidden\n */\nexport enum ExcelFileTypes {\n    RootRelsFile,\n    AppFile,\n    CoreFile,\n    WorkbookRelsFile,\n    ThemeFile,\n    WorksheetFile,\n    StyleFile,\n    WorkbookFile,\n    ContentTypesFile,\n    SharedStringsFile,\n    WorksheetRelsFile,\n    TablesFile\n}\n","/** @hidden */\nexport class ExcelStrings {\n    /* tslint:disable max-line-length */\n    private static XML_STRING = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\r\\n';\n    private static SHARED_STRING_RELATIONSHIP = '<Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n\n    public static getRels(): string {\n        return ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/></Relationships>';\n    }\n\n    public static getApp(): string {\n        return ExcelStrings.XML_STRING + '<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>1</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"1\" baseType=\"lpstr\"><vt:lpstr>Sheet1</vt:lpstr></vt:vector></TitlesOfParts><Company></Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>16.0300</AppVersion></Properties>';\n    }\n\n    public static getCore(): string {\n        return ExcelStrings.XML_STRING + '<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><dc:creator></dc:creator><cp:lastModifiedBy></cp:lastModifiedBy><dcterms:created xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:20Z</dcterms:created><dcterms:modified xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:26Z</dcterms:modified></cp:coreProperties>';\n    }\n\n    public static getTheme(): string {\n        return ExcelStrings.XML_STRING + '<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"44546A\"/></a:dk2><a:lt2><a:srgbClr val=\"E7E6E6\"/></a:lt2><a:accent1><a:srgbClr val=\"5B9BD5\"/></a:accent1><a:accent2><a:srgbClr val=\"ED7D31\"/></a:accent2><a:accent3><a:srgbClr val=\"A5A5A5\"/></a:accent3><a:accent4><a:srgbClr val=\"FFC000\"/></a:accent4><a:accent5><a:srgbClr val=\"4472C4\"/></a:accent5><a:accent6><a:srgbClr val=\"70AD47\"/></a:accent6><a:hlink><a:srgbClr val=\"0563C1\"/></a:hlink><a:folHlink><a:srgbClr val=\"954F72\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Calibri Light\" panose=\"020F0302020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯ Light\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿ Light\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\" panose=\"020F0502020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"110000\"/><a:satMod val=\"105000\"/><a:tint val=\"67000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"103000\"/><a:tint val=\"73000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"109000\"/><a:tint val=\"81000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:satMod val=\"103000\"/><a:lumMod val=\"102000\"/><a:tint val=\"94000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:satMod val=\"110000\"/><a:lumMod val=\"100000\"/><a:shade val=\"100000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"99000\"/><a:satMod val=\"120000\"/><a:shade val=\"78000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"6350\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"12700\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"19050\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"57150\" dist=\"19050\" dir=\"5400000\" algn=\"ctr\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"63000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:solidFill><a:schemeClr val=\"phClr\"><a:tint val=\"95000\"/><a:satMod val=\"170000\"/></a:schemeClr></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"93000\"/><a:satMod val=\"150000\"/><a:shade val=\"98000\"/><a:lumMod val=\"102000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:tint val=\"98000\"/><a:satMod val=\"130000\"/><a:shade val=\"90000\"/><a:lumMod val=\"103000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"63000\"/><a:satMod val=\"120000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults/><a:extraClrSchemeLst/><a:extLst><a:ext uri=\"{05A4C25C-085E-4340-85A3-A5531E510DB2}\"><thm15:themeFamily xmlns:thm15=\"http://schemas.microsoft.com/office/thememl/2012/main\" name=\"Office Theme\" id=\"{62F939B6-93AF-4DB8-9C6B-D6C7DFDC589F}\" vid=\"{4A3C46E8-61CC-4603-A589-7422A47A8E4A}\"/></a:ext></a:extLst></a:theme>';\n    }\n\n    public static getStyles(hasNonStringValues: boolean): string {\n        const additionalCellXF = '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" applyNumberFormat=\"1\"/>';\n        const cellXFCount = hasNonStringValues ? 2 : 1;\n        return ExcelStrings.XML_STRING + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac x16r2\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\"><fonts count=\"1\" x14ac:knownFonts=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"' + cellXFCount + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/>' + additionalCellXF + '</cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium2\" defaultPivotStyle=\"PivotStyleLight16\"/><extLst><ext uri=\"{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\"><x14:slicerStyles defaultSlicerStyle=\"SlicerStyleLight1\"/></ext><ext uri=\"{9260A510-F301-46a8-8635-F512D64BE5F5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:timelineStyles defaultTimelineStyle=\"TimeSlicerStyleLight1\"/></ext></extLst></styleSheet>';\n    }\n\n    public static getWorkbook(): string {\n        return ExcelStrings.XML_STRING + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x15\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><fileVersion appName=\"xl\" lastEdited=\"6\" lowestEdited=\"6\" rupBuild=\"14420\"/><workbookPr filterPrivacy=\"1\" defaultThemeVersion=\"164011\"/><bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"22260\" windowHeight=\"12645\"/></bookViews><sheets><sheet name=\"Sheet1\" sheetId=\"1\" r:id=\"rId1\"/></sheets><calcPr calcId=\"162913\"/><extLst><ext uri=\"{140A7094-0E35-4892-8432-C4D2E57EDEB5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:workbookPr chartTrackingRefBase=\"1\"/></ext></extLst></workbook>';\n    }\n\n    public static getWorksheetRels(): string {\n        return ExcelStrings.XML_STRING + `<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/table\" Target=\"../tables/table1.xml\"/></Relationships>`;\n    }\n\n    public static getWorkbookRels(hasSharedStrings): string {\n        let retVal = ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>';\n\n        if (hasSharedStrings) {\n            retVal += ExcelStrings.SHARED_STRING_RELATIONSHIP;\n        }\n\n        retVal += '</Relationships>';\n\n        return retVal;\n    }\n\n    public static getSheetXML(dimension: string, freezePane: string, cols: string, sheetData: string, hasTable: boolean, hasGroupedRows = false, outlineLevel = 0): string {\n        const tableParts = hasTable ? '<tableParts count=\"1\"><tablePart r:id=\"rId1\"/></tableParts>' : '';\n        const sheetOutlineProp = hasGroupedRows ? '<sheetPr><outlinePr summaryBelow=\"0\"/></sheetPr>' : '';\n        const sOutlineLevel = outlineLevel > 0 ? `outlineLevelRow=\"${outlineLevel}\"` : '';\n        // return ExcelStrings.XML_STRING +\n        //     '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\"><dimension ref=\"' + dimension + '\"/><sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">' + freezePane + '</sheetView></sheetViews><sheetFormatPr defaultRowHeight=\"15\" x14ac:dyDescent=\"0.25\"/>' + cols + sheetData + '<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>' + tableParts + '</worksheet>';\n\n        return `${ExcelStrings.XML_STRING}\n<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">\n${sheetOutlineProp}\n<dimension ref=\"${dimension}\"/>\n<sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">${freezePane}</sheetView></sheetViews>\n<sheetFormatPr defaultRowHeight=\"15\" ${sOutlineLevel} x14ac:dyDescent=\"0.25\"/>\n${cols}\n${sheetData}\n<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>\n${tableParts}</worksheet>`;\n\n    }\n\n    public static getSharedStringXML(count: number, uniqueCount: number, table: string): string {\n        return ExcelStrings.XML_STRING + '<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' + count + '\" uniqueCount=\"' + uniqueCount + '\">' + table + '</sst>';\n    }\n\n    public static getContentTypesXML(hasSharedStrings: boolean, hasTable: boolean): string {\n        let contentTypes = ExcelStrings.XML_STRING +\n        `<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\\\">\n            <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n            <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n            <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>\n            <Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>\n            <Override PartName=\"/xl/theme/theme1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.theme+xml\"/>\n            <Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>\n            <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>\n            <Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>`;\n\n        contentTypes += hasSharedStrings ?\n        `\t<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>` : '';\n\n        contentTypes += hasTable ?\n            `<Override PartName=\"/xl/tables/table1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\"/>` : '';\n        contentTypes += `</Types>`;\n\n        return contentTypes;\n    }\n\n    public static getTablesXML(dimension: string, tableColumns: string, sort: string): string {\n        return `${ExcelStrings.XML_STRING}<table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"${dimension}\" totalsRowShown=\"0\">\n    <autoFilter ref=\"${dimension}\"/>${sort}${tableColumns}<tableStyleInfo name=\"TableStyleMedium2\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\n</table>`;\n    }\n    /* tslint:enable max-line-length */\n\n    public static getExcelColumn(index: number): string {\n        // Returns the excel column name for given 0-based index\n        // For example 27 should return \"AB\"\n        let returnString = '';\n        while (index >= 0) {\n            const char = index % 26;\n            returnString = String.fromCharCode(65 + char) + returnString;\n            index = Math.floor(index / 26) - 1;\n        }\n        return returnString;\n    }\n}\n","import { IExcelFile } from './excel-interfaces';\nimport { ExcelStrings } from './excel-strings';\nimport { WorksheetData } from './worksheet-data';\n\nimport * as JSZip from 'jszip/dist/jszip';\n\n/**\n * @hidden\n */\nexport class RootRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('.rels', ExcelStrings.getRels());\n    }\n}\n\n/**\n * @hidden\n */\nexport class AppFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('app.xml', ExcelStrings.getApp());\n    }\n}\n\n/**\n * @hidden\n */\nexport class CoreFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('core.xml', ExcelStrings.getCore());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const hasSharedStrings = worksheetData.isEmpty === false;\n        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));\n    }\n}\n\n/**\n * @hidden\n */\nexport class ThemeFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('theme1.xml', ExcelStrings.getTheme());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetFile implements IExcelFile {\n    private static MIN_WIDTH = 8.34;\n\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const sheetData = [];\n        const cols = [];\n        let dimension: string;\n        const dictionary = worksheetData.dataDictionary;\n        let freezePane = '';\n        let maxOutlineLevel = 0;\n\n        if (worksheetData.isEmpty) {\n            sheetData.push('<sheetData/>');\n            dimension = 'A1';\n        } else {\n            sheetData.push('<sheetData>');\n            const height =  worksheetData.options.rowHeight;\n            const rowHeight = height ? ' ht=\"' + height + '\" customHeight=\"1\"' : '';\n\n            sheetData.push(`<row r=\"1\"${rowHeight}>`);\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const column = ExcelStrings.getExcelColumn(i) + 1;\n                const value = dictionary.saveValue(worksheetData.keys[i], i, true);\n                sheetData.push(`<c r=\"${column}\" t=\"s\"><v>${value}</v></c>`);\n            }\n            sheetData.push('</row>');\n\n            for (let i = 1; i < worksheetData.rowCount; i++) {\n                if (!worksheetData.isTreeGridData) {\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}>`);\n                } else {\n                    const rowData = worksheetData.data[i - 1].originalRowData;\n                    const sCollapsed = (!rowData.expanded) ? '' : (rowData.expanded === true) ? '' : ` collapsed=\"1\"`;\n                    const sHidden = (rowData.parent && this.hasCollapsedParent(rowData)) ? ` hidden=\"1\"` : '';\n                    const rowOutlineLevel = rowData.level ? rowData.level : 0;\n                    const sOutlineLevel = rowOutlineLevel > 0 ? ` outlineLevel=\"${rowOutlineLevel}\"` : '';\n                    maxOutlineLevel = maxOutlineLevel < rowOutlineLevel ? rowOutlineLevel : maxOutlineLevel;\n\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}${sOutlineLevel}${sCollapsed}${sHidden}>`);\n                }\n                for (let j = 0; j < worksheetData.columnCount; j++) {\n                    const cellData = WorksheetFile.getCellData(worksheetData, i, j);\n                    sheetData.push(cellData);\n                }\n                sheetData.push('</row>');\n            }\n            sheetData.push('</sheetData>');\n            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;\n\n            cols.push('<cols>');\n\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const width = dictionary.columnWidths[i];\n                // Use the width provided in the options if it exists\n                const widthInTwips = worksheetData.options.columnWidth ?\n                                    worksheetData.options.columnWidth :\n                                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);\n\n                cols.push(`<col min=\"${(i + 1)}\" max=\"${(i + 1)}\" width=\"${widthInTwips}\" customWidth=\"1\"/>`);\n            }\n\n            cols.push('</cols>');\n\n            if (worksheetData.indexOfLastPinnedColumn !== -1 &&\n                !worksheetData.options.ignorePinning &&\n                !worksheetData.options.ignoreColumnsOrder) {\n                const frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;\n                const firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';\n                freezePane = `<pane xSplit=\"${frozenColumnCount}\" topLeftCell=\"${firstCell}\" activePane=\"topRight\" state=\"frozen\"/>`;\n            }\n        }\n        const hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;\n\n        folder.file('sheet1.xml',\n                    ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable,\n                    worksheetData.isTreeGridData, maxOutlineLevel));\n    }\n\n    private hasCollapsedParent(rowData) {\n        let result = !rowData.parent.expanded;\n        while (rowData.parent) {\n            result = result || !rowData.parent.expanded;\n            rowData = rowData.parent;\n        }\n\n        return result;\n    }\n    /* tslint:disable member-ordering */\n    private static getCellData(worksheetData: WorksheetData, row: number, column: number): string {\n        const dictionary = worksheetData.dataDictionary;\n        const columnName = ExcelStrings.getExcelColumn(column) + (row + 1);\n        const columnHeader = worksheetData.keys[column];\n\n        const rowData = worksheetData.data[row - 1].rowData;\n\n        const cellValue = worksheetData.isSpecialData ? rowData : rowData[columnHeader];\n\n        if (cellValue === undefined || cellValue === null) {\n            return `<c r=\"${columnName}\" s=\"1\"/>`;\n        } else {\n            const savedValue = dictionary.saveValue(cellValue, column, false);\n            const isSavedAsString = savedValue !== -1;\n\n            const value = isSavedAsString ? savedValue : cellValue;\n            const type = isSavedAsString ? ` t=\"s\"` : '';\n            const format = isSavedAsString ? '' : ` s=\"1\"`;\n\n            return `<c r=\"${columnName}\"${type}${format}><v>${value}</v></c>`;\n        }\n    }\n    /* tslint:enable member-ordering */\n}\n\n/**\n * @hidden\n */\nexport class StyleFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('workbook.xml', ExcelStrings.getWorkbook());\n    }\n}\n\n/**\n * @hidden\n */\nexport class ContentTypesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));\n    }\n}\n\n/**\n * @hidden\n */\nexport class SharedStringsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const dict = worksheetData.dataDictionary;\n        const sortedValues = dict.getKeys();\n        const sharedStrings = new Array<string>(sortedValues.length);\n\n        for (const value of sortedValues) {\n            sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';\n        }\n\n        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(\n                        dict.stringsCount,\n                        sortedValues.length,\n                        sharedStrings.join(''))\n                    );\n    }\n}\n\n/**\n * @hidden\n */\nexport class TablesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const columnCount = worksheetData.columnCount;\n        const lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;\n        const dimension = 'A1:' + lastColumn;\n        const values = worksheetData.keys;\n        let sortString = '';\n\n        let tableColumns = '<tableColumns count=\"' + columnCount + '\">';\n        for (let i = 0; i < columnCount; i++) {\n            const value =  values[i];\n            tableColumns += '<tableColumn id=\"' + (i + 1) + '\" name=\"' + value + '\"/>';\n        }\n\n        tableColumns += '</tableColumns>';\n\n        if (worksheetData.sort) {\n            const sortingExpression = worksheetData.sort;\n            const sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));\n            const dir = sortingExpression.dir - 1;\n            sortString = `<sortState ref=\"A2:${lastColumn}\"><sortCondition descending=\"${dir}\" ref=\"${sc}1:${sc}15\"/></sortState>`;\n        }\n\n        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport { IExcelFolder } from './excel-interfaces';\nimport { WorksheetData } from './worksheet-data';\n\n/** @hidden */\nexport class RootExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ContentTypesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [\n            ExcelFolderTypes.RootRelsExcelFolder,\n            ExcelFolderTypes.DocPropsExcelFolder,\n            ExcelFolderTypes.XLExcelFolder\n        ];\n    }\n}\n\n/** @hidden */\nexport class RootRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.RootRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class DocPropsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'docProps';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [\n            ExcelFileTypes.AppFile,\n            ExcelFileTypes.CoreFile\n        ];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class XLExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'xl';\n    }\n\n    childFiles(data: WorksheetData) {\n        const retVal = [\n            ExcelFileTypes.StyleFile,\n            ExcelFileTypes.WorkbookFile\n        ];\n\n        if (!data.isEmpty) {\n            retVal.push(ExcelFileTypes.SharedStringsFile);\n        }\n\n        return retVal;\n    }\n\n    childFolders(data: WorksheetData) {\n        const retVal = [\n            ExcelFolderTypes.XLRelsExcelFolder,\n            ExcelFolderTypes.ThemeExcelFolder,\n            ExcelFolderTypes.WorksheetsExcelFolder\n        ];\n\n        if (!data.isEmpty && data.options.exportAsTable) {\n            retVal.push(ExcelFolderTypes.TablesExcelFolder);\n        }\n\n        return retVal;\n    }\n}\n\n/** @hidden */\nexport class XLRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorkbookRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class ThemeExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'theme';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ThemeFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'worksheets';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return data.isEmpty || !data.options.exportAsTable ? [] : [ExcelFolderTypes.WorksheetsRelsExcelFolder];\n    }\n}\n\n/** @hidden */\nexport class TablesExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return 'tables';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.TablesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport {\n    AppFile,\n    ContentTypesFile,\n    CoreFile,\n    RootRelsFile,\n    SharedStringsFile,\n    StyleFile,\n    TablesFile,\n    ThemeFile,\n    WorkbookFile,\n    WorkbookRelsFile,\n    WorksheetFile,\n    WorksheetRelsFile\n} from './excel-files';\n\nimport {\n    DocPropsExcelFolder,\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    TablesExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder\n} from './excel-folders';\n\nimport {\n    IExcelFile,\n    IExcelFolder\n} from './excel-interfaces';\n\n/** @hidden */\nexport class ExcelElementsFactory {\n\n    public static getExcelFolder(type: ExcelFolderTypes): IExcelFolder {\n        switch (type) {\n            case ExcelFolderTypes.RootExcelFolder:\n                return new RootExcelFolder();\n            case ExcelFolderTypes.RootRelsExcelFolder:\n                return new RootRelsExcelFolder();\n            case ExcelFolderTypes.DocPropsExcelFolder:\n                return new DocPropsExcelFolder();\n            case ExcelFolderTypes.XLExcelFolder:\n                return new XLExcelFolder();\n            case ExcelFolderTypes.XLRelsExcelFolder:\n                return new XLRelsExcelFolder();\n            case ExcelFolderTypes.ThemeExcelFolder:\n                return new ThemeExcelFolder();\n            case ExcelFolderTypes.WorksheetsExcelFolder:\n                return  new WorksheetsExcelFolder();\n            case ExcelFolderTypes.WorksheetsRelsExcelFolder:\n                return new WorksheetsRelsExcelFolder();\n            case ExcelFolderTypes.TablesExcelFolder:\n                return new TablesExcelFolder();\n            default:\n                throw new Error('Unknown excel folder type!');\n        }\n    }\n\n    public static getExcelFile(type: ExcelFileTypes): IExcelFile {\n        switch (type) {\n            case ExcelFileTypes.RootRelsFile:\n                return  new RootRelsFile();\n            case ExcelFileTypes.AppFile:\n                return  new AppFile();\n            case ExcelFileTypes.CoreFile:\n                return new CoreFile();\n            case ExcelFileTypes.WorkbookRelsFile:\n                return new WorkbookRelsFile();\n            case ExcelFileTypes.ThemeFile:\n                return new ThemeFile();\n            case ExcelFileTypes.WorksheetFile:\n                return new WorksheetFile();\n            case ExcelFileTypes.StyleFile:\n                return new StyleFile();\n            case ExcelFileTypes.WorkbookFile:\n                return new WorkbookFile();\n            case ExcelFileTypes.ContentTypesFile:\n                return new ContentTypesFile();\n            case ExcelFileTypes.SharedStringsFile:\n                return new SharedStringsFile();\n            case ExcelFileTypes.WorksheetRelsFile:\n                return new WorksheetRelsFile();\n            case ExcelFileTypes.TablesFile:\n                return new TablesFile();\n            default:\n                throw Error('Unknown excel file type!');\n        }\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/** @hidden */\nexport class WorksheetDataDictionary {\n    private static DEFAULT_FONT = '11pt Calibri';\n    private static TEXT_PADDING = 5;\n\n    private _dictionary: any;\n    private _widthsDictionary: any;\n\n    private _sortedKeysByValue: string[];\n    private _sortedKeysByValueAreValid: boolean;\n\n    private _keys: string[];\n    private _keysAreValid: boolean;\n\n    private _counter: number;\n    private _calculateColumnWidth: boolean;\n    private _columnWidths: number[];\n    private _context: any;\n\n    private _columnTypeInfo: boolean[];\n    public hasNonStringValues = false;\n\n    public stringsCount: number;\n\n    constructor(columnCount: number, columnWidth: number) {\n        this._dictionary = {};\n        this._widthsDictionary = {};\n        this._counter = 0;\n        this.dirtyKeyCollections();\n\n        this._calculateColumnWidth = !columnWidth;\n        this._columnWidths = new Array<number>(columnCount);\n        this._columnTypeInfo = new Array<boolean>(columnCount);\n\n        if (!this._calculateColumnWidth) {\n            this._columnWidths.fill(columnWidth);\n        }\n\n        this.stringsCount = 0;\n    }\n\n    public get columnWidths() {\n        return this._columnWidths;\n    }\n\n    public saveValue(value: any, column: number, isHeader: boolean): number {\n        if (this._columnTypeInfo[column] === undefined && isHeader === false) {\n            this._columnTypeInfo[column] = typeof value === 'string' ||\n                                            typeof value === 'boolean' ||\n                                            value instanceof Date;\n        }\n\n        let sanitizedValue = '';\n        const isSavedAsString = this._columnTypeInfo[column] || isHeader;\n\n        if (isSavedAsString) {\n            sanitizedValue = this.sanitizeValue(value);\n\n            if (this._dictionary[sanitizedValue] === undefined) {\n                this._dictionary[sanitizedValue] = this._counter++;\n                this.dirtyKeyCollections();\n            }\n\n            this.stringsCount ++;\n        } else {\n            this.hasNonStringValues = true;\n        }\n\n        if (this._calculateColumnWidth) {\n            const width = this.getTextWidth(value);\n            const maxWidth = Math.max(this._columnWidths[column] || 0, width);\n            this._columnWidths[column] = maxWidth;\n        }\n\n        return isSavedAsString ? this.getSanitizedValue(sanitizedValue) : -1;\n    }\n\n    public getValue(value: string): number {\n        return this.getSanitizedValue(this.sanitizeValue(value));\n    }\n\n    public getSanitizedValue(sanitizedValue: string): number {\n        return this._dictionary[sanitizedValue];\n    }\n\n    public getKeys(): string[] {\n        if (!this._keysAreValid) {\n            this._keys = Object.keys(this._dictionary);\n            this._keysAreValid = true;\n        }\n\n        return this._keys;\n    }\n\n    private getTextWidth(value: any): number {\n        if (this._widthsDictionary[value] === undefined) {\n            const context = this.getContext();\n            const metrics = context.measureText(value);\n            this._widthsDictionary[value] = metrics.width + WorksheetDataDictionary.TEXT_PADDING;\n        }\n\n        return this._widthsDictionary[value];\n    }\n\n    private getContext(): any {\n        if (!this._context) {\n            const canvas = document.createElement('canvas');\n            this._context = canvas.getContext('2d');\n            this._context.font = WorksheetDataDictionary.DEFAULT_FONT;\n        }\n\n        return this._context;\n    }\n\n    private sanitizeValue(value: any): string {\n        if (ExportUtilities.hasValue(value) === false) {\n            return '';\n        } else {\n            const stringValue = String(value);\n            return stringValue.replace(/&/g, '&amp;')\n                            .replace(/</g, '&lt;')\n                            .replace(/>/g, '&gt;')\n                            .replace(/\"/g, '&quot;')\n                            .replace(/'/g, '&apos;');\n        }\n    }\n\n    private dirtyKeyCollections(): void {\n        this._keysAreValid = false;\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { WorksheetDataDictionary } from './worksheet-data-dictionary';\n\n/** @hidden */\nexport class WorksheetData {\n    private _columnCount: number;\n    private _rowCount: number;\n    private _dataDictionary: WorksheetDataDictionary;\n    private _keys: string[];\n    private _isSpecialData: boolean;\n\n    constructor(private _data: any[], public options: IgxExcelExporterOptions, public indexOfLastPinnedColumn,\n                public sort: any, public isTreeGridData = false) {\n        this.initializeData();\n    }\n\n    public get data() {\n        return this._data;\n    }\n\n    public get columnCount(): number {\n        return this._columnCount;\n    }\n\n    public get rowCount(): number {\n        return this._rowCount;\n    }\n\n    public get isEmpty() {\n        return !this.rowCount || !this._columnCount;\n    }\n\n    public get keys(): string[] {\n        return this._keys;\n    }\n\n    public get isSpecialData(): boolean {\n        return this._isSpecialData;\n    }\n\n    public get dataDictionary() {\n        return this._dataDictionary;\n    }\n\n    private initializeData() {\n        if (!this._data || this._data.length === 0) {\n            return;\n        }\n\n        const actualData = this._data.map((item) => item.rowData);\n\n        this._keys = ExportUtilities.getKeysFromData(actualData);\n        if (this._keys.length === 0) {\n            return;\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(actualData);\n\n        this._columnCount = this._keys.length;\n        this._rowCount = this._data.length + 1;\n\n        this._dataDictionary = new WorksheetDataDictionary(this._columnCount, this.options.columnWidth);\n    }\n}\n","import * as JSZip from 'jszip/dist/jszip';\n\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { ExcelElementsFactory } from './excel-elements-factory';\nimport { ExcelFolderTypes } from './excel-enums';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { IExcelFolder } from './excel-interfaces';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { WorksheetData } from './worksheet-data';\n\nexport interface IExcelExportEndedEventArgs {\n    xlsx: JSZip;\n}\n\n/**\n * **Ignite UI for Angular Excel Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_excel.html)\n *\n * The Ignite UI for Angular Excel Exporter service can export data in MicrosoftÂ® ExcelÂ® format from both raw data\n * (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private excelExportService: IgxExcelExporterService) {\n * }\n *\n * this.excelExportService.exportData(this.localData, new IgxExcelExporterOptions(\"FileName\"));\n * ```\n */\n@Injectable()\nexport class IgxExcelExporterService extends IgxBaseExporter {\n\n    private static ZIP_OPTIONS = { compression: 'DEFLATE', type: 'base64' };\n    private _xlsx: JSZip;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxExcelExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<IExcelExportEndedEventArgs>();\n\n    private static populateFolder(folder: IExcelFolder, zip: JSZip, worksheetData: WorksheetData): any {\n        for (const childFolder of folder.childFolders(worksheetData)) {\n            const folderIntance = ExcelElementsFactory.getExcelFolder(childFolder);\n            const zipFolder = zip.folder(folderIntance.folderName);\n            IgxExcelExporterService.populateFolder(folderIntance, zipFolder, worksheetData);\n        }\n\n        for (const childFile of folder.childFiles(worksheetData)) {\n            const fileInstance = ExcelElementsFactory.getExcelFile(childFile);\n            fileInstance.writeElement(zip, worksheetData);\n        }\n    }\n\n    protected exportDataImplementation(data: any[], options: IgxExcelExporterOptions): void {\n        if (this._isTreeGrid) {\n            let maxLevel = 0;\n            data.forEach((r) => {\n                maxLevel = Math.max(maxLevel, r.originalRowData.level);\n            });\n            if (maxLevel > 7) {\n                throw Error('Can create an outline of up to eight levels!');\n            }\n        }\n\n        const worksheetData = new WorksheetData(data, options, this._indexOfLastPinnedColumn, this._sort, this._isTreeGrid);\n        this._xlsx = new JSZip();\n\n        const rootFolder = ExcelElementsFactory.getExcelFolder(ExcelFolderTypes.RootExcelFolder);\n        IgxExcelExporterService.populateFolder(rootFolder, this._xlsx, worksheetData);\n\n        this._xlsx.generateAsync(IgxExcelExporterService.ZIP_OPTIONS).then((result) => {\n            this.saveFile(result, options.fileName);\n\n            this.onExportEnded.emit({ xlsx: this._xlsx });\n        });\n    }\n\n    private saveFile(data: string, fileName: string): void {\n        const blob = new Blob([ExportUtilities.stringToArrayBuffer(atob(data))], {\n            type: ''\n        });\n\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the Excel exporting process.\n */\nexport class IgxExcelExporterOptions extends IgxExporterOptionsBase {\n    private _columnWidth: number;\n    private _rowHeight: number;\n\n    /**\n     * Specifies if column pinning should be ignored. If ignoreColumnsOrder is set to true,\n     * this option will always be considered as set to true.\n     * ```typescript\n     * let ignorePinning = this.exportOptions.ignorePinning;\n     * this.exportOptions.ignorePinning = true;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public ignorePinning = false;\n\n    /**\n     * Specifies whether the exported data should be formatted as Excel table. (True by default)\n     * ```typescript\n     * let exportAsTable = this.exportOptions.exportAsTable;\n     * this.exportOptions.exportAsTable = false;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public exportAsTable = true;\n\n    constructor(fileName: string) {\n        super(fileName, '.xlsx');\n    }\n\n    /**\n     * Gets the width of the columns in the exported excel file.\n     * ```typescript\n     * let width = this.exportOptions.columnWidth;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get columnWidth(): number {\n        return this._columnWidth;\n    }\n\n    /**\n     * Sets the width of the columns in the exported excel file. If left unspecified or 0,\n     * the width of the largest string in the column will be used.\n     * ```typescript\n     * this.exportOptions.columnWidth = 55;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set columnWidth(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for column width!');\n        }\n\n        this._columnWidth = value;\n    }\n\n    /**\n     * Gets the height of the rows in the exported excel file.\n     * ```typescript\n     * let height = this.exportOptions.rowHeight;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get rowHeight(): number {\n        return this._rowHeight;\n    }\n\n    /**\n     * Sets the height of the rows in the exported excel file. If left unspecified or 0,\n     * the default height of the excel rows will be used.\n     * ```typescript\n     * this.exportOptions.rowHeight = 25;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set rowHeight(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for row height!');\n        }\n\n        this._rowHeight = value;\n    }\n}\n","import { IPositionStrategy } from './position/IPositionStrategy';\n\nimport { IScrollStrategy } from './scroll';\nimport { AnimationReferenceMetadata, AnimationPlayer } from '@angular/animations';\nimport { ComponentRef, ElementRef, NgZone } from '@angular/core';\nimport { IgxOverlayOutletDirective } from '../../directives/toggle/toggle.directive';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, cloneValue } from '../../core/utils';\n\nexport enum HorizontalAlignment {\n    Left = -1,\n    Center = -0.5,\n    Right = 0\n}\n\nexport enum VerticalAlignment {\n    Top = -1,\n    Middle = -0.5,\n    Bottom = 0\n}\n\nexport class Point {\n    constructor(public x: number, public y: number) { }\n}\n\nexport interface PositionSettings {\n    /** Attaching target for the component to show */\n    target?: Point | HTMLElement;\n    /** Direction in which the component should show */\n    horizontalDirection?: HorizontalAlignment;\n    /** Direction in which the component should show */\n    verticalDirection?: VerticalAlignment;\n    /** Target's starting point */\n    horizontalStartPoint?: HorizontalAlignment;\n    /** Target's starting point */\n    verticalStartPoint?: VerticalAlignment;\n    /** Animation applied while overlay opens */\n    openAnimation?: AnimationReferenceMetadata;\n    /** Animation applied while overlay closes */\n    closeAnimation?: AnimationReferenceMetadata;\n    /** The size up to which element may shrink when shown in elastic position strategy */\n    minSize?: Size;\n}\n\nexport interface OverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set if the overlay should be in modal mode */\n    modal?: boolean;\n    /** Set if the overlay should closed on outside click */\n    closeOnOutsideClick?: boolean;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * @hidden @internal\n     * Exclude the position strategy target for outside clicks\n     */\n    excludePositionTarget?: boolean;\n}\n\nexport interface OverlayEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Available when `Type<T>` is provided to the `attach()` method and allows access to the created Component instance */\n    componentRef?: ComponentRef<{}>;\n}\n\nexport interface OverlayCancelableEventArgs extends OverlayEventArgs, CancelableEventArgs {\n}\n\nexport interface OverlayClosingEventArgs extends OverlayEventArgs, CancelableBrowserEventArgs {\n}\n\nexport interface OverlayAnimationEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Animation player that will play the animation */\n    animationPlayer: AnimationPlayer;\n    /** Type of animation to be played. It should be either 'open' or 'close' */\n    animationType: 'open' | 'close';\n}\n\nexport interface Size {\n    /** Gets or sets the horizontal component of Size */\n    width: number;\n\n    /** Gets or sets the vertical component of Size */\n    height: number;\n}\n\n/**\n * @hidden\n * Calculates the rectangle of target for provided overlay settings. Defaults to 0,0,0,0 rectangle\n * if no target is provided\n * @param settings Overlay settings for which to calculate target rectangle\n */\nexport function getTargetRect(settings: PositionSettings): ClientRect {\n    let targetRect: ClientRect = {\n        bottom: 0,\n        height: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n        width: 0\n    };\n\n    if (settings.target instanceof HTMLElement) {\n        targetRect = (settings.target as HTMLElement).getBoundingClientRect();\n    } else if (settings.target instanceof Point) {\n        const targetPoint = settings.target as Point;\n        targetRect = {\n            bottom: targetPoint.y,\n            height: 0,\n            left: targetPoint.x,\n            right: targetPoint.x,\n            top: targetPoint.y,\n            width: 0\n        };\n    }\n\n    return targetRect;\n}\n\n/** @hidden */\nexport interface OverlayInfo {\n    id?: string;\n    elementRef?: ElementRef;\n    componentRef?: ComponentRef<{}>;\n    settings?: OverlaySettings;\n    initialSize?: Size;\n    hook?: HTMLElement;\n    openAnimationPlayer?: AnimationPlayer;\n    closeAnimationPlayer?: AnimationPlayer;\n    openAnimationInnerPlayer?: any;\n    closeAnimationInnerPlayer?: any;\n    ngZone: NgZone;\n}\n\n/** @hidden @internal */\nexport function getViewportRect(document: Document): ClientRect {\n    const width = document.documentElement.clientWidth;\n    const height = document.documentElement.clientHeight;\n    const scrollPosition = getViewportScrollPosition();\n\n    return {\n        top: scrollPosition.y,\n        left: scrollPosition.x,\n        right: scrollPosition.x + width,\n        bottom: scrollPosition.y + height,\n        width: width,\n        height: height,\n    };\n}\n\n/** @hidden @internal */\nexport function getViewportScrollPosition(): Point {\n    const documentElement = document.documentElement;\n    const documentRect = documentElement.getBoundingClientRect();\n\n    const horizontalScrollPosition = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n    const verticalScrollPosition = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n\n    return new Point(horizontalScrollPosition, verticalScrollPosition);\n}\n\n/** @hidden @internal*/\nexport function cloneInstance(object) {\n    const clonedObj = Object.assign(Object.create(Object.getPrototypeOf(object)), object);\n    clonedObj.settings = cloneValue(clonedObj.settings);\n    return clonedObj;\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport { PositionSettings, HorizontalAlignment, VerticalAlignment, Size, cloneInstance } from './../utilities';\nimport { fadeIn, fadeOut } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    private _defaultSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Center,\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut,\n        minSize: { width: 0, height: 0 }\n    };\n\n    /** @inheritdoc */\n    public settings: PositionSettings;\n\n    constructor(settings?: PositionSettings) {\n        this.settings = Object.assign({}, this._defaultSettings, settings);\n    }\n\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex');\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                contentElement.parentElement.style.justifyContent = 'flex-start';\n                break;\n            case HorizontalAlignment.Center:\n                contentElement.parentElement.style.justifyContent = 'center';\n                break;\n            case HorizontalAlignment.Right:\n                contentElement.parentElement.style.justifyContent = 'flex-end';\n                break;\n            default:\n                break;\n        }\n\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                contentElement.parentElement.style.alignItems = 'flex-start';\n                break;\n            case VerticalAlignment.Middle:\n                contentElement.parentElement.style.alignItems = 'center';\n                break;\n            case VerticalAlignment.Bottom:\n                contentElement.parentElement.style.alignItems = 'flex-end';\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @inheritdoc */\n    clone(): IPositionStrategy {\n        return cloneInstance(this);\n    }\n}\n\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport abstract class ScrollStrategy implements IScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) { }\n    /** @inheritdoc */\n    abstract initialize(document: Document, overlayService: IgxOverlayService, id: string);\n\n    /** @inheritdoc */\n    abstract attach(): void;\n\n    /** @inheritdoc */\n    abstract detach(): void;\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Empty scroll strategy. Does nothing.\n */\nexport class NoOpScrollStrategy extends ScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) { }\n\n    /** @inheritdoc */\n    attach(): void { }\n\n    /** @inheritdoc */\n    detach(): void { }\n}\n","import { isDevMode } from '@angular/core';\n\n/**\n * @hidden\n */\nexport function DeprecateMethod(message: string): MethodDecorator {\n    let isMessageShown = false;\n\n    return function (target: any, key: string, descriptor: PropertyDescriptor) {\n        if (descriptor && descriptor.value) {\n            const originalMethod = descriptor.value;\n\n            descriptor.value = function () {\n                const targetName = typeof target === 'function' ? target.name : target.constructor.name;\n                isMessageShown = showMessage(`${targetName}.${key}: ${message}`, isMessageShown);\n\n                return originalMethod.call(this, arguments);\n            };\n\n            return descriptor;\n        }\n    };\n}\n\n/**\n * @hidden\n */\nexport function DeprecateProperty(message: string): PropertyDecorator {\n    return function(target: any, key: string) {\n        let isMessageShown = false;\n        const messageToDisplay = `${target.constructor.name}.${key}: ${message}`;\n\n        // if the target already has the property defined\n        const originalDescriptor = Object.getOwnPropertyDescriptor(target, key);\n        if (originalDescriptor) {\n            let getter, setter;\n            getter = originalDescriptor.get;\n            setter = originalDescriptor.set;\n\n            if (getter) {\n                originalDescriptor.get = function() {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    return getter.call(this);\n                };\n            }\n\n            if (setter) {\n                originalDescriptor.set = function (value) {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    setter.call(this, value);\n                };\n            }\n\n            return originalDescriptor;\n        }\n\n        // the target doesn't contain a descriptor for that property, so create one\n        // use backing field to set/get the value of the property to ensure there won't be infinite recursive calls\n        const newKey = generateUniqueKey(target, key);\n        Object.defineProperty(target, key, {\n            configurable: true,\n            enumerable: true,\n            set: function(value) {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                this[newKey] = value;\n            },\n            get: function() {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                return this[newKey];\n            }\n        });\n    };\n}\n\n/**\n * @hidden\n */\nfunction generateUniqueKey(target: any, key: string): string {\n    let newKey = '_' + key;\n    while (target.hasOwnProperty(newKey)) {\n        newKey = '_' + newKey;\n    }\n\n    return newKey;\n}\n\n/**\n * @hidden\n */\nexport function showMessage(message: string, isMessageShown: boolean): boolean {\n    if (!isMessageShown && isDevMode()) {\n        console.warn(message);\n    }\n\n    return true;\n}\n","import { DOCUMENT } from '@angular/common';\nimport { GlobalPositionStrategy } from './position/global-position-strategy';\nimport { NoOpScrollStrategy } from './scroll/NoOpScrollStrategy';\nimport {\n    OverlaySettings,\n    OverlayEventArgs,\n    OverlayInfo,\n    OverlayAnimationEventArgs,\n    OverlayCancelableEventArgs,\n    OverlayClosingEventArgs\n} from './utilities';\n\nimport {\n    ApplicationRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injectable,\n    Injector,\n    Type,\n    OnDestroy,\n    NgModuleRef,\n    NgZone\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, AnimationMetadataType, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { fromEvent, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { IAnimationParams } from '../../animations/main';\nimport { showMessage } from '../../core/deprecateDecorators';\n\nlet warningShown = false;\n\n/**\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay_main.html)\n * The overlay service allows users to show components on overlay div above all other elements in the page.\n */\n@Injectable({ providedIn: 'root' })\nexport class IgxOverlayService implements OnDestroy {\n    private _componentId = 0;\n    private _overlayInfos: OverlayInfo[] = [];\n    private _overlayElement: HTMLElement;\n    private _document: Document;\n    private destroy$ = new Subject<boolean>();\n\n    private _defaultSettings: OverlaySettings = {\n        positionStrategy: new GlobalPositionStrategy(),\n        scrollStrategy: new NoOpScrollStrategy(),\n        modal: true,\n        closeOnOutsideClick: true\n    };\n\n    /**\n     * Emitted before the component is opened.\n     * ```typescript\n     * onOpening(event: OverlayCancelableEventArgs){\n     *     const onOpening = event;\n     * }\n     * ```\n     */\n    public onOpening = new EventEmitter<OverlayCancelableEventArgs>();\n\n    /**\n     * Emitted after the component is opened and all animations are finished.\n     * ```typescript\n     * onOpened(event: OverlayEventArgs){\n     *     const onOpened = event;\n     * }\n     * ```\n     */\n    public onOpened = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before the component is closed.\n     * ```typescript\n     * onClosing(event: OverlayCancelableEventArgs){\n     *     const onClosing = event;\n     * }\n     * ```\n     */\n    public onClosing = new EventEmitter<OverlayClosingEventArgs>();\n\n    /**\n     * Emitted after the component is closed and all animations are finished.\n     * ```typescript\n     * onClosed(event: OverlayEventArgs){\n     *     const onClosed = event;\n     * }\n     * ```\n     */\n    public onClosed = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before animation is started\n     * ```typescript\n     * onAnimation(event: OverlayAnimationEventArgs){\n     *     const onAnimation = event;\n     * }\n     * ```\n     */\n    public onAnimation = new EventEmitter<OverlayAnimationEventArgs>();\n\n    constructor(\n        private _factoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private builder: AnimationBuilder,\n        @Inject(DOCUMENT) private document: any,\n        private _zone: NgZone) {\n        this._document = <Document>this.document;\n    }\n\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component ElementRef to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(element: ElementRef, settings?: OverlaySettings): string;\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @param moduleRef Optional reference to the NgModule that can resolve the component's factory\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(component: Type<any>, settings?: OverlaySettings, moduleRef?: NgModuleRef<any>): string;\n    attach(component: ElementRef | Type<any>, settings?: OverlaySettings, moduleRef?: NgModuleRef<any>): string {\n        let info: OverlayInfo;\n        info = this.getOverlayInfo(component, moduleRef);\n\n        //  if there is no info most probably wrong type component was provided and we just go out\n        if (!info) {\n            return null;\n        }\n\n        info.id = (this._componentId++).toString();\n        settings = Object.assign({}, this._defaultSettings, settings);\n        info.settings = settings;\n        this._overlayInfos.push(info);\n        return info.id;\n    }\n\n    /**\n     * Shows the overlay for provided id.\n     * @param id Id to show overlay for\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     */\n    show(id: string, settings?: OverlaySettings): string;\n    /**\n     * Shows the provided component.\n     * @param component ElementRef or Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     * ```typescript\n     * this.overlay.show(element, settings);\n     * ```\n     * @deprecated Use `attach(component)` to obtain an Id. Then `show(id, settings?)` with provided Id.\n     */\n    // tslint:disable-next-line:unified-signatures\n    show(component: ElementRef | Type<any>, settings?: OverlaySettings): string;\n    show(compOrId: string | ElementRef | Type<any>, settings?: OverlaySettings): string {\n        let info: OverlayInfo;\n        let id: string;\n        if (typeof compOrId === 'string') {\n            id = compOrId;\n            info = this.getOverlayById(compOrId);\n            if (!info) {\n                console.warn('igxOverlay.show was called with wrong id: ' + compOrId);\n                return null;\n            }\n        } else {\n            warningShown = showMessage(\n                '`show(component, settings?)` overload is deprecated. Use `attach(component)` to obtain an Id.' +\n                'Then `show(id, settings?)` with provided Id.',\n                warningShown);\n            id = (this._componentId++).toString();\n            info = this.getOverlayInfo(compOrId);\n\n            //  if there is no info most probably wrong type component was provided and we just go out\n            if (!info) {\n                return;\n            }\n\n            info.id = id;\n        }\n\n        settings = Object.assign({}, this._defaultSettings, info.settings, settings);\n        info.settings = settings;\n\n        this._show(info);\n        return id;\n    }\n\n    /**\n     * Hides the component with the ID provided as a parameter.\n     * ```typescript\n     * this.overlay.hide(id);\n     * ```\n     */\n    hide(id: string) {\n        this._hide(id);\n    }\n\n    /**\n     * Hides all the components and the overlay.\n     * ```typescript\n     * this.overlay.hideAll();\n     * ```\n     */\n    hideAll() {\n        // since overlays are removed on animation done, que all hides\n        for (let i = this._overlayInfos.length; i--;) {\n            this.hide(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     * Repositions the component with ID provided as a parameter.\n     * ```typescript\n     * this.overlay.reposition(id);\n     * ```\n     */\n    reposition(id: string) {\n        const overlayInfo = this.getOverlayById(id);\n        if (!overlayInfo || !overlayInfo.settings) {\n            console.error('Wrong id provided in overlay.reposition method. Id: ' + id);\n            return;\n        }\n\n        const contentElement = overlayInfo.elementRef.nativeElement.parentElement;\n        const contentElementRect = contentElement.getBoundingClientRect();\n        overlayInfo.settings.positionStrategy.position(\n            contentElement,\n            {\n                width: contentElementRect.width,\n                height: contentElementRect.height\n            },\n            this._document,\n            false);\n    }\n\n    private _show(info: OverlayInfo) {\n        const eventArgs: OverlayCancelableEventArgs = { id: info.id, componentRef: info.componentRef, cancel: false };\n        this.onOpening.emit(eventArgs);\n        if (eventArgs.cancel) {\n            if (info.componentRef) {\n                this._appRef.detachView(info.componentRef.hostView);\n                info.componentRef.destroy();\n            }\n\n            return;\n        }\n\n        //  if there is no close animation player, or there is one but it is not started yet we are in clear\n        //  opening. Otherwise, if there is close animation player playing animation now we should not setup\n        //  overlay this is already done\n        if (!info.closeAnimationPlayer || (info.closeAnimationPlayer && !info.closeAnimationPlayer.hasStarted())) {\n            const elementRect = info.elementRef.nativeElement.getBoundingClientRect();\n            info.initialSize = { width: elementRect.width, height: elementRect.height };\n            info.hook = this.placeElementHook(info.elementRef.nativeElement);\n\n            this.moveElementToOverlay(info);\n            if (info.componentRef) {\n                info.componentRef.changeDetectorRef.detectChanges();\n            }\n            this.updateSize(info);\n            if (this._overlayInfos.indexOf(info) === -1) {\n                this._overlayInfos.push(info);\n            }\n\n            info.settings.positionStrategy.position(\n                info.elementRef.nativeElement.parentElement,\n                { width: info.initialSize.width, height: info.initialSize.height },\n                document,\n                true);\n            info.settings.scrollStrategy.initialize(this._document, this, info.id);\n            info.settings.scrollStrategy.attach();\n        }\n\n        this.addOutsideClickListener(info);\n        this.addResizeHandler(info.id);\n\n        if (info.settings.modal) {\n            this.setupModalWrapper(info);\n        }\n\n        if (info.settings.positionStrategy.settings.openAnimation) {\n            this.playOpenAnimation(info);\n        } else {\n            //  to eliminate flickering show the element just before onOpened fire\n            info.elementRef.nativeElement.parentElement.style.visibility = '';\n            this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n        }\n    }\n\n    private _hide(id: string, event?: Event) {\n        const info: OverlayInfo = this.getOverlayById(id);\n\n        if (!info) {\n            console.warn('igxOverlay.hide was called with wrong id: ' + id);\n            return;\n        }\n\n        const eventArgs = { id, componentRef: info.componentRef, cancel: false, event };\n        this.onClosing.emit(eventArgs);\n        if (eventArgs.cancel) {\n            return;\n        }\n\n        //  TODO: synchronize where these are added/attached and where removed/detached\n        info.settings.scrollStrategy.detach();\n        this.removeOutsideClickListener(info);\n        this.removeResizeHandler(info.id);\n\n        const child: HTMLElement = info.elementRef.nativeElement;\n        if (info.settings.modal) {\n            const parent = child.parentNode.parentNode as HTMLElement;\n            this.applyAnimationParams(parent, info.settings.positionStrategy.settings.closeAnimation);\n            parent.classList.remove('igx-overlay__wrapper--modal');\n            parent.classList.add('igx-overlay__wrapper');\n        }\n\n        if (info.settings.positionStrategy.settings.closeAnimation) {\n            this.playCloseAnimation(info);\n        } else {\n            this.onCloseDone(info);\n        }\n    }\n\n    private getOverlayInfo(component: any, moduleRef?: NgModuleRef<any>): OverlayInfo {\n        const info: OverlayInfo = { ngZone: this._zone };\n        if (component instanceof ElementRef) {\n            info.elementRef = <ElementRef>component;\n        } else {\n            let dynamicFactory: ComponentFactory<{}>;\n            const factoryResolver = moduleRef ? moduleRef.componentFactoryResolver : this._factoryResolver;\n            try {\n                dynamicFactory = factoryResolver.resolveComponentFactory(component);\n            } catch (error) {\n                console.error(error);\n                return null;\n            }\n\n            const injector = moduleRef ? moduleRef.injector : this._injector;\n            const dynamicComponent: ComponentRef<{}> = dynamicFactory.create(injector);\n            this._appRef.attachView(dynamicComponent.hostView);\n\n            // If the element is newly created from a Component, it is wrapped in 'ng-component' tag - we do not want that.\n            const element = dynamicComponent.location.nativeElement;\n            info.elementRef = <ElementRef>{ nativeElement: element };\n            info.componentRef = dynamicComponent;\n        }\n\n        return info;\n    }\n\n    private placeElementHook(element: HTMLElement): HTMLElement {\n        if (!element.parentElement) {\n            return null;\n        }\n\n        const hook = this._document.createElement('div');\n        element.parentElement.insertBefore(hook, element);\n        return hook;\n    }\n\n    private moveElementToOverlay(info: OverlayInfo) {\n        const wrapperElement = this.getWrapperElement();\n        const contentElement = this.getContentElement(wrapperElement, info.settings.modal);\n        this.getOverlayElement(info).appendChild(wrapperElement);\n        const elementScrollTop = info.elementRef.nativeElement.scrollTop;\n        contentElement.appendChild(info.elementRef.nativeElement);\n\n        if (elementScrollTop) {\n            info.elementRef.nativeElement.scrollTop = elementScrollTop;\n        }\n    }\n\n    private getWrapperElement(): HTMLElement {\n        const wrapper: HTMLElement = this._document.createElement('div');\n        wrapper.classList.add('igx-overlay__wrapper');\n        return wrapper;\n    }\n\n    private getContentElement(wrapperElement: HTMLElement, modal: boolean): HTMLElement {\n        const content: HTMLElement = this._document.createElement('div');\n        if (modal) {\n            content.classList.add('igx-overlay__content--modal');\n            content.addEventListener('click', (ev: Event) => {\n                ev.stopPropagation();\n            });\n        } else {\n            content.classList.add('igx-overlay__content');\n        }\n\n        content.addEventListener('scroll', (ev: Event) => {\n            ev.stopPropagation();\n        });\n\n        //  hide element to eliminate flickering. Show the element exactly before animation starts\n        content.style.visibility = 'hidden';\n\n        wrapperElement.appendChild(content);\n        return content;\n    }\n\n    private getOverlayElement(info: OverlayInfo): HTMLElement {\n        if (info.settings.outlet) {\n            return info.settings.outlet.nativeElement;\n        }\n        if (!this._overlayElement) {\n            this._overlayElement = this._document.createElement('div');\n            this._overlayElement.classList.add('igx-overlay');\n            this._document.body.appendChild(this._overlayElement);\n        }\n\n        return this._overlayElement;\n    }\n\n    private updateSize(info: OverlayInfo) {\n        if (info.componentRef) {\n            //  if we are positioning component this is first time it gets visible\n            //  and we can finally get its size\n            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();\n        }\n\n        // set content div width only if element to show has width\n        if (info.initialSize.width !== 0) {\n            info.elementRef.nativeElement.parentElement.style.width = info.initialSize.width + 'px';\n        }\n    }\n\n    private setupModalWrapper(info: OverlayInfo) {\n        const wrapperElement = info.elementRef.nativeElement.parentElement.parentElement;\n        fromEvent(wrapperElement, 'keydown').pipe(\n            filter((ev: KeyboardEvent) => ev.key === 'Escape' || ev.key === 'Esc'),\n            takeUntil(this.destroy$)\n        ).subscribe(() => this.hide(info.id));\n        wrapperElement.classList.remove('igx-overlay__wrapper');\n        this.applyAnimationParams(wrapperElement, info.settings.positionStrategy.settings.openAnimation);\n        wrapperElement.classList.add('igx-overlay__wrapper--modal');\n    }\n\n    private onCloseDone(info: OverlayInfo) {\n        this.cleanUp(info);\n        this.onClosed.emit({ id: info.id, componentRef: info.componentRef });\n    }\n\n    private cleanUp(info: OverlayInfo) {\n        const child: HTMLElement = info.elementRef.nativeElement;\n        const outlet = this.getOverlayElement(info);\n        if (!outlet.contains(child)) {\n            console.warn('Component with id:' + info.id + ' is already removed!');\n            return;\n        }\n\n        outlet.removeChild(child.parentNode.parentNode);\n        if (info.componentRef) {\n            this._appRef.detachView(info.componentRef.hostView);\n            info.componentRef.destroy();\n        }\n\n        if (info.hook) {\n            info.hook.parentElement.insertBefore(info.elementRef.nativeElement, info.hook);\n            info.hook.parentElement.removeChild(info.hook);\n        }\n\n        const index = this._overlayInfos.indexOf(info);\n        this._overlayInfos.splice(index, 1);\n\n        // this._overlayElement.parentElement check just for tests that manually delete the element\n        if (this._overlayInfos.length === 0 && this._overlayElement && this._overlayElement.parentElement) {\n            this._overlayElement.parentElement.removeChild(this._overlayElement);\n            this._overlayElement = null;\n        }\n    }\n\n    private playOpenAnimation(info: OverlayInfo) {\n        if (!info.openAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.openAnimation);\n            info.openAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.openAnimationPlayer)._renderer;\n            info.openAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n            info.openAnimationPlayer.onDone(() => {\n                this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n                if (info.openAnimationPlayer) {\n                    info.openAnimationPlayer.reset();\n                    info.openAnimationPlayer = null;\n                }\n\n                if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n                    info.closeAnimationPlayer.reset();\n                }\n            });\n        }\n\n        //  if there is opening animation already started do nothing\n        if (info.openAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is closing animation already started start open animation from where close one has reached\n        //  and remove close animation\n        if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.closeAnimationInnerPlayer.getPosition();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n            info.openAnimationPlayer.init();\n            info.openAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.openAnimationPlayer, animationType: 'open' });\n\n        //  to eliminate flickering show the element just before animation start\n        info.elementRef.nativeElement.parentElement.style.visibility = '';\n        info.openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(info: OverlayInfo) {\n        if (!info.closeAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.closeAnimation);\n            info.closeAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.closeAnimationPlayer)._renderer;\n            info.closeAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n\n            info.closeAnimationPlayer.onDone(() => {\n                if (info.closeAnimationPlayer) {\n                    info.closeAnimationPlayer.reset();\n                    info.closeAnimationPlayer = null;\n                }\n\n                if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n                    info.openAnimationPlayer.reset();\n                }\n                this.onCloseDone(info);\n            });\n        }\n\n        //  if there is closing animation already started do nothing\n        if (info.closeAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is opening animation already started start close animation from where open one has reached\n        //  and remove open animation\n        if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.openAnimationInnerPlayer.getPosition();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n            info.closeAnimationPlayer.init();\n            info.closeAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.closeAnimationPlayer, animationType: 'close' });\n        info.closeAnimationPlayer.play();\n    }\n\n    //  TODO: check if applyAnimationParams will work with complex animations\n    private applyAnimationParams(wrapperElement: HTMLElement, animationOptions: AnimationReferenceMetadata) {\n        if (!animationOptions) {\n            wrapperElement.style.transitionDuration = '0ms';\n            return;\n        }\n        if (animationOptions.type === AnimationMetadataType.AnimateRef) {\n            animationOptions = (animationOptions as AnimationAnimateRefMetadata).animation;\n        }\n        if (!animationOptions.options || !animationOptions.options.params) {\n            return;\n        }\n        const params = animationOptions.options.params as IAnimationParams;\n        if (params.duration) {\n            wrapperElement.style.transitionDuration = params.duration;\n        }\n        if (params.easing) {\n            wrapperElement.style.transitionTimingFunction = params.easing;\n        }\n    }\n\n    /** @hidden @internal */\n    public getOverlayById(id: string): OverlayInfo {\n        if (!id) {\n            return null;\n        }\n\n        const info = this._overlayInfos.find(e => e.id === id);\n        return info;\n    }\n\n    private documentClicked = (ev: MouseEvent) => {\n        //  if we get to modal overlay just return - we should not close anything under it\n        //  if we get to non-modal overlay do the next:\n        //   1. Check it has close on outside click. If not go on to next overlay;\n        //   2. If true check if click is on the element. If it is on the element we have closed\n        //  already all previous non-modal with close on outside click elements, so we return. If\n        //  not close the overlay and check next\n        for (let i = this._overlayInfos.length; i--;) {\n            const info = this._overlayInfos[i];\n            if (info.settings.modal) {\n                return;\n            }\n            if (info.settings.closeOnOutsideClick) {\n                //  if the click is on the element do not close this overlay\n                if (!info.elementRef.nativeElement.contains(ev.target)) {\n                    // if we should exclude position target check if the click is over it. If so do not close overlay\n                    const positionTarget = info.settings.positionStrategy.settings.target as HTMLElement;\n                    let clickOnPositionTarget = false;\n                    if (positionTarget) {\n                        const positionTargetRect = positionTarget.getBoundingClientRect();\n                        clickOnPositionTarget = ev.clientX >= positionTargetRect.left && ev.clientX <= positionTargetRect.right &&\n                                                ev.clientY >= positionTargetRect.top && ev.clientY <= positionTargetRect.bottom;\n                    }\n\n                    if (!(info.settings.excludePositionTarget && clickOnPositionTarget)) {\n                        //  if the click is outside click, but close animation has started do nothing\n                        if (!(info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted())) {\n                            this._hide(info.id, ev);\n                        }\n                    }\n                } else {\n                    //  TODO: should we return here, or continue with next overlays\n                    return;\n                }\n            }\n        }\n    }\n\n    private addOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.closeOnOutsideClick) {\n            if (info.settings.modal) {\n                fromEvent(info.elementRef.nativeElement.parentElement.parentElement, 'click')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe(() => this.hide(info.id));\n            } else if (\n                //  if all overlays minus closing overlays equals one add the handler\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal).length -\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal &&\n                    x.closeAnimationPlayer &&\n                    x.closeAnimationPlayer.hasStarted()).length === 1) {\n                this._document.addEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private removeOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.modal === false) {\n            let shouldRemoveClickEventListener = true;\n            this._overlayInfos.forEach(o => {\n                if (o.settings.modal === false && o.id !== info.id) {\n                    shouldRemoveClickEventListener = false;\n                }\n            });\n\n            if (shouldRemoveClickEventListener) {\n                this._document.removeEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private addResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.addEventListener('resize', this.repositionAll);\n        }\n    }\n\n    private removeResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.removeEventListener('resize', this.repositionAll);\n        }\n    }\n\n    /** @hidden */\n    public repositionAll = () => {\n        for (let i = this._overlayInfos.length; i--;) {\n            this.reposition(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport {\n  getTargetRect,\n  cloneInstance,\n  HorizontalAlignment,\n  Point,\n  PositionSettings,\n  Size,\n  VerticalAlignment\n} from './../utilities';\nimport { scaleInVerTop, scaleOutVerTop } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions and start point passed in trough PositionSettings.\n * It is possible to either pass a start point or an HTMLElement as a positioning base.\n */\nexport class ConnectedPositioningStrategy implements IPositionStrategy {\n  private _defaultSettings: PositionSettings = {\n    // default Point(0, 0) in getPointFromPositionsSettings\n    target: null,\n    horizontalDirection: HorizontalAlignment.Right,\n    verticalDirection: VerticalAlignment.Bottom,\n    horizontalStartPoint: HorizontalAlignment.Left,\n    verticalStartPoint: VerticalAlignment.Bottom,\n    openAnimation: scaleInVerTop,\n    closeAnimation: scaleOutVerTop,\n    minSize: { width: 0, height: 0 }\n  };\n\n  /** @inheritdoc */\n  public settings: PositionSettings;\n\n  constructor(settings?: PositionSettings) {\n    this.settings = Object.assign({}, this._defaultSettings, settings);\n  }\n\n  /** @inheritdoc */\n  position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n    const targetRect = getTargetRect(this.settings);\n    const contentElementRect = contentElement.getBoundingClientRect();\n    this.setStyle(contentElement, targetRect, contentElementRect);\n  }\n\n  /**\n   * @inheritdoc\n   * Creates clone of this position strategy\n   * @returns clone of this position strategy\n   */\n  clone(): IPositionStrategy {\n    return cloneInstance(this);\n  }\n\n  /**\n   * Sets element's style which effectively positions provided element according\n   * to provided position settings\n   * @param element Element to position\n   * @param targetRect Bounding rectangle of strategy target\n   * @param elementRect Bounding rectangle of the element\n   */\n  protected setStyle(element: HTMLElement, targetRect: ClientRect, elementRect: ClientRect) {\n    const startPoint: Point = {\n      x: targetRect.right + targetRect.width * this.settings.horizontalStartPoint,\n      y: targetRect.bottom + targetRect.height * this.settings.verticalStartPoint,\n    };\n    const wrapperRect: ClientRect = element.parentElement.getBoundingClientRect();\n\n    //  clean up styles - if auto position strategy is chosen we may pass here several times\n    element.style.right = '';\n    element.style.left = '';\n    element.style.bottom = '';\n    element.style.top = '';\n\n    switch (this.settings.horizontalDirection) {\n      case HorizontalAlignment.Left:\n        element.style.right = `${Math.round(wrapperRect.right - startPoint.x)}px`;\n        break;\n      case HorizontalAlignment.Center:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left - elementRect.width / 2)}px`;\n        break;\n      case HorizontalAlignment.Right:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left)}px`;\n        break;\n    }\n\n    switch (this.settings.verticalDirection) {\n      case VerticalAlignment.Top:\n        element.style.bottom = `${Math.round(wrapperRect.bottom - startPoint.y)}px`;\n        break;\n      case VerticalAlignment.Middle:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top - elementRect.height / 2)}px`;\n        break;\n      case VerticalAlignment.Bottom:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top)}px`;\n        break;\n    }\n  }\n}\n","import { ConnectedPositioningStrategy } from './connected-positioning-strategy';\nimport { HorizontalAlignment, VerticalAlignment, PositionSettings, Size, getViewportRect, getTargetRect } from '../utilities';\n\nexport abstract class BaseFitPositionStrategy extends ConnectedPositioningStrategy {\n    protected _initialSize: Size;\n    protected _initialSettings: PositionSettings;\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const targetRect = getTargetRect(this.settings);\n        const contentElementRect = contentElement.getBoundingClientRect();\n        if (initialCall) {\n            const connectedFit: ConnectedFit = {};\n            connectedFit.targetRect = targetRect;\n            connectedFit.contentElementRect = contentElementRect;\n            this._initialSettings = this._initialSettings || Object.assign({}, this.settings);\n            this.settings = Object.assign({}, this._initialSettings);\n            connectedFit.viewPortRect = getViewportRect(document);\n            this.updateViewPortFit(connectedFit);\n            if (!connectedFit.fitHorizontal || !connectedFit.fitVertical) {\n                this.fitInViewport(contentElement, connectedFit);\n            }\n        }\n        this.setStyle(contentElement, targetRect, contentElementRect);\n    }\n\n    /**\n     * Checks if element can fit in viewport and updates provided connectedFit\n     * with the result\n     * @param connectedFit connectedFit to update\n     */\n    protected updateViewPortFit(connectedFit: ConnectedFit) {\n        connectedFit.left = this.calculateLeft(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.horizontalStartPoint,\n            this.settings.horizontalDirection);\n        connectedFit.right = connectedFit.left + connectedFit.contentElementRect.width;\n        connectedFit.fitHorizontal =\n            connectedFit.viewPortRect.left < connectedFit.left && connectedFit.right < connectedFit.viewPortRect.right;\n\n        connectedFit.top = this.calculateTop(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.verticalStartPoint,\n            this.settings.verticalDirection);\n        connectedFit.bottom = connectedFit.top + connectedFit.contentElementRect.height;\n        connectedFit.fitVertical =\n            connectedFit.viewPortRect.top < connectedFit.top && connectedFit.bottom < connectedFit.viewPortRect.bottom;\n    }\n\n    /**\n     * Calculates the position of the left border of the element if it gets positioned\n     * with provided start point and direction\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateLeft(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: HorizontalAlignment, direction: HorizontalAlignment): number {\n        return targetRect.right + targetRect.width * startPoint + elementRect.width * direction;\n    }\n\n    /**\n     * Calculates the position of the top border of the element if it gets positioned\n     * with provided position settings related to the target\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateTop(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: VerticalAlignment, direction: VerticalAlignment): number {\n        return targetRect.bottom + targetRect.height * startPoint + elementRect.height * direction;\n    }\n\n    /**\n     * Fits the element into viewport according to the position settings\n     * @param element element to fit in viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     */\n    protected abstract fitInViewport(\n        element: HTMLElement,\n        connectedFit: ConnectedFit);\n}\n\nexport interface ConnectedFit {\n    contentElementRect?: ClientRect;\n    targetRect?: ClientRect;\n    viewPortRect?: ClientRect;\n    fitHorizontal?: boolean;\n    fitVertical?: boolean;\n    left?: number;\n    right?: number;\n    top?: number;\n    bottom?: number;\n}\n","import { VerticalAlignment, HorizontalAlignment, PositionSettings } from './../utilities';\nimport { BaseFitPositionStrategy, ConnectedFit } from './base-fit-position-strategy';\n\n/**\n * Positions the element as in **Connected** positioning strategy and re-positions the element in\n * the view port (calculating a different start point) in case the element is partially getting out of view\n */\nexport class AutoPositionStrategy extends BaseFitPositionStrategy {\n\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        const transformString: string[] = [];\n        if (!connectedFit.fitHorizontal) {\n            if (this.canFlipHorizontal(connectedFit)) {\n                this.flipHorizontal();\n            } else {\n                const horizontalPush = this.horizontalPush(connectedFit);\n                transformString.push(`translateX(${horizontalPush}px)`);\n            }\n        }\n\n        if (!connectedFit.fitVertical) {\n            if (this.canFlipVertical(connectedFit)) {\n                this.flipVertical();\n            } else {\n                const verticalPush = this.verticalPush(connectedFit);\n                transformString.push(`translateY(${verticalPush}px)`);\n            }\n        }\n\n        element.style.transform = transformString.join(' ').trim();\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipHorizontal(connectedFit: ConnectedFit): boolean {\n        //  HorizontalAlignment can be Left = -1; Center = -0.5 or Right = 0.\n        //  To virtually flip direction and start point (both are HorizontalAlignment) we can do this:\n        //  flippedAlignment = (-1) * (HorizontalAlignment + 1)\n        //  this way:\n        //  (-1) * (Left + 1) = 0 = Right\n        //  (-1) * (Center + 1) = -0.5 = Center\n        //  (-1) * (Right + 1) = -1 = Left\n        const flippedStartPoint = (-1) * (this.settings.horizontalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.horizontalDirection + 1);\n\n        const leftBorder = this.calculateLeft(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection);\n        const rightBorder = leftBorder + connectedFit.contentElementRect.width;\n        return connectedFit.viewPortRect.left < leftBorder && rightBorder < connectedFit.viewPortRect.right;\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipVertical(connectedFit: ConnectedFit): boolean {\n        const flippedStartPoint = (-1) * (this.settings.verticalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.verticalDirection + 1);\n\n        const topBorder = this.calculateTop(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection);\n        const bottomBorder = topBorder + connectedFit.contentElementRect.height;\n        return connectedFit.viewPortRect.top < topBorder && bottomBorder < connectedFit.viewPortRect.bottom;\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipHorizontal() {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalDirection = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalDirection = HorizontalAlignment.Left;\n                break;\n        }\n        switch (this.settings.horizontalStartPoint) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Left;\n                break;\n        }\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipVertical() {\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                this.settings.verticalDirection = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalDirection = VerticalAlignment.Top;\n                break;\n        }\n        switch (this.settings.verticalStartPoint) {\n            case VerticalAlignment.Top:\n                this.settings.verticalStartPoint = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalStartPoint = VerticalAlignment.Top;\n                break;\n        }\n    }\n\n    /**\n     * Calculates necessary horizontal push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private horizontalPush(connectedFit: ConnectedFit): number {\n        const leftExtend = connectedFit.left;\n        const rightExtend = connectedFit.right - connectedFit.viewPortRect.right;\n        //  if leftExtend < 0 overlay goes beyond left end of the screen. We should push it back with exactly\n        //  as much as it is beyond the screen.\n        //  if rightExtend > 0 overlay goes beyond right end of the screen. We should push it back with the\n        //  extend but with amount not bigger than what left between left border of screen and left border of\n        //  overlay, e.g. leftExtend\n        if (leftExtend < 0) {\n            return Math.abs(leftExtend);\n        } else if (rightExtend > 0) {\n            return - Math.min(rightExtend, leftExtend);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Calculates necessary vertical push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private verticalPush(connectedFit: ConnectedFit): number {\n        const topExtend = connectedFit.top;\n        const bottomExtend = connectedFit.bottom - connectedFit.viewPortRect.bottom;\n        if (topExtend < 0) {\n            return Math.abs(topExtend);\n        } else if (bottomExtend > 0) {\n            return - Math.min(bottomExtend, topExtend);\n        } else {\n            return 0;\n        }\n    }\n}\n","import { BaseFitPositionStrategy, ConnectedFit } from './base-fit-position-strategy';\nimport { HorizontalAlignment, VerticalAlignment, PositionSettings } from '../utilities';\n\n/**\n * Positions the element as in **Connected** positioning strategy and resize the element\n * to fit in the view port in case the element is partially getting out of view\n */\nexport class ElasticPositionStrategy extends BaseFitPositionStrategy {\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        element.classList.add('igx-overlay__content--elastic');\n        const transformString: string[] = [];\n        if (!connectedFit.fitHorizontal) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.width - this.settings.minSize.width);\n            const leftExtend = Math.max(0, connectedFit.viewPortRect.left - connectedFit.left);\n            const rightExtend = Math.max(0, connectedFit.right - connectedFit.viewPortRect.right);\n            const reduction = Math.min(maxReduction, leftExtend + rightExtend);\n            element.style.width = `${connectedFit.contentElementRect.width - reduction}px`;\n\n            //  if direction is center and element goes off the screen in left direction we should push the\n            //  element to the right. Prevents left still going out of view when normally positioned\n            if (this.settings.horizontalDirection === HorizontalAlignment.Center) {\n                //  the amount of translation depends on whether element goes off the screen to the left,\n                //  to the right or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between left and right extend\n                //  taken from the reduction\n                const translation = leftExtend * reduction / (leftExtend + rightExtend);\n                if (translation > 0) {\n                    transformString.push(`translateX(${translation}px)`);\n                }\n            }\n        }\n\n        if (!connectedFit.fitVertical) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.height - this.settings.minSize.height);\n            const topExtend = Math.max(0, connectedFit.viewPortRect.top - connectedFit.top);\n            const bottomExtend = Math.max(0, connectedFit.bottom - connectedFit.viewPortRect.bottom);\n            const reduction = Math.min(maxReduction, topExtend + bottomExtend);\n            element.style.height = `${connectedFit.contentElementRect.height - reduction}px`;\n\n            //  if direction is middle and element goes off the screen in top direction we should push the\n            //  element to the bottom. Prevents top still going out of view when normally positioned\n            if (this.settings.verticalDirection === VerticalAlignment.Middle) {\n                //  the amount of translation depends on whether element goes off the screen to the top,\n                //  to the bottom or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between top and bottom extend\n                //  taken from the reduction\n                const translation = topExtend * reduction / (topExtend + bottomExtend);\n                if (translation > 0) {\n                    transformString.push(`translateY(${translation}px)`);\n                }\n            }\n        }\n        element.style.transform = transformString.join(' ').trim();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\nimport { NgZone } from '@angular/core';\n\n/**\n * On scroll reposition the overlay content.\n */\nexport class AbsoluteScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private _scrollContainer: HTMLElement;\n    private _zone: NgZone;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._zone = overlayService.getOverlayById(id).ngZone;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._zone) {\n            this._zone.runOutsideAngular(() => {\n                this.addScrollEventListener();\n            });\n        } else {\n            this.addScrollEventListener();\n        }\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n        }\n\n        this._initialized = false;\n    }\n\n    private addScrollEventListener() {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.addEventListener('scroll', this.onScroll, true);\n        }\n    }\n\n    private onScroll = () => {\n        this._overlayService.repositionAll();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Prevents scrolling while the overlay content is shown.\n */\nexport class BlockScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _initialScrollTop: number;\n    private _initialScrollLeft: number;\n    private _sourceElement: Element;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        this._document.addEventListener('scroll', this.onScroll, true);\n        this._document.addEventListener('wheel', this.onWheel, true);\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        this._document.removeEventListener('scroll', this.onScroll, true);\n        this._document.removeEventListener('wheel', this.onWheel, true);\n        this._sourceElement = null;\n        this._initialScrollTop = 0;\n        this._initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        ev.preventDefault();\n        if (!this._sourceElement || this._sourceElement !== ev.srcElement) {\n            this._sourceElement = ev.srcElement;\n            this._initialScrollTop = this._sourceElement.scrollTop;\n            this._initialScrollLeft = this._sourceElement.scrollLeft;\n        }\n\n        this._sourceElement.scrollTop = this._initialScrollTop;\n        this._sourceElement.scrollLeft = this._initialScrollLeft;\n    }\n\n    private onWheel(ev: WheelEvent) {\n        ev.stopImmediatePropagation();\n        ev.preventDefault();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Uses a tolerance and closes the shown component upon scrolling if the tolerance is exceeded\n */\nexport class CloseScrollStrategy extends ScrollStrategy {\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private initialScrollTop: number;\n    private initialScrollLeft: number;\n    private cumulativeScrollTop: number;\n    private cumulativeScrollLeft: number;\n    private _threshold: number;\n    private _initialized = false;\n    private _sourceElement: Element;\n    private _scrollContainer: HTMLElement;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n        this._threshold = 10;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll);\n            this._sourceElement = this._scrollContainer;\n        } else {\n            this._document.addEventListener('scroll', this.onScroll);\n            if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n                this._sourceElement = document.documentElement as Element;\n            } else if (document.body.scrollHeight > document.body.clientHeight) {\n                this._sourceElement = document.body as Element;\n            }\n        }\n\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = this._sourceElement.scrollTop;\n        this.initialScrollLeft = this._sourceElement.scrollLeft;\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        // TODO: check why event listener removes only on first call and remains on each next!!!\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll);\n        }\n        this._sourceElement = null;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = 0;\n        this.initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop += this._sourceElement.scrollTop;\n        this.cumulativeScrollLeft += this._sourceElement.scrollLeft;\n\n        if (Math.abs(this.cumulativeScrollTop - this.initialScrollTop) > this._threshold ||\n            Math.abs(this.cumulativeScrollLeft - this.initialScrollLeft) > this._threshold) {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n            this._overlayService.hide(this._id);\n        }\n    }\n}\n","import { TransactionService, Transaction, State } from './transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxBaseTransactionService<T extends Transaction, S extends State> implements TransactionService<T, S> {\n    protected _isPending = false;\n    protected _pendingTransactions: T[] = [];\n    protected _pendingStates: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    public get canRedo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get canUndo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return this._isPending;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        if (this._isPending) {\n            this.updateState(this._pendingStates, transaction, recordRef);\n            this._pendingTransactions.push(transaction);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getTransactionLog(id?: any): T[] { return []; }\n\n    /**\n     * @inheritdoc\n     */\n    undo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    redo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._pendingStates.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.getAggregatedValue(key, mergeChanges) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any): S {\n        return this._pendingStates.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._pendingStates.get(id);\n        if (!state) {\n            return null;\n        }\n        if (mergeChanges) {\n            return this.updateValue(state);\n        }\n        return state.value;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    commit(data: any[]): void { }\n\n    /**\n     * @inheritdoc\n     */\n    clear(): void {\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public startPending(): void {\n        this._isPending = true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        if (state) {\n            if (isObject(state.value)) {\n                mergeObjects(state.value, transaction.newValue);\n            } else {\n                state.value = transaction.newValue;\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n    }\n\n    /**\n     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types\n     * @param state State to update value for\n     * @returns updated value including all the changes in provided state\n     */\n    protected updateValue(state: S) {\n        return this.mergeValues(state.recordRef, state.value);\n    }\n\n    /**\n     * Merges second values in first value and the result in empty object. If values are primitive type\n     * returns second value if exists, or first value.\n     * @param first Value to merge into\n     * @param second Value to merge\n     */\n    protected mergeValues<U>(first: U, second: U): U {\n        let result: U;\n        if (isObject(first) || isObject(second)) {\n            result = mergeObjects(mergeObjects({}, first), second);\n        } else {\n            result = second ? second : first;\n        }\n        return result;\n    }\n}\n","import { Transaction, State, TransactionType } from './transaction';\nimport { IgxBaseTransactionService } from './base-transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxTransactionService<T extends Transaction, S extends State> extends IgxBaseTransactionService<T, S> {\n    protected _transactions: T[] = [];\n    protected _redoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _undoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _states: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    get canUndo(): boolean {\n        return this._undoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get canRedo(): boolean {\n        return this._redoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        const states = this._isPending ? this._pendingStates : this._states;\n        this.verifyAddedTransaction(states, transaction, recordRef);\n        this.addTransaction(transaction, states, recordRef);\n    }\n\n    protected addTransaction(transaction: T, states: Map<any, S>, recordRef?: any) {\n        this.updateState(states, transaction, recordRef);\n\n        const transactions = this._isPending ? this._pendingTransactions : this._transactions;\n        transactions.push(transaction);\n\n        if (!this._isPending) {\n            this._undoStack.push([{ transaction, recordRef }]);\n            this._redoStack = [];\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getTransactionLog(id?: any): T[] {\n        if (id) {\n            return this._transactions.filter(t => t.id === id);\n        }\n        return [...this._transactions];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any): S {\n        return this._states.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._states.get(id);\n        const pendingState = super.getState(id);\n\n        //  if there is no state and there is no pending state return null\n        if (!state && !pendingState) {\n            return null;\n        }\n\n        const pendingChange = super.getAggregatedValue(id, false);\n        const change = state && state.value;\n        let aggregatedValue = this.mergeValues(change, pendingChange);\n        if (mergeChanges) {\n            const originalValue = state ? state.recordRef : pendingState.recordRef;\n            aggregatedValue = this.mergeValues(originalValue, aggregatedValue);\n        }\n        return aggregatedValue;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        if (commit) {\n            const actions: { transaction: T, recordRef: any }[] = [];\n            // don't use addTransaction due to custom undo handling\n            for (const transaction of this._pendingTransactions) {\n                const pendingState = this._pendingStates.get(transaction.id);\n                this._transactions.push(transaction);\n                this.updateState(this._states, transaction, pendingState.recordRef);\n                actions.push({ transaction, recordRef: pendingState.recordRef });\n            }\n\n            this._undoStack.push(actions);\n            this._redoStack = [];\n\n            this.onStateUpdate.emit();\n        }\n        super.endPending(commit);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public commit(data: any[]): void {\n        this._states.forEach((s: S) => {\n            const index = data.findIndex(i => JSON.stringify(i) === JSON.stringify(s.recordRef));\n            switch (s.type) {\n                case TransactionType.ADD:\n                    data.push(s.value);\n                    break;\n                case TransactionType.DELETE:\n                    if (0 <= index && index < data.length) {\n                        data.splice(index, 1);\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (0 <= index && index < data.length) {\n                        data[index] = this.updateValue(s);\n                    }\n                    break;\n            }\n        });\n        this.clear();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public clear(): void {\n        this._transactions = [];\n        this._states.clear();\n        this._redoStack = [];\n        this._undoStack = [];\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public undo(): void {\n        if (this._undoStack.length <= 0) {\n            return;\n        }\n\n        const lastActions: { transaction: T, recordRef: any }[] = this._undoStack.pop();\n        this._transactions.splice(this._transactions.length - lastActions.length);\n        this._redoStack.push(lastActions);\n\n        this._states.clear();\n        for (const currentActions of this._undoStack) {\n            for (const transaction of currentActions) {\n                this.updateState(this._states, transaction.transaction, transaction.recordRef);\n            }\n        }\n\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public redo(): void {\n        if (this._redoStack.length > 0) {\n            let actions: { transaction: T, recordRef: any, useInUndo?: boolean }[];\n            actions = this._redoStack.pop();\n            for (const action of actions) {\n                this.updateState(this._states, action.transaction, action.recordRef);\n                this._transactions.push(action.transaction);\n            }\n\n            this._undoStack.push(actions);\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * Verifies if the passed transaction is correct. If not throws an exception.\n     * @param transaction Transaction to be verified\n     */\n    protected verifyAddedTransaction(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        const state = states.get(transaction.id);\n        switch (transaction.type) {\n            case TransactionType.ADD:\n                if (state) {\n                    //  cannot add same item twice\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already added.`);\n                }\n                break;\n            case TransactionType.DELETE:\n            case TransactionType.UPDATE:\n                if (state && state.type === TransactionType.DELETE) {\n                    //  cannot delete or update deleted items\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already deleted.`);\n                }\n                if (!state && !recordRef && !this._isPending) {\n                    //  cannot initially add transaction or delete item with no recordRef\n                    throw new Error(`Cannot add this transaction. This is first transaction of type ${transaction.type} ` +\n                        `for id ${transaction.id}. For first transaction of this type recordRef is mandatory.`);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        //  if TransactionType is ADD simply add transaction to states;\n        //  if TransactionType is DELETE:\n        //    - if there is state with this id of type ADD remove it from the states;\n        //    - if there is state with this id of type UPDATE change its type to DELETE;\n        //    - if there is no state with this id add transaction to states;\n        //  if TransactionType is UPDATE:\n        //    - if there is state with this id of type ADD merge new value and state recordRef into state new value\n        //    - if there is state with this id of type UPDATE merge new value into state new value\n        //    - if there is state with this id and state type is DELETE change its type to UPDATE\n        //    - if there is no state with this id add transaction to states;\n        if (state) {\n            switch (transaction.type) {\n                case TransactionType.DELETE:\n                    if (state.type === TransactionType.ADD) {\n                        states.delete(transaction.id);\n                    } else if (state.type === TransactionType.UPDATE) {\n                        state.value = transaction.newValue;\n                        state.type = TransactionType.DELETE;\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (isObject(state.value)) {\n                        if (state.type === TransactionType.ADD) {\n                            state.value = this.mergeValues(state.value, transaction.newValue);\n                        }\n                        if (state.type === TransactionType.UPDATE) {\n                            mergeObjects(state.value, transaction.newValue);\n                        }\n                    } else {\n                        state.value = transaction.newValue;\n                    }\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n\n        //  should not clean pending state. This will happen automatically on endPending call\n        if (!this._isPending) {\n            this.cleanState(transaction.id, states);\n        }\n    }\n\n    /**\n     * Compares the state with recordRef and clears all duplicated values. If any state ends as\n     * empty object removes it from states.\n     * @param state State to clean\n     */\n    protected cleanState(id: any, states: Map<any, S>): void {\n        const state = states.get(id);\n        //  do nothing if\n        //  there is no state, or\n        //  there is no state value (e.g. DELETED transaction), or\n        //  there is no recordRef (e.g. ADDED transaction)\n        if (state && state.value && state.recordRef) {\n            //  if state's value is object compare each key with the ones in recordRef\n            //  if values in any key are the same delete it from state's value\n            //  if state's value is not object, simply compare with recordRef and remove\n            //  the state if they are equal\n            if (isObject(state.recordRef)) {\n                for (const key of Object.keys(state.value)) {\n                    if (JSON.stringify(state.recordRef[key]) === JSON.stringify(state.value[key])) {\n                        delete state.value[key];\n                    }\n                }\n\n                //  if state's value is empty remove the state from the states, only if state is not DELETE type\n                if (state.type !== TransactionType.DELETE && Object.keys(state.value).length === 0) {\n                    states.delete(id);\n                }\n            } else {\n                if (state.recordRef === state.value) {\n                    states.delete(id);\n                }\n            }\n        }\n    }\n}\n","import { HierarchicalTransaction, HierarchicalState, TransactionType } from './transaction';\nimport { Injectable } from '@angular/core';\nimport { IgxTransactionService } from './igx-transaction';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneValue } from '../../core/utils';\n\n/** @experimental @hidden */\n@Injectable()\nexport class IgxHierarchicalTransactionService<T extends HierarchicalTransaction, S extends HierarchicalState>\n    extends IgxTransactionService<T, S> {\n\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : cloneValue(state.value);\n            this.clearArraysFromObject(value);\n            result.push({ id: key, path: state.path, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        super.updateState(states, transaction, recordRef);\n\n        //  if transaction has no path, e.g. flat data source, get out\n        if (!transaction.path) {\n            return;\n        }\n\n        const currentState = states.get(transaction.id);\n        if (currentState) {\n            currentState.path = transaction.path;\n        }\n\n        //  if transaction has path, Hierarchical data source, and it is DELETE\n        //  type transaction for all child rows remove ADD states and update\n        //  transaction type and value of UPDATE states\n        if (transaction.type === TransactionType.DELETE) {\n            states.forEach((v: S, k: any) => {\n                if (v.path && v.path.indexOf(transaction.id) !== -1) {\n                    switch (v.type) {\n                        case TransactionType.ADD:\n                            states.delete(k);\n                            break;\n                        case TransactionType.UPDATE:\n                            states.get(k).type = TransactionType.DELETE;\n                            states.get(k).value = null;\n                    }\n                }\n            });\n        }\n    }\n\n    public commit(data: any[], primaryKey?: any, childDataKey?: any): void {\n        if (childDataKey) {\n            DataUtil.mergeHierarchicalTransactions(data, this.getAggregatedChanges(true), childDataKey, primaryKey, true);\n        } else {\n            super.commit(data);\n        }\n        this.clear();\n    }\n\n    //  TODO: remove this method. Force cloning to strip child arrays when needed instead\n    private clearArraysFromObject(obj: {}) {\n        if (obj) {\n            for (const prop of Object.keys(obj)) {\n                if (Array.isArray(obj[prop])) {\n                    delete obj[prop];\n                }\n            }\n        }\n    }\n}\n\n","import {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Inject\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../../core/navigation';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { OverlaySettings, OverlayEventArgs, ConnectedPositioningStrategy, AbsoluteScrollStrategy, IPositionStrategy } from '../../services';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subscription, Subject, MonoTypeOperatorFunction } from 'rxjs';\nimport { OverlayClosingEventArgs } from '../../services/overlay/utilities';\nimport { CancelableEventArgs, CancelableBrowserEventArgs } from '../../core/utils';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\n@Directive({\n    exportAs: 'toggle',\n    selector: '[igxToggle]'\n})\nexport class IgxToggleDirective implements IToggleView, OnInit, OnDestroy {\n    protected _overlayId: string;\n    private destroy$ = new Subject<boolean>();\n    private _overlaySubFilter: [MonoTypeOperatorFunction<OverlayEventArgs>, MonoTypeOperatorFunction<OverlayEventArgs>] = [\n        filter(x => x.id === this._overlayId),\n        takeUntil(this.destroy$)\n    ];\n    private _overlayOpenedSub: Subscription;\n    private _overlayClosingSub: Subscription;\n    private _overlayClosedSub: Subscription;\n\n    /**\n     * Emits an event after the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpened(event) {\n     *    alert(\"Toggle opened!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpened)='onToggleOpened($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpening(event) {\n     *  alert(\"Toggle opening!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpening)='onToggleOpening($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emits an event after the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosed(event) {\n     *  alert(\"Toggle closed!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onClosed)='onToggleClosed($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosing(event) {\n     *  alert(\"Toggle closing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *  igxToggle\n     *  (onClosing)='onToggleClosing($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    private _collapsed = true;\n    /**\n     * @hidden\n     */\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n\n    /**\n     * Identifier which is registered into `IgxNavigationService`\n     *\n     * ```typescript\n     * let myToggleId = this.toggle.id;\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle--hidden')\n    @HostBinding('attr.aria-hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(\n        private elementRef: ElementRef,\n        private cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        @Optional() private navigationService: IgxNavigationService) {\n    }\n\n    /**\n     * Opens the toggle.\n     *\n     * ```typescript\n     * this.myToggle.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        //  if there is open animation do nothing\n        //  if toggle is not collapsed and there is no close animation do nothing\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (hasOpenAnimation || !(this._collapsed || hasCloseAnimation)) {\n            return;\n        }\n\n        if (!info) {\n            this._overlayId = this.overlayService.attach(this.elementRef, overlaySettings);\n        }\n\n        this._collapsed = false;\n        this.cdr.detectChanges();\n\n        const openEventArgs: CancelableEventArgs = { cancel: false };\n        this.onOpening.emit(openEventArgs);\n        if (openEventArgs.cancel) {\n            this._collapsed = true;\n            this.cdr.detectChanges();\n            return;\n        }\n\n        this.overlayService.show(this._overlayId, overlaySettings);\n\n        this.unsubscribe();\n        this._overlayOpenedSub = this.overlayService.onOpened.pipe(...this._overlaySubFilter).subscribe(() => {\n            this.onOpened.emit();\n        });\n\n        this._overlayClosingSub = this.overlayService\n            .onClosing\n            .pipe(...this._overlaySubFilter)\n            .subscribe((e: OverlayClosingEventArgs) => {\n                const eventArgs: CancelableBrowserEventArgs = { cancel: false, event: e.event };\n                this.onClosing.emit(eventArgs);\n                e.cancel = eventArgs.cancel;\n\n                //  in case event is not canceled this will close the toggle and we need to unsubscribe.\n                //  Otherwise if for some reason, e.g. close on outside click, close() gets called before\n                //  onClosed was fired we will end with calling onClosing more than once\n                if (!e.cancel) {\n                    this.clearSubscription(this._overlayClosingSub);\n                }\n            });\n\n        this._overlayClosedSub = this.overlayService.onClosed\n            .pipe(...this._overlaySubFilter)\n            .subscribe(this.overlayClosed);\n    }\n\n    /**\n     * Closes the toggle.\n     *\n     * ```typescript\n     * this.myToggle.close();\n     * ```\n     */\n    public close() {\n        //  if toggle is collapsed do nothing\n        //  if there is close animation do nothing, toggle will close anyway\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (this._collapsed || hasCloseAnimation) {\n            return;\n        }\n\n        this.overlayService.hide(this._overlayId);\n    }\n\n    /**\n     * Opens or closes the toggle, depending on its current state.\n     *\n     * ```typescript\n     * this.myToggle.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        //  if toggle is collapsed call open\n        //  if there is close animation call open\n        if (this.collapsed || this.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /** @hidden @internal */\n    public get isClosing() {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        return info ? info.closeAnimationPlayer : false;\n    }\n\n    /**\n     * Repositions the toggle.\n     * ```typescript\n     * this.myToggle.reposition();\n     * ```\n     */\n    public reposition() {\n        this.overlayService.reposition(this._overlayId);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navigationService && this.id) {\n            this.navigationService.add(this.id, this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navigationService && this.id) {\n            this.navigationService.remove(this.id);\n        }\n        if (!this.collapsed && this._overlayId) {\n            this.overlayService.hide(this._overlayId);\n        }\n        this.unsubscribe();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    private overlayClosed = () => {\n        this._collapsed = true;\n        this.cdr.detectChanges();\n        delete this._overlayId;\n        this.unsubscribe();\n        this.onClosed.emit();\n    }\n\n    private unsubscribe() {\n        this.clearSubscription(this._overlayOpenedSub);\n        this.clearSubscription(this._overlayClosingSub);\n        this.clearSubscription(this._overlayClosedSub);\n    }\n\n    private clearSubscription(subscription: Subscription) {\n        if (subscription && !subscription.closed) {\n            subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    exportAs: 'toggle-action',\n    selector: '[igxToggleAction]'\n})\nexport class IgxToggleActionDirective implements OnInit {\n    protected _overlayDefaults: OverlaySettings;\n\n    /**\n     * Provide settings that control the toggle overlay positioning, interaction and scroll behavior.\n     * ```typescript\n     * const settings: OverlaySettings = {\n     *      closeOnOutsideClick: false,\n     *      modal: false\n     *  }\n     * ```\n     * ---\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [overlaySettings]=\"settings\"></div>\n     * ```\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    private _closeOnOutsideClick: boolean;\n    /**\n     * DEPRECATED. Determines whether the toggle should close when you click outside.\n     *\n     * ```typescript\n     * // get\n     * let closesOnOutsideClick = this.toggle.closeOnOutsideClick;\n     * ```\n     */\n    @Input()\n    @DeprecateProperty(`igxToggleAction 'closeOnOutsideClick' input is deprecated. Use 'overlaySettings' input object instead.`)\n    public get closeOnOutsideClick(): boolean {\n        return this._closeOnOutsideClick;\n    }\n    /**\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [closeOnOutsideClick]=\"'true'\"></div>\n     * ```\n     */\n    public set closeOnOutsideClick(v: boolean) {\n        this._closeOnOutsideClick = v;\n    }\n\n    /**\n     * Determines where the toggle element overlay should be attached.\n     *\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [igxToggleOutlet]=\"outlet\"></div>\n     * ```\n     * Where `outlet` in an instance of `IgxOverlayOutletDirective` or an `ElementRef`\n     */\n    @Input('igxToggleOutlet')\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input('igxToggleAction')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this.navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    protected _target: IToggleView | string;\n\n    constructor(private element: ElementRef, @Optional() private navigationService: IgxNavigationService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._overlayDefaults = {\n            positionStrategy: new ConnectedPositioningStrategy({ target: this.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            closeOnOutsideClick: true,\n            modal: false,\n            excludePositionTarget: true\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (this._closeOnOutsideClick !== undefined) {\n            this._overlayDefaults.closeOnOutsideClick = this._closeOnOutsideClick;\n        }\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n\n        const clonedSettings = Object.assign({}, this._overlayDefaults, this.overlaySettings);\n        this.updateOverlaySettings(clonedSettings);\n        this.target.toggle(clonedSettings);\n    }\n\n    /**\n     * Updates provided overlay settings\n     * @param settings settings to update\n     * @returns returns updated copy of provided overlay settings\n     */\n    protected updateOverlaySettings(settings: OverlaySettings): OverlaySettings {\n        if (settings && settings.positionStrategy) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.element.nativeElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n\n        return settings;\n    }\n}\n\n/**\n * Mark an element as an igxOverlay outlet container.\n * Directive instance is exported as `overlay-outlet` to be assigned to templates variables:\n * ```html\n * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n * ```\n */\n@Directive({\n    exportAs: 'overlay-outlet',\n    selector: '[igxOverlayOutlet]'\n})\nexport class IgxOverlayOutletDirective {\n    constructor(public element: ElementRef) { }\n\n    /** @hidden */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    exports: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxToggleModule { }\n","import { CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { IToggleView } from '../core/navigation/IToggleView';\nimport { EventEmitter } from '@angular/core';\n\n/** @hidden */\nexport enum Navigate {\n    Up = -1,\n    Down = 1\n}\n\n/** Key actions that have designated handlers in IgxDropDownComponent */\nexport enum DropDownActionKey {\n    ESCAPE = 'escape',\n    ENTER = 'enter',\n    SPACE = 'space'\n}\n\n/**\n * Interface that encapsulates onSelection event arguments - old selection, new selection and cancel selection.\n * @export\n */\nexport interface ISelectionEventArgs extends CancelableEventArgs {\n    oldSelection: IgxDropDownItemBase;\n    newSelection: IgxDropDownItemBase;\n}\n\n/**\n * Interface for an instance of IgxDropDownNavigationDirective\n * @export\n */\nexport interface IDropDownNavigationDirective {\n    target: any;\n    handleKeyDown(event: KeyboardEvent): void;\n    onArrowDownKeyDown(event?: KeyboardEvent): void;\n    onArrowUpKeyDown(event?: KeyboardEvent): void;\n    onEndKeyDown(event?: KeyboardEvent): void;\n    onHomeKeyDown(event?: KeyboardEvent): void;\n}\n\nexport const IGX_DROPDOWN_BASE = 'IgxDropDownBaseToken';\n\n/**\n * @hidden\n */\nexport interface IDropDownList {\n    onSelection: EventEmitter<ISelectionEventArgs>;\n    width: string;\n    height: string;\n    id: string;\n    maxHeight: string;\n    collapsed: boolean;\n    items: IgxDropDownItemBase[];\n    headers: IgxDropDownItemBase[];\n    focusedItem: IgxDropDownItemBase;\n    navigateFirst(): void;\n    navigateLast(): void;\n    navigateNext(): void;\n    navigatePrev(): void;\n    navigateItem(newIndex: number, direction?: Navigate): void;\n    onItemActionKey(key: DropDownActionKey, event?: Event): void;\n}\n\n/**\n * @hidden\n */\nexport interface IDropDownBase extends IDropDownList, IToggleView {\n    selectedItem: any;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onOpened: EventEmitter<void>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    allowItemsFocus?: boolean;\n    setSelectedItem(index: number): void;\n    selectItem(item: IgxDropDownItemBase, event?: Event): void;\n}\n\n","import { Injectable } from '@angular/core';\n\n/** @hidden */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxSelectionAPIService {\n    /**\n     * If primaryKey is defined, then multiple selection is based on the primaryKey, and it is array of numbers, strings, etc.\n     * If the primaryKey is omitted, then selection is based on the item data\n     */\n    protected selection: Map<string,  Set<any>> = new Map<string, Set<any>>();\n\n    /**\n     * Get current component selection.\n     * @param componentID ID of the component.\n     */\n    public get(componentID: string): Set<any> {\n        return this.selection.get(componentID);\n    }\n\n    /**\n     * Set new component selection.\n     * @param componentID ID of the component.\n     * @param newSelection The new component selection to be set.\n     */\n    public set(componentID: string, newSelection: Set<any>) {\n        if (!componentID) {\n            throw Error('Invalid value for component id!');\n        }\n        this.selection.set(componentID, newSelection);\n    }\n\n    /**\n     * Clears selection for component.\n     * @param componentID ID of the component.\n     */\n    public clear(componentID: string) {\n        this.selection.set(componentID, this.get_empty());\n    }\n\n    /**\n     * Get current component selection length.\n     * @param componentID ID of the component.\n     */\n    public size(componentID: string): number {\n        const sel = this.get(componentID);\n        return sel ? sel.size : 0;\n    }\n\n    /**\n     * Creates new selection that consist of the new item added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_item() one.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (add_items method) to accumulate selection for multiple items.\n     *\n     * @returns Selection after the new item is added.\n     */\n    public add_item(componentID: string, itemID, sel?: Set<any>): Set<any> {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            sel = this.get_empty();\n        }\n        if (!itemID && itemID !== 0) {\n            throw Error('Invalid value for item id!');\n        }\n        sel.add(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_items() one.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     *\n     * @returns Selection after the new items are added.\n     */\n    public add_items(componentID: string, itemIDs: any[], clearSelection?: boolean): Set<any> {\n        let selection: Set<any>;\n        if (clearSelection) {\n            selection = this.get_empty();\n        } else if (itemIDs && itemIDs.length === 0) {\n            selection = new Set(this.get(componentID));\n        }\n        itemIDs.forEach((item) => selection = this.add_item(componentID, item, selection));\n        return selection;\n    }\n\n    /**\n     * Add item to the current component selection.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (select_items method) to accumulate selection for multiple items.\n     */\n    public select_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.add_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Add items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     */\n    public select_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.add_items(componentID, itemID, clearSelection));\n    }\n\n    /**\n     * Creates new selection that consist of the new items excluded from the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_item() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (delete_items method) to accumulate deselected items.\n     *\n     * @returns Selection after the item is removed.\n     */\n    public delete_item(componentID: string, itemID, sel?: Set<any>) {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            return;\n        }\n        sel.delete(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items removed to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_items() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the items to remove from component selection.\n     *\n     * @returns Selection after the items are removed.\n     */\n    public delete_items(componentID: string, itemIDs: any[]): Set<any> {\n        let selection: Set<any>;\n        itemIDs.forEach((deselectedItem) => selection = this.delete_item(componentID, deselectedItem, selection));\n        return selection;\n    }\n\n    /**\n     * Remove item from the current component selection.\n     * @param componentID ID of the component, which we remove item from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (deselect_items method) to accumulate selection for multiple items.\n     */\n    public deselect_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.delete_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Remove items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     */\n    public deselect_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.delete_items(componentID, itemID));\n    }\n\n    /**\n     * Check if the item is selected in the component selection.\n     * @param componentID ID of the component.\n     * @param itemID ID of the item to search.\n     *\n     * @returns If item is selected.\n     */\n    public is_item_selected(componentID: string, itemID): boolean {\n        const sel = this.get(componentID);\n        if (!sel) {\n            return false;\n        }\n        return sel.has(itemID);\n    }\n\n    /**\n     * Get first element in the selection.\n     * This is correct when we have only one item in the collection (for single selection purposes)\n     * and the method returns that item.\n     * @param componentID ID of the component.\n     *\n     * @returns First element in the set.\n     */\n    public first_item(componentID: string) {\n        const sel = this.get(componentID);\n        if (sel && sel.size > 0) {\n            return sel.values().next().value;\n       }\n    }\n\n    /**\n     * Returns whether all items are selected.\n     * @param componentID ID of the component.\n     * @param dataCount: number Number of items in the data.\n     *\n     * @returns If all items are selected.\n     */\n    public are_all_selected(componentID: string, dataCount: number): boolean {\n        return dataCount > 0 && dataCount === this.size(componentID);\n    }\n\n    /**\n     * Returns whether any of the items is selected.\n     * @param componentID ID of the component.\n     * @param data Entire data array.\n     *\n     * @returns If there is any item selected.\n     */\n    public are_none_selected(componentID: string): boolean {\n        return this.size(componentID) === 0;\n    }\n\n    /**\n     * Get all primary key values from a data array. If there isn't a primary key defined that the entire data is returned instead.\n     * @param data Entire data array.\n     * @param primaryKey Data primary key.\n     *\n     * @returns Array of identifiers, either primary key values or the entire data array.\n     */\n    public get_all_ids(data, primaryKey?) {\n        return primaryKey ? data.map((x) => x[primaryKey]) : data;\n    }\n\n    /**\n     * Returns empty selection collection.\n     * @returns empty set.\n    */\n    public get_empty() {\n        return new Set();\n    }\n}\n","import { Component, Input, HostBinding } from '@angular/core';\n\nlet NEXT_ID = 0;\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-drop-down-item\"></ng-content>\n    `\n})\nexport class IgxDropDownGroupComponent {\n    private _id = NEXT_ID++;\n\n    /**\n     * @hidden @internal\n     */\n    public get labelId(): string {\n        return `igx-item-group-label-${this._id}`;\n    }\n\n    @HostBinding(`attr.aria-labelledby`)\n    public get labelledBy(): string {\n        return this.labelId;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'group';\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-drop-down__group')\n    public groupClass = true;\n    /**\n     * Sets/gets if the item group is disabled\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const groupState: boolean = myDropDownGroup.disabled;\n     * ...\n     * //set\n     * ...\n     * myDropDownGroup,disabled = false;\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My Items'\" [disabled]=\"true\">\n     *     <igx-drop-down-item *ngFor=\"let item of items[index]\" [value]=\"item.value\">\n     *         {{ item.text }}\n     *     </igx-drop-down-item>\n     * </igx-drop-down-item-group>\n     * ```\n     *\n     * **NOTE:** All items inside of a disabled drop down group will be treated as disabled\n     */\n    @Input()\n    @HostBinding(`attr.aria-disabled`)\n    @HostBinding('class.igx-drop-down__group--disabled')\n    public disabled = false;\n\n    /**\n     * Sets/gets the label of the item group\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const myLabel: string = myDropDownGroup.label;\n     * ...\n     * // set\n     * ...\n     * myDropDownGroup.label = 'My New Label';\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My new Label'\">\n     *      ...\n     * </igx-drop-down-item-group>\n     * ```\n    */\n    @Input()\n    public label: string;\n}\n","import { IDropDownBase, IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { Input, HostBinding, HostListener, ElementRef, Optional, Inject, DoCheck } from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DeprecateProperty, showMessage } from '../core/deprecateDecorators';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nlet NEXT_ID = 0;\nlet warningShown = false;\n\n/**\n * An abstract class defining a drop-down item:\n * With properties / styles for selection, highlight, height\n * Bindable property for passing data (`value: any`)\n * Parent component (has to be used under a parent with type `IDropDownBase`)\n * Method for handling click on Host()\n */\nexport abstract class IgxDropDownItemBase implements DoCheck {\n    /**\n     * @hidden\n     */\n    protected _focused = false;\n    protected _selected = false;\n    protected _index = null;\n    protected _disabled = false;\n    protected get hasIndex(): boolean {\n        return this._index !== null && this._index !== undefined;\n    }\n\n    /**\n     * Sets/gets the `id` of the item.\n     * ```html\n     * <igx-drop-down-item [id] = 'igx-drop-down-item-0'></igx-drop-down-item>\n     * ```\n     * ```typescript\n     * let itemId =  this.item.id;\n     * ```\n     * @memberof IgxSelectItemComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-drop-down-item-${NEXT_ID++}`;\n\n    /**\n     * @hidden @internal\n     */\n    public get itemID() {\n        return this;\n    }\n\n    /**\n     * The data index of the dropdown item.\n     *\n     * ```typescript\n     * // get the data index of the selected dropdown item\n     * let selectedItemIndex = this.dropdown.selectedItem.index\n     * ```\n     */\n    @Input()\n    public get index(): number {\n        if (this._index === null) {\n            warningShown = showMessage(\n                'IgxDropDownItemBase: Automatic index is deprecated.' +\n                'Bind in the template instead using `<igx-drop-down-item [index]=\"i\"` instead.`',\n                warningShown);\n            return this.itemIndex;\n        }\n        return this._index;\n    }\n\n    public set index(value) {\n        this._index = value;\n    }\n\n    /**\n     * Gets/sets the value of the item if the item is databound\n     *\n     * ```typescript\n     * // usage in IgxDropDownItemComponent\n     * // get\n     * let mySelectedItemValue = this.dropdown.selectedItem.value;\n     *\n     * // set\n     * let mySelectedItem = this.dropdown.selectedItem;\n     * mySelectedItem.value = { id: 123, name: 'Example Name' }\n     *\n     * // usage in IgxComboItemComponent\n     * // get\n     * let myComboItemValue = this.combo.items[0].value;\n     * ```\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item')\n    get itemStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the dropdown\n     *\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-drop-down__item--selected')\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @Input()\n    @DeprecateProperty(`IgxDropDownItemBase \\`isSelected\\` property is deprecated.\\n` +\n        `Use \\`selected\\` instead.`)\n    get isSelected(): boolean {\n        return this.selected;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    set isSelected(value: boolean) {\n        this.selected = value;\n    }\n\n    /**\n     * Sets/gets if the given item is focused\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemFocused = mySelectedItem.focused;\n     * ```\n     */\n    @HostBinding('class.igx-drop-down__item--focused')\n    get focused(): boolean {\n        return (!this.isHeader && !this.disabled) && this._focused;\n    }\n\n    /**\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" focused={{!item.focused}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`IgxDropDownItemBase \\`isFocused\\` property is depracated.\\n` +\n        `Use \\`focused\\` instead.`)\n    get isFocused(): boolean {\n        return this.focused;\n    }\n    /**\n     * @hidden @internal\n     */\n    set isFocused(value: boolean) {\n        this.focused = value;\n    }\n\n    /**\n     * Sets/gets if the given item is header\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemHeader = mySelectedItem.isHeader;\n     * ```\n     *\n     * ```html\n     *  <!--set-->\n     *  <igx-dropdown-item *ngFor=\"let item of items\">\n     *      <div *ngIf=\"items.indexOf(item) === 5; then item.isHeader = true\">\n     *          {{item.field}}\n*           </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-drop-down__header')\n    public isHeader: boolean;\n\n    /**\n     * Sets/gets if the given item is disabled\n     *\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let myItemIsDisabled = mySelectedItem.disabled;\n     * ```\n     *\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" disabled={{!item.disabled}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     * **NOTE:** Drop-down items inside of a disabled `IgxDropDownGroup` will always count as disabled\n     */\n    @Input()\n    @HostBinding('attr.aria-disabled')\n    @HostBinding('class.igx-drop-down__item--disabled')\n    public get disabled(): boolean {\n        return this.group ? this.group.disabled || this._disabled : this._disabled;\n    }\n\n    public set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the item. Default is 'option'.\n     *\n     * ```html\n     *  <igx-drop-down-item [role]=\"customRole\"></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'option';\n\n    /**\n     * Gets item index\n     * @hidden @internal\n     */\n    public get itemIndex(): number {\n        return this.dropDown.items.indexOf(this);\n    }\n\n    /**\n     * Gets item element height\n     * @hidden @internal\n     */\n    public get elementHeight(): number {\n        return this.elementRef.nativeElement.clientHeight;\n    }\n\n    /**\n     * Get item html element\n     * @hidden @internal\n     */\n    public get element(): ElementRef {\n        return this.elementRef;\n    }\n\n    constructor(\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Optional() protected group: IgxDropDownGroupComponent,\n        @Optional() @Inject(IgxSelectionAPIService) protected selection?: IgxSelectionAPIService\n    ) { }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n    }\n\n    ngDoCheck(): void {\n        if (this._selected) {\n            const dropDownSelectedItem = this.dropDown.selectedItem;\n            if (!dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            } else if (this.hasIndex\n                ? this._index !== dropDownSelectedItem.index || this.value !== dropDownSelectedItem.value :\n                this !== dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            }\n        }\n    }\n}\n","import {\n    Component,\n    DoCheck,\n    HostListener,\n    HostBinding\n} from '@angular/core';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\n\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item',\n    templateUrl: 'drop-down-item.component.html'\n})\nexport class IgxDropDownItemComponent extends IgxDropDownItemBase implements DoCheck {\n    /**\n     * @inheritdoc\n     */\n    get focused(): boolean {\n        let focusedState = this._focused;\n        if (this.hasIndex) {\n            const focusedItem = this.selection.first_item(`${this.dropDown.id}-active`);\n            const focusedIndex = focusedItem ? focusedItem.index : -1;\n            focusedState = this._index === focusedIndex;\n        }\n        return !this.isHeader && !this.disabled && focusedState;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n    /**\n     * @inheritdoc\n     */\n    get selected(): boolean {\n        if (this.hasIndex) {\n            const item = this.selection.first_item(`${this.dropDown.id}`);\n            return item ? item.index === this._index && item.value === this.value : false;\n        }\n        return this._selected;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    get setTabIndex() {\n        const shouldSetTabIndex = this.dropDown.allowItemsFocus && !(this.disabled || this.isHeader);\n        if (shouldSetTabIndex) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        if (this.selection) {\n            this.dropDown.selectItem(this, event);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('mousedown', ['$event'])\n    mousedownHandler(event) {\n        event.preventDefault();\n    }\n}\n","import {\n    Input, HostBinding, ElementRef, QueryList, Output, EventEmitter, ChangeDetectorRef\n} from '@angular/core';\n\nimport { Navigate, ISelectionEventArgs } from './drop-down.common';\nimport { IDropDownList } from './drop-down.common';\nimport { DropDownActionKey } from './drop-down.common';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\n\nlet NEXT_ID = 0;\n\n/**\n * An abstract class, defining a drop-down component, with:\n * Properties for display styles and classes\n * A collection items of type `IgxDropDownItemBase`\n * Properties and methods for navigating (highlighting/focusing) items from the collection\n * Properties and methods for selecting items from the collection\n */\nexport abstract class IgxDropDownBase implements IDropDownList {\n    protected _width;\n    protected _height;\n    protected _focusedItem: any = null;\n    protected _id = `igx-drop-down-${NEXT_ID++}`;\n\n    /**\n     * Get dropdown's html element of it scroll container\n     */\n    protected get scrollContainer() {\n        return this.element;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public children: QueryList<IgxDropDownItemBase>;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<ISelectionEventArgs>();\n\n    /**\n     *  Gets/Sets the width of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentWidth = this.dropdown.width;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [width]='160px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public width: string;\n\n    /**\n     * Gets/Sets the height of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentHeight = this.dropdown.height;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [height]='400px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public height: string;\n\n    /**\n     * Gets/Sets the drop down's id\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentId = this.dropdown.id;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [id]='newDropDownId'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * Gets/Sets the drop down's container max height.\n     *\n     * ```typescript\n     * // get\n     * let maxHeight = this.dropdown.maxHeight;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [maxHeight]='200px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    @HostBinding('style.maxHeight')\n    public maxHeight = null;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down')\n    public cssClass = true;\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxDropDownItemBase[] {\n        const items: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * Get all header items\n     *\n     * ```typescript\n     * let myDropDownHeaderItems = this.dropdown.headers;\n     * ```\n     */\n    public get headers(): IgxDropDownItemBase[] {\n        const headers: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n\n        return headers;\n    }\n\n    /**\n     * Get dropdown html element\n     *\n     * ```typescript\n     * let myDropDownElement = this.dropdown.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     */\n    public abstract collapsed: boolean;\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef) { }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n            case DropDownActionKey.SPACE:\n                this.selectItem(this.focusedItem, event);\n                break;\n            case DropDownActionKey.ESCAPE:\n        }\n    }\n\n    /**\n     * Emits onSelection with the target item & event\n     * @hidden @internal\n     * @param newSelection the item selected\n     * @param event the event that triggered the call\n     */\n    public selectItem(newSelection?: IgxDropDownItemBase, event?: Event) {\n        this.onSelection.emit({\n            newSelection,\n            oldSelection: null,\n            cancel: false\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBase {\n        return this._focusedItem;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set focusedItem(item: IgxDropDownItemBase) {\n        this._focusedItem = item;\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        let index = -1;\n        if (this._focusedItem) {\n            index = currentIndex ? currentIndex : this.focusedItem.itemIndex;\n        }\n        const newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);\n        this.navigateItem(newIndex);\n    }\n\n    protected getNearestSiblingFocusableItemIndex(startIndex: number, direction: Navigate): number {\n        let index = startIndex;\n        const items = this.items;\n        while (items[index + direction] && items[index + direction].disabled) {\n            index += direction;\n        }\n\n        index += direction;\n        if (index >= 0 && index < items.length) {\n            return index;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * @param newIndex number - the index of the item in the `items` collection\n     */\n    public navigateItem(newIndex: number) {\n        if (newIndex !== -1) {\n            const oldItem = this._focusedItem;\n            const newItem = this.items[newIndex];\n            if (oldItem) {\n                oldItem.focused = false;\n            }\n            this.focusedItem = newItem;\n            this.scrollToHiddenItem(newItem);\n            this.focusedItem.focused = true;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        this.navigate(Navigate.Down, -1);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        this.navigate(Navigate.Up, this.items.length);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        this.navigate(Navigate.Down);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        this.navigate(Navigate.Up);\n    }\n\n    protected scrollToHiddenItem(newItem: IgxDropDownItemBase) {\n        const elementRect = newItem.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        if (parentRect.top > elementRect.top) {\n            this.scrollContainer.scrollTop -= (parentRect.top - elementRect.top);\n        }\n\n        if (parentRect.bottom < elementRect.bottom) {\n            this.scrollContainer.scrollTop += (elementRect.bottom - parentRect.bottom);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\n@Component({\n    selector: 'igx-display-container',\n    template: `\n        <ng-template\n            #display_container\n            igxScrollInertia\n            [IgxScrollInertiaScrollContainer]=\"scrollContainer\"\n            [IgxScrollInertiaDirection]=\"scrollDirection\">\n        </ng-template>\n    `\n})\nexport class DisplayContainerComponent {\n    @ViewChild('display_container', { read: ViewContainerRef })\n    public _vcr;\n\n    public scrollDirection: string;\n\n    @HostBinding('class')\n    public cssClass = 'igx-display-container';\n\n    @HostBinding('class.igx-display-container--inactive')\n    public notVirtual = true;\n\n    public scrollContainer;\n\n    constructor(public cdr: ChangeDetectorRef, public _viewContainer: ViewContainerRef) { }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-horizontal-virtual-helper',\n    template: '<div #horizontal_container class=\"igx-vhelper__placeholder-content\" [style.width.px]=\"width\"></div>'\n})\nexport class HVirtualHelperComponent {\n    @ViewChild('horizontal_container', { read: ViewContainerRef }) public _vcr;\n    @Input() public width: number;\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--horizontal';\n\n    constructor(public elementRef: ElementRef) { }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, OnDestroy } from '@angular/core';\n\n@Component({\n    selector: 'igx-virtual-helper',\n    template: '<div #container class=\"igx-vhelper__placeholder-content\" [style.height.px]=\"height\"></div>'\n})\nexport class VirtualHelperComponent implements OnDestroy {\n    @HostBinding('scrollTop')\n    public scrollTop;\n\n    @ViewChild('container', { read: ViewContainerRef }) public _vcr;\n    @Input() public itemsLength: number;\n\n    public set height(value) {\n        if (this.destroyed) {\n            return;\n        }\n        this._height = value;\n        this.cdr.detectChanges();\n    }\n\n    public get height() {\n        return this._height;\n    }\n\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--vertical';\n\n    public destroyed;\n    private _height: number;\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    public ngOnDestroy() {\n        this.destroyed = true;\n    }\n\n}\n","import { Directive, Input, ElementRef, NgZone, OnInit, NgModule, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxScrollInertia]' })\nexport class IgxScrollInertiaDirective implements OnInit, OnDestroy {\n\n    constructor(private element: ElementRef, private _zone: NgZone) {\n\n    }\n\n    @Input()\n    public IgxScrollInertiaDirection: string;\n\n    @Input()\n    public IgxScrollInertiaScrollContainer: any;\n\n    @Input()\n    public wheelStep = 50;\n\n    @Input()\n    public inertiaStep = 1.5;\n\n    @Input()\n    public swipeToleranceX = 20;\n\n    @Input()\n    public inertiaDeltaY = 3;\n\n    @Input()\n    public inertiaDeltaX = 2;\n\n    @Input()\n    public inertiaDuration = 0.5;\n\n    private _touchInertiaAnimID;\n    private _startX;\n    private _startY;\n    private _touchStartX;\n    private _touchStartY;\n    private _lastTouchEnd;\n    private _lastTouchX;\n    private _lastTouchY;\n    private _savedSpeedsX = [];\n    private _savedSpeedsY;\n    private _totalMovedX;\n    private _offsetRecorded;\n    private _offsetDirection;\n    private _touchPrevented;\n    private _lastMovedX;\n    private _lastMovedY;\n    private _gestureObject;\n    private setPointerCaptureFName = typeof Element.prototype['msSetPointerCapture'] === 'function' ?\n    'msSetPointerCapture' :\n    'setPointerCapture';\n    private releasePointerCaptureFName = typeof Element.prototype['msReleasePointerCapture'] === 'function' ?\n    'msReleasePointerCapture' :\n    'releasePointerCapture';\n    private _pointer;\n    private _nextX;\n    private _nextY;\n\n    ngOnInit(): void {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.addEventListener('wheel',\n                    (evt) => { this.onWheel(evt); });\n            targetElem.addEventListener('touchstart',\n                    (evt) => { this.onTouchStart(evt); });\n            targetElem.addEventListener('touchmove',\n                    (evt) => { this.onTouchMove(evt); });\n            targetElem.addEventListener('touchend',\n                    (evt) => { this.onTouchEnd(evt); });\n            targetElem.addEventListener('pointerdown',\n                    (evt) => { this.onPointerDown(evt); });\n            targetElem.addEventListener('pointerup',\n                     (evt) => { this.onPointerUp(evt); });\n            targetElem.addEventListener('MSGestureStart',\n                    (evt) => { this.onMSGestureStart(evt); });\n            targetElem.addEventListener('MSGestureChange',\n                    (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n     /**\n     * @hidden\n     * Function that is called when scrolling with the mouse wheel or using touchpad\n     */\n    protected onWheel(evt) {\n        // if no scrollbar return\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        let scrollDeltaX;\n        let scrollDeltaY;\n        const scrollStep = this.wheelStep;\n        const minWheelStep = 1 / this.wheelStep;\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        if (evt.wheelDeltaX) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaX = -evt.wheelDeltaX / 120;\n\n            if (-minWheelStep < scrollDeltaX && scrollDeltaX < minWheelStep) {\n                scrollDeltaX = Math.sign(scrollDeltaX) * minWheelStep;\n            }\n        } else if (evt.deltaX) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaX = this.calcAxisCoords(evt.deltaX, -1, 1);\n        }\n\n        /** Get delta for the Y axis*/\n        if (evt.wheelDeltaY) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaY = -evt.wheelDeltaY / 120;\n\n            if (-minWheelStep < scrollDeltaY && scrollDeltaY < minWheelStep) {\n                scrollDeltaY = Math.sign(scrollDeltaY) * minWheelStep;\n            }\n        } else if (evt.deltaY) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaY = this.calcAxisCoords(evt.deltaY, -1, 1);\n        }\n        if (scrollDeltaX && this.IgxScrollInertiaDirection === 'horizontal') {\n            this._scrollToX(\n                this._startX + scrollDeltaX * scrollStep\n            );\n            const curScrollLeft = this.IgxScrollInertiaScrollContainer.scrollLeft;\n            const maxScrollLeft = parseInt(this.IgxScrollInertiaScrollContainer.children[0].style.width, 10);\n            if (0 < curScrollLeft && curScrollLeft < maxScrollLeft) {\n                // Prevent navigating through pages when scrolling on Mac\n                evt.preventDefault();\n            }\n        } else if (scrollDeltaY && this.IgxScrollInertiaDirection === 'vertical') {\n            this._scrollToY(\n                this._startY + scrollDeltaY * scrollStep\n            );\n            this.preventParentScroll(evt);\n        }\n    }\n\n    /**\n     * @hidden\n     * When there is still room to scroll up/down prevent the parent elements from scrolling too.\n     */\n    protected preventParentScroll(evt) {\n        const curScrollTop = this.IgxScrollInertiaScrollContainer.scrollTop;\n        const maxScrollTop = this.IgxScrollInertiaScrollContainer.children[0].scrollHeight -\n            this.IgxScrollInertiaScrollContainer.offsetHeight;\n        if (0 < curScrollTop && curScrollTop < maxScrollTop) {\n            evt.preventDefault();\n            if (evt.stopPropagation) {\n                evt.stopPropagation();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called the first moment we start interacting with the content on a touch device\n     */\n    protected onTouchStart(event) {\n        if (typeof MSGesture === 'function' || !this.IgxScrollInertiaScrollContainer) {\n            return false;\n        }\n\n        // stops any current ongoing inertia\n        cancelAnimationFrame(this._touchInertiaAnimID);\n\n        const touch = event.touches[ 0 ];\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        this._touchStartX = touch.pageX;\n        this._touchStartY = touch.pageY;\n\n        this._lastTouchEnd = new Date().getTime();\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n        this._savedSpeedsX = [];\n        this._savedSpeedsY = [];\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n\n        this._touchPrevented = false;\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to scroll the content based on touch interactions\n     */\n    protected onTouchMove(event) {\n        if (typeof MSGesture === 'function') {\n            this._touchPrevented = false;\n            return false;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n\n        const touch = event.touches[ 0 ];\n        const destX = this._startX + (this._touchStartX - touch.pageX) * Math.sign(this.inertiaStep);\n        const destY = this._startY + (this._touchStartY - touch.pageY) * Math.sign(this.inertiaStep);\n\n        /* Handle complex touchmoves when swipe stops but the toch doesn't end and then a swipe is initiated again */\n        /* **********************************************************/\n\n\n        const timeFromLastTouch = (new Date().getTime()) - this._lastTouchEnd;\n        if (timeFromLastTouch !== 0 && timeFromLastTouch < 100) {\n            const speedX = (this._lastTouchX - touch.pageX) / timeFromLastTouch;\n            const speedY = (this._lastTouchY - touch.pageY) / timeFromLastTouch;\n\n            // Save the last 5 speeds between two touchmoves on X axis\n            if (this._savedSpeedsX.length < 5) {\n                this._savedSpeedsX.push(speedX);\n            } else {\n                this._savedSpeedsX.shift();\n                this._savedSpeedsX.push(speedX);\n            }\n\n            // Save the last 5 speeds between two touchmoves on Y axis\n            if (this._savedSpeedsY.length < 5) {\n                this._savedSpeedsY.push(speedY);\n            } else {\n                this._savedSpeedsY.shift();\n                this._savedSpeedsY.push(speedY);\n            }\n        }\n        this._lastTouchEnd = new Date().getTime();\n        this._lastMovedX = this._lastTouchX - touch.pageX;\n        this._lastMovedY = this._lastTouchY - touch.pageY;\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n\n        this._totalMovedX += this._lastMovedX;\n\n        let scrolledXY; // Object: {x, y}\n        /*\tDo not scroll using touch untill out of the swipeToleranceX bounds */\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            scrolledXY = this._scrollTo(this._startX, destY);\n        } else {\n            /*\tRecord the direction the first time we are out of the swipeToleranceX bounds.\n\t\t\t*\tThat way we know which direction we apply the offset so it doesn't hickup when moving out of the swipeToleranceX bounds */\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n\n            /*\tScroll with offset ammout of swipeToleranceX in the direction we have exited the bounds and\n            don't change it after that ever until touchend and again touchstart */\n            scrolledXY = this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX,\n                destY);\n        }\n\n        if (scrolledXY.x === 0 && scrolledXY.y === 0) {\n            this._touchPrevented = true;\n        }\n\n        // On Safari preventing the touchmove would prevent default page scroll behaviour even if there is the element doesn't have overflow\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event);\n        }\n    }\n\n    protected onTouchEnd(event) {\n        if (typeof MSGesture === 'function') {\n            return;\n        }\n        let speedX = 0;\n        let speedY = 0;\n\n        // savedSpeedsX and savedSpeedsY have same length\n        for (let i = 0; i < this._savedSpeedsX.length; i++) {\n            speedX += this._savedSpeedsX[ i ];\n            speedY += this._savedSpeedsY[ i ];\n        }\n        speedX = this._savedSpeedsX.length ? speedX / this._savedSpeedsX.length : 0;\n        speedY = this._savedSpeedsX.length ? speedY / this._savedSpeedsY.length : 0;\n\n         // Use the lastMovedX and lastMovedY to determine if the swipe stops without lifting the finger so we don't start inertia\n        if ((Math.abs(speedX) > 0.1 || Math.abs(speedY) > 0.1) &&\n                        (Math.abs(this._lastMovedX) > 2 || Math.abs(this._lastMovedY) > 2)) {\n                    this._inertiaInit(speedX, speedY);\n        }\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch starting on a touch device on IE/Edge\n     */\n    protected onPointerDown(event) {\n        if (!event || (event.pointerType !== 2 && event.pointerType !== 'touch') ||\n            typeof MSGesture !== 'function') {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        // setPointerCaptureFName is the name of the function that is supported\n        event.target[this.setPointerCaptureFName](this._pointer = event.pointerId);\n\n        // create gestureObject only one time to prevent overlapping during intertia\n        if (!this._gestureObject) {\n            this._gestureObject = new MSGesture();\n            this._gestureObject.target = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n        }\n        this._gestureObject.addPointer(this._pointer);\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch ending on a touch device on IE/Edge\n     */\n    protected onPointerUp(event) {\n        if (!this._pointer) {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        /* releasePointerCaptureFName is the name of the function that is supported */\n        event.target[ this.releasePointerCaptureFName ](this._pointer);\n\n        delete this._pointer;\n    }\n\n    /**\n     * @hidden\n     *  Function that is called when a gesture begins on IE/Edge\n     */\n    protected onMSGestureStart(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n\n        this._touchStartX = event.screenX;\n        this._touchStartY = event.screenY;\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n        return false;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge\n     */\n    protected onMSGestureChange(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        const touchPos = event,\n            destX = this._startX + this._touchStartX - touchPos.screenX,\n            destY = this._startY + this._touchStartY - touchPos.screenY;\n        /* Logic regarding x tolerance to prevent accidental horizontal scrolling when scrolling vertically */\n        this._totalMovedX = this._touchStartX - touchPos.screenX;\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            /* Do not scroll horizontally yet while in the tolerance range */\n            this._scrollToY(destY);\n        } else {\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n            /* Once the tolerance is exceeded it can be scrolled horizontally */\n            this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);\n        }\n\n        return false;\n    }\n\n    private calcAxisCoords(target, min, max) {\n        if (target === undefined || target < min) {\n            target = min;\n        } else if (target > max) {\n            target = max;\n        }\n\n        return target;\n    }\n\n    private _scrollTo(destX, destY) {\n        const curPosX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        const curPosY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n         // TODO Trigger scrolling event?\n        const scrolledX = this._scrollToX(destX);\n        const scrolledY = this._scrollToY(destY);\n\n        return { x: scrolledX, y: scrolledY };\n    }\n    private _scrollToX(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollLeft = dest;\n    }\n    private _scrollToY(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollTop = dest;\n    }\n\n   protected _inertiaInit(speedX, speedY) {\n    const stepModifer = this.inertiaStep,\n        inertiaDuration = this.inertiaDuration;\n    let x = 0;\n    this._nextX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n    this._nextY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n    // Sets timeout until executing next movement iteration of the inertia\n    const inertiaStep = () => {\n        if (x > 6) {\n            cancelAnimationFrame(this._touchInertiaAnimID);\n            return;\n        }\n\n        if (Math.abs(speedX) > Math.abs(speedY)) {\n            x += 0.05 / (1 * inertiaDuration);\n        } else {\n            x += 0.05 / (1 * inertiaDuration);\n        }\n\n        if (x <= 1) {\n            // We use constant quation to determine the offset without speed falloff befor x reaches 1\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += 1 * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += 1 * speedY * 15 * stepModifer;\n            }\n        } else {\n            // We use the quation \"y = 2 / (x + 0.55) - 0.3\" to determine the offset\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += Math.abs(2 / (x + 0.55) - 0.3) * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += Math.abs(2 / (x + 0.55) - 0.3) * speedY * 15 * stepModifer;\n            }\n        }\n\n        // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse\n        this._scrollTo(this._nextX, this._nextY);\n\n        this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n    };\n\n    // Start inertia and continue it recursively\n    this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n   }\n\n    ngOnDestroy() {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.removeEventListener('wheel',\n                (evt) => { this.onWheel(evt); });\n            targetElem.removeEventListener('touchstart',\n                (evt) => { this.onTouchStart(evt); });\n            targetElem.removeEventListener('touchmove',\n                (evt) => { this.onTouchMove(evt); });\n            targetElem.removeEventListener('touchend',\n                (evt) => { this.onTouchEnd(evt); });\n            targetElem.removeEventListener('pointerdown',\n                (evt) => { this.onPointerDown(evt); });\n            targetElem.removeEventListener('pointerup',\n                (evt) => { this.onPointerUp(evt); });\n            targetElem.removeEventListener('MSGestureStart',\n                (evt) => { this.onMSGestureStart(evt); });\n            targetElem.removeEventListener('MSGestureChange',\n                (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxScrollInertiaDirective],\n    exports: [IgxScrollInertiaDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxScrollInertiaModule {\n}\n\n","import { Injectable } from '@angular/core';\nimport { IgxGridForOfDirective } from './for_of.directive';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfSyncService {\n\n    private _master: Map<string, IgxGridForOfDirective<any>> = new Map<string, IgxGridForOfDirective<any>>();\n\n    /**\n     * @hidden\n     */\n    public isMaster(directive: IgxGridForOfDirective<any>): boolean {\n        return this._master.get(directive.igxForScrollOrientation) === directive;\n    }\n\n    /**\n     * @hidden\n     */\n    public setMaster(directive: IgxGridForOfDirective<any>, forced = false) {\n        const orientation = directive.igxForScrollOrientation;\n        if (orientation && (forced || !this._master.has(orientation))) {\n            this._master.set(orientation, directive);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public resetMaster() {\n        this._master.clear();\n    }\n\n    /**\n     * @hidden\n     */\n    public sizesCache(dir: string): number[] {\n        return this._master.get(dir).sizesCache;\n    }\n\n    /**\n     * @hidden\n     */\n    public chunkSize(dir: string): number {\n        return this._master.get(dir).state.chunkSize;\n    }\n}\n","import { CommonModule, NgForOfContext } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    DoCheck,\n    EmbeddedViewRef,\n    EventEmitter,\n    Input,\n    IterableChanges,\n    IterableDiffer,\n    IterableDiffers,\n    NgModule,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    TrackByFunction,\n    ViewContainerRef,\n    ViewRef\n} from '@angular/core';\n\nimport { DisplayContainerComponent } from './display.container';\nimport { HVirtualHelperComponent } from './horizontal.virtual.helper.component';\nimport { VirtualHelperComponent } from './virtual.helper.component';\nimport { IgxScrollInertiaModule } from './../scroll-inertia/scroll_inertia.directive';\nimport { IgxForOfSyncService } from './for_of.sync.service';\n\n@Directive({ selector: '[igxFor][igxForOf]' })\nexport class IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck, OnDestroy {\n\n    /**\n     * An @Input property that sets the data to be rendered.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForOf: any[];\n\n    /**\n     * An @Input property that sets the property name from which to read the size in the data object.\n     */\n    @Input()\n    public igxForSizePropName;\n\n    /**\n     * An @Input property that specifies the scroll orientation.\n     * Scroll orientation can be \"vertical\" or \"horizontal\".\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollOrientation: string;\n\n    /**\n     * Optionally pass the parent `igxFor` instance to create a virtual template scrolling both horizontally and vertically.\n     * ```html\n     * <ng-template #scrollContainer igxFor let-rowData [igxForOf]=\"data\"\n     *       [igxForScrollOrientation]=\"'vertical'\"\n     *       [igxForContainerSize]=\"'500px'\"\n     *       [igxForItemSize]=\"'50px'\"\n     *       let-rowIndex=\"index\">\n     *       <div [style.display]=\"'flex'\" [style.height]=\"'50px'\">\n     *           <ng-template #childContainer igxFor let-item [igxForOf]=\"data\"\n     *               [igxForScrollOrientation]=\"'horizontal'\"\n     *               [igxForScrollContainer]=\"parentVirtDir\"\n     *               [igxForContainerSize]=\"'500px'\">\n     *                   <div [style.min-width]=\"'50px'\">{{rowIndex}} : {{item.text}}</div>\n     *           </ng-template>\n     *       </div>\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollContainer: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the container along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the container and for \"vertical\" is the height.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForContainerSize]=\"'500px'\"\n     *      [igxForScrollOrientation]=\"'horizontal'\">\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForContainerSize: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the item along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the column and for \"vertical\" is the height or the row.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForItemSize: any;\n\n    /**\n     * @hidden\n     */\n    public dc: ComponentRef<DisplayContainerComponent>;\n\n    /**\n     * The current state of the directive. It contains `startIndex` and `chunkSize`.\n     * state.startIndex - The index of the item at which the current visible chunk begins.\n     * state.chunkSize - The number of items the current visible chunk holds.\n     * These options can be used when implementing remote virtualization as they provide the necessary state information.\n     * ```typescript\n     * const gridState = this.parentVirtDir.state;\n     * ```\n     */\n    public state: IForOfState = {\n        startIndex: 0,\n        chunkSize: 0\n    };\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * ```typescript\n     * this.parentVirtDir.totalItemCount = data.Count;\n     * ```\n     */\n    public totalItemCount: number = null;\n\n    /**\n     * An event that is emitted after a new chunk has been loaded.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkLoad)=\"chunkLoad($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkLoad(e){\n     * alert(\"chunk loaded!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * An event that is emitted after data has been changed.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onDataChanged)=\"dataChanged($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * dataChanged(e){\n     * alert(\"data changed!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDataChanged = new EventEmitter<any>();\n\n    @Output()\n    public onBeforeViewDestroyed = new EventEmitter<EmbeddedViewRef<any>>();\n\n    /**\n     * An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.\n     * Can be used for implementing remote load on demand for the igxFor data.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkPreload)=\"chunkPreload($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkPreload(e){\n     * alert(\"chunk is loading!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkPreload = new EventEmitter<IForOfState>();\n\n    protected hScroll;\n    protected func;\n    protected _sizesCache: number[] = [];\n    protected vh: ComponentRef<VirtualHelperComponent>;\n    protected hvh: ComponentRef<HVirtualHelperComponent>;\n    protected _differ: IterableDiffer<T> | null = null;\n    protected _trackByFn: TrackByFunction<T>;\n    protected heightCache = [];\n    private _adjustToIndex;\n    private MAX_PERF_SCROLL_DIFF = 4;\n\n    protected get sizesCache(): number[] {\n        return this._sizesCache;\n    }\n    protected set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    private get _isScrolledToBottom() {\n        if (!this.getVerticalScroll()) {\n            return true;\n        }\n        const scrollTop = this.getVerticalScroll().scrollTop;\n        const scrollHeight = this.getVerticalScroll().scrollHeight;\n        // Use === and not >= because `scrollTop + container size` can't be bigger than `scrollHeight`, unless something isn't updated.\n        // Also use Math.round because Chrome has some inconsistencies and `scrollTop + container` can be float when zooming the page.\n        return Math.round(scrollTop + this.igxForContainerSize) === scrollHeight;\n    }\n\n    private get _isAtBottomIndex() {\n        return this.igxForOf && this.state.startIndex + this.state.chunkSize > this.igxForOf.length;\n    }\n\n    // Start properties related to virtual height handling due to browser limitation\n    /** Maximum height for an element of the browser. */\n    private _maxHeight;\n\n    /** Height that is being virtualized. */\n    protected _virtHeight = 0;\n\n    /**\n     * Ratio for height that's being virtualizaed and the one visible\n     * If _virtHeightRatio = 1, the visible height and the virtualized are the same, also _maxHeight > _virtHeight.\n     */\n    private _virtHeightRatio = 1;\n\n    /** Internal track for scroll top that is being virtualized */\n    protected _virtScrollTop = 0;\n\n    /** If the next onScroll event is triggered due to internal setting of scrollTop */\n    protected _bScrollInternal = false;\n    // End properties related to virtual height handling\n\n    protected _embeddedViews: Array<EmbeddedViewRef<any>> = [];\n\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        protected _template: TemplateRef<NgForOfContext<T>>,\n        protected _differs: IterableDiffers,\n        private resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef,\n        protected _zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    protected get isRemote(): boolean {\n        return this.totalItemCount !== null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected removeScrollEventListeners() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._zone.runOutsideAngular(() =>\n                this.getHorizontalScroll().removeEventListener('scroll', this.func)\n            );\n        } else {\n            const vertical = this.getVerticalScroll();\n            if (vertical) {\n                this._zone.runOutsideAngular(() =>\n                    vertical.removeEventListener('scroll', this.verticalScrollHandler)\n                );\n            }\n        }\n    }\n\n    public verticalScrollHandler(event) {\n        this.onScroll(event);\n    }\n\n    public isScrollable() {\n        return this.vh.instance.height > parseInt(this.igxForContainerSize, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        let totalSize = 0;\n        const vc = this.igxForScrollContainer ? this.igxForScrollContainer._viewContainer : this._viewContainer;\n        this.igxForSizePropName = this.igxForSizePropName || 'width';\n\n        const dcFactory: ComponentFactory<DisplayContainerComponent> = this.resolver.resolveComponentFactory(DisplayContainerComponent);\n        this.dc = this._viewContainer.createComponent(dcFactory, 0);\n        this.dc.instance.scrollDirection = this.igxForScrollOrientation;\n        if (typeof MSGesture === 'function') {\n            // On Edge and IE when scrolling on touch the page scroll instead of the grid.\n            this.dc.instance._viewContainer.element.nativeElement.style.touchAction = 'none';\n        }\n        if (this.igxForOf && this.igxForOf.length) {\n            this.dc.instance.notVirtual = !(this.igxForContainerSize && this.state.chunkSize < this.igxForOf.length);\n            totalSize = this.initSizesCache(this.igxForOf);\n            this.hScroll = this.getElement(vc, 'igx-horizontal-virtual-helper');\n            if (this.hScroll) {\n                this.state.startIndex = this.getIndexAt(this.hScroll.scrollLeft, this.sizesCache, 0);\n            }\n            this.state.chunkSize = this._calculateChunkSize();\n            for (let i = 0; i < this.state.chunkSize && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n                    this._template,\n                    { $implicit: input, index: this.igxForOf.indexOf(input) }\n                );\n                this._embeddedViews.push(embeddedView);\n            }\n        }\n\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n            const factory: ComponentFactory<VirtualHelperComponent> = this.resolver.resolveComponentFactory(VirtualHelperComponent);\n            this.vh = vc.createComponent(factory);\n\n            this._maxHeight = this._calcMaxBrowserHeight();\n            this.vh.instance.height = this.igxForOf ? this._calcHeight() : 0;\n            this._zone.runOutsideAngular(() => {\n                this.verticalScrollHandler = this.verticalScrollHandler.bind(this);\n                this.vh.instance.elementRef.nativeElement.addEventListener('scroll', this.verticalScrollHandler);\n                this.dc.instance.scrollContainer = this.vh.instance.elementRef.nativeElement;\n            });\n        }\n\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.func = (evt) => { this.onHScroll(evt); };\n            this.hScroll = this.getElement(vc, 'igx-horizontal-virtual-helper');\n            if (!this.hScroll) {\n                const hvFactory: ComponentFactory<HVirtualHelperComponent> =\n                    this.resolver.resolveComponentFactory(HVirtualHelperComponent);\n                this.hvh = vc.createComponent(hvFactory);\n                this.hvh.instance.width = totalSize;\n                this.hScroll = this.hvh.instance.elementRef.nativeElement;\n                this._zone.runOutsideAngular(() => {\n                    this.hvh.instance.elementRef.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.hScroll;\n                });\n            } else {\n                this._zone.runOutsideAngular(() => {\n                    this.hScroll.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.hScroll;\n                });\n            }\n\n            const scrollOffset = this.hScroll.scrollLeft -\n                (this.sizesCache && this.sizesCache.length ? this.sizesCache[this.state.startIndex] : 0);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.removeScrollEventListeners();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        const forOf = 'igxForOf';\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange && this.igxForScrollOrientation === 'vertical') {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    return;\n                }\n                this._updateSizeCache();\n                this._zone.run(() => {\n                    this._applyChanges();\n                    this.cdr.markForCheck();\n                    this._updateScrollOffset();\n                    this.onDataChanged.emit();\n                });\n            }\n        }\n    }\n\n    /**\n     * Shifts the scroll thumb position.\n     * ```typescript\n     * this.parentVirtDir.addScrollTop(5);\n     * ```\n     * @param addTop negative value to scroll up and positive to scroll down;\n     */\n    public addScrollTop(addTop: number): boolean {\n        if (addTop === 0 && this.igxForScrollOrientation === 'horizontal') {\n            return false;\n        }\n        const originalVirtScrollTop = this._virtScrollTop;\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxVirtScrollTop = this._virtHeight - containerSize;\n\n        this._bScrollInternal = true;\n        this._virtScrollTop += addTop;\n        this._virtScrollTop = this._virtScrollTop > 0 ?\n            (this._virtScrollTop < maxVirtScrollTop ? this._virtScrollTop : maxVirtScrollTop) :\n            0;\n\n        this.vh.instance.elementRef.nativeElement.scrollTop += addTop / this._virtHeightRatio;\n        if (Math.abs(addTop / this._virtHeightRatio) < 1) {\n            // Actual scroll delta that was added is smaller than 1 and onScroll handler doesn't trigger when scrolling < 1px\n            const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n            // scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;\n            this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        }\n\n        const curScrollTop = this.vh.instance.elementRef.nativeElement.scrollTop;\n        const maxRealScrollTop = this.vh.instance.elementRef.nativeElement.scrollHeight - containerSize;\n        if ((this._virtScrollTop > 0 && curScrollTop === 0) ||\n            (this._virtScrollTop < maxVirtScrollTop && curScrollTop === maxRealScrollTop)) {\n            // Actual scroll position is at the top or bottom, but virtual one is not at the top or bottom (there's more to scroll)\n            // Recalculate actual scroll position based on the virtual scroll.\n            this.vh.instance.elementRef.nativeElement.scrollTop = this._virtScrollTop / this._virtHeightRatio;\n        } else if (this._virtScrollTop === 0 && curScrollTop > 0) {\n            // Actual scroll position is not at the top, but virtual scroll is. Just update the actual scroll\n            this.vh.instance.elementRef.nativeElement.scrollTop = 0;\n        } else if (this._virtScrollTop === maxVirtScrollTop && curScrollTop < maxRealScrollTop) {\n            // Actual scroll position is not at the bottom, but virtual scroll is. Just update the acual scroll\n            this.vh.instance.elementRef.nativeElement.scrollTop = maxRealScrollTop;\n        }\n        return this._virtScrollTop !== originalVirtScrollTop;\n    }\n\n    /**\n     * Scrolls to the specified index.\n     * ```typescript\n     * this.parentVirtDir.scrollTo(5);\n     * ```\n     * @param index\n     */\n    public scrollTo(index) {\n        if (index < 0 || index > (this.isRemote ? this.totalItemCount : this.igxForOf.length) - 1) {\n            return;\n        }\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const scr = this.igxForScrollOrientation === 'horizontal' ?\n            this.hScroll.scrollLeft : this.vh.instance.elementRef.nativeElement.scrollTop;\n        const isPrevItem = index < this.state.startIndex || scr > this.sizesCache[index];\n        let nextScroll = isPrevItem ? this.sizesCache[index] : this.sizesCache[index + 1] - containerSize;\n        if (nextScroll < 0) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.hScroll.scrollLeft = nextScroll;\n        } else {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            if (nextScroll > maxVirtScrollTop) {\n                nextScroll = maxVirtScrollTop;\n            }\n            this._bScrollInternal = true;\n            this._virtScrollTop = nextScroll;\n            this.vh.instance.elementRef.nativeElement.scrollTop = this._virtScrollTop / this._virtHeightRatio;\n            this._adjustToIndex = !isPrevItem ? index : null;\n        }\n    }\n\n    /**\n     * Scrolls by one item into the appropriate next direction.\n     * For \"horizontal\" orientation that will be the right column and for \"vertical\" that is the lower row.\n     * ```typescript\n     * this.parentVirtDir.scrollNext();\n     * ```\n     */\n    public scrollNext() {\n        const scr = Math.ceil(this.igxForScrollOrientation === 'horizontal' ?\n            this.hScroll.scrollLeft :\n            this.vh.instance.elementRef.nativeElement.scrollTop);\n        const endIndex = this.getIndexAt(\n            scr + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        this.scrollTo(endIndex);\n    }\n\n    /**\n     * Scrolls by one item into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be the left column and for \"vertical\" that is the upper row.\n     * ```typescript\n     * this.parentVirtDir.scrollPrev();\n     * ```\n     */\n    public scrollPrev() {\n        this.scrollTo(this.state.startIndex - 1);\n    }\n\n    /**\n     * Scrolls by one page into the appropriate next direction.\n     * For \"horizontal\" orientation that will be one view to the right and for \"vertical\" that is one view to the bottom.\n     * ```typescript\n     * this.parentVirtDir.scrollNextPage();\n     * ```\n     */\n    public scrollNextPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.hvh.instance.elementRef.nativeElement.scrollLeft += parseInt(this.igxForContainerSize, 10);\n        } else {\n            this.addScrollTop(parseInt(this.igxForContainerSize, 10));\n        }\n    }\n\n    /**\n     * Scrolls by one page into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be one view to the left and for \"vertical\" that is one view to the top.\n     * ```typescript\n     * this.parentVirtDir.scrollPrevPage();\n     * ```\n     */\n    public scrollPrevPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.hvh.instance.elementRef.nativeElement.scrollLeft -= parseInt(this.igxForContainerSize, 10);\n        } else {\n            const containerSize = (parseInt(this.igxForContainerSize, 10));\n            this.addScrollTop(-containerSize);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnScrollLeft(colIndex) {\n        return this.sizesCache[colIndex];\n    }\n\n    /**\n     * Returns a reference to the vertical scrollbar DOM element.\n     * ```typescript\n     * this.parentVirtDir.getVerticalScroll();\n     * ```\n     */\n    public getVerticalScroll() {\n        if (this.vh) {\n            return this.vh.instance.elementRef.nativeElement;\n        }\n        return null;\n    }\n\n    /**\n     * Returns the total number of items that are fully visible.\n     * ```typescript\n     * this.parentVirtDir.getItemCountInView();\n     * ```\n     */\n    public getItemCountInView() {\n        const position = this.igxForScrollOrientation === 'horizontal' ?\n            this.hScroll.scrollLeft :\n            this.vh.instance.elementRef.nativeElement.scrollTop;\n        let startIndex = this.getIndexAt(\n            position,\n            this.sizesCache,\n            0\n        );\n        if (position - this.sizesCache[startIndex] > 0) {\n            // fisrt item is not fully in view\n            startIndex++;\n        }\n        const endIndex = this.getIndexAt(\n            position + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        return endIndex - startIndex;\n    }\n\n    /**\n     * Returns a reference to the horizontal scrollbar DOM element.\n     * ```typescript\n     * this.parentVirtDir.getHorizontalScroll();\n     * ```\n     */\n    public getHorizontalScroll() {\n        return this.getElement(this._viewContainer, 'igx-horizontal-virtual-helper') || this.hScroll;\n    }\n\n    /**\n     * Returns the size of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getSizeAt(1);\n     * ```\n     */\n    public getSizeAt(index: number) {\n        return this.sizesCache[index + 1] - this.sizesCache[index];\n    }\n\n    /**\n     * Returns the scroll offset of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getScrollForIndex(1);\n     * ```\n     */\n    public getScrollForIndex(index: number, bottom?: boolean) {\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const scroll = bottom ? this.sizesCache[index + 1] - containerSize : this.sizesCache[index];\n        return scroll;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling vertically\n     */\n    protected onScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = event.target.scrollTop / maxRealScrollTop;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        const prevStartIndex = this.state.startIndex;\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        requestAnimationFrame(() => {\n            // check if height/width has changes in views.\n            this.recalcUpdateSizes();\n        });\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that recaculates and updates cache sizes.\n     */\n    public recalcUpdateSizes() {\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n        this.igxForSizePropName : 'height';\n        const diffs = [];\n        let totalDiff = 0;\n        for (let i = 0; i < this._embeddedViews.length; i++) {\n            const view = this._embeddedViews[i];\n            const rNode = view.rootNodes.find((node) => node.nodeType === Node.ELEMENT_NODE);\n            if (rNode) {\n                const h = rNode.offsetHeight ? rNode.offsetHeight : parseInt(this.igxForItemSize, 10);\n                const index = this.state.startIndex + i;\n                if (!this.isRemote && !this.igxForOf[index]) {\n                    continue;\n                }\n                const oldVal = dimension === 'height' ? this.heightCache[index] : this.igxForOf[index][dimension];\n                const newVal = dimension === 'height' ? h : rNode.clientWidth;\n                if (dimension === 'height') {\n                    this.heightCache[index] = newVal;\n                } else {\n                    this.igxForOf[index][dimension] = newVal;\n                }\n                const currDiff = newVal - oldVal;\n                diffs.push(currDiff);\n                totalDiff += currDiff;\n                this.sizesCache[index + 1] += totalDiff;\n            }\n        }\n        // update cache\n        if (Math.abs(totalDiff) > 0) {\n            for (let j = this.state.startIndex + this.state.chunkSize + 1; j < this.sizesCache.length; j++) {\n                this.sizesCache[j] += totalDiff;\n            }\n\n            // update scrBar heights/widths\n            if (this.igxForScrollOrientation === 'horizontal') {\n                const totalWidth = parseInt(this.hScroll.children[0].style.width, 10) + totalDiff;\n                this.hScroll.children[0].style.width = totalWidth + 'px';\n            }\n            const reducer = (acc, val) => acc + val;\n            if (this.igxForScrollOrientation === 'vertical') {\n                const scrToBottom = this._isScrolledToBottom && !this.dc.instance.notVirtual;\n                const hSum = this.heightCache.reduce(reducer);\n                if (hSum > this._maxHeight) {\n                    this._virtHeightRatio = hSum / this._maxHeight;\n                }\n                this.vh.instance.height = Math.min(this.vh.instance.height + totalDiff, this._maxHeight);\n                this._virtHeight = hSum;\n                if (!this.vh.instance.destroyed) {\n                    this.vh.instance.cdr.detectChanges();\n                }\n                if (scrToBottom && !this._isAtBottomIndex) {\n                    const containerSize = parseInt(this.igxForContainerSize, 10);\n                    const scrollOffset = this.fixedUpdateAllElements(this._virtHeight - containerSize);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n                    return;\n                }\n                if (this._adjustToIndex) {\n                    // in case scrolled to specific index where after scroll heights are changed\n                    // need to adjust the offsets so that item is last in view.\n                    const updatesToIndex = this._adjustToIndex - this.state.startIndex + 1;\n                    const sumDiffs = diffs.slice(0, updatesToIndex).reduce(reducer);\n                    const currOffset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = (currOffset - sumDiffs) + 'px';\n                    this._adjustToIndex = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected fixedUpdateAllElements(inScrollTop: number): number {\n        const count = this.isRemote ? this.totalItemCount : this.igxForOf.length;\n        let newStart = this.getIndexAt(\n            inScrollTop,\n            this.sizesCache,\n            0\n        );\n        if (newStart + this.state.chunkSize > count) {\n            newStart = count - this.state.chunkSize;\n        }\n        const prevStart = this.state.startIndex;\n        const diff = newStart - this.state.startIndex;\n        this.state.startIndex = newStart;\n        if (diff) {\n            this.onChunkPreload.emit(this.state);\n            if (!this.isRemote) {\n                /*recalculate and apply page size.*/\n                if (diff > 0 && diff <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollNext(prevStart);\n                } else if (diff < 0 && Math.abs(diff) <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollPrev(prevStart);\n                } else {\n                    this.fixedApplyScroll();\n                }\n            }\n        }\n        return inScrollTop - this.sizesCache[this.state.startIndex];\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling down/right employing context change with view rearrangement\n     */\n    protected moveApplyScrollNext(prevIndex: number): void {\n        const start = prevIndex + this.state.chunkSize;\n        for (let i = start; i < start + this.state.startIndex - prevIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.shift();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            const view: ViewRef = this.dc.instance._vcr.detach(0);\n            this.dc.instance._vcr.insert(view);\n            this._embeddedViews.push(embView);\n        }\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling up/left employing context change with view rearrangement\n     */\n    protected moveApplyScrollPrev(prevIndex: number): void {\n        for (let i = prevIndex - 1; i >= this.state.startIndex  && this.igxForOf[i] !== undefined; i--) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.pop();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            const view: ViewRef = this.dc.instance._vcr.detach(this.dc.instance._vcr.length - 1);\n            this.dc.instance._vcr.insert(view, 0);\n            this._embeddedViews.unshift(embView);\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    protected getContextIndex(input) {\n        return this.isRemote ? this.state.startIndex + this.igxForOf.indexOf(input) : this.igxForOf.indexOf(input);\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change through context change for each view\n     */\n    protected fixedApplyScroll(): void {\n        let j = 0;\n        const endIndex = this.state.startIndex + this.state.chunkSize;\n        for (let i = this.state.startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews[j++];\n            const cntx = (embView as EmbeddedViewRef<any>).context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling horizontally\n     */\n    protected onHScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.hScroll.children[0].style.width, 10)) {\n            return;\n        }\n        const curScrollLeft = event.target.scrollLeft;\n        const prevStartIndex = this.state.startIndex;\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(curScrollLeft);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * Gets the function used to track changes in the items collection.\n     * By default the object references are compared. However this can be optimized if you have unique identifier\n     * value that can be used for the comparison instead of the object ref or if you have some other property values\n     * in the item object that should be tracked for changes.\n     * This option is similar to ngForTrackBy.\n     * ```typescript\n     * const trackFunc = this.parentVirtDir.igxForTrackBy;\n     * ```\n     */\n    @Input()\n    get igxForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\n\n    /**\n     * Sets the function used to track changes in the items collection.\n     * This function can be set in scenarios where you want to optimize or\n     * customize the tracking of changes for the items in the collection.\n     * The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.\n     * ```typescript\n     * this.parentVirtDir.igxForTrackBy = (index, item) => {\n     *      return item.id + item.width;\n     * };\n     * ```\n     */\n    set igxForTrackBy(fn: TrackByFunction<T>) { this._trackByFn = fn; }\n\n    /**\n     * @hidden\n     */\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex = this.state.startIndex;\n            let endIndex = this.state.chunkSize + this.state.startIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            }\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n            }\n            this.dc.changeDetectorRef.detectChanges();\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n            if (this.igxForScrollOrientation === 'vertical') {\n                this.recalcUpdateSizes();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxBrowserHeight(): number {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.position = 'absolute';\n        style.top = '9999999999999999px';\n        document.body.appendChild(div);\n        const size = Math.abs(div.getBoundingClientRect()['top']);\n        document.body.removeChild(div);\n        return size;\n    }\n\n    /**\n     * @hidden\n     * Recalculates the chunkSize based on current startIndex and returns the new size.\n     * This should be called after this.state.startIndex is updated, not before.\n     */\n    protected _calculateChunkSize(): number {\n        let chunkSize = 0;\n        if (this.igxForContainerSize !== null && this.igxForContainerSize !== undefined) {\n            if (!this.sizesCache) {\n                this.initSizesCache(this.igxForOf);\n            }\n            chunkSize = this._calcMaxChunkSize();\n            if (this.igxForOf && chunkSize > this.igxForOf.length) {\n                chunkSize = this.igxForOf.length;\n            }\n        } else {\n            if (this.igxForOf) {\n                chunkSize = this.igxForOf.length;\n            }\n        }\n        return chunkSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElement(viewref, nodeName) {\n        const elem = viewref.element.nativeElement.parentNode.getElementsByTagName(nodeName);\n        return elem.length > 0 ? elem[0] : null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected initSizesCache(items: any[]): number {\n        let totalSize = 0;\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            if (dimension === 'height') {\n                // cols[i][dimension] = parseInt(this.igxForItemSize, 10) || 0;\n                size = parseInt(this.igxForItemSize, 10) || 0;\n                this.heightCache.push(size);\n            } else {\n                size = this._getItemSize(items[i], dimension);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n        const scr = this.vh.instance.elementRef.nativeElement;\n\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        const newHeight =  this.initSizesCache(this.igxForOf);\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0 && scr.scrollTop > 0) {\n            this.recalcUpdateSizes();\n            const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n            scr.scrollTop = this.sizesCache[this.state.startIndex] - offset;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        let i = 0;\n        let length = 0;\n        let maxLength = 0;\n        const arr = [];\n        let sum = 0;\n        const availableSize = parseInt(this.igxForContainerSize, 10);\n        if (!availableSize) {\n            return 0;\n        }\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n        this.igxForSizePropName : 'height';\n        const reducer = (accumulator, currentItem) => accumulator + this._getItemSize(currentItem, dimension);\n        for (i; i < this.igxForOf.length; i++) {\n            let item = this.igxForOf[i];\n            if (dimension === 'height') {\n                item = { value: this.igxForOf[i], height: this.heightCache[i] };\n            }\n            const size = dimension === 'height' ?\n                this.heightCache[i] :\n                this._getItemSize(item, dimension);\n            sum = arr.reduce(reducer, size);\n            if (sum < availableSize) {\n                arr.push(item);\n                length = arr.length;\n                if (i === this.igxForOf.length - 1) {\n                    // reached end without exceeding\n                    // include prev items until size is filled or first item is reached.\n                    let curItem = dimension === 'height' ? arr[0].value : arr[0];\n                    let prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                    while (prevIndex >= 0 && sum <= availableSize) {\n                        curItem = dimension === 'height' ? arr[0].value : arr[0];\n                        prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                        const prevItem = this.igxForOf[prevIndex];\n                        const prevSize = dimension === 'height' ?\n                            this.heightCache[prevIndex] :\n                            parseInt(prevItem[dimension], 10);\n                        sum = arr.reduce(reducer, prevSize);\n                        arr.unshift(prevItem);\n                        length = arr.length;\n                    }\n                }\n            } else {\n                arr.push(item);\n                length = arr.length + 1;\n                arr.shift();\n            }\n            if (length > maxLength) {\n                maxLength = length;\n            }\n        }\n        return maxLength;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getIndexAt(left, set, index) {\n        let start = 0;\n        let end = set.length - 1;\n        if (left === 0) {\n            return 0;\n        }\n        while (start <= end) {\n            const midIdx = Math.floor((start + end) / 2);\n            const midLeft = set[midIdx];\n            const cmp = left - midLeft;\n            if (cmp > 0) {\n                start = midIdx + 1;\n            } else if (cmp < 0) {\n                end = midIdx - 1;\n            } else {\n                return midIdx;\n            }\n        }\n        return end;\n    }\n\n    protected _recalcScrollBarSize() {\n        const count = this.isRemote ? this.totalItemCount : (this.igxForOf ? this.igxForOf.length : 0);\n        this.dc.instance.notVirtual = !(this.igxForContainerSize && this.dc && this.state.chunkSize < count);\n        if (this.igxForScrollOrientation === 'horizontal') {\n            const totalWidth = this.igxForContainerSize ? this.initSizesCache(this.igxForOf) : 0;\n            this.hScroll.style.width = this.igxForContainerSize + 'px';\n            this.hScroll.children[0].style.width = totalWidth + 'px';\n        }\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.vh.instance.elementRef.nativeElement.style.height = parseInt(this.igxForContainerSize, 10) + 'px';\n            this.vh.instance.height = this._calcHeight();\n        }\n    }\n\n    protected _calcHeight(): number {\n        let height;\n        if (this.heightCache) {\n            height = this.heightCache.reduce((acc, val) => acc + val, 0);\n        } else {\n            height = this.initSizesCache(this.igxForOf);\n        }\n        this._virtHeight = height;\n        if (height > this._maxHeight) {\n            this._virtHeightRatio = height / this._maxHeight;\n            height = this._maxHeight;\n        }\n        return height;\n    }\n\n    protected _recalcOnContainerChange(changes: SimpleChanges) {\n        this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n        this.dc.instance._viewContainer.element.nativeElement.style.left = '0px';\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (prevChunkSize !== this.state.chunkSize) {\n            this.onChunkLoad.emit(this.state);\n        }\n        if (this.sizesCache && this.hScroll && this.hScroll.scrollLeft !== 0) {\n            // Updating horizontal chunks and offsets based on the new scrollLeft\n            const scrollOffset = this.fixedUpdateAllElements(this.hScroll.scrollLeft);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     * Removes an elemenet from the embedded views and updates chunkSize.\n     */\n    protected removeLastElem() {\n        const oldElem = this._embeddedViews.pop();\n        this.onBeforeViewDestroyed.emit(oldElem);\n        oldElem.destroy();\n\n        this.state.chunkSize--;\n    }\n\n    /**\n     * @hidden\n     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize\n     */\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            { $implicit: input, index: elemIndex }\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n\n        this._zone.run(() => {\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * Recalculates chunkSize and adds/removes elements if need due to the change.\n     * this.state.chunkSize is updated in @addLastElem() or @removeLastElem()\n     */\n    protected applyChunkSizeChange() {\n        const chunkSize = this.isRemote ? (this.igxForOf ? this.igxForOf.length : 0) : this._calculateChunkSize();\n        if (chunkSize > this.state.chunkSize) {\n            const diff = chunkSize - this.state.chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.addLastElem();\n            }\n        } else if (chunkSize < this.state.chunkSize) {\n            const diff = this.state.chunkSize - chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.removeLastElem();\n            }\n        }\n    }\n\n    protected _updateScrollOffset() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._updateHScrollOffset();\n        } else {\n            this._updateVScrollOffset();\n        }\n    }\n    private _updateVScrollOffset() {\n        let scrollOffset = 0;\n        const vScroll = this.vh.instance.elementRef.nativeElement;\n        scrollOffset = vScroll && parseInt(vScroll.style.height, 10) ?\n            vScroll.scrollTop - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n    }\n    private _updateHScrollOffset() {\n        let scrollOffset = 0;\n        scrollOffset = this.hScroll && parseInt(this.hScroll.children[0].style.width, 10) ?\n            this.hScroll.scrollLeft - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    private _getItemSize(item, dimension: string): number {\n        const hasDimension = (item[dimension] !== null && item[dimension] !== undefined);\n        return hasDimension ? parseInt(item[dimension], 10) : this.igxForItemSize;\n    }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n    const name = 'name';\n    return type[name] || typeof type;\n}\n\nexport interface IForOfState {\n    startIndex?: number;\n    chunkSize?: number;\n}\n\n@Directive({\n    selector: '[igxGridFor][igxGridForOf]'\n})\nexport class IgxGridForOfDirective<T> extends IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck {\n\n    constructor(\n        _viewContainer: ViewContainerRef,\n        _template: TemplateRef<NgForOfContext<T>>,\n        _differs: IterableDiffers,\n        resolver: ComponentFactoryResolver,\n        cdr: ChangeDetectorRef,\n        _zone: NgZone,\n        protected syncService: IgxForOfSyncService) {\n            super(_viewContainer, _template, _differs, resolver, cdr, _zone);\n        }\n\n    @Input()\n    set igxGridForOf(value) {\n        this.igxForOf = value;\n    }\n\n    get igxGridForOf() {\n        return this.igxForOf;\n    }\n\n    ngOnInit() {\n        this.syncService.setMaster(this);\n        super.ngOnInit();\n        this.removeScrollEventListeners();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const forOf = 'igxGridForOf';\n        this.syncService.setMaster(this);\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange && this.igxForScrollOrientation === 'vertical') {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get sizesCache(): number[] {\n        if (this.syncService.isMaster(this)) {\n            return this._sizesCache;\n        }\n        return this.syncService.sizesCache(this.igxForScrollOrientation);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    protected get itemsDimension() {\n        return this.igxForScrollOrientation === 'horizontal' ? this.igxForSizePropName : 'height';\n    }\n\n    protected getItemSize(item) {\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        if (dimension === 'height') {\n            size = parseInt(this.igxForItemSize, 10) || 0;\n            if (item && item.summaries) {\n                size = item.max;\n            } else if (item && item.groups && item.height) {\n                size = item.height;\n            }\n        } else {\n            size = parseInt(item[dimension], 10) || 0;\n        }\n        return size;\n    }\n\n    protected initSizesCache(items: any[]): number {\n        if (!this.syncService.isMaster(this)) {\n            const masterSizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n            return masterSizesCache[masterSizesCache.length - 1];\n        }\n        let totalSize = 0;\n        let size = 0;\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            size = this.getItemSize(items[i]);\n            if (this.itemsDimension === 'height') {\n                this.heightCache.push(size);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache(changes: IterableChanges<T> = null) {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n        const scr = this.vh.instance.elementRef.nativeElement;\n\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        let newHeight = oldHeight;\n        if (changes && !this.isRemote) {\n            newHeight = this.handleCacheChanges(changes);\n        } else {\n            newHeight = this.initSizesCache(this.igxForOf);\n        }\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0) {\n            requestAnimationFrame(() => {\n                this.recalcUpdateSizes();\n                const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                if (scr.scrollTop !== 0) {\n                    scr.scrollTop = this.sizesCache[this.state.startIndex] - offset;\n                } else {\n                    this._updateScrollOffset();\n                }\n            });\n        }\n    }\n\n    protected handleCacheChanges(changes: IterableChanges<T>) {\n        const identityChanges = [];\n        const newHeightCache = [];\n        const newSizesCache = [];\n        newSizesCache.push(0);\n        let newHeight = 0;\n\n        // When there are more than one removed items the changes are not reliable so those with identity change should be default size.\n        let numRemovedItems = 0;\n        changes.forEachRemovedItem(() => numRemovedItems++);\n\n        // Get the identity changes to determine later if those that have changed their indexes should be assigned default item size.\n        changes.forEachIdentityChange((item) => {\n            if (item.currentIndex !== item.previousIndex) {\n                // Filter out ones that have not changed their index.\n                identityChanges[item.currentIndex] = item;\n            }\n        });\n\n        // Processing each item that is passed to the igxForOf so far seem to be most reliable. We parse the updated list of items.\n        changes.forEachItem((item) => {\n            if (item.previousIndex !== null &&\n                (numRemovedItems < 2 || !identityChanges.length || identityChanges[item.currentIndex])) {\n                // Reuse cache on those who have previousIndex.\n                // When there are more than one removed items currently the changes are not readable so ones with identity change\n                // should be racalculated.\n                newHeightCache[item.currentIndex] = this.heightCache[item.previousIndex];\n            } else {\n                // Assign default item size.\n                newHeightCache[item.currentIndex] = this.getItemSize(item.item);\n            }\n            newSizesCache[item.currentIndex + 1] = newSizesCache[item.currentIndex] + newHeightCache[item.currentIndex];\n            newHeight += newHeightCache[item.currentIndex];\n        });\n        this.heightCache = newHeightCache;\n        this.sizesCache = newSizesCache;\n        return newHeight;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public assumeMaster(): void {\n        this._sizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n        this.syncService.setMaster(this, true);\n    }\n\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    return;\n                }\n                /* we need to reset the master dir if all rows are removed\n                (e.g. because of filtering); if all columns are hidden, rows are\n                still rendered empty, so we should not reset master */\n                if (!this.igxForOf.length &&\n                    this.igxForScrollOrientation === 'vertical') {\n                    this.syncService.resetMaster();\n                }\n                this.syncService.setMaster(this);\n                this._updateSizeCache(changes);\n                this._applyChanges();\n                this._updateScrollOffset();\n                this.onDataChanged.emit();\n            }\n        }\n    }\n\n    onScroll(event) {\n        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = event.target.scrollTop / maxRealScrollTop;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        requestAnimationFrame(() => {\n            this.recalcUpdateSizes();\n        });\n    }\n\n    onHScroll(scrollAmount) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!this.hScroll || !parseInt(this.hScroll.children[0].style.width, 10)) {\n            return;\n        }\n\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(scrollAmount);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            { $implicit: input, index: elemIndex }\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n    }\n\n    protected _updateViews(prevChunkSize) {\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex;\n            let endIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            } else {\n                const inScrollTop = this.igxForScrollOrientation === 'horizontal' ?\n                    this.hScroll.scrollLeft :\n                    this.vh.instance.elementRef.nativeElement.scrollTop;\n                startIndex = this.getIndexAt(\n                    inScrollTop,\n                    this.sizesCache,\n                    0\n                );\n                if (startIndex + this.state.chunkSize > this.igxForOf.length) {\n                    startIndex = this.igxForOf.length - this.state.chunkSize;\n                }\n                this.state.startIndex = startIndex;\n                endIndex = this.state.chunkSize + this.state.startIndex;\n            }\n\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n            if (this.igxForScrollOrientation === 'vertical') {\n                requestAnimationFrame(() => {\n                    this.recalcUpdateSizes();\n                });\n            }\n        }\n    }\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        this._updateViews(prevChunkSize);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        if (this.syncService.isMaster(this)) {\n            return super._calcMaxChunkSize();\n        }\n        return this.syncService.chunkSize(this.igxForScrollOrientation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxForOfDirective, IgxGridForOfDirective, DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    entryComponents: [DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    exports: [IgxForOfDirective, IgxGridForOfDirective],\n    imports: [IgxScrollInertiaModule, CommonModule]\n})\n\nexport class IgxForOfModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    forwardRef,\n    QueryList,\n    OnInit,\n    Input,\n    OnDestroy,\n    ViewChild,\n    ContentChild,\n    AfterViewInit,\n    Output,\n    EventEmitter\n} from '@angular/core';\nimport { IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownBase } from './drop-down.base';\nimport { DropDownActionKey, Navigate } from './drop-down.common';\nimport { IGX_DROPDOWN_BASE, IDropDownBase } from './drop-down.common';\nimport { ISelectionEventArgs } from './drop-down.common';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, isIE } from '../core/utils';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { Subject } from 'rxjs';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { OverlaySettings } from '../services';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { take } from 'rxjs/operators';\n\n\n/**\n * **Ignite UI for Angular DropDown** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop_down.html)\n *\n * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and\n * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down\n *\n * Example:\n * ```html\n * <igx-drop-down>\n *   <igx-drop-down-item *ngFor=\"let item of items\" disabled={{item.disabled}} isHeader={{item.header}}>\n *     {{ item.value }}\n *   </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Component({\n    selector: 'igx-drop-down',\n    templateUrl: './drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxDropDownComponent }]\n})\nexport class IgxDropDownComponent extends IgxDropDownBase implements IDropDownBase, OnInit, OnDestroy, AfterViewInit {\n    protected destroy$ = new Subject<boolean>();\n    protected _scrollPosition: number;\n\n    @ContentChild(IgxForOfDirective, { read: IgxForOfDirective })\n    protected virtDir: IgxForOfDirective<any>;\n\n    @ViewChild(IgxToggleDirective)\n    protected toggleDirective: IgxToggleDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(forwardRef(() => IgxDropDownItemComponent), { descendants: true })\n    public children: QueryList<IgxDropDownItemBase>;\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Gets/sets whether items take focus. Disabled by default.\n     * When enabled, drop down items gain tab index and are focused when active -\n     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.\n     *\n     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive\n     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.\n     *\n     * ```typescript\n     * // get\n     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public allowItemsFocus = false;\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBase {\n        if (this.virtDir) {\n            return this._focusedItem && this._focusedItem.index !== -1 ?\n            (this.children.find(e => e.index === this._focusedItem.index) || null) :\n            null;\n        }\n        return this._focusedItem;\n    }\n\n    public set focusedItem(value: IgxDropDownItemBase) {\n        if (!value) {\n            this.selection.clear(`${this.id}-active`);\n            this._focusedItem = null;\n            return;\n        }\n        this._focusedItem = value;\n        if (this.virtDir) {\n            this._focusedItem = {\n                value: value.value,\n                index: value.index\n            } as IgxDropDownItemBase;\n        }\n        this.selection.set(`${this.id}-active`, new Set([this._focusedItem]));\n    }\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n    set id(value: string) {\n        this.toggleDirective.id = value;\n        this.selection.set(value, this.selection.get(this.id));\n        this.selection.clear(this.id);\n        this.selection.set(value, this.selection.get(`${this.id}-active`));\n        this.selection.clear(`${this.id}-active`);\n        this._id = value;\n    }\n\n    /** Id of the internal listbox of the drop down */\n    public get listId() {\n        return this.id + '-list';\n    }\n\n    /**\n     * Get currently selected item\n     *\n     * ```typescript\n     * let currentItem = this.dropdown.selectedItem;\n     * ```\n     */\n    public get selectedItem(): IgxDropDownItemBase {\n        const selectedItem = this.selection.first_item(this.id);\n        if (selectedItem) {\n            return selectedItem;\n        }\n        return null;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     *\n     * ```typescript\n     * let isCollapsed = this.dropdown.collapsed;\n     * ```\n     */\n    public get collapsed(): boolean {\n        return this.toggleDirective.collapsed;\n    }\n\n    protected get scrollContainer() {\n        return this.toggleDirective.element;\n    }\n\n    protected get collectionLength() {\n        if (this.virtDir) {\n            return this.virtDir.totalItemCount || this.virtDir.igxForOf.length;\n        }\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService) {\n        super(elementRef, cdr);\n    }\n\n    /**\n     * Opens the dropdown\n     *\n     * ```typescript\n     * this.dropdown.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        this.toggleDirective.open(overlaySettings);\n        this.updateScrollPosition();\n    }\n\n    /**\n     * Closes the dropdown\n     *\n     * ```typescript\n     * this.dropdown.close();\n     * ```\n     */\n    public close() {\n        this.toggleDirective.close();\n    }\n\n    /**\n     * Toggles the dropdown\n     *\n     * ```typescript\n     * this.dropdown.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        if (this.collapsed || this.toggleDirective.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * Select an item by index\n     * @param index of the item to select; If the drop down uses *igxFor, pass the index in data\n     */\n    public setSelectedItem(index: number) {\n        if (index < 0 || index >= this.items.length) {\n            return;\n        }\n        let newSelection: IgxDropDownItemBase;\n        if (this.virtDir) {\n            newSelection = {\n                value: this.virtDir.igxForOf[index],\n                index\n            } as IgxDropDownItemBase;\n        } else {\n            newSelection = this.items[index];\n        }\n        this.selectItem(newSelection);\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * If the data in the drop-down is virtualized, pass the index of the item in the virtualized data.\n     * @param newIndex number\n     */\n    public navigateItem(index: number) {\n        if (this.virtDir) {\n            if (index === -1 || index >= this.collectionLength) {\n                return;\n            }\n            const direction = index > (this.focusedItem ? this.focusedItem.index : -1) ? Navigate.Down : Navigate.Up;\n            const subRequired = this.isIndexOutOfBounds(index, direction);\n            this.focusedItem = {\n                value: this.virtDir.igxForOf[index],\n                index: index\n            } as IgxDropDownItemBase;\n            if (subRequired) {\n                this.virtDir.scrollTo(index);\n            }\n            if (subRequired) {\n                this.virtDir.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    this.skipHeader(direction);\n                });\n            } else {\n                this.skipHeader(direction);\n            }\n        } else {\n            super.navigateItem(index);\n        }\n        if (this.allowItemsFocus && this.focusedItem) {\n            this.focusedItem.element.nativeElement.focus();\n            this.cdr.markForCheck();\n        }\n    }\n\n    private isIndexOutOfBounds(index: number, direction: Navigate) {\n        const virtState = this.virtDir.state;\n        const currentPosition = this.virtDir.getVerticalScroll().scrollTop;\n        const itemPosition = this.virtDir.getScrollForIndex(index, direction === Navigate.Down);\n        const indexOutOfChunk = index < virtState.startIndex || index > virtState.chunkSize + virtState.startIndex;\n        const scrollNeeded = direction === Navigate.Down ? currentPosition < itemPosition : currentPosition > itemPosition;\n        const subRequired = indexOutOfChunk || scrollNeeded;\n        return subRequired;\n    }\n\n    protected skipHeader(direction: Navigate) {\n        if (!this.focusedItem) {\n            return;\n        }\n        if (this.focusedItem.isHeader || this.focusedItem.disabled) {\n            if (direction === Navigate.Up) {\n                this.navigatePrev();\n            } else {\n                this.navigateNext();\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    updateScrollPosition() {\n        if (!this.virtDir) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.virtDir.scrollTo(0);\n            return;\n        }\n        let targetScroll = this.virtDir.getScrollForIndex(this.selectedItem.index);\n        const itemsInView = this.virtDir.igxForContainerSize / this.virtDir.igxForItemSize;\n        targetScroll -= (itemsInView / 2 - 1) * this.virtDir.igxForItemSize;\n        this.virtDir.getVerticalScroll().scrollTop = targetScroll;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpening(e: CancelableEventArgs) {\n        this.onOpening.emit(e);\n        if (e.cancel) {\n            return;\n        }\n        if (!this.virtDir && this.selectedItem) {\n            this.scrollToItem(this.selectedItem);\n        }\n        if (this.virtDir) {\n            this.virtDir.getVerticalScroll().scrollTop = this._scrollPosition;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        if (this.selectedItem) {\n            this.focusedItem = this.selectedItem;\n            this._focusedItem.focused = true;\n        } else if (this.allowItemsFocus) {\n            this.navigateFirst();\n        }\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosing(e: CancelableBrowserEventArgs) {\n        this.onClosing.emit(e);\n        if (this.virtDir) {\n            this._scrollPosition = this.virtDir.getVerticalScroll().scrollTop;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosed() {\n        if (this._focusedItem) {\n            this._focusedItem.focused = false;\n        }\n        this.onClosed.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.selection.clear(this.id);\n        this.selection.clear(`${this.id}-active`);\n    }\n\n    protected scrollToItem(item: IgxDropDownItemBase) {\n        const itemPosition = this.calculateScrollPosition(item);\n\n        //  in IE11 setting sctrollTop is somehow slow and forces dropdown\n        //  to appear on screen before animation start. As a result dropdown\n        //  flickers badly. This is why we set scrollTop just a little later\n        //  allowing animation to start and prevent dropdown flickering\n        if (isIE()) {\n            setTimeout(() => {\n                this.scrollContainer.scrollTop = (itemPosition);\n            }, 1);\n        } else {\n            this.scrollContainer.scrollTop = (itemPosition);\n        }\n    }\n\n    /** @hidden @internal */\n    public calculateScrollPosition(item: IgxDropDownItemBase): number {\n        if (!item) {\n            return 0;\n        }\n\n        const elementRect = item.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        const scrollDelta = parentRect.top - elementRect.top;\n        let scrollPosition = this.scrollContainer.scrollTop - scrollDelta;\n\n        const dropDownHeight = this.scrollContainer.clientHeight;\n        scrollPosition -= dropDownHeight / 2;\n        scrollPosition += item.elementHeight / 2;\n\n        return Math.floor(scrollPosition);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    ngOnInit() {\n        this.toggleDirective.id = this.id;\n    }\n\n    ngAfterViewInit() {\n        if (this.virtDir) {\n            this.virtDir.igxForItemSize = 32;\n        }\n    }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        super.onItemActionKey(key, event);\n        this.close();\n    }\n\n    /**\n     * Virtual scroll implementation\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        if (this.virtDir) {\n            this.navigateItem(0);\n        } else {\n            super.navigateFirst();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        if (this.virtDir) {\n            this.navigateItem(this.virtDir.totalItemCount ? this.virtDir.totalItemCount - 1 : this.virtDir.igxForOf.length - 1);\n        } else {\n            super.navigateLast();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index + 1 : 0);\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index - 1 : 0);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n    /**\n     * Handles the `onSelection` emit and the drop down toggle when selection changes\n     * @hidden\n     * @internal\n     * @param newSelection\n     * @param event\n     */\n    public selectItem(newSelection?: IgxDropDownItemBase, event?: Event) {\n        const oldSelection = this.selectedItem;\n        if (!newSelection) {\n            newSelection = this.focusedItem;\n        }\n        if (newSelection === null) {\n            return;\n        }\n        if (newSelection instanceof IgxDropDownItemBase && newSelection.isHeader) {\n            return;\n        }\n        if (this.virtDir) {\n            newSelection = {\n                value: newSelection.value,\n                index: newSelection.index\n            } as IgxDropDownItemBase;\n        }\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (!args.cancel) {\n            this.selection.set(this.id, new Set([newSelection]));\n            if (!this.virtDir) {\n                if (oldSelection) {\n                    oldSelection.selected = false;\n                }\n                if (newSelection) {\n                    newSelection.selected = true;\n                }\n            }\n            if (event) {\n                this.toggleDirective.close();\n            }\n        }\n    }\n}\n\n","import { Directive, Optional, Self, Input, HostListener, Inject } from '@angular/core';\nimport { IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { IDropDownNavigationDirective } from './drop-down.common';\nimport { IgxDropDownBase } from './drop-down.base';\nimport { DropDownActionKey } from './drop-down.common';\n\n/**\n * Navigation Directive that handles keyboard events on its host and controls a targeted IgxDropDownBase component\n */\n@Directive({\n    selector: '[igxDropDownItemNavigation]'\n})\nexport class IgxDropDownItemNavigationDirective implements IDropDownNavigationDirective {\n\n    protected _target: IgxDropDownBase = null;\n\n    constructor(@Self() @Optional() @Inject(IGX_DROPDOWN_BASE) public dropdown: IgxDropDownBase) { }\n\n    /**\n     * Gets the target of the navigation directive;\n     *\n     * ```typescript\n     * // Get\n     * export class MyComponent {\n     *  ...\n     *  @ContentChild(IgxDropDownNavigationDirective)\n     *  navDirective: IgxDropDownNavigationDirective = null\n     *  ...\n     *  const navTarget: IgxDropDownBase = navDirective.navTarget\n     * }\n     * ```\n     */\n    get target(): IgxDropDownBase {\n        return this._target;\n    }\n\n    /**\n     * Sets the target of the navigation directive;\n     * If no valid target is passed, it falls back to the drop down context\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxDropDownItemNavigation]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxDropDownItemNavigation')\n    set target(target: IgxDropDownBase) {\n        this._target = target ? target : this.dropdown;\n    }\n\n    /**\n     * Captures keydown events and calls the appropriate handlers on the target component\n     */\n    @HostListener('keydown', ['$event'])\n    handleKeyDown(event: KeyboardEvent) {\n        if (event) {\n            const key = event.key.toLowerCase();\n            if (!this.target.collapsed) { // If dropdown is opened\n                const navKeys = ['esc', 'escape', 'enter', 'space', 'spacebar', ' ',\n            'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];\n                if (navKeys.indexOf(key) === -1) { // If key has appropriate function in DD\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n            } else { // If dropdown is closed, do nothing\n                return;\n            }\n            switch (key) {\n                case 'esc':\n                case 'escape':\n                    this.target.onItemActionKey(DropDownActionKey.ESCAPE, event);\n                    break;\n                case 'enter':\n                    this.target.onItemActionKey(DropDownActionKey.ENTER, event);\n                    break;\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                    this.target.onItemActionKey(DropDownActionKey.SPACE, event);\n                    break;\n                case 'arrowup':\n                case 'up':\n                    this.onArrowUpKeyDown();\n                    break;\n                case 'arrowdown':\n                case 'down':\n                    this.onArrowDownKeyDown();\n                    break;\n                case 'home':\n                    this.onHomeKeyDown();\n                    break;\n                case 'end':\n                    this.onEndKeyDown();\n                    break;\n                default:\n                    return;\n            }\n        }\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowDownKeyDown() {\n        this.target.navigateNext();\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowUpKeyDown() {\n        this.target.navigatePrev();\n    }\n\n    /**\n     * Navigates to target's last item\n     */\n    onEndKeyDown() {\n        this.target.navigateLast();\n    }\n\n    /**\n     * Navigates to target's first item\n     */\n    onHomeKeyDown() {\n        this.target.navigateFirst();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxDropDownComponent } from './drop-down.component';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownItemNavigationDirective } from './drop-down-navigation.directive';\nimport { CommonModule } from '@angular/common';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nexport * from './drop-down.component';\nexport * from './drop-down-item.component';\nexport { ISelectionEventArgs, IDropDownNavigationDirective,  } from './drop-down.common';\nexport * from './drop-down-navigation.directive';\nexport * from './drop-down.base';\nexport * from './drop-down-item.base';\nexport * from './drop-down-group.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective],\n    exports: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective],\n    imports: [CommonModule, IgxToggleModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxDropDownModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nenum IgxHintPosition {\n    START,\n    END\n}\n\n@Directive({\n    selector: 'igx-hint,[igxHint]'\n})\nexport class IgxHintDirective implements OnInit {\n    private _position: IgxHintPosition = IgxHintPosition.START;\n    /**\n     * Sets/gets whether the hint position is at the start.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionStart = true;\n     * ```\n     * ```typescript\n     * let isHintPositionStart = this.igxHint.isPositionStart;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--start')\n    public isPositionStart = false;\n    /**\n     * Sets/gets whether the hint position is at the end.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionEnd = true;\n     * ```\n     * ```typescript\n     * let isHintPositionEnd = this.igxHint.isPositionEnd;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--end')\n    public isPositionEnd = false;\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     * Sets the position of the hint.\n     * ```html\n     * <igx-input-group>\n     *  <input igxInput type=\"text\"/>\n     *  <igx-hint #hint [position]=\"'start'\">IgxHint displayed at the start</igx-hint>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @Input('position')\n    set position(value: string) {\n        const position: IgxHintPosition = (IgxHintPosition as any)[value.toUpperCase()];\n        if (position !== undefined) {\n            this._position = position;\n            this._applyPosition(this._position);\n        }\n    }\n    /**\n     * Gets the position of the hint.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * let hintPosition =  this.igxHint.position;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    get position() {\n        return this._position.toString();\n    }\n    /**\n     *@hidden\n     */\n    ngOnInit() {\n        this._applyPosition(this._position);\n    }\n\n    private _applyPosition(position: IgxHintPosition) {\n        this.isPositionStart = this.isPositionEnd = false;\n        switch (position) {\n            case IgxHintPosition.START:\n                this.isPositionStart = true;\n                break;\n            case IgxHintPosition.END:\n                this.isPositionEnd = true;\n                break;\n            default: break;\n        }\n    }\n}\n","/** @hidden */\nexport abstract class IgxInputGroupBase {\n    disabled: boolean;\n    isFocused: boolean;\n    isRequired: boolean;\n    hasPlaceholder: boolean;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { AbstractControl, FormControlName, NgControl, NgModel } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { IgxInputGroupBase } from '../../input-group/input-group.common';\n\nconst nativeValidationAttributes = ['required', 'pattern', 'minlength', 'maxlength', 'min', 'max', 'step'];\n\nexport enum IgxInputState {\n    INITIAL,\n    VALID,\n    INVALID\n}\n\n@Directive({\n    selector: '[igxInput]',\n    exportAs: 'igxInput'\n})\nexport class IgxInputDirective implements AfterViewInit, OnDestroy {\n    private _valid = IgxInputState.INITIAL;\n    private _statusChanges$: Subscription;\n\n    constructor(\n        public inputGroup: IgxInputGroupBase,\n        @Optional() @Self() @Inject(NgModel) protected ngModel: NgModel,\n        @Optional() @Self() @Inject(FormControlName) protected formControl: FormControlName,\n        protected element: ElementRef,\n        protected cdr: ChangeDetectorRef) { }\n\n    private get ngControl(): NgControl {\n        return this.ngModel ? this.ngModel : this.formControl;\n    }\n    /**\n     * Sets the `value` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [value]=\"'IgxInput Value'\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input('value')\n    set value(value: any) {\n        this.nativeElement.value = value;\n        this.checkValidity();\n    }\n    /**\n     * Gets the `value` propery.\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let inputValue = this.igxInput.value;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    get value() {\n        return this.nativeElement.value;\n    }\n    /**\n     * Sets the `disabled` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [disabled]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set disabled(value: boolean) {\n        this.nativeElement.disabled = value;\n        this.inputGroup.disabled = value;\n    }\n    /**\n     * Gets the `disabled` property\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let isDisabled = this.igxInput.disabled;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get disabled() {\n        return this.nativeElement.hasAttribute('disabled');\n    }\n\n    /**\n     * Sets the `required` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [required]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set required(value: boolean) {\n        if (typeof value === 'boolean') {\n            this.nativeElement.required = this.inputGroup.isRequired = value;\n\n            if (value && !this.nativeElement.checkValidity()) {\n                this._valid = IgxInputState.INVALID;\n            } else {\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * Gets whether the igxInput is required.\n     * ```typescript\n     * let isRequired = this.igxInput.required;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get required() {\n        return this.nativeElement.hasAttribute('required');\n    }\n\n    /**\n     * Sets/gets whether the `\"igx-input-group__input\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isInput = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isInput;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__input')\n    public isInput = false;\n    /**\n     * Sets/gets whether the `\"class.igx-input-group__textarea\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isTextArea = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isTextArea;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__textarea')\n    public isTextArea = false;\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.inputGroup.isFocused = true;\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event'])\n    public onBlur(event) {\n        this.inputGroup.isFocused = false;\n        this._valid = IgxInputState.INITIAL;\n        if (this.ngControl) {\n            if (!this.ngControl.valid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        } else if (this._hasValidators() && !this.nativeElement.checkValidity()) {\n            this._valid = IgxInputState.INVALID;\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('input')\n    public onInput() {\n        this.checkValidity();\n    }\n    /**\n     *@hidden\n     */\n    ngAfterViewInit() {\n        this.inputGroup.hasPlaceholder = this.nativeElement.hasAttribute('placeholder');\n        this.inputGroup.disabled = this.inputGroup.disabled || this.nativeElement.hasAttribute('disabled');\n        this.inputGroup.isRequired = this.nativeElement.hasAttribute('required');\n\n        // Make sure we do not invalidate the input on init\n        if (!this.ngControl) {\n            this._valid = IgxInputState.INITIAL;\n        }\n        // Also check the control's validators for required\n        if (!this.inputGroup.isRequired && this.ngControl && this.ngControl.control.validator) {\n            const validation = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = validation && validation.required;\n        }\n\n\n        const elTag = this.nativeElement.tagName.toLowerCase();\n        if (elTag === 'textarea') {\n            this.isTextArea = true;\n        } else {\n            this.isInput = true;\n        }\n\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n\n        this.cdr.detectChanges();\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n    /**\n     * Sets a focus on the igxInput.\n     * ```typescript\n     * this.igxInput.focus();\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public focus() {\n        this.nativeElement.focus();\n    }\n    /**\n     * Gets the `nativeElement` of the igxInput.\n     * ```typescript\n     * let igxInputNativeElement = this.igxInput.nativeElement;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    protected onStatusChanged() {\n        if (this.ngControl.control.validator || this.ngControl.control.asyncValidator) {\n            if (this.ngControl.control.touched || this.ngControl.control.dirty) {\n                if (this.inputGroup.isFocused) {\n                    // the user is still typing in the control\n                    this._valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n                } else {\n                    // the user had touched the control previosly but now the value is changing due to changes in the form\n                    this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n                }\n            } else if (this._valid !== IgxInputState.INITIAL) {\n                this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            } else if (this._valid === IgxInputState.INITIAL && this.ngControl.value !== undefined && this.ngControl.invalid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        }\n    }\n    /**\n     * Gets whether the igxInput has a placeholder.\n     * ```typescript\n     * let hasPlaceholder = this.igxInput.hasPlaceholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get hasPlaceholder() {\n        return this.nativeElement.hasAttribute('placeholder');\n    }\n    /**\n     * Gets the placeholder element of the igxInput.\n     * ```typescript\n     * let igxInputPlaceholder = this.igxInput.placeholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get placeholder() {\n        return this.nativeElement.placeholder;\n    }\n\n    private _hasValidators(): boolean {\n        for (const nativeValidationAttribute of nativeValidationAttributes) {\n            if (this.nativeElement.hasAttribute(nativeValidationAttribute)) {\n                return true;\n            }\n        }\n\n        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);\n    }\n    /**\n     * Gets whether the igxInput is focused.\n     * ```typescript\n     * let isFocused = this.igxInput.focused;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get focused() {\n        return this.inputGroup.isFocused;\n    }\n    /**\n     * Gets the state of the igxInput.\n     * ```typescript\n     * let igxInputState = this.igxInput.valid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get valid(): IgxInputState {\n        return this._valid;\n    }\n\n    /**\n     * Gets whether the igxInput is valid.\n     * ```typescript\n     * let valid = this.igxInput.isValid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get isValid(): boolean {\n        return this.valid !== IgxInputState.INVALID;\n    }\n\n    /**\n     * Sets the state of the igxInput.\n     * ```typescript\n     * this.igxInput.valid = IgxInputState.INVALID;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public set valid(value: IgxInputState) {\n        this._valid = value;\n    }\n\n    private checkValidity() {\n        if (!this.ngControl && this._hasValidators()) {\n            this._valid = this.nativeElement.checkValidity() ? IgxInputState.VALID : IgxInputState.INVALID;\n        }\n    }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxLabel]'\n})\nexport class IgxLabelDirective {\n    @HostBinding('class.igx-input-group__label')\n    public defaultClass = true;\n\n/**\n * @hidden\n */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-label-${NEXT_ID++}`;\n}\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-prefix,[igxPrefix]'\n})\nexport class IgxPrefixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxPrefixDirective],\n    exports: [IgxPrefixDirective]\n})\nexport class IgxPrefixModule { }\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-suffix,[igxSuffix]'\n})\nexport class IgxSuffixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSuffixDirective],\n    exports: [IgxSuffixDirective]\n})\nexport class IgxSuffixModule { }\n","import { InjectionToken, Input, Output, EventEmitter, DoCheck, OnInit } from '@angular/core';\n\n\n/**\n * Defines the posible values of the components' display density.\n */\nexport enum DisplayDensity {\n    comfortable = 'comfortable',\n    cosy = 'cosy',\n    compact = 'compact'\n}\n\n/**\n * Describes the object used to configure the DisplayDensity in Angular DI.\n */\nexport interface IDisplayDensityOptions {\n    displayDensity: DisplayDensity;\n}\n\nexport interface IDensityChangedEventArgs {\n    oldDensity: DisplayDensity;\n    newDensity: DisplayDensity;\n}\n\n/**\n * Defines the DisplayDensity DI token.\n */\nexport const DisplayDensityToken = new InjectionToken<IDisplayDensityOptions>('DisplayDensity');\n\n/**\n * Base class containing all logic required for implementing DisplayDensity.\n */\nexport class DisplayDensityBase implements DoCheck, OnInit {\n    protected _displayDensity: DisplayDensity;\n\n     /**\n     * @hidden\n     */\n    public initialDensity: DisplayDensity;\n\n    /**\n     * Returns the theme of the component.\n     * The default theme is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let componentTheme = this.component.displayDensity;\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity ||\n            ((this.displayDensityOptions && this.displayDensityOptions.displayDensity) || DisplayDensity.comfortable);\n    }\n\n    /**\n     * Sets the theme of the component.\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        const currentDisplayDensity = this._displayDensity;\n        this._displayDensity = val as DisplayDensity;\n\n        if (currentDisplayDensity !== this._displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: currentDisplayDensity,\n                newDensity: this._displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n        }\n    }\n\n    @Output()\n    public onDensityChanged = new EventEmitter<IDensityChangedEventArgs>();\n\n    protected oldDisplayDensityOptions: IDisplayDensityOptions = { displayDensity: DisplayDensity.comfortable };\n\n\n    constructor(protected displayDensityOptions: IDisplayDensityOptions) {\n        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this.initialDensity = this._displayDensity;\n    }\n\n    public ngDoCheck() {\n        if (!this._displayDensity && this.displayDensityOptions &&\n                this.oldDisplayDensityOptions.displayDensity !== this.displayDensityOptions.displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: this.oldDisplayDensityOptions.displayDensity,\n                newDensity: this.displayDensityOptions.displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);\n        }\n    }\n\n    /**\n     * Given a style class of a component/element returns the modified version of it based\n     * on the current display density.\n     */\n    protected getComponentDensityClass(baseStyleClass: string): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return `${baseStyleClass}--${DisplayDensity.cosy}`;\n            case DisplayDensity.compact:\n                return `${baseStyleClass}--${DisplayDensity.compact}`;\n            default:\n                return baseStyleClass;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    QueryList,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IgxHintDirective } from '../directives/hint/hint.directive';\nimport { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxPrefixDirective, IgxPrefixModule} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixDirective, IgxSuffixModule } from '../directives/suffix/suffix.directive';\nimport { DisplayDensity, IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport { IgxInputGroupBase } from './input-group.common';\n\nlet NEXT_ID = 0;\n\nenum IgxInputGroupType {\n    LINE,\n    BOX,\n    BORDER,\n    SEARCH\n}\n\n@Component({\n    selector: 'igx-input-group',\n    templateUrl: 'input-group.component.html',\n    providers: [{ provide: IgxInputGroupBase, useExisting: IgxInputGroupComponent }]\n})\nexport class IgxInputGroupComponent extends DisplayDensityBase implements IgxInputGroupBase {\n    private _type = IgxInputGroupType.LINE;\n    private _filled = false;\n    private _supressInputAutofocus = false;\n\n    /**\n     * An ElementRef property of the `IgxInputGroupComponent`.\n     */\n    public element: ElementRef;\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-input-group [id]=\"'igx-input-group-55'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-input-group-${NEXT_ID++}`;\n\n    /**\n     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.\n     * By default applied the class is applied.\n     *```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *this.inputGroup.defaultClass = false;\n     *```\n     *}\n     */\n    @HostBinding('class.igx-input-group')\n    public defaultClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--placeholder')\n    public hasPlaceholder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--required')\n    public isRequired = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--focused')\n    public isFocused = false;\n\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--box')\n    public isBox = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--border')\n    public isBorder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--search')\n    public isSearch = false;\n\n    /**\n     * An @Input property that disables the `IgxInputGroupComponent`.\n     * ```html\n     * <igx-input-group [disabled]=\"'true'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('class.igx-input-group--disabled')\n    @Input()\n    public disabled = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.input.valid === IgxInputState.VALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.input.valid === IgxInputState.INVALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--warning')\n    public hasWarning = false;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxHintDirective, { read: IgxHintDirective })\n    protected hints: QueryList<IgxHintDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective })\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this._supressInputAutofocus) {\n            this.input.focus();\n        }\n    }\n\n    /**\n     * An @Input property that sets how the input will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `line`.\n     * ```html\n     *<igx-input-group [type]=\"'search'\">\n     * ```\n     */\n    @Input('type')\n    set type(value: string) {\n        const type: IgxInputGroupType = (IgxInputGroupType as any)[value.toUpperCase()];\n        if (type !== undefined) {\n            this.isBox = this.isBorder = this.isSearch = false;\n            switch (type) {\n                case IgxInputGroupType.BOX:\n                    this.isBox = true;\n                    break;\n                case IgxInputGroupType.BORDER:\n                    this.isBorder = true;\n                    break;\n                case IgxInputGroupType.SEARCH:\n                    this.isSearch = true;\n                    break;\n                default: break;\n            }\n\n            this._type = type;\n        }\n    }\n\n    /**\n     * Returns whether the input element of the input group will be automatically focused on click.\n     * ```typescript\n     * let supressInputAutofocus = this.inputGroup.supressInputAutofocus;\n     * ```\n     */\n    @Input()\n    public get supressInputAutofocus(): boolean {\n        return this._supressInputAutofocus;\n    }\n\n    /**\n     * Sets whether the input element of the input group will be automatically focused on click.\n     * ```html\n     * <igx-input-group [supressInputAutofocus]=\"true\"></igx-input-group>\n     * ```\n     */\n    public set supressInputAutofocus(value: boolean) {\n        this._supressInputAutofocus = value;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--filled')\n    get isFilled() {\n        return this._filled || (this.input && this.input.value);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--cosy')\n    get isDisplayDensityCosy() {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--comfortable')\n    get isDisplayDensityComfortable() {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--compact')\n    get isDisplayDensityCompact() {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.\n     * Values are `line` - 0, `box` - 1, `border` - 2  and `search` - 3. The default is `line`.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputType = this.inputGroup.type;\n     *}\n     * ```\n     */\n    get type() {\n        return this._type.toString();\n    }\n\n    constructor(private _element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) private _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n        this.element = _element;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has hints.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputHints = this.inputGroup.hasHints;\n     *}\n     * ```\n     */\n    get hasHints() {\n        return this.hints.length > 0;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputBroder = this.inputGroup.hasBorder;\n     *}\n     * ```\n     */\n    get hasBorder() {\n        return this._type === IgxInputGroupType.LINE ||\n            this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is line.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeLine = this.inputGroup.isTypeLine;\n     *}\n     * ```\n     */\n    public get isTypeLine(): boolean {\n        return  this._type === IgxInputGroupType.LINE;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is box.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBox = this.inputGroup.isTypeBox;\n     *}\n     *```\n     */\n    get isTypeBox() {\n        return this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBorder = this.inputGroup.isTypeBorder;\n     *}\n     * ```\n     */\n    get isTypeBorder() {\n        return this._type === IgxInputGroupType.BORDER;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is search.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeSearch = this.inputGroup.isTypeSearch;\n     *}\n     * ```\n     */\n    get isTypeSearch() {\n        return  this._type === IgxInputGroupType.SEARCH;\n    }\n\n    get filled() {\n        return this._filled;\n    }\n\n    set filled(val) {\n        this._filled = val;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxInputGroupComponent, IgxHintDirective, IgxInputDirective, IgxLabelDirective],\n    exports: [IgxInputGroupComponent,  IgxHintDirective, IgxInputDirective, IgxLabelDirective, IgxPrefixDirective, IgxSuffixDirective],\n    imports: [CommonModule, IgxPrefixModule, IgxSuffixModule]\n})\nexport class IgxInputGroupModule { }\n","import {\n    Directive, Input, Self, Optional, Inject, HostBinding, Output, EventEmitter,\n    NgModule, ElementRef, HostListener, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NgModel, FormControlName } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { CancelableEventArgs } from '../../core/utils';\nimport { OverlaySettings, AbsoluteScrollStrategy, IScrollStrategy, IPositionStrategy, AutoPositionStrategy } from '../../services/index';\nimport { IgxDropDownModule, IgxDropDownComponent, ISelectionEventArgs, IgxDropDownItemNavigationDirective } from '../../drop-down/index';\nimport { IgxInputGroupComponent } from '../../input-group/index';\nimport { IgxOverlayOutletDirective } from '../toggle/toggle.directive';\n\n/**\n * Interface that encapsulates onItemSelection event arguments - new value and cancel selection.\n * @export\n */\nexport interface AutocompleteItemSelectionEventArgs extends CancelableEventArgs {\n    /**\n     * New value selected from the drop down\n     */\n    value: string;\n}\n\nexport interface AutocompleteOverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n}\n\n/**\n * **Ignite UI for Angular Autocomplete** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/autocomplete.html)\n *\n * The igxAutocomplete directive provides a way to enhance a text input\n * by showing a drop down of suggested options, provided by the developer.\n *\n * Example:\n * ```html\n * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" />\n * <igx-drop-down #townsPanel>\n *     <igx-drop-down-item *ngFor=\"let town of towns | startsWith:townSelected\" [value]=\"town\">\n *         {{town}}\n *     </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Directive({\n    selector: '[igxAutocomplete]'\n})\nexport class IgxAutocompleteDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    constructor(@Self() @Optional() @Inject(NgModel) protected ngModel: NgModel,\n                @Self() @Optional() @Inject(FormControlName) protected formControl: FormControlName,\n                @Optional() protected group: IgxInputGroupComponent,\n                protected elementRef: ElementRef,\n                protected cdr: ChangeDetectorRef) {\n        super(null);\n    }\n\n    private defaultSettings: OverlaySettings = {\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new AutoPositionStrategy({ target: this.parentElement }),\n        excludePositionTarget: true\n    };\n\n    protected id: string;\n    protected dropDownOpened$ = new Subject<boolean>();\n    protected get model() {\n        return this.ngModel || this.formControl;\n    }\n\n    /** @hidden @internal */\n    get nativeElement(): HTMLInputElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /** @hidden @internal */\n    get parentElement(): HTMLElement {\n        return this.group ? this.group.element.nativeElement : this.nativeElement;\n    }\n\n    private get settings(): OverlaySettings {\n        const settings = Object.assign({}, this.defaultSettings, this.autocompleteSettings);\n        if (!settings.positionStrategy.settings.target) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.parentElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n        return settings;\n    }\n\n    /**\n     * Sets the target of the autocomplete directive\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxAutocomplete]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxAutocomplete')\n    public target: IgxDropDownComponent;\n\n    /**\n     * Enables/disables autocomplete component\n     *\n     * ```typescript\n     * // get\n     * let disabled = this.autocomplete.disabled;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteDisabled]=\"disabled\"/>\n     * ```\n     * ```typescript\n     * // set\n     * public disabled = true;\n     * ```\n     */\n    @Input('igxAutocompleteDisabled')\n    public disabled = false;\n\n    /**\n     * Provide overlay settings for the autocomplete drop down\n     *\n     * ```typescript\n     * // get\n     * let settings = this.autocomplete.autocompleteSettings;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteSettings]=\"settings\"/>\n     * ```\n     * ```typescript\n     * // set\n     * this.settings = {\n     *  positionStrategy: new ConnectedPositioningStrategy({\n     *      closeAnimation: null,\n     *      openAnimation: null\n     *  })\n     * };\n     * ```\n     */\n    @Input('igxAutocompleteSettings')\n    autocompleteSettings: AutocompleteOverlaySettings;\n\n    /**\n     * Emitted after item from the drop down is selected\n     *\n     * ```html\n     * <input igxInput [igxAutocomplete]=\"townsPanel\" (onItemSelected)='itemSelected($event)' />\n     * ```\n     */\n    @Output()\n    onItemSelected = new EventEmitter<AutocompleteItemSelectionEventArgs>();\n\n    /** @hidden @internal */\n    @HostBinding('attr.autocomplete')\n    public autofill = 'off';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.role')\n    public role = 'combobox';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded() {\n        return !this.collapsed;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.target.listId;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-activedescendant')\n    public get ariaActiveDescendant() {\n        return !this.target.collapsed && this.target.focusedItem ? this.target.focusedItem.id : null;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-autocomplete')\n    public get ariaAutocomplete() {\n        return 'list';\n    }\n\n    /** @hidden  @internal */\n    @HostListener('input', ['$event'])\n    onInput() {\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    @HostListener('keydown.ArrowUp', ['$event'])\n    @HostListener('keydown.Alt.ArrowUp', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.Tab', ['$event'])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    onTab() {\n        this.close();\n    }\n\n    /** @hidden  @internal */\n    handleKeyDown(event) {\n        if (!this.collapsed) {\n            switch (event.key.toLowerCase()) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'home':\n                case 'end':\n                    return;\n                default:\n                    super.handleKeyDown(event);\n            }\n        }\n    }\n\n    /** @hidden  @internal */\n    onArrowDownKeyDown() {\n        super.onArrowDownKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onArrowUpKeyDown() {\n        super.onArrowUpKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onEndKeyDown() {\n        super.onEndKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onHomeKeyDown() {\n        super.onHomeKeyDown();\n    }\n\n    /**\n     * Closes autocomplete drop down\n     */\n    public close() {\n        if (this.collapsed) {\n            return;\n        }\n        this.target.close();\n        this.dropDownOpened$.next();\n    }\n\n    /**\n     * Opens autocomplete drop down\n     */\n    public open() {\n        if (this.disabled || !this.collapsed) {\n            return;\n        }\n        this.target.width = this.parentElement.clientWidth + 'px';\n        this.target.open(this.settings);\n        this.target.onSelection.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.select);\n        this.target.onOpened.pipe(first()).subscribe(this.highlightFirstItem);\n        this.target.children.changes.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.highlightFirstItem);\n    }\n\n    private get collapsed(): boolean {\n        return this.target ? this.target.collapsed : true;\n    }\n\n    private select = (value: ISelectionEventArgs) => {\n        if (!value.newSelection) {\n            return;\n        }\n        value.cancel = true; // Disable selection in the drop down, because in autocomplete we do not save selection.\n        const newValue = value.newSelection.value;\n        const args: AutocompleteItemSelectionEventArgs = { value: newValue, cancel: false };\n        this.onItemSelected.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        this.close();\n        this.nativeElement.focus();\n\n        // Update model after the input is re-focused, in order to have proper valid styling.\n        // Otherwise when item is selected using mouse (and input is blurred), then valid style will be removed.\n        this.model ? this.model.control.setValue(newValue) : this.nativeElement.value = newValue;\n    }\n\n    private highlightFirstItem = () => {\n        if (this.target.focusedItem) {\n            this.target.focusedItem.focused = false;\n            this.target.focusedItem = null;\n        }\n        this.target.navigateFirst();\n        this.cdr.detectChanges();\n    }\n\n    /** @hidden */\n    public ngOnDestroy() {\n        this.dropDownOpened$.complete();\n    }\n}\n\n/** @hidden */\n@NgModule({\n    imports: [IgxDropDownModule, CommonModule],\n    declarations: [IgxAutocompleteDirective],\n    exports: [IgxAutocompleteDirective]\n})\nexport class IgxAutocompleteModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    NgModule,\n    Renderer2,\n    HostListener,\n    Optional,\n    Inject\n} from '@angular/core';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions, DisplayDensity } from '../../core/density';\n\n@Directive({\n    selector: '[igxButton]'\n})\nexport class IgxButtonDirective extends DisplayDensityBase {\n    /**\n     *@hidden\n     */\n    private _type = 'flat';\n    /**\n     *@hidden\n     */\n    private _cssClass = 'igx-button';\n    /**\n     *@hidden\n     */\n    private _color: string;\n    /**\n     *@hidden\n     */\n    private _label: string;\n    /**\n     *@hidden\n     */\n    private _backgroundColor: string;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /**\n     * Returns the underlying DOM element\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Called when the button is clicked\n     */\n    @Output()\n    public buttonClick = new EventEmitter<any>();\n\n    /**\n     * Sets/gets the `role` attribute.\n     * ```typescript\n     * this.button.role = 'navbutton';\n     * ```\n     * ```typescript\n     * let buttonRole =  this.button.role;\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @HostBinding('attr.role') public role = 'button';\n    /**\n     * Sets the type of the button.\n     * ```html\n     * <button  igxButton= \"icon\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButton') set type(value: string) {\n        this._type = value || this._type;\n        this._renderer.addClass(this.nativeElement, `${this._cssClass}--${this._type}`);\n    }\n    /**\n     * Sets the button text color.\n     * ```html\n     * <button igxButton=\"gradient\" igxButtonColor=\"blue\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonColor') set color(value: string) {\n        this._color = value || this.nativeElement.style.color;\n        this._renderer.setStyle(this.nativeElement, 'color', this._color);\n    }\n    /**\n     * Sets the background color of the button.\n     * ```html\n     * <button igxButton=\"raised\" igxButtonBackground=\"red\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonBackground') set background(value: string) {\n        this._backgroundColor = value || this._backgroundColor;\n        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);\n    }\n    /**\n     * Sets the `aria-label` attribute.\n     * ```html\n     * <button igxButton= \"flat\" igxLabel=\"Label\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxLabel') set label(value: string) {\n        this._label = value || this._label;\n        this._renderer.setAttribute(this.nativeElement, `aria-label`, this._label);\n    }\n    /**\n     * Enables/disables the button.\n     *  ```html\n     * <button igxButton= \"fab\" [disabled]=\"true\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() set disabled(val) {\n        val = !!val;\n        if (val) {\n            this._renderer.addClass(this.nativeElement, `${this._cssClass}--disabled`);\n        } else {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClass}--disabled`);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--cosy')\n    public get cssClassCosy(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--compact')\n    public get cssClassCompact(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--fab-cosy')\n    public get cssClassCosyFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--fab-compact')\n    public get cssClassCompactFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * Gets or sets whether the button is selected.\n     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.\n     * ```html\n     * <button igxButton=\"flat\" [selected]=\"button.selected\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() public selected = false;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click',  ['$event'])\n    public onClick(ev) {\n        this.buttonClick.emit(ev);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonDirective],\n    exports: [IgxButtonDirective]\n})\nexport class IgxButtonModule { }\n","import { Directive, HostBinding, NgModule, Input } from '@angular/core';\n\nexport enum IgxDividerType {\n    DEFAULT = 'default',\n    DASHED = 'dashed'\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-divider'\n})\nexport class IgxDividerDirective {\n    /**\n     * Sets/gets the `id` of the divider.\n     * If not set, `id` will have value `\"igx-divider-0\"`;\n     * ```html\n     * <igx-divider id=\"my-divider\"></igx-divider>\n     * ```\n     * ```typescript\n     * let dividerId =  this.divider.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-divider-${NEXT_ID++}`;\n\n\n    /**\n     * An @Input property that sets the value of the `inset` attribute.\n     * If not provided it will be set to `'0'`.\n     * ```html\n     * <igx-divider inset=\"16px\"></igx-divider>\n     * ```\n     */\n    @Input('inset')\n    private _inset = '0';\n\n    /**\n     * An @Input property that sets the value of `role` attribute.\n     * If not the default value of `separator` will be used.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'separator';\n\n    /**\n     * Sets the type of the divider. The default value\n     * is `default`. The divider can also be `dashed`;\n     * ```html\n     * <igx-divider type=\"dashed\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider')\n    @Input()\n    public type: IgxDividerType | string = IgxDividerType.DEFAULT;\n\n    @HostBinding('class.igx-divider--dashed')\n    get isDashed() {\n        return this.type === IgxDividerType.DASHED;\n    }\n\n    /**\n     * An @Input that sets the `middle` attribute of the divider.\n     * If set to `true` and an `inset` value has been provided,\n     * the divider will start shrinking from both ends.\n     * ```html\n     * <igx-divider [middle]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--inset')\n    @Input()\n    public middle = false;\n\n    /**\n     * A getter that returns `true` if the type of the divider is `default`;\n     * ```typescript\n     * const isDefault = this.divider.isDefault;\n     * ```\n     */\n    get isDefault() {\n        return this.type === IgxDividerType.DEFAULT;\n    }\n\n    /**\n     * An @Input that sets the vertical attribute of the divider.\n     * ```html\n     * <igx-divider [vertical]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets the inset of the divider from the side(s).\n     * If the divider attribute `middle` is set to `true`,\n     * it will inset the divider on both sides.\n     * ```typescript\n     * this.divider.inset = '32px';\n     * ```\n     */\n    @HostBinding('style.margin')\n    set inset(value: string) {\n        this._inset = value;\n    }\n\n    /**\n     * Gets the current divider inset in terms of\n     * margin representation as applied to the divider.\n     * ```typescript\n     * const inset = this.divider.inset;\n     * ```\n     */\n    get inset() {\n        const baseMargin = '0';\n\n        if (this.middle) {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin}`;\n            }\n            return `${baseMargin} ${this._inset}`;\n        } else {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin} 0 ${baseMargin}`;\n            }\n            return `${baseMargin} 0 ${baseMargin} ${this._inset}`;\n        }\n    }\n}\n\n@NgModule({\n    declarations: [IgxDividerDirective],\n    exports: [IgxDividerDirective]\n})\nexport class IgxDividerModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    ChangeDetectorRef\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';\nimport { takeUntil, throttle } from 'rxjs/operators';\n\nexport enum RestrictDrag {\n    VERTICALLY,\n    HORIZONTALLY,\n    NONE\n}\n\nexport interface IgxDragCustomEventDetails {\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n    owner: IgxDragDirective;\n    originalEvent: any;\n}\n\nexport interface IgxDropEnterEventArgs {\n        /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n    /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\n\nexport interface IgxDropLeaveEventArgs {\n    /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n        /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\n\nexport interface IgxDropEventArgs {\n    /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n    /**\n     * Whether the default drop behavior of the igxDrop directive should be canceled.\n     * Note: If you implement custom behavior and you use `animateOnRelease` for the igxDrag make sure to call 'event.drag.dropFinished();'\n     * to notify the igxDrag directive that it has been dropped so it animates properly.\n     */\n    cancel: boolean;\n}\n\nexport interface IDragBaseEventArgs {\n    /**\n     * Reference to the original event that caused the interaction with the element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: PointerEvent | MouseEvent | TouchEvent;\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n}\nexport interface IDragStartEventArgs extends IDragBaseEventArgs {\n    /** Set if the the dragging should be canceled. */\n    cancel: boolean;\n}\n\n@Directive({\n    selector: '[igxDrag]'\n})\nexport class IgxDragDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrag` directive. This can be set when instancing `igxDrag` on an element.\n     * ```html\n     * <div [igxDrag]=\"{ source: myElement }\"></div>\n     * ```\n     */\n    @Input('igxDrag')\n    public data: any;\n\n    /**\n     * An @Input property that indicates when the drag should start\n     * By default the drag starts after the draggable element is moved by 5px\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public dragTolerance = 5;\n\n    /**\n     * Sets a custom class that will be added to the `dragGhost` element.\n     * ```html\n     * <div igxDrag [ghostImageClass]=\"'dragGhost'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public ghostImageClass = '';\n\n    /**\n     * An @Input property that hides the draggable element.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\" [hideBaseOnDrag]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public hideBaseOnDrag = false;\n\n    /**\n     * An @Input property that enables/disables the draggable element animation\n     * when the element is released.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public animateOnRelease = false;\n\n    /**\n     * An @Input property that sets the element to which the dragged element will be appended.\n     * By default it's set to null and the dragged element is appended to the body.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [dragGhostHost]=\"hostDiv\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public dragGhostHost = null;\n\n    /**\n     * Event triggered when the draggable element drag starts.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragStart)=\"onDragStart()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragStart(){\n     *      alert(\"The drag has stared!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragStart = new EventEmitter<IDragStartEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is released.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragEnd)=\"onDragEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragEnd(){\n     *      alert(\"The drag has ended!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered after the draggable element is released and after its animation has finished.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (returnMoveEnd)=\"onMoveEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onMoveEnd(){\n     *      alert(\"The move has ended!\");\n     * }\n     * ```\n     */\n    @Output()\n    public returnMoveEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is clicked.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragClicked)=\"dragClicked()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public dragClicked(){\n     *      alert(\"The elemented has been clicked!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragClicked = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.touchAction')\n    public touch = 'none';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.transitionProperty')\n    public transitionProperty = 'top, left';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.visibility')\n    public _visibility = 'visible';\n\n    /**\n     * Sets the visibility of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     this.myDrag.visible = false;\n     * }\n     * ```\n     */\n    public set visible(bVisible) {\n        this._visibility = bVisible ? 'visible' : 'hidden';\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the visibility state of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let dragVisibilty = this.myDrag.visible;\n     * }\n     * ```\n     */\n    public get visible() {\n        return this._visibility === 'visible';\n    }\n\n    /**\n     * @hidden\n     */\n    public set left(val: number) {\n        requestAnimationFrame(() => {\n            if (this.dragGhost) {\n                this.dragGhost.style.left = val + 'px';\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public get left() {\n        return parseInt(this.dragGhost.style.left, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public set top(val: number) {\n        requestAnimationFrame(() => {\n            if (this.dragGhost) {\n                this.dragGhost.style.top = val + 'px';\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public get top() {\n        return parseInt(this.dragGhost.style.top, 10);\n    }\n\n    /**\n     * Returns if the browser supports pointer events.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let pointerEvents = this.myDrag.pointerEventsEnabled;\n     * }\n     * ```\n     */\n    public get pointerEventsEnabled() {\n        return typeof PointerEvent !== 'undefined';\n    }\n\n    /**\n     * Returns if the browser supports touch events.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let touchEvents = this.myDrag.pointerEventsEnabled;\n     * }\n     * ```\n     */\n    public get touchEventsEnabled() {\n        return 'ontouchstart' in window;\n    }\n\n    /**\n     * @hidden\n     */\n    public defaultReturnDuration = '0.5s';\n\n    /**\n     * @hidden\n     */\n    protected _startX = 0;\n    /**\n     * @hidden\n     */\n    protected _startY = 0;\n\n    /**\n     * @hidden\n     */\n    protected dragGhost;\n    /**\n     * @hidden\n     */\n    protected _dragStarted = false;\n    /**\n     * @hidden\n     */\n    protected _dragOffsetX;\n    /**\n     * @hidden\n     */\n    protected _dragOffsetY;\n    /**\n     * @hidden\n     */\n    protected _dragStartX;\n    /**\n     * @hidden\n     */\n    protected _dragStartY;\n    /**\n     * @hidden\n     */\n    protected _pointerDownId = null;\n\n    /**\n     * @hidden\n     */\n    protected _clicked = false;\n    /**\n     * @hidden\n     */\n    protected _lastDropArea = null;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    protected _removeOnDestroy = true;\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef, public zone: NgZone, public renderer: Renderer2) {\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            if (this.pointerEventsEnabled) {\n                fromEvent(this.element.nativeElement, 'pointerdown').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(this.element.nativeElement, 'pointermove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(this.element.nativeElement, 'pointerup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else if (this.touchEventsEnabled) {\n                fromEvent(this.element.nativeElement, 'touchstart').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(document.defaultView, 'touchmove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'touchend').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else {\n                // We don't have pointer events and touch events. Use then mouse events.\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(document.defaultView, 'mousemove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n\n        if (this.dragGhost && this._removeOnDestroy) {\n            this.dragGhost.parentNode.removeChild(this.dragGhost);\n            this.dragGhost = null;\n        }\n    }\n\n    /**\n     * @hidden\n     * Method bound to the PointerDown event of the base element igxDrag is initialized.\n     * @param event PointerDown event captured\n     */\n    public onPointerDown(event) {\n        this._clicked = true;\n        this._pointerDownId = event.pointerId;\n\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            this._startX = event.pageX;\n            this._startY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            this._startX = event.touches[0].pageX;\n            this._startY = event.touches[0].pageY;\n        }\n\n        // Take margins because getBoundingClientRect() doesn't include margins of the element\n        const marginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n        const marginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n\n        this._dragOffsetX =\n            (this._startX - this.element.nativeElement.getBoundingClientRect().left - this.getWindowScrollLeft()) + marginLeft;\n        this._dragOffsetY =\n            (this._startY - this.element.nativeElement.getBoundingClientRect().top - this.getWindowScrollTop()) + marginTop;\n        this._dragStartX = this._startX - this._dragOffsetX;\n        this._dragStartY = this._startY - this._dragOffsetY;\n\n        // Set pointer capture so we detect pointermove even if mouse is out of bounds until dragGhost is created.\n        if (this.pointerEventsEnabled) {\n            this.element.nativeElement.setPointerCapture(this._pointerDownId);\n        } else {\n            this.element.nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     * Perfmorm drag move logic when dragging and dispatching events if there is igxDrop under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the dragGhost is rendered the pointerId is reassigned to the dragGhost. Then this method is bound to it.\n     * @param event PointerMove event captured\n     */\n    public onPointerMove(event) {\n        if (this._clicked) {\n            const dragStartArgs: IDragStartEventArgs = {\n                originalEvent: event,\n                owner: this,\n                cancel: false\n            };\n            let pageX, pageY;\n            if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n                // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n                pageX = event.pageX;\n                pageY = event.pageY;\n            } else if (this.touchEventsEnabled) {\n                pageX = event.touches[0].pageX;\n                pageY = event.touches[0].pageY;\n\n                // Prevent scrolling on touch while dragging\n                event.preventDefault();\n            }\n\n            const totalMovedX = pageX - this._startX;\n            const totalMovedY = pageY - this._startY;\n            if (!this._dragStarted &&\n                (Math.abs(totalMovedX) > this.dragTolerance || Math.abs(totalMovedY) > this.dragTolerance)) {\n                this.zone.run(() => {\n                    this.dragStart.emit(dragStartArgs);\n                });\n\n                if (!dragStartArgs.cancel) {\n                    this._dragStarted = true;\n                    // We moved enough so dragGhost can be rendered and actual dragging to start.\n                    this.createDragGhost(event);\n                }\n                return;\n            } else if (!this._dragStarted) {\n                return;\n            }\n\n            this.left = this._dragStartX + totalMovedX;\n            this.top = this._dragStartY + totalMovedY;\n\n            this.dispatchDragEvents(pageX, pageY, event);\n        }\n    }\n\n    /**\n     * @hidden\n     * Perform drag end logic when releasing the dragGhost and dispatching drop event if igxDrop is under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the dragGhost is rendered the pointerId is reassigned to the dragGhost. Then this method is bound to it.\n     * @param event PointerUp event captured\n     */\n    public onPointerUp(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        const eventArgs = {\n            originalEvent: event,\n            owner: this\n        };\n        this._clicked = false;\n        if (this._dragStarted) {\n            if (this._lastDropArea && this._lastDropArea !== this.element.nativeElement) {\n                if (!this.animateOnRelease) {\n                    this.onTransitionEnd(null);\n                }\n\n                // dragging ended over a drop area. Call this after transition because onDrop might remove the element.\n                this.dispatchDropEvent(event.pageX, event.pageY, event);\n                // else the drop directive needs to call the dropFinished() method so the animation can perform\n            } else if (this.animateOnRelease &&\n                    (this.left !== Math.floor(this._dragStartX) || this.top !== Math.floor(this._dragStartY))) {\n                // If the start positions are the same as the current the transition will not execute.\n                // return the ghost to start position before removing it. See onTransitionEnd.\n                this.dragGhost.style.transitionDuration = this.defaultReturnDuration;\n                this.left = this._dragStartX;\n                this.top = this._dragStartY;\n            } else {\n                this.onTransitionEnd(null);\n            }\n\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n        } else {\n            this.zone.run(() => {\n                this.dragClicked.emit(eventArgs);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * Create dragGhost element - if a Node object is provided it creates a clone of that node,\n     * otherwise it clones the host element.\n     * Bind all needed events.\n     * @param event Pointer event required when the dragGhost is being initialized.\n     * @param node The Node object to be cloned.\n     */\n    protected createDragGhost(event, node: any = null) {\n        this.dragGhost = node ? node.cloneNode(true) : this.element.nativeElement.cloneNode(true);\n        this.dragGhost.style.transitionDuration = '0.0s';\n        this.dragGhost.style.position = 'absolute';\n        const hostLeft = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().left : 0;\n        const hostTop = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().top : 0;\n        this.dragGhost.style.top = this._dragStartY - hostTop + 'px';\n        this.dragGhost.style.left = this._dragStartX - hostLeft + 'px';\n\n        if (this.ghostImageClass) {\n            this.renderer.addClass(this.dragGhost, this.ghostImageClass);\n        }\n\n        if (this.dragGhostHost) {\n            this.dragGhostHost.appendChild(this.dragGhost);\n        } else {\n            document.body.appendChild(this.dragGhost);\n        }\n\n        if (this.pointerEventsEnabled) {\n            // The dragGhost takes control for moving and dragging after it has been shown.\n            this.dragGhost.setPointerCapture(this._pointerDownId);\n            this.dragGhost.addEventListener('pointermove', (args) => {\n                this.onPointerMove(args);\n            });\n            this.dragGhost.addEventListener('pointerup', (args) => {\n                this.onPointerUp(args);\n            });\n        }\n\n        if (this.animateOnRelease) {\n            // Transition animation when the dragGhost is released and it returns to it's original position.\n            this.dragGhost.addEventListener('transitionend', (args) => {\n                this.onTransitionEnd(args);\n            });\n        }\n\n        // Hide the base after the dragGhost is created, because otherwise the dragGhost will be not visible.\n        if (this.hideBaseOnDrag) {\n            this.visible = false;\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDragEnter/igxDragLeave events based on current pointer position and if drop area is under.\n     */\n    protected dispatchDragEvents(pageX: number, pageY: number, originalEvent) {\n        let topDropArea;\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        const elementsFromPoint = this.getElementsAtPoint(pageX, pageY);\n        for (let i = 0; i < elementsFromPoint.length; i++) {\n            if (elementsFromPoint[i].getAttribute('droppable') === 'true' && elementsFromPoint[i] !== this.dragGhost) {\n                topDropArea = elementsFromPoint[i];\n                break;\n            }\n        }\n\n        if (topDropArea) {\n            this.dispatchEvent(topDropArea, 'igxDragOver', eventArgs);\n        }\n\n        if (topDropArea &&\n            (!this._lastDropArea || (this._lastDropArea && this._lastDropArea !== topDropArea))) {\n            if (this._lastDropArea) {\n                this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n            }\n\n            this._lastDropArea = topDropArea;\n            this.dispatchEvent(this._lastDropArea, 'igxDragEnter', eventArgs);\n        } else if (!topDropArea && this._lastDropArea) {\n            this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n            this._lastDropArea = null;\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDrop event based on current pointer position if there is last recorder drop area under the pointer.\n     * Last recorder drop area is updated in @dispatchDragEvents method.\n     */\n    protected dispatchDropEvent(pageX: number, pageY: number, originalEvent) {\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        this.dispatchEvent(this._lastDropArea, 'igxDrop', eventArgs);\n        this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n        this._lastDropArea = null;\n    }\n\n    /**\n     * @hidden\n     * Update relative positions\n     */\n    public updateDragRelativePos() {\n        if (!this.dragGhost) {\n            return;\n        }\n\n        // Calculate the new dragGhost position to remain where the mouse is, so it doesn't jump\n        const totalDraggedX = this.left - this._dragStartX;\n        const totalDraggedY = this.top - this._dragStartY;\n        const newPosX = this.element.nativeElement.getBoundingClientRect().left;\n        const newPosY = this.element.nativeElement.getBoundingClientRect().top;\n        const diffStartX = this._dragStartX - newPosX;\n        const diffStartY = this._dragStartY - newPosY;\n        this.top = newPosX + totalDraggedX - diffStartX;\n        this.left = newPosY + totalDraggedY - diffStartY;\n    }\n\n    /**\n     * Informs the `igxDrag` directive that it has been dropped/released.\n     * This should usully be called when `animateOnRelease` is set to `true`.\n     * When canceling or defining custom drop logic this tells the igxDrag to update it's positions and\n     * animate correctly to the new position.\n     * ```typescript\n     * public onDropElem(event) {\n     *     // Function bound to the igxDrop directive event `onDrop`\n     *     // This cancels the default drop logic of the `igxDrop`\n     *     event.cancel = true;\n     *     event.drag.dropFinished();\n     * }\n     * ```\n     */\n    public dropFinished() {\n        if (this.animateOnRelease && this.dragGhost) {\n            this.updateDragRelativePos();\n\n            // Return the dragged element to the start. See onTransitionEnd next.\n            // Take margins becuase getBoundingClientRect() doesn't include margins\n            const marginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n            const marginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n            const newPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n            const newPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n\n            this.dragGhost.style.transitionDuration = this.defaultReturnDuration;\n            this.left = newPosX - marginLeft;\n            this.top = newPosY - marginTop;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onTransitionEnd(event) {\n        if (this._dragStarted && !this._clicked) {\n            if (this.hideBaseOnDrag) {\n                this.visible = true;\n            }\n            this.dragGhost.parentNode.removeChild(this.dragGhost);\n            this.dragGhost = null;\n\n            this.element.nativeElement.style.transitionDuration = '0.0s';\n            this._dragStarted = false;\n            this.zone.run(() => {\n                this.returnMoveEnd.emit({\n                    originalEvent: event,\n                    owner: this\n                });\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElementsAtPoint(pageX: number, pageY: number) {\n        // correct the coordinates with the current scroll position, because\n        // document.elementsFromPoint conider position within the current viewport\n        // window.pageXOffset == window.scrollX; // always true\n        // using window.pageXOffset for IE9 compatibility\n        const viewPortX = pageX - window.pageXOffset;\n        const viewPortY = pageY - window.pageYOffset;\n        if (document['msElementsFromPoint']) {\n            // Edge and IE special snowflakes\n            return document['msElementsFromPoint'](viewPortX, viewPortY);\n        } else {\n            // Other browsers like Chrome, Firefox, Opera\n            return document.elementsFromPoint(viewPortX, viewPortY);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected dispatchEvent(target, eventName: string, eventArgs: IgxDragCustomEventDetails) {\n        // This way is IE11 compatible.\n        const dragLeaveEvent = document.createEvent('CustomEvent');\n        dragLeaveEvent.initCustomEvent(eventName, false, false, eventArgs);\n        target.dispatchEvent(dragLeaveEvent);\n        // Othersie can be used `target.dispatchEvent(new CustomEvent(eventName, eventArgs));`\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n}\n\n@Directive({\n    selector: '[igxDrop]'\n})\nexport class IgxDropDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrop` directive. This can be set when instancing `igxDrop` on an element.\n     * ```html\n     * <div [igxDrop]=\"{ source: myElement }\"></div>\n     * ```\n     */\n    @Input('igxDrop')\n    public data: any;\n\n    /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onEnter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable elemente has entered the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onEnter = new EventEmitter<IgxDropEnterEventArgs>();\n\n    /** Event triggered when dragged element leaves the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onLeave)=\"dragLeave()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragLeave(){\n     *     alert(\"A draggable elemente has left the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onLeave = new EventEmitter<IgxDropLeaveEventArgs>();\n\n    /** Event triggered when dragged element is dropped in the area of the element.\n     * Since the `igxDrop` has default logic that appends the dropped element as a child, it can be canceled here.\n     * To cancel the default logic the `cancel` property of the event needs to be set to true.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onDrop)=\"dragDrop()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragDrop(){\n     *     alert(\"A draggable elemente has been dropped in the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDrop = new EventEmitter<IgxDropEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.droppable')\n    public droppable = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.dragOver')\n    public dragover = false;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, private _renderer: Renderer2, private _zone: NgZone) {\n    }\n\n    ngOnInit() {\n        this._zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'igxDragEnter').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onDragEnter(res as CustomEvent<IgxDragCustomEventDetails>));\n\n            fromEvent(this.element.nativeElement, 'igxDragLeave').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragLeave(res));\n            fromEvent(this.element.nativeElement, 'igxDragOver').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragOver(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragOver(event) { }\n\n    /**\n     * @hidden\n     */\n    public onDragEnter(event: CustomEvent<IgxDragCustomEventDetails>) {\n        this.dragover = true;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IgxDropEnterEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.onEnter.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragLeave(event) {\n        this.dragover = false;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IgxDropLeaveEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.onLeave.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('igxDrop', ['$event'])\n    public onDragDrop(event) {\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const args: IgxDropEventArgs = {\n            owner: this,\n            originalEvent: event.detail.originalEvent,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            cancel: false\n        };\n        this._zone.run(() => {\n            this.onDrop.emit(args);\n        });\n\n        if (!args.cancel) {\n            // To do for generic scenario\n            this._renderer.removeChild(event.detail.owner.element.nativeElement.parentNode, event.detail.owner.element.nativeElement);\n            this._renderer.appendChild(this.element.nativeElement, event.detail.owner.element.nativeElement);\n\n            setTimeout(() => {\n                event.detail.owner.dropFinished();\n            }, 0);\n        }\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n}\n\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDragDirective, IgxDropDirective],\n    exports: [IgxDragDirective, IgxDropDirective]\n})\nexport class IgxDragDropModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    SimpleChanges\n} from '@angular/core';\n\nexport class IgxFilterOptions {\n    // Input text value that will be used as a filtering pattern (matching condition is based on it)\n    public inputValue = '';\n\n    // Item property, which value should be used for filtering\n    public key: string;\n\n    // Represent items of the list. It should be used to handle decalaratevely defined widgets\n    public items: any[];\n\n    // Function - get value to be tested from the item\n    // item - single item of the list to be filtered\n    // key - property name of item, which value should be tested\n    // Default behavior - returns \"key\"- named property value of item if key si provided,\n    // otherwise textContent of the item's html element\n    public get_value(item: any, key: string): string {\n        let result = '';\n\n        if (key && item[key]) {\n            result = item[key].toString();\n        } else if (item.element) {\n            if (item.element.nativeElement) {\n                result = item.element.nativeElement.textContent.trim();\n            // Check if element doesn't return the DOM element directly\n            } else if (item.element.textContent) {\n                result = item.element.textContent.trim();\n            }\n        }\n\n        return result;\n    }\n\n    // Function - formats the original text before matching process\n    // Default behavior - returns text to lower case\n    public formatter(valueToTest: string): string {\n        return valueToTest.toLowerCase();\n    }\n\n    // Function - determines whether the item met the condition\n    // valueToTest - text value that should be tested\n    // inputValue - text value from input that condition is based on\n    // Default behavior - \"contains\"\n    public matchFn(valueToTest: string, inputValue: string): boolean {\n        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;\n    }\n\n    // Function - executed after matching test for every matched item\n    // Default behavior - shows the item\n    public metConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = false;\n        }\n    }\n\n    // Function - executed for every NOT matched item after matching test\n    // Default behavior - hides the item\n    public overdueConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = true;\n        }\n    }\n}\n\n\n@Directive({\n    selector: '[igxFilter]'\n})\nexport class IgxFilterDirective implements OnChanges {\n    @Output() public filtering = new EventEmitter(false); // synchronous event emitter\n    @Output() public filtered = new EventEmitter();\n\n    @Input('igxFilter') public filterOptions: IgxFilterOptions;\n\n    constructor(private element: ElementRef, renderer: Renderer2) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        // Detect only changes of input value\n        if (changes.filterOptions &&\n            changes.filterOptions.currentValue &&\n            changes.filterOptions.currentValue.inputValue !== undefined &&\n            changes.filterOptions.previousValue &&\n            changes.filterOptions.currentValue.inputValue !== changes.filterOptions.previousValue.inputValue) {\n            this.filter();\n        }\n    }\n\n    private filter() {\n        if (!this.filterOptions.items) {\n            return;\n        }\n\n        const args = { cancel: false, items: this.filterOptions.items };\n        this.filtering.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        const pipe = new IgxFilterPipe();\n\n        const filtered = pipe.transform(this.filterOptions.items, this.filterOptions);\n        this.filtered.emit({ filteredItems: filtered });\n    }\n}\n\n@Pipe({\n    name: 'igxFilter',\n    pure: false\n})\n\nexport class IgxFilterPipe implements PipeTransform {\n    public transform(items: any[],\n                     // options - initial settings of filter functionality\n                     options: IgxFilterOptions) {\n\n        let result = [];\n\n        if (!items || !items.length || !options) {\n            return;\n        }\n\n        if (options.items) {\n            items = options.items;\n        }\n\n        result = items.filter((item: any) => {\n            const match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);\n\n            if (match) {\n                if (options.metConditionFn) {\n                    options.metConditionFn(item);\n                }\n            } else {\n                if (options.overdueConditionFn) {\n                    options.overdueConditionFn(item);\n                }\n            }\n\n            return match;\n        });\n\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFilterDirective, IgxFilterPipe],\n    exports: [IgxFilterDirective, IgxFilterPipe],\n    imports: [CommonModule]\n})\nexport class IgxFilterModule {\n}\n","import { Directive, ElementRef, Input, NgModule, Optional, Inject, Self } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../../core/edit-provider';\n\n@Directive({\n    exportAs: 'igxFocus',\n    selector: '[igxFocus]'\n})\nexport class IgxFocusDirective {\n\n    private focusState = true;\n    /**\n     * Returns the state of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let isFocusOn = this.igxFocus.focused;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    @Input('igxFocus')\n    get focused(): boolean {\n        return this.focusState;\n    }\n    /**\n     * Sets the state of the igxFocus.\n     * ```html\n     * <igx-input-group >\n     *  <input #focusContainer igxInput [igxFocus]=\"true\"/>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    set focused(val: boolean) {\n        this.focusState = val;\n        this.trigger();\n    }\n    /**\n     * Gets the native element of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let igxFocusNativeElement = this.igxFocus.nativeElement;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    get nativeElement() {\n        if (this.comp && this.comp[0] && this.comp[0].getEditElement) {\n            return (this.comp[0] as EditorProvider).getEditElement();\n        }\n        return this.element.nativeElement;\n    }\n\n    constructor(private element: ElementRef, @Inject(NG_VALUE_ACCESSOR) @Self() @Optional() private comp?: any[]) { }\n    /**\n     * Triggers the igxFocus state.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * this.igxFocus.trigger();\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    trigger() {\n        if (this.focusState) {\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFocusDirective],\n    exports: [IgxFocusDirective]\n})\nexport class IgxFocusModule { }\n","import { Directive, HostBinding, Input, NgModule } from '@angular/core';\n\n@Directive({\n    selector: '[igxLayout]'\n})\nexport class IgxLayoutDirective {\n    /**\n     * Sets the default flow direction of the container's children.\n     *\n     * Defaults to `rows`.\n     *\n     * ```html\n     *  <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     *  </div>\n     * ```\n     */\n    @Input('igxLayoutDir') public dir = 'row';\n\n    /**\n     * Defines the direction flex children are placed in the flex container.\n     *\n     * When set to `true`, the `rows` direction goes right to left and `columns` goes bottom to top.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutReverse=\"true\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutReverse') public reverse = false;\n\n    /**\n     * By default the immediate children will all try to fit onto one line.\n     *\n     * The default value `nowrap` sets this behavior.\n     *\n     * Other accepted values are `wrap` and `wrap-reverse`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\"\n     *   igxLayoutWrap=\"wrap\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutWrap') public wrap = 'nowrap';\n\n    /**\n     * Defines the alignment along the main axis.\n     *\n     * Defaults to `flex-start` which packs the children toward the start line.\n     *\n     * Other possible values are `flex-end`, `center`, `space-between`, `space-around`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutJustify=\"space-between\">\n     *    <div>1</div>\n     *    <div>2</div>\n     *    <div>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutJustify') public justify = 'flex-start';\n\n    /**\n     * Defines the default behavior for how children are laid out along the corss axis of the current line.\n     *\n     * Defaults to `flex-start`.\n     *\n     * Other possible values are `flex-end`, `center`, `baseline`, and `stretch`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutItemAlign=\"start\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutItemAlign') public itemAlign = 'stretch';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display') public display = 'flex';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-wrap') get flexwrap() { return this.wrap; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.justify-content') get justifycontent() { return this.justify; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.align-items') get align() { return this.itemAlign; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-direction')\n    get direction() {\n        if (this.reverse) {\n            return (this.dir === 'row') ? 'row-reverse' : 'column-reverse';\n        }\n        return (this.dir === 'row') ? 'row' : 'column';\n    }\n}\n\n@Directive({\n    selector: '[igxFlex]'\n})\nexport class IgxFlexDirective {\n\n    /**\n     * Applies the `grow` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content1</div>\n     *    <div igxFlex igxFlexGrow=\"1\">Content2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexGrow') public grow = 1;\n\n    /**\n     * Applies the `shrink` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content1</div>\n     *    <div igxFlex igxFlexShrink=\"0\">Content2</div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexShrink') public shrink = 1;\n\n    /**\n     * Applies the directive to an element.\n     *\n     * Possible values include `igxFlexGrow`, `igxFlexShrink`, `igxFlexOrder`, `igxFlexBasis`.\n     *\n     * ```html\n     * <div igxFlex>Content</div>\n     * ```\n     */\n    @Input('igxFlex') public flex = '';\n\n    /**\n     * Applies the `order` attribute to an element that uses the directive.\n     *\n     * Default value is `0`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexOrder=\"1\">Content1</div>\n     *    <div igxFlex igxFlexOrder=\"0\">Content2</div>\n     *    <div igxFlex igxFlexOrder=\"2\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexOrder') public order = 0;\n\n    /**\n     * Applies the `flex-basis` attribute to an element that uses the directive.\n     *\n     * Default value is `auto`.\n     *\n     * Other possible values include `content`, `max-content`, `min-content`, `fit-content`.\n     *\n     * ```html\n     * <div igxFlex igxFlexBasis=\"fit-content\">Content</div>\n     * ```\n     */\n    @Input('igxFlexBasis') public basis = 'auto';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex')\n    get style() {\n        if (this.flex) {\n            return `${this.flex}`;\n        }\n        return `${this.grow} ${this.shrink} ${this.basis}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.order')\n    get itemorder() {\n        return this.order || 0;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFlexDirective, IgxLayoutDirective],\n    exports: [IgxFlexDirective, IgxLayoutDirective]\n})\nexport class IgxLayoutModule { }\n","/**\n * @hidden\n */\nexport const MASK_FLAGS = [ 'C', '&', 'a', 'A', '?', 'L', '9', '0', '#' ];\n\n/**\n * @hidden\n */\nexport const KEYS = {\n    Ctrl : 17,\n    Z : 90,\n    Y : 89,\n    X : 88,\n    BACKSPACE : 8,\n    DELETE : 46\n  };\n\n\n/**\n * @hidden\n */\nexport class MaskHelper {\n    private _cursor;\n    public get cursor() {\n        return this._cursor;\n    }\n    public data: boolean;\n\n    public parseValueByMask(value, maskOptions, cursor): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (inputValue.length < mask.length) { // BACKSPACE, DELETE\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (nonLiteralIndeces.indexOf(cursor + 1) !== -1) {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, maskOptions.promptChar);\n                this._cursor = cursor + 1;\n            } else {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, mask[cursor + 1]);\n                this._cursor = cursor + 1;\n                for (let i = this._cursor; i < 0; i--) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor--;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        } else {\n            const char = inputValue[cursor];\n            let isCharValid = this.validateCharOnPostion(char, cursor, mask);\n            if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, cursor, char);\n                    this._cursor = cursor + 1;\n                } else {\n                    this._cursor = cursor;\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                this._cursor = ++cursor;\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor = ++cursor;\n                    } else {\n                        isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, cursor, char);\n                            this._cursor = ++cursor;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseMask(maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        return outputVal;\n    }\n\n    public parseValueByMaskOnInit(inputVal, maskOptions): string {\n        let outputVal = '';\n        let value = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n        const literalValues: string[] = Array.from(literals.values());\n\n        if (inputVal != null) {\n            value = inputVal.toString();\n        }\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        if (!value) {\n            return outputVal;\n        }\n\n        const nonLiteralValues: string[] = this.getNonLiteralValues(value, literalValues);\n\n        for (let i = 0; i < nonLiteralValues.length; i++) {\n            const char = nonLiteralValues[i];\n            const isCharValid = this.validateCharOnPostion(char, nonLiteralIndeces[i], mask);\n\n            if (!isCharValid && char !== maskOptions.promptChar) {\n                nonLiteralValues[i] = maskOptions.promptChar;\n            }\n        }\n\n        if (nonLiteralValues.length > nonLiteralIndeces.length) {\n            nonLiteralValues.splice(nonLiteralIndeces.length);\n        }\n\n        let pos = 0;\n        for (const nonLiteralValue of nonLiteralValues) {\n            const char = nonLiteralValue;\n            outputVal = this.replaceCharAt(outputVal, nonLiteralIndeces[pos++], char);\n        }\n\n        return outputVal;\n    }\n\n    public restoreValueFromMask(value, maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalValues: string[] = Array.from(literals.values());\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                if (val !== maskOptions.promptChar) {\n                    outputVal += val;\n                }\n            }\n        }\n\n        return outputVal;\n    }\n\n    public parseValueByMaskUponSelection(value, maskOptions, cursor, selection): string {\n        let isCharValid: boolean;\n        let inputValue: string = value;\n        const char: string = inputValue[cursor];\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (!this.data) {\n            this._cursor = cursor < 0 ? ++cursor : cursor;\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                inputValue = isCharValid ? this.replaceCharAt(inputValue, this._cursor++, char) :\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                selection--;\n                if (selection > 0) {\n                    for (let i = 0; i < selection; i++) {\n                        cursor++;\n                        inputValue = nonLiteralIndeces.indexOf(cursor) !== -1 ?\n                            this.insertCharAt(inputValue, cursor, maskOptions.promptChar) :\n                            this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    }\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, this._cursor, mask[this._cursor]);\n                this._cursor++;\n                selection--;\n                let isMarked = false;\n                if (selection > 0) {\n                    cursor = this._cursor;\n                    for (let i = 0; i < selection; i++) {\n                        if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                            isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                            if (isCharValid && !isMarked) {\n                                inputValue = this.insertCharAt(inputValue, cursor, char);\n                                cursor++;\n                                this._cursor++;\n                                isMarked = true;\n                            } else {\n                                inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                                cursor++;\n                            }\n                        } else {\n                            inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                            if (cursor === this._cursor) {\n                                this._cursor++;\n                            }\n                            cursor++;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (this._cursor < 0) {\n                this._cursor++;\n                cursor++;\n            }\n            cursor++;\n            this._cursor = cursor;\n            for (let i = 0; i < selection; i++) {\n                if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                    inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                    cursor++;\n                } else {\n                    inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    cursor++;\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseValueByMaskUponCopyPaste(value, maskOptions, cursor, clipboardData, selection): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        const selectionEnd = cursor + selection;\n\n        this._cursor = cursor;\n        for (const clipboardSym of clipboardData) {\n            const char = clipboardSym;\n\n            if (this._cursor > mask.length) {\n                return inputValue;\n            }\n\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                }\n            } else {\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor++;\n                    } else {\n                        const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                        }\n                        break;\n                    }\n                }\n            }\n\n            selection--;\n        }\n\n        if (selection > 0) {\n            for (let i = this._cursor; i < selectionEnd; i++) {\n                if (literalKeys.indexOf(this._cursor) !== -1) {\n                    this._cursor++;\n                } else {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    private validateCharOnPostion(inputChar: string, position: number, mask: string): boolean {\n        let regex: RegExp;\n        let isValid: boolean;\n        const letterOrDigitRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letterDigitOrSpaceRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const letterRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letteSpaceRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const digitRegEx = '[\\\\d]';\n        const digitSpaceRegEx = '[\\\\d\\\\u0020]';\n        const digitSpecialRegEx = '[\\\\d-\\\\+]';\n\n        switch (mask.charAt(position)) {\n            case 'C':\n                isValid = inputChar !== '';\n                break;\n            case '&':\n                regex = new RegExp('[\\\\u0020]');\n                isValid = !regex.test(inputChar);\n                break;\n            case 'a':\n                regex = new RegExp(letterDigitOrSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'A':\n                regex = new RegExp(letterOrDigitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '?':\n                regex = new RegExp(letteSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'L':\n                regex = new RegExp(letterRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '0':\n                regex = new RegExp(digitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '9':\n                regex = new RegExp(digitSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '#':\n                regex = new RegExp(digitSpecialRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            default: {\n                isValid = null;\n            }\n        }\n\n        return isValid;\n    }\n    private replaceCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index + 1);\n        }\n    }\n    private insertCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index);\n        }\n    }\n    private getMaskLiterals(mask: string): Map<number, string> {\n        const literals = new Map<number, string>();\n\n        for (let i = 0; i < mask.length; i++) {\n            const char = mask.charAt(i);\n            if (MASK_FLAGS.indexOf(char) === -1) {\n                literals.set(i, char);\n            }\n        }\n\n        return literals;\n    }\n    private getNonLiteralIndeces(mask: string, literalKeys: number[]): number[] {\n        const nonLiteralsIndeces: number[] = new Array();\n\n        for (let i = 0; i < mask.length; i++) {\n            if (literalKeys.indexOf(i) === -1) {\n                nonLiteralsIndeces.push(i);\n            }\n        }\n\n        return nonLiteralsIndeces;\n    }\n    private getNonLiteralValues(value: string, literalValues: string[]): string[] {\n        const nonLiteralValues: string[] = new Array();\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                nonLiteralValues.push(val);\n            }\n        }\n\n        return nonLiteralValues;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    NgModule,\n    OnInit,\n    Output,\n    PipeTransform\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { KEYS, MaskHelper } from './mask-helper';\nimport { isIE } from '../../core/utils';\n\nconst noop = () => { };\n\n@Directive({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],\n    selector: '[igxMask]'\n})\nexport class IgxMaskDirective implements OnInit, ControlValueAccessor {\n    /**\n     * Sets the input mask.\n     * ```html\n     * <input [igxMask] = \"'00/00/0000'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input('igxMask')\n    public mask: string;\n\n    /**\n     * Sets the character representing a fillable spot in the input mask.\n     * Default value is \"'_'\".\n     * ```html\n     * <input [promptChar] = \"'/'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public promptChar: string;\n\n    /**\n     * Specifies if the bound value includes the formatting symbols.\n     * ```html\n     * <input [includeLiterals] = \"true\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public includeLiterals: boolean;\n\n    /**\n     * Specifies a placeholder.\n     * ```html\n     * <input placeholder = \"enter text...\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public placeholder: string;\n\n    /**\n     * Specifies a pipe to be used on blur.\n     * ```html\n     * <input [displayValuePipe] = \"displayFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public displayValuePipe: PipeTransform;\n\n    /**\n     * Specifies a pipe to be used on focus.\n     * ```html\n     * <input [focusedValuePipe] = \"inputFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public focusedValuePipe: PipeTransform;\n\n    /**\n     *@hidden\n     */\n    @Input()\n    private dataValue: string;\n\n    /**\n     * Emits an event each time the value changes.\n     * Provides `rawValue: string` and `formattedValue: string` as event arguments.\n     * ```html\n     * <input (onValueChange) = \"onValueChange(rawValue: string, formattedValue: string)\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<IMaskEventArgs>();\n\n    /**\n     *@hidden\n     */\n    private get value() {\n        return this.nativeElement.value;\n    }\n\n    /**\n     *@hidden\n     */\n    private set value(val) {\n        this.nativeElement.value = val;\n    }\n\n    /**\n     *@hidden\n     */\n    private get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionStart() {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionEnd() {\n        return this.nativeElement.selectionEnd;\n    }\n\n    /**\n     *@hidden\n     */\n    private _ctrlDown: boolean;\n\n    /**\n     *@hidden\n     */\n    private _paste: boolean;\n\n    /**\n     *@hidden\n     */\n    private _selection: number;\n\n    /**\n     *@hidden\n     */\n    private _maskOptions = {\n        format: '',\n        promptChar: ''\n    };\n\n    /**\n     *@hidden\n     */\n    private _key;\n\n    /**\n     *@hidden\n     */\n    private _cursorOnPaste;\n\n    /**\n     *@hidden\n     */\n    private _valOnPaste;\n\n    private _stopPropagation: boolean;\n\n    /**\n     *@hidden\n     */\n    private maskHelper: MaskHelper;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    constructor(private elementRef: ElementRef) {\n        this.maskHelper = new MaskHelper();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this._maskOptions.format = this.mask ? this.mask : 'CCCCCCCCCC';\n        this._maskOptions.promptChar = this.promptChar ? this.promptChar : '_';\n        this.nativeElement.setAttribute('placeholder', this.placeholder ? this.placeholder : this._maskOptions.format);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n        }\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = true;\n        }\n\n        if ((this._ctrlDown && key === KEYS.Z) || (this._ctrlDown && key === KEYS.Y)) {\n            event.preventDefault();\n        }\n\n        this._key = key;\n        this._selection = Math.abs(this.selectionEnd - this.selectionStart);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keyup', ['$event'])\n    public onKeyup(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = false;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('paste', ['$event'])\n    public onPaste(event): void {\n        this._paste = true;\n\n        this._valOnPaste = this.value;\n        this._cursorOnPaste = this.getCursorPosition();\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('input', ['$event'])\n    public onInputChanged(event): void {\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n            return;\n        }\n\n        if (this._paste) {\n            this._paste = false;\n\n            const clipboardData = this.value.substring(this._cursorOnPaste, this.getCursorPosition());\n            this.value = this.maskHelper.parseValueByMaskUponCopyPaste(\n                this._valOnPaste, this._maskOptions, this._cursorOnPaste, clipboardData, this._selection);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        } else {\n            const currentCursorPos = this.getCursorPosition();\n\n            this.maskHelper.data = (this._key === KEYS.BACKSPACE) || (this._key === KEYS.DELETE);\n\n            this.value = this._selection && this._selection !== 0 ?\n                this.maskHelper.parseValueByMaskUponSelection(this.value, this._maskOptions, currentCursorPos - 1, this._selection) :\n                this.maskHelper.parseValueByMask(this.value, this._maskOptions, currentCursorPos - 1);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        }\n\n        const rawVal = this.maskHelper.restoreValueFromMask(this.value, this._maskOptions);\n\n        this.dataValue = this.includeLiterals ? this.value : rawVal;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event.target.value'])\n    public onFocus(value) {\n        if (this.focusedValuePipe) {\n            if (isIE()) {\n                this._stopPropagation = true;\n            }\n            this.value = this.focusedValuePipe.transform(value);\n        } else {\n            this.value = this.maskHelper.parseValueByMaskOnInit(this.value, this._maskOptions);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event.target.value'])\n    public onBlur(value) {\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(value);\n        } else if (value === this.maskHelper.parseMask(this._maskOptions)) {\n            this.value = '';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private getCursorPosition(): number {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private setCursorPosition(start: number, end: number = start): void {\n        this.nativeElement.setSelectionRange(start, end);\n    }\n\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this.value = value ? this.maskHelper.parseValueByMaskOnInit(value, this._maskOptions) : '';\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(this.value);\n        }\n\n        this.dataValue = this.includeLiterals ? this.value : value;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: value, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\n/**\n * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.\n */\nexport interface IMaskEventArgs {\n    rawValue: string;\n    formattedValue: string;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxMaskDirective],\n    exports: [IgxMaskDirective],\n    imports: [CommonModule]\n})\nexport class IgxMaskModule { }\n","import {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport interface IChangeRadioEventArgs {\n    value: any;\n    radio: IgxRadioComponent;\n}\n\nexport enum RadioLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nlet nextId = 0;\nconst noop = () => { };\n/**\n * **Ignite UI for Angular Radio Button** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Button allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio>\n *   Simple radio button\n * </igx-radio>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioComponent, multi: true }],\n    selector: 'igx-radio',\n    templateUrl: 'radio.component.html'\n})\n\nexport class IgxRadioComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * Returns reference to native radio element.\n     * ```typescript\n     * let radioElement =  this.radio.nativeRadio;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('radio') public nativeRadio: ElementRef;\n    /**\n     * Returns reference to native label element.\n     * ```typescript\n     * let labelElement =  this.radio.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('nativeLabel') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.radio.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the radio component.\n     * If not set, the `id` of the first radio component will be `\"igx-radio-0\"`.\n     * ```html\n     * <igx-radio id = \"my-first-radio\"></igx-radio>\n     * ```\n     * ```typescript\n     * let radioId =  this.radio.id;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-radio-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the radio component.\n     * If not set, the id of the `label` in the first radio component will be `\"igx-radio-0-label\"`.\n     * ```html\n     * <igx-radio labelId = \"Label1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelId =  this.radio.labelId;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the position of the `label` in the radio component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio labelPosition = \"before\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radio.labelPosition;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio [value] = \"'radioButtonValue'\"></igx-radio>\n     * ```\n     * ```typescript\n     * let value =  this.radio.value;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the radio component.\n     * ```html\n     * <igx-radio name = \"Radio1\"></igx-radio>\n     *  ```\n     * ```typescript\n     * let name =  this.radio.name;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-radio [tabindex] = \"1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.radio.tabindex;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Enables/disables the ripple effect on the radio button..\n     * If not set, the `disableRipple` will have value `false`.\n     * ```html\n     * <igx-radio [disableRipple] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabledRipple =  this.radio.disableRipple;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the radio button is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio [required] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radio.required;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute of the radio component.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-radio aria-labelledby = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.radio.ariaLabelledBy;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the `aria-label` attribute of the radio component.\n     * ```html\n     * <igx-radio aria-label = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.radio.ariaLabel;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the radio `value` is changed.\n     * Provides references to the `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n    /**\n     * Returns the class of the radio component.\n     * ```typescript\n     * let radioClass = this.radio.cssClass;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio')\n    public cssClass = 'igx-radio';\n    /**\n     * Sets/gets  the `checked` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [checked] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isChecked =  this.radio.checked;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets  the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [disabled] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.radio.disabled;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the radio component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.radio.focus = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.radio.focused;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    protected _value: any = null;\n\n    constructor() { }\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    public _onRadioChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onRadioClick(event) {\n        event.stopPropagation();\n        this.select();\n\n        if (isIE()) {\n            this.nativeRadio.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick() {\n        this.select();\n    }\n    /**\n     * Selects the current radio button.\n     * ```typescript\n     * this.radio.select();\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    public select() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = true;\n        this.focused = false;\n        this.change.emit({ value: this.value, radio: this });\n        this._onChangeCallback(this.value);\n    }\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true`;\n     * ```typescript\n     * this.radio.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this._value = value;\n        this.checked = (this._value === this.value);\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeRadio.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case RadioLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case RadioLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n","import { Directive, ElementRef, HostListener, Input, NgModule, NgZone, Renderer2 } from '@angular/core';\nimport { AnimationBuilder, style, animate } from '@angular/animations';\n\n@Directive({\n    selector: '[igxRipple]'\n})\nexport class IgxRippleDirective {\n    /**\n     * Sets/gets the ripple target.\n     * ```html\n     * <div  #rippleContainer class=\"div-1\" igxRipple [igxRippleTarget] = \"'.div-1'\"></div>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleTarget = this.ripple.rippleTarget;\n     * ```\n     * Can set the ripple to activate on a child element inside the parent where igxRipple is defined.\n     * ```html\n     * <div #rippleContainer [igxRippleTarget] = \"'#child\"'>\n     *  <button id=\"child\">Click</button>\n     * </div>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleTarget')\n    public rippleTarget = '';\n    /**\n     * Sets/gets the ripple color.\n     * ```html\n     * <button #rippleContainer [igxRipple] = \"'red'\" ></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleColor = this.ripple.rippleColor;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRipple')\n    public rippleColor: string;\n    /**\n     * Sets/gets the ripple duration(in milliseconds).\n     * Default value is `600`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDuration] = \"800\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleDuration = this.ripple.rippleDuration;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDuration')\n    public rippleDuration = 600;\n    /**\n     * Enables/disables the ripple to be centered.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleCentered] = \"true\"></button>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleCentered') set centered(value: boolean) {\n        this._centered = value || this.centered;\n    }\n    /**\n     * Sets/gets whether the ripple is disabled.\n     * Default value is `false`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDisabled] = \"true\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let isRippleDisabled = this.ripple.rippleDisabled;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDisabled')\n    public rippleDisabled = false;\n\n    protected get nativeElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    private rippleElementClass = 'igx-ripple__inner';\n    private rippleHostClass = 'igx-ripple';\n    private _centered = false;\n    private animationQueue = [];\n\n    constructor(\n        protected builder: AnimationBuilder,\n        protected elementRef: ElementRef,\n        protected renderer: Renderer2,\n        private zone: NgZone) { }\n    /**\n     *@hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event) {\n        this.zone.runOutsideAngular(() => this._ripple(event));\n    }\n\n    private setStyles(rippleElement: HTMLElement, styleParams: any) {\n        this.renderer.addClass(rippleElement, this.rippleElementClass);\n        this.renderer.setStyle(rippleElement, 'width', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'height', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'top', `${styleParams.top}px`);\n        this.renderer.setStyle(rippleElement, 'left', `${styleParams.left}px`);\n        if (this.rippleColor) {\n            this.renderer.setStyle(rippleElement, 'background', this.rippleColor);\n        }\n    }\n\n    private _ripple(event) {\n        if (this.rippleDisabled) {\n            return;\n        }\n\n        const target = (this.rippleTarget ? this.nativeElement.querySelector(this.rippleTarget) || this.nativeElement : this.nativeElement);\n\n        const rectBounds = target.getBoundingClientRect();\n        const radius = Math.max(rectBounds.width, rectBounds.height);\n        let left = event.clientX - rectBounds.left - radius / 2;\n        let top = event.clientY - rectBounds.top - radius / 2;\n\n        if (this._centered) {\n            left = top = 0;\n        }\n\n        const dimensions = {\n            radius,\n            top,\n            left\n        };\n\n        const rippleElement = this.renderer.createElement('span');\n\n        this.setStyles(rippleElement, dimensions);\n        this.renderer.addClass(target, this.rippleHostClass);\n        this.renderer.appendChild(target, rippleElement);\n\n        const animation = this.builder.build([\n            style({ opacity: 0.5, transform: 'scale(.3)' }),\n            animate(this.rippleDuration, style({ opacity: 0, transform: 'scale(2)' }))\n        ]).create(rippleElement);\n\n        this.animationQueue.push(animation);\n\n        animation.onDone(() => {\n            this.animationQueue.splice(this.animationQueue.indexOf(animation), 1);\n            target.removeChild(rippleElement);\n            if (this.animationQueue.length < 1) {\n                this.renderer.removeClass(target, this.rippleHostClass);\n            }\n        });\n\n        animation.play();\n\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRippleDirective],\n    exports: [IgxRippleDirective]\n})\nexport class IgxRippleModule { }\n","import {\n    Directive,\n    NgModule,\n    Input,\n    QueryList,\n    Output,\n    EventEmitter,\n    AfterContentInit,\n    ContentChildren,\n    OnDestroy,\n    HostBinding\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRadioComponent, RadioLabelPosition, IChangeRadioEventArgs } from '../../radio/radio.component';\nimport { IgxRippleModule } from '../ripple/ripple.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nconst noop = () => { };\nlet nextId = 0;\n\n/**\n * **Ignite UI for Angular Radio Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Group allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio-group name=\"radioGroup\">\n *   <igx-radio *ngFor=\"let item of ['Foo', 'Bar', 'Baz']\" value=\"{{item}}\">\n *      {{item}}\n *   </igx-radio>\n * </igx-radio-group>\n * ```\n */\n@Directive({\n    selector: 'igx-radio-group, [igxRadioGroup]',\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioGroupDirective, multi: true }]\n})\nexport class IgxRadioGroupDirective implements AfterContentInit, ControlValueAccessor, OnDestroy {\n    /**\n     * Returns reference to the child radio buttons.\n     * ```typescript\n     * let radioButtons =  this.radioGroup.radioButtons;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @ContentChildren(IgxRadioComponent) public radioButtons: QueryList<IgxRadioComponent>;\n\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio-group [value] = \"'radioButtonValue'\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let value =  this.radioGroup.value;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            this._value = newValue;\n            this._selectRadioButton();\n        }\n    }\n\n    /**\n     * Sets/gets the `name` attribute of the radio group component. All child radio buttons inherits this name.\n     * ```html\n     * <igx-radio-group name = \"Radio1\"></igx-radio-group>\n     *  ```\n     * ```typescript\n     * let name =  this.radioGroup.name;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get name(): string { return this._name; }\n    set name(newValue: string) {\n        if (this._name !== newValue) {\n            this._name = newValue;\n            this._setRadioButtonNames();\n        }\n    }\n\n    /**\n     * Sets/gets whether the radio group is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio-group [required] = \"true\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radioGroup.required;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(newValue: boolean) {\n        if (this._required !== newValue) {\n            this._required = newValue;\n            this._setRadioButtonsRequired();\n        }\n    }\n\n    /**\n     * An @Input property that allows you to disable the radio group. By default it's false.\n     * ```html\n     * <igx-radio-group [disabled]=\"true\"></igx-radio-group>\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(newValue: boolean) {\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._disableRadioButtons();\n        }\n    }\n\n    /**\n     * Sets/gets the position of the `label` in the child radio buttons.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio-group labelPosition = \"before\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radioGroup.labelPosition;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get labelPosition(): RadioLabelPosition | string { return this._labelPosition; }\n    set labelPosition(newValue: RadioLabelPosition | string) {\n        if (this._labelPosition !== newValue) {\n            this._labelPosition = newValue === RadioLabelPosition.BEFORE ? RadioLabelPosition.BEFORE : RadioLabelPosition.AFTER;\n            this._setRadioButtonLabelPosition();\n        }\n    }\n\n    /**\n     * Sets/gets the selected child radio button.\n     * ```typescript\n     * let selectedButton = this.radioGroup.selected;\n     * this.radioGroup.selected = selectedButton;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: IgxRadioComponent | null) {\n        if (this._selected !== selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n        }\n    }\n\n    /**\n     * An event that is emitted after the radio group `value` is changed.\n     * Provides references to the selected `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioGroupDirective\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-radio-group')\n    public cssClass = 'igx-radio-group';\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    private _name = `igx-radio-group-${nextId++}`;\n    /**\n     *@hidden\n     */\n    private _value: any = null;\n    /**\n     *@hidden\n     */\n    private _selected: IgxRadioComponent | null = null;\n    /**\n     *@hidden\n     */\n    private _isInitialized = false;\n    /**\n     *@hidden\n     */\n    private _labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     *@hidden\n     */\n    private _disabled = false;\n    /**\n     *@hidden\n     */\n    private _required = false;\n    /**\n     *@hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    ngAfterContentInit() {\n        // The initial value can possibly be set by NgModel and it is possible that\n        // the OnInit of the NgModel occurs after the OnInit of this class.\n        this._isInitialized = true;\n\n        setTimeout(() => { this._initRadioButtons(); });\n    }\n\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true` and selected property will contain the selected `IgxRadioComponent`.\n     * ```typescript\n     * this.radioGroup.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this.value = value;\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.registerOnTouched(fn);\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    private _initRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n                button.labelPosition = this._labelPosition;\n                button.disabled = this._disabled;\n                button.required = this._required;\n\n                if (this._value && button.value === this._value) {\n                    button.checked = true;\n                    this._selected = button;\n                }\n\n                button.change.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._selectedRadioButtonChanged(ev));\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectedRadioButtonChanged(args: IChangeRadioEventArgs) {\n        if (this._selected !== args.radio) {\n            if (this._selected) {\n                this._selected.checked = false;\n            }\n            this._selected = args.radio;\n        }\n\n        this._value = args.value;\n\n        if (this._isInitialized) {\n            this.change.emit(args);\n            this._onChangeCallback(this.value);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonNames() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectRadioButton() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                if (!this._value) {\n                    // no value - uncheck all radio buttons\n                    if (button.checked) {\n                        button.checked = false;\n                    }\n                } else {\n                    if (this._value === button.value) {\n                        // selected button\n                        if (this._selected !== button) {\n                            this._selected = button;\n                        }\n\n                        if (!button.checked) {\n                            button.select();\n                        }\n                    } else {\n                        // non-selected button\n                        if (button.checked) {\n                            button.checked = false;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonLabelPosition() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.labelPosition = this._labelPosition;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _disableRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.disabled = this._disabled;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonsRequired() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.required = this._required;\n            });\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRadioGroupDirective, IgxRadioComponent],\n    exports: [IgxRadioGroupDirective, IgxRadioComponent],\n    imports: [IgxRippleModule]\n})\nexport class IgxRadioModule { }\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    OnDestroy,\n    Renderer2,\n    SimpleChanges,\n    AfterViewChecked\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\ninterface ISearchInfo {\n    searchedText: string;\n    content: string;\n    matchCount: number;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n}\n\n/**\n * An interface describing information for the active highlight.\n */\nexport interface IActiveHighlightInfo {\n    /**\n     * The row index of the highlight. This property is deprecated, use `row` instead.\n     */\n    rowIndex?: number;\n    /**\n     * The column index of the highlight. This property is deprecated, use `column` instead.\n     */\n    columnIndex?: number;\n    /**\n     * The page index of the highlight. This property is deprecated.\n     */\n    page?: number;\n    /**\n     * The row of the highlight.\n     */\n    row?: any;\n    /**\n     * The column of the highlight.\n     */\n    column?: any;\n    /**\n     * The index of the highlight.\n     */\n    index: number;\n}\n\n@Directive({\n    selector: '[igxTextHighlight]'\n})\nexport class IgxTextHighlightDirective implements AfterViewInit, AfterViewChecked, OnDestroy, OnChanges {\n    private static onActiveElementChanged = new EventEmitter<string>();\n    public static highlightGroupsMap = new Map<string, IActiveHighlightInfo>();\n\n    private _lastSearchInfo: ISearchInfo;\n    private _div = null;\n    private _observer: MutationObserver = null;\n    private _nodeWasRemoved = false;\n    private _forceEvaluation = false;\n    private _activeElementIndex = -1;\n    private _valueChanged: boolean;\n\n    /**\n     * Determines the `CSS` class of the highlight elements.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [cssClass]=\"myClass\">\n     * </div>\n     * ```\n     */\n    @Input('cssClass')\n    public cssClass: string;\n\n    /**\n     * Determines the `CSS` class of the active highlight element.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [activeCssClass]=\"activeHighlightClass\">\n     * </div>\n     * ```\n     */\n    @Input('activeCssClass')\n    public activeCssClass: string;\n\n    /**\n     * @hidden\n     */\n    @Input('containerClass')\n    public containerClass: string;\n\n    /**\n     * Identifies the highlight within a unique group.\n     * This allows it to have several different highlight groups,\n     * with each of them having their own active highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [groupName]=\"myGroupName\">\n     * </div>\n     * ```\n     */\n    @Input('groupName')\n    public groupName = '';\n\n    private _value = '';\n\n    /**\n     * The underlying value of the element that will be highlighted.\n     *\n     * ```typescript\n     * // get\n     * const elementValue = this.textHighlight.value;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <div\n     *   igxTextHighlight\n     *   [value]=\"newValue\">\n     * </div>\n     * ```\n     */\n    @Input('value')\n    public get value(): any {\n        return this._value;\n    }\n    public set value(value: any) {\n        if (value === undefined || value === null) {\n            this._value = '';\n        } else {\n            this._value = value;\n        }\n    }\n\n    /**\n     * The identifier of the row on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [row]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('row')\n    public row: any;\n\n    /**\n     * The identifier of the column on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [column]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('column')\n    public column: any;\n\n    @Input('page')\n    @DeprecateProperty(`IgxTextHighlightDirective 'page' input property is deprecated.`)\n    public page: number;\n\n    /**\n     * @hidden\n     */\n    public get lastSearchInfo(): ISearchInfo {\n        return this._lastSearchInfo;\n    }\n\n    /**\n     * @hidden\n     */\n    public parentElement: any;\n\n    private _container: any;\n\n    private destroy$ = new Subject<boolean>();\n\n    /**\n     * Activates the highlight at a given index.\n     * (if such index exists)\n     */\n    public static setActiveHighlight(groupName: string, highlight: IActiveHighlightInfo) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, highlight);\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public static clearActiveHighlight(groupName) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, {\n            index: -1\n        });\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    constructor(private element: ElementRef, public renderer: Renderer2) {\n        IgxTextHighlightDirective.onActiveElementChanged.pipe(takeUntil(this.destroy$)).subscribe((groupName) => {\n            if (this.groupName === groupName) {\n                if (this._activeElementIndex !== -1) {\n                    this.deactivate();\n                }\n                this.activateIfNecessary();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this.clearHighlight();\n\n        if (this._observer !== null) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.value && !changes.value.firstChange) {\n            this._valueChanged = true;\n        } else if ((changes.row !== undefined && !changes.row.firstChange) ||\n            (changes.column !== undefined && !changes.column.firstChange) ||\n            (changes.page !== undefined && !changes.page.firstChange)) {\n            if (this._activeElementIndex !== -1) {\n                this.deactivate();\n            }\n            this.activateIfNecessary();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.parentElement = this.renderer.parentNode(this.element.nativeElement);\n\n        if (IgxTextHighlightDirective.highlightGroupsMap.has(this.groupName) === false) {\n            IgxTextHighlightDirective.highlightGroupsMap.set(this.groupName, {\n                index: -1\n            });\n        }\n\n        this._lastSearchInfo = {\n            searchedText: '',\n            content: this.value,\n            matchCount: 0,\n            caseSensitive: false,\n            exactMatch: false\n        };\n\n        this._container = this.parentElement.firstElementChild;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewChecked() {\n        if (this._valueChanged) {\n            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);\n            this.activateIfNecessary();\n            this._valueChanged = false;\n        }\n    }\n\n    /**\n     * Clears the existing highlight and highlights the searched text.\n     * Returns how many times the element contains the searched text.\n     */\n    public highlight(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n\n        if (this.searchNeedsEvaluation(text, caseSensitiveResolved, exactMatchResolved)) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n            this._lastSearchInfo.content = this.value;\n\n            if (text === '' || text === undefined || text === null) {\n                this.clearHighlight();\n            } else {\n                this.clearChildElements(true);\n                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive, exactMatch);\n            }\n        } else if (this._nodeWasRemoved) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n        }\n\n        return this._lastSearchInfo.matchCount;\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public clearHighlight(): void {\n        this.clearChildElements(false);\n\n        this._lastSearchInfo.searchedText = '';\n        this._lastSearchInfo.matchCount = 0;\n    }\n\n    /**\n     * Activates the highlight if it is on the currently active row, column and page.\n     */\n    public activateIfNecessary(): void {\n        const group = IgxTextHighlightDirective.highlightGroupsMap.get(this.groupName);\n        const column = group.columnIndex === undefined ? group.column : group.columnIndex;\n        const row = group.rowIndex === undefined ? group.row : group.rowIndex;\n\n        if (column === this.column && row === this.row && group.page === this.page) {\n            this.activate(group.index);\n        }\n    }\n\n    /**\n     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.\n     * Should be used only when necessary as using many observers may lead to performance degradation.\n     */\n    public observe(): void {\n        if (this._observer === null) {\n            const callback = (mutationList) => {\n                mutationList.forEach((mutation) => {\n                    const removedNodes = Array.from(mutation.removedNodes);\n                    removedNodes.forEach((n) => {\n                        if (n === this._container) {\n                            this._nodeWasRemoved = true;\n                            this.clearChildElements(false);\n                        }\n                    });\n\n                    const addedNodes = Array.from(mutation.addedNodes);\n                    addedNodes.forEach((n) => {\n                        if (n === this.parentElement.firstElementChild && this._nodeWasRemoved) {\n                            this._container = this.parentElement.firstElementChild;\n                            this._nodeWasRemoved = false;\n\n                            this._forceEvaluation = true;\n                            this.highlight(this._lastSearchInfo.searchedText,\n                                this._lastSearchInfo.caseSensitive,\n                                this._lastSearchInfo.exactMatch);\n                            this._forceEvaluation = false;\n\n                            this.activateIfNecessary();\n                            this._observer.disconnect();\n                            this._observer = null;\n                        }\n                    });\n                });\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.parentElement, {childList: true});\n        }\n    }\n\n    private activate(index: number) {\n        this.deactivate();\n\n        if (this._div !== null) {\n            const spans = this._div.querySelectorAll('span');\n            this._activeElementIndex = index;\n\n            if (spans.length <= index) {\n                return;\n            }\n\n            const elementToActivate = spans[index];\n            this.renderer.addClass(elementToActivate, this.activeCssClass);\n            this.renderer.setAttribute(elementToActivate, 'style', 'background:orange;color:black');\n        }\n    }\n\n    private deactivate() {\n        if (this._activeElementIndex === -1) {\n            return;\n        }\n\n        const spans = this._div.querySelectorAll('span');\n\n        if (spans.length <= this._activeElementIndex) {\n            this._activeElementIndex = -1;\n            return;\n        }\n\n        const elementToDeactivate = spans[this._activeElementIndex];\n        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);\n        this.renderer.setAttribute(elementToDeactivate, 'style', 'background:yellow;color:black');\n        this._activeElementIndex = -1;\n    }\n\n    private clearChildElements(originalContentHidden: boolean): void {\n        this.renderer.setProperty(this.element.nativeElement, 'hidden', originalContentHidden);\n\n        if (this._div !== null) {\n            this.renderer.removeChild(this.parentElement, this._div);\n\n            this._div = null;\n            this._activeElementIndex = -1;\n        }\n    }\n\n    private getHighlightedText(searchText: string, caseSensitive: boolean, exactMatch: boolean) {\n        this.appendDiv();\n\n        const stringValue = String(this.value);\n        const contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;\n        const searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;\n\n        let matchCount = 0;\n\n        if (exactMatch) {\n            if (contentStringResolved === searchTextResolved) {\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this.cssClass}\" style=\"background:yellow;color:black\">${stringValue}</span>`);\n                matchCount++;\n            } else {\n                this.appendText(stringValue);\n            }\n        } else {\n            let foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);\n            let previousMatchEnd = 0;\n\n            while (foundIndex !== -1) {\n                const start = foundIndex;\n                const end = foundIndex + searchTextResolved.length;\n\n                this.appendText(stringValue.substring(previousMatchEnd, start));\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this.cssClass}\" style=\"background:yellow;color:black\">${stringValue.substring(start, end)}</span>`);\n\n                previousMatchEnd = end;\n                matchCount++;\n\n                foundIndex = contentStringResolved.indexOf(searchTextResolved, end);\n            }\n\n            this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));\n        }\n\n        return matchCount;\n    }\n\n    private appendText(text: string) {\n        const textElement = this.renderer.createText(text);\n        this.renderer.appendChild(this._div, textElement);\n    }\n\n    private appendSpan(outerHTML: string) {\n        const span = this.renderer.createElement('span');\n        this.renderer.appendChild(this._div, span);\n        this.renderer.setProperty(span, 'outerHTML', outerHTML);\n    }\n\n    private appendDiv() {\n        this._div = this.renderer.createElement('div');\n        if ( this.containerClass) {\n            this.renderer.addClass(this._div, this.containerClass);\n        }\n        this.renderer.appendChild(this.parentElement, this._div);\n    }\n\n    private searchNeedsEvaluation(text: string, caseSensitive: boolean, exactMatch: boolean): boolean {\n        const searchedText = this._lastSearchInfo.searchedText;\n\n        return !this._nodeWasRemoved &&\n            (searchedText === null ||\n                searchedText !== text ||\n                this._lastSearchInfo.content !== this.value ||\n                this._lastSearchInfo.caseSensitive !== caseSensitive ||\n                this._lastSearchInfo.exactMatch !== exactMatch ||\n                this._forceEvaluation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextHighlightDirective],\n    exports: [IgxTextHighlightDirective]\n})\nexport class IgxTextHighlightModule { }\n","import { Directive, ElementRef, HostListener, Input, NgModule } from '@angular/core';\n\n@Directive({\n    exportAs: 'igxTextSelection',\n    selector: '[igxTextSelection]'\n})\nexport class IgxTextSelectionDirective {\n\n    private selectionState = true;\n\n    /**\n     * Returns whether the input element is selectable through the directive.\n     *\n     * ```typescript\n     * // get\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public firstName: IgxTextSelectionDirective;\n     *\n     * public getFirstNameSelectionStatus() {\n     *  return this.firstName.selected;\n     * }\n     * ```\n     */\n    @Input('igxTextSelection')\n    get selected(): boolean {\n        return this.selectionState;\n    }\n\n    /**\n     *  Determines whether the input element could be selected through the directive.\n     *\n     *```html\n     * <!--set-->\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   [igxTextSelection]=\"true\">\n     * </input>\n     *\n     * <input\n     *   type=\"text\"\n     *   id=\"lastName\"\n     *   igxTextSelection\n     *   [selected]=\"true\">\n     * </input>\n     * ```\n     */\n    set selected(val: boolean) {\n        this.selectionState = val;\n    }\n\n    /**\n     * Returns the nativeElement of the element where the directive was applied.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n    *    id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public getNativeElement() {\n     *  return this.inputElement.nativeElement;\n     * }\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    onFocus() {\n        this.trigger();\n    }\n\n    constructor(private element: ElementRef) { }\n\n    /**\n     * Triggers the selection of the element if it is marked as selectable.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public triggerElementSelection() {\n     *  this.inputElement.trigger();\n     * }\n     * ```\n     */\n    trigger() {\n        if (this.selected && this.nativeElement.value.length) {\n            requestAnimationFrame(() => this.nativeElement.setSelectionRange(0, this.nativeElement.value.length));\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextSelectionDirective],\n    exports: [IgxTextSelectionDirective]\n})\nexport class IgxTextSelectionModule { }\n","import {\n    Directive, ElementRef, HostListener, Input, NgModule, ChangeDetectorRef, OnInit,\n    Output, EventEmitter, Optional, HostBinding, OnDestroy, Inject\n} from '@angular/core';\nimport { useAnimation } from '@angular/animations';\nimport { scaleInCenter } from '../../animations/scale/index';\nimport { fadeOut } from '../../animations/fade/index';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { HorizontalAlignment, AutoPositionStrategy, PositionSettings, OverlaySettings } from '../../services';\nimport { CommonModule } from '@angular/common';\nimport { IgxNavigationService } from '../../core/navigation';\nimport { IgxToggleDirective, IgxToggleActionDirective } from '../toggle/toggle.directive';\nimport { Subscription } from 'rxjs';\n\nexport interface ITooltipShowEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\nexport interface ITooltipHideEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\n\n/**\n * **Ignite UI for Angular Tooltip Target** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip Target directive is used to mark an HTML element in the markup as one that has a tooltip.\n * The tooltip target is used in combination with the Ignite UI for Angular Tooltip by assigning the exported tooltip reference to the\n * target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltipTarget',\n    selector: '[igxTooltipTarget]'\n})\nexport class IgxTooltipTargetDirective extends IgxToggleActionDirective implements OnInit {\n    /**\n     * Gets/sets the amount of milliseconds that should pass before showing the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipShowDelay = this.tooltipTarget.showDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" showDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('showDelay')\n    public showDelay = 500;\n\n    /**\n     * Gets/sets the amount of milliseconds that should pass before hiding the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipHideDelay = this.tooltipTarget.hideDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" hideDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('hideDelay')\n    public hideDelay = 500;\n\n    /**\n     * Specifies if the tooltip should not show when hovering its target with the mouse. (defaults to false)\n     * While setting this property to 'true' will disable the user interactions that shows/hides the tooltip,\n     * the developer will still be able to show/hide the tooltip through the API.\n     *\n     * ```typescript\n     * // get\n     * let tooltipDisabledValue = this.tooltipTarget.tooltipDisabled;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" [tooltipDisabled]=\"true\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('tooltipDisabled')\n    public tooltipDisabled = false;\n\n    /**\n     * @hidden\n     */\n    @Input('igxTooltipTarget')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this._navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    /**\n     * Gets the respective native element of the directive.\n     *\n     * ```typescript\n     * let tooltipTargetElement = this.tooltipTarget.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * Indicates if the tooltip that is is associated with this target is currently hidden.\n     *\n     * ```typescript\n     * let tooltipHiddenValue = this.tooltipTarget.tooltipHidden;\n     * ```\n     */\n    public get tooltipHidden(): boolean {\n        return !this.target || this.target.collapsed;\n    }\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts showing.\n     * This event is fired before the start of the countdown to showing the tooltip.\n     *\n     * ```typescript\n     * tooltipShowing(args: ITooltipShowEventArgs) {\n     *    alert(\"Tooltip started showing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipShow)='tooltipShowing($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipShow = new EventEmitter<ITooltipShowEventArgs>();\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts hiding.\n     * This event is fired before the start of the countdown to hiding the tooltip.\n     *\n     * ```typescript\n     * tooltipHiding(args: ITooltipHideEventArgs) {\n     *    alert(\"Tooltip started hiding!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipHide)='tooltipHiding($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipHide = new EventEmitter<ITooltipHideEventArgs>();\n\n    constructor(private _element: ElementRef,\n        @Optional() private _navigationService: IgxNavigationService) {\n        super(_element, _navigationService);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        const positionSettings: PositionSettings = {\n            target: this.nativeElement,\n            horizontalDirection: HorizontalAlignment.Center,\n            horizontalStartPoint: HorizontalAlignment.Center,\n            openAnimation: useAnimation(scaleInCenter, { params: { duration: '150ms' } }),\n            closeAnimation: useAnimation(fadeOut, { params: { duration: '75ms' } })\n        };\n\n        this._overlayDefaults.positionStrategy = new AutoPositionStrategy(positionSettings);\n        this._overlayDefaults.closeOnOutsideClick = false;\n    }\n\n    private checkOutletAndOutsideClick() {\n        if (this.closeOnOutsideClick !== undefined) {\n            this._overlayDefaults.closeOnOutsideClick = this.closeOnOutsideClick;\n        }\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n    }\n\n    private get mergedOverlaySettings() {\n        return Object.assign({}, this._overlayDefaults, this.overlaySettings);\n    }\n\n    // Return true if the execution in onMouseEnter should be terminated after this method\n    private preMouseEnterCheck() {\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n            this.target.toBeShown = false;\n        }\n\n        // If Tooltip is opened or about to be hidden\n        if (!this.target.collapsed || this.target.toBeHidden) {\n            clearTimeout(this.target.timeoutId);\n\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return true;\n            }\n\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        return false;\n    }\n\n    // Return true if the execution in onMouseLeave should be terminated after this method\n    private preMouseLeaveCheck(): boolean {\n        clearTimeout(this.target.timeoutId);\n\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            this.target.toBeShown = false;\n            this.target.toBeHidden = false;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:keydown.escape', ['$event'])\n    public onKeydownEscape() {\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.close();\n        this.target.toBeHidden = false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n\n            this.target.forceClose(this.mergedOverlaySettings);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseenter')\n    public onMouseEnter() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseEnterCheck();\n        if (shouldReturn) {\n            return;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseleave')\n    public onMouseLeave() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseLeaveCheck();\n        if (shouldReturn || this.target.collapsed) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('touchstart', ['$event'])\n    public onTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        event.preventDefault();\n        this.showTooltip();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:touchstart', ['$event'])\n    public onDocumentTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        if (this.nativeElement !== event.target &&\n            !this.nativeElement.contains(event.target)\n        ) {\n            this.hideTooltip();\n        }\n    }\n\n    /**\n     * Shows the tooltip by respecting the 'showDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.showTooltip();\n     * ```\n     */\n    public showTooltip() {\n        clearTimeout(this.target.timeoutId);\n\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * Hides the tooltip by respecting the 'hideDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.hideTooltip();\n     * ```\n     */\n    public hideTooltip() {\n        if (this.target.collapsed && this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n        }\n\n        if (this.target.collapsed || this.target.toBeHidden) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n}\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Tooltip** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.\n * The tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the\n * respective target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltip',\n    selector: '[igxTooltip]'\n})\nexport class IgxTooltipDirective extends IgxToggleDirective {\n\n    /**\n     * @hidden\n     */\n    public timeoutId;\n\n    /**\n     * @hidden\n     * Returns whether close time out has started\n     */\n    public toBeHidden = false;\n\n    /**\n     * @hidden\n     * Returns whether open time out has started\n     */\n    public toBeShown = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--desktop')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * Gets/sets any tooltip related data.\n     * The 'context' can be used for storing any information that is necessary\n     * to access when working with the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipContext = this.tooltip.context;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.tooltip.context = \"Tooltip's context\";\n     * ```\n     */\n    @Input('context')\n    public context;\n\n    /**\n     * Identifier for the tooltip.\n     * If this is property is not explicitly set, it will be automatically generated.\n     *\n     * ```typescript\n     * let tooltipId = this.tooltip.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-tooltip-${NEXT_ID++}`;\n\n    /**\n     * Get the role attribute of the tooltip.\n     *\n     * ```typescript\n     * let tooltipRole = this.tooltip.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'tooltip';\n    }\n\n    /** @hidden */\n    constructor(\n        elementRef: ElementRef,\n        cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) overlayService: IgxOverlayService,\n        @Optional() navigationService: IgxNavigationService) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(elementRef, cdr, overlayService, navigationService);\n    }\n\n    /**\n     * If there is open animation in progress this method will finish is.\n     * If there is no open animation in progress this method will open the toggle with no animation.\n     * @param overlaySettings setting to use for opening the toggle\n     */\n    protected forceOpen(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        if (hasOpenAnimation) {\n            info.openAnimationPlayer.finish();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n        } else if (this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.openAnimation;\n            overlaySettings.positionStrategy.settings.openAnimation = null;\n            this.open(overlaySettings);\n            overlaySettings.positionStrategy.settings.openAnimation = animation;\n        }\n    }\n\n    /**\n     * If there is close animation in progress this method will finish is.\n     * If there is no close animation in progress this method will close the toggle with no animation.\n     * @param overlaySettings settings to use for closing the toggle\n     */\n    protected forceClose(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n\n        if (hasCloseAnimation) {\n            info.closeAnimationPlayer.finish();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n        } else if (!this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.closeAnimation;\n            overlaySettings.positionStrategy.settings.closeAnimation = null;\n            this.close();\n            overlaySettings.positionStrategy.settings.closeAnimation = animation;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    exports: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    imports: [CommonModule],\n    providers: [IgxOverlayService]\n})\nexport class IgxTooltipModule { }\n\n","/**\n * Provides base filtering operations\n * Implementations should be Singleton\n *\n * @export\n */\nexport class IgxFilteringOperand {\n    public operations: IFilteringOperation[];\n\n    public constructor() {\n        this.operations = [{\n            name: 'null',\n            isUnary: true,\n            iconName: 'is_null',\n            logic: (target: any) => {\n                return target === null;\n            }\n        }, {\n            name: 'notNull',\n            isUnary: true,\n            iconName: 'is_not_null',\n            logic: (target: any) => {\n                return target !== null;\n            }\n        }];\n    }\n\n    public conditionList(): string[] {\n        return this.operations.map((element) => element.name);\n    }\n\n    public condition(name: string): IFilteringOperation {\n        return this.operations.find((element) => element.name === name);\n    }\n\n    public append(operation: IFilteringOperation) {\n        this.operations.push(operation);\n    }\n}\n\n/**\n * Provides filtering operations for booleans\n *\n * @export\n */\nexport class IgxBooleanFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxBooleanFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'all',\n            isUnary: true,\n            iconName: 'all',\n            logic: (target: boolean) => {\n                return true;\n            }\n        }, {\n            name: 'true',\n            isUnary: true,\n            iconName: 'is_true',\n            logic: (target: boolean) => {\n                return !!(target && target !== null && target !== undefined);\n            }\n        }, {\n            name: 'false',\n            isUnary: true,\n            iconName: 'is_false',\n            logic: (target: boolean) => {\n                return !target && target !== null && target !== undefined;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: boolean) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: boolean) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxBooleanFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n}\n\n/**\n * Provides filtering operations for Dates\n *\n * @export\n */\nexport class IgxDateFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxDateFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year === searchp.year &&\n                    targetp.month === searchp.month &&\n                    targetp.day === searchp.day;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return true;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year !== searchp.year ||\n                    targetp.month !== searchp.month ||\n                    targetp.day !== searchp.day;\n            }\n        }, {\n            name: 'before',\n            isUnary: false,\n            iconName: 'is_before',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target < searchVal;\n            }\n        }, {\n            name: 'after',\n            isUnary: false,\n            iconName: 'is_after',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target > searchVal;\n            }\n        }, {\n            name: 'today',\n            isUnary: true,\n            iconName: 'today',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yMd');\n                return d.year === now.year &&\n                    d.month === now.month &&\n                    d.day === now.day;\n            }\n        }, {\n            name: 'yesterday',\n            isUnary: true,\n            iconName: 'yesterday',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const td = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const y = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date());\n                const yesterday = IgxDateFilteringOperand.getDateParts(y, 'yMd');\n                return td.year === yesterday.year &&\n                    td.month === yesterday.month &&\n                    td.day === yesterday.day;\n            }\n        }, {\n            name: 'thisMonth',\n            isUnary: true,\n            iconName: 'this_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'lastMonth',\n            isUnary: true,\n            iconName: 'last_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (!now.month) {\n                    now.month = 11;\n                    now.year -= 1;\n                } else {\n                    now.month--;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'nextMonth',\n            isUnary: true,\n            iconName: 'next_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (now.month === 11) {\n                    now.month = 0;\n                    now.year += 1;\n                } else {\n                    now.month++;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'thisYear',\n            isUnary: true,\n            iconName: 'this_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year;\n            }\n        }, {\n            name: 'lastYear',\n            isUnary: true,\n            iconName: 'last_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year - 1;\n            }\n        }, {\n            name: 'nextYear',\n            isUnary: true,\n            iconName: 'next_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year + 1;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: Date) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: Date) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxDateFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * Splits a Date object into parts\n     *\n     * @memberof IgxDateFilteringOperand\n     */\n    public static getDateParts(date: Date, dateFormat?: string): IDateParts {\n        const res = {\n            day: null,\n            hours: null,\n            milliseconds: null,\n            minutes: null,\n            month: null,\n            seconds: null,\n            year: null\n        };\n        if (!date || !dateFormat) {\n            return res;\n        }\n        if (dateFormat.indexOf('y') >= 0) {\n            res.year = date.getFullYear();\n        }\n        if (dateFormat.indexOf('M') >= 0) {\n            res.month = date.getMonth();\n        }\n        if (dateFormat.indexOf('d') >= 0) {\n            res.day = date.getDate();\n        }\n        if (dateFormat.indexOf('h') >= 0) {\n            res.hours = date.getHours();\n        }\n        if (dateFormat.indexOf('m') >= 0) {\n            res.minutes = date.getMinutes();\n        }\n        if (dateFormat.indexOf('s') >= 0) {\n            res.seconds = date.getSeconds();\n        }\n        if (dateFormat.indexOf('f') >= 0) {\n            res.milliseconds = date.getMilliseconds();\n        }\n        return res;\n    }\n\n    private validateInputData(target: Date) {\n        if (!(target instanceof Date)) {\n            throw new Error('Could not perform filtering on \\'date\\' column because the datasource object type is not \\'Date\\'.');\n        }\n    }\n}\n\n/**\n * Provides filtering operations for numbers\n *\n * @export\n */\nexport class IgxNumberFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxNumberFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: number, searchVal: number) => {\n                return target === searchVal;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: number, searchVal: number) => {\n                return target !== searchVal;\n            }\n        }, {\n            name: 'greaterThan',\n            isUnary: false,\n            iconName: 'greater_than',\n            logic: (target: number, searchVal: number) => {\n                return target > searchVal;\n            }\n        }, {\n            name: 'lessThan',\n            isUnary: false,\n            iconName: 'less_than',\n            logic: (target: number, searchVal: number) => {\n                return target < searchVal;\n            }\n        }, {\n            name: 'greaterThanOrEqualTo',\n            isUnary: false,\n            iconName: 'greater_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target >= searchVal;\n            }\n        }, {\n            name: 'lessThanOrEqualTo',\n            isUnary: false,\n            iconName: 'less_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target <= searchVal;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: number) => {\n                return target === null || target === undefined || isNaN(target);\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: number) => {\n                return target !== null && target !== undefined && !isNaN(target);\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxNumberFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n}\n\n/**\n * Provides filtering operations for strings\n *\n * @export\n */\nexport class IgxStringFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxStringFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'contains',\n            isUnary: false,\n            iconName: 'contains',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) !== -1;\n            }\n        }, {\n            name: 'doesNotContain',\n            isUnary: false,\n            iconName: 'does_not_contain',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) === -1;\n            }\n        }, {\n            name: 'startsWith',\n            isUnary: false,\n            iconName: 'starts_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.startsWith(search);\n            }\n        }, {\n            name: 'endsWith',\n            isUnary: false,\n            iconName: 'ends_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.endsWith(search);\n            }\n        }, {\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target === search;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target !== search;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: string) => {\n                return target === null || target === undefined || target.length === 0;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: string) => {\n                return target !== null && target !== undefined && target.length > 0;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxStringFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * Applies case sensitivity on strings if provided\n     *\n     * @memberof IgxStringFilteringOperand\n     */\n    public static applyIgnoreCase(a: string, ignoreCase: boolean): string {\n        a = a || '';\n        // bulletproof\n        return ignoreCase ? ('' + a).toLowerCase() : a;\n    }\n}\n\n/**\n * Interface describing filtering operations\n *\n * @export\n */\nexport interface IFilteringOperation {\n    name: string;\n    isUnary: boolean;\n    iconName: string;\n    logic: (value: any, searchVal?: any, ignoreCase?: boolean) => boolean;\n}\n\n/**\n * Interface describing Date object in parts\n *\n * @export\n */\nexport interface IDateParts {\n    year: number;\n    month: number;\n    day: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n    milliseconds: number;\n}\n\n/**\n * @hidden\n */\nexport class InFilteringOperation implements IFilteringOperation {\n    name = 'in';\n    isUnary = false;\n    iconName = 'is_in';\n    logic = (target: any, searchVal: Set<any>) => {\n        return searchVal.has(target);\n    }\n}\n\n/**\n * @hidden\n */\nexport class InDateFilteringOperation extends InFilteringOperation {\n    logic = (target: any, searchVal: Set<any>) => {\n        if (target instanceof Date) {\n            return searchVal.has(new Date(target.getFullYear(), target.getMonth(), target.getDate()).toISOString());\n        }\n        return searchVal.has(target);\n    }\n}\n","import { IFilteringExpressionsTree } from './filtering-expressions-tree';\nimport { FilteringStrategy, IFilteringStrategy } from './filtering-strategy';\n\nexport const filteringStateDefaults = {\n    strategy: new FilteringStrategy()\n};\n\nexport declare interface IFilteringState {\n    expressionsTree: IFilteringExpressionsTree;\n    strategy?: IFilteringStrategy;\n}\n","import { ISortingExpression } from './sorting-expression.interface';\n\n/**\n * @hidden\n */\nexport class GroupedRecords extends Array<any> {}\n\nexport interface IGroupByRecord {\n    expression: ISortingExpression;\n    level: number;\n    records: GroupedRecords;\n    value: any;\n    groupParent: IGroupByRecord;\n    groups?: IGroupByRecord[];\n    height: number;\n }\n","import { Injectable, SecurityContext, Inject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { HttpClient } from '@angular/common/http';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * **Ignite UI for Angular Icon Service** -\n *\n * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.\n * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given fontSet.\n *\n * Example:\n * ```typescript\n * this.iconService.registerFontSetAlias('material', 'material-icons');\n * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n * ```\n */\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class IgxIconService {\n    private _fontSet = 'material-icons';\n    private _fontSetAliases = new Map<string, string>();\n    private _svgContainer: HTMLElement;\n    private _cachedSvgIcons: Set<string> = new Set<string>();\n\n    constructor (private _sanitizer: DomSanitizer, private _httpClient: HttpClient, @Inject(DOCUMENT) private _document: any) { }\n\n    /**\n     *  Returns the default font set.\n     *```typescript\n     *   const defaultFontSet = this.iconService.defaultFontSet;\n     * ```\n     */\n    get defaultFontSet(): string {\n        return this._fontSet;\n    }\n\n    /**\n     *  Sets the default font set.\n     *```typescript\n     *   this.iconService.defaultFontSet = 'svg-flags';\n     * ```\n     */\n    set defaultFontSet(className: string) {\n        this._fontSet = className;\n    }\n\n    /**\n     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.\n     *```typescript\n     *   this.iconService.registerFontSetAlias('material', 'material-icons');\n     * ```\n     */\n    public registerFontSetAlias(alias: string, className: string = alias): this {\n        this._fontSetAliases.set(alias, className);\n        return this;\n    }\n\n    /**\n     *  Returns the custom class, if any, associated to a given fontSet.\n     *```typescript\n     *   const fontSetClass = this.iconService.fontSetClassName('material');\n     * ```\n     */\n    public fontSetClassName(alias: string): string {\n        return this._fontSetAliases.get(alias) || alias;\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is an url.\n     *```typescript\n     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n     * ```\n     */\n    public addSvgIcon(iconName: string, url: string, fontSet: string = '') {\n        if (iconName && url) {\n            const safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);\n            if (!safeUrl) {\n                throw new Error(`The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: \"${url}\".`);\n            }\n\n            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n            if (!sanitizedUrl) {\n                throw new Error(`The URL provided was not trusted as a resource URL: \"${url}\".`);\n            }\n\n            this.fetchSvg(iconName, url, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `url` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is its text.\n     *```typescript\n     *   this.iconService.addSvgIcon('simple', '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\">\n     *   <path d=\"M74 74h54v54H74\" /></svg>', 'svg-flags');\n     * ```\n     */\n    public addSvgIconFromText(iconName: string, iconText: string, fontSet: string = '') {\n        if (iconName && iconText) {\n            this.cacheSvgIcon(iconName, iconText, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `iconText` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Returns wheather a given SVG image is present in the cache.\n     *```typescript\n     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');\n     * ```\n     */\n    public isSvgIconCached(iconName: string, fontSet: string = ''): boolean {\n        const iconKey = this.getSvgIconKey(iconName, fontSet);\n        return this._cachedSvgIcons.has(iconKey);\n    }\n\n    /**\n     *  Returns the key of a cached SVG image.\n     *```typescript\n     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');\n     * ```\n     */\n    public getSvgIconKey(iconName: string, fontSet: string = '') {\n        return fontSet + '_' + iconName;\n    }\n\n    /**\n     * @hidden\n     */\n    private fetchSvg(iconName: string, url: string, fontSet: string = '') {\n        const request = this._httpClient.get(url, { responseType: 'text' });\n        const subscription = request.subscribe((value: string) => {\n            this.cacheSvgIcon(iconName, value, fontSet);\n        }, (error) => {\n            throw new Error(`Could not fetch SVG from url: ${url}; error: ${error.message}`);\n        }, () => {\n            subscription.unsubscribe();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    private cacheSvgIcon(iconName: string, value: string, fontSet: string = '') {\n        if (iconName && value) {\n            this.ensureSvgContainerCreated();\n\n            const div = this._document.createElement('DIV');\n            div.innerHTML = value;\n            const svg = div.querySelector('svg') as SVGElement;\n\n            if (svg) {\n                const iconKey = this.getSvgIconKey(iconName, fontSet);\n\n                svg.setAttribute('id', iconKey);\n                svg.setAttribute('fit', '');\n                svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n                svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n                if (this._cachedSvgIcons.has(iconKey)) {\n                    const oldChild = this._svgContainer.querySelector(`svg[id='${iconKey}']`);\n                    this._svgContainer.removeChild(oldChild);\n                }\n\n                this._svgContainer.appendChild(svg);\n                this._cachedSvgIcons.add(iconKey);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private ensureSvgContainerCreated() {\n        if (!this._svgContainer) {\n            this._svgContainer = this._document.documentElement.querySelector('.igx-svg-container');\n            if (!this._svgContainer) {\n                this._svgContainer = this._document.createElement('DIV');\n                this._svgContainer.classList.add('igx-svg-container');\n                this._document.documentElement.appendChild(this._svgContainer);\n            }\n        }\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { IgxIconService } from './icon.service';\n\n/**\n * **Ignite UI for Angular Icon** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/icon.html)\n *\n * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons\n * support custom colors and can be marked as active or disabled using the `isActive` property. This will change the appearence\n * of the icon.\n *\n * Example:\n * ```html\n * <igx-icon color=\"#00ff00\" isActive=\"true\">home</igx-icon>\n * ```\n */\nlet NEXT_ID = 0;\n\n@Component({\n    selector: 'igx-icon',\n    templateUrl: 'icon.component.html'\n})\n\nexport class IgxIconComponent implements OnInit {\n    @ViewChild('noLigature', { read: TemplateRef })\n    private noLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('explicitLigature', { read: TemplateRef })\n    private explicitLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('svgImage', { read: TemplateRef })\n    private svgImage: TemplateRef<HTMLElement>;\n\n    /**\n     *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.cssClass = \"\";\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('class.igx-icon')\n    public cssClass = 'igx-icon';\n\n    /**\n     *  This allows you to disable the `aria-hidden` attribute. By default it's applied.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.ariaHidden = false;\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('attr.aria-hidden')\n    public ariaHidden = true;\n\n    /**\n    *  An @Input property that sets the value of the `id` attribute.\n    *```html\n    *<igx-icon id=\"igx-icon-1\" fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-icon-${NEXT_ID++}`;\n\n    /**\n    *  An @Input property that sets the value of the `fontSet`. By default it's \"material\".\n    *```html\n    *<igx-icon fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @Input('fontSet')\n    public font: string;\n\n    /**\n    *  An @Input property that allows you to disable the `active` property. By default it's applied.\n    *```html\n    *<igx-icon [isActive]=\"false\" fontSet=\"material\" color=\"blue\">settings</igx-icon>\n    *```\n    */\n    @Input('isActive')\n    public active = true;\n\n    /**\n    *  An @Input property that allows you to change the `iconColor` of the icon.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">settings</igx-icon>\n    *```\n    */\n    @Input('color')\n    public iconColor: string;\n\n    /**\n    *  An @Input property that allows you to set the `iconName` of the icon.\n    *  The `iconName` can be set using the `name` property.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">question_answer</igx-icon>\n    *```\n    */\n    @Input('name')\n    public iconName: string;\n\n    /**\n     * An ElementRef property of the `igx-icon` component.\n     */\n    public el: ElementRef;\n\n    constructor(private _el: ElementRef, private iconService: IgxIconService) {\n        this.el = _el;\n        this.font = this.iconService.defaultFontSet;\n        this.iconService.registerFontSetAlias('material', 'material-icons');\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.updateIconClass();\n    }\n\n    /**\n     *  An accessor that returns the value of the font property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconFont = this.icon.getFontSet;\n     * }\n     * ```\n     */\n    get getFontSet(): string {\n        return this.font;\n    }\n\n    /**\n     *  An accessor that returns the value of the active property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getActive;\n     * }\n     * ```\n     */\n    get getActive(): boolean {\n        return this.active;\n    }\n\n    /**\n     *  An accessor that returns inactive property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getInactive;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-icon--inactive')\n    get getInactive(): boolean {\n        return !this.active;\n    }\n\n    /**\n     *  An accessor that returns the opposite value of the `iconColor` property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconColor = this.icon.getIconColor;\n     * }\n     * ```\n     */\n    @HostBinding('style.color')\n    get getIconColor(): string {\n        return this.iconColor;\n    }\n\n    /**\n     *  An accessor that returns the value of the iconName property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconName = this.icon.getIconName;\n     * }\n     * ```\n     */\n    get getIconName(): string {\n        return this.iconName;\n    }\n\n    /**\n     *  An accessor that returns the key of the SVG image.\n     *  The key consists of the fontSet and the iconName separated by underscore.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let svgKey = this.icon.getSvgKey;\n     * }\n     * ```\n     */\n    get getSvgKey(): string {\n        if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            return '#' + this.iconService.getSvgIconKey(this.iconName, this.font);\n        }\n\n        return null;\n    }\n\n    /**\n     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconTemplate = this.icon.template;\n     * }\n     * ```\n     */\n    get template(): TemplateRef<HTMLElement> {\n        if (this.iconName) {\n            if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n                return this.svgImage;\n            }\n\n            return this.noLigature;\n        }\n\n        return this.explicitLigature;\n    }\n\n    /**\n     * @hidden\n     */\n    private updateIconClass() {\n        const className = this.iconService.fontSetClassName(this.font);\n        this.el.nativeElement.classList.add(className);\n\n        if (this.iconName && !this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            this.el.nativeElement.classList.add(this.iconName);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { IgxIconComponent } from './icon.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { DeprecateMethod } from '../core/deprecateDecorators';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxIconComponent],\n    exports: [IgxIconComponent],\n    imports: [CommonModule, HttpClientModule]\n})\nexport class IgxIconModule {\n    @DeprecateMethod('IgxIconModule.forRoot method is deprecated. Use IgxIconModule instead.')\n    public static forRoot() {\n        return {\n            ngModule: IgxIconModule\n        };\n    }\n}\n\nexport * from './icon.component';\nexport * from './icon.service';\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Size {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large'\n}\n\nexport enum AvatarType {\n    DEFAULT = 'default',\n    INITIALS = 'initials',\n    IMAGE = 'image',\n    ICON = 'icon'\n}\n\n/**\n * **Ignite UI for Angular Avatar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/avatar.html)\n *\n * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an\n * image, someone's initials or a material icon from the google material icon set.\n *\n * Example:\n * ```html\n * <igx-avatar initials=\"MS\" roundShape=\"true\" size=\"large\">\n * </igx-avatar>\n * ```\n */\n@Component({\n    selector: 'igx-avatar',\n    templateUrl: 'avatar.component.html'\n})\nexport class IgxAvatarComponent implements OnInit, AfterViewInit {\n\n    /**\n     * This is a reference to the avatar `image` element in the DOM.\n     *\n     * ```typescript\n     *  let image =  this.avatar.image;\n     * ```\n     * @memberof IgxAvatarComponent\n     */\n    @ViewChild('image')\n    public image: ElementRef;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('defaultTemplate', { read: TemplateRef })\n    protected defaultTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('imageTemplate', { read: TemplateRef })\n    protected imageTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('initialsTemplate', { read: TemplateRef })\n    protected initialsTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('iconTemplate', { read: TemplateRef })\n    protected iconTemplate: TemplateRef<any>;\n\n    /**\n     * Returns the `aria-label` of the avatar.\n     *\n     * ```typescript\n     * let ariaLabel = this.avatar.ariaLabel;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = 'avatar';\n\n    /**\n     * Returns the `role` attribute of the avatar.\n     *\n     * ```typescript\n     * let avatarRole = this.avatar.role;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'img';\n\n    /**\n     * Returns the class of the avatar.\n     *\n     * ```typescript\n     * let avatarCLass =  this.avatar.cssClass;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('class.igx-avatar')\n    public cssClass = 'igx-avatar';\n\n    /**\n     * Returns the type of the avatar.\n     * The avatar can be: `\"initials type avatar\"`, `\"icon type avatar\"` or `\"image type avatar\"`.\n     *\n     * ```typescript\n     * let avatarDescription = this.avatar.roleDescription;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('attr.aria-roledescription')\n    public roleDescription: string;\n\n    /**\n     * @hidden\n     */\n    private _size: string | Size = 'small';\n\n    /**\n     * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `\"igx-avatar-0\"`.\n     *\n     * ```html\n     * <igx-avatar id=\"my-first-avatar\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-avatar-${NEXT_ID++}`;\n\n    /**\n     * Sets a round shape to the avatar if `roundShape` is `\"true\"`.\n     * By default the shape of the avatar is a square.\n     *\n     * ```html\n     * <igx-avatar roundShape = \"true\" ></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('class.igx-avatar--rounded')\n    @Input()\n    public roundShape = false;\n\n    /**\n     * Sets the avatar's `initials`/`icon` color.\n     *\n     *```html\n     *<igx-avatar color=\"blue\"></igx-avatar>\n     *```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.color')\n    @Input()\n    public color: string;\n\n    /**\n     * Sets the background color of the avatar.\n     *\n     * ```html\n     * <igx-avatar bgColor=\"yellow\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.background')\n    @Input()\n    public bgColor: string;\n\n    /**\n     * Sets `initials` to the avatar.\n     *\n     * ```html\n     * <igx-avatar initials=\"MN\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public initials: string;\n\n    /**\n     * Sets an `icon` to the avatar. All icons from the material icon set are supported.\n     *\n     * ```html\n     * <igx-avatar icon=\"phone\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * Sets the `image` source of the avatar.\n     *\n     * ```html\n     * <igx-avatar src=\"images/picture.jpg\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public src: string;\n\n    /**\n     * Returns the `size` of the avatar.\n     *\n     * ```typescript\n     *let avatarSize =  this.avatar.size;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public get size(): string | Size {\n        return this._size;\n    }\n\n    /**\n     * Sets the `size`  of the avatar.\n     * By default the `size` is `\"small\"`. It can be set to `\"medium\"` or `\"large\"`.\n     *\n     * ```\n     * <igx-avatar size=\"large\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public set size(value: string | Size) {\n        switch (value) {\n            case 'small':\n            case 'medium':\n            case 'large':\n                this._size = value;\n                break;\n            default:\n                this._size = 'small';\n        }\n    }\n\n    /**\n     * Returns the type of the avatar.\n     *\n     * ```typescript\n     * let avatarType = this.avatar.type;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get type(): AvatarType {\n        if (this.src) {\n            return AvatarType.IMAGE;\n        }\n\n        if (this.icon) {\n            return AvatarType.ICON;\n        }\n\n        if (this.initials) {\n            return AvatarType.INITIALS;\n        }\n\n        return AvatarType.DEFAULT;\n    }\n\n    /**\n     * Returns the template of the avatar.\n     *\n     * ```typescript\n     * let template = this.avatar.template;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get template(): TemplateRef<any> {\n        switch (this.type) {\n            case AvatarType.IMAGE:\n                return this.imageTemplate;\n            case AvatarType.INITIALS:\n                return this.initialsTemplate;\n            case AvatarType.ICON:\n                return this.iconTemplate;\n            default:\n                return this.defaultTemplate;\n        }\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.roleDescription = this.getRole();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        this.elementRef.nativeElement.classList\n            .add(`igx-avatar--${this._size}`, `igx-avatar--${this.type}`);\n    }\n\n    /**\n     * @hidden\n     */\n    private getRole(): string {\n        switch (this.type) {\n            case AvatarType.IMAGE:\n                return 'image avatar';\n            case AvatarType.ICON:\n                return 'icon avatar';\n            case AvatarType.INITIALS:\n                return 'initials avatar';\n            default:\n                return 'custom avatar';\n        }\n    }\n\n    /**\n     * Returns the url of the `image`.\n     *\n     * ```typescript\n     * let imageSourceUrl = this.avatar.getSrcUrl();\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public getSrcUrl() {\n        return `url(${this.src})`;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxAvatarComponent],\n    exports: [IgxAvatarComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxAvatarModule { }\n","import { CommonModule } from '@angular/common';\nimport { Component, HostBinding, Input, NgModule } from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Type {\n    DEFAULT = 'default',\n    INFO = 'info',\n    SUCCESS = 'success',\n    WARNING = 'warning',\n    ERROR = 'error'\n}\n/**\n * **Ignite UI for Angular Badge** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/badge.html)\n *\n * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the\n * application when visual notification is needed. They are usually designed as icons with a predefined\n * style to communicate information, success, warnings, or errors.\n *\n * Example:\n * ```html\n * <igx-avatar icon=\"person\" roundShape=\"true\" size=\"small\">\n *   <igx-badge icon=\"check\" type=\"success\" class=\"badge-style\">\n *   </igx-badge>\n * </igx-avatar>\n * ```\n * The `badge-style` class is used to position the badge:\n * ```css\n * .badge-style {\n *   position: absolute;\n *   bottom: -6px;\n *   right:-50px;\n * }\n * ```\n */\n@Component({\n    selector: 'igx-badge',\n    templateUrl: 'badge.component.html'\n})\nexport class IgxBadgeComponent {\n\n    /**\n    * An @Input property that sets the value of the `id` attribute.\n    * ```html\n    *<igx-badge id=\"igx-badge-2\" icon=\"check\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-badge-${NEXT_ID++}`;\n\n    /**\n    * An @Input property controlling the type of the badge.\n    * Allowed values are `default`, `info`, `success`, `warning`, `error`.\n    * Providing an invalid value won't display a badge.\n    * ```html\n    *<igx-badge type=\"success\" icon=\"check\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public type: string | Type = 'default';\n\n    /**\n    * An @Input property that sets the value to be displayed inside the badge.\n    * If an `icon` property is already set the `icon` will be displayed.\n    * If neither a `value` nor an `icon` is set the contentent of the badge will be empty.\n    * ```html\n    *<igx-badge value=\"11\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public value = '';\n\n    /**\n     * Set an icon for the badge from the material icons set.\n     * Has priority over the `value` property.\n     * If neither a `value` nor an `icon` is set the content of the badge will be empty.\n     * Providing an invalid value won't display anything.\n     * ```html\n     *<igx-badge icon=\"check\" type=\"success\" class=\"badge-style\" value=\"11\"></igx-badge>\n     * ```\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * This allows you to set value to role attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"badge-status\";\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'status';\n\n    /**\n     * This allows you to disable igx-badge class. The default it's applied.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.cssClass = false;\n     * ```\n     */\n    @HostBinding('class.igx-badge')\n    public cssClass = 'igx-badge';\n\n    /**\n     * This allows you to set value to aria-label attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"icon-badge\";\n     * ```\n     */\n    @HostBinding('attr.aria-label')\n    public label = 'badge';\n\n    /**\n     * @hidden\n     * Defines a human-readable, accessor, author-localized description for the `type` and the `icon` or `value` of the element.\n     */\n    get roleDescription() {\n        let message;\n\n        // tslint:disable-next-line:prefer-conditional-expression\n        if (this.icon) {\n            message = this.type + ' type badge with icon type ' + this.icon;\n        } else if (this.value) {\n            message = this.type + ' badge type with value ' + this.value;\n        } else {\n            message = this.type + ' badge type without value';\n        }\n\n        return message;\n    }\n\n    /**\n     * @hidden\n     * Method which makes the name of the class more descriptive.\n     * This helps the styling of the badges.\n     */\n    public setClasses() {\n        let classes = {};\n\n        switch (Type[this.type.toUpperCase()]) {\n            case Type.DEFAULT:\n                classes = {\n                    [`${this.cssClass}__circle--default`]: true\n                };\n                break;\n            case Type.INFO:\n                classes = {\n                    [`${this.cssClass}__circle--info`]: true\n                };\n                break;\n            case Type.SUCCESS:\n                classes = {\n                    [`${this.cssClass}__circle--success`]: true\n                };\n                break;\n            case Type.WARNING:\n                classes = {\n                    [`${this.cssClass}__circle--warning`]: true\n                };\n                break;\n            case Type.ERROR:\n                classes = {\n                    [`${this.cssClass}__circle--error`]: true\n                };\n                break;\n        }\n\n        return classes;\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBadgeComponent],\n    exports: [IgxBadgeComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxBadgeModule {\n}\n","import { EventEmitter } from '@angular/core';\nimport { AnimationReferenceMetadata } from '@angular/animations';\n\nexport interface IgxExpansionPanelBase {\n    id: string;\n    cssClass: string;\n    /** @hidden @internal */\n    headerId: string;\n    collapsed: boolean;\n    animationSettings: { openAnimation: AnimationReferenceMetadata, closeAnimation: AnimationReferenceMetadata };\n    onCollapsed: EventEmitter<any>;\n    onExpanded: EventEmitter<any>;\n    collapse(evt?: Event);\n    expand(evt?: Event);\n    toggle(evt?: Event);\n}\n\n/** @hidden */\nexport const IGX_EXPANSION_PANEL_COMPONENT = 'IgxExpansionPanelToken';\n\nexport interface IExpansionPanelEventArgs {\n    event: Event;\n    panel: IgxExpansionPanelBase;\n}\n","import { Component, HostBinding, ElementRef, Input, ChangeDetectorRef, OnInit, Inject } from '@angular/core';\nimport { IgxExpansionPanelBase, IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';\n\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-body',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxExpansionPanelBodyComponent implements OnInit {\n    private _labelledBy = '';\n    private _label = '';\n    constructor(\n        @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase,\n        public element: ElementRef, public cdr: ChangeDetectorRef) {\n    }\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel__body')\n    public cssClass = `igx-expansion-panel__body`;\n\n    /**\n     * Gets the `aria-label` attribute of the panel body\n     * Defaults to the panel id with '-region' in the end;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.label;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-label')\n    public get label(): string {\n        return this._label || this.panel.id + '-region';\n    }\n    /**\n     * Sets the `aria-label` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.label = 'my-custom-label';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [label]=\"'my-custom-label'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set label(val: string) {\n        this._label = val;\n    }\n\n    /**\n     * Gets the `aria-labelledby` attribute of the panel body\n     * Defaults to the panel header id;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.labelledBy;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public get labelledBy(): string {\n        return this._labelledBy;\n    }\n    /**\n     * Sets the `aria-labelledby` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.labelledBy = 'my-custom-id';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [labelledBy]=\"'my-custom-id'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set labelledBy(val: string) {\n        this._labelledBy = val;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the panel body\n     * Default is 'region';\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.body.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.body.role = 'content';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [role]=\"'custom'\"></igx-expansion-panel-body>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'region';\n\n    ngOnInit() {\n        this.labelledBy = this.panel.headerId;\n        this.label = this.panel.id + '-region';\n    }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-title'\n})\nexport class IgxExpansionPanelTitleDirective {\n    @HostBinding('class.igx-expansion-panel__header-title')\n    public cssClass = `igx-expansion-panel__header-title`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-description'\n})\nexport class IgxExpansionPanelDescriptionDirective {\n    @HostBinding('class.igx-expansion-panel__header-description')\n    public cssClass = `igx-expansion-panel__header-description`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-icon'\n})\nexport class IgxExpansionPanelIconDirective {\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Host,\n    EventEmitter,\n    Output,\n    ContentChild,\n    Inject\n} from '@angular/core';\nimport { IgxExpansionPanelIconDirective } from './expansion-panel.directives';\nimport { IExpansionPanelEventArgs, IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase } from './expansion-panel.common';\n\n/**\n * @hidden\n */\nexport enum ICON_POSITION {\n    LEFT = 'left',\n    NONE = 'none',\n    RIGHT = 'right'\n}\n\n\n@Component({\n    selector: 'igx-expansion-panel-header',\n    templateUrl: 'expansion-panel-header.component.html'\n})\nexport class IgxExpansionPanelHeaderComponent {\n     // properties section\n    private _iconTemplate = false;\n    /**\n     * Sets/gets the `id` of the expansion panel header.\n     * ```typescript\n     * let panelHeaderId =  this.panel.header.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    public id = '';\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelIconDirective)\n    public set iconTemplate(val: any) {\n        this._iconTemplate = <boolean>val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get iconTemplate(): any {\n        return this._iconTemplate;\n    }\n\n    /**\n     * Gets/sets the `aria-level` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentAriaLevel = this.panel.header.lv;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.lv = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [lv]=\"myCustomLevel\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.aria-level')\n    @Input()\n    public lv = '3';\n\n    /**\n     * Gets/sets the `role` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.header.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.role = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [role]=\"'custom'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'heading';\n\n    /**\n     * @hidden\n     */\n    public get controls (): string {\n        return this.panel.id;\n    }\n\n    /**\n     * Gets/sets the position of the expansion-panel-header expand/collapse icon\n     * Accepts `left`, `right` or `none`\n     * ```typescript\n     *  const currentIconPosition = this.panel.header.iconPosition;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.iconPosition = 'left';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [iconPosition]=\"'right'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    public iconPosition: ICON_POSITION = ICON_POSITION.LEFT;\n\n    /**\n     * Emitted whenever a user interacts with the header host\n     * ```typescript\n     *  handleInteraction(event: IExpansionPanelEventArgs) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header (onInteraction)=\"handleInteraction($event)\">\n     *      ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Output()\n    public onInteraction = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header')\n     public cssClass = 'igx-expansion-panel__header';\n\n     /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header--expanded')\n     public get isExpanded () {\n            return !this.panel.collapsed;\n         }\n\n    /**\n     * Gets/sets the whether the header is disabled\n     * When disabled, the header will not handle user events and will stop their propagation\n     *\n     * ```typescript\n     *  const isDisabled = this.panel.header.disabled;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.disabled = true;\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [disabled]=\"true\">\n     *     ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-expansion-panel--disabled')\n    public disabled = false;\n\n    constructor(@Host() @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase, public cdr: ChangeDetectorRef,\n     public elementRef: ElementRef) {\n         this.id = `${this.panel.id}-header`;\n     }\n\n     /**\n     * @hidden\n     */\n     @HostListener('keydown.Enter', ['$event'])\n     @HostListener('keydown.Space', ['$event'])\n     @HostListener('keydown.Spacebar', ['$event'])\n     @HostListener('click', ['$event'])\n     public onAction(evt?: Event) {\n         if (this.disabled) {\n            evt.stopPropagation();\n            return;\n         }\n         this.onInteraction.emit({ event: evt, panel: this.panel });\n         this.panel.toggle(evt);\n         evt.preventDefault();\n     }\n\n    /** @hidden @internal */\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    public openPanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.expand(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /** @hidden @internal */\n     @HostListener('keydown.Alt.ArrowUp', ['$event'])\n     public closePanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.collapse(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /**\n     * @hidden\n     */\n     public get iconPositionClass(): string {\n        switch (this.iconPosition) {\n            case (ICON_POSITION.LEFT):\n                return `igx-expansion-panel__header-icon--start`;\n            case (ICON_POSITION.RIGHT):\n                return `igx-expansion-panel__header-icon--end`;\n            case (ICON_POSITION.NONE):\n                return `igx-expansion-panel__header-icon--none`;\n            default:\n                return '';\n        }\n     }\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ContentChild,\n    forwardRef,\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, useAnimation, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { growVerOut, growVerIn } from '../animations/main';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase, IExpansionPanelEventArgs } from './expansion-panel.common';\n\nlet NEXT_ID = 0;\n\nexport interface AnimationSettings {\n    openAnimation: AnimationReferenceMetadata;\n    closeAnimation: AnimationReferenceMetadata;\n}\n@Component({\n    selector: 'igx-expansion-panel',\n    templateUrl: 'expansion-panel.component.html',\n    providers: [{ provide: IGX_EXPANSION_PANEL_COMPONENT, useExisting: IgxExpansionPanelComponent }]\n})\nexport class IgxExpansionPanelComponent implements IgxExpansionPanelBase {\n\n    /**\n     * Sets/gets the animation settings of the expansion panel component\n     * Open and Close animation should be passed\n     *\n     * Get\n     * ```typescript\n     *  const currentAnimations = this.panel.animationSettings;\n     * ```\n     * Set\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  this.panel.animationsSettings = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```\n     * or via template\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  myCustomAnimationObject = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```html\n     *  <igx-expansion-panel [animationSettings]='myCustomAnimationObject'>\n     *  ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public animationSettings: AnimationSettings = {\n        openAnimation: growVerIn,\n        closeAnimation: growVerOut\n    };\n\n    /**\n     * Sets/gets the `id` of the expansion panel component.\n     * If not set, `id` will have value `\"igx-expansion-panel-0\"`;\n     * ```html\n     * <igx-expansion-panel id = \"my-first-expansion-panel\"></igx-expansion-panel>\n     * ```\n     * ```typescript\n     * let panelId =  this.panel.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-expansion-panel-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel')\n    public cssClass = 'igx-expansion-panel';\n\n    /**\n     * Gets/sets whether the component is collapsed (its content is hidden)\n     * Get\n     * ```typescript\n     *  const myPanelState: boolean = this.panel.collapsed;\n     * ```\n     * Set\n     * ```html\n     *  this.panel.collapsed = true;\n     * ```\n     */\n    @Input()\n    public collapsed = true;\n\n    /**\n     * Emitted when the expansion panel finishes collapsing\n     * ```typescript\n     *  handleCollapsed(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onCollapsed)=\"handleCollapsed($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onCollapsed = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * Emitted when the expansion panel finishes expanding\n     * ```typescript\n     *  handleExpanded(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onExpanded)=\"handleExpanded($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onExpanded = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public get headerId() {\n        return this.header ? `${this.id}-header` : '';\n    }\n    constructor(private cdr: ChangeDetectorRef, private builder: AnimationBuilder) { }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxExpansionPanelBodyComponent), { read: forwardRef(() => IgxExpansionPanelBodyComponent) })\n    public body: IgxExpansionPanelBodyComponent;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxExpansionPanelHeaderComponent), { read: forwardRef(() => IgxExpansionPanelHeaderComponent) })\n    public header: IgxExpansionPanelHeaderComponent;\n\n\n    private playOpenAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.openAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const openAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n\n        openAnimationPlayer.onDone(() => {\n            cb();\n            openAnimationPlayer.reset();\n        });\n\n        openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.closeAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const closeAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n        closeAnimationPlayer.onDone(() => {\n            cb();\n            closeAnimationPlayer.reset();\n        });\n\n        closeAnimationPlayer.play();\n    }\n\n    /**\n     * Collapses the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.collapse($event)\">Collpase Panel</button>\n     * ```\n     */\n    collapse(evt?: Event) {\n        if (this.collapsed) { // If expansion panel is already collapsed, do nothing\n            return;\n        }\n        this.playCloseAnimation(\n            () => {\n                this.onCollapsed.emit({ event: evt, panel: this });\n                this.collapsed = true;\n            }\n        );\n    }\n\n    /**\n     * Expands the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.expand($event)\">Expand Panel</button>\n     * ```\n     */\n    expand(evt?: Event) {\n        if (!this.collapsed) { // If the panel is already opened, do nothing\n            return;\n        }\n        this.collapsed = false;\n        this.cdr.detectChanges();\n        this.playOpenAnimation(\n            () => {\n                this.onExpanded.emit({ event: evt, panel: this });\n            }\n        );\n    }\n\n    /**\n     * Toggles the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.toggle($event)\">Expand Panel</button>\n     * ```\n     */\n    toggle(evt?: Event) {\n        if (this.collapsed) {\n            this.open(evt);\n        } else {\n            this.close(evt);\n        }\n    }\n\n    open(evt?: Event) {\n        this.expand(evt);\n    }\n    close(evt?: Event) {\n        this.collapse(evt);\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelDescriptionDirective, IgxExpansionPanelTitleDirective,\n  IgxExpansionPanelIconDirective } from './expansion-panel.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n    IgxExpansionPanelIconDirective\n  ],\n  entryComponents: [\n  ],\n  exports: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n      IgxExpansionPanelIconDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule\n  ]\n})\nexport class IgxExpansionPanelModule {\n}\n","import { Directive } from '@angular/core';\n\n// tslint:disable:directive-selector\n@Directive({\n    selector: 'igx-banner-actions'\n})\nexport class IgxBannerActionsDirective {\n}\n","import { Component, NgModule, EventEmitter, Output, Input, ViewChild, ElementRef,\n    ContentChild, HostBinding } from '@angular/core';\nimport { IgxExpansionPanelModule } from '../expansion-panel/expansion-panel.module';\nimport { AnimationSettings } from '../expansion-panel/expansion-panel.component';\nimport { IgxExpansionPanelComponent } from '../expansion-panel';\nimport { IgxIconModule, IgxIconComponent } from '../icon/index';\nimport { IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxBannerActionsDirective } from './banner.directives';\nimport { CommonModule } from '@angular/common';\nimport { CancelableEventArgs } from '../core/utils';\n\nexport interface BannerEventArgs {\n    banner: IgxBannerComponent;\n    event?: Event;\n}\n\nexport interface BannerCancelEventArgs extends BannerEventArgs, CancelableEventArgs {\n}\n/**\n * **Ignite UI for Angular Banner** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/banner.html)\n *\n * The Ignite UI Banner provides a highly templateable and easy to use banner that can be shown in your application.\n *\n * Usage:\n *\n * ```html\n * <igx-banner #banner>\n *   Our privacy settings have changed.\n *  <igx-banner-actions>\n *      <button igxButton=\"raised\">Read More</button>\n *      <button igxButton=\"raised\">Accept and Continue</button>\n *  </igx-banner-actions>\n * </igx-banner>\n * ```\n */\n@Component({\n    selector: 'igx-banner',\n    templateUrl: 'banner.component.html'\n})\nexport class IgxBannerComponent implements IToggleView {\n    private _bannerEvent: BannerEventArgs;\n    private _animationSettings: AnimationSettings;\n\n    @ViewChild('expansionPanel')\n    private _expansionPanel: IgxExpansionPanelComponent;\n\n    @ContentChild(IgxBannerActionsDirective)\n    private _bannerActionTemplate: any;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxIconComponent)\n    public bannerIcon: any;\n\n    /**\n     * Fires after the banner shows up\n     * ```typescript\n     * public handleOpened(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpened)=\"handleOpened($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner shows up\n     * ```typescript\n     * public handleOpening(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpening)=\"handleOpening($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<BannerCancelEventArgs>();\n\n    /**\n     * Fires after the banner hides\n     * ```typescript\n     * public handleClosed(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosed)=\"handleClosed($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner hides\n     * ```typescript\n     * public handleClosing(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosing)=\"handleClosing($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<BannerCancelEventArgs>();\n\n    /** @hidden */\n    public get useDefaultTemplate(): boolean {\n        return !this._bannerActionTemplate;\n    }\n\n    /**\n     * Get the animation settings used by the banner open/close methods\n     * ```typescript\n     * let currentAnimations: AnimationSettings = banner.animationSettings\n     * ```\n     */\n    @Input()\n    public get animationSettings(): AnimationSettings {\n        return this._animationSettings ? this._animationSettings : this._expansionPanel.animationSettings;\n    }\n\n    /**\n     * Set the animation settings used by the banner open/close methods\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * banner.animationSettings: AnimationSettings = { openAnimation: slideInLeft, closeAnimation: slideOutRight };\n     * ```\n     */\n    public set animationSettings(settings: AnimationSettings) {\n        this._animationSettings = settings;\n    }\n    /**\n     * Gets whether banner is collapsed\n     *\n     * ```typescript\n     * const isCollapsed: boolean = banner.collapsed;\n     * ```\n     */\n    public get collapsed() {\n        return this._expansionPanel.collapsed;\n    }\n\n    /**\n     * Returns the native element of the banner component\n     * ```typescript\n     *  const myBannerElement: HTMLElement = banner.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display')\n    public get displayStyle(): string {\n        return this.collapsed ? '' : 'block';\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * Opens the banner\n     *\n     * ```typescript\n     *  myBanner.open();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.open()\">Open Banner</button>\n     * ```\n     */\n    public open(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const openingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onOpening.emit(openingArgs);\n        if (openingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.open(event);\n    }\n\n    /**\n     * Closes the banner\n     *\n     * ```typescript\n     *  myBanner.close();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.close()\">Close Banner</button>\n     * ```\n     */\n    public close(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const closingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onClosing.emit(closingArgs);\n        if (closingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.close(event);\n    }\n\n    /**\n     * Toggles the banner\n     *\n     * ```typescript\n     *  myBanner.toggle();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.toggle()\">Toggle Banner</button>\n     * ```\n     */\n    toggle(event?: Event) {\n        if (this.collapsed) {\n            this.open(event);\n        } else {\n            this.close(event);\n        }\n    }\n\n    /** @hidden */\n    public onExpansionPanelOpen() {\n        this.onOpened.emit(this._bannerEvent);\n    }\n\n    /** @hidden */\n    public onExpansionPanelClose() {\n        this.onClosed.emit(this._bannerEvent);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBannerComponent, IgxBannerActionsDirective],\n    exports: [IgxBannerComponent, IgxBannerActionsDirective],\n    imports: [CommonModule, IgxExpansionPanelModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxBannerModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    NgModule,\n    Output,\n    Optional,\n    QueryList,\n    Renderer2,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IgxButtonDirective, IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions, DisplayDensity } from '../core/density';\n\nexport enum ButtonGroupAlignment { horizontal, vertical }\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Button Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/buttongroup.html)\n *\n * The Ignite UI Button Group displays a group of buttons either vertically or horizontally.  The group supports\n * single, multiple and toggle selection.\n *\n * Example:\n * ```html\n * <igx-buttongroup multiSelection=\"true\" [values]=\"fontOptions\">\n * </igx-buttongroup>\n * ```\n * The `fontOptions` value shown above is defined as:\n * ```typescript\n * this.fontOptions = [\n *   { icon: 'format_bold', selected: false },\n *   { icon: 'format_italic', selected: false },\n *   { icon: 'format_underlined', selected: false }];\n * ```\n */\n@Component({\n    selector: 'igx-buttongroup',\n    templateUrl: 'buttongroup-content.component.html'\n})\n\nexport class IgxButtonGroupComponent extends DisplayDensityBase implements AfterContentInit, AfterViewInit, OnDestroy {\n\n    private _disabled = false;\n    protected buttonClickNotifier$ = new Subject<boolean>();\n    protected queryListNotifier$ = new Subject<boolean>();\n\n    @ViewChildren(IgxButtonDirective) private viewButtons: QueryList<IgxButtonDirective>;\n    @ContentChildren(IgxButtonDirective) private templateButtons: QueryList<IgxButtonDirective>;\n\n    /**\n     * A collection containing all buttons inside the button group.\n     */\n    public get buttons(): IgxButtonDirective[] {\n        return [...this.viewButtons.toArray(), ...this.templateButtons.toArray()];\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not set it will be automatically generated.\n     * ```html\n     *  <igx-buttongroup [id]=\"'igx-dialog-56'\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-buttongroup-${NEXT_ID++}`;\n\n    /**\n     * Allows you to set a style using the `itemContentCssClass` input.\n     * The value should be the CSS class name that will be applied to the button group.\n     *```typescript\n     *public style1 = \"styleClass\";\n     * //..\n     *```\n     * ```html\n     *<igx-buttongroup [itemContentCssClass]=\"style1\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     *```\n     */\n    @Input() set itemContentCssClass(value: string) {\n        this._itemContentCssClass = value || this._itemContentCssClass;\n    }\n\n    /**\n     * Returns the CSS class of the item content of the `IgxButtonGroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *   let buttonSelect = this.buttonG.itemContentCssClass;\n     *}\n     *```\n     */\n    get itemContentCssClass(): string {\n        return this._itemContentCssClass;\n    }\n\n    /**\n     * An @Input property that enables selecting multiple buttons. By default, multi-selection is false.\n     * ```html\n     * <igx-buttongroup [multiSelection]=\"false\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public multiSelection = false;\n    /**\n     * An @Input property that allows setting the buttons in the button group.\n     * ```typescript\n     *  public ngOnInit() {\n     *      this.cities = [\n     *        new Button({\n     *          label: \"Sofia\"\n     *      }),\n     *        new Button({\n     *          label: \"London\"\n     *      }),\n     *        new Button({\n     *          label: \"New York\",\n     *          selected: true\n     *      }),\n     *        new Button({\n     *          label: \"Tokyo\"\n     *      })\n     *  ];\n     *  }\n     *  //..\n     * ```\n     * ```html\n     *  <igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public values: any;\n    /**\n     * An @Input property that allows you to disable the `igx-buttongroup` component. By default it's false.\n     * ```html\n     * <igx-buttongroup [disabled]=\"true\" [multiSelection]=\"multi\" [values]=\"fontOptions\"></igx-buttongroup>\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n    public set disabled(value: boolean) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this.viewButtons && this.templateButtons) {\n                this.buttons.forEach((b) => b.disabled = this._disabled);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectedIndexes: number[] = [];\n\n    /**\n     * Allows you to set the button group alignment.\n     * Available options are `ButtonGroupAlignment.horizontal` (default) and `ButtonGroupAlignment.vertical`.\n     * ```typescript\n     *public alignment = ButtonGroupAlignment.vertical;\n     * //..\n     * ```\n     * ```html\n     *<igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() set alignment(value: ButtonGroupAlignment) {\n        this._isVertical = value === ButtonGroupAlignment.vertical;\n    }\n    /**\n     * Returns the alignment of the `igx-buttongroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let buttonAlignment = this.buttonG.alignment;\n     *}\n     *```\n     */\n    get alignment(): ButtonGroupAlignment {\n        return this._isVertical ? ButtonGroupAlignment.vertical : ButtonGroupAlignment.horizontal;\n    }\n\n    /**\n     * An @Ouput property that emits an event when a button is selected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onSelect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * <igx-buttongroup #MyChild [multiSelection]=\"!multi\" (onSelect)=\"onSelect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have made a selection!\"></igx-toast>\n     *```\n     */\n    @Output() public onSelect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * An @Ouput property that emits an event when a button is deselected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onUnselect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * igx-buttongroup #MyChild [multiSelection]=\"multi\" (onUnselect)=\"onUnselect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have deselected a button!\"></igx-toast>\n     *```\n     */\n    @Output() public onUnselect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * Returns true if the `igx-buttongroup` alignment is vertical.\n     * Note that in order for the accessor to work correctly the property should be set explicitly.\n     * ```html\n     * <igx-buttongroup #MyChild [alignment]=\"alignment\" [values]=\"alignOptions\">\n     * ```\n     * ```typescript\n     * //...\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let orientation = this.buttonG.isVertical;\n     *}\n     *```\n     */\n    public get isVertical(): boolean {\n        return this._isVertical;\n    }\n    private _isVertical: boolean;\n    private _itemContentCssClass: string;\n\n    constructor(private _cdr: ChangeDetectorRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n    }\n\n    /**\n     * Gets the selected button/buttons.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let selectedButton = this.buttonG.selectedButtons;\n     *}\n     *```\n     */\n    get selectedButtons(): IgxButtonDirective[] {\n        return this.buttons.filter((b, i) => {\n            return this.selectedIndexes.indexOf(i) !== -1;\n        });\n\n    }\n\n    /**\n     * Selects a button by its index.\n     * @memberOf {@link IgxButtonGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.selectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     *```\n     */\n    public selectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        if (buttonElement.classList.contains('igx-button--disabled')) {\n            return;\n        }\n\n        this.selectedIndexes.push(index);\n        button.selected = true;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'true');\n        this._renderer.addClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onSelect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = true;\n        }\n\n        // deselect other buttons if multiSelection is not enabled\n        if (!this.multiSelection && this.selectedIndexes.length > 1) {\n            this.buttons.forEach((b, i) => {\n                if (i !== index && this.selectedIndexes.indexOf(i) !== -1) {\n                    this.deselectButton(i);\n                }\n            });\n        }\n    }\n\n    /**\n     * Deselects a button by its index.\n     * @memberOf {@link IgxButtonGroupComponent}\n     * ```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.deselectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     * ```\n     */\n    public deselectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        if (buttonElement.classList.contains('igx-button--disabled')) {\n            return;\n        }\n\n        this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);\n        button.selected = false;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'false');\n        this._renderer.removeClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onUnselect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.templateButtons.forEach( (button) => {\n            if (!button.initialDensity) {\n                button.displayDensity = this.displayDensity;\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        const initButtons = () => {\n            // Cancel any existing buttonClick subscriptions\n            this.buttonClickNotifier$.next();\n\n            this.selectedIndexes.splice(0, this.selectedIndexes.length);\n\n            // initial configuration\n            this.buttons.forEach((button, index) => {\n                const buttonElement = button.nativeElement;\n\n                if (this.disabled) {\n                    button.disabled = true;\n                }\n\n                if (!button.disabled && button.selected) {\n                    this.selectButton(index);\n                }\n\n                button.buttonClick.pipe(takeUntil(this.buttonClickNotifier$)).subscribe((ev) => this._clickHandler(ev, index));\n                this._renderer.addClass(buttonElement, 'igx-button-group__item');\n            });\n        };\n\n        this.viewButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        this.templateButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        initButtons();\n\n        this._cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.buttonClickNotifier$.next();\n        this.buttonClickNotifier$.complete();\n\n        this.queryListNotifier$.next();\n        this.queryListNotifier$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    public _clickHandler(event, i) {\n        if (this.selectedIndexes.indexOf(i) !== -1) {\n            this.deselectButton(i);\n        } else {\n            this.selectButton(i);\n        }\n    }\n}\n\nexport interface IButtonGroupEventArgs {\n    button: IgxButtonDirective;\n    index: number;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonGroupComponent],\n    exports: [IgxButtonGroupComponent],\n    imports: [IgxButtonModule, CommonModule, IgxRippleModule, IgxIconModule]\n})\n\nexport class IgxButtonGroupModule {\n}\n","export interface DateRangeDescriptor {\n    type: DateRangeType;\n    dateRange?: Date[];\n}\n\nexport enum DateRangeType {\n    After,\n    Before,\n    Between,\n    Specific,\n    Weekdays,\n    Weekends\n}\n","import { DateRangeDescriptor, DateRangeType } from '../core/dates';\n\nconst MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst FEBRUARY = 1;\n\nexport function range(start = 0, stop, step = 1) {\n    const res = [];\n    const cur = (stop === undefined) ? 0 : start;\n    const max = (stop === undefined) ? start : stop;\n    for (let i = cur; step < 0 ? i > max : i < max; i += step) {\n        res.push(i);\n    }\n    return res;\n}\n\n/**\n * Returns true for leap years, false for non-leap years.\n *\n * @export\n * @param year\n * @returns\n */\nexport function isLeap(year: number): boolean {\n    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));\n}\n\nexport function weekDay(year: number, month: number, day: number): number {\n    return new Date(year, month, day).getDay();\n}\n\n/**\n * Return weekday and number of days for year, month.\n *\n * @export\n * @param year\n * @param month\n * @returns\n */\nexport function monthRange(year: number, month: number): number[] {\n    if ((month < 0) || (month > 11)) {\n        throw new Error('Invalid month specified');\n    }\n    const day = weekDay(year, month, 1);\n    let nDays = MDAYS[month];\n    if ((month === FEBRUARY) && (isLeap(year))) {\n        nDays++;\n    }\n    return [day, nDays];\n}\n\nexport function isDateInRanges(date: Date, ranges: DateRangeDescriptor[]): boolean {\n    date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    const dateInMs = date.getTime();\n\n    for (const descriptor of ranges) {\n        const dRanges = descriptor.dateRange ? descriptor.dateRange.map(\n            r => new Date(r.getFullYear(), r.getMonth(), r.getDate())) : undefined;\n        switch (descriptor.type) {\n            case (DateRangeType.After):\n                if (dateInMs > dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Before):\n                if (dateInMs < dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Between):\n                const dRange = dRanges.map(d => d.getTime());\n                const min = Math.min(dRange[0], dRange[1]);\n                const max = Math.max(dRange[0], dRange[1]);\n                if (dateInMs >= min && dateInMs <= max) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Specific):\n                const datesInMs = dRanges.map(d => d.getTime());\n                for (const specificDateInMs of datesInMs) {\n                    if (dateInMs === specificDateInMs) {\n                        return true;\n                    }\n                }\n\n                break;\n            case (DateRangeType.Weekdays):\n                const day = date.getDay();\n                if (day % 6 !== 0) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Weekends):\n                const weekday = date.getDay();\n                if (weekday % 6 === 0) {\n                    return true;\n                }\n\n                break;\n            default:\n                return false;\n        }\n    }\n\n    return false;\n}\n\nexport interface ICalendarDate {\n    date: Date;\n    isCurrentMonth: boolean;\n    isPrevMonth: boolean;\n    isNextMonth: boolean;\n}\n\nexport interface IFormattedParts {\n    value: string;\n    literal?: string;\n    combined: string;\n}\n\nexport interface IFormattingOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n\nexport interface IFormattingViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\nexport enum WEEKDAYS {\n    SUNDAY = 0,\n    MONDAY = 1,\n    TUESDAY = 2,\n    WEDNESDAY = 3,\n    THURSDAY = 4,\n    FRIDAY = 5,\n    SATURDAY = 6\n}\n\nexport class Calendar {\n\n    private _firstWeekDay: number | WEEKDAYS;\n\n    constructor(firstWeekDay: number | WEEKDAYS = WEEKDAYS.SUNDAY) {\n        this._firstWeekDay = firstWeekDay;\n    }\n\n    public get firstWeekDay(): number {\n        return this._firstWeekDay % 7;\n    }\n\n    public set firstWeekDay(value: number) {\n        this._firstWeekDay = value;\n    }\n\n    /**\n     * Returns an array of weekdays for one week starting\n     * with the currently set `firstWeekDay`\n     *\n     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]\n     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]\n     *\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public weekdays(): number[] {\n        const res = [];\n        for (const i of range(this.firstWeekDay, this.firstWeekDay + 7)) {\n            res.push(i % 7);\n        }\n        return res;\n    }\n\n    /**\n     * Returns the date values for one month. It will always iterate throught\n     * complete weeks, so it will contain dates outside the specified month.\n     *\n     * @param year\n     * @param month\n     * @param boolean\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdates(year: number, month: number, extraWeek: boolean = false): ICalendarDate[] {\n        let date = new Date(year, month, 1);\n        let days = (date.getDay() - this.firstWeekDay) % 7;\n        if (days < 0) {\n            days = 7 - Math.abs(days);\n        }\n        date = this.timedelta(date, 'day', -days);\n        const res = [];\n        let value: ICalendarDate;\n\n        while (true) {\n\n            value = this.generateICalendarDate(date, year, month);\n            res.push(value);\n\n            date = this.timedelta(date, 'day', 1);\n\n            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {\n                if (extraWeek && res.length <= 35) {\n                    for (const i of range(0, 7)) {\n                        value = this.generateICalendarDate(date, year, month);\n                        res.push(value);\n                        date = this.timedelta(date, 'day', 1);\n                    }\n                }\n                break;\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Returns a matrix (array of arrays) representing a month's calendar.\n     * Each row represents a full week; week entries are ICalendarDate objects.\n     *\n     * @param year\n     * @param month\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdatescalendar(year: number, month: number, extraWeek: boolean = false): ICalendarDate[][] {\n        const dates = this.monthdates(year, month, extraWeek);\n        const res = [];\n        for (const i of range(0, dates.length, 7)) {\n            res.push(dates.slice(i, i + 7));\n        }\n        return res;\n    }\n\n    public timedelta(date: Date, interval: string, units: number): Date {\n        const ret = new Date(date);\n\n        const checkRollover = () => {\n            if (ret.getDate() !== date.getDate()) {\n                ret.setDate(0);\n            }\n        };\n\n        switch (interval.toLowerCase()) {\n            case 'year':\n                ret.setFullYear(ret.getFullYear() + units);\n                checkRollover();\n                break;\n            case 'quarter':\n                ret.setMonth(ret.getMonth() + 3 * units);\n                checkRollover();\n                break;\n            case 'month':\n                ret.setMonth(ret.getMonth() + units);\n                checkRollover();\n                break;\n            case 'week':\n                ret.setDate(ret.getDate() + 7 * units);\n                break;\n            case 'day':\n                ret.setDate(ret.getDate() + units);\n                break;\n            case 'hour':\n                ret.setTime(ret.getTime() + units * 3600000);\n                break;\n            case 'minute':\n                ret.setTime(ret.getTime() + units * 60000);\n                break;\n            case 'second':\n                ret.setTime(ret.getTime() + units * 1000);\n                break;\n            default:\n                throw new Error('Invalid interval specifier');\n        }\n        return ret;\n    }\n\n    public formatToParts(date: Date, locale: string, options: any, parts: string[]) {\n        const formatter = new Intl.DateTimeFormat(locale, options);\n        const result = {\n            date,\n            full: formatter.format(date)\n        };\n\n        if ((formatter as any).formatToParts) {\n            const formattedParts = (formatter as any).formatToParts(date);\n\n            const toType = (partType: string) => {\n                const index = formattedParts.findIndex(({ type }) => type === partType);\n                const o: IFormattedParts = { value: '', literal: '', combined: ''};\n\n                if (partType === 'era' && index > -1) {\n                    o.value = formattedParts[index].value;\n                    return o;\n                } else if (partType === 'era' && index === -1) {\n                    return o;\n                }\n\n                o.value = formattedParts[index].value;\n                o.literal = formattedParts[index + 1] ? formattedParts[index + 1].value : '';\n                o.combined = [o.value, o.literal].join('');\n                return o;\n            };\n\n            for (const each of parts) {\n                result[each] = toType(each);\n            }\n        } else {\n            for (const each of parts) {\n                result[each] = { value: '', literal: '', combined: ''};\n            }\n        }\n        return result;\n    }\n\n    private generateICalendarDate(date: Date, year: number, month: number): ICalendarDate {\n        return {\n            date,\n            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,\n            isNextMonth: this.isNextMonth(date, year, month),\n            isPrevMonth: this.isPreviousMonth(date, year, month)\n        };\n    }\n\n    private isPreviousMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() < month;\n        }\n        return date.getFullYear() < year;\n    }\n\n    private isNextMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() > month;\n        }\n\n        return date.getFullYear() > year;\n    }\n}\n","/**\n * This file contains all the directives used by the @link IgxCalendarComponent.\n * Except for the directives which are used for templating the calendar itself\n * you should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    Output,\n    TemplateRef,\n    ElementRef,\n    AfterViewInit,\n    OnDestroy,\n    NgZone\n} from '@angular/core';\nimport { fromEvent, Subject, interval } from 'rxjs';\nimport { takeUntil, debounce, tap } from 'rxjs/operators';\nimport { KEYS } from '../core/utils';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarYear]'\n})\nexport class IgxCalendarYearDirective {\n\n    @Input('igxCalendarYear')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Output()\n    public onYearSelection = new EventEmitter<Date>();\n\n    @HostBinding('class.igx-calendar__year')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentYear;\n    }\n\n    @HostBinding('class.igx-calendar__year--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentYear;\n    }\n\n    public get isCurrentYear(): boolean {\n        return this.date.getFullYear() === this.value.getFullYear();\n    }\n\n    @HostListener('click')\n    public onClick() {\n        this.onYearSelection.emit(this.value);\n    }\n}\n\n@Directive({\n    selector: '[igxCalendarMonth]'\n})\nexport class IgxCalendarMonthDirective {\n\n    @Input('igxCalendarMonth')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Input()\n    public index;\n\n    @Output()\n    public onMonthSelection = new EventEmitter<Date>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__month')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentMonth;\n    }\n\n    @HostBinding('class.igx-calendar__month--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentMonth;\n    }\n\n    public get isCurrentMonth(): boolean {\n        return this.date.getMonth() === this.value.getMonth();\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    constructor(public elementRef: ElementRef) {}\n\n    @HostListener('click')\n    public onClick() {\n        const date = new Date(this.value.getFullYear(), this.value.getMonth(), this.date.getDate());\n        this.onMonthSelection.emit(date);\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarHeader]'\n})\nexport class IgxCalendarHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarSubheader]'\n})\nexport class IgxCalendarSubheaderTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarScrollMonth]'\n})\nexport class IgxCalendarScrollMonthDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * A callback function to be invoked when month increment/decrement starts.\n     * @hidden\n     */\n    @Input()\n    public startScroll: (keydown?: boolean) => {};\n\n    /**\n     * A callback function to be invoked when month increment/decrement stops.\n     * @hidden\n     */\n    @Input()\n    public stopScroll: (event: any) => {};\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private element: ElementRef, private zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n\n        fromEvent(this.element.nativeElement, 'keyup').pipe(\n            debounce(() => interval(100)),\n            takeUntil(this.destroy$)\n        ).subscribe((event: KeyboardEvent) => {\n            this.stopScroll(event);\n        });\n\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'keydown').pipe(\n                tap((event: KeyboardEvent) => {\n                    if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                    }\n                }),\n                debounce(() => interval(100)),\n                takeUntil(this.destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                    this.zone.run(() => this.startScroll(true));\n                }\n            });\n        });\n\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown')\n    public onMouseDown() {\n        this.startScroll();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseup', ['$event'])\n    public onMouseUp(event: MouseEvent) {\n        this.stopScroll(event);\n    }\n}\n","import { Input, Output, EventEmitter } from '@angular/core';\nimport { WEEKDAYS, Calendar, isDateInRanges, IFormattingOptions, IFormattingViews } from './calendar';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DateRangeDescriptor } from '../core/dates';\nimport { Subject } from 'rxjs';\n\n/**\n * Sets the selction type - single, multi or range.\n */\nexport enum CalendarSelection {\n    SINGLE = 'single',\n    MULTI = 'multi',\n    RANGE = 'range'\n}\n\nexport enum ScrollMonth {\n    PREV = 'prev',\n    NEXT = 'next',\n    NONE = 'none'\n}\n\nexport class IgxCalendarBase implements ControlValueAccessor {\n    /**\n     * Gets the start day of the week.\n     * Can return a numeric or an enum representation of the week day.\n     * Defaults to `Sunday` / `0`.\n     */\n    @Input()\n    public get weekStart(): WEEKDAYS | number {\n        return this.calendarModel.firstWeekDay;\n    }\n\n    /**\n     * Sets the start day of the week.\n     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.\n     */\n    public set weekStart(value: WEEKDAYS | number) {\n        this.calendarModel.firstWeekDay = value;\n    }\n\n    /**\n     * Gets the `locale` of the calendar.\n     * Default value is `\"en\"`.\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the calendar.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initFormatters();\n    }\n\n    /**\n     * Gets the date format options of the days view.\n     */\n    @Input()\n    public get formatOptions(): IFormattingOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Sets the date format options of the days view.\n     * Default is { day: 'numeric', month: 'short', weekday: 'short', year: 'numeric' }\n     */\n    public set formatOptions(formatOptions: IFormattingOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n        this.initFormatters();\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    @Input()\n    public get formatViews(): IFormattingViews {\n        return this._formatViews;\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    public set formatViews(formatViews: IFormattingViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     *\n     * Gets the selection type.\n     * Default value is `\"single\"`.\n     * Changing the type of selection resets the currently\n     * selected values if any.\n     */\n    @Input()\n    public get selection(): string {\n        return this._selection;\n    }\n\n    /**\n     * Sets the selection.\n     */\n    public set selection(value: string) {\n        switch (value) {\n            case CalendarSelection.SINGLE:\n                this.selectedDates = null;\n                break;\n            case CalendarSelection.MULTI:\n            case CalendarSelection.RANGE:\n                this.selectedDates = [];\n                break;\n            default:\n                throw new Error('Invalid selection value');\n        }\n        this._onChangeCallback(this.selectedDates);\n        this.rangeStarted = false;\n        this._selection = value;\n    }\n\n    /**\n     * Gets the selected date(s).\n     *\n     * When selection is set to `single`, it returns\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    @Input()\n    public get value(): Date | Date[] {\n        return this.selectedDates;\n    }\n\n    /**\n     * Sets the selected date(s).\n     *\n     * When selection is set to `single`, it accepts\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    public set value(value: Date | Date[]) {\n        this.selectDate(value);\n    }\n\n    /**\n     * Gets the date that is presented.\n     * By default it is the current date.\n     */\n    @Input()\n    public get viewDate(): Date {\n        return this._viewDate;\n    }\n\n    /**\n     * Sets the date that will be presented in the default view when the component renders.\n     */\n    public set viewDate(value: Date) {\n        this._viewDate = this.getDateOnly(value);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n     * Emits an event when a date is selected.\n     * Provides reference the `selectedDates` property.\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date | Date[]>();\n\n    /**\n     *@hidden\n     */\n    private _selection: CalendarSelection | string = CalendarSelection.SINGLE;\n\n    /**\n     *@hidden\n     */\n    private rangeStarted = false;\n\n    /**\n    *@hidden\n    */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _viewDate: Date;\n\n    /**\n     *@hidden\n     */\n    private _disabledDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _specialDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _formatOptions: IFormattingOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n\n    /**\n     *@hidden\n     */\n    private _formatViews: IFormattingViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n\n    /**\n     *@hidden\n     */\n    protected formatterWeekday;\n\n    /**\n     *@hidden\n     */\n    protected formatterDay;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonth;\n\n    /**\n     *@hidden\n     */\n    protected formatterYear;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonthday;\n\n    /**\n     *@hidden\n     */\n    public calendarModel: Calendar;\n\n    /**\n     * @hidden\n     */\n    public monthScrollDirection = ScrollMonth.NONE;\n\n    /**\n     *@hidden\n     */\n    public scrollMonth$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public stopMonthScroll$ = new Subject<boolean>();\n\n    /**\n     *@hidden\n     */\n    public startMonthScroll$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public selectedDates;\n\n    /**\n     *@hidden\n     */\n    protected _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    protected _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n     */\n    constructor() {\n        this.calendarModel = new Calendar();\n\n        this.viewDate = this.viewDate ? this.viewDate : new Date();\n\n        this.calendarModel.firstWeekDay = this.weekStart;\n        this.initFormatters();\n    }\n\n    /**\n     *@hidden\n     */\n    private getDateOnlyInMs(date: Date) {\n        return this.getDateOnly(date).getTime();\n    }\n\n    /**\n     *@hidden\n     */\n    private generateDateRange(start: Date, end: Date): Date[] {\n        const result = [];\n        start = this.getDateOnly(start);\n        end = this.getDateOnly(end);\n        while (start.getTime() !== end.getTime()) {\n            start = this.calendarModel.timedelta(start, 'day', 1);\n            result.push(start);\n        }\n\n        return result;\n    }\n\n    /**\n     * Performs a single selection.\n     * @hidden\n     */\n    private selectSingle(value: Date) {\n        this.selectedDates = this.getDateOnly(value);\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a multiple selection\n     * @hidden\n     */\n    private selectMultiple(value: Date | Date[]) {\n        if (Array.isArray(value)) {\n            this.selectedDates = this.selectedDates.concat(value.map(v => this.getDateOnly(v)));\n        } else {\n            const valueDateOnly = this.getDateOnly(value);\n            const newSelection = [];\n            if (this.selectedDates.every((date: Date) => date.getTime() !== valueDateOnly.getTime())) {\n                newSelection.push(valueDateOnly);\n            } else {\n                this.selectedDates = this.selectedDates.filter(\n                    (date: Date) => date.getTime() !== valueDateOnly.getTime()\n                );\n            }\n\n            if (newSelection.length > 0) {\n                this.selectedDates = this.selectedDates.concat(newSelection);\n            }\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     *@hidden\n     */\n    private selectRange(value: Date | Date[], excludeDisabledDates: boolean = false) {\n        let start: Date;\n        let end: Date;\n\n        if (Array.isArray(value)) {\n            // this.rangeStarted = false;\n            value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n            start = this.getDateOnly(value[0]);\n            end = this.getDateOnly(value[value.length - 1]);\n            this.selectedDates = [start, ...this.generateDateRange(start, end)];\n        } else {\n            if (!this.rangeStarted) {\n                this.rangeStarted = true;\n                this.selectedDates = [value];\n            } else {\n                this.rangeStarted = false;\n\n                if (this.selectedDates[0].getTime() === value.getTime()) {\n                    this.selectedDates = [];\n                    this._onChangeCallback(this.selectedDates);\n                    return;\n                }\n\n                this.selectedDates.push(value);\n                this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n\n                start = this.selectedDates.shift();\n                end = this.selectedDates.pop();\n                this.selectedDates = [start, ...this.generateDateRange(start, end)];\n            }\n        }\n\n        if (excludeDisabledDates) {\n            this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a single deselection.\n     * @hidden\n     */\n    private deselectSingle(value: Date) {\n        if (this.selectedDates !== null &&\n            this.getDateOnlyInMs(value as Date) === this.getDateOnlyInMs(this.selectedDates)) {\n            this.selectedDates = null;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a multiple deselection.\n     * @hidden\n     */\n    private deselectMultiple(value: Date[]) {\n        value = value.filter(v => v !== null);\n        const selectedDatesCount = this.selectedDates.length;\n        const datesInMsToDeselect: Set<number> = new Set<number>(\n            value.map(v => this.getDateOnlyInMs(v)));\n\n        for (let i = this.selectedDates.length - 1; i >= 0; i--) {\n            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {\n                this.selectedDates.splice(i, 1);\n            }\n        }\n\n        if (this.selectedDates.length !== selectedDatesCount) {\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a range deselection.\n     * @hidden\n     */\n    private deselectRange(value: Date[]) {\n        value = value.filter(v => v !== null);\n        if (value.length < 1) {\n            return;\n        }\n\n        value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const valueStart = this.getDateOnlyInMs(value[0]);\n        const valueEnd = this.getDateOnlyInMs(value[value.length - 1]);\n\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);\n        const selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);\n\n        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {\n            this.selectedDates = [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected initFormatters() {\n        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });\n        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });\n        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });\n        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });\n        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });\n    }\n\n    /**\n     *@hidden\n     */\n    protected getDateOnly(date: Date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date | Date[]) {\n        this.selectedDates = value;\n    }\n\n    /**\n     * Checks whether a date is disabled.\n     * @hidden\n     */\n    public isDateDisabled(date: Date) {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(date, this.disabledDates);\n    }\n\n    /**\n     * Selects date(s) (based on the selection type).\n     */\n    public selectDate(value: Date | Date[]) {\n        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {\n            return new Date();\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                this.selectSingle(value as Date);\n                break;\n            case CalendarSelection.MULTI:\n                this.selectMultiple(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     */\n    public deselectDate(value?: Date | Date[]) {\n        if (this.selectedDates === null || this.selectedDates === []) {\n            return;\n        }\n\n        if (value === null || value === undefined) {\n            this.selectedDates = this.selection === CalendarSelection.SINGLE ? null : [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                this.deselectSingle(value as Date);\n                break;\n            case CalendarSelection.MULTI:\n                this.deselectMultiple(value as Date[]);\n                break;\n            case CalendarSelection.RANGE:\n                this.deselectRange(value as Date[]);\n                break;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDateFromClient(value: Date) {\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n            case CalendarSelection.MULTI:\n                if (!this.isDateDisabled(value)) {\n                    this.selectDate(value);\n                }\n\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n}\n","import { IgxCalendarBase } from './calendar-base';\nimport { ViewChild, ElementRef, HostBinding } from '@angular/core';\nimport { KEYS } from '../core/utils';\n\n/**\n * Sets the calender view - days, months or years.\n */\nexport enum CalendarView {\n    DEFAULT,\n    YEAR,\n    DECADE\n}\nexport class IgxMonthPickerBase extends IgxCalendarBase {\n\n    /**\n     * @hidden\n     */\n    @ViewChild('yearsBtn')\n    public yearsBtn: ElementRef;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Gets the current active view.\n     */\n    public get activeView(): CalendarView {\n        return this._activeView;\n    }\n\n    /**\n     * Sets the current active view.\n     */\n    public set activeView(val: CalendarView) {\n        this._activeView = val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDefaultView(): boolean {\n        return this._activeView === CalendarView.DEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDecadeView(): boolean {\n        return this._activeView === CalendarView.DECADE;\n    }\n\n    /**\n     *@hidden\n     */\n    private _activeView = CalendarView.DEFAULT;\n\n    /**\n     * @hidden\n     */\n    public changeYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), this.viewDate.getMonth());\n        this._activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            this.yearsBtn.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade(): void {\n        this._activeView = CalendarView.DECADE;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewDecade();\n        }\n    }\n\n    /**\n     * Returns the locale representation of the year in the year view if enabled,\n     * otherwise returns the default `Date.getFullYear()` value.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatViews.year) {\n            return this.formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostBinding,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { Calendar } from '../calendar';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxCalendarMonthDirective } from '../calendar.directives';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMonthsViewComponent, multi: true }],\n    selector: 'igx-months-view',\n    templateUrl: 'months-view.component.html'\n})\nexport class IgxMonthsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the months view.\n     * If not set, the `id` will have value `\"igx-months-view-0\"`.\n     * ```html\n     * <igx-months-view id=\"my-months-view\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let monthsViewId =  this.monthsView.id;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-months-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the months view.\n     * By default it is the current date.\n     * ```html\n     * <igx-months-view [date]=\"myDate\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let date =  this.monthsView.date;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the month format option of the months view.\n     * ```typescript\n     * let monthFormat = this.monthsView.monthFormat.\n     * ```\n     */\n    @Input()\n    public get monthFormat(): string {\n        return this._monthFormat;\n    }\n\n    /**\n     * Sets the month format option of the months view.\n     * ```html\n     * <igx-months-view> [monthFormat] = \"short'\"</igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set monthFormat(value: string) {\n        this._monthFormat = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the months view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.monthsView.locale;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the months view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-months-view [locale]=\"de\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and monthFormat, if any.\n     */\n    @Input()\n    public formatView = true;\n\n    /**\n     * Emits an event when a selection is made in the months view.\n     * Provides reference the `date` property in the `IgxMonthsViewComponent`.\n     * ```html\n     * <igx-months-view (onSelection)=\"onSelection($event)\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxCalendarMonthDirective, { read: IgxCalendarMonthDirective })\n    public dates: QueryList<IgxCalendarMonthDirective>;\n\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to\n     * properly render the month names.\n     *\n     * Used in the template of the component\n     *\n     * @hidden\n     */\n    get months(): Date[] {\n        let start = new Date(this.date.getFullYear(), 0, 1);\n        const result = [];\n\n        for (let i = 0; i < 12; i++) {\n            result.push(start);\n            start = this._calendarModel.timedelta(start, 'month', 1);\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterMonth: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _monthFormat = 'short';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initMonthFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the month in the months view.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatView) {\n            return this._formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectMonth(event) {\n        this.onSelection.emit(event);\n\n        this.date = event;\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public monthTracker(index, item): string {\n        return `${item.getMonth()}}`;\n    }\n\n    /**\n     *@hidden\n     */\n    private initMonthFormatter() {\n        this._formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this.monthFormat });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.dates.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) - 1; index >= 0; index--) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            if (nodeRect.top !== nextNodeRect.top && nodeRect.left === nextNodeRect.left) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.dates.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) + 1; index < months.length; index++) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            if (nodeRect.top !== nextNodeRect.top && nodeRect.left === nextNodeRect.left) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.dates.toArray();\n        if (months.indexOf(node) + 1 < months.length) {\n            const month = months[months.indexOf(node) + 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.dates.toArray();\n        if (months.indexOf(node) - 1 >= 0) {\n            const month = months[months.indexOf(node) - 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const month = this.dates.toArray()[0];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const months = this.dates.toArray();\n        const month = months[months.length - 1];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event) {\n        const value = this.dates.find((date) => date.nativeElement === event.target).value;\n        this.date = new Date(value.getFullYear(), value.getMonth(), this.date.getDate());\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n}\n","import { Component, Output, EventEmitter, Input, HostBinding, HostListener, ElementRef, Injectable} from '@angular/core';\nimport { range, Calendar } from '../calendar';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\nlet NEXT_ID = 0;\n\n@Injectable()\nexport class CalendarHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxYearsViewComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: CalendarHammerConfig\n        }\n    ],\n    selector: 'igx-years-view',\n    templateUrl: 'years-view.component.html'\n})\nexport class IgxYearsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the years view.\n     * If not set, the `id` will have value `\"igx-years-view-0\"`.\n     * ```html\n     * <igx-years-view id = \"my-years-view\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let yearsViewId =  this.yearsView.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-years-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the years view.\n     * By default it is the current date.\n     * ```html\n     * <igx-years-view [date]=\"myDate\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let date =  this.yearsView.date;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the year format option of the years view.\n     * ```typescript\n     * let yearFormat = this.yearsView.yearFormat.\n     * ```\n     */\n    @Input()\n    public get yearFormat(): string {\n        return this._yearFormat;\n    }\n\n    /**\n     * Sets the year format option of the years view.\n     * ```html\n     * <igx-years-view [yearFormat]=\"numeric\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set yearFormat(value: string) {\n        this._yearFormat = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the years view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.yearsView.locale;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the years view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-years-view [locale]=\"de\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and yearFormat, if any.\n     */\n    @Input()\n    public formatView: boolean;\n\n    /**\n     * Emits an event when a selection is made in the years view.\n     * Provides reference the `date` property in the `IgxYearsViewComponent`.\n     * ```html\n     * <igx-years-view (onSelection)=\"onSelection($event)\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to properly\n     * render the years.\n     *\n     * Used in the template of the component.\n     *\n     * @hidden\n     */\n    get decade(): number[] {\n        const result = [];\n        const start = this.date.getFullYear() - 3;\n        const end = this.date.getFullYear() + 4;\n\n        for (const year of range(start, end)) {\n            result.push(new Date(year, this.date.getMonth(), this.date.getDate()));\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterYear: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _yearFormat = 'numeric';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initYearFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the year in the years view.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatView) {\n            return this._formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectYear(event) {\n        this.date = event;\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    public scroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const delta = event.deltaY < 0 ? -1 : 1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     *@hidden\n     */\n    public pan(event) {\n        const delta = event.deltaY < 0 ? 1 : -1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public yearTracker(index, item): string {\n        return `${item.getFullYear()}}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(-1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter')\n    public onKeydownEnter() {\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    private initYearFormatter() {\n        this._formatterYear = new Intl.DateTimeFormat(this._locale, { year: this.yearFormat });\n    }\n\n    /**\n     *@hidden\n     */\n    private generateYearRange(delta: number) {\n        const currentYear = new Date().getFullYear();\n\n        if ((delta > 0 && this.date.getFullYear() - currentYear >= 95) ||\n            (delta < 0 && currentYear - this.date.getFullYear() >= 95)) {\n            return;\n        }\n        this.date = this._calendarModel.timedelta(this.date, 'year', delta);\n    }\n}\n","import { Component, Input, Output, EventEmitter, HostBinding, ElementRef, HostListener } from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../calendar';\nimport { DateRangeDescriptor } from '../../core/dates';\nimport { CalendarSelection } from '../calendar-base';\n\n/**\n *@hidden\n*/\n@Component({\n    selector: 'igx-day-item',\n    templateUrl: 'day-item.component.html'\n})\nexport class IgxDayItemComponent {\n    @Input()\n    public date: ICalendarDate;\n\n    @Input()\n    public selection: string;\n\n    @Input()\n    public value: Date | Date[];\n\n    @Input()\n    public disabledDates: DateRangeDescriptor[];\n\n    @Input()\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    @Input()\n    public specialDates: DateRangeDescriptor[];\n\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    public get selected(): boolean {\n        const date = this.date.date;\n\n        if (!this.value) {\n            return;\n        }\n\n        if (this.selection === CalendarSelection.SINGLE) {\n        this._selected = (this.value as Date).getTime() === date.getTime();\n        } else {\n        this._selected = (this.value as Date[])\n            .some((each) => each.getTime() === date.getTime());\n        }\n\n        return this._selected;\n    }\n\n    public set selected(value: boolean) {\n        this._selected = value;\n    }\n\n    public get isCurrentMonth(): boolean {\n        return this.date.isCurrentMonth;\n    }\n\n    public get isPreviousMonth(): boolean {\n        return this.date.isPrevMonth;\n    }\n\n    public get isNextMonth(): boolean {\n        return this.date.isNextMonth;\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    public get isInactive(): boolean {\n        return this.date.isNextMonth || this.date.isPrevMonth;\n    }\n\n    public get isToday(): boolean {\n        const today = new Date(Date.now());\n        const date = this.date.date;\n        return (date.getFullYear() === today.getFullYear() &&\n            date.getMonth() === today.getMonth() &&\n            date.getDate() === today.getDate()\n        );\n    }\n\n    public get isWeekend(): boolean {\n        const day = this.date.date.getDay();\n        return day === 0 || day === 6;\n    }\n\n    public get isDisabled(): boolean {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.disabledDates);\n    }\n\n    public get isOutOfRange(): boolean {\n        if (!this.outOfRangeDates) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.outOfRangeDates);\n    }\n\n    public get isSpecial(): boolean {\n        if (this.specialDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.specialDates);\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__date')\n    public get defaultCSS(): boolean {\n        return this.date.isCurrentMonth && !(this.isWeekend && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--inactive')\n    public get isInactiveCSS(): boolean {\n        return this.isInactive;\n    }\n\n    @HostBinding('class.igx-calendar__date--current')\n    public get isTodayCSS(): boolean {\n        return this.isToday && !this.selected;\n    }\n\n    @HostBinding('class.igx-calendar__date--selected')\n    public get isSelectedCSS(): boolean {\n        return this.selected;\n    }\n\n    @HostBinding('class.igx-calendar__date--weekend')\n    public get isWeekendCSS(): boolean {\n        return this.isWeekend;\n    }\n\n    @HostBinding('class.igx-calendar__date--disabled')\n    public get isDisabledCSS(): boolean {\n        return this.isDisabled || this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--special')\n    public get isSpecialCSS(): boolean {\n        return this.isSpecial;\n    }\n\n    private _selected = false;\n\n    constructor(private elementRef: ElementRef) { }\n\n    @HostListener('click')\n    @HostListener('keydown.enter')\n    public onSelect() {\n        this.onDateSelection.emit(this.date);\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    DoCheck\n} from '@angular/core';\nimport { ICalendarDate } from '../../calendar';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { slideInLeft, slideInRight } from '../../animations/main';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { DateRangeDescriptor, DateRangeType } from '../../core/dates';\nimport { IgxCalendarBase, ScrollMonth } from '../calendar-base';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDaysViewComponent\n        }\n    ],\n    animations: [\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-days-view',\n    templateUrl: 'days-view.component.html'\n})\nexport class IgxDaysViewComponent extends IgxCalendarBase implements DoCheck {\n    /**\n     * Sets/gets the `id` of the days view.\n     * If not set, the `id` will have value `\"igx-days-view-0\"`.\n     * ```html\n     * <igx-days-view id=\"my-days-view\"></igx-days-view>\n     * ```\n     * ```typescript\n     * let daysViewId =  this.daysView.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-days-view-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public animationAction: any = '';\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public changeDaysView = false;\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onViewChanged = new EventEmitter<Date>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxDayItemComponent, { read: IgxDayItemComponent })\n    public dates: QueryList<IgxDayItemComponent>;\n\n    /**\n     * @hidden\n     */\n    public nextDate: Date;\n\n    /**\n     * @hidden\n     */\n    public callback: (dates?, next?) => void;\n\n    /**\n     * @hidden\n     */\n    public isKeydownTrigger = false;\n\n    /**\n     * @hidden\n     */\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    public get getCalendarMonth(): ICalendarDate[][] {\n        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        if (!this.changeDaysView && this.dates) {\n            this.disableOutOfRangeDates();\n        }\n    }\n\n    /**\n     * Returns the locale representation of the date in the days view.\n     *\n     * @hidden\n     */\n    public formattedDate(value: Date): string {\n        if (this.formatViews.day) {\n            return this.formatterDay.format(value);\n        }\n        return `${value.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public generateWeekHeader(): string[] {\n        const dayNames = [];\n        const rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];\n        for (const day of rv) {\n            dayNames.push(this.formatterWeekday.format(day.date));\n        }\n\n        return dayNames;\n    }\n\n    /**\n     * @hidden\n     */\n    public rowTracker(index, item): string {\n        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public dateTracker(index, item): string {\n        return `${item.date.getMonth()}--${item.date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentMonth(value: Date): boolean {\n        return this.viewDate.getMonth() === value.getMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentYear(value: Date): boolean {\n        return this.viewDate.getFullYear() === value.getFullYear();\n    }\n\n    /**\n     *@hidden\n     */\n    public focusActiveDate() {\n        let date = this.dates.find((d) => d.selected);\n\n        if (!date) {\n            date = this.dates.find((d) => d.isToday);\n        }\n\n        if (date) {\n            date.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDay(event) {\n        this.selectDateFromClient(event.date);\n        this.onDateSelection.emit(event);\n\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public animationDone(event, isLast: boolean) {\n        if (isLast) {\n            if (this.monthScrollDirection !== ScrollMonth.NONE) {\n                this.scrollMonth$.next();\n            }\n\n            const date = this.dates.find((d) => d.selected);\n            if (date && !this.isKeydownTrigger) {\n                setTimeout(() => {\n                    date.nativeElement.focus();\n                }, parseInt(slideInRight.options.params.duration, 10));\n            } else if (this.callback && (event.toState === 'next' || event.toState === 'prev')) {\n                this.callback(this.dates, this.nextDate);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusPreviousUpDate(target, prevView = false) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index - 7 > -1; index -= 7) {\n            const date = prevView ? dates[index] : dates[index - 7];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) - 7 < 0) {\n            const dayItem = dates[dates.indexOf(node)];\n            this.nextDate = new Date(dayItem.date.date);\n\n            this.nextDate.setDate(this.nextDate.getDate() - 7);\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'prev';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusPreviousUpDate(day.nativeElement, true);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusNextDownDate(target, nextView = false) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index + 7 < this.dates.length; index += 7) {\n            const date = nextView ? dates[index] : dates[index + 7];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) + 7 > this.dates.length - 1) {\n            const dayItem = dates[dates.indexOf(node)];\n            this.nextDate = new Date(dayItem.date.date);\n\n            this.nextDate.setDate(this.nextDate.getDate() + 7);\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'next';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusNextDownDate(day.nativeElement, true);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusPreviousDate(target) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index > 0; index--) {\n            const date = dates[index - 1];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) === 0) {\n            const dayItem = dates[0];\n            if (dayItem.isCurrentMonth) {\n                this.nextDate = this.calendarModel.timedelta(dayItem.date.date, 'day', -1);\n            } else {\n                this.nextDate = new Date(dayItem.date.date);\n            }\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'prev';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusPreviousDate(day.nativeElement);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusNextDate(target) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n\n        for (let index = dates.indexOf(node); index < this.dates.length - 1; index++) {\n            const date = dates[index + 1];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) === this.dates.length - 1) {\n            const dayItem = dates[this.dates.length - 1];\n            this.nextDate = new Date(dayItem.date.date);\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'next';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusNextDate(day.nativeElement);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private disableOutOfRangeDates() {\n        const dateRange = [];\n        this.dates.toArray().forEach((date) => {\n            if (!date.isCurrentMonth) {\n                dateRange.push(date.date.date);\n            }\n        });\n\n        this.outOfRangeDates = [{\n            type: DateRangeType.Specific,\n            dateRange: dateRange\n        }];\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusPreviousUpDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusNextDownDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusPreviousDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusNextDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const dates = this.dates.filter(d => d.isCurrentMonth);\n        for (let i = 0; i < dates.length; i++) {\n            if (!dates[i].isDisabled) {\n                dates[i].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const dates = this.dates.filter(d => d.isCurrentMonth);\n        for (let i = dates.length - 1; i >= 0; i--) {\n            if (!dates[i].isDisabled) {\n                dates[i].nativeElement.focus();\n                break;\n            }\n        }\n    }\n}\n","import { transition, trigger, useAnimation } from '@angular/animations';\nimport {\n    Component,\n    ContentChild,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    ElementRef,\n    AfterViewInit\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { fadeIn, scaleInCenter } from '../animations/main';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarSubheaderTemplateDirective\n} from './calendar.directives';\nimport { KEYS } from '../core/utils';\nimport { ICalendarDate, monthRange } from './calendar';\nimport { CalendarView, IgxMonthPickerBase } from './month-picker-base';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { interval } from 'rxjs';\nimport { takeUntil, debounce, skipLast, switchMap } from 'rxjs/operators';\nimport { ScrollMonth } from './calendar-base';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Calendar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/calendar.html)\n *\n * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple\n * or range selection.\n *\n * Example:\n * ```html\n * <igx-calendar selection=\"range\"></igx-calendar>\n * ```\n */\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxCalendarComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-calendar',\n    templateUrl: 'calendar.component.html'\n})\nexport class IgxCalendarComponent extends IgxMonthPickerBase implements AfterViewInit {\n    /**\n     * Sets/gets the `id` of the calendar.\n     * If not set, the `id` will have value `\"igx-calendar-0\"`.\n     * ```html\n     * <igx-calendar id = \"my-first-calendar\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let calendarId =  this.calendar.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-calendar-${NEXT_ID++}`;\n\n    @Input()\n    public hasHeader = true;\n\n    /**\n     * Sets/gets whether the calendar header will be in vertical position.\n     * Default value is `false`.\n     * ```html\n     * <igx-calendar [vertical] = \"true\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let isVertical = this.calendar.vertical;\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * The default aria role attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'grid';\n\n    /**\n     * The default aria lebelled by attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy = 'calendar';\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar--vertical')\n    get styleVerticalClass(): boolean {\n        return this.vertical;\n    }\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('monthsBtn')\n    public monthsBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', {read: IgxDaysViewComponent})\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('prevMonthBtn')\n    public prevMonthBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('nextMonthBtn')\n    public nextMonthBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    get isYearView(): boolean {\n        return this.activeView === CalendarView.YEAR;\n    }\n\n    /**\n     * @hidden\n     */\n    get monthAction(): string {\n        return this._monthAction;\n    }\n    /**\n     * @hidden\n     */\n    set monthAction(val: string) {\n        this._monthAction = val;\n    }\n\n    /**\n     * Gets the header template.\n     * ```typescript\n     * let headerTemplate =  this.calendar.headerTeamplate;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    get headerTemplate(): any {\n        if (this.headerTemplateDirective) {\n            return this.headerTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the header template.\n     * ```html\n     * <igx-calendar headerTemplateDirective = \"igxCalendarHeader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set headerTemplate(directive: any) {\n        this.headerTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the subheader template.\n     * ```typescript\n     * let subheaderTemplate = this.calendar.subheaderTemplate;\n     * ```\n     */\n    get subheaderTemplate(): any {\n        if (this.subheaderTemplateDirective) {\n            return this.subheaderTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the subheader template.\n     * ```html\n     * <igx-calendar subheaderTemplate = \"igxCalendarSubheader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set subheaderTemplate(directive: any) {\n        this.subheaderTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the context for the template marked with the `igxCalendarHeader` directive.\n     * ```typescript\n     * let headerContext =  this.calendar.headerContext;\n     * ```\n     */\n    get headerContext() {\n        const date: Date = this.headerDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n     * or `igxCalendarSubHeaderYear` directive.\n     * ```typescript\n     * let context =  this.calendar.context;\n     * ```\n     */\n    get context() {\n        const date: Date = this.viewDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * @hidden\n     */\n    get headerDate(): Date {\n        return this.selectedDates ? this.selectedDates : new Date();\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxCalendarHeaderTemplateDirective), { read: IgxCalendarHeaderTemplateDirective })\n    private headerTemplateDirective: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:max-line-length\n    @ContentChild(forwardRef(() => IgxCalendarSubheaderTemplateDirective), { read: IgxCalendarSubheaderTemplateDirective })\n    private subheaderTemplateDirective: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    private _monthAction = '';\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n\n        this.startMonthScroll$.pipe(\n            takeUntil(this.stopMonthScroll$),\n            switchMap(() => this.daysView.scrollMonth$.pipe(\n                skipLast(1),\n                debounce(() => interval(300)),\n                takeUntil(this.stopMonthScroll$)\n            ))).subscribe(() => {\n                switch (this.daysView.monthScrollDirection) {\n                    case ScrollMonth.PREV:\n                        this.previousMonth();\n                        break;\n                    case ScrollMonth.NEXT:\n                        this.nextMonth();\n                        break;\n                    case ScrollMonth.NONE:\n                    default:\n                        break;\n                }\n        });\n    }\n\n    /**\n     * Returns the locale representation of the month in the month view if enabled,\n     * otherwise returns the default `Date.getMonth()` value.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatViews.month) {\n            return this.formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public previousMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'month', -1);\n        this._monthAction = 'prev';\n\n        if (this.daysView) {\n            this.daysView.isKeydownTrigger = isKeydownTrigger;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'month', 1);\n        this._monthAction = 'next';\n\n        if (this.daysView) {\n            this.daysView.isKeydownTrigger = isKeydownTrigger;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public startPrevMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.daysView.monthScrollDirection = ScrollMonth.PREV;\n\n        this.previousMonth(isKeydownTrigger);\n    }\n\n    /**\n     * @hidden\n     */\n    public startNextMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.daysView.monthScrollDirection = ScrollMonth.NEXT;\n\n        this.nextMonth(isKeydownTrigger);\n    }\n\n    /**\n     * @hidden\n     */\n    public stopMonthScroll = (event) => {\n        event.stopPropagation();\n\n        this.daysView.stopMonthScroll$.next(true);\n        this.daysView.stopMonthScroll$.complete();\n\n\n        if (this.daysView.monthScrollDirection === ScrollMonth.PREV) {\n            this.prevMonthBtn.nativeElement.focus();\n        } else if (this.daysView.monthScrollDirection === ScrollMonth.NEXT) {\n            this.nextMonthBtn.nativeElement.focus();\n        }\n\n        this.daysView.monthScrollDirection = ScrollMonth.NONE;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade() {\n        super.activeViewDecade();\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        super.activeViewDecadeKB(event);\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public getFormattedDate(): { weekday: string, monthday: string } {\n\n        const date = this.headerDate;\n\n        return {\n            monthday: this.formatterMonthday.format(date),\n            weekday: this.formatterWeekday.format(date),\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public childClicked(instance: ICalendarDate) {\n        if (instance.isPrevMonth) {\n            this.previousMonth();\n        }\n\n        if (instance.isNextMonth) {\n            this.nextMonth();\n        }\n\n        this.selectDateFromClient(instance.date);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public viewChanged(event) {\n        this.viewDate = this.calendarModel.timedelta(event, 'month', 0);\n    }\n\n    /**\n     * @hidden\n     */\n    public changeMonth(event: Date) {\n        this.viewDate = new Date(this.viewDate.getFullYear(), event.getMonth());\n        this.activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            this.monthsBtn.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewYear(): void {\n        this.activeView = CalendarView.YEAR;\n        requestAnimationFrame(() => {\n            this.monthsView.dates.find((date) => date.isCurrentMonth).nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewYearKB(event): void {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewYear();\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     *```typescript\n     * this.calendar.deselectDate(new Date(`2018-06-12`));\n     *````\n     */\n    public deselectDate(value?: Date | Date[]) {\n        super.deselectDate(value);\n\n        this.daysView.selectedDates = this.selectedDates;\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            let year = this.daysView.nextDate.getFullYear();\n\n            let month = this.daysView.nextDate.getMonth() - 1;\n            if (month < 0) { month = 11; year -= 1; }\n\n            const range = monthRange(this.daysView.nextDate.getFullYear(), month);\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setMonth(month);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n\n        this.previousMonth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextMonth(true);\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            let year = this.daysView.nextDate.getFullYear();\n\n            let month = this.daysView.nextDate.getMonth() + 1;\n            if (month > 11) { month = 0; year += 1; }\n\n            const range = monthRange(this.daysView.nextDate.getFullYear(), month);\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setMonth(month);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.shift.pageup', ['$event'])\n    public onKeydownShiftPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n\n        this.daysView.animationAction = 'prev';\n        this.daysView.isKeydownTrigger = true;\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            const year = this.daysView.nextDate.getFullYear() - 1;\n\n            const range = monthRange(year, this.daysView.nextDate.getMonth());\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.shift.pagedown', ['$event'])\n    public onKeydownShiftPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n\n        this.daysView.animationAction = 'next';\n        this.daysView.isKeydownTrigger = true;\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            const year = this.daysView.nextDate.getFullYear() + 1;\n\n            const range = monthRange(year, this.daysView.nextDate.getMonth());\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownEnd(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:mouseup', ['$event'])\n    public onMouseUp(event: KeyboardEvent) {\n        if (this.daysView && this.daysView.monthScrollDirection !== ScrollMonth.NONE) {\n            this.stopMonthScroll(event);\n        }\n    }\n\n    /**\n     * Helper method building and returning the context object inside\n     * the calendar templates.\n     * @hidden\n     */\n    private generateContext(value: Date) {\n        const formatObject = {\n            monthView: () => this.activeViewYear(),\n            yearView: () => this.activeViewDecade(),\n            ...this.calendarModel.formatToParts(value, this.locale, this.formatOptions,\n                ['era', 'year', 'month', 'day', 'weekday'])\n        };\n        return { $implicit: formatObject };\n    }\n}\n","import {\n    Component,\n    HostListener,\n    ViewChild,\n    HostBinding,\n    Input\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../../animations/main';\nimport { KEYS } from '../../core/utils';\nimport { IgxMonthsViewComponent } from '../months-view/months-view.component';\nimport { IgxMonthPickerBase, CalendarView } from '../month-picker-base';\nimport { IgxYearsViewComponent } from '../years-view/years-view.component';\nimport { IgxDaysViewComponent } from '../days-view/days-view.component';\n\nlet NEXT_ID = 0;\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxMonthPickerComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-month-picker',\n    templateUrl: 'month-picker.component.html'\n})\nexport class IgxMonthPickerComponent extends IgxMonthPickerBase {\n    /**\n     * Sets/gets the `id` of the month picker.\n     * If not set, the `id` will have value `\"igx-month-picker-0\"`.\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-month-picker-${NEXT_ID++}`;\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', {read: IgxMonthsViewComponent})\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', {read: IgxDaysViewComponent})\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    public yearAction = '';\n\n    /**\n     * @hidden\n     */\n    public animationDone() {\n        this.yearAction = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        super.activeViewDecadeKB(event);\n\n        if (event.key === KEYS.RIGHT_ARROW || event.key === KEYS.RIGHT_ARROW_IE) {\n            event.preventDefault();\n            this.nextYear();\n        }\n\n        if (event.key === KEYS.LEFT_ARROW || event.key === KEYS.LEFT_ARROW_IE) {\n            event.preventDefault();\n            this.previousYear();\n        }\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) { this.dacadeView.el.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade() {\n        super.activeViewDecade();\n\n        requestAnimationFrame(() => {\n            this.dacadeView.el.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYear() {\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.nextYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYear() {\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.previousYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), event.getMonth(), event.getDate());\n        this.activeView = CalendarView.DEFAULT;\n\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n\n        requestAnimationFrame(() => {\n            this.yearsBtn.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public selectMonth(event: Date) {\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * Selects a date.\n     *```typescript\n     * this.monPicker.selectDate(new Date(`2018-06-12`));\n     *```\n     */\n    public selectDate(value: Date) {\n        if (!value) {\n            return new Date();\n        }\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        super.selectDate(value);\n        this.viewDate = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        if (value) {\n            this.viewDate = this.selectedDates = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownEnd(event);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxCalendarComponent } from './calendar.component';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarMonthDirective,\n    IgxCalendarSubheaderTemplateDirective,\n    IgxCalendarYearDirective,\n    IgxCalendarScrollMonthDirective\n} from './calendar.directives';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { IgxDayItemComponent } from './days-view/day-item.component';\nimport { IgxMonthPickerComponent } from './month-picker/month-picker.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxDayItemComponent,\n        IgxDaysViewComponent,\n        IgxCalendarComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective,\n        IgxCalendarScrollMonthDirective,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent\n    ],\n    exports: [\n        IgxCalendarComponent,\n        IgxDaysViewComponent,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective\n    ],\n    imports: [CommonModule, FormsModule, IgxIconModule]\n})\nexport class IgxCalendarModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    Directive,\n    HostBinding,\n    Optional,\n    Inject,\n    Input,\n    NgModule,\n    OnInit,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nlet NEXT_ID = 0;\n\n/**\n * IgxCardMedia is container for the card media section.\n * Use it to wrap images and videos.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-media'\n})\nexport class IgxCardMediaDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card__media')\n    public cssClass = 'igx-card__media';\n\n    /**\n     * An @Input property that sets the `width` and `min-width` style property\n     * of the media container. If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media width=\"300px\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.width')\n    @HostBinding('style.min-width')\n    @Input()\n    public width = 'auto';\n\n    /**\n     * An @Input property that sets the `height` style property of the media container.\n     * If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media height=\"50%\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.height')\n    @Input()\n    public height = 'auto';\n\n    /**\n     * An @Input property that sets the `role` attribute of the media container.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'img';\n}\n\n/**\n * IgxCardHeader is container for the card header\n */\n@Component({\n    selector: 'igx-card-header',\n    templateUrl: 'card-header.component.html'\n})\nexport class IgxCardHeaderComponent {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header')\n    public cssClass = 'igx-card-header';\n\n    /**\n     * An @Input property that sets the layout style of the header.\n     * By default the header elements(thumbnail and title/subtitle) are aligned horizontally.\n     * ```html\n     * <igx-card-header [vertical]=\"true\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('class.igx-card-header--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card header.\n     * By default the value is set to `header`.\n     * ```html\n     * <igx-card-header role=\"header\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'header';\n}\n\n/**\n * IgxCardThumbnail is container for the card thumbnail section.\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    selector: '[igxCardThumbnail]'\n})\nexport class IgxCardThumbnailDirective { }\n\n/**\n * igxCardHeaderTitle is used to denote the header title in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderTitle]'\n})\nexport class IgxCardHeaderTitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__title')\n    public cssClass = 'igx-card__header__title';\n}\n\n/**\n * igxCardHeaderSubtitle is used to denote the header subtitle in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderSubtitle]'\n})\nexport class IgxCardHeaderSubtitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__subtitle')\n    public cssClass = 'igx-card-header__subtitle';\n}\n/**\n * IgxCardContent is container for the card content.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-content'\n})\nexport class IgxCardContentDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-content')\n    public cssClass = 'igx-card-content';\n}\n\n/**\n * IgxCardFooter is container for the card footer\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-footer'\n})\nexport class IgxCardFooterDirective {\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card footer.\n     * By default the value is set to `footer`.\n     * ```html\n     * <igx-card-footer role=\"footer\"></igx-card-footer>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'footer';\n}\n\n/**\n * **Ignite UI for Angular Card** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/card.html)\n *\n * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way. There are\n * five sections in a card that you can use to organize your content. These are header, media, content, actions, and footer.\n *\n * Example:\n * ```html\n * <igx-card>\n *   <igx-card-header>\n *     <h3 igxCardHeaderTitle>{{title}}</h3>\n *     <h5 igxCardHeaderSubtitle>{{subtitle}}</h5>\n *   </igx-card-header>\n *   <igx-card-actions>\n *       <button igxButton igxRipple>Share</button>\n *       <button igxButton igxRipple>Play Album</button>\n *   </igx-card-actions>\n * </igx-card>\n * ```\n */\n\nexport enum IgxCardType {\n    DEFAULT = 'default',\n    OUTLINED = 'outlined'\n}\n\n@Component({\n    selector: 'igx-card',\n    templateUrl: 'card.component.html'\n})\nexport class IgxCardComponent {\n    /**\n     * Sets/gets the `id` of the card.\n     * If not set, `id` will have value `\"igx-card-0\"`;\n     * ```html\n     * <igx-card id = \"my-first-card\"></igx-card>\n     * ```\n     * ```typescript\n     * let cardId =  this.card.id;\n     * ```\n     * @memberof IgxCardComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-card-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card.\n     * By default the value is set to `group`.\n     * ```html\n     * <igx-card role=\"group\"></igx-card>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'group';\n\n    /**\n     * An @Input property that sets the value of the `type` attribute of the card.\n     * By default the value is set to `default`. You can make the card use the\n     * outlined style by setting the value to `outlined`.\n     * ```html\n     * <igx-card type=\"outlined\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card')\n    @Input()\n    public type: IgxCardType | string = IgxCardType.DEFAULT;\n\n    /**\n     * A getter which will return true if the card type is `outlined`.\n     */\n    @HostBinding('class.igx-card--outlined')\n    get isOutlinedCard() {\n        return this.type === IgxCardType.OUTLINED;\n    }\n\n    /**\n     * An @Input property that sets the value of the `horizontal` attribute of the card.\n     * Setting this to `true` will make the different card sections align horizontally,\n     * essentially flipping the card to the side.\n     * ```html\n     * <igx-card [horizontal]=\"true\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card--horizontal')\n    @Input()\n    public horizontal = false;\n}\n\nexport enum IgxCardActionsLayout {\n    DEFAULT = 'default',\n    JUSTIFY = 'justify',\n}\n\n/**\n * IgxCardActions is container for the card actions.\n */\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-actions',\n    templateUrl: 'card-actions.component.html'\n})\nexport class IgxCardActionsComponent implements OnInit, OnChanges {\n    private isVerticalSet = false;\n\n    constructor(@Optional() @Inject(IgxCardComponent) public card: IgxCardComponent) { }\n\n    /**\n     * An @Input property that sets the layout style of the actions.\n     * By default icons and icon buttons, as well as regular buttons\n     * are split into two containers, which are then positioned on both ends\n     * of the card-actions area.\n     * You can justify the elements in those groups so they are positioned equally\n     * from one another taking up all the space available along the card actions axis.\n     * ```html\n     * <igx-card-actions layout=\"justify\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions')\n    @Input()\n    public layout: IgxCardActionsLayout | string = 'default';\n\n    /**\n     * An @Input property that sets the vertical attribute of the actions.\n     * When set to `true` the actions will be layed out vertically.\n     */\n    @HostBinding('class.igx-card-actions--vertical')\n    @Input()\n    public vertical: boolean;\n\n    /**\n     * A getter that returns `true` when the layout has been\n     * set to `justify`.\n     */\n    @HostBinding('class.igx-card-actions--justify')\n    get isJustifyLayout() {\n        return this.layout === IgxCardActionsLayout.JUSTIFY;\n    }\n\n    /**\n     * An @Input property that sets order of the buttons the actions area.\n     * By default all icons/icon buttons are placed at the end of the action\n     * area. Any regular buttons(flat, raised) will appear before the icons/icon buttons\n     * placed in the actions area.\n     * If you want to reverse their positions so that icons appear first, use the `reverse`\n     * attribute.\n     * ```html\n     * <igx-card-actions [reverse]=\"true\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions--reverse')\n    @Input()\n    public reverse = false;\n\n    ngOnChanges(changes: SimpleChanges) {\n        for (const prop in changes) {\n            if (prop === 'vertical') {\n                this.isVerticalSet = true;\n            }\n        }\n    }\n\n    ngOnInit() {\n        this.vertical = !this.isVerticalSet && this.card.horizontal;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    exports: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    imports: [CommonModule, IgxButtonModule]\n})\nexport class IgxCardModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Direction { NONE, NEXT, PREV }\n\n/**\n * **Ignite UI for Angular Carousel** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/carousel.html)\n *\n * The Ignite UI Carousel is used to browse or navigate through a collection of slides. Slides can contain custom\n * content such as images or cards and be used for things such as on-boarding tutorials or page-based interfaces.\n * It can be used as a separate fullscreen element or inside another component.\n *\n * Example:\n * ```html\n * <igx-carousel>\n *   <igx-slide>\n *     <h3>First Slide Header</h3>\n *     <p>First slide Content</p>\n *   <igx-slide>\n *   <igx-slide>\n *     <h3>Second Slide Header</h3>\n *     <p>Second Slide Content</p>\n * </igx-carousel>\n * ```\n */\n@Component({\n    selector: 'igx-carousel',\n    templateUrl: 'carousel.component.html',\n    styles: [`\n    :host {\n        display: block;\n        outline-style: none;\n    }`]\n})\n\nexport class IgxCarouselComponent implements OnDestroy {\n    /**\n     * Returns the `role` attribute of the carousel.\n     * ```typescript\n     * let carouselRole =  this.carousel.role;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.role') public role = 'region';\n\n    /**\n     * Sets the `id` of the carousel.\n     * If not set, the `id` of the first carousel component will be `\"igx-carousel-0\"`.\n     * ```html\n     * <igx-carousel id=\"my-first-carousel\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-carousel-${NEXT_ID++}`;\n\n    /**\n     * Sets whether the carousel should `loop` back to the first slide after reaching the last slide.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [loop]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public loop = true;\n\n    /**\n     * Sets whether the carousel will `pause` the slide transitions on user interactions.\n     * Default value is `true`.\n     * ```html\n     *  <igx-carousel [pause]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public pause = true;\n\n    /**\n     * Returns the time `interval` in milliseconds before the slide changes.\n     * ```typescript\n     * let timeInterval = this.carousel.interval;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @Input()\n    get interval(): number {\n        return this._interval;\n    }\n\n    /**\n     * Sets the time `interval` in milliseconds before the slide changes.\n     * If not set, the carousel will not change `slides` automatically.\n     * ```html\n     * <igx-carousel [interval] = \"1000\"></carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    set interval(value: number) {\n        this._interval = +value;\n        this._restartInterval();\n    }\n    /**\n     * Returns the `tabIndex` of the carousel component.\n     * ```typescript\n     * let tabIndex =  this.carousel.tabIndex;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.tabindex')\n    get tabIndex() {\n        return 0;\n    }\n\n    /**\n     * Controls whether the carousel should render the left/right `navigation` buttons.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [navigation] = \"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public navigation = true;\n\n    /**\n     * An event that is emitted after a slide transition has happened.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideChanged)=\"onSlideChanged($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideChanged = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been added to the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideAdded)=\"onSlideAdded($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideAdded = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been removed from the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideRemoved)=\"onSlideRemoved($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideRemoved = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after the carousel has been paused.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPaused)=\"onCarouselPaused($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPaused = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * An event that is emitted after the carousel has resumed transitioning between `slides`.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPlaying)=\"onCarouselPlaying($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPlaying = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * The collection of `slides` currently in the carousel.\n     * ```typescript\n     * let slides: IgxSlideComponent[] = this.carousel.slides;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public slides: IgxSlideComponent[] = [];\n    private _interval: number;\n    private _lastInterval: any;\n    private _playing: boolean;\n    private _currentSlide: IgxSlideComponent;\n    private _destroyed: boolean;\n    private _total = 0;\n\n    constructor(private element: ElementRef) { }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this._destroyed = true;\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n        }\n    }\n    /**\n     * @hidden\n     * @memberof IgxCarouselComponent\n     */\n    public setAriaLabel(slide) {\n        return `Item ${slide.index + 1} of ${this.total}`;\n    }\n\n    /**\n     * Returns the total number of `slides` in the carousel.\n     * ```typescript\n     * let slideCount =  this.carousel.total;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get total(): number {\n        return this._total;\n    }\n\n    /**\n     * The index of the slide being currently shown.\n     * ```typescript\n     * let currentSlideNumber =  this.carousel.current;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get current(): number {\n        return !this._currentSlide ? 0 : this._currentSlide.index;\n    }\n\n    /**\n     * Returns a boolean indicating if the carousel is playing.\n     * ```typescript\n     * let isPlaying =  this.carousel.isPlaying;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isPlaying(): boolean {\n        return this._playing;\n    }\n\n    /**\n     * Returns Ð° boolean indicating if the carousel is destroyed.\n     * ```typescript\n     * let isDestroyed =  this.carousel.isDestroyed;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isDestroyed(): boolean {\n        return this._destroyed;\n    }\n    /**\n     * Returns a reference to the carousel element in the DOM.\n     * ```typescript\n     * let nativeElement =  this.carousel.nativeElement;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the slide corresponding to the provided `index` or null.\n     * ```typescript\n     * let slide1 =  this.carousel.get(1);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get(index: number): IgxSlideComponent {\n        for (const each of this.slides) {\n            if (each.index === index) {\n                return each;\n            }\n        }\n    }\n\n    /**\n     * Adds a new slide to the carousel.\n     * ```typescript\n     * this.carousel.add(newSlide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public add(slide: IgxSlideComponent) {\n        slide.index = this.total;\n        this.slides.push(slide);\n        this._total += 1;\n\n        if (this.total === 1 || slide.active) {\n            this.select(slide);\n            if (this.total === 1) {\n                this.play();\n            }\n        } else {\n            slide.active = false;\n        }\n\n        this.onSlideAdded.emit({ carousel: this, slide });\n    }\n\n    /**\n     * Removes a slide from the carousel.\n     * ```typescript\n     * this.carousel.remove(slide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public remove(slide: IgxSlideComponent) {\n        if (slide && slide === this.get(slide.index)) { // check if the requested slide for delete is present in the carousel\n            if (slide.index === this.current) {\n                slide.active = false;\n                this.next();\n            }\n\n            this.slides.splice(slide.index, 1);\n            this._total -= 1;\n\n            if (!this.total) {\n                this._currentSlide = null;\n                return;\n            }\n\n            for (let i = 0; i < this.total; i++) {\n                this.slides[i].index = i;\n            }\n\n            this.onSlideRemoved.emit({ carousel: this, slide });\n        }\n    }\n\n    /**\n     * Kicks in a transition for a given slide with a given `direction`.\n     * ```typescript\n     * this.carousel.select(this.carousel.get(2), Direction.NEXT);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public select(slide: IgxSlideComponent, direction: Direction = Direction.NONE) {\n        const newIndex = slide.index;\n        if (direction === Direction.NONE) {\n            direction = newIndex > this.current ? Direction.NEXT : Direction.PREV;\n        }\n\n        if (slide && slide !== this._currentSlide) {\n            this._moveTo(slide, direction);\n        }\n    }\n\n    /**\n     * Transitions to the next slide in the carousel.\n     * ```typescript\n     * this.carousel.next();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public next() {\n        const index = (this.current + 1) % this.total;\n\n        if (index === 0 && !this.loop) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.NEXT);\n    }\n\n    /**\n     * Transitions to the previous slide in the carousel.\n     * ```typescript\n     * this.carousel.prev();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public prev() {\n        const index = this.current - 1 < 0 ?\n            this.total - 1 : this.current - 1;\n\n        if (!this.loop && index === this.total - 1) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.PREV);\n    }\n\n    /**\n     * Resumes playing of the carousel if in paused state.\n     * No operation otherwise.\n     * ```typescript\n     * this.carousel.play();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public play() {\n        if (!this._playing) {\n            this._playing = true;\n            this.onCarouselPlaying.emit(this);\n            this._restartInterval();\n        }\n    }\n\n    /**\n     * Stops slide transitions if the `pause` option is set to `true`.\n     * No operation otherwise.\n     * ```typescript\n     *  this.carousel.stop();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public stop() {\n        if (this.pause) {\n            this._playing = false;\n            this.onCarouselPaused.emit(this);\n            this._resetInterval();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _moveTo(slide: IgxSlideComponent, direction: Direction) {\n        if (this._destroyed) {\n            return;\n        }\n\n        slide.direction = direction;\n        slide.active = true;\n\n        if (this._currentSlide) {\n            this._currentSlide.direction = direction;\n            this._currentSlide.active = false;\n        }\n\n        this._currentSlide = slide;\n\n        this.onSlideChanged.emit({ carousel: this, slide });\n        this._restartInterval();\n    }\n    /**\n     *@hidden\n     */\n    private _resetInterval() {\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n            this._lastInterval = null;\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _restartInterval() {\n        this._resetInterval();\n\n        if (!isNaN(this.interval) && this.interval > 0) {\n            this._lastInterval = setInterval(() => {\n                const tick = +this.interval;\n                if (this._playing && this.total && !isNaN(tick) && tick > 0) {\n                    this.next();\n                } else {\n                    this.stop();\n                }\n            }, this.interval);\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowright')\n    public onKeydownArrowRight() {\n        this.next();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowleft')\n    public onKeydownArrowLeft() {\n        this.prev();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n}\n\n/**\n * A slide component that usually holds an image and/or a caption text.\n * IgxSlideComponent is usually a child component of an IgxCarouselComponent.\n *\n * ```\n * <igx-slide [input bindings] >\n *    <ng-content></ng-content>\n * </igx-slide>\n * ```\n *\n * @export\n */\n@Component({\n    selector: 'igx-slide',\n    templateUrl: 'slide.component.html'\n})\n\nexport class IgxSlideComponent implements OnInit, OnDestroy {\n\n    /**\n     * Gets/sets the `index` of the slide inside the carousel.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide index = \"1\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public index: number;\n\n    /**\n     * Gets/sets the target `direction` for the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide direction=\"NEXT\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public direction: Direction;\n    /**\n     * Gets/sets the `active` state of the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [active] =\"false\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('class.active')\n    @Input() public active: boolean;\n\n    constructor(private carousel: IgxCarouselComponent) { }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        this.carousel.add(this);\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this.carousel.remove(this);\n    }\n}\n\nexport interface ISlideEventArgs {\n    carousel: IgxCarouselComponent;\n    slide: IgxSlideComponent;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCarouselComponent, IgxSlideComponent],\n    exports: [IgxCarouselComponent, IgxSlideComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxCarouselModule {\n}\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum LabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeCheckboxEventArgs {\n    checked: boolean;\n    checkbox: IgxCheckboxComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Checkbox** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/checkbox.html)\n *\n * The Ignite UI Checkbox is a selection control that allows users to make a binary choice. It behaves similarly\n * to the native browser checkbox.\n *\n * Example:\n * ```html\n * <igx-checkbox checked=\"true\">\n *   simple checkbox\n * </igx-checkbox>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxCheckboxComponent, multi: true }],\n    selector: 'igx-checkbox',\n    preserveWhitespaces: false,\n    templateUrl: 'checkbox.component.html'\n})\nexport class IgxCheckboxComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.checkbox.checkboxElement;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox') public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.checkbox.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.checkbox.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n    /**\n     * Sets/gets the `id` of the checkbox component.\n     * If not set, the `id` of the first checkbox component will be `\"igx-checkbox-0\"`.\n     * ```html\n     * <igx-checkbox id=\"my-first-checkbox\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let checkboxId =  this.checkbox.id;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-checkbox-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element.\n     * If not set, the id of the `label` in the first checkbox component will be `\"igx-checkbox-0-label\"`.\n     * ```html\n     * <igx-checkbox labelId = \"Label1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelId =  this.checkbox.labelId;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-checkbox [value] = \"'CheckboxValue'\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let value =  this.checkbox.value;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute.\n     * ```html\n     * <igx-checkbox name = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let name =  this.checkbox.name;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-checkbox [tabindex] = \"1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.checkbox.tabindex;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     *  Sets/gets the position of the `label`.\n     *  If not set, the `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-checkbox labelPosition = \"before\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.checkbox.labelPosition;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelPosition: LabelPosition | string = LabelPosition.AFTER;\n    /**\n     * Enables/Disables the ripple effect.\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-checkbox [disableRipple] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.checkbox.desableRipple;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the checkbox is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-checkbox [required] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRequired =  this.checkbox.required;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-checkbox aria-labelledby = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy =  this.checkbox.ariaLabelledBy;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-checkbox aria-label = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabel = this.checkbox.aruaLabel;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the checkbox state is changed.\n     * Provides references to the `IgxCheckboxComponent` and the `checked` property as event arguments.\n     * @memberof IgxCheckboxComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeCheckboxEventArgs> = new EventEmitter<IChangeCheckboxEventArgs>();\n    /**\n     * Returns the class of the checkbox component.\n     * ```typescript\n     * let class =  this.checkbox.cssClass;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox')\n    public cssClass = 'igx-checkbox';\n    /**\n     * Sets/gets whether the checkbox component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.checkbox.focused =  true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.checkbox.focused;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--focused')\n    public focused = false;\n    /**\n     * Sets/gets the checkbox indeterminate visual state.\n     * Default value is `false`;\n     * ```html\n     * <igx-checkbox [indeterminate] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isIndeterminate = this.checkbox.indeterminate;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--indeterminate')\n    @Input() public indeterminate = false;\n    /**\n     * Sets/gets whether the checkbox is checked.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [checked] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isChecked =  this.checkbox.checked;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets whether the checkbox is disabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disabled] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isDesabled = this.checkbox.disabled;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the checkbox should disable all css transitions.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disableTransitions]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let disableTransitions = this.checkbox.disableTransitions;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--plain')\n    @Input() public disableTransitions = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     * @hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * If `disabled` is `false`, switches the `checked` state.\n     * ```typescript\n     * this.checkbox.toggle();\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.indeterminate = false;\n        this.focused = false;\n        this.checked = !this.checked;\n\n        this.change.emit({ checked: this.checked, checkbox: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxChange(event) {\n        // We have to stop the original checkbox change event\n        // from bubbling up since we emit our own change event\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxClick(event) {\n        // Since the original checkbox is hidden and the label\n        // is used for styling and to change the checked state of the checkbox,\n        // we need to prevent the checkbox click event from bubbling up\n        // as it gets triggered on label click\n        event.stopPropagation();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        // We use a span element as a placeholder label\n        // in place of the native label, we need to emit\n        // the change event separately here alongside\n        // the click event emitted on click\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case LabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case LabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n}\n\nexport const IGX_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxCheckboxRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-checkbox[required][formControlName],\n    igx-checkbox[required][formControl],\n    igx-checkbox[required][ngModel]`,\n    providers: [IGX_CHECKBOX_REQUIRED_VALIDATOR]\n})\nexport class IgxCheckboxRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    exports: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxCheckboxModule { }\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    Renderer2,\n    TemplateRef,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { DisplayDensity, IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    IgxDragDirective,\n    IDragBaseEventArgs,\n    IDragStartEventArgs,\n    IgxDropEnterEventArgs,\n    IgxDropEventArgs\n} from '../directives/dragdrop/dragdrop.directive';\n\n\nexport interface IBaseChipEventArgs {\n    originalEvent: PointerEvent | MouseEvent | TouchEvent | KeyboardEvent | IgxDropEnterEventArgs;\n    owner: IgxChipComponent;\n}\n\nexport interface IChipClickEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n}\n\nexport interface IChipKeyDownEventArgs extends IBaseChipEventArgs {\n    originalEvent: KeyboardEvent;\n    cancel: boolean;\n}\n\nexport interface IChipEnterDragAreaEventArgs extends IBaseChipEventArgs {\n    dragChip: IgxChipComponent;\n}\n\nexport interface IChipSelectEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n    selected: boolean;\n}\n\nlet CHIP_ID = 0;\n\n@Component({\n    selector: 'igx-chip',\n    templateUrl: 'chip.component.html'\n})\nexport class IgxChipComponent extends DisplayDensityBase {\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\"></igx-chip>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-chip-${CHIP_ID++}`;\n\n    /**\n     * An @Input property that stores data related to the chip.\n     * ```html\n     * <igx-chip [data]=\"{ value: 'Country' }\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public data: any;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public draggable = false;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [removable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public removable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies to the remove button.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [removable]=\"true\" [removeIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>delete</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public removeIcon: TemplateRef<any>;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\" [removable]=\"true\" [selectable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public selectable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies when it is selected.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [selectable]=\"true\" [selectIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>done_outline</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public selectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions\n     * like focusing on click or tab, selection on click or Space, dragging.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [disabled]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * Sets the `IgxChipComponent` selected state.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [selected]=\"true\">\n     * ```\n     */\n    @Input()\n    public set selected(newValue: boolean) {\n        this.changeSelection(newValue);\n    }\n\n    /**\n     * Returns if the `IgxChipComponent` is selected.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * selectedChip(){\n     *     let selectedChip = this.chip.selected;\n     * }\n     * ```\n     */\n    public get selected() {\n        return this._selected;\n    }\n\n    /**\n     * An @Input property that sets the `IgxChipComponent` background color.\n     * The `color` property supports string, rgb, hex.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [color]=\"'#ff0000'\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public set color(newColor) {\n        this.chipArea.nativeElement.style.backgroundColor = newColor;\n    }\n\n    /**\n     * Returns the background color of the `IgxChipComponent`.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * ngAfterViewInit(){\n     *     let chipColor = this.chip.color;\n     * }\n     * ```\n     */\n    public get color() {\n        return this.chipArea.nativeElement.style.backgroundColor;\n    }\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving starts.\n     * Returns the moving `IgxChipComponent`.\n     * ```typescript\n     * moveStarted(event: IBaseChipEventArgs){\n     *     let movingChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveStart)=\"moveStarted($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving ends.\n     * Returns the moved `IgxChipComponent`.\n     * ```typescript\n     * moveEnded(event: IBaseChipEventArgs){\n     *     let movedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveEnd)=\"moveEnded($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is removed.\n     * Returns the removed `IgxChipComponent`.\n     * ```typescript\n     * remove(event: IBaseChipEventArgs){\n     *     let removedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onRemove)=\"remove($event)\">\n     * ```\n     */\n    @Output()\n    public onRemove = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is clicked.\n     * Returns the clicked `IgxChipComponent`, whether the event should be canceled.\n     * ```typescript\n     * chipClick(event: IChipClickEventArgs){\n     *     let clickedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onClick)=\"chipClick($event)\">\n     * ```\n     */\n    @Output()\n    public onClick = new EventEmitter<IChipClickEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected.\n     * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and\n     * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.\n     * ```typescript\n     * chipSelect(event: IChipSelectEventArgs){\n     *     let selectedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onSelection)=\"chipSelect($event)\">\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipSelectEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` keyboard navigation is being used.\n     * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,\n     * if the `alt`, `shift` or `control` key is pressed and the pressed key name.\n     * ```typescript\n     * chipKeyDown(event: IChipKeyDownEventArgs){\n     *     let keyDown = event.key;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onKeyDown)=\"chipKeyDown($event)\">\n     * ```\n     */\n    @Output()\n    public onKeyDown = new EventEmitter<IChipKeyDownEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.\n     * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as\n     * the original drop event arguments.\n     * ```typescript\n     * chipEnter(event: IChipEnterDragAreaEventArgs){\n     *     let targetChip = event.targetChip;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onDragEnter)=\"chipEnter($event)\">\n     * ```\n     */\n    @Output()\n    public onDragEnter = new EventEmitter<IChipEnterDragAreaEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        const classes = [this.getComponentDensityClass('igx-chip')];\n        classes.push(this.disabled ? 'igx-chip--disabled' : '');\n        // The custom classes should be at the end.\n        classes.push(this.class);\n        return classes.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('chipArea', { read: ElementRef })\n    public chipArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('chipArea', { read: IgxDragDirective })\n    public dragDir: IgxDragDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRemoveIcon', { read: TemplateRef })\n    public defaultRemoveIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultSelectIcon', { read: TemplateRef })\n    public defaultSelectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get removeButtonTemplate() {\n        return this.removeIcon || this.defaultRemoveIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get selectIconTemplate() {\n        return this.selectIcon || this.defaultSelectIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get ghostClass(): string {\n        return this.getComponentDensityClass('igx-chip__ghost');\n    }\n\n    public get chipTabindex() {\n        return !this.disabled ? 0 : '';\n    }\n\n    protected _selected = false;\n    protected _selectedItemClass = 'igx-chip__item--selected';\n    protected _movedWhileRemoving = false;\n\n    constructor(public cdr: ChangeDetectorRef, public elementRef: ElementRef, private renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /**\n     * @hidden\n     */\n    public selectClass(condition: boolean): object {\n        const SELECT_CLASS = 'igx-chip__select';\n\n        return {\n            [SELECT_CLASS]: condition,\n            [`${SELECT_CLASS}--hidden`]: !condition\n        };\n    }\n\n    protected changeSelection(newValue: boolean, srcEvent = null) {\n        const onSelectArgs: IChipSelectEventArgs = {\n            originalEvent: srcEvent,\n            owner: this,\n            selected: false,\n            cancel: false\n        };\n\n        if (newValue && !this._selected) {\n            onSelectArgs.selected = true;\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.addClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n            }\n        } else if (!newValue && this._selected) {\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.removeClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: KeyboardEvent) {\n        const keyDownArgs: IChipKeyDownEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n\n        this.onKeyDown.emit(keyDownArgs);\n        if (keyDownArgs.cancel) {\n            return;\n        }\n\n        if ((event.key === 'Delete' || event.key === 'Del') && this.removable) {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n        }\n\n        if ((event.key === ' ' || event.key === 'Spacebar') && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n\n        if (event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveBtnKeyDown(event: KeyboardEvent) {\n        if (event.key === ' ' || event.key === 'Spacebar' || event.key === 'Enter') {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    public onRemoveMouseDown(event: PointerEvent | MouseEvent) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveClick(event: MouseEvent | TouchEvent) {\n        this.onRemove.emit({\n            originalEvent: event,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchMove() {\n        // We don't remove chip if user starting touch interacting on the remove button moves the chip\n        this._movedWhileRemoving = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchEnd(event: TouchEvent) {\n        if (!this._movedWhileRemoving) {\n            this.onRemoveClick(event);\n        }\n        this._movedWhileRemoving = false;\n    }\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrag behaviour\n    public onChipDragStart(event: IDragStartEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n        event.cancel = !this.draggable || this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragEnd() {\n        this.dragDir.dropFinished();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipMoveEnd(event: IDragBaseEventArgs) {\n        // moveEnd is triggered after return animation has finished. This happen when we drag and release the chip.\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n\n        if (this.selected) {\n            this.chipArea.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragClicked(event: IDragBaseEventArgs) {\n        const clickEventArgs: IChipClickEventArgs = {\n            originalEvent: event.originalEvent,\n            owner: this,\n            cancel: false\n        };\n        this.onClick.emit(clickEventArgs);\n\n        if (!clickEventArgs.cancel && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event.originalEvent);\n        }\n    }\n    // End chip igxDrag behaviour\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrop behaviour\n    public onChipDragEnterHandler(event: IgxDropEnterEventArgs) {\n        if (this.dragDir === event.drag || !event.dragData || !event.dragData.chip) {\n            return;\n        }\n\n        const eventArgs: IChipEnterDragAreaEventArgs = {\n            owner: this,\n            dragChip: event.dragData.chip,\n            originalEvent: event\n        };\n        this.onDragEnter.emit(eventArgs);\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDrop(event: IgxDropEventArgs) {\n        // Cancel the default drop logic\n        event.cancel = true;\n    }\n    // End chip igxDrop behaviour\n}\n","import {\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    DoCheck,\n    AfterViewInit,\n    OnDestroy,\n    ElementRef\n} from '@angular/core';\nimport {\n    IgxChipComponent,\n    IChipSelectEventArgs,\n    IChipKeyDownEventArgs,\n    IChipEnterDragAreaEventArgs,\n    IBaseChipEventArgs\n} from './chip.component';\nimport {\n    IgxDropEnterEventArgs\n} from '../directives/dragdrop/dragdrop.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/internal/Subject';\n\nexport interface IBaseChipsAreaEventArgs {\n    originalEvent: PointerEvent | MouseEvent | TouchEvent | KeyboardEvent | IgxDropEnterEventArgs;\n    owner: IgxChipsAreaComponent;\n}\n\nexport interface IChipsAreaReorderEventArgs extends IBaseChipsAreaEventArgs {\n    chipsArray: IgxChipComponent[];\n}\n\nexport interface IChipsAreaSelectEventArgs extends IBaseChipsAreaEventArgs {\n    newSelection: IgxChipComponent[];\n}\n\n@Component({\n    selector: 'igx-chips-area',\n    templateUrl: 'chips-area.component.html',\n})\nexport class IgxChipsAreaComponent implements DoCheck, AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass() {\n        const classes = ['igx-chip-area'];\n        classes.push(this.class);\n\n        return classes.join(' ');\n    }\n\n    /**\n     * An @Input property that sets the width of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.width.px')\n    @Input()\n    public width: number;\n\n    /**\n     * An @Input property that sets the height of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.height.px')\n    @Input()\n    public height: number;\n\n    /**\n     * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.\n     * Returns an array of `IgxChipComponent`s.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"changedOrder($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public changedOrder(event: IChipsAreaReorderEventArgs){\n     *      let chips: IgxChipComponent[] = event.chipsArray;\n     * }\n     * ```\n     */\n    @Output()\n    public onReorder = new EventEmitter<IChipsAreaReorderEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.\n     * Fired after the chips area is initialized if there are initially selected chips as well.\n     * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onSelection)=\"selection($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public selection(event: IChipsAreaSelectEventArgs){\n     *      let selectedChips: IgxChipComponent[] = event.newSelection;\n     * }\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipsAreaSelectEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveStart)=\"moveStart($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveStart(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveEnd)=\"moveEnd($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveEnd(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Holds the `IgxChipComponent` in the `IgxChipsAreaComponent`.\n     * ```typescript\n     * ngAfterViewInit(){\n     *    let chips = this.chipsArea.chipsList;\n     * }\n     * ```\n     */\n    @ContentChildren(IgxChipComponent)\n    public chipsList: QueryList<IgxChipComponent>;\n\n    private modifiedChipsArray: IgxChipComponent[];\n    private _differ: IterableDiffer<IgxChipComponent> | null = null;\n    private selectedChips: IgxChipComponent[] = [];\n    protected destroy$ = new Subject<boolean>();\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef,\n        private _iterableDiffers: IterableDiffers) {\n        this._differ = this._iterableDiffers.find([]).create(null);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        // If we have initially selected chips through their inputs, we need to get them, because we cannot listen to their events yet.\n        if (this.chipsList.length) {\n            this.selectedChips = this.chipsList.filter((item: IgxChipComponent) => item.selected);\n            if (this.selectedChips.length) {\n                this.onSelection.emit({\n                    originalEvent: null,\n                    newSelection: this.selectedChips,\n                    owner: this\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this.chipsList) {\n            const changes = this._differ.diff(this.chipsList.toArray());\n            if (changes) {\n                changes.forEachAddedItem((addedChip) => {\n                    addedChip.item.onMoveStart.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveStart(args);\n                    });\n                    addedChip.item.onMoveEnd.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveEnd(args);\n                    });\n                    addedChip.item.onDragEnter.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipDragEnter(args);\n                    });\n                    addedChip.item.onKeyDown.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipKeyDown(args);\n                    });\n                    if (addedChip.item.selectable) {\n                        addedChip.item.onSelection.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                            this.onChipSelectionChange(args);\n                        });\n                    }\n                });\n                this.modifiedChipsArray = this.chipsList.toArray();\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipKeyDown(event: IChipKeyDownEventArgs) {\n        let orderChanged = false;\n        const chipsArray = this.chipsList.toArray();\n        const dragChipIndex = chipsArray.findIndex((el) => el === event.owner);\n        if (event.originalEvent.shiftKey === true) {\n            if (event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex - 1, false, event.originalEvent);\n                if (orderChanged) {\n                    setTimeout(() => {\n                        this.chipsList.toArray()[dragChipIndex - 1].chipArea.nativeElement.focus();\n                    });\n                }\n            } else if (event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex + 1, true, event.originalEvent);\n            }\n        } else {\n            if ((event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') && dragChipIndex > 0) {\n                chipsArray[dragChipIndex - 1].chipArea.nativeElement.focus();\n            } else if ((event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') &&\n                dragChipIndex < chipsArray.length - 1) {\n                chipsArray[dragChipIndex + 1].chipArea.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveStart(event: IBaseChipEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveEnd(event: IBaseChipEventArgs) {\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipDragEnter(event: IChipEnterDragAreaEventArgs) {\n        const dropChipRect = event.owner.elementRef.nativeElement.getBoundingClientRect();\n        const dropChipIndex = this.chipsList.toArray().findIndex((el) => el === event.owner);\n        const dragChipIndex = this.chipsList.toArray().findIndex((el) => el === event.dragChip);\n        if (dragChipIndex < dropChipIndex) {\n            // from the left to right\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, true, event.originalEvent);\n        } else {\n            // from the right to left\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, false, event.originalEvent);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected positionChipAtIndex(chipIndex, targetIndex, shiftRestLeft, originalEvent) {\n        if (chipIndex < 0 || this.chipsList.length <= chipIndex ||\n            targetIndex < 0 || this.chipsList.length <= targetIndex) {\n            return false;\n        }\n\n        const chipsArray = this.chipsList.toArray();\n        const result: IgxChipComponent[] = [];\n        for (let i = 0; i < chipsArray.length; i++) {\n            if (shiftRestLeft) {\n                if (chipIndex <= i && i < targetIndex) {\n                    result.push(chipsArray[i + 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            } else {\n                if (targetIndex < i && i <= chipIndex) {\n                    result.push(chipsArray[i - 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            }\n        }\n        this.modifiedChipsArray = result;\n\n        const eventData: IChipsAreaReorderEventArgs = {\n            chipsArray: this.modifiedChipsArray,\n            originalEvent: originalEvent,\n            owner: this\n        };\n        this.onReorder.emit(eventData);\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipSelectionChange(event: IChipSelectEventArgs) {\n        if (event.selected) {\n            this.selectedChips.push(event.owner);\n        } else if (!event.selected) {\n            this.selectedChips = this.selectedChips.filter((chip) => {\n                return chip.id !== event.owner.id;\n            });\n        }\n        this.onSelection.emit({\n            originalEvent: event.originalEvent,\n            newSelection: this.selectedChips,\n            owner: this\n        });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxChipComponent } from './chip.component';\nimport { IgxChipsAreaComponent } from './chips-area.component';\nimport { IgxDragDropModule } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxPrefixModule, IgxPrefixDirective} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixModule, IgxSuffixDirective } from '../directives/suffix/suffix.directive';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxChipsAreaComponent,\n    IgxChipComponent\n  ],\n  exports: [\n    IgxChipsAreaComponent,\n    IgxChipComponent,\n    IgxPrefixDirective,\n    IgxSuffixDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule,\n    IgxDragDropModule,\n    IgxPrefixModule,\n    IgxSuffixModule\n  ]\n})\nexport class IgxChipsModule { }\n","import { Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeader]'\n})\nexport class IgxComboHeaderDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboFooter]'\n})\nexport class IgxComboFooterDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboItem]'\n})\nexport class IgxComboItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboEmpty]'\n})\nexport class IgxComboEmptyDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeaderItem]'\n})\n\nexport class IgxComboHeaderItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboAddItem]'\n})\nexport class IgxComboAddItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboToggleIcon]'\n})\nexport class IgxComboToggleIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboClearIcon]'\n})\nexport class IgxComboClearIconDirective {\n}\n\n","import { IgxComboBase } from './combo.common';\n\n/**\n * @hidden\n */\nexport class IgxComboAPIService {\n    protected combo: IgxComboBase;\n\n    public disableTransitions = false;\n\n    public register(combo: IgxComboBase) {\n        this.combo = combo;\n    }\n\n\n    public clear(): void {\n        this.combo = null;\n    }\n\n\n    public get item_focusable(): boolean {\n        return false;\n    }\n    public get isRemote(): boolean {\n        return this.combo.isRemote;\n    }\n\n    public add_custom_item(): void {\n        if (!this.combo) {\n            return;\n        }\n        this.combo.addItemToCollection();\n    }\n\n    public get comboID(): string {\n        return this.combo.id;\n    }\n\n    public set_selected_item(itemID: any, event?: Event): void {\n        const selected = this.combo.isItemSelected(itemID);\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (!selected) {\n            this.combo.selectItems([itemID], false, event);\n        } else {\n            this.combo.deselectItems([itemID], event);\n        }\n    }\n\n    public is_item_selected(itemID: any): boolean {\n        return this.combo.isItemSelected(itemID);\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    HostBinding,\n    Inject,\n    Input,\n    DoCheck,\n    Host,\n    HostListener\n} from '@angular/core';\nimport { IgxDropDownItemComponent } from '../drop-down/drop-down-item.component';\nimport { IGX_DROPDOWN_BASE, IDropDownBase, Navigate } from '../drop-down/drop-down.common';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxSelectionAPIService } from '../core/selection';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-item',\n    templateUrl: 'combo-item.component.html'\n})\nexport class IgxComboItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    /**\n     * Gets the height of a list item\n     * @hidden\n     */\n    @Input()\n    @HostBinding('style.height.px')\n    public itemHeight = '';\n\n    /**\n     * @hidden\n     */\n    public get itemID() {\n        return this.comboAPI.isRemote ? JSON.stringify(this.value) : this.value;\n    }\n\n    /**\n     * @hidden\n     */\n    public get comboID() {\n        return this.comboAPI.comboID;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get disableTransitions() {\n        return this.comboAPI.disableTransitions;\n    }\n\n    constructor(\n        protected comboAPI: IgxComboAPIService,\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Inject(IgxSelectionAPIService) protected selection: IgxSelectionAPIService\n    ) {\n        super(dropDown, elementRef, null, selection);\n    }\n\n    /**\n     * @hidden\n     */\n    get selected(): boolean {\n        return this.comboAPI.is_item_selected(this.itemID);\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n\n    /**\n     * @hidden\n     */\n    isVisible(direction: Navigate): boolean {\n        const rect = this.element.nativeElement.getBoundingClientRect();\n        const parentDiv = this.element.nativeElement.parentElement.parentElement.getBoundingClientRect();\n        if (direction === Navigate.Down) {\n            return rect.y + rect.height <= parentDiv.y + parentDiv.height;\n        }\n        return rect.y >= parentDiv.y;\n    }\n\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        this.comboAPI.disableTransitions = false;\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        this.dropDown.navigateItem(this.index);\n        this.comboAPI.set_selected_item(this.itemID, event);\n    }\n\n    ngDoCheck() {\n    }\n}\n","import { ElementRef, EventEmitter } from '@angular/core';\nimport { CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\n\nexport const IGX_COMBO_COMPONENT = 'IgxComboComponentToken';\n\n/** @hidden @internal TODO: Evaluate */\nexport interface IgxComboBase {\n    id: string;\n    data: any[];\n    valueKey: string;\n    groupKey: string;\n    isRemote: boolean;\n    filteredData: any[];\n    filteringExpressions: IFilteringExpression[];\n    totalItemCount: number;\n    itemsMaxHeight: number;\n    itemHeight: number;\n    searchValue: string;\n    searchInput: ElementRef<HTMLInputElement>;\n    comboInput: ElementRef<HTMLInputElement>;\n    onOpened: EventEmitter<void>;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    focusSearchInput(opening?: boolean): void;\n    triggerCheck(): void;\n    addItemToCollection(): void;\n    isAddButtonVisible(): boolean;\n    handleInputChange(event?: string): void;\n    isItemSelected(itemID: any): boolean;\n    selectItems(itemIDs: any[], clearSelection?: boolean, event?: Event): void;\n    deselectItems(itemIDs: any[], event?: Event): void;\n}\n","import { IgxComboItemComponent } from './combo-item.component';\nimport { Component } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-combo-add-item',\n    template: '<ng-content></ng-content>',\n    providers: [{ provide: IgxComboItemComponent, useExisting: IgxComboAddItemComponent}]\n})\nexport class IgxComboAddItemComponent extends IgxComboItemComponent {\n    get selected(): boolean {\n        return false;\n    }\n    set selected(value: boolean) {\n    }\n\n    clicked(event?) {\n        this.comboAPI.disableTransitions = false;\n        this.comboAPI.add_custom_item();\n    }\n}\n","import {\n    ChangeDetectorRef, Component, ElementRef, Inject, QueryList, OnDestroy, AfterViewInit, ContentChildren\n} from '@angular/core';\nimport { IgxComboBase, IGX_COMBO_COMPONENT } from './combo.common';\nimport { IDropDownBase, IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { DropDownActionKey } from '../drop-down/drop-down.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxDropDownItemBase } from '../drop-down/drop-down-item.base';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxComboItemComponent } from './combo-item.component';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-drop-down',\n    templateUrl: '../drop-down/drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxComboDropDownComponent }]\n})\nexport class IgxComboDropDownComponent extends IgxDropDownComponent implements IDropDownBase, OnDestroy, AfterViewInit {\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase,\n        protected comboAPI: IgxComboAPIService) {\n        super(elementRef, cdr, selection);\n    }\n\n    protected get scrollContainer() {\n        return this.virtDir.dc.location.nativeElement;\n    }\n\n    protected get isScrolledToLast(): boolean {\n        const scrollTop = this.virtDir.getVerticalScroll().scrollTop;\n        const scrollHeight = this.virtDir.getVerticalScroll().scrollHeight;\n        return Math.floor(scrollTop + this.virtDir.igxForContainerSize) === scrollHeight;\n    }\n\n    protected get lastVisibleIndex(): number {\n        return this.combo.totalItemCount ?\n            Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :\n            this.items.length - 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxComboItemComponent, { descendants: true })\n    public children: QueryList<IgxDropDownItemBase> = null;\n\n    /**\n     * @hidden @internal\n     */\n    public onFocus() {\n        this.focusedItem = this._focusedItem || this.items[0];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur(evt?) {\n        this.focusedItem = null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    public navigateFirst() {\n        this.navigateItem(this.virtDir.igxForOf.findIndex(e => !e.isHeader));\n    }\n\n    /**\n     * @hidden\n     */\n    public navigatePrev() {\n        if (this._focusedItem && this._focusedItem.index === 0 && this.virtDir.state.startIndex === 0) {\n            this.combo.focusSearchInput(false);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n\n    /**\n     * @hidden\n     */\n    public navigateNext() {\n        const lastIndex = this.combo.totalItemCount ? this.combo.totalItemCount - 1 : this.virtDir.igxForOf.length - 1;\n        if (this._focusedItem && this._focusedItem.index === lastIndex) {\n            this.focusAddItemButton();\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectItem(item: IgxDropDownItemBase) {\n        if (item === null || item === undefined) {\n            return;\n        }\n        this.comboAPI.set_selected_item(item.itemID);\n        this._focusedItem = item;\n    }\n\n    private focusAddItemButton() {\n        if (this.combo.isAddButtonVisible()) {\n            this.focusedItem = this.items[this.items.length - 1];\n        }\n    }\n\n    protected scrollToHiddenItem(newItem: any): void { }\n\n    protected scrollHandler = () => {\n        this.comboAPI.disableTransitions = true;\n    }\n\n    protected get sortedChildren(): IgxDropDownItemBase[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxDropDownItemBase, b: IgxDropDownItemBase) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxComboItemComponent[] {\n        const items: IgxComboItemComponent[] = [];\n        if (this.children !== undefined) {\n            const sortedChildren = this.sortedChildren as IgxComboItemComponent[];\n            for (const child of sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public updateScrollPosition() {\n        this.virtDir.getVerticalScroll().scrollTop = this._scrollPosition;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onItemActionKey(key: DropDownActionKey) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n                this.handleEnter();\n                break;\n            case DropDownActionKey.SPACE:\n                this.handleSpace();\n                break;\n            case DropDownActionKey.ESCAPE:\n                this.close();\n        }\n    }\n\n    private handleEnter() {\n        if (this.isAddItemFocused()) {\n            this.combo.addItemToCollection();\n        } else {\n            this.close();\n        }\n    }\n\n    private handleSpace() {\n        if (this.isAddItemFocused()) {\n            return;\n        } else {\n            this.selectItem(this.focusedItem);\n        }\n    }\n\n    private isAddItemFocused(): boolean {\n        return this.focusedItem instanceof IgxComboAddItemComponent;\n    }\n\n    public ngAfterViewInit() {\n        this.virtDir.getVerticalScroll().addEventListener('scroll', this.scrollHandler);\n    }\n\n    /**\n     *@hidden @internal\n     */\n    public ngOnDestroy(): void {\n        this.virtDir.getVerticalScroll().removeEventListener('scroll', this.scrollHandler);\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../core/utils';\nimport { DataUtil } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IFilteringState } from '../data-operations/filtering-state.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\n\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboFiltering'\n})\nexport class IgxComboFilteringPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], expressions: IFilteringExpression[],\n                     logic: FilteringLogic) {\n        const filteringExpressionsTree =  new FilteringExpressionsTree(logic);\n        filteringExpressionsTree.filteringOperands = expressions;\n        const state: IFilteringState = { expressionsTree: filteringExpressionsTree, strategy: new SimpleFilteringStrategy()};\n        state.expressionsTree.filteringOperands = this.combo.filteringExpressions;\n\n        if (!state.expressionsTree.filteringOperands.length) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        return result;\n    }\n}\n\n/** @hidden */\nexport class SimpleFilteringStrategy extends FilteringStrategy {\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = expr.fieldName === undefined ? rec : rec[expr.fieldName];\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboSorting',\n    pure: true\n})\nexport class IgxComboSortingPipe implements PipeTransform {\n    constructor() { }\n\n    public transform(collection: any[], expressions: ISortingExpression []) {\n        if (!expressions.length) {\n            return collection;\n        }\n        const result = DataUtil.sort(cloneArray(collection), expressions);\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboGrouping'\n})\nexport class IgxComboGroupingPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], groupKey: any) {\n        this.combo.filteredData = collection;\n        if ((!groupKey && groupKey !== 0) || !collection.length) {\n            return collection;\n        }\n        const data = cloneArray(collection);\n        let inserts = 0;\n        let currentHeader = null;\n        for (let i = 0; i < collection.length; i++) {\n            let insertFlag = 0;\n            if (currentHeader !== collection[i][groupKey]) {\n                currentHeader = collection[i][groupKey];\n                insertFlag = 1;\n            }\n            if (insertFlag) {\n                data.splice(i + inserts, 0, {\n                    [this.combo.valueKey]: currentHeader,\n                    [this.combo.groupKey]: currentHeader,\n                    isHeader: true\n                });\n                inserts++;\n            }\n        }\n        return data;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\n\nexport class IgxComboFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n","import { ConnectedPositioningStrategy } from './../services/overlay/position/connected-positioning-strategy';\nimport { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener,\n    Input, NgModule, OnInit, OnDestroy, Output, TemplateRef, ViewChild, Optional, Inject, Injector, forwardRef\n} from '@angular/core';\nimport {\n    IgxComboItemDirective,\n    IgxComboEmptyDirective,\n    IgxComboHeaderItemDirective,\n    IgxComboHeaderDirective,\n    IgxComboFooterDirective,\n    IgxComboAddItemDirective,\n    IgxComboToggleIconDirective,\n    IgxComboClearIconDirective\n} from './combo.directives';\nimport { FormsModule, ReactiveFormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { SortingDirection, ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IgxForOfModule, IForOfState, IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { IgxComboDropDownComponent } from './combo-dropdown.component';\nimport { IgxComboFilterConditionPipe, IgxComboFilteringPipe, IgxComboGroupingPipe, IgxComboSortingPipe } from './combo.pipes';\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services';\nimport { Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { DefaultSortingStrategy, ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { EditorProvider } from '../core/edit-provider';\nimport { take } from 'rxjs/operators';\n\n/** Custom strategy to provide the combo with callback on initial positioning */\nclass ComboConnectedPositionStrategy extends ConnectedPositioningStrategy {\n    private _callback: () => void;\n    constructor(callback: () => void) {\n        super();\n        this._callback = callback;\n    }\n\n    position(contentElement, size, document?, initialCall?) {\n        if (initialCall) {\n            this._callback();\n        }\n        super.position(contentElement, size);\n    }\n}\n\n/**\n * @hidden\n */\nenum DataTypes {\n    EMPTY = 'empty',\n    PRIMITIVE = 'primitive',\n    COMPLEX = 'complex',\n    PRIMARYKEY = 'valueKey'\n}\n\nexport enum IgxComboState {\n    /**\n     * Combo with initial state.\n     */\n    INITIAL,\n    /**\n     * Combo with valid state.\n     */\n    VALID,\n    /**\n     * Combo with invalid state.\n     */\n    INVALID\n}\n\nexport interface IComboSelectionChangeEventArgs extends CancelableEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    event?: Event;\n}\n\nexport interface IComboItemAdditionEvent {\n    oldCollection: any[];\n    addedItem: any;\n    newCollection: any[];\n}\n\nlet NEXT_ID = 0;\nconst noop = () => { };\n\n@Component({\n    selector: 'igx-combo',\n    templateUrl: 'combo.component.html',\n    providers: [\n        IgxComboAPIService,\n        { provide: IGX_COMBO_COMPONENT, useExisting: IgxComboComponent },\n        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => IgxComboComponent), multi: true }\n    ]\n})\nexport class IgxComboComponent extends DisplayDensityBase implements IgxComboBase, AfterViewInit, ControlValueAccessor, OnInit,\n OnDestroy, EditorProvider {\n    /**\n     * @hidden @internal\n     */\n    public customValueFlag = true;\n    /**\n     * @hidden @internal\n     */\n    public defaultFallbackGroup = 'Other';\n    protected stringFilters = IgxStringFilteringOperand;\n    protected booleanFilters = IgxBooleanFilteringOperand;\n    protected _filteringLogic = FilteringLogic.Or;\n    protected _filteringExpressions: IFilteringExpression[] = [];\n    protected _sortingExpressions: ISortingExpression[] = [];\n    protected _groupKey = '';\n    protected _displayKey: string;\n    protected _prevInputValue = '';\n    private _dataType = '';\n    private ngControl: NgControl = null;\n    private destroy$ = new Subject<any>();\n    private _data = [];\n    private _filteredData = [];\n    private _positionCallback: () => void;\n    private _onChangeCallback: (_: any) => void = noop;\n    private overlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n    private _value = '';\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        @Optional() private injector: Injector) {\n        super(_displayDensityOptions);\n        this.comboAPI.register(this);\n    }\n\n    @ViewChild(IgxForOfDirective, { read: IgxForOfDirective })\n    protected virtDir: IgxForOfDirective<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxComboDropDownComponent, { read: IgxComboDropDownComponent })\n    public dropdown: IgxComboDropDownComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('searchInput')\n    public searchInput: ElementRef<HTMLInputElement> = null;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('comboInput')\n    public comboInput: ElementRef<HTMLInputElement> = null;\n\n    /**\n     * @hidden @internal\n     */\n    get displaySearchInput(): boolean {\n        return this.filterable || this.allowCustomValues;\n    }\n\n    /**\n     * The custom template, if any, that should be used when rendering ITEMS in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.itemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboItem>\n     *          <div class=\"custom-item\" let-item let-key=\"valueKey\">\n     *              <div class=\"custom-item__name\">{{ item[key] }}</div>\n     *              <div class=\"custom-item__cost\">{{ item.cost }}</div>\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboItemDirective, { read: TemplateRef })\n    public itemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the HEADER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeader>\n     *          <div class=\"combo__header\">\n     *              This is a custom header\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderDirective, { read: TemplateRef })\n    public headerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the FOOTER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.footerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboFooter>\n     *          <div class=\"combo__footer\">\n     *              This is a custom footer\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboFooterDirective, { read: TemplateRef })\n    public footerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering HEADER ITEMS for groups in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeaderItem let-item let-key=\"groupKey\">\n     *          <div class=\"custom-item--group\">Group header for {{ item[key] }}</div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderItemDirective, { read: TemplateRef })\n    public headerItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.addItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboAddItem>\n     *          <button class=\"combo__add-button\">\n     *              Click to add item\n     *          </button>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboAddItemDirective, { read: TemplateRef })\n    public addItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.emptyTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboEmpty>\n     *          <div class=\"combo--emtpy\">\n     *              There are no items to display\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboEmptyDirective, { read: TemplateRef })\n    public emptyTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboToggleIconDirective, { read: TemplateRef })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo CLEAR button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.clearIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboClearIcon>\n     *          <igx-icon>clear</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboClearIconDirective, { read: TemplateRef })\n    public clearIconTemplate: TemplateRef<any> = null;\n\n    @ViewChild('primitive', { read: TemplateRef })\n    protected primitiveTemplate: TemplateRef<any>;\n\n    @ViewChild('complex', { read: TemplateRef })\n    protected complexTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxForOfDirective)\n    public virtualScrollContainer: IgxForOfDirective<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#emptyTemplate' is deprecated.\\n` +\n        `Use \\`igxComboEmpty\\` directive instead.`)\n    @ContentChild('emptyTemplate', { read: TemplateRef })\n    private set oldEmptyTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.emptyTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#headerTemplate' is deprecated.\\n` +\n        `Use \\`igxComboHeader\\` directive instead.`)\n    @ContentChild('headerTemplate', { read: TemplateRef })\n    private set oldHeaderTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.headerTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#footerTemplate' is deprecated.\\n` +\n        `Use \\`igxComboFooter\\` directive instead.`)\n    @ContentChild('footerTemplate', { read: TemplateRef })\n    private set oldFooterTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.footerTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#itemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboItem\\` directive instead.`)\n    @ContentChild('itemTemplate', { read: TemplateRef })\n    private set oldItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.itemTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#addItemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboAddItem\\` directive instead.`)\n    @ContentChild('addItemTemplate', { read: TemplateRef })\n    private set oldAddItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.addItemTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#headerItemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboHeaderItem\\` directive instead.`)\n    @ContentChild('headerItemTemplate', { read: TemplateRef })\n    private set oldHeaderItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.headerItemTemplate = template;\n        }\n    }\n\n    @ViewChild('dropdownItemContainer')\n    protected dropdownContainer: ElementRef = null;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSelectionChange = new EventEmitter<IComboSelectionChangeEventArgs>();\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-combo onOpening='handleOpening($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-combo (onOpened)='handleOpened()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosed)='handleClosed()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Emitted when an item is being added to the data collection\n     *\n     * ```html\n     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onAddition = new EventEmitter<IComboItemAdditionEvent>();\n\n    /**\n     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)\n     *\n     * ```html\n     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSearchInput = new EventEmitter();\n\n    /**\n     * Emitted when new chunk of data is loaded from the virtualization\n     *\n     * ```html\n     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<any>();\n\n    /**\n     * Gets/gets combo id.\n     *\n     * ```typescript\n     * // get\n     * let id = this.combo.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [id]='combo1'></igx-combo>\n     * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-combo-${NEXT_ID++}`;\n\n    /**\n     * Sets the style width of the element\n     *\n     * ```typescript\n     * // get\n     * let myComboWidth = this.combo.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [width]='250px'></igx-combo>\n     * ```\n     */\n    @HostBinding('style.width')\n    @Input()\n    public width: string;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.valid === IgxComboState.VALID;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.valid === IgxComboState.INVALID;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-combo')\n    public cssClass = 'igx-combo'; // Independent of display density, at the time being\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding(`attr.role`)\n    public role = 'combobox';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded(): boolean {\n        return !this.dropdown.collapsed;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.dropdown.id;\n    }\n\n    /**\n     * Controls whether custom values can be added to the collection\n     *\n     * ```typescript\n     * // get\n     * let comboAllowsCustomValues = this.combo.allowCustomValues;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [allowCustomValues]='true'></igx-combo>\n     * ```\n     */\n    @Input()\n    public allowCustomValues = false;\n\n    /**\n     * Configures the drop down list height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsMaxHeight]='320'></igx-combo>\n     * ```\n    */\n    @Input()\n    public itemsMaxHeight = 480;\n\n    /**\n     * Configures the drop down list width\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsWidth = this.combo.itemsWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsWidth] = '\"180px\"'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemsWidth: string;\n\n    /**\n     * Configures the drop down list item height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemHeight = this.combo.itemHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemHeight]='32'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemHeight = 48;\n\n    /**\n     * @hidden @internal\n     */\n    public filteringLogic = FilteringLogic.Or;\n\n    /**\n     * Defines the placeholder value for the combo value field\n     *\n     * ```typescript\n     * // get\n     * let myComboPlaceholder = this.combo.placeholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public placeholder = '';\n\n    /**\n     * @hidden @internal\n     */\n    public get inputEmpty(): boolean {\n        return !this.value && !this.placeholder;\n    }\n\n    /**\n     * Defines the placeholder value for the combo dropdown search field\n     *\n     * ```typescript\n     * // get\n     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public searchPlaceholder = 'Enter a Search Term';\n\n    /**\n     * Combo data source.\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [data]='items'></igx-combo>\n     * ```\n     */\n    @Input()\n    get data(): any[] {\n        return this._data;\n    }\n    set data(val: any[]) {\n        this._data = (val) ? val : [];\n    }\n\n    /**\n     * Combo value data source propery.\n     *\n     * ```typescript\n     * // get\n     * let myComboValueKey = this.combo.valueKey;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [valueKey]='myKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public valueKey: string;\n\n    @Input()\n    set displayKey(val: string) {\n        this._displayKey = val;\n    }\n\n    /**\n     * Combo text data source propery.\n     *\n     * ```typescript\n     * // get\n     * let myComboDisplayKey = this.combo.displayKey;\n     *\n     * // set\n     * this.combo.displayKey = 'val';\n     *\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [displayKey]='mydisplayKey'></igx-combo>\n     * ```\n     */\n    get displayKey() {\n        return this._displayKey ? this._displayKey : this.valueKey;\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [groupKey]='newGroupKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public set groupKey(val: string) {\n        this.clearSorting(this._groupKey);\n        this._groupKey = val;\n        this.sort(this._groupKey);\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```typescript\n     * // get\n     * let currentGroupKey = this.combo.groupKey;\n     * ```\n     */\n    public get groupKey(): string {\n        return this._groupKey;\n    }\n\n    /**\n     * An @Input property that enabled/disables filtering in the list. The default is `true`.\n     * ```html\n     *<igx-combo [filterable]=\"'false'\">\n     * ```\n     */\n    @Input()\n    public filterable = true;\n\n    /**\n     * An @Input property that set aria-labelledby attribute\n     * ```html\n     *<igx-combo [ariaLabelledBy]=\"'label1'\">\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy: string;\n\n    /**\n     * An @Input property that enabled/disables combo. The default is `false`.\n     * ```html\n     *<igx-combo [disabled]=\"'true'\">\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An @Input property that sets how the combo will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.\n     * ```html\n     *<igx-combo [type]=\"'line'\">\n     * ```\n     */\n    @Input()\n    public type = 'box';\n\n    /**\n     * Gets/Sets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // get\n     * let valid = this.combo.valid;\n     * ```\n     * ```typescript\n     * // set\n     * this.combo.valid = IgxComboState.INVALID;\n     * ```\n    */\n    public valid: IgxComboState = IgxComboState.INITIAL;\n\n    /**\n     * @hidden @internal\n     */\n    public searchValue = '';\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.open();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    onInputClick(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.toggle();\n    }\n\n    /**\n     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`\n     *\n     * ```typescript\n     * // get\n     * let state = this.combo.virtualizationState;\n     * ```\n    */\n    get virtualizationState(): IForOfState {\n        return this.virtDir.state;\n    }\n    /**\n     * Sets the current state of the virtualized data.\n     *\n     * ```typescript\n     * // set\n     * this.combo.virtualizationState(state);\n     * ```\n     */\n    set virtualizationState(state: IForOfState) {\n        this.virtDir.state = state;\n    }\n\n    /**\n     * Gets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // get\n     * let count = this.combo.totalItemCount;\n     * ```\n    */\n    get totalItemCount(): number {\n        return this.virtDir.totalItemCount;\n    }\n    /**\n     * Sets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // set\n     * this.combo.totalItemCount(remoteService.count);\n     * ```\n     */\n    set totalItemCount(count: number) {\n        this.virtDir.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteringExpressions(): IFilteringExpression[] {\n        return this.filterable ? this._filteringExpressions : [];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteringExpressions(value: IFilteringExpression[]) {\n        this._filteringExpressions = value;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = value;\n        this.cdr.markForCheck();\n    }\n\n    protected clearSorting(field?: string | number) {\n        if (field === undefined || field === null) {\n            this.sortingExpressions = [];\n            return;\n        }\n        const currentState = cloneArray(this.sortingExpressions);\n        const index = currentState.findIndex((expr) => expr.fieldName === field);\n        if (index > -1) {\n            currentState.splice(index, 1);\n            this.sortingExpressions = currentState;\n        }\n    }\n\n    /**\n     * The text displayed in the combo input\n     *\n     * ```typescript\n     * // get\n     * let comboValue = this.combo.value;\n     * ```\n     */\n    get value(): string {\n        return this._value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteredData(): any[] {\n        return this.filterable ? this._filteredData : this.data;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteredData(val: any[]) {\n        this._filteredData = this.groupKey ? (val || []).filter((e) => e.isHeader !== true) : val;\n        this.checkMatch();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyUp(event: KeyboardEvent): void {\n        if (event.key === 'ArrowDown' || event.key === 'Down') {\n            this.dropdown.focusedItem = this.dropdown.items[0];\n            this.dropdownContainer.nativeElement.focus();\n        } else if (event.key === 'Escape' || event.key === 'Esc') {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyDown(event: KeyboardEvent) {\n        if (event.key === 'ArrowUp' || event.key === 'Up') {\n            event.preventDefault();\n            event.stopPropagation();\n            this.close();\n        }\n    }\n\n    private checkMatch(): void {\n        const displayKey = this.displayKey;\n        const matchFn = (e) => {\n            const value = displayKey ? e[displayKey] : e;\n            return value.toString().toLowerCase() === this.searchValue.trim().toLowerCase();\n        };\n        const itemMatch = this.filteredData.some(matchFn);\n        this.customValueFlag = this.allowCustomValues && !itemMatch;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleInputChange(event?: string) {\n        let cdrFlag = false;\n        const vContainer = this.virtDir;\n        if (event !== undefined && this._prevInputValue === event) {\n            // Nothing has changed\n            return;\n        } else {\n            this._prevInputValue = event !== undefined ? event : '';\n        }\n        if (event !== undefined) {\n            // Do not scroll if not scrollable\n            if (vContainer.isScrollable()) {\n                vContainer.scrollTo(0);\n            } else {\n                cdrFlag = true;\n            }\n            this.onSearchInput.emit(event);\n        } else {\n            cdrFlag = true;\n        }\n        if (this.filterable) {\n            this.filter();\n            // If there was no scroll before filtering, check if there is after and detect changes\n            if (cdrFlag) {\n                vContainer.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    if (vContainer.isScrollable()) {\n                        this.cdr.detectChanges();\n                    }\n                });\n            }\n        } else {\n            this.checkMatch();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public sort(fieldName: string, dir: SortingDirection = SortingDirection.Asc, ignoreCase: boolean = true,\n        strategy: ISortingStrategy = DefaultSortingStrategy.instance()): void {\n        if (!fieldName) {\n            return;\n        }\n        const sortingState = cloneArray(this.sortingExpressions, true);\n\n        this.prepare_sorting_expression(sortingState, fieldName, dir, ignoreCase, strategy);\n        this.sortingExpressions = sortingState;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getValueByValueKey(val: any): any {\n        if (!val && val !== 0) {\n            return undefined;\n        }\n        return this.valueKey ?\n            this.data.filter((e) => e[this.valueKey] === val)[0] :\n            this.data.filter((e) => e === val);\n    }\n\n    protected prepare_sorting_expression(state: ISortingExpression[], fieldName: string, dir: SortingDirection, ignoreCase: boolean,\n        strategy: ISortingStrategy) {\n\n        if (dir === SortingDirection.None) {\n            state.splice(state.findIndex((expr) => expr.fieldName === fieldName), 1);\n            return;\n        }\n\n        const expression = state.find((expr) => expr.fieldName === fieldName);\n\n        if (!expression) {\n            state.push({ fieldName, dir, ignoreCase, strategy });\n        } else {\n            Object.assign(expression, { fieldName, dir, ignoreCase });\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get dataType(): string {\n        if (this.valueKey) {\n            return DataTypes.COMPLEX;\n        }\n        return DataTypes.PRIMITIVE;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isRemote() {\n        return this.totalItemCount > 0 &&\n            this.valueKey &&\n            this.dataType === DataTypes.COMPLEX;\n    }\n\n    /**\n     * If the data source is remote, returns JSON.stringify(itemID)\n     * @hidden\n     * @internal\n     */\n    private _stringifyItemID(itemID: any) {\n        return this.isRemote && typeof itemID === 'object' ? JSON.stringify(itemID) : itemID;\n    }\n\n    private _parseItemID(itemID) {\n        return this.isRemote && typeof itemID === 'string' ? JSON.parse(itemID) : itemID;\n    }\n\n    /**\n     * Returns if the specified itemID is selected\n     * @hidden\n     * @internal\n     */\n    public isItemSelected(item: any): boolean {\n        return this.selection.is_item_selected(this.id, this._stringifyItemID(item));\n    }\n\n    /**\n     * Triggers change detection on the combo view\n     */\n    public triggerCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isAddButtonVisible(): boolean {\n        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;\n        return this.searchValue !== '' && this.customValueFlag;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleSelectAll(evt) {\n        if (evt.checked) {\n            this.selectAllItems();\n        } else {\n            this.deselectAllItems();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addItemToCollection() {\n        if (!this.searchValue) {\n            return;\n        }\n        const newValue = this.searchValue.trim();\n        const addedItem = this.displayKey ? {\n            [this.valueKey]: newValue,\n            [this.displayKey]: newValue\n        } : newValue;\n        if (this.groupKey) {\n            Object.assign(addedItem, { [this.groupKey]: this.defaultFallbackGroup });\n        }\n        const oldCollection = this.data;\n        const newCollection = [...this.data];\n        newCollection.push(addedItem);\n        const args: IComboItemAdditionEvent = {\n            oldCollection, addedItem, newCollection\n        };\n        this.onAddition.emit(args);\n        this.data.push(addedItem);\n        // If you mutate the array, no pipe is invoked and the display isn't updated;\n        // if you replace the array, the pipe executes and the display is updated.\n        this.data = cloneArray(this.data);\n        this.selectItems([addedItem], false);\n        this.customValueFlag = false;\n        this.searchInput.nativeElement.focus();\n        this.dropdown.focusedItem = null;\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public focusSearchInput(opening?: boolean): void {\n        if (this.displaySearchInput && this.searchInput) {\n            this.searchInput.nativeElement.focus();\n        } else {\n            if (opening) {\n                this.dropdownContainer.nativeElement.focus();\n            } else {\n                this.comboInput.nativeElement.focus();\n                this.toggle();\n            }\n        }\n    }\n\n\n    protected prepare_filtering_expression(searchVal, condition, ignoreCase, fieldName?) {\n        const newArray = [...this.filteringExpressions];\n        const expression = newArray.find((expr) => expr.fieldName === fieldName);\n        const newExpression = { fieldName, searchVal, condition, ignoreCase };\n        if (!expression) {\n            newArray.push(newExpression);\n        } else {\n            Object.assign(expression, newExpression);\n        }\n        if (this.groupKey) {\n            const expression2 = newArray.find((expr) => expr.fieldName === 'isHeader');\n            const headerExpression = {\n                fieldName: 'isHeader', searchVale: '',\n                condition: IgxBooleanFilteringOperand.instance().condition('true'), ignoreCase: true\n            };\n            if (!expression2) {\n                newArray.push(headerExpression);\n            } else {\n                Object.assign(expression2, headerExpression);\n            }\n        }\n        this.filteringExpressions = newArray;\n    }\n\n    protected onStatusChanged = () => {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            this.valid = this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur() {\n        if (this.collapsed) {\n            if (this.ngControl && !this.ngControl.valid) {\n                this.valid = IgxComboState.INVALID;\n            } else {\n                this.valid = IgxComboState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filter() {\n        this.prepare_filtering_expression(this.searchValue.trim(), IgxStringFilteringOperand.instance().condition('contains'),\n            true, this.dataType === DataTypes.PRIMITIVE ? undefined : this.displayKey);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this.injector.get(NgControl, null);\n        this._positionCallback = () => this.dropdown.updateScrollPosition();\n        this.overlaySettings.positionStrategy = new ComboConnectedPositionStrategy(this._positionCallback);\n        this.overlaySettings.positionStrategy.settings.target = this.elementRef.nativeElement;\n        this.selection.set(this.id, new Set());\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        this.filteredData = [...this.data];\n\n        if (this.ngControl) {\n            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged);\n    }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n        this.comboAPI.clear();\n        this.selection.clear(this.id);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public writeValue(value: any): void {\n        // selectItems can handle Array<any>, no valueKey is needed;\n        this.selectItems(value, true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnTouched(fn: any): void { }\n\n    /**\n     * @hidden @internal\n     */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public getEditElement(): HTMLElement {\n        return this.comboInput.nativeElement;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get template(): TemplateRef<any> {\n        this._dataType = this.dataType;\n        if (this.itemTemplate) {\n            return this.itemTemplate;\n        }\n        if (this._dataType === DataTypes.COMPLEX) {\n            return this.complexTemplate;\n        }\n        return this.primitiveTemplate;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClearItems(event: Event): void {\n        this.deselectAllItems(true, event);\n        event.stopPropagation();\n    }\n\n    /**\n     * A method that opens/closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.toggle()\">Toggle Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public toggle(): void {\n        this.dropdown.toggle(this.overlaySettings);\n    }\n\n    /**\n     * A method that opens the combo.\n     *\n     *```html\n     *<button (click)=\"combo.open()\">Open Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public open(): void {\n        this.dropdown.open(this.overlaySettings);\n    }\n\n    /**\n     * A method that closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.close()\">Close Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public close(): void {\n        this.dropdown.close();\n    }\n\n    /**\n     * Gets drop down state.\n     *\n     * ```typescript\n     * let state = this.combo.collapsed;\n     * ```\n    */\n    public get collapsed(): boolean {\n        return this.dropdown.collapsed;\n    }\n\n    /**\n     * Get current selection state\n     * @returns Array of selected items\n     * ```typescript\n     * let selectedItems = this.combo.selectedItems();\n     * ```\n     */\n    public selectedItems() {\n        const items = Array.from(this.selection.get(this.id));\n        return this.isRemote ? items.map(item => this._parseItemID(item)) : items;\n    }\n\n    /**\n     * Select defined items\n     * @param newItems new items to be selected\n     * @param clearCurrentSelection if true clear previous selected items\n     * ```typescript\n     * this.combo.selectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public selectItems(newItems: Array<any>, clearCurrentSelection?: boolean, event?: Event) {\n        if (newItems) {\n            const newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Deselect defined items\n     * @param items items to deselected\n     * ```typescript\n     * this.combo.deselectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public deselectItems(items: Array<any>, event?: Event) {\n        if (items) {\n            const newSelection = this.selection.delete_items(this.id, items);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Select all (filtered) items\n     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.\n     * ```typescript\n     * this.combo.selectAllItems();\n     * ```\n     */\n    public selectAllItems(ignoreFilter?: boolean, event?: Event) {\n        const allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData);\n        const newSelection = this.selection.add_items(this.id, allVisible);\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Deselect all (filtered) items\n     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.\n     * ```typescript\n     * this.combo.deselectAllItems();\n     * ```\n     */\n    public deselectAllItems(ignoreFilter?: boolean, event?: Event): void {\n        let newSelection = this.selection.get_empty();\n        if (this.filteredData.length !== this.data.length && !ignoreFilter) {\n            newSelection = this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData));\n        }\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Selects/Deselects an item using it's valueKey value\n     * @param itemID the valueKey of the specified item\n     * @param select If the item should be selected (true) or deselcted (false)\n     *\n     * ```typescript\n     * items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem('Connecticut', true);\n     * // combo.valueKey === 'field'\n     * // items[n] === { field: 'Connecticut', state: 'New England'}\n     * ```\n     */\n    public setSelectedItem(itemID: any, select = true, event?: Event): void {\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        const itemValue = this.getValueByValueKey(itemID);\n        if (itemValue !== null && itemValue !== undefined) {\n            if (select) {\n                this.selectItems([itemValue], false, event);\n            } else {\n                this.deselectItems([itemValue], event);\n            }\n        }\n    }\n\n    protected setSelection(newSelection: Set<any>, event?: Event): void {\n        const oldSelectionEmit = Array.from(this.selection.get(this.id) || []);\n        const newSelectionEmit = Array.from(newSelection || []);\n        const args: IComboSelectionChangeEventArgs = {\n            newSelection: newSelectionEmit,\n            oldSelection: oldSelectionEmit,\n            event,\n            cancel: false\n        };\n        this.onSelectionChange.emit(args);\n        if (!args.cancel) {\n            this.selection.select_items(this.id, args.newSelection, true);\n            this._value = this.dataType !== DataTypes.PRIMITIVE ?\n                args.newSelection.map((id) => this._parseItemID(id)[this.displayKey]).join(', ') :\n                args.newSelection.join(', ');\n            this._onChangeCallback(args.newSelection);\n        }\n    }\n    /**\n     * Event handlers\n     * @hidden\n     * @internal\n     */\n    public handleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleOpened() {\n        this.triggerCheck();\n        this.focusSearchInput(true);\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosing(event) {\n        this.onClosing.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.searchValue = '';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosed() {\n        this.comboInput.nativeElement.focus();\n        this.onClosed.emit();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboFilterConditionPipe, IgxComboGroupingPipe,\n        IgxComboFilteringPipe, IgxComboSortingPipe, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxComboModule { }\n","import { isIE } from '../core/utils';\n\n/**\n * This enum is used to keep the date validation result.\n *\n *@hidden\n */\nexport const enum DateState {\n    Valid = 'valid',\n    Invalid = 'invalid',\n}\n\n/**\n *@hidden\n */\nconst enum FormatDesc {\n    Numeric = 'numeric',\n    TwoDigits = '2-digit'\n}\n\n/**\n *@hidden\n */\nconst enum DateChars {\n    YearChar = 'y',\n    MonthChar = 'M',\n    DayChar = 'd'\n}\n\n/**\n *@hidden\n */\nconst enum DateParts {\n    Day = 'day',\n    Month = 'month',\n    Year = 'year'\n}\n\n/**\n *@hidden\n */\nexport abstract class DatePickerUtil {\n    private static readonly SHORT_DATE_MASK = 'MM/dd/yy';\n    private static readonly SEPARATOR = 'literal';\n    private static readonly NUMBER_OF_MONTHS = 12;\n    private static readonly PROMPT_CHAR = '_';\n    private static readonly DEFAULT_LOCALE = 'en';\n\n    /**\n     * This method generates date parts structure based on editor mask and locale.\n     * @param maskValue: string\n     * @param locale: string\n     * @returns array containing information about date parts - type, position, format\n     */\n    public static parseDateFormat(maskValue: string, locale: string = DatePickerUtil.DEFAULT_LOCALE): any[] {\n        let dateStruct = [];\n        if (maskValue === undefined && !isIE()) {\n            dateStruct = DatePickerUtil.getDefaultLocaleMask(locale);\n        } else {\n            const mask = (maskValue) ? maskValue : DatePickerUtil.SHORT_DATE_MASK;\n            const maskArray = Array.from(mask);\n            const monthInitPosition = mask.indexOf(DateChars.MonthChar);\n            const dayInitPosition = mask.indexOf(DateChars.DayChar);\n            const yearInitPosition = mask.indexOf(DateChars.YearChar);\n\n            if (yearInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Year,\n                    initialPosition: yearInitPosition,\n                    formatType: DatePickerUtil.getYearFormatType(mask)\n                });\n            }\n\n            if (monthInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Month,\n                    initialPosition: monthInitPosition,\n                    formatType: DatePickerUtil.getMonthFormatType(mask)\n                });\n            }\n\n            if (dayInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Day,\n                    initialPosition: dayInitPosition,\n                    formatType: DatePickerUtil.getDayFormatType(mask)\n                });\n            }\n\n            for (let i = 0; i < maskArray.length; i++) {\n                if (!DatePickerUtil.isDateChar(maskArray[i])) {\n                    dateStruct.push({\n                        type: DatePickerUtil.SEPARATOR,\n                        initialPosition: i,\n                        value: maskArray[i]\n                    });\n                }\n            }\n\n            dateStruct.sort((a, b) => a.initialPosition - b.initialPosition);\n            DatePickerUtil.fillDatePartsPositions(dateStruct);\n        }\n        return dateStruct;\n    }\n\n    /**\n     * This method generates input mask based on date parts.\n     * @param dateStruct array\n     * @returns input mask\n     */\n    public static getInputMask(dateStruct: any[]): string {\n        const inputMask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                inputMask.push(dateStruct[i].value);\n            } else if (dateStruct[i].type === DateParts.Day || dateStruct[i].type === DateParts.Month) {\n                inputMask.push('00');\n            } else if (dateStruct[i].type === DateParts.Year) {\n                switch (dateStruct[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        inputMask.push('0000');\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        inputMask.push('00');\n                        break;\n                    }\n                }\n            }\n        }\n        return inputMask.join('');\n    }\n\n    /**\n     * This method generates editor mask.\n     * @param dateStruct\n     * @returns editor mask\n     */\n    public static getMask(dateStruct: any[]): string {\n        const mask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].formatType) {\n                case FormatDesc.Numeric: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('d');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('M');\n                    } else {\n                        mask.push('yyyy');\n                    }\n                    break;\n                }\n                case FormatDesc.TwoDigits: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('dd');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('MM');\n                    } else {\n                        mask.push('yy');\n                    }\n                }\n            }\n\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                mask.push(dateStruct[i].value);\n            }\n        }\n\n        return mask.join('');\n    }\n    /**\n     * This method parses an input string base on date parts and returns a date and its validation state.\n     * @param dateFormatParts\n     * @param prevDateValue\n     * @param inputValue\n     * @returns object containing a date and its validation state\n     */\n    public static parseDateArray(dateFormatParts: any[], prevDateValue: Date, inputValue: string): any {\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, inputValue);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue);\n        const yearStr = DatePickerUtil.getYearValueFromInput(dateFormatParts, inputValue);\n        const yearFormat = DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType;\n        const day = (dayStr !== '') ? parseInt(dayStr, 10) : 1;\n        const month = (monthStr !== '') ? parseInt(monthStr, 10) - 1 : 0;\n\n        let year;\n        if (yearStr === '') {\n            year = (yearFormat === FormatDesc.TwoDigits) ? '00' : '2000';\n        } else {\n            year = yearStr;\n        }\n        let yearPrefix;\n        if (prevDateValue) {\n            const originalYear = prevDateValue.getFullYear().toString();\n            if (originalYear.length === 4) {\n                yearPrefix = originalYear.substring(0, 2);\n            }\n        } else {\n            yearPrefix = '20';\n        }\n        const fullYear = (yearFormat === FormatDesc.TwoDigits) ? yearPrefix.concat(year) : year;\n\n        if ((month < 0) || (month > 11) || (month === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        if ((day < 1) || (day > DatePickerUtil.daysInMonth(fullYear, month + 1)) || (day === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        return { state: DateState.Valid, date: new Date(fullYear, month, day) };\n    }\n\n    public static maskToPromptChars(mask: string): string {\n        const result = mask.replace(/0|L/g, DatePickerUtil.PROMPT_CHAR);\n        return result;\n    }\n\n    /**\n     * This method replaces prompt chars with empty string.\n     * @param value\n     */\n    public static trimUnderlines(value: string): string {\n        const result = value.replace(/_/g, '');\n        return result;\n    }\n\n    /**\n     * This method is used for spinning date parts.\n     * @param dateFormatParts\n     * @param inputValue\n     * @param position\n     * @param delta\n     * @param isSpinLoop\n     * @return modified text input\n     */\n    public static getModifiedDateInput(dateFormatParts: any[],\n        inputValue: string,\n        position: number,\n        delta: number,\n        isSpinLoop: boolean): string {\n        const datePart = DatePickerUtil.getDatePartOnPosition(dateFormatParts, position);\n        const datePartType = datePart.type;\n        const datePartFormatType = datePart.formatType;\n        let newValue;\n\n        const datePartValue = DatePickerUtil.getDateValueFromInput(dateFormatParts, datePartType, inputValue);\n        newValue = parseInt(datePartValue, 10);\n\n        let maxValue, minValue;\n        const minMax = DatePickerUtil.getMinMaxValue(dateFormatParts, datePart, inputValue);\n        minValue = minMax.min;\n        maxValue = minMax.max;\n\n        if (isNaN(newValue)) {\n            if (minValue === 'infinite') {\n                newValue = 2000;\n            } else {\n                newValue = minValue;\n            }\n        }\n        let tempValue = newValue;\n        tempValue += delta;\n\n        // Infinite loop for full years\n        if (maxValue === 'infinite' && minValue === 'infinite') {\n            newValue = tempValue;\n        }\n\n        if (isSpinLoop) {\n            if (tempValue > maxValue) {\n                tempValue = minValue;\n            }\n            if (tempValue < minValue) {\n                tempValue = maxValue;\n            }\n            newValue = tempValue;\n        } else {\n            if (tempValue <= maxValue && tempValue >= minValue) {\n                newValue = tempValue;\n            }\n        }\n\n        const startIdx = datePart.position[0];\n        const endIdx = datePart.position[1];\n        const start = inputValue.slice(0, startIdx);\n        const end = inputValue.slice(endIdx, inputValue.length);\n        let changedPart: string;\n\n        const prefix = DatePickerUtil.getNumericFormatPrefix(datePartFormatType);\n        changedPart = (newValue < 10) ? `${prefix}${newValue}` : `${newValue}`;\n\n        return `${start}${changedPart}${end}`;\n    }\n\n    /**\n     * This method returns date input with prompt chars.\n     * @param dateFormatParts\n     * @param date\n     * @param inputValue\n     * @returns date input including prompt chars\n     */\n    public static addPromptCharsEditMode(dateFormatParts: any[], date: Date, inputValue: string): string {\n        const dateArray = Array.from(inputValue);\n        for (let i = 0; i < dateFormatParts.length; i++) {\n            if (dateFormatParts[i].formatType === FormatDesc.Numeric) {\n                if ((dateFormatParts[i].type === DateParts.Day && date.getDate() < 10)\n                    || (dateFormatParts[i].type === DateParts.Month && date.getMonth() + 1 < 10)) {\n                    dateArray.splice(dateFormatParts[i].position[0], 0, DatePickerUtil.PROMPT_CHAR);\n                    dateArray.join('');\n                }\n            }\n        }\n        return dateArray.join('');\n    }\n\n    /**\n     * This method checks if date input is done.\n     * @param dateFormatParts\n     * @param input\n     * @returns input completeness\n     */\n    public static checkForCompleteDateInput(dateFormatParts: any[], input: string): string {\n        const dayValue = DatePickerUtil.getDayValueFromInput(dateFormatParts, input);\n        const monthValue = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input);\n        const yearValue = DatePickerUtil.getYearValueFromInput(dateFormatParts, input);\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, input, false);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input, false);\n\n        if (DatePickerUtil.isFullInput(dayValue, dayStr)\n            && DatePickerUtil.isFullInput(monthValue, monthStr)\n            && DatePickerUtil.isFullYearInput(dateFormatParts, yearValue)) {\n            return 'complete';\n        } else if (dayValue === '' && monthValue === '' && yearValue === '') {\n            return 'empty';\n        } else if (dayValue === '' || monthValue === '' || yearValue === '') {\n            return 'partial';\n        }\n        return '';\n    }\n\n    private static getYearFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.YearChar, 'g')).length) {\n            case 1: {\n                // y (2020)\n                return FormatDesc.Numeric;\n            }\n            case 4: {\n                // yyyy (2020)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // yy (20)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getMonthFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.MonthChar, 'g')).length) {\n            case 1: {\n                // M (8)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // MM (08)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDayFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.DayChar, 'g')).length) {\n            case 1: {\n                // d (6)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // dd (06)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDefaultLocaleMask(locale: string) {\n        const dateStruct = [];\n        const formatter = new Intl.DateTimeFormat(locale);\n        const formatToParts = formatter.formatToParts(new Date());\n        for (let i = 0; i < formatToParts.length; i++) {\n            if (formatToParts[i].type === DatePickerUtil.SEPARATOR) {\n                dateStruct.push({\n                    type: DatePickerUtil.SEPARATOR,\n                    value: formatToParts[i].value\n                });\n            } else {\n                dateStruct.push({\n                    type: formatToParts[i].type,\n                });\n            }\n        }\n        const formatterOptions = formatter.resolvedOptions();\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].type) {\n                case DateParts.Day: {\n                    dateStruct[i].formatType = formatterOptions.day;\n                    break;\n                }\n                case DateParts.Month: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n                case DateParts.Year: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n            }\n        }\n        DatePickerUtil.fillDatePartsPositions(dateStruct);\n        return dateStruct;\n    }\n\n    private static isDateChar(char: string): boolean {\n        return (char === DateChars.YearChar || char === DateChars.MonthChar || char === DateChars.DayChar);\n    }\n\n    private static getNumericFormatPrefix(formatType: string): string {\n        switch (formatType) {\n            case FormatDesc.TwoDigits: {\n                return '0';\n            }\n            case FormatDesc.Numeric: {\n                return DatePickerUtil.PROMPT_CHAR;\n            }\n        }\n    }\n\n    private static getMinMaxValue(dateFormatParts: any[], datePart, inputValue: string): any {\n        let maxValue, minValue;\n        switch (datePart.type) {\n            case DateParts.Month: {\n                minValue = 1;\n                maxValue = DatePickerUtil.NUMBER_OF_MONTHS;\n                break;\n            }\n            case DateParts.Day: {\n                minValue = 1;\n                maxValue = DatePickerUtil.daysInMonth(\n                    DatePickerUtil.getFullYearFromString(DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year), inputValue),\n                    parseInt(DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue), 10));\n                break;\n            }\n            case DateParts.Year: {\n                if (datePart.formatType === FormatDesc.TwoDigits) {\n                    minValue = 0;\n                    maxValue = 99;\n                } else {\n                    // Infinite loop\n                    minValue = 'infinite';\n                    maxValue = 'infinite';\n                }\n                break;\n            }\n        }\n        return { min: minValue, max: maxValue };\n    }\n\n    private static daysInMonth(fullYear: number, month: number): number {\n        return new Date(fullYear, month, 0).getDate();\n    }\n\n    private static getDateValueFromInput(dateFormatParts: any[], type: DateParts, inputValue: string, trim: boolean = true): string {\n        const partPosition = DatePickerUtil.getDateFormatPart(dateFormatParts, type).position;\n        const result = inputValue.substring(partPosition[0], partPosition[1]);\n        return (trim) ? DatePickerUtil.trimUnderlines(result) : result;\n    }\n\n    private static getDayValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Day, inputValue, trim);\n    }\n\n    private static getMonthValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Month, inputValue, trim);\n    }\n\n    private static getYearValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Year, inputValue, trim);\n    }\n\n    private static getDateFormatPart(dateFormatParts: any[], type: DateParts): any {\n        const result = dateFormatParts.filter((datePart) => (datePart.type === type))[0];\n        return result;\n    }\n\n    private static isFullInput(value: any, input: string): boolean {\n        return (value !== '' && input.length === 2 && input.charAt(1) !== DatePickerUtil.PROMPT_CHAR);\n    }\n\n    private static isFullYearInput(dateFormatParts: any[], value: any): boolean {\n        switch (DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType) {\n            case FormatDesc.Numeric: {\n                return (value !== '' && value.length === 4);\n            }\n            case FormatDesc.TwoDigits: {\n                return (value !== '' && value.length === 2);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n\n    private static getDatePartOnPosition(dateFormatParts: any[], position: number) {\n        const result = dateFormatParts.filter((element) =>\n            element.position[0] <= position && position <= element.position[1] && element.type !== DatePickerUtil.SEPARATOR)[0];\n        return result;\n    }\n\n    private static getFullYearFromString(yearPart, inputValue): number {\n        return parseInt(inputValue.substring(yearPart.position[0], yearPart.position[1]), 10);\n    }\n\n    private static fillDatePartsPositions(dateArray: any[]): void {\n        let currentPos = 0;\n\n        for (let i = 0; i < dateArray.length; i++) {\n            // Day|Month part positions\n            if (dateArray[i].type === DateParts.Day || dateArray[i].type === DateParts.Month) {\n                // Offset 2 positions for number\n                dateArray[i].position = [currentPos, currentPos + 2];\n                currentPos += 2;\n            } else if (dateArray[i].type === DateParts.Year) {\n                // Year part positions\n                switch (dateArray[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        // Offset 4 positions for full year\n                        dateArray[i].position = [currentPos, currentPos + 4];\n                        currentPos += 4;\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        // Offset 2 positions for short year\n                        dateArray[i].position = [currentPos, currentPos + 2];\n                        currentPos += 2;\n                        break;\n                    }\n                }\n            } else if (dateArray[i].type === DatePickerUtil.SEPARATOR) {\n                // Separator positions\n                dateArray[i].position = [currentPos, currentPos + 1];\n                currentPos++;\n            }\n        }\n    }\n}\n\n\n","/** @hidden */\nexport const IGX_DATE_PICKER_COMPONENT = 'IgxDatePickerComponentToken';\n\n/** @hidden */\nexport interface IDatePicker {\n    value: Date;\n    mask: string;\n    inputMask: string;\n    rawDateString: string;\n    dateFormatParts: any[];\n    invalidDate: string;\n}\n","import { PipeTransform, Pipe, Inject } from '@angular/core';\nimport { IGX_DATE_PICKER_COMPONENT, IDatePicker } from './date-picker.common';\nimport { DatePickerUtil } from './date-picker.utils';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'displayValue'\n})\nexport class DatePickerDisplayValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (value !== '') {\n            if (value === DatePickerUtil.maskToPromptChars(this._datePicker.inputMask)) {\n                return '';\n            }\n            this._datePicker.rawDateString = value;\n            return DatePickerUtil.trimUnderlines(value);\n        }\n        return '';\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'inputValue'\n})\nexport class DatePickerInputValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (this._datePicker.invalidDate !== '') {\n            return this._datePicker.invalidDate;\n        } else {\n            if (this._datePicker.value === null || this._datePicker.value === undefined) {\n                return DatePickerUtil.maskToPromptChars(this._datePicker.inputMask);\n            } else {\n                return DatePickerUtil.addPromptCharsEditMode(this._datePicker.dateFormatParts, this._datePicker.value, value);\n            }\n        }\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDatePickerTemplate]'\n})\n\n/**\n * IgxDatePickerTemplateDirective can be used to re-template the date-picker input-group.\n *\n * @hidden\n */\nexport class IgxDatePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * This enumeration is used to configure whether the date/time picker has an editable input with drop down\n * or is readonly - the date/time is selected only through a dialog.\n */\nexport enum InteractionMode {\n    DropDown = 'dropdown',\n    Dialog = 'dialog'\n}\n","import { Component, ViewChild, Input, Output, EventEmitter, HostListener, HostBinding } from '@angular/core';\nimport { IgxCalendarComponent } from '../calendar';\nimport { InteractionMode } from '../core/enums';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-calendar-container',\n    styles: [':host {display: block;}'],\n    templateUrl: 'calendar-container.component.html'\n})\nexport class IgxCalendarContainerComponent {\n    @ViewChild('calendar')\n    public calendar: IgxCalendarComponent;\n\n    @Input()\n    public mode: InteractionMode = InteractionMode.Dialog;\n\n    @Input()\n    public vertical = false;\n\n    @Input()\n    public cancelButtonLabel: string;\n\n    @Input()\n    public todayButtonLabel: string;\n\n    @Output()\n    public onClose = new EventEmitter();\n\n    @Output()\n    public onTodaySelection = new EventEmitter();\n\n    @HostBinding('class.igx-date-picker')\n    public styleClass = 'igx-date-picker';\n\n    @HostBinding('class.igx-date-picker--dropdown')\n    get dropdownCSS(): boolean {\n        return this.mode === InteractionMode.DropDown;\n    }\n\n    @HostBinding('class.igx-date-picker--vertical')\n    get verticalCSS(): boolean {\n        return this.vertical && this.mode === InteractionMode.Dialog;\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    @HostListener('keydown.alt.arrowup', ['$event'])\n    public onEscape(event) {\n        event.preventDefault();\n        this.onClose.emit();\n    }\n\n    /**\n     * Returns whether the date-picker is in readonly dialog mode.\n     *\n     * @hidden\n    */\n    public get isReadonly() {\n        return this.mode === InteractionMode.Dialog;\n    }\n\n    /**\n     * Emits close event for the calendar.\n     */\n    public closeCalendar() {\n        this.onClose.emit();\n    }\n\n    /**\n    * Emits today selection event for the calendar.\n    */\n    public triggerTodaySelection() {\n        this.onTodaySelection.emit();\n    }\n}\n","import { CommonModule, formatDate } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    ViewChild,\n    ElementRef,\n    TemplateRef,\n    Inject,\n    ChangeDetectorRef,\n    HostListener,\n    NgModuleRef,\n    AfterViewInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    IgxCalendarComponent,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarModule,\n    IgxCalendarSubheaderTemplateDirective,\n    WEEKDAYS,\n    isDateInRanges\n} from '../calendar/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputDirective } from '../input-group/index';\nimport { Subject, fromEvent, animationFrameScheduler, interval } from 'rxjs';\nimport { filter, takeUntil, throttle } from 'rxjs/operators';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport {\n    OverlaySettings,\n    IgxOverlayService,\n    PositionSettings,\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy\n} from '../services/index';\nimport { DateRangeDescriptor } from '../core/dates/dateRange';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport {\n    DatePickerUtil,\n    DateState\n} from './date-picker.utils';\nimport { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';\nimport { IDatePicker } from './date-picker.common';\nimport { KEYS } from '../core/utils';\nimport { IgxDatePickerTemplateDirective } from './date-picker.directives';\nimport { IgxCalendarContainerComponent } from './calendar-container.component';\nimport { InteractionMode } from '../core/enums';\nimport { getViewportRect } from '../services/overlay/utilities';\nimport { fadeIn, fadeOut } from '../animations/fade';\n\nlet NEXT_ID = 0;\n\n/**\n * This interface is used to provide information about date picker reference and its current value\n * when onDisabledDate event is fired.\n */\nexport interface IDatePickerDisabledDateEventArgs {\n    datePicker: IgxDatePickerComponent;\n    currentValue: Date;\n}\n\n/**\n * This interface is used to provide information about date picker reference and its previously valid value\n * when onValidationFailed event is fired.\n */\nexport interface IDatePickerValidationFailedEventArgs {\n    datePicker: IgxDatePickerComponent;\n    prevValue: Date;\n}\n\n/**\n * This interface is used to configure calendar format view options.\n */\nexport interface IFormatViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\n/**\n * This interface is used to configure calendar format options.\n */\nexport interface IFormatOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n/**\n * This enumeration is used to configure the date picker to operate with pre-defined format option used in Angular DatePipe.\n * 'https://angular.io/api/common/DatePipe'\n * 'shortDate': equivalent to 'M/d/yy' (6/15/15).\n * 'mediumDate': equivalent to 'MMM d, y' (Jun 15, 2015).\n * 'longDate': equivalent to 'MMMM d, y' (June 15, 2015).\n * 'fullDate': equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).\n */\nexport enum PredefinedFormatOptions {\n    ShortDate = 'shortDate',\n    MediumDate = 'mediumDate',\n    LongDate = 'longDate',\n    FullDate = 'fullDate'\n}\n\n/**\n * **Ignite UI for Angular Date Picker** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/date_picker.html)\n *\n * The Ignite UI Date Picker displays a popup calendar that lets users select a single date.\n *\n * Example:\n * ```html\n * <igx-date-picker [(ngModel)]=\"selectedDate\"></igx-date-picker>\n * ```\n */\n@Component({\n    providers:\n        [{\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDatePickerComponent,\n            multi: true\n        }],\n    // tslint:disable-next-line:component-selector\n    selector: 'igx-date-picker',\n    templateUrl: 'date-picker.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxDatePickerComponent implements IDatePicker, ControlValueAccessor, EditorProvider, OnInit, AfterViewInit, OnDestroy {\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label.\n     * The default label is 'Date'.\n     * ```html\n     * <igx-date-picker [label]=\"Calendar\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public label = 'Date';\n\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label visibility.\n     * By default the visibility is set to true.\n     * <igx-date-picker [labelVisibility]=\"false\"></igx-date-picker>\n     */\n    @Input()\n    public labelVisibility = true;\n\n    /**\n     *An @Input property that sets locales. Default locale is en.\n     *```html\n     *<igx-date-picker locale=\"ja-JP\" [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input() public locale: 'en';\n\n    /**\n     *An @Input property that sets on which day the week starts.\n     *```html\n     *<igx-date-picker [weekStart]=\"WEEKDAYS.FRIDAY\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input() public weekStart: WEEKDAYS | number = WEEKDAYS.SUNDAY;\n\n    /**\n     *Returns the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatOptions = this.datePicker.formatOptions;\n     *}\n     *```\n     */\n    @Input()\n    public get formatOptions(): IFormatOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     *Sets the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Options;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Options = {\n     *        day: \"numeric\",\n     *        month: \"long\",\n     *        weekday: \"long\",\n     *        year: \"numeric\"\n     *    }\n     *this.datePicker.formatOptions = this.Options;\n     *}\n     *```\n     */\n    public set formatOptions(formatOptions: IFormatOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n    }\n\n    /**\n     *Returns the date display format of the `IgxDatePickerComponent` in dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let format = this.datePicker.format;\n     *}\n     *```\n     */\n    @Input()\n    public get format(): string {\n        return (this._format === undefined) ? PredefinedFormatOptions.ShortDate : this._format;\n    }\n\n    /**\n    *Sets the date format of the `IgxDatePickerComponent` when in editable dropdown mode.\n    *```typescript\n    *@ViewChild(\"MyDatePicker\")\n    *public datePicker: IgxDatePickerComponent;\n    *this.datePicker.format = 'yyyy-M-d';\n    *}\n    *```\n    */\n    public set format(format: string) {\n        this._format = format;\n    }\n\n    /**\n     *Returns the date mask of the `IgxDatePickerComponent` when in editable dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let mask = this.datePicker.mask;\n     *}\n     *```\n     */\n    @Input()\n    public mask: string;\n\n    /**\n     *Returns the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatViews = this.datePicker.formatViews;\n     *}\n     *```\n     */\n    @Input()\n    public get formatViews(): IFormatViews {\n        return this._formatViews;\n    }\n\n    /**\n     *Sets the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Views;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Views = {day:false, month: false, year:false};\n     *    this.datePicker.formatViews = this.Views;\n     *}\n     *```\n     */\n    public set formatViews(formatViews: IFormatViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     * ```typescript\n     * let disabledDates = this.datepicker.disabledDates;\n     * ```\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     * ```typescript\n     * let specialDates = this.datepicker.specialDates;\n     * ```\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    @Input()\n    public get modalOverlaySettings(): OverlaySettings {\n        return this._modalOverlay;\n    }\n\n    public set modalOverlaySettings(value: OverlaySettings) {\n        this._modalOverlay = value;\n    }\n\n    @Input()\n    public get dropDownOverlaySettings(): OverlaySettings {\n        return this._dropDownOverlay;\n    }\n\n    public set dropDownOverlaySettings(value: OverlaySettings) {\n        this._dropDownOverlay = value;\n    }\n\n    /**\n     *Returns the formatted date when `IgxDatePickerComponent` is in dialog mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *public selection(event){\n     *    let selectedDate = this.datePicker.displayData;\n     *    alert(selectedDate);\n     *}\n     *```\n     *```html\n     *<igx-date-picker #MyDatePicker (onSelection)=\"selection()\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    public get displayData(): string {\n        if (this.value) {\n            return this._customFormatChecker(this.formatter, this.value);\n        }\n        return '';\n    }\n\n    /**\n     hidden\n     */\n    public get transformedDate(): string {\n        if (this._value) {\n            this._transformedDate = (this._isInEditMode) ? this._getEditorDate(this._value) : this._getDisplayDate(this._value);\n            this.isEmpty = false;\n        } else {\n            this._transformedDate = (this._isInEditMode) ? DatePickerUtil.maskToPromptChars(this.inputMask) : '';\n        }\n        return this._transformedDate;\n    }\n\n    public set transformedDate(value) {\n        this._transformedDate = value;\n    }\n\n    constructor(@Inject(IgxOverlayService) private _overlayService: IgxOverlayService, public element: ElementRef,\n        private _cdr: ChangeDetectorRef, private _moduleRef: NgModuleRef<any>) { }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxDatePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.datePickerTemplateDirective) {\n            return this.datePickerTemplateDirective.template;\n        }\n        return (this.mode === InteractionMode.Dialog) ? this.readOnlyDatePickerTemplate : this.editableDatePickerTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxDatePickerComponent\n     */\n    get context() {\n        return {\n            disabled: this.disabled,\n            disabledDates: this.disabledDates,\n            displayData: this.displayData,\n            format: this.format,\n            isSpinLoop: this.isSpinLoop,\n            label: this.label,\n            labelVisibility: this.labelVisibility,\n            locale: this.locale,\n            mask: this.mask,\n            mode: this.mode,\n            specialDates: this.specialDates,\n            value: this.value,\n            openDialog: () => { this.openDialog(); }\n        };\n    }\n\n    /**\n     *An @Input property that gets/sets the selected date.\n     *```typescript\n     *public date: Date = new Date();\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public get value(): Date {\n        return this._value;\n    }\n\n    public set value(date: Date) {\n        this._value = date;\n        this._onChangeCallback(date);\n    }\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-date-picker [id]=\"'igx-date-picker-3'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-date-picker-${NEXT_ID++}`;\n\n    /**\n     *An @Input property that applies a custom formatter function on the selected or passed date.\n     *```typescript\n     *public date: Date = new Date();\n     *private dayFormatter = new Intl.DateTimeFormat(\"en\", { weekday: \"long\" });\n     *private monthFormatter = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n     *public formatter = (date: Date) => { return `You selected\n     *                     ${this.dayFormatter.format(date)},\n     *                     ${date.getDate()} ${this.monthFormatter.format(date)},\n     *                     ${date.getFullYear()}`;\n     *}\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\" [formatter]=\"formatter\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public formatter: (val: Date) => string;\n\n    /**\n     *An @Input property that disables the `IgxDatePickerComponent`.\n     *```html\n     *<igx-date-picker [disabled]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     *An @Input property that sets the orientation of the `IgxDatePickerComponent` header.\n     *```html\n     *<igx-date-picker [vertical]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     *An @Input property that renders today button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"cancel\" todayButtonLabel=\"Tomorrow\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public todayButtonLabel: string;\n\n    /**\n     *An @Input property that renders cancel button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"Close\" todayButtonLabel=\"Today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public cancelButtonLabel: string;\n\n    /**\n     *An @Input property that sets whether `IgxDatePickerComponent` is in dialog or drop down mode.\n     *```html\n     *<igx-date-picker mode=\"dropdown\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     *An @Input property that sets whether the `IgxDatePickerComponent` date parts would spin continuously or stop when min/max is reached.\n     *```html\n     *<igx-date-picker [isSpinLoop]=\"false\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n    *@hidden\n    */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n     *```typescript\n     *public open(event){\n     *    alert(\"The date-picker calendar has been opened!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onOpen)=\"open($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     *\"An event that is emitted when the `IgxDatePickerComponent` is closed.\n     *```typescript\n     *public close(event){\n     *    alert(\"The date-picker has been closed!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onClose)=\"close($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IgxDatePickerComponent>();\n    /**\n     *An @Output property that is fired when selection is made in the calendar.\n     *```typescript\n     *public selection(event){\n     *    alert(\"A date has been selected!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onSelection)=\"selection($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n    *An @Output property that fires when the user types/spins to a disabled date in the date-picker editor.\n    *```typescript\n    *public onDisabledDate(event){\n    *    alert(\"This date is disabled!\");\n    *}\n    *```\n    *```html\n    *<igx-date-picker (onDisabledDate)=\"onDisabledDate($event)\"></igx-date-picker>\n    *```\n    */\n    @Output()\n    public onDisabledDate = new EventEmitter<IDatePickerDisabledDateEventArgs>();\n\n    /**\n    *An @Output property that fires when the user types/spins invalid date in the date-picker editor.\n    *```typescript\n    *public onValidationFailed(event){\n        *    alert(\"This date is not valid!\");\n        *}\n        *```\n        *```html\n        *<igx-date-picker (onValidationFailed)=\"onValidationFailed($event)\"></igx-date-picker>\n        *```\n        */\n    @Output()\n    public onValidationFailed = new EventEmitter<IDatePickerValidationFailedEventArgs>();\n\n    /**\n    * @hidden\n    */\n    @ViewChild('datePickerOutlet', { read: ElementRef })\n    public outletDirective: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('readOnlyDatePickerTemplate', { read: TemplateRef })\n    protected readOnlyDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableDatePickerTemplate', { read: TemplateRef })\n    protected editableDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableInputGroup', { read: ElementRef })\n    protected editableInputGroup: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ContentChild('dropDownTarget', { read: ElementRef })\n    protected templateDropDownTarget: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableInput', { read: ElementRef })\n    protected editableInput: ElementRef;\n\n    /*\n    * @hidden\n    */\n    @ViewChild('readonlyInput', { read: ElementRef })\n    protected readonlyInput: ElementRef;\n\n    /*\n    * @hidden\n    */\n    @ContentChild(IgxInputDirective)\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective })\n    protected datePickerTemplateDirective: IgxDatePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective })\n    public headerTemplate: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective })\n    public subheaderTemplate: IgxCalendarSubheaderTemplateDirective;\n\n    public calendar: IgxCalendarComponent;\n    public hasHeader = true;\n    public collapsed = true;\n    public displayValuePipe = new DatePickerDisplayValuePipe(this);\n    public inputValuePipe = new DatePickerInputValuePipe(this);\n    public dateFormatParts = [];\n    public rawDateString: string;\n    public inputMask: string;\n    public isEmpty = true;\n    public invalidDate = '';\n\n    private readonly spinDelta = 1;\n    private readonly defaultLocale = 'en';\n    private readonly calendarHeight = 400;\n\n    private _formatOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n    private _formatViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n    private _destroy$ = new Subject<boolean>();\n    private _componentID: string;\n    private _format: string;\n    private _value: Date;\n    private _isInEditMode: boolean;\n    private _disabledDates: DateRangeDescriptor[] = null;\n    private _specialDates: DateRangeDescriptor[] = null;\n    private _modalOverlay: OverlaySettings;\n    private _dropDownOverlay: OverlaySettings;\n    private _positionSettings: PositionSettings;\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _modalOverlaySettings: OverlaySettings;\n    private _transformedDate;\n\n    /**\n    * @hidden\n    */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onSpaceClick(event: KeyboardEvent) {\n        this.openDialog();\n        event.preventDefault();\n    }\n\n    /**\n     *Method that sets the selected date.\n     *```typescript\n     *public date = new Date();\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.writeValue(this.date);\n     *}\n     *```\n     *@param value The date you want to select.\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public writeValue(value: Date) {\n        this.value = value;\n        this._cdr.markForCheck();\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    public getEditElement() {\n        let inputElement;\n        if (this.mode === InteractionMode.DropDown) {\n            inputElement = (this.editableInput) ? this.editableInput : this.input;\n        } else {\n            inputElement = (this.readonlyInput) ? this.readonlyInput : this.input;\n        }\n        return (inputElement) ? inputElement.nativeElement : null;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        this._positionSettings = {\n            openAnimation: fadeIn,\n            closeAnimation: fadeOut\n        };\n\n        const outlet = (this.outlet !== undefined) ? this.outlet : this.outletDirective;\n        this._dropDownOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy(this._positionSettings),\n            outlet: outlet\n        };\n\n        this._modalOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: true,\n            outlet: outlet\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this._onOpening(eventArgs);\n            });\n\n        this._overlayService.onOpened.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this._onOpened(eventArgs);\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onClosed();\n            });\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.dateFormatParts = DatePickerUtil.parseDateFormat(this.mask, this.locale);\n            if (this.mask === undefined) {\n                this.mask = DatePickerUtil.getMask(this.dateFormatParts);\n            }\n            this.inputMask = DatePickerUtil.getInputMask(this.dateFormatParts);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        if (this.mode === InteractionMode.DropDown && this.editableInput) {\n            fromEvent(this.editableInput.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((res) => this.onKeyDown(res));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._componentID) {\n            this._overlayService.hide(this._componentID);\n        }\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     *Selects today's date from calendar and change the input field value, @calendar.viewDate and @calendar.value.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.triggerTodaySelection();\n     *}\n     *```\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public triggerTodaySelection(): void {\n        const today = new Date(Date.now());\n        this.handleSelection(today);\n    }\n\n    /**\n     * Change the calendar selection and calling this method will emit the @calendar.onSelection event,\n     * which will fire @handleSelection method.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.selectDate(this.date);\n     *}\n     * ```\n     * @param date passed date that has to be set to the calendar.\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public selectDate(date: Date): void {\n        this.value = date;\n        this.onSelection.emit(date);\n        this._onChangeCallback(date);\n    }\n\n    /**\n     * Deselects the calendar date.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.deselectDate();\n     *}\n     * ```\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public deselectDate(): void {\n        this.value = null;\n        if (this.calendar) {\n            this.calendar.deselectDate();\n        }\n        this._onChangeCallback(null);\n    }\n\n    /**\n     * Open the calendar.\n     *\n     * @hidden\n     */\n    public openDialog(): void {\n        if (!this.collapsed) {\n            return;\n        }\n        switch (this.mode) {\n            case InteractionMode.Dialog: {\n                this.hasHeader = true;\n                const modalOverlay = (this.modalOverlaySettings !== undefined) ? this._modalOverlay : this._modalOverlaySettings;\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, modalOverlay, this._moduleRef);\n                this._overlayService.show(this._componentID, modalOverlay);\n                break;\n            }\n            case InteractionMode.DropDown: {\n                this.hasHeader = false;\n                let dropDownOverlay;\n\n                // dropdown overlay settings are modified via input\n                if (this.dropDownOverlaySettings !== undefined) {\n                    dropDownOverlay = this._dropDownOverlay;\n                } else {\n                    dropDownOverlay = this._dropDownOverlaySettings;\n                    let dropDownTarget;\n\n                    if (this.editableInputGroup) {\n                        dropDownTarget = this.editableInputGroup.nativeElement;\n                    } else {\n                        if (this.templateDropDownTarget) {\n                            // if the date picker is re-templated, set an element marked with #dropDownTarget as a target to the drop-down\n                            dropDownTarget = this.templateDropDownTarget.nativeElement;\n                        } else {\n                            throw new Error('There is no target element for the dropdown to attach. Mark an element with #dropDownTarget.');\n                        }\n                    }\n\n                    dropDownOverlay.positionStrategy.settings.target = dropDownTarget;\n                }\n\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, dropDownOverlay, this._moduleRef);\n                this._overlayService.show(this._componentID, dropDownOverlay);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Close the calendar.\n     *\n     * @hidden\n     */\n    public closeCalendar(): void {\n        this._overlayService.hide(this._componentID);\n    }\n\n    /**\n     * Clear the input field, date picker value and calendar selection.\n     *\n     * @hidden\n     */\n    public clear(): void {\n        this.isEmpty = true;\n        this.invalidDate = '';\n        this.deselectDate();\n        this._setCursorPosition(0);\n    }\n\n    /**\n     * Evaluates when @calendar.onSelection event was fired\n     * and update the input value.\n     *\n     * @param event selected value from calendar.\n     *\n     * @hidden\n     */\n    public handleSelection(date: Date): void {\n        if (this.value) {\n            date.setHours(this.value.getHours());\n            date.setMinutes(this.value.getMinutes());\n            date.setSeconds(this.value.getSeconds());\n            date.setMilliseconds(this.value.getMilliseconds());\n        }\n\n        this.value = date;\n        this.calendar.viewDate = date;\n        this._onChangeCallback(date);\n        this.closeCalendar();\n        this.onSelection.emit(date);\n    }\n\n    /**\n    * Evaluates when the input blur event was fired\n    * and re-calculate the date picker value.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onBlur(event): void {\n        this._isInEditMode = false;\n        this.calculateDate(event.target.value, event.type);\n    }\n\n    /**\n    * Evaluates when the input focus event was fired\n    * and re-calculate the editor text.\n    *\n    * @param event\n    * @hidden\n    */\n    public onFocus(): void {\n        this._isInEditMode = true;\n        if (this.value && this.invalidDate === '') {\n            this._transformedDate = this._getEditorDate(this.value);\n        }\n    }\n\n    /**\n    * Evaluates when the keydown event was fired for up/down keys\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onKeyDown(event) {\n        switch (event.key) {\n            case KEYS.UP_ARROW:\n            case KEYS.UP_ARROW_IE:\n                event.preventDefault();\n                event.stopPropagation();\n                this.spinValue(event.target.value, 1, event.type);\n                break;\n            case KEYS.DOWN_ARROW:\n            case KEYS.DOWN_ARROW_IE:\n                if (event.altKey) {\n                    this.openDialog();\n                } else {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.spinValue(event.target.value, -1, event.type);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n    * Evaluates when the mouse wheel event was fired\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onWheel(event) {\n        if (this._isInEditMode) {\n            event.preventDefault();\n            event.stopPropagation();\n            const sign = (event.deltaY > 0) ? -1 : 1;\n            this.spinValue(event.target.value, sign, event.type);\n        }\n    }\n\n    /**\n    * Evaluates when input event was fired in editor.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onInput(event) {\n        const targetValue = event.target.value;\n        const cursorPosition = this._getCursorPosition();\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, targetValue);\n        this._isInEditMode = true;\n\n        if (targetValue !== DatePickerUtil.maskToPromptChars(this.inputMask)) {\n            this.isEmpty = false;\n        }\n\n        // If all date parts are completed, change the date-picker value, stay in edit mode\n        if (checkInput === 'complete' && event.inputType !== 'deleteContentBackward') {\n            this._transformedDate = targetValue;\n            this.calculateDate(targetValue, event.type);\n            this._setCursorPosition(cursorPosition);\n        } else if (checkInput === 'partial') {\n            // While editing, if one date part is deleted, date-picker value is set to null, the remaining input stays intact.\n            this.deselectDate();\n            requestAnimationFrame(() => {\n                this.getEditElement().value = targetValue;\n                this._setCursorPosition(cursorPosition);\n            });\n        } else if (checkInput === 'empty') {\n            // Total clean-up as input is deleted.\n            this.isEmpty = true;\n            this.deselectDate();\n        }\n    }\n\n    private calculateDate(dateString: string, invokedByEvent: string): void {\n        if (dateString !== '') {\n            const prevDateValue = this.value;\n            const inputValue = (invokedByEvent === 'blur') ? this.rawDateString : dateString;\n            const newDateArray = DatePickerUtil.parseDateArray(this.dateFormatParts, prevDateValue, inputValue);\n\n            if (newDateArray.state === DateState.Valid) {\n                const newValue = newDateArray.date;\n                // Restore the time part if any\n                if (prevDateValue) {\n                    newValue.setHours(prevDateValue.getHours());\n                    newValue.setMinutes(prevDateValue.getMinutes());\n                    newValue.setSeconds(prevDateValue.getSeconds());\n                    newValue.setMilliseconds(prevDateValue.getMilliseconds());\n                }\n\n                if (this.disabledDates === null\n                    || (this.disabledDates !== null && !isDateInRanges(newValue, this.disabledDates))) {\n                    this.value = newValue;\n                    this.invalidDate = '';\n                    this._onChangeCallback(newValue);\n                } else {\n                    const args: IDatePickerDisabledDateEventArgs = {\n                        datePicker: this,\n                        currentValue: newValue,\n                    };\n                    this.onDisabledDate.emit(args);\n                }\n            } else {\n                const args: IDatePickerValidationFailedEventArgs = {\n                    datePicker: this,\n                    prevValue: prevDateValue\n                };\n                this.invalidDate = dateString;\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    private spinValue(inputValue: string, sign: number, eventType: string): void {\n        this._isInEditMode = true;\n        this.isEmpty = false;\n        const cursorPosition = this._getCursorPosition();\n\n        const modifiedInputValue =\n            DatePickerUtil.getModifiedDateInput(this.dateFormatParts, inputValue, cursorPosition, this.spinDelta * sign, this.isSpinLoop);\n\n        this.getEditElement().value = modifiedInputValue;\n        this._setCursorPosition(cursorPosition);\n\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, modifiedInputValue);\n        if (checkInput === 'complete') {\n            this._isInEditMode = true;\n            this.calculateDate(modifiedInputValue, eventType);\n            this._setCursorPosition(cursorPosition);\n        }\n    }\n\n    private _onOpening(event) {\n        this._initializeCalendarContainer(event.componentRef.instance);\n        this.collapsed = false;\n    }\n\n    private _onOpened(event): void {\n        this._onTouchedCallback();\n        this.onOpen.emit(this);\n\n        if (this.calendar) {\n            this._focusCalendarDate();\n        }\n    }\n\n    private _onClosed(): void {\n        this.collapsed = true;\n        this._componentID = null;\n        this.onClose.emit(this);\n\n        if (this.getEditElement()) {\n            this.getEditElement().focus();\n        }\n    }\n\n    private _initializeCalendarContainer(componentInstance: IgxCalendarContainerComponent) {\n        this.calendar = componentInstance.calendar;\n        const isVertical = (this.vertical && this.mode === InteractionMode.Dialog);\n        this.calendar.hasHeader = this.hasHeader;\n        this.calendar.formatOptions = this.formatOptions;\n        this.calendar.formatViews = this.formatViews;\n        this.calendar.locale = this.locale;\n        this.calendar.vertical = isVertical;\n        this.calendar.weekStart = this.weekStart;\n        this.calendar.specialDates = this.specialDates;\n        this.calendar.disabledDates = this.disabledDates;\n        this.calendar.headerTemplate = this.headerTemplate;\n        this.calendar.subheaderTemplate = this.subheaderTemplate;\n        this.calendar.onSelection.pipe(takeUntil(this._destroy$)).subscribe((ev: Date) => this.handleSelection(ev));\n\n        if (this.value) {\n            this.calendar.value = this.value;\n            this.calendar.viewDate = this.value;\n        }\n\n        componentInstance.mode = this.mode;\n        componentInstance.vertical = isVertical;\n        componentInstance.cancelButtonLabel = this.cancelButtonLabel;\n        componentInstance.todayButtonLabel = this.todayButtonLabel;\n\n        componentInstance.onClose.pipe(takeUntil(this._destroy$)).subscribe(() => this.closeCalendar());\n        componentInstance.onTodaySelection.pipe(takeUntil(this._destroy$)).subscribe(() => this.triggerTodaySelection());\n    }\n\n    // Focus a date, after the calendar appearance into DOM.\n    private _focusCalendarDate(): void {\n        requestAnimationFrame(() => {\n            this.calendar.daysView.focusActiveDate();\n        });\n    }\n\n    private _setLocaleToDate(value: Date): string {\n        return value.toLocaleDateString(this.locale);\n    }\n\n    private _getCursorPosition(): number {\n        return this.getEditElement().selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        requestAnimationFrame(() => {\n            this.getEditElement().setSelectionRange(start, end);\n        });\n    }\n\n    /**\n     * Apply custom user formatter upon date.\n     * @param formatter custom formatter function.\n     * @param date passed date\n     */\n    private _customFormatChecker(formatter: (_: Date) => string, date: Date) {\n        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date);\n    }\n\n    /*\n    * Transforms the date according to the specified format when `IgxDatePickerComponent` is in edit mode\n    * using @angular/common formatDate method: https://angular.io/api/common/formatDate\n    * @param  value: string | number | Date\n    * @returns formatted string\n    */\n    private _getDisplayDate(value: any): string {\n        if (this.format && !this.formatter) {\n            const locale = this.locale || this.defaultLocale;\n            return formatDate(value, this.format, locale);\n        } else {\n            return this._customFormatChecker(this.formatter, value);\n        }\n    }\n\n    private _getEditorDate(value: any) {\n        const locale = this.locale || this.defaultLocale;\n        const changedValue = (value) ? formatDate(value, this.mask, locale) : '';\n        return DatePickerUtil.addPromptCharsEditMode(this.dateFormatParts, this.value, changedValue);\n    }\n\n    private _onTouchedCallback: () => void = () => { };\n\n    private _onChangeCallback: (_: Date) => void = () => { };\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDatePickerComponent, IgxCalendarContainerComponent,\n        IgxDatePickerTemplateDirective, DatePickerDisplayValuePipe, DatePickerInputValuePipe],\n    exports: [IgxDatePickerComponent, IgxDatePickerTemplateDirective, DatePickerDisplayValuePipe, DatePickerInputValuePipe],\n    imports: [CommonModule, IgxIconModule, IgxInputGroupModule, IgxCalendarModule, IgxButtonModule, IgxRippleModule, IgxMaskModule],\n    entryComponents: [IgxCalendarContainerComponent]\n})\nexport class IgxDatePickerModule { }\n","import { DOCUMENT } from '@angular/common';\nimport { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-title,[igxDialogTitle]'\n})\nexport class IgxDialogTitleDirective {\n\n    @HostBinding('class.igx-dialog__window-title')\n    public defaultStyle = true;\n }\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-actions,[igxDialogActions]'\n})\nexport class IgxDialogActionsDirective {\n\n    @HostBinding('class.igx-dialog__window-actions')\n    public defaultClass = true;\n }\n","import { useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    AfterContentInit\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxDialogActionsDirective, IgxDialogTitleDirective } from './dialog.directives';\nimport { IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, GlobalPositionStrategy, NoOpScrollStrategy, PositionSettings } from '../services';\nimport { slideInBottom, slideOutTop } from '../animations/slide/index';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\n\nlet DIALOG_ID = 0;\n/**\n * **Ignite UI for Angular Dialog Window** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/dialog.html)\n *\n * The Ignite UI Dialog Window presents a dialog window to the user which can simply display messages or display\n * more complicated visuals such as a user sign-in form.  It also provides a right and left button\n * which can be used for custom actions.\n *\n * Example:\n * ```html\n * <button (click)=\"form.open()\">Show Dialog</button>\n * <igx-dialog #form title=\"Sign In\" rightButtonLabel=\"OK\">\n *   <div>\n *     <input type=\"text\" igxInput/>\n *     <label igxLabel>Username</label>\n *   </div>\n *   <div>\n *     <input type=\"password\" igxInput/>\n *     <label igxLabel>Password</label>\n *   </div>\n * </igx-dialog>\n * ```\n */\n@Component({\n    selector: 'igx-dialog',\n    templateUrl: 'dialog-content.component.html'\n})\nexport class IgxDialogComponent implements IToggleView, OnInit, OnDestroy, AfterContentInit {\n    private static NEXT_ID = 1;\n    private static readonly DIALOG_CLASS = 'igx-dialog';\n\n    @ViewChild(IgxToggleDirective)\n    public toggleRef: IgxToggleDirective;\n\n    /**\n    * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n    *```html\n    *<igx-dialog [id]=\"'igx-dialog-56'\" #alert title=\"Notification\" leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-dialog-${DIALOG_ID++}`;\n\n    @Input()\n    get isModal() {\n        return this._isModal;\n    }\n\n    set isModal(val: boolean) {\n        this._overlayDefaultSettings.modal = val;\n        this._isModal = val;\n    }\n\n    /**\n    * An @Input property controlling the `title` of the dialog.\n    *```html\n    *<igx-dialog title=\"Notification\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @Input()\n    public title = '';\n\n    /**\n     *  An @Input property controlling the `message` of the dialog.\n     *```html\n     *<igx-dialog message=\"Your email was sent!\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public message = '';\n\n    /**\n     * An @Input property to set the `label` of the left button of the dialog.\n     *```html\n     *<igx-dialog leftButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonLabel = '';\n\n    /**\n     * An @Input property to set the left button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog leftButtonType=\"raised\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonType = 'flat';\n    /**\n     * An @Input property to set the left button color. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonColor=\"yellow\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonColor = '';\n\n    /**\n     * An @Input property to set the left button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonBackgroundColor=\"black\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the left button `ripple`. The `ripple` animates a click/tap to a component as a series of fading waves.\n     * The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonRipple=\"green\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonRipple = '';\n\n    /**\n     * An @Input property to set the `label` of the right button of the dialog.\n     *```html\n     *<igx-dialog rightButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonLabel = '';\n\n    /**\n     * An @Input property to set the right button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog rightButtonType=\"fab\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonType = 'flat';\n\n    /**\n     * An @Input property to set the right button `color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonColor=\"yellow\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonColor = '';\n\n    /**\n     * An @Input property to set the right button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonBackgroundColor=\"black\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the right button `ripple`.\n     *```html\n     *<igx-dialog rightButtonRipple=\"green\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonRipple = '';\n\n    /**\n     * An @Input property that allows you to enable the \"close on click outside the dialog\". By default it's disabled.\n     *```html\n     *<igx-dialog closeOnOutsideSelect=\"true\" leftButtonLabel=\"Cancel\" (onLeftButtonSelect)=\"dialog.close()\"\n     *rightButtonLabel=\"OK\" rightButtonRipple=\"#4CAF50\" (onRightButtonSelect)=\"onDialogOKSelected($event)\">\n     *</igx-dialog>\n     *```\n     */\n    @Input()\n    get closeOnOutsideSelect() {\n        return this._closeOnOutsideSelect;\n    }\n\n    set closeOnOutsideSelect(val: boolean) {\n        this._overlayDefaultSettings.closeOnOutsideClick = val;\n        this._closeOnOutsideSelect = val;\n    }\n\n    /**\n     * An event that is emitted when the dialog is opened.\n     *```html\n     *<igx-dialog (onOpen)=\"onDialogOpenHandler($event)\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the dialog is closed.\n     *```html\n     *<igx-dialog (onClose)=\"onDialogCloseHandler($event)\" title=\"Confirmation\" leftButtonLabel=\"Cancel\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the left button is clicked.\n     *```html\n     *<igx-dialog (onLeftButtonSelect)=\"onDialogOKSelected($event)\" #dialog leftButtonLabel=\"OK\" rightButtonLabel=\"Cancel\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onLeftButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the right button is clicked.\n     * ```html\n     *<igx-dialog (onRightButtonSelect)=\"onDialogOKSelected($event)\"\n     *#dialog title=\"Confirmation\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\"\n     *rightButtonRipple=\"#4CAF50\" closeOnOutsideSelect=\"true\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onRightButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    private _animaitonSettings: PositionSettings = {\n        openAnimation: useAnimation(slideInBottom, { params: { fromPosition: 'translateY(100%)' } }),\n        closeAnimation: useAnimation(slideOutTop, { params: { toPosition: 'translateY(-100%)' } })\n    };\n\n    private _overlayDefaultSettings: OverlaySettings;\n    private _closeOnOutsideSelect = false;\n    private _isModal = true;\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * The default `tabindex` attribute for the component\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    private _titleId: string;\n\n    /**\n     * Returns the value of state. Possible state values are \"open\" or \"close\".\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogState = this.dialog.state;\n     *}\n     *```\n     */\n    get state(): string {\n        return this.isOpen ? 'open' : 'close';\n    }\n\n    /**\n     * Returns whether the dialog is visible to the end user.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogOpen = this.dialog.isOpen;\n     *}\n     * ```\n     */\n    @Input()\n    get isOpen() {\n        return !this.toggleRef.collapsed;\n    }\n\n    @HostBinding('class.igx-dialog--hidden')\n    get isCollapsed() {\n        return this.toggleRef.collapsed;\n    }\n\n    /**\n     *Returns the value of the role of the dialog. The valid values are `dialog`, `alertdialog`, `alert`.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogRole = this.dialog.role;\n     *}\n     * ```\n     */\n    @Input()\n    get role() {\n        if (this.leftButtonLabel !== '' && this.rightButtonLabel !== '') {\n            return 'dialog';\n        } else if (\n            this.leftButtonLabel !== '' ||\n            this.rightButtonLabel !== ''\n        ) {\n            return 'alertdialog';\n        } else {\n            return 'alert';\n        }\n    }\n\n    /**\n     *Returns the value of the title id.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogTitle = this.dialog.titleId;\n     *}\n     * ```\n     */\n    @Input()\n    get titleId() {\n        return this._titleId;\n    }\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService\n    ) {\n        this._titleId = IgxDialogComponent.NEXT_ID++ + '_title';\n\n        this._overlayDefaultSettings = {\n            positionStrategy: new GlobalPositionStrategy(this._animaitonSettings),\n            scrollStrategy: new NoOpScrollStrategy(),\n            modal: this.isModal,\n            closeOnOutsideClick: this.closeOnOutsideSelect\n        };\n    }\n\n    ngAfterContentInit() {\n        this.toggleRef.onClosing.pipe(takeUntil(this.destroy$)).subscribe(() => this.emitCloseFromDialog());\n    }\n\n    private emitCloseFromDialog() {\n        this.onClose.emit({ dialog: this, event: null });\n    }\n\n    /**\n     * A method that opens the dialog.\n     * @memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.open() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public open(overlaySettings: OverlaySettings = this._overlayDefaultSettings) {\n        this.toggleRef.open(overlaySettings);\n        this.onOpen.emit({ dialog: this, event: null });\n        if (!this.leftButtonLabel && !this.rightButtonLabel) {\n            this.toggleRef.element.focus();\n        }\n    }\n\n    /**\n     *A method that that closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.close() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public close() {\n        // `onClose` will emit from `toggleRef.onClosing` subscription\n        this.toggleRef.close();\n    }\n\n\n    /**\n     * A method that opens/closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.toggle() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public toggle() {\n        this.isOpen ? this.close() : this.open();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDialogSelected(event) {\n        event.stopPropagation();\n        if (\n            this.isOpen &&\n            this.closeOnOutsideSelect &&\n            event.target.classList.contains(IgxDialogComponent.DIALOG_CLASS)\n        ) {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalLeftButtonSelect(event) {\n        this.onLeftButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalRightButtonSelect(event) {\n        this.onRightButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n\n    }\n\n}\n\nexport interface IDialogEventArgs {\n    dialog: IgxDialogComponent;\n    event: Event;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    exports: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    imports: [CommonModule, IgxToggleModule, IgxButtonModule, IgxRippleModule, IgxFocusModule]\n})\nexport class IgxDialogModule { }\n","import { Injectable, EventEmitter, NgZone } from '@angular/core';\nimport { IGridEditEventArgs } from '../grids/grid-base.component';\n\n\nexport interface GridSelectionRange {\n    rowStart: number;\n    rowEnd: number;\n    columnStart: string | number;\n    columnEnd: string | number;\n}\n\nexport interface ISelectionNode {\n    row: number;\n    column: number;\n}\n\ninterface ISelectionKeyboardState {\n    node: null | ISelectionNode;\n    shift: boolean;\n    range: GridSelectionRange;\n    active: boolean;\n}\n\ninterface ISelectionPointerState extends ISelectionKeyboardState {\n    ctrl: boolean;\n}\n\ntype SelectionState = ISelectionKeyboardState | ISelectionPointerState;\n\n\n// TODO: Refactor - export in a separate file\n\nexport class IgxRow {\n    transactionState: any;\n    state: any;\n    newData: any;\n\n    constructor(public id: any, public index: number, public data: any) {}\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id,\n            oldValue: { ... this.data },\n            newValue: this.newData,\n            cancel: false\n        };\n    }\n}\n\nexport class IgxCell {\n\n    primaryKey: any;\n    state: any;\n\n    constructor(\n        public id,\n        public rowIndex: number,\n        public column,\n        public value: any,\n        public editValue: any,\n        public rowData: any) {}\n\n    castToNumber(value: any): any {\n        if (this.column.dataType === 'number' && !this.column.inlineEditorTemplate) {\n            const v = parseFloat(value);\n            return !isNaN(v) && isFinite(v) ? v : 0;\n        }\n        return value;\n    }\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id.rowID,\n            cellID: this.id,\n            oldValue: this.value,\n            newValue: this.editValue,\n            cancel: false\n        };\n    }\n}\n\n@Injectable()\nexport class IgxGridCRUDService {\n\n    grid;\n    cell: IgxCell | null = null;\n    row: IgxRow | null = null;\n\n    createCell(cell): IgxCell {\n        return new IgxCell(cell.cellID, cell.rowIndex, cell.column, cell.value, cell.value, cell.row.rowData);\n    }\n\n    createRow(cell: IgxCell): IgxRow {\n        return new IgxRow(cell.id.rowID, cell.rowIndex, cell.rowData);\n    }\n\n    sameRow(rowID): boolean {\n        return this.row.id === rowID;\n    }\n\n    sameCell(cell: IgxCell): boolean {\n        return (this.cell.id.rowID === cell.id.rowID &&\n            this.cell.id.columnID === cell.id.columnID);\n    }\n\n    get inEditMode(): boolean {\n        return !!this.cell;\n    }\n\n    get rowEditing(): boolean {\n        return this.grid.rowEditable;\n    }\n\n    get primaryKey(): any {\n        return this.grid.primaryKey;\n    }\n\n    beginRowEdit() {\n        this.row = this.createRow(this.cell);\n        const args = {\n            rowID: this.row.id,\n            oldValue: this.row.data,\n            cancel: false\n        };\n        this.grid.onRowEditEnter.emit(args);\n        if (args.cancel) {\n            this.endRowEdit();\n            return;\n        }\n        this.row.transactionState = this.grid.transactions.getAggregatedValue(this.row.id, true);\n        this.grid.transactions.startPending();\n        this.grid.openRowOverlay(this.row.id);\n    }\n\n\n    endRowEdit() {\n        this.row = null;\n    }\n\n    begin(cell): void {\n        this.cell = this.createCell(cell);\n        this.cell.primaryKey = this.primaryKey;\n        const args = {\n            cellID: this.cell.id,\n            rowID: this.cell.id.rowID,\n            oldValue: this.cell.value,\n            cancel: false\n        };\n\n        this.grid.onCellEditEnter.emit(args);\n\n        if (args.cancel) {\n            this.end();\n            return;\n        }\n\n\n        if (this.rowEditing) {\n            if (!this.row) {\n                this.beginRowEdit();\n                return;\n            }\n\n            if (this.row && !this.sameRow(this.cell.id.rowID)) {\n                this.grid.endEdit(true);\n                this.cell = this.createCell(cell);\n                this.beginRowEdit();\n                return;\n            }\n        }\n    }\n\n    end(): void {\n        this.cell = null;\n    }\n\n\n    isInEditMode(rowIndex: number, columnIndex: number): boolean {\n        if (!this.cell) {\n            return false;\n        }\n        return this.cell.column.index === columnIndex && this.cell.rowIndex === rowIndex;\n    }\n}\n\n\n@Injectable()\nexport class IgxGridSelectionService {\n\n    dragMode = false;\n    activeElement: ISelectionNode | null;\n    keyboardState = {} as ISelectionKeyboardState;\n    pointerState = {} as ISelectionPointerState;\n\n\n    selection = new Map<number, Set<number>>();\n    temp = new Map<number, Set<number>>();\n    _ranges: Set<string> = new Set<string>();\n\n\n    /**\n     * Returns the current selected ranges in the grid from both\n     * keyboard and pointer interactions\n     */\n    get ranges(): GridSelectionRange[] {\n\n        // The last action was keyboard + shift selection -> add it\n        if (this.keyboardState.range) {\n            this._ranges.add(JSON.stringify(this.keyboardState.range));\n        }\n\n        const ranges = Array.from(this._ranges).map(range => JSON.parse(range));\n\n        // No ranges but we have a focused cell -> add it\n        if (!ranges.length && this.activeElement) {\n            ranges.push(this.generateRange(this.activeElement));\n        }\n\n        return ranges;\n    }\n\n    constructor(private zone: NgZone) {\n        this.initPointerState();\n        this.initKeyboardState();\n    }\n\n    /**\n     * Resets the keyboard state\n     */\n    initKeyboardState(): void {\n        this.keyboardState.node = null;\n        this.keyboardState.shift = false;\n        this.keyboardState.range = null;\n        this.keyboardState.active = false;\n    }\n\n    /**\n     * Resets the pointer state\n     */\n    initPointerState(): void {\n        this.pointerState.node = null;\n        this.pointerState.ctrl = false;\n        this.pointerState.shift = false;\n        this.pointerState.range = null;\n    }\n\n    /**\n     * Adds a single node.\n     * Single clicks | Ctrl + single clicks on cells is the usual case.\n     */\n    add(node: ISelectionNode): void {\n        this.selection.has(node.row) ? this.selection.get(node.row).add(node.column) :\n            this.selection.set(node.row, new Set<number>()).get(node.row).add(node.column);\n\n        this._ranges.add(JSON.stringify(this.generateRange(node)));\n    }\n\n    remove(node: ISelectionNode): void {\n        if (this.selection.has(node.row)) {\n            this.selection.get(node.row).delete(node.column);\n        }\n        if (this.isActiveNode(node)) {\n            this.activeElement = null;\n        }\n        this._ranges.delete(JSON.stringify(this.generateRange(node)));\n    }\n\n    isInMap(node: ISelectionNode): boolean {\n        return (this.selection.has(node.row) && this.selection.get(node.row).has(node.column)) ||\n            (this.temp.has(node.row) && this.temp.get(node.row).has(node.column));\n    }\n\n    selected(node: ISelectionNode): boolean {\n        return this.isActiveNode(node) || this.isInMap(node);\n    }\n\n    isActiveNode(node: ISelectionNode): boolean {\n        if (this.activeElement) {\n            return this.activeElement.column === node.column && this.activeElement.row === node.row;\n        }\n        return false;\n    }\n\n    addRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.add(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    removeRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.delete(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    /**\n     * Generates a new selection range from the given `node`.\n     * If `state` is passed instead it will generate the range based on the passed `node`\n     * and the start node of the `state`.\n     */\n    generateRange(node: ISelectionNode, state?: SelectionState): GridSelectionRange {\n        if (!state) {\n            return {\n                rowStart: node.row,\n                rowEnd: node.row,\n                columnStart: node.column,\n                columnEnd: node.column\n            };\n        }\n\n        const { row, column } = state.node;\n        const rowStart = Math.min(node.row, row);\n        const rowEnd = Math.max(node.row, row);\n        const columnStart = Math.min(node.column, column);\n        const columnEnd = Math.max(node.column, column);\n\n        return { rowStart, rowEnd, columnStart, columnEnd };\n    }\n\n    /**\n     *\n     */\n    keyboardStateOnKeydown(node: ISelectionNode, shift: boolean, shiftTab: boolean) {\n        this.keyboardState.active = true;\n        this.initPointerState();\n        this.keyboardState.shift = shift && !shiftTab;\n\n        // Kb navigation with shift and no previous node.\n        // Clear the current selection init the start node.\n        if (this.keyboardState.shift && !this.keyboardState.node) {\n            this.clear();\n            this.keyboardState.node = node;\n        }\n    }\n\n    keyboardStateOnFocus(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>): void {\n        const kbState = this.keyboardState;\n\n        // Focus triggered by keyboard navigation\n        if (kbState.active) {\n            // Start generating a range if shift is hold\n            if (kbState.shift) {\n                this.dragSelect(node, kbState);\n                kbState.range = this.generateRange(node, kbState);\n                emitter.emit(this.generateRange(node, kbState));\n                return;\n            }\n\n            this.initKeyboardState();\n            this.clear();\n            this.add(node);\n        }\n    }\n\n    pointerDown(node: ISelectionNode, shift: boolean, ctrl: boolean): void {\n\n        if (this.keyboardState.range) {\n            this._ranges.add(JSON.stringify(this.keyboardState.range));\n        }\n\n        this.initKeyboardState();\n        this.pointerState.ctrl = ctrl;\n        this.pointerState.shift = shift;\n\n        // No ctrl key pressed - no multiple selection\n        if (!ctrl) {\n            this.clear();\n        }\n\n        if (shift) {\n            // No previously 'clicked' node. Use the last active node.\n            if (!this.pointerState.node) {\n                this.pointerState.node = this.activeElement;\n            }\n            this.pointerDownShiftKey(node);\n            this.clearTextSelection();\n            return;\n        }\n\n        this.removeRangeMeta(node);\n        this.pointerState.node = node;\n    }\n\n    pointerDownShiftKey(node: ISelectionNode): void {\n        this.clear();\n        this.selectRange(node, this.pointerState);\n    }\n\n    mergeMap(target: Map<number, Set<number>>, source: Map<number, Set<number>>): void {\n        const iterator = source.entries();\n        let pair = iterator.next();\n        let key: number;\n        let value: Set<number>;\n\n        while (!pair.done) {\n            [key, value] = pair.value;\n            if (target.has(key)) {\n                const newValue = target.get(key);\n                value.forEach(record => newValue.add(record));\n                target.set(key, newValue);\n            } else {\n                target.set(key, value);\n            }\n            pair = iterator.next();\n        }\n    }\n\n    pointerEnter(node: ISelectionNode, dragEnabled: boolean): boolean {\n        this.dragMode = dragEnabled;\n        if (!this.dragMode) {\n            return false;\n        }\n        this.clearTextSelection();\n\n        // If the users triggers a drag-like event by first clicking outside the grid cells\n        // and then enters in the grid body we may not have a initial pointer starting node.\n        // Assume the first pointerenter node is where we start.\n        if (!this.pointerState.node) {\n            this.pointerState.node = node;\n        }\n\n        this.pointerState.ctrl ? this.blah(node, this.pointerState) :\n            this.dragSelect(node, this.pointerState);\n        return true;\n    }\n\n    pointerUp(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>): boolean {\n        if (this.dragMode) {\n            this.addRangeMeta(node, this.pointerState);\n            this.mergeMap(this.selection, this.temp);\n            this.zone.runTask(() => emitter.emit(this.generateRange(node, this.pointerState)));\n            this.temp.clear();\n            this.dragMode = false;\n            return true;\n        }\n\n        if (this.pointerState.shift) {\n            this.clearTextSelection();\n            emitter.emit(this.generateRange(node, this.pointerState));\n            this.addRangeMeta(node, this.pointerState);\n            return true;\n        }\n\n        this.add(node);\n        return false;\n    }\n\n    selectRange(node: ISelectionNode, state: SelectionState) {\n        const { rowStart, rowEnd, columnStart, columnEnd } = this.generateRange(node, state);\n        for (let i = rowStart; i <= rowEnd; i++) {\n            for (let j = columnStart as number; j <= columnEnd; j++) {\n                this.selection.has(i) ? this.selection.get(i).add(j) :\n                    this.selection.set(i, new Set<number>()).get(i).add(j);\n            }\n        }\n    }\n\n    blah(node: ISelectionNode, state: SelectionState) {\n        this.temp.clear();\n        const { rowStart, rowEnd, columnStart, columnEnd } = this.generateRange(node, state);\n        for (let i = rowStart; i <= rowEnd; i++) {\n            for (let j = columnStart as number; j <= columnEnd; j++) {\n                this.temp.has(i) ? this.temp.get(i).add(j) :\n                    this.temp.set(i, new Set<number>()).get(i).add(j);\n            }\n        }\n    }\n\n    dragSelect(node: ISelectionNode, state: SelectionState): void {\n        if (!this.pointerState.ctrl) {\n            this.selection.clear();\n        }\n        this.selectRange(node, state);\n    }\n\n    clear(): void {\n        this.selection.clear();\n        this.temp.clear();\n        this._ranges.clear();\n    }\n\n    clearTextSelection() {\n        const selection = window.getSelection();\n        if (selection) {\n            selection.removeAllRanges();\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    OnInit,\n    OnDestroy,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { getNodeSizeViaRange, ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS, NAVIGATION_KEYS, isIE } from '../core/utils';\nimport { State } from '../services/index';\nimport { IgxGridBaseComponent, IGridEditEventArgs, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, ISelectionNode, IgxGridCRUDService } from '../core/grid-selection';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\n/**\n * Providing reference to `IgxGridCellComponent`:\n * ```typescript\n * @ViewChild('grid', { read: IgxGridComponent })\n *  public grid: IgxGridComponent;\n * ```\n * ```typescript\n *  let column = this.grid.columnList.first;\n * ```\n * ```typescript\n *  let cell = column.cells[0];\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-grid-cell',\n    templateUrl: './cell.component.html'\n})\nexport class IgxGridCellComponent implements OnInit, OnChanges, OnDestroy {\n\n    /**\n     * Gets the column of the cell.\n     * ```typescript\n     *  let cellColumn = this.cell.column;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the row of the cell.\n     * ```typescript\n     * let cellRow = this.cell.row;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public row: any;\n\n    /**\n     * Gets the data of the row of the cell.\n     * ```typescript\n     * let rowData = this.cell.rowData;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public rowData: any;\n\n    /**\n     * Sets/gets the template of the cell.\n     * ```html\n     * <ng-template #cellTemplate igxCell let-value>\n     *   <div style=\"font-style: oblique; color:blueviolet; background:red\">\n     *       <span>{{value}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild('cellTemplate',{read: TemplateRef})\n     * cellTemplate: TemplateRef<any>;\n     * ```\n     * ```typescript\n     * this.cell.cellTemplate = this.cellTemplate;\n     * ```\n     * ```typescript\n     * let template =  this.cell.cellTemplate;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public cellTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the cell value.\n     * ```typescript\n     * this.cell.value = \"Cell Value\";\n     * ```\n     * ```typescript\n     * let cellValue = this.cell.value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * Sets/gets the highlight class of the cell.\n     * Default value is `\"igx-highlight\"`.\n     * ```typescript\n     * let highlightClass = this.cell.highlightClass;\n     * ```\n     * ```typescript\n     * this.cell.highlightClass = 'igx-cell-highlight';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightClass = 'igx-highlight';\n\n    /**\n     * Sets/gets the active highlight class class of the cell.\n     * Default value is `\"igx-highlight__active\"`.\n     * ```typescript\n     * let activeHighlightClass = this.cell.activeHighlightClass;\n     * ```\n     * ```typescript\n     * this.cell.activeHighlightClass = 'igx-cell-highlight_active';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public activeHighlightClass = 'igx-highlight__active';\n\n    /**\n     * Gets the cell formatter.\n     * ```typescript\n     * let cellForamatter = this.cell.formatter;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    formatter: (value: any) => any;\n\n    /**\n     * Gets the cell template context object.\n     * ```typescript\n     *  let context = this.cell.context();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get context(): any {\n        return {\n            $implicit: this.value,\n            cell: this\n        };\n    }\n\n    /**\n     * Gets the cell template.\n     * ```typescript\n     * let template = this.cell.template;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.editMode) {\n            const inlineEditorTemplate = this.column.inlineEditorTemplate;\n            return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;\n        }\n        if (this.cellTemplate) {\n            return this.cellTemplate;\n        }\n        return this.defaultCellTemplate;\n    }\n\n    /**\n     * Gets the `id` of the grid in which the cell is stored.\n     * ```typescript\n     * let gridId = this.cell.gridID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get gridID(): any {\n        return this.row.gridID;\n    }\n\n    /**\n     * Gets the grid of the cell.\n     * ```typescript\n     * let grid = this.cell.grid;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the `index` of the row where the cell is stored.\n     * ```typescript\n     * let rowIndex = this.cell.rowIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-rowIndex')\n    get rowIndex(): number {\n        return this.row.index;\n    }\n\n    /**\n     * Gets the `index` of the cell column.\n     * ```typescript\n     * let columnIndex = this.cell.columnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get columnIndex(): number {\n        return this.column.index;\n    }\n\n    /**\n     * Gets the visible `index` of the in which the cell is stored.\n     * ```typescript\n     * let visibleColumnIndex = this.cell.visibleColumnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-visibleIndex')\n    @Input()\n    visibleColumnIndex = -1;\n\n    /**\n     * Gets the ID of the cell.\n     * ```typescript\n     * let cellID = this.cell.cellID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get cellID() {\n        const primaryKey = this.grid.primaryKey;\n        const rowID = primaryKey ? this.rowData[primaryKey] : this.rowData;\n        return { rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };\n    }\n\n    /**\n     * Returns a reference to the nativeElement of the cell.\n     * ```typescript\n     * let cellNativeElement = this.cell.nativeElement;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get nativeElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @deprecated\n     * Use `cell.editMode` as a getter and\n     * `cell.setEditMode(true | false)` to start/exit edit mode.\n     *\n     * Gets/sets whether the cell is in edit mode.\n     * ```typescript\n     * let isCellInEditMode = this.cell.inEditMode;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @DeprecateProperty(`'inEditMode' is deprecated\\nUse 'editMode' to get the current state and 'setEditMode(boolean)' as a setter`)\n    get inEditMode(): boolean {\n        return this.editMode;\n    }\n\n    set inEditMode(value: boolean) {\n        this.setEditMode(value);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--pinned-last')\n    lastPinned = false;\n\n    /**\n     * Returns whether the cell is in edit mode.\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--editing')\n    editMode = false;\n\n    /**\n     * Sets/get the `tabindex` property of the cell.\n     * Default value is `0`.\n     * ```typescript\n     * this.cell.tabindex = 1;\n     * ```\n     * ```typescript\n     * let cellTabIndex = this.cell.tabindex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Sets/get the `role` property of the cell.\n     * Default value is `\"gridcell\"`.\n     * ```typescript\n     * this.cell.role = 'grid-cell';\n     * ```\n     * ```typescript\n     * let cellRole = this.cell.role;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'gridcell';\n\n    /**\n     * Gets whether the cell is editable.\n     * ```typescript\n     * let isCellReadonly = this.cell.readonly;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-readonly')\n    get readonly(): boolean {\n        return !this.column.editable;\n    }\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n    /**\n     * Returns a string containing the grid `id` and the column `field` concatenated by \"_\".\n     * ```typescript\n     * let describedBy = this.cell.describedBy;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedby(): string {\n        return `${this.row.gridID}_${this.column.field}`;\n    }\n\n    /**\n     * Gets the width of the cell.\n     * ```typescript\n     * let cellWidth = this.cell.width;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    @Input()\n    width = '';\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isSelected = this.cell.selected;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-grid__td--selected')\n    get selected() {\n        return this.isCellSelected();\n    }\n\n    /**\n     * Selects/deselects the cell.\n     * ```typescript\n     * this.cell.selected = true.\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    set selected(val: boolean) {\n        const node = this.selectionNode;\n        val ? this.selectionService.add(node) : this.selectionService.remove(node);\n    }\n\n    @HostBinding('class.igx-grid__td--edited')\n    get dirty() {\n        if (this.grid.rowEditable) {\n            const rowCurrentState = this.grid.transactions.getAggregatedValue(this.row.rowID, false);\n            if (rowCurrentState) {\n                return rowCurrentState[this.column.field] !== undefined && rowCurrentState[this.column.field] !== null;\n            }\n        } else {\n            const rowTransaction: State = this.grid.transactions.getState(this.row.rowID);\n            return rowTransaction && rowTransaction.value && rowTransaction.value[this.column.field];\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * this.cell.editValue = value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public set editValue(value) {\n        if (this.crudService.inEditMode) {\n            this.crudService.cell.editValue = value;\n        }\n    }\n\n    /**\n     * Gets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * let editValue = this.cell.editValue;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get editValue() {\n        if (this.crudService.inEditMode) {\n            return this.crudService.cell.editValue;\n        }\n    }\n\n    /**\n     * Returns whether the cell is editable.\n     */\n    get editable(): boolean {\n        return this.column.editable;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-grid__td--active')\n    public focused = false;\n\n    @ViewChild('defaultCell', { read: TemplateRef })\n    protected defaultCellTemplate: TemplateRef<any>;\n\n    @ViewChild('inlineEditor', { read: TemplateRef })\n    protected inlineEditorTemplate: TemplateRef<any>;\n\n    @ViewChild(IgxTextHighlightDirective, { read: IgxTextHighlightDirective })\n    protected set highlight(value: IgxTextHighlightDirective) {\n        this._highlight = value;\n\n        if (this._highlight && this.grid.lastSearchInfo.searchText) {\n            this._highlight.highlight(this.grid.lastSearchInfo.searchText,\n                this.grid.lastSearchInfo.caseSensitive,\n                this.grid.lastSearchInfo.exactMatch);\n            this._highlight.activateIfNecessary();\n        }\n    }\n\n    protected get highlight() {\n        return this._highlight;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return { row: this.rowIndex, column: this.visibleColumnIndex };\n    }\n\n    protected isInCompositionMode = false;\n    protected compositionStartHandler;\n    protected compositionEndHandler;\n    protected focusHandlerIE;\n    protected focusOut;\n    private _highlight: IgxTextHighlightDirective;\n\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public selection: IgxSelectionAPIService,\n        public cdr: ChangeDetectorRef,\n        private element: ElementRef,\n        protected zone: NgZone) { }\n\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerdown', this.pointerdown);\n            this.nativeElement.addEventListener('pointerenter', this.pointerenter);\n            this.nativeElement.addEventListener('pointerup', this.pointerup);\n\n            // IE 11 workarounds\n            if (isIE()) {\n                this.compositionStartHandler = () => this.isInCompositionMode = true;\n                this.compositionEndHandler = () => this.isInCompositionMode = false;\n                // Hitting Enter with IME submits and exits from edit mode instead of first closing the IME dialog\n                this.nativeElement.addEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.addEventListener('compositionend', this.compositionEndHandler);\n\n                // https://stackoverflow.com/q/51404782\n                this.focusHandlerIE = (e: FocusEvent) => this.onFocus(e);\n                this.focusOut = () => this.onBlur();\n                this.nativeElement.addEventListener('focusin', this.focusHandlerIE);\n                this.nativeElement.addEventListener('focusout', this.focusOut);\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerdown', this.pointerdown);\n            this.nativeElement.removeEventListener('pointerenter', this.pointerenter);\n            this.nativeElement.removeEventListener('pointerup', this.pointerup);\n\n            if (isIE()) {\n                this.nativeElement.removeEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.removeEventListener('compositionend', this.compositionEndHandler);\n                this.nativeElement.removeEventListener('focusin', this.focusHandlerIE);\n                this.nativeElement.removeEventListener('focusout', this.focusOut);\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    _updateCRUDStatus() {\n        if (this.editable && this.crudService.inEditMode && !this.row.deleted) {\n            this.gridAPI.update_cell(this.crudService.cell, this.crudService.cell.editValue);\n            this.crudService.end();\n            this.grid.cdr.markForCheck();\n            this.crudService.begin(this);\n        } else if (this.crudService.inEditMode) {\n            this.grid.endEdit(true);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public _updateCellSelectionStatus() {\n        if (this.editMode) {\n            return;\n        }\n\n        const node = this.selectionNode;\n\n        this._updateCRUDStatus();\n        this.selectionService.keyboardStateOnFocus(node, this.grid.onRangeSelection);\n    }\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isCellSelected = thid.cell.isCellSelected();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public isCellSelected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.value && !changes.value.firstChange) {\n            if (this.highlight) {\n                this.highlight.lastSearchInfo.searchedText = this.grid.lastSearchInfo.searchText;\n                this.highlight.lastSearchInfo.caseSensitive = this.grid.lastSearchInfo.caseSensitive;\n                this.highlight.lastSearchInfo.exactMatch = this.grid.lastSearchInfo.exactMatch;\n            }\n        }\n    }\n\n    /**\n     * Starts/ends edit mode for the cell.\n     *\n     * ```typescript\n     * cell.setEditMode(true);\n     * ```\n     */\n    setEditMode(value: boolean): void {\n        if (this.row.deleted) {\n            return;\n        }\n        if (this.editable && value) {\n            this.gridAPI.submit_value();\n            this.crudService.begin(this);\n        } else {\n            this.gridAPI.escape_editMode();\n        }\n        this.grid.cdr.markForCheck();\n    }\n\n    /**\n     * Sets new value to the cell.\n     * ```typescript\n     * this.cell.update('New Value');\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    // TODO: Refactor\n    public update(val: any) {\n        if (this.row.deleted) {\n            return;\n        }\n        const cell = this.crudService.createCell(this);\n        const args = this.gridAPI.update_cell(cell, val);\n        if (this.crudService.cell && this.crudService.sameCell(cell)) {\n            if (args.cancel) {\n                return;\n            }\n            this.gridAPI.escape_editMode();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerdown = (event: PointerEvent) => {\n        this.selectionService.pointerDown(this.selectionNode,\n            event.shiftKey, event.ctrlKey);\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerenter = (event: PointerEvent) => {\n        const dragMode = this.selectionService.pointerEnter(this.selectionNode, event.buttons === 1);\n        if (dragMode) {\n            this.grid.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    pointerup = () => {\n        if (this.selectionService.pointerUp(this.selectionNode, this.grid.onRangeSelection)) {\n            this.grid.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('dblclick', ['$event'])\n    public onDoubleClick(event: MouseEvent) {\n        if (this.editable && !this.editMode && !this.row.deleted) {\n            this.crudService.begin(this);\n        }\n\n        this.grid.onDoubleClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        this.grid.onCellClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('contextmenu', ['$event'])\n    public onContextMenu(event: MouseEvent) {\n        this.grid.onContextMenu.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event: FocusEvent) {\n        this.focused = true;\n        this.row.focused = true;\n        this._updateCellSelectionStatus();\n        if (!this.selectionService.isActiveNode(this.selectionNode)) {\n            this.grid.onSelection.emit({ cell: this, event });\n        }\n        this.selectionService.activeElement = this.selectionNode;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n        this.row.focused = false;\n    }\n\n    protected handleAlt(key: string, event: KeyboardEvent) {\n        if (this.row.nativeElement.tagName.toLowerCase() === 'igx-tree-grid-row' && this.isToggleKey(key)) {\n            const collapse = (this.row as any).expanded && ROW_COLLAPSE_KEYS.has(key);\n            const expand = !(this.row as any).expanded && ROW_EXPAND_KEYS.has(key);\n            if (collapse) {\n                (this.gridAPI as any).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n            } else if (expand) {\n                (this.gridAPI as any).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n            }\n        }\n    }\n\n    protected handleTab(shift: boolean) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.row.nativeElement, this.rowIndex, this.visibleColumnIndex);\n        } else {\n            this.grid.navigation.performTab(this.row.nativeElement, this.rowIndex, this.visibleColumnIndex);\n        }\n    }\n\n    protected handleEnd(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToLastCell();\n        } else {\n            this.grid.navigation.onKeydownEnd(this.rowIndex);\n        }\n    }\n\n    protected handleHome(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToFirstCell();\n        } else {\n            this.grid.navigation.onKeydownHome(this.rowIndex);\n        }\n    }\n\n    // TODO: Refactor\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        const shift = event.shiftKey;\n        const ctrl = event.ctrlKey;\n        const node = this.selectionNode;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n\n        const keydownArgs = { targetType: 'dataCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            this.selectionService.keyboardStateOnKeydown(node, shift, shift && key === 'tab');\n            return;\n        }\n\n        if (event.altKey) {\n            event.preventDefault();\n            this.handleAlt(key, event);\n            return;\n        }\n\n        this.selectionService.keyboardStateOnKeydown(node, shift, shift && key === 'tab');\n\n\n        if (key === 'tab') {\n            event.preventDefault();\n        }\n\n        if (this.editMode) {\n            if (NAVIGATION_KEYS.has(key)) {\n                if (this.column.inlineEditorTemplate) { return; }\n                if (['date', 'boolean'].indexOf(this.column.dataType) > -1) { return; }\n                return;\n            }\n        }\n\n        if (NAVIGATION_KEYS.has(key)) {\n            event.preventDefault();\n        }\n\n        // TODO: to be deleted when onFocusChange event is removed #4054\n        const args = { cell: this, groupRow: null, event: event, cancel: false };\n        this.grid.onFocusChange.emit(args);\n        if (args.cancel) {\n            return;\n        }\n\n        switch (key) {\n            case 'tab':\n                this.handleTab(shift);\n                break;\n            case 'end':\n                this.handleEnd(ctrl);\n                break;\n            case 'home':\n                this.handleHome(ctrl);\n                break;\n            case 'arrowleft':\n            case 'left':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownHome(node.row);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, node.row, node.column);\n                break;\n            case 'arrowright':\n            case 'right':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownEnd(node.row);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, node.row, node.column);\n                break;\n            case 'arrowup':\n            case 'up':\n                if (ctrl) {\n                    this.grid.navigation.navigateTop(node.column);\n                    break;\n                }\n                this.grid.navigation.navigateUp(this.row.nativeElement, node.row, node.column);\n                break;\n            case 'arrowdown':\n            case 'down':\n                if (ctrl) {\n                    this.grid.navigation.navigateBottom(node.column);\n                    break;\n                }\n                this.grid.navigation.navigateDown(this.row.nativeElement, node.row, node.column);\n                break;\n            case 'enter':\n            case 'f2':\n                this.onKeydownEnterEditMode();\n                break;\n            case 'escape':\n            case 'esc':\n                this.onKeydownExitEditMode();\n                break;\n            case ' ':\n            case 'spacebar':\n            case 'space':\n                if (this.row.rowSelectable) {\n                    this.row.checkboxElement.toggle();\n                }\n                break;\n            default:\n                return;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownEnterEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n        if (this.column.editable && !this.row.deleted) {\n            if (this.editMode) {\n                this.grid.endEdit(true);\n                this.nativeElement.focus();\n            } else {\n                this.crudService.begin(this);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownExitEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n\n        if (this.editMode) {\n            const v = this.crudService.cell;\n            const args = {\n                cellID: v.id,\n                rowID: v.id.rowID,\n                oldValue: v.value,\n                newValue: v.editValue,\n                cancel: false\n            } as IGridEditEventArgs;\n            this.grid.onCellEditCancel.emit(args);\n            if (args.cancel) {\n                return;\n            }\n            this.grid.endEdit(false);\n            this.nativeElement.focus();\n        }\n    }\n\n    /**\n     * If the provided string matches the text in the cell, the text gets highlighted.\n     * ```typescript\n     * this.cell.highlightText('Cell Value', true);\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightText(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.highlight && this.column.searchable ? this.highlight.highlight(text, caseSensitive, exactMatch) : 0;\n    }\n\n    /**\n     * Clears the highlight of the text in the cell.\n     * ```typescript\n     * this.cell.clearHighLight();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public clearHighlight() {\n        if (this.highlight && this.column.searchable) {\n            this.highlight.clearHighlight();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public calculateSizeToFit(range: any): number {\n        return Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n    }\n\n    private isToggleKey(key: string): boolean {\n        return ROW_COLLAPSE_KEYS.has(key) || ROW_EXPAND_KEYS.has(key);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    Input,\n    QueryList,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxCheckboxComponent } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { TransactionType, State } from '../services';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, IgxGridCRUDService, IgxRow } from '../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-row',\n    templateUrl: './grid/grid-row.component.html'\n})\nexport class IgxRowComponent<T extends IgxGridBaseComponent & IGridDataBindable> implements DoCheck {\n\n    private _rowData: any;\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public get rowData(): any {\n        if (this.inEditMode) {\n            return Object.assign({}, this._rowData, this.grid.transactions.getAggregatedValue(this.rowID, false));\n        }\n        return this._rowData;\n    }\n\n    public set rowData(v: any) {\n        this._rowData = v;\n    }\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(forwardRef(() => IgxCheckboxComponent), { read: IgxCheckboxComponent })\n    public checkboxElement: IgxCheckboxComponent;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxGridCellComponent))\n    public cells: QueryList<IgxGridCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return this.resolveClasses();\n    }\n\n    /**\n     * @hidden\n     */\n    get columns(): IgxColumnComponent[] {\n        return this.grid.visibleColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowSelectable(): boolean {\n        return this.grid.rowSelectable;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showRowCheckboxes(): boolean {\n        return this.grid.showRowCheckboxes;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-selected')\n    public isSelected: boolean;\n\n    /** @hidden */\n    public get dirty(): boolean {\n        const row: State = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD || row.type === TransactionType.UPDATE;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowDraggable(): boolean {\n        return this.grid.rowDraggable;\n    }\n\n    /** @hidden */\n    public get added(): boolean {\n        const row: State = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD;\n        }\n\n         return false;\n    }\n\n    /** @hidden */\n    public get deleted(): boolean {\n        return this.gridAPI.row_deleted_transaction(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    public dragging = false;\n\n    // TODO: Refactor\n    public get inEditMode(): boolean {\n        if (this.grid.rowEditable) {\n            const editRowState = this.crudService.row;\n            return (editRowState && editRowState.id === this.rowID) || false;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    get grid(): T {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the ID of the row.\n     * A row in the grid is identified either by:\n     * - primaryKey data value,\n     * - the whole rowData, if the primaryKey is omitted.\n     *\n     * ```typescript\n     * let rowID = this.grid.selectedRows[2].rowID;\n     * ```\n     */\n    public get rowID() {\n        const primaryKey = this.grid.primaryKey;\n        return primaryKey ? this._rowData[primaryKey] : this._rowData;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public focused = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public defaultCssClass = 'igx-grid__tr';\n\n    /**\n     * @hidden\n     */\n    protected _rowSelection = false;\n\n    constructor(public gridAPI: GridBaseAPIService<T>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        private selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n\n    /**\n     * @hidden\n     */\n    public onCheckboxClick(event) {\n        const newSelection = (event.checked) ?\n            this.selection.add_item(this.gridID, this.rowID) :\n            this.selection.delete_item(this.gridID, this.rowID);\n        this.grid.triggerRowSelectionChange(newSelection, this, event);\n    }\n\n    /**\n     * Updates the specified row object and the data source record with the passed value.\n     * This method emits `onEditDone` event.\n     *\n     * ```typescript\n     * // update the second selected row's value\n     * let newValue = \"Apple\";\n     * this.grid.selectedRows[1].update(newValue);\n     * ```\n     */\n    public update(value: any) {\n        const crudService = this.crudService;\n        if (crudService.inEditMode && crudService.cell.id.rowID === this.rowID) {\n            this.grid.endEdit(false);\n        }\n        const row = new IgxRow(this.rowID, this.index, this.rowData);\n        this.gridAPI.update_row(row, value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Removes the specified row from the grid's data source.\n     * This method emits `onRowDeleted` event.\n     *\n     * ```typescript\n     * // delete the third selected row from the grid\n     * this.grid.selectedRows[2].delete();\n     * ```\n     */\n    public delete() {\n        this.grid.deleteRowById(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    get rowCheckboxAriaLabel() {\n        return this.grid.primaryKey ?\n            this.isSelected ? 'Deselect row with key ' + this.rowID : 'Select row with key ' + this.rowID :\n            this.isSelected ? 'Deselect row' : 'Select row';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isSelected = this.rowSelectable ?\n            this.grid.allRowsSelected ? true : this.selection.is_item_selected(this.gridID, this.rowID) :\n            this.selection.is_item_selected(this.gridID, this.rowID);\n        this.cdr.markForCheck();\n        if (this.checkboxElement) {\n            this.checkboxElement.checked = this.isSelected;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const indexClass = this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS;\n        const selectedClass = this.isSelected ? 'igx-grid__tr--selected' : '';\n        const editClass = this.inEditMode ? 'igx-grid__tr--edit' : '';\n        const dirtyClass = this.dirty ? 'igx-grid__tr--edited' : '';\n        const deletedClass = this.deleted ? 'igx-grid__tr--deleted' : '';\n        const mrlClass = this.grid.hasColumnLayouts ? 'igx-grid__tr--mrl' : '';\n        const dragClass = this.dragging ? 'igx-grid__tr--drag' : '';\n        return `${this.defaultCssClass} ${indexClass} ${selectedClass} ${editClass} ${dirtyClass}\n         ${deletedClass} ${mrlClass} ${dragClass}`.trim();\n    }\n\n    /**\n     * @hidden\n     */\n    public get resolveDragIndicatorClasses(): string {\n        const defaultDragIndicatorCssClass = 'igx-grid__drag-indicator';\n        const dragIndicatorOff = this.grid.rowDragging && !this.dragging ? 'igx-grid__drag-indicator--off' : '';\n        return `${defaultDragIndicatorCssClass} ${dragIndicatorOff}`;\n    }\n}\n","export interface ISummaryExpression {\n    fieldName: string;\n    customSummary?: any;\n}\nexport interface IgxSummaryResult {\n    key: string;\n    label: string;\n    summaryResult: any;\n}\n\nexport interface ISummaryRecord {\n    summaries: Map<string, IgxSummaryResult[]>;\n    max?: number;\n    cellIndentation?: number;\n}\n\nconst clear = (el) => el === 0 || Boolean(el);\nconst first = (arr) => arr[0];\nconst last = (arr) => arr[arr.length - 1];\n\nexport class IgxSummaryOperand {\n    /**\n     * Counts all the records in the data source.\n     * If filtering is applied, counts only the filtered records.\n     * ```typescript\n     * IgxSummaryOperand.count(dataSource);\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public static count(data: any[]): number {\n        return data.length;\n    }\n    /**\n     * Executes the static `count` method and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomSummary extends IgxSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"test\",\n     *       label: \"Test\",\n     *       summaryResult: IgxSummaryOperand.count(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomSummary;\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        return [{\n            key: 'count',\n            label: 'Count',\n            summaryResult: IgxSummaryOperand.count(data)\n        }];\n    }\n}\n\n// @dynamic\nexport class IgxNumberSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the minimum numeric value in the provided data records.\n     * If filtering is applied, returns the minimum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.min(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static min(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.min(a, b)) : 0;\n    }\n    /**\n     * Returns the maximum numeric value in the provided data records.\n     * If filtering is applied, returns the maximum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.max(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static max(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.max(a, b)) : 0;\n    }\n    /**\n     * Returns the sum of the numeric values in the provided data records.\n     * If filtering is applied, returns the sum of the numeric values in the data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.sum(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static sum(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => +a + +b) : 0;\n    }\n    /**\n     * Returns the average numeric value in the data provided data records.\n     * If filtering is applied, returns the average numeric value in the filtered data records.\n     * ```typescript\n     * IgxSummaryOperand.average(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static average(data: any[]): number {\n        return data.length && data.filter(clear).length ? this.sum(data) / this.count(data) : 0;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomNumberSummary extends IgxNumberSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"avg\",\n     *       label: \"Avg\",\n     *       summaryResult: IgxNumberSummaryOperand.average(data)\n     *     });\n     *     result.push({\n     *       key: \"max\",\n     *       label: \"Max\",\n     *       summaryResult: IgxNumberSummaryOperand.max(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomNumberSummary;\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        const result = super.operate(data);\n        result.push({\n            key: 'min',\n            label: 'Min',\n            summaryResult: IgxNumberSummaryOperand.min(data)\n        });\n        result.push({\n            key: 'max',\n            label: 'Max',\n            summaryResult: IgxNumberSummaryOperand.max(data)\n        });\n        result.push({\n            key: 'sum',\n            label: 'Sum',\n            summaryResult: IgxNumberSummaryOperand.sum(data)\n        });\n        result.push({\n            key: 'average',\n            label: 'Avg',\n            summaryResult: IgxNumberSummaryOperand.average(data)\n        });\n        return result;\n    }\n}\n\n// @dynamic\nexport class IgxDateSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the latest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.latest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static latest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            first(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Returns the earliest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.earliest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static earliest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            last(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomDateSummary extends IgxDateSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"latest\",\n     *       label: \"Latest Date\",\n     *       summaryResult: IgxDateSummaryOperand.latest(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomDateSummary;\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        const result = super.operate(data);\n        result.push({\n            key: 'earliest',\n            label: 'Earliest',\n            summaryResult: IgxDateSummaryOperand.earliest(data)\n        });\n        result.push({\n            key: 'latest',\n            label: 'Latest',\n            summaryResult: IgxDateSummaryOperand.latest(data)\n        });\n        return result;\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\n\n/** @hidden */\n@Injectable()\nexport class IgxColumnResizingService {\n\n    private pinnedMaxWidth: string;\n\n    /**\n     *@hidden\n     */\n    public startResizePos: number;\n    /**\n     * Indicates that a column is currently being resized.\n     */\n    public isColumnResizing: boolean;\n    /**\n     *@hidden\n     */\n    public resizeCursor: string = null;\n    /**\n     *@hidden\n     */\n    public showResizer = false;\n    /**\n     * The column being resized.\n     */\n    public column: IgxColumnComponent;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     *@hidden\n     */\n    get resizerHeight(): number {\n        let height = this.column.grid.getVisibleContentHeight();\n\n        // Column height multiplier in case there are Column Layouts. The resizer height need to take into account rowStart.\n        let columnHeightMultiplier = 1;\n        if (this.column.parent && this.column.parent.columnLayout) {\n            columnHeightMultiplier = this.column.grid.multiRowLayoutRowSize - this.column.rowStart + 1;\n        }\n\n        if (this.column.level !== 0) {\n            height -= this.column.topLevelParent.headerGroup.height - this.column.headerGroup.height * columnHeightMultiplier;\n        }\n\n        return height;\n    }\n\n    /**\n     * Returns the minimal possible width to which the column can be resized.\n     */\n    get restrictResizeMin(): number {\n        const columnLayoutMultiplier = this.column.grid.hasColumnLayouts ? this.column.gridColumnSpan : 1;\n        const actualMinWidth = parseFloat(this.column.minWidth);\n        const defaultMinWidth = parseFloat(this.column.defaultMinWidth) * columnLayoutMultiplier;\n\n        let minWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;\n        minWidth = minWidth < parseFloat(this.column.width) ? minWidth : parseFloat(this.column.width);\n\n        return this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width - minWidth;\n    }\n\n    /**\n     * Returns the maximal possible width to which the column can be resized.\n     */\n    get restrictResizeMax(): number {\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        if (this.column.pinned) {\n            const pinnedMaxWidth = this.pinnedMaxWidth =\n                this.column.grid.calcPinnedContainerMaxWidth - this.column.grid.getPinnedWidth(true) + actualWidth;\n\n            if (this.column.maxWidth && parseFloat(this.column.maxWidth) < pinnedMaxWidth) {\n                this.pinnedMaxWidth = this.column.maxWidth;\n\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return pinnedMaxWidth - actualWidth;\n            }\n        } else {\n            if (this.column.maxWidth) {\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return Number.MAX_SAFE_INTEGER;\n            }\n        }\n    }\n\n    /**\n     * Autosizes the column to the longest currently visible cell value, including the header cell.\n     * If the column has a predifined maxWidth and the autosized column width will become bigger than it,\n     * then the column is sized to its maxWidth.\n     * If the column is pinned and the autosized column width will cause the pinned area to become bigger\n     * than the maximum allowed pinned area width (80% of the total grid width), autosizing will be deismissed.\n     */\n    public autosizeColumnOnDblClick() {\n        const currentColWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        const size = this.column.getLargestCellWidth();\n\n        if (this.column.pinned) {\n            const newPinnedWidth = this.column.grid.getPinnedWidth(true) - currentColWidth + parseFloat(size);\n\n            if (newPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                this.column.width = size;\n            }\n        } else if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {\n            this.column.width = parseFloat(this.column.maxWidth) + 'px';\n        } else if (parseFloat(size) < parseFloat(this.column.defaultMinWidth)) {\n            this.column.width = this.column.defaultMinWidth + 'px';\n        } else {\n            this.column.width = size;\n        }\n\n        this.zone.run(() => {});\n\n        this.column.grid.reflow();\n        this.column.grid.onColumnResized.emit({\n            column: this.column,\n            prevWidth: currentColWidth.toString(),\n            newWidth: this.column.width\n        });\n    }\n\n    /**\n     * Resizes the column regaridng to the column minWidth and maxWidth.\n     */\n    public resizeColumn(event: MouseEvent) {\n        this.showResizer = false;\n        const diff = event.clientX - this.startResizePos;\n\n        let currentColWidth = parseFloat(this.column.width);\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const colMinWidth = this.getColMinWidth(this.column);\n        const colMaxWidth = this.getColMaxWidth(this.column);\n        if (this.column.grid.hasColumnLayouts) {\n            this.resizeColumnLayoutFor(this.column, diff);\n        } else {\n            if (currentColWidth + diff < colMinWidth) {\n                this.column.width = colMinWidth + 'px';\n            } else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {\n                this.column.width = colMaxWidth + 'px';\n            } else {\n                this.column.width = (currentColWidth + diff) + 'px';\n            }\n        }\n\n        this.zone.run(() => {});\n        this.column.grid.reflow();\n\n        if (currentColWidth !== parseFloat(this.column.width)) {\n            this.column.grid.onColumnResized.emit({\n                column: this.column,\n                prevWidth: currentColWidth.toString(),\n                newWidth: this.column.width\n            });\n        }\n\n        this.isColumnResizing = false;\n    }\n\n    protected getColMinWidth(column: IgxColumnComponent) {\n        let currentColWidth = parseFloat(column.width);\n        const actualWidth = column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const columnLayoutMultiplier = column.grid.hasColumnLayouts ? column.gridColumnSpan : 1;\n        const actualMinWidth = parseFloat(column.minWidth);\n        const defaultMinWidth = parseFloat(column.defaultMinWidth) * columnLayoutMultiplier;\n        const colMinWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;\n        return colMinWidth < currentColWidth ? colMinWidth : currentColWidth;\n    }\n\n    protected getColMaxWidth(column: IgxColumnComponent) {\n        return column.pinned ? parseFloat(this.pinnedMaxWidth) : parseFloat(column.maxWidth);\n    }\n\n    protected resizeColumnLayoutFor(column: IgxColumnComponent, diff: number) {\n        const relativeColumns = column.getResizableColUnderEnd();\n        const combinedSpan = relativeColumns.reduce((acc, col) =>  acc + col.spanUsed, 0);\n\n        if (column.pinned) {\n            const pinnedWidth = this.column.grid.getPinnedWidth(true);\n            const maxPinnedWidth = this.column.grid.calcPinnedContainerMaxWidth;\n\n            if (pinnedWidth + diff > maxPinnedWidth) {\n                diff = maxPinnedWidth - pinnedWidth;\n            }\n        }\n\n        // Resize first those who might reach min/max width\n        let columnsToResize = [...relativeColumns];\n        let updatedDiff = diff;\n        let updatedCombinedSpan = combinedSpan;\n        let setMinMaxCols = false;\n        do {\n            // Cycle them until there are not ones that reach min/max size, because the diff accumulates after each cycle.\n            // This is because we can have at first 2 cols reaching min width and then after\n            // recalculating the diff there might be 1 more that reaches min width.\n            setMinMaxCols = false;\n            let newCombinedSpan = updatedCombinedSpan;\n            const newColsToResize = [];\n            columnsToResize.forEach((col) => {\n                const currentResizeWidth = parseFloat(col.target.calcWidth);\n                const resizeScaled = (diff / updatedCombinedSpan) * col.target.gridColumnSpan;\n\n                const minWidth = this.getColMinWidth(col.target);\n                const maxWidth = this.getColMaxWidth(col.target);\n                if (currentResizeWidth + resizeScaled < minWidth) {\n                    col.target.width = minWidth + 'px';\n                    updatedDiff += (currentResizeWidth - minWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else if (maxWidth && (currentResizeWidth + resizeScaled > maxWidth)) {\n                    col.target.width = maxWidth + 'px';\n                    updatedDiff -= (maxWidth - currentResizeWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else {\n                    // Save new ones that can be resized\n                    newColsToResize.push(col);\n                }\n            });\n\n            updatedCombinedSpan = newCombinedSpan;\n            columnsToResize = newColsToResize;\n        } while (setMinMaxCols);\n\n        // Those left that don't reach min/max size resize them normally.\n        columnsToResize.forEach((col) => {\n            const currentResizeWidth = parseFloat(col.target.calcWidth);\n            const resizeScaled = (updatedDiff / updatedCombinedSpan) * col.target.gridColumnSpan;\n            col.target.width = (currentResizeWidth + resizeScaled) + 'px';\n        });\n    }\n}\n","import { DOCUMENT, DatePipe, DecimalPipe } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    Inject,\n    Injectable,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    TemplateRef,\n    LOCALE_ID,\n    AfterViewInit,\n    HostListener\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject, Subscription } from 'rxjs';\nimport { map, switchMap, takeUntil, throttle, debounceTime } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxDragDirective, IgxDropDirective } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { ConnectedPositioningStrategy } from '../services';\nimport { VerticalAlignment, PositionSettings } from '../services/overlay/utilities';\nimport { scaleInVerBottom, scaleInVerTop } from '../animations/main';\nimport { KEYS } from '../core/utils';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';\n\nconst DEFAULT_DATE_FORMAT = 'mediumDate';\nconst DEBOUNCE_TIME = 200;\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizeHandle]'\n})\nexport class IgxResizeHandleDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input('igxResizeHandle')\n    public column: IgxColumnComponent;\n\n    /**\n     * @hidden\n     */\n    private _dblClick = false;\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private zone: NgZone,\n               private element: ElementRef,\n               public colResizingService: IgxColumnResizingService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (!this.column.columnGroup && this.column.resizable) {\n            this.zone.runOutsideAngular(() => {\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(\n                    debounceTime(DEBOUNCE_TIME),\n                    takeUntil(this.destroy$)\n                ).subscribe((event: MouseEvent) => {\n\n                    if (this._dblClick) {\n                        this._dblClick = false;\n                        return;\n                    }\n\n                    if (event.button === 0) {\n                        this._onResizeAreaMouseDown(event);\n                        this.column.grid.resizeLine.resizer.onMousedown(event);\n                    }\n                });\n            });\n\n            fromEvent(this.element.nativeElement, 'mouseup').pipe(\n                debounceTime(DEBOUNCE_TIME),\n                takeUntil(this.destroy$)\n            ).subscribe(() => {\n                this.colResizingService.showResizer = false;\n                this.column.grid.cdr.detectChanges();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onMouseOver() {\n        this.colResizingService.resizeCursor = 'col-resize';\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('dblclick')\n    public onDoubleClick() {\n        this._dblClick = true;\n        this.colResizingService.column = this.column;\n        this.colResizingService.autosizeColumnOnDblClick();\n    }\n\n    /**\n     * @hidden\n     */\n    private _onResizeAreaMouseDown(event) {\n        this.colResizingService.column = this.column;\n        this.colResizingService.isColumnResizing = true;\n        this.colResizingService.startResizePos = event.clientX;\n\n        this.colResizingService.showResizer = true;\n        this.column.grid.cdr.detectChanges();\n    }\n}\n\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizer]'\n})\nexport class IgxColumnResizerDirective implements OnInit, OnDestroy {\n\n    @Input()\n    public restrictHResizeMin: number = Number.MIN_SAFE_INTEGER;\n\n    @Input()\n    public restrictHResizeMax: number = Number.MAX_SAFE_INTEGER;\n\n    @Output()\n    public resizeEnd = new Subject<any>();\n\n    @Output()\n    public resizeStart = new Subject<any>();\n\n    @Output()\n    public resize = new Subject<any>();\n\n    private _left;\n    private _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, @Inject(DOCUMENT) public document, public zone: NgZone) {\n\n        this.resizeStart.pipe(\n            map((event) => event.clientX),\n            takeUntil(this._destroy),\n            switchMap((offset) => this.resize.pipe(\n                map((event) => event.clientX - offset),\n                takeUntil(this.resizeEnd),\n                takeUntil(this._destroy)\n            ))\n        ).subscribe((pos) => {\n\n            const left = this._left + pos;\n\n            const min = this._left - this.restrictHResizeMin;\n            const max = this._left + this.restrictHResizeMax;\n\n            this.left = left < min ? min : left;\n\n            if (left > max) {\n                this.left = max;\n            }\n        });\n\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.document.defaultView, 'mousemove').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy)\n            ).subscribe((res) => this.onMousemove(res));\n\n            fromEvent(this.document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onMouseup(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    public set left(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.left = val + 'px');\n    }\n\n    public set top(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.top = val + 'px');\n    }\n\n    onMouseup(event) {\n        this.resizeEnd.next(event);\n        this.resizeEnd.complete();\n    }\n\n    onMousedown(event) {\n        event.preventDefault();\n        const parent = this.element.nativeElement.parentElement.parentElement;\n\n        this.left = this._left = event.clientX - parent.getBoundingClientRect().left;\n        this.top = event.target.getBoundingClientRect().top - parent.getBoundingClientRect().top;\n\n        this.resizeStart.next(event);\n    }\n\n    onMousemove(event) {\n        event.preventDefault();\n        this.resize.next(event);\n    }\n}\n\n@Directive({\n    selector: '[igxFilterCellTemplate]'\n})\nexport class IgxFilterCellTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxCell]'\n})\nexport class IgxCellTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxHeader]'\n})\nexport class IgxCellHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxFooter]'\n})\nexport class IgxCellFooterTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxCellEditor]'\n})\nexport class IgxCellEditorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * @hidden\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxColumnMovingService {\n    private _icon: any;\n    private _column: IgxColumnComponent;\n\n    public cancelDrop: boolean;\n    public isColumnMoving: boolean;\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n    set column(val: IgxColumnComponent) {\n        if (val) {\n            this._column = val;\n        }\n    }\n\n    get icon(): any {\n        return this._icon;\n    }\n    set icon(val: any) {\n        if (val) {\n            this._icon = val;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport enum DropPosition {\n    BeforeDropTarget,\n    AfterDropTarget,\n    None\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrag]'\n})\nexport class IgxColumnMovingDragDirective extends IgxDragDirective implements OnDestroy {\n\n    @Input('igxColumnMovingDrag')\n    set data(val) {\n        this._column = val;\n    }\n\n    get column() {\n        return this._column;\n    }\n\n    get draggable(): boolean {\n        return this.column && (this.column.movable || (this.column.groupable && !this.column.columnGroup));\n    }\n\n    public get icon(): HTMLElement {\n        return this.cms.icon;\n    }\n\n    private subscription$: Subscription;\n    private _column: IgxColumnComponent;\n    private _ghostImageClass = 'igx-grid__drag-ghost-image';\n    private dragGhostImgIconClass = 'igx-grid__drag-ghost-image-icon';\n    private dragGhostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';\n\n    constructor(\n        _element: ElementRef,\n        _zone: NgZone,\n        _renderer: Renderer2,\n        _cdr: ChangeDetectorRef,\n        private cms: IgxColumnMovingService,\n    ) {\n        super(_cdr, _element, _zone, _renderer);\n    }\n\n    public ngOnDestroy() {\n        this._unsubscribe();\n    }\n\n    public onEscape(event) {\n        this.cms.cancelDrop = true;\n        this.onPointerUp(event);\n    }\n\n    public onPointerDown(event) {\n        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._removeOnDestroy = false;\n        this.cms.column = this.column;\n        this.ghostImageClass = this._ghostImageClass;\n\n        super.onPointerDown(event);\n\n        this.cms.isColumnMoving = true;\n        this.column.grid.cdr.detectChanges();\n\n        const args = {\n            source: this.column\n        };\n        this.column.grid.onColumnMovingStart.emit(args);\n\n        this.subscription$ = fromEvent(this.column.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n            if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                this.onEscape(ev);\n            }\n        });\n    }\n\n    public onPointerMove(event) {\n        event.preventDefault();\n        super.onPointerMove(event);\n\n        if (this._dragStarted && this.dragGhost && !this.column.grid.draggedColumn) {\n            this.column.grid.draggedColumn = this.column;\n            this.column.grid.cdr.detectChanges();\n        }\n\n        if (this.cms.isColumnMoving) {\n            const args = {\n                source: this.column,\n                cancel: false\n            };\n            this.column.grid.onColumnMoving.emit(args);\n\n            if (args.cancel) {\n                this.onEscape(event);\n            }\n        }\n    }\n\n    public onPointerUp(event) {\n        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.\n        this.zone.run(() => {\n            super.onPointerUp(event);\n\n            this.cms.isColumnMoving = false;\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        });\n\n        this._unsubscribe();\n    }\n\n    protected createDragGhost(event) {\n        super.createDragGhost(event);\n\n        let pageX, pageY;\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            pageX = event.pageX;\n            pageY = event.pageY;\n        } else {\n            pageX = event.touches[0].pageX;\n            pageY = event.touches[0].pageY;\n        }\n\n        this.dragGhost.style.height = null;\n        this.dragGhost.style.minWidth = null;\n        this.dragGhost.style.flexBasis = null;\n        this.dragGhost.style.position = null;\n\n        const icon = document.createElement('i');\n        const text = document.createTextNode('block');\n        icon.appendChild(text);\n\n        icon.classList.add('material-icons');\n        this.cms.icon = icon;\n\n        const hostElemLeft = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().left : 0;\n        const hostElemTop = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().top : 0;\n\n        if (!this.column.columnGroup) {\n            this.renderer.addClass(icon, this.dragGhostImgIconClass);\n\n            this.dragGhost.insertBefore(icon, this.dragGhost.firstElementChild);\n\n            this.left = this._dragStartX = pageX - ((this.dragGhost.getBoundingClientRect().width / 3) * 2) - hostElemLeft;\n            this.top = this._dragStartY = pageY - ((this.dragGhost.getBoundingClientRect().height / 3) * 2) - hostElemTop;\n        } else {\n            this.dragGhost.insertBefore(icon, this.dragGhost.childNodes[0]);\n\n            this.renderer.addClass(icon, this.dragGhostImgIconGroupClass);\n            this.dragGhost.children[0].style.paddingLeft = '0px';\n\n            this.left = this._dragStartX = pageX - ((this.dragGhost.getBoundingClientRect().width / 3) * 2) - hostElemLeft;\n            this.top = this._dragStartY = pageY - ((this.dragGhost.getBoundingClientRect().height / 3) * 2) - hostElemTop;\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$) {\n            this.subscription$.unsubscribe();\n            this.subscription$ = null;\n        }\n    }\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrop]'\n})\nexport class IgxColumnMovingDropDirective extends IgxDropDirective implements OnDestroy {\n    @Input('igxColumnMovingDrop')\n    set data(val: any) {\n        if (val instanceof IgxColumnComponent) {\n            this._column = val;\n        }\n\n        if (val instanceof IgxGridForOfDirective) {\n            this._hVirtDir = val;\n        }\n    }\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    get isDropTarget(): boolean {\n        return this._column && this._column.grid.hasMovableColumns && this.cms.column.movable && !this.cms.column.disablePinning;\n    }\n\n    get horizontalScroll(): any {\n        if (this._hVirtDir) {\n            return this._hVirtDir;\n        }\n    }\n\n    private _dropPos: DropPosition;\n    private _dropIndicator: any = null;\n    private _lastDropIndicator: any = null;\n    private _column: IgxColumnComponent;\n    private _hVirtDir: IgxGridForOfDirective<any>;\n    private _dragLeave = new Subject<boolean>();\n    private _dropIndicatorClass = 'igx-grid__th-drop-indicator--active';\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone, private cms: IgxColumnMovingService) {\n        super(elementRef, renderer, zone);\n    }\n\n    public ngOnDestroy() {\n        this._dragLeave.next(true);\n        this._dragLeave.complete();\n    }\n\n    public onDragOver(event) {\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n            if (this._lastDropIndicator) {\n                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n\n            const clientRect = this.elementRef.nativeElement.getBoundingClientRect();\n            const pos = clientRect.left + clientRect.width / 2;\n\n            const parent = this.elementRef.nativeElement.parentElement;\n            if (event.detail.pageX < pos) {\n                this._dropPos = DropPosition.BeforeDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.firstElementChild;\n            } else {\n                this._dropPos = DropPosition.AfterDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.lastElementChild;\n            }\n\n            if (this.cms.icon.innerText !== 'block') {\n                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n        }\n    }\n\n    public onDragEnter(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && this.cms.column.grid.id !== this.column.grid.id) {\n            this.cms.icon.innerText = 'block';\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n                if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {\n                    this.cms.icon.innerText = 'swap_horiz';\n                }\n\n                if (!this.cms.column.pinned && this.column.pinned) {\n                    const nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n\n                    if (nextPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                        this.cms.icon.innerText = 'lock';\n                    } else {\n                        this.cms.icon.innerText = 'block';\n                    }\n                }\n            } else {\n                this.cms.icon.innerText = 'block';\n            }\n\n            if (this.horizontalScroll) {\n                this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';\n\n                interval(100).pipe(takeUntil(this._dragLeave)).subscribe(() => {\n                    this.cms.column.grid.wheelHandler();\n                    event.target.id === 'right' ? this.horizontalScroll.getHorizontalScroll().scrollLeft += 15 :\n                        this.horizontalScroll.getHorizontalScroll().scrollLeft -= 15;\n                });\n            }\n    }\n\n    public onDragLeave(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        this.cms.icon.innerText = 'block';\n\n        if (this._dropIndicator) {\n            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n    }\n\n    public onDragDrop(event) {\n        event.preventDefault();\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && (this.cms.column.grid.id !== this.column.grid.id)) {\n            return;\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n\n        if (this.isDropTarget) {\n            const args = {\n                source: this.cms.column,\n                target: this.column\n            };\n\n            let nextPinnedWidth;\n            if (this.column.pinned && !this.cms.column.pinned) {\n                nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n            }\n\n            if ((nextPinnedWidth && nextPinnedWidth > this.column.grid.calcPinnedContainerMaxWidth) ||\n                this.column.level !== this.cms.column.level ||\n                this.column.parent !== this.cms.column.parent ||\n                this.cms.cancelDrop) {\n                    this.cms.cancelDrop = false;\n                    this.column.grid.onColumnMovingEnd.emit(args);\n                    return;\n            }\n\n            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);\n\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        }\n    }\n}\n@Directive({\n    selector: '[igxGridBody]',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxGridBodyDirective {}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdate'\n})\nexport class IgxDatePipeComponent extends DatePipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && value instanceof Date) {\n            if (locale) {\n                return super.transform(value, DEFAULT_DATE_FORMAT, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdecimal'\n})\nexport class IgxDecimalPipeComponent extends DecimalPipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && typeof value === 'number') {\n            if (locale) {\n                return super.transform(value, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport interface ContainerPositionSettings extends PositionSettings {\n    container?: HTMLElement;\n}\n\n/**\n * @hidden\n */\nexport class ContainerPositioningStrategy extends ConnectedPositioningStrategy {\n    isTop = false;\n    isTopInitialPosition = null;\n    public settings: ContainerPositionSettings;\n    position(contentElement: HTMLElement, size: { width: number, height: number }, document?: Document, initialCall?: boolean): void {\n        const container = this.settings.container; // grid.tbody\n        const target = <HTMLElement>this.settings.target; // current grid.row\n\n        // Position of the overlay depends on the available space in the grid.\n        // If the bottom space is not enough then the the row overlay will show at the top of the row.\n        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),\n        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).\n        this.isTop = this.isTopInitialPosition !== null ?\n            this.isTopInitialPosition :\n            container.getBoundingClientRect().bottom <\n                target.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;\n\n        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.\n        contentElement.style.width = target.clientWidth + 'px';\n        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;\n        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;\n\n        super.position(contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Input,\n    QueryList,\n    TemplateRef,\n    forwardRef\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxDateSummaryOperand, IgxNumberSummaryOperand, IgxSummaryOperand } from './summaries/grid-summary';\nimport { IgxRowComponent } from './row.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './grid.common';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { DefaultSortingStrategy, ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { getNodeSizeViaRange, flatten } from '../core/utils';\nimport {\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand,\n    IgxStringFilteringOperand,\n    IgxFilteringOperand } from '../data-operations/filtering-condition';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { MRLColumnSizeInfo, MRLResizeColumnInfo } from '../data-operations/multi-row-layout.interfaces';\n\n/**\n * **Ignite UI for Angular Column** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html#columns-configuration)\n *\n * The Ignite UI Column is used within an `igx-grid` element to define what data the column will show. Features such as sorting,\n * filtering & editing are enabled at the column level.  You can also provide a template containing custom content inside\n * the column using `ng-template` which will be used for all cells within the column.\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-column',\n    template: ``\n})\nexport class IgxColumnComponent implements AfterContentInit {\n    /**\n     * Sets/gets the `field` value.\n     * ```typescript\n     * let columnField = this.column.field;\n     * ```\n     * ```html\n     * <igx-column [field] = \"'ID'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public field: string;\n    /**\n     * Sets/gets the `header` value.\n     * ```typescript\n     * let columnHeader = this.column.header;\n     * ```\n     * ```html\n     * <igx-column [header] = \"'ID'\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public header = '';\n    /**\n     * Sets/gets whether the column is sortable.\n     * Default value is `false`.\n     * ```typescript\n     * let isSortable = this.column.sortable;\n     * ```\n     * ```html\n     * <igx-column [sortable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public sortable = false;\n    /**\n     * Sets/gets whether the column is groupable.\n     * Default value is `false`.\n     * ```typescript\n     * let isGroupable = this.column.groupable;\n     * ```\n     * ```html\n     * <igx-column [groupable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public groupable = false;\n    /**\n     * Sets/gets whether the column is editable.\n     * Default value is `false`.\n     * ```typescript\n     * let isEditable = this.column.editable;\n     * ```\n     * ```html\n     * <igx-column [editable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public editable = null;\n    /**\n     * Sets/gets whether the column is filterable.\n     * Default value is `true`.\n     * ```typescript\n     * let isFilterable = this.column.filterable;\n     * ```\n     * ```html\n     * <igx-column [filterable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public filterable = true;\n    /**\n     * Sets/gets whether the column is resizable.\n     * Default value is `false`.\n     * ```typescript\n     * let isResizable = this.column.resizable;\n     * ```\n     * ```html\n     * <igx-column [resizable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public resizable = false;\n    /**\n     * Gets a value indicating whether the summary for the column is enabled.\n     * ```typescript\n     * let hasSummary = this.column.hasSummary;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get hasSummary() {\n        return this._hasSummary;\n    }\n    /**\n     * Sets a value indicating whether the summary for the column is enabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hasSummary] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hasSummary(value) {\n        this._hasSummary = value;\n\n        if (this.grid) {\n            this.grid.summaryService.recalculateSummaries();\n        }\n    }\n    /**\n     * Gets whether the column is hidden.\n     * ```typescript\n     * let isHidden = this.column.hidden;\n     * ```\n     *@memberof IgxColumnComponent\n     */\n    @Input()\n    get hidden(): boolean {\n        return this._hidden;\n    }\n    /**\n     * Sets the column hidden property.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hidden(value: boolean) {\n        if (this._hidden !== value) {\n            this._hidden = value;\n            if (this.grid) {\n                this.grid.resetCaches();\n                this.grid.endEdit(false);\n            }\n            // TODO: Simplify\n            this.check();\n            if (this.grid) {\n                this.grid.refreshSearch(true);\n                this.grid.summaryService.resetSummaryHeight();\n                this.grid.reflow();\n                this.grid.filteringService.refreshExpressions();\n            }\n\n            if (this.parent && this.parent.columnLayout && this.parent.hidden !== value) {\n                this.parent.hidden = value;\n            }\n        }\n    }\n    /**\n     * Gets whether the hiding is disabled.\n     * ```typescript\n     * let isHidingDisabled =  this.column.disableHiding;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get disableHiding(): boolean {\n        return this._disableHiding;\n    }\n    /**\n     * Enables/disables hiding for the column.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set disableHiding(value: boolean) {\n        if (this._disableHiding !== value) {\n            this._disableHiding = value;\n            this.check();\n        }\n    }\n    /**\n     * Gets whether the pinning is disabled.\n     * ```typescript\n     * let isPinningDisabled =  this.column.disablePinning;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get disablePinning(): boolean {\n        return this._disablePinning;\n    }\n    /**\n     * Enables/disables pinning for the column.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set disablePinning(value: boolean) {\n        if (this._disablePinning !== value) {\n            this._disablePinning = value;\n            this.check();\n        }\n    }\n    /**\n     * Sets/gets whether the column is movable.\n     * Default value is `false`.\n     * ```typescript\n     * let isMovable = this.column.movable;\n     * ```\n     * ```html\n     * <igx-column [movable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public movable = false;\n    /**\n     * Gets the `width` of the column.\n     * ```typescript\n     * let columnWidth = this.column.width;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get width(): string {\n        return this.widthSetByUser ? this._width : this.defaultWidth;\n    }\n    /**\n     * Sets the `width` of the column.\n     * ```html\n     * <igx-column [width] = \"'25%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set width(value: string) {\n        if (value) {\n            this.widthSetByUser = true;\n            this._width = value;\n        }\n    }\n\n    public get calcWidth(): any {\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n        if (isPercentageWidth) {\n            return parseInt(colWidth, 10) / 100 * (this.grid.calcWidth - this.grid.featureColumnsWidth);\n        } else if (!colWidth) {\n            // no width\n            return this.defaultWidth || this.grid.getPossibleColumnWidth();\n        } else {\n            return this.width;\n        }\n    }\n\n    /**\n     * Sets/gets the maximum `width` of the column.\n     * ```typescript\n     * let columnMaxWidth = this.column.width;\n     * ```\n     * ```html\n     * <igx-column [maxWidth] = \"'75%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public maxWidth: string;\n    /**\n     * Sets/gets the minimum `width` of the column.\n     * Default value is `88`;\n     * ```typescript\n     * let columnMinWidth = this.column.minWidth;\n     * ```\n     * ```html\n     * <igx-column [minWidth] = \"'15%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public minWidth = this.defaultMinWidth;\n    /**\n     * Sets/gets the class selector of the column header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerClasses;\n     * ```\n     * ```html\n     * <igx-column [headerClasses] = \"'column-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public headerClasses = '';\n\n    /**\n     * Sets/gets the class selector of the column group header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerGroupClasses;\n     * ```\n     * ```html\n     * <igx-column [headerGroupClasses] = \"'column-group-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public headerGroupClasses = '';\n    /**\n     * Sets a conditional class selector of the column cells.\n     * Accepts an object literal, containing key-value pairs,\n     * where the key is the name of the CSS class, while the\n     * value is either a callback function that returns a boolean,\n     * or boolean, like so:\n     * ```typescript\n     * callback = (rowData, columnKey) => { return rowData[columnKey] > 6; }\n     * cellClasses = { 'className' : this.callback };\n     * ```\n     * ```html\n     * <igx-column [cellClasses] = \"cellClasses\"></igx-column>\n     * <igx-column [cellClasses] = \"{'class1' : true }\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public cellClasses: any;\n    /**\n     * Gets the column index.\n     * ```typescript\n     * let columnIndex = this.column.index;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get index(): number {\n        return this.grid.columns.indexOf(this);\n    }\n    /**\n     * Gets formatter for the column.\n     * ```typescript\n     * let columnFormatter = this.column.formatter;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    formatter: (value: any) => any;\n    /**\n     * Sets/gets whether the column filtering should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let filteringIgnoreCase = this.column.filteringIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [filteringIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public filteringIgnoreCase = true;\n    /**\n     * Sets/gets whether the column sorting should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let sortingIgnoreCase = this.column.sortingIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [sortingIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public sortingIgnoreCase = true;\n    /**\n     * Sets/gets the data type of the column values.\n     * Default value is `string`.\n     * ```typescript\n     * let columnDataType = this.column.dataType;\n     * ```\n     * ```html\n     * <igx-column [dataType] = \"'number'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public dataType: DataType = DataType.String;\n    /**\n     * Gets whether the column is `pinned`.\n     * ```typescript\n     * let isPinned = this.column.pinned;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get pinned(): boolean {\n        return this._pinned;\n    }\n    /**\n     * Sets whether the column is pinned.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set pinned(value: boolean) {\n        if (this._pinned !== value) {\n            if (this.grid && this.width && !isNaN(parseInt(this.width, 10))) {\n                value ? this.pin() : this.unpin();\n                return;\n            }\n            /* No grid/width available at initialization. `initPinning` in the grid\n               will re-init the group (if present)\n            */\n            this._pinned = value;\n        }\n    }\n    /**\n     * @deprecated\n     * Gets/Sets the `id` of the `igx-grid`.\n     * ```typescript\n     * let columnGridId = this.column.gridID;\n     * ```\n     * ```typescript\n     * this.column.gridID = 'grid-1';\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @DeprecateProperty(`The property is deprecated. Please, use \\`column.grid.id\\` instead.`)\n    public gridID: string;\n    /**\n     * Gets the column `summaries`.\n     * ```typescript\n     * let columnSummaries = this.column.summaries;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column `summaries`.\n     * ```typescript\n     * this.column.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set summaries(classRef: any) {\n        this._summaries = new classRef();\n\n        if (this.grid) {\n            this.grid.summaryService.removeSummariesCachePerColumn(this.field);\n            (this.grid as any)._summaryPipeTrigger++;\n            this.grid.summaryService.recalculateSummaries();\n        }\n    }\n    /**\n     * Sets/gets whether the column is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.column.searchable';\n     * ```\n     * ```html\n     *  <igx-column [searchable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column `filters`.\n     * ```typescript\n     * let columnFilters = this.column.filters'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get filters(): IgxFilteringOperand {\n        return this._filters;\n    }\n    /**\n     * Sets the column `filters`.\n     * ```typescript\n     * this.column.filters = IgxBooleanFilteringOperand.instance().\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set filters(instance: IgxFilteringOperand) {\n        this._filters = instance;\n    }\n    /**\n     * Gets the column `sortStrategy`.\n     * ```typescript\n     * let sortStrategy = this.column.sortStrategy'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get sortStrategy(): ISortingStrategy {\n        return this._sortStrategy;\n    }\n    /**\n     * Sets the column `sortStrategy`.\n     * ```typescript\n     * this.column.sortStrategy = new CustomSortingStrategy().\n     *\n     * class CustomSortingStrategy extends SortingStrategy {\n     * ...\n     * }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set sortStrategy(classRef: ISortingStrategy) {\n        this._sortStrategy = classRef;\n    }\n    /**\n    * Gets the function that compares values for grouping.\n    * ```typescript\n    * let groupingComparer = this.column.groupingComparer'\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    @Input()\n    public get groupingComparer(): (a: any, b: any) => number {\n        return this._groupingComparer;\n    }\n    /**\n     * Sets a custom function to compare values for grouping.\n     * Subsequent values in the sorted data that the function returns 0 for are grouped.\n     * ```typescript\n     * this.column.groupingComparer = (a: any, b: any) => { return a === b ? 0 : -1; }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set groupingComparer(funcRef: (a: any, b: any) => number) {\n        this._groupingComparer = funcRef;\n    }\n    /**\n     * Gets the default minimum `width` of the column.\n     * ```typescript\n     * let defaultMinWidth =  this.column.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get defaultMinWidth(): string {\n        return this._defaultMinWidth;\n    }\n    /**\n     * The reference to the `igx-grid` owner.\n     * ```typescript\n     * let gridComponent = this.column.grid;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public grid: IgxGridBaseComponent;\n    /**\n     * Returns a reference to the `bodyTemplate`.\n     * ```typescript\n     * let bodyTemplate = this.column.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input('cellTemplate')\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * Sets the body template.\n     * ```html\n     * <ng-template #bodyTemplate igxCell let-val>\n     *    <div style = \"background-color: yellowgreen\" (click) = \"changeColor(val)\">\n     *       <span> {{val}} </span>\n     *    </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'bodyTemplate'\", {read: TemplateRef })\n     * public bodyTemplate: TemplateRef<any>;\n     * this.column.bodyTemplate = this.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set bodyTemplate(template: TemplateRef<any>) {\n        this._bodyTemplate = template;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.column.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * Sets the header template.\n     * ```html\n     * <ng-template #headerTemplate>\n     *   <div style = \"background-color:black\" (click) = \"changeColor(val)\">\n     *       <span style=\"color:red\" >{{column.field}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'headerTemplate'\", {read: TemplateRef })\n     * public headerTemplate: TemplateRef<any>;\n     * this.column.headerTemplate = this.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) {\n        this._headerTemplate = template;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.column.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input('cellEditorTemplate')\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * Sets the inline editor template.\n     * ```html\n     * <ng-template #inlineEditorTemplate igxCellEditor let-cell=\"cell\">\n     *     <input type=\"string\" [(ngModel)]=\"cell.value\"/>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'inlineEditorTemplate'\", {read: TemplateRef })\n     * public inlineEditorTemplate: TemplateRef<any>;\n     * this.column.inlineEditorTemplate = this.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) {\n        this._inlineEditorTemplate = template;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Returns a reference to the `filterCellTemplate`.\n     * ```typescript\n     * let filterCellTemplate = this.column.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input('filterCellTemplate')\n    get filterCellTemplate(): TemplateRef<any> {\n        return this._filterCellTemplate;\n    }\n    /**\n     * Sets the quick filter template.\n     * ```html\n     * <ng-template #filterCellTemplate IgxFilterCellTemplate let-column=\"column\">\n     *    <input (input)=\"onInput()\">\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'filterCellTemplate'\", {read: TemplateRef })\n     * public filterCellTemplate: TemplateRef<any>;\n     * this.column.filterCellTemplate = this.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set filterCellTemplate(template: TemplateRef<any>) {\n        this._filterCellTemplate = template;\n    }\n    /**\n     * Gets the cells of the column.\n     * ```typescript\n     * let columnCells =  this.column.cells;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return this.grid.rowList.filter((row) => row instanceof IgxRowComponent)\n            .map((row) => {\n                if (row.cells) {\n                    return row.cells.filter((cell) => cell.columnIndex === this.index);\n                }\n            }).reduce((a, b) => a.concat(b), []);\n    }\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => !c.columnGroup);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => !c.columnGroup);\n        let col = this;\n        let vIndex = -1;\n\n        if (this.columnGroup) {\n            col = this.allChildren.filter(c => !c.columnGroup)[0] as any;\n        }\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(col);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(col);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnGroup() {\n        return false;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n\n    /**\n     * Returns the children columns collection.\n     * Returns an empty array if the column does not contain children columns.\n     * ```typescript\n     * let childrenColumns =  this.column.allChildren;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return [];\n    }\n    /**\n     * Returns the level of the column in a column group.\n     * Returns `0` if the column doesn't have a `parent`.\n     * ```typescript\n     * let columnLevel =  this.column.level;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get level() {\n        let ptr = this.parent;\n        let lvl = 0;\n\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parent;\n        }\n        return lvl;\n    }\n\n    get isLastPinned(): boolean {\n        return this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1] === this;\n    }\n    get gridRowSpan(): number {\n        return this.rowEnd && this.rowStart ? this.rowEnd - this.rowStart : 1;\n    }\n    get gridColumnSpan(): number {\n        return this.colEnd && this.colStart ? this.colEnd - this.colStart : 1;\n    }\n\n    /**\n     * Row index where the current field should end.\n     * The amount of rows between rowStart and rowEnd will determine the amount of spanning rows to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowEnd]=\"2\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public rowEnd: number;\n\n    /**\n     * Column index where the current field should end.\n     * The amount of columns between colStart and colEnd will determine the amount of spanning columns to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colEnd]=\"3\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public colEnd: number;\n\n    /**\n     * Row index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() rowStart: number;\n\n    /**\n     * Column index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colStart]=\"1\" [rowStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() colStart: number;\n\n    /**\n     * hidden\n     */\n    public defaultWidth: string;\n\n    /**\n     * hidden\n     */\n    public widthSetByUser: boolean;\n\n    /**\n     * Returns the filteringExpressionsTree of the column.\n     * ```typescript\n     * let tree =  this.column.filteringExpressionsTree;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get filteringExpressionsTree(): FilteringExpressionsTree {\n        return this.grid.filteringExpressionsTree.find(this.field) as FilteringExpressionsTree;\n    }\n    /**\n     * Sets/gets the parent column.\n     * ```typescript\n     * let parentColumn = this.column.parent;\n     * ```\n     * ```typescript\n     * this.column.parent = higherLevelColumn;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    parent = null;\n    /**\n     * Sets/gets the children columns.\n     * ```typescript\n     * let columnChildren = this.column.children;\n     * ```\n     * ```typescript\n     * this.column.children = childrenColumns;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    children: QueryList<IgxColumnComponent>;\n    /**\n     *@hidden\n     */\n    protected _unpinnedIndex;\n    /**\n     *@hidden\n     */\n    protected _pinned = false;\n    /**\n     *@hidden\n     */\n    protected _bodyTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _headerTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _inlineEditorTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _filterCellTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _summaries = null;\n    /**\n     *@hidden\n     */\n    protected _filters = null;\n    /**\n     *@hidden\n     */\n    protected _sortStrategy: ISortingStrategy = DefaultSortingStrategy.instance();\n    /**\n     *@hidden\n     */\n    protected _groupingComparer: (a: any, b: any) => number;\n    /**\n     *@hidden\n     */\n    protected _hidden = false;\n    /**\n     *@hidden\n     */\n    protected _index: number;\n    /**\n     *@hidden\n     */\n    protected _disableHiding = false;\n    /**\n     *@hidden\n     */\n    protected _disablePinning = false;\n    /**\n     *@hidden\n     */\n    protected _width: string;\n    /**\n     *@hidden\n     */\n    protected _defaultMinWidth = '80';\n    /**\n     *@hidden\n     */\n    protected _hasSummary = false;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellTemplateDirective, { read: IgxCellTemplateDirective })\n    protected cellTemplate: IgxCellTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellHeaderTemplateDirective, { read: IgxCellHeaderTemplateDirective })\n    protected headTemplate: IgxCellHeaderTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellEditorTemplateDirective, { read: IgxCellEditorTemplateDirective })\n    protected editorTemplate: IgxCellEditorTemplateDirective;\n\n    private _vIndex = NaN;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxFilterCellTemplateDirective, { read: IgxFilterCellTemplateDirective })\n    public filterCellTemplateDirective: IgxFilterCellTemplateDirective;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetVisibleIndex() {\n        this._vIndex = NaN;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.cellTemplate) {\n            this._bodyTemplate = this.cellTemplate.template;\n        }\n        if (this.headTemplate) {\n            this._headerTemplate = this.headTemplate.template;\n        }\n        if (this.editorTemplate) {\n            this._inlineEditorTemplate = this.editorTemplate.template;\n        }\n        if (this.filterCellTemplateDirective) {\n            this._filterCellTemplate = this.filterCellTemplateDirective.template;\n        }\n        if (!this.summaries) {\n            switch (this.dataType) {\n                case DataType.String:\n                case DataType.Boolean:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n                case DataType.Number:\n                    this.summaries = IgxNumberSummaryOperand;\n                    break;\n                case DataType.Date:\n                    this.summaries = IgxDateSummaryOperand;\n                    break;\n                default:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n            }\n        }\n        if (!this.filters) {\n            switch (this.dataType) {\n                case DataType.Boolean:\n                    this.filters = IgxBooleanFilteringOperand.instance();\n                    break;\n                case DataType.Number:\n                    this.filters = IgxNumberFilteringOperand.instance();\n                    break;\n                case DataType.Date:\n                    this.filters = IgxDateFilteringOperand.instance();\n                    break;\n                case DataType.String:\n                default:\n                    this.filters = IgxStringFilteringOperand.instance();\n                    break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getGridTemplate(isRow: boolean, isIE: boolean): string {\n        const colSpanAccum = (acc, val) => Math.max(val.colStart + val.gridColumnSpan - 1, acc);\n        const templateItems = !isRow ?\n            this.children && this.children.reduce(colSpanAccum, 1) || 1 :\n            this.grid.multiRowLayoutRowSize;\n        const generatedSizes = !isRow ? this.getColumnSizesString(this.children) : null;\n        return isIE ?\n        generatedSizes || `(1fr)[${templateItems}]` :\n            generatedSizes || `repeat(${templateItems},1fr)`;\n    }\n\n    public getInitialChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<MRLColumnSizeInfo> {\n        const columnSizes: MRLColumnSizeInfo[] = [];\n        // find the smallest col spans\n        children.forEach(col => {\n            if (!col.colStart) {\n                return;\n            }\n            const newWidthSet =  col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n            const newSpanSmaller = columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].colSpan > col.gridColumnSpan;\n            const bothWidthsSet = col.widthSetByUser && columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].widthSetByUser;\n            const bothWidthsNotSet = !col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n\n            if (columnSizes[col.colStart - 1] === undefined) {\n                // If nothing is defined yet take any column at first\n                // We use colEnd to know where the column actually ends, because not always it starts where we have it set in columnSizes.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (newWidthSet || (newSpanSmaller && ((bothWidthsSet) || (bothWidthsNotSet)))) {\n                // If a column is set already it should either not have width defined or have width with bigger span than the new one.\n\n                /**\n                 *  If replaced column has bigger span, we want to fill the remaining columns\n                 *  that the replacing column does not fill with the old one.\n                 **/\n                if (bothWidthsSet && newSpanSmaller) {\n                    // Start from where the new column set would end and apply the old column to the rest depending on how much it spans.\n                    // We have not yet replaced it so we can use it directly from the columnSizes collection.\n                    // This is where colEnd is used because the colStart of the old column is not actually i + 1.\n                    for (let i = col.colStart - 1 + col.gridColumnSpan; i < columnSizes[col.colStart - 1].colEnd - 1; i++) {\n                        if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                            columnSizes[i] = columnSizes[col.colStart - 1];\n                        } else {\n                            break;\n                        }\n                    }\n                }\n\n                // Replace the old column with the new one.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (bothWidthsSet && columnSizes[col.colStart - 1].colSpan < col.gridColumnSpan) {\n                // If the column already in the columnSizes has smaller span, we still need to fill any empty places with the current col.\n                // Start from where the smaller column set would end and apply the bigger column to the rest depending on how much it spans.\n                // Since here we do not have it in columnSizes we set it as a new column keeping the same colSpan.\n                for (let i = col.colStart - 1 + columnSizes[col.colStart - 1].colSpan; i < col.colStart - 1 + col.gridColumnSpan; i++) {\n                    if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                        columnSizes[i] = {\n                            ref: col,\n                            width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                            colSpan: col.gridColumnSpan,\n                            colEnd: col.colStart + col.gridColumnSpan,\n                            widthSetByUser: col.widthSetByUser\n                        };\n                    } else {\n                        break;\n                    }\n                }\n            }\n        });\n\n        // Flatten columnSizes so there are not columns with colSpan > 1\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && columnSizes[i].colSpan > 1) {\n                let j = 1;\n\n                // Replace all empty places depending on how much the current column spans starting from next col.\n                for (; j < columnSizes[i].colSpan && i + j + 1 < columnSizes[i].colEnd; j++) {\n                    if (columnSizes[i + j] &&\n                        ((!columnSizes[i].width && columnSizes[i + j].width) ||\n                         (!columnSizes[i].width && !columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan) ||\n                        (!!columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan))) {\n                        // If we reach an already defined column that has width and the current doesn't have or\n                        // if the reached column has bigger colSpan we stop.\n                        break;\n                    } else {\n                        const width = columnSizes[i].widthSetByUser ?\n                            columnSizes[i].width / columnSizes[i].colSpan :\n                            columnSizes[i].width;\n                        columnSizes[i + j] = {\n                            ref: columnSizes[i].ref,\n                            width: width,\n                            colSpan: 1,\n                            colEnd: columnSizes[i].colEnd,\n                            widthSetByUser: columnSizes[i].widthSetByUser\n                        };\n                    }\n                }\n\n                // Update the current column width so it is divided between all columns it spans and set it to 1.\n                columnSizes[i].width = columnSizes[i].widthSetByUser ?\n                    columnSizes[i].width / columnSizes[i].colSpan :\n                    columnSizes[i].width;\n                columnSizes[i].colSpan = 1;\n\n                // Update the index based on how much we have replaced. Subtract 1 because we started from 1.\n                i += j - 1;\n            }\n        }\n\n        return columnSizes;\n    }\n\n    protected getFilledChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<string> {\n        const columnSizes = this.getInitialChildColumnSizes(children);\n\n        // fill the gaps if there are any\n        const result: string[] = [];\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && !!columnSizes[i].width) {\n                result.push(columnSizes[i].width + 'px');\n            } else {\n                result.push(parseInt(this.grid.getPossibleColumnWidth(), 10) + 'px');\n            }\n        }\n        return result;\n    }\n\n    protected getColumnSizesString(children: QueryList<IgxColumnComponent>): string {\n       const res = this.getFilledChildColumnSizes(children);\n       return res.join(' ');\n    }\n\n    public getResizableColUnderEnd(): MRLResizeColumnInfo[] {\n        if (this.columnLayout || !this.parent.columnLayout || this.columnGroup) {\n            return [{ target: this, spanUsed: 1 }];\n        }\n\n        const columnSized = this.getInitialChildColumnSizes(this.parent.children);\n        const targets: MRLResizeColumnInfo[] = [];\n        const colEnd = this.colEnd ? this.colEnd : this.colStart + 1;\n\n        for (let i = 0; i < columnSized.length; i++) {\n            if (this.colStart <= i + 1 && i + 1 < colEnd) {\n                targets.push({ target: columnSized[i].ref, spanUsed: 1});\n            }\n        }\n\n        const targetsSquashed: MRLResizeColumnInfo[] = [];\n        for (let j = 0; j < targets.length; j++) {\n            if (targetsSquashed.length && targetsSquashed[targetsSquashed.length - 1].target.field === targets[j].target.field) {\n                targetsSquashed[targetsSquashed.length - 1].spanUsed++;\n            } else {\n                targetsSquashed.push(targets[j]);\n            }\n        }\n\n        return targetsSquashed;\n    }\n\n    /**\n     * Pins the column at the provided index in the pinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully pinned. Returns `false` if the column cannot be pinned.\n     * Column cannot be pinned if:\n     * - Is already pinned\n     * - index argument is out of range\n     * - The pinned area exceeds 80% of the grid width\n     * ```typescript\n     * let success = this.column.pin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public pin(index?: number): boolean {\n        // TODO: Probably should the return type of the old functions\n        // should be moved as a event parameter.\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (this._pinned) {\n            return false;\n        }\n\n        if (this.parent && !this.parent.pinned) {\n            return this.topLevelParent.pin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid.pinnedColumns.length)) {\n            return false;\n        }\n\n        const width = parseInt(this.width, 10);\n\n        if (!this.parent && (grid.getUnpinnedWidth(true) - width < grid.unpinnedAreaMinWidth)) {\n            return false;\n        }\n\n        this._pinned = true;\n        this._unpinnedIndex = grid._unpinnedColumns.indexOf(this);\n        index = index !== undefined ? index : grid._pinnedColumns.length;\n        const targetColumn = grid._pinnedColumns[index];\n        const args = { column: this, insertAtIndex: index, isPinned: true };\n        grid.onColumnPinning.emit(args);\n\n        if (grid._pinnedColumns.indexOf(this) === -1) {\n            grid._pinnedColumns.splice(args.insertAtIndex, 0, this);\n\n            if (grid._unpinnedColumns.indexOf(this) !== -1) {\n                grid._unpinnedColumns.splice(grid._unpinnedColumns.indexOf(this), 1);\n            }\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.pin());\n            grid.reinitPinStates();\n        }\n\n        grid.resetCaches();\n        grid.cdr.detectChanges();\n        this.grid.filteringService.refreshExpressions();\n        this.grid.refreshSearch(true);\n        return true;\n    }\n    /**\n     * Unpins the column and place it at the provided index in the unpinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully unpinned. Returns `false` if the column cannot be unpinned.\n     * Column cannot be unpinned if:\n     * - Is already unpinned\n     * - index argument is out of range\n     * ```typescript\n     * let success = this.column.unpin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public unpin(index?: number): boolean {\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (!this._pinned) {\n            return false;\n        }\n\n        if (this.parent && this.parent.pinned) {\n            return this.topLevelParent.unpin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid._unpinnedColumns.length)) {\n            return false;\n        }\n\n        index = (index !== undefined ? index :\n            this._unpinnedIndex !== undefined ? this._unpinnedIndex : this.index);\n        this._pinned = false;\n\n        const targetColumn = grid._unpinnedColumns[index];\n\n        grid._unpinnedColumns.splice(index, 0, this);\n        if (grid._pinnedColumns.indexOf(this) !== -1) {\n            grid._pinnedColumns.splice(grid._pinnedColumns.indexOf(this), 1);\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.unpin());\n        }\n\n        grid.reinitPinStates();\n        grid.resetCaches();\n\n        const insertAtIndex = grid._unpinnedColumns.indexOf(this);\n        const args = { column: this, insertAtIndex, isPinned: false };\n        grid.onColumnPinning.emit(args);\n\n        grid.cdr.detectChanges();\n        this.grid.filteringService.refreshExpressions();\n        this.grid.refreshSearch(true);\n\n        return true;\n    }\n    /**\n     * Returns a reference to the top level parent column.\n     * ```typescript\n     * let topLevelParent =  this.column.topLevelParent;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get topLevelParent() {\n        let parent = this.parent;\n        while (parent && parent.parent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n    /**\n     *@hidden\n     */\n    protected check() {\n        if (this.grid) {\n            this.grid.markForCheck();\n        }\n    }\n\n    /**\n     * Returns a reference to the header of the column.\n     * ```typescript\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let headerCell = column.headerCell;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get headerCell(): IgxGridHeaderComponent {\n        return this.grid.headerCellList.find((header) => header.column === this);\n    }\n\n    /**\n    * Returns a reference to the filter cell of the column.\n    * ```typescript\n    * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n    * let filterell = column.filterell;\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    get filterCell(): IgxGridFilteringCellComponent {\n        return this.grid.filterCellList.find((filterCell) => filterCell.column === this);\n    }\n\n    /**\n     * Returns a reference to the header group of the column.\n     * @memberof IgxColumnComponent\n     */\n    get headerGroup(): IgxGridHeaderGroupComponent {\n        return this.grid.headerGroupsList.find((headerGroup) => headerGroup.column === this);\n    }\n\n    /**\n     * Autosize the column to the longest currently visible cell value, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * column.autosize();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public autosize() {\n        if (!this.columnGroup) {\n\n            this.width = this.getLargestCellWidth();\n\n            this.grid.markForCheck();\n            this.grid.reflow();\n        }\n    }\n\n    /**\n     * @hidden\n     * Returns the size (in pixels) of the longest currently visible cell, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let size = column.getLargestCellWidth();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public getLargestCellWidth(): string {\n        const range = this.grid.document.createRange();\n        const largest = new Map<number, number>();\n\n        if (this.cells.length > 0) {\n            let cellsContentWidths = [];\n            if (this.cells[0].nativeElement.children.length > 0) {\n                this.cells.forEach((cell) => cellsContentWidths.push(cell.calculateSizeToFit(range)));\n            } else {\n                cellsContentWidths = this.cells.map((cell) => getNodeSizeViaRange(range, cell.nativeElement));\n            }\n\n            const index = cellsContentWidths.indexOf(Math.max(...cellsContentWidths));\n            const cellStyle = this.grid.document.defaultView.getComputedStyle(this.cells[index].nativeElement);\n            const cellPadding = parseFloat(cellStyle.paddingLeft) + parseFloat(cellStyle.paddingRight) +\n                parseFloat(cellStyle.borderRightWidth);\n\n            largest.set(Math.max(...cellsContentWidths), cellPadding);\n        }\n\n        if (this.headerCell) {\n            let headerCell;\n            if (this.headerTemplate && this.headerCell.elementRef.nativeElement.children[0].children.length > 0) {\n                headerCell =  Math.max(...Array.from(this.headerCell.elementRef.nativeElement.children[0].children)\n                    .map((child) => getNodeSizeViaRange(range, child)));\n            } else {\n                headerCell = getNodeSizeViaRange(range, this.headerCell.elementRef.nativeElement.children[0]);\n            }\n\n            if (this.sortable || this.filterable) {\n                headerCell += this.headerCell.elementRef.nativeElement.children[1].getBoundingClientRect().width;\n            }\n\n            const headerStyle = this.grid.document.defaultView.getComputedStyle(this.headerCell.elementRef.nativeElement);\n            const headerPadding = parseFloat(headerStyle.paddingLeft) + parseFloat(headerStyle.paddingRight) +\n                parseFloat(headerStyle.borderRightWidth);\n            largest.set(headerCell, headerPadding);\n\n        }\n\n        const largestCell = Math.max(...Array.from(largest.keys()));\n        const width = Math.ceil(largestCell + largest.get(largestCell));\n\n        if (Number.isNaN(width)) {\n            return this.width;\n        } else {\n            return width + 'px';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public getCellWidth() {\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (this.parent && this.parent.columnLayout) {\n            return '';\n        }\n\n        if (colWidth && !isPercentageWidth) {\n\n            let cellWidth = colWidth;\n            if (typeof cellWidth !== 'string' || cellWidth.endsWith('px') === false) {\n                cellWidth += 'px';\n            }\n\n            return cellWidth;\n        } else {\n            return colWidth;\n        }\n    }\n}\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnGroupComponent) }],\n    selector: 'igx-column-group',\n    template: ``\n})\nexport class IgxColumnGroupComponent extends IgxColumnComponent implements AfterContentInit {\n\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent })\n    children = new QueryList<IgxColumnComponent>();\n    /**\n     * Gets the column group `summaries`.\n     * ```typescript\n     * let columnGroupSummaries = this.columnGroup.summaries;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column group `summaries`.\n     * ```typescript\n     * this.columnGroup.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set summaries(classRef: any) { }\n    /**\n     * Sets/gets whether the column group is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.columnGroup.searchable;\n     * ```\n     * ```html\n     *  <igx-column-group [searchable] = \"false\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column group `filters`.\n     * ```typescript\n     * let columnGroupFilters = this.columnGroup.filters;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get filters(): any {\n        return this._filters;\n    }\n    /**\n     * Sets the column group `filters`.\n     * ```typescript\n     * this.columnGroup.filters = IgxStringFilteringOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set filters(classRef: any) { }\n    /**\n     * Gets the default minimum `width` of the column group.\n     * ```typescript\n     * let defaultMinWidth = this.columnGroup.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get defaultMinWidth(): string {\n        return this._defaultMinWidth;\n    }\n    /**\n     * Returns a reference to the body template.\n     * ```typescript\n     * let bodyTemplate = this.columnGroup.bodyTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set bodyTemplate(template: TemplateRef<any>) { }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.columnGroup.headerTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * @hidden\n     * @memberof IgxColumnGroupComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) { }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.columnGroup.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) { }\n    /**\n     * Gets the column group cells.\n     * ```typescript\n     * let columnCells = this.columnGroup.cells;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return [];\n    }\n    /**\n     * Gets whether the column group is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this.allChildren.every(c => c.hidden);\n    }\n    /**\n     * Sets the column group hidden property.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n    }\n    /**\n     *@hidden\n     */\n    ngAfterContentInit() {\n        /*\n            @ContentChildren with descendants still returns the `parent`\n            component in the query list.\n        */\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parent = this;\n        });\n    }\n    /**\n     * Returns the children columns collection.\n     * ```typescript\n     * let columns =  this.columnGroup.allChildren;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return flatten(this.children.toArray());\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let isColumnGroup =  this.columnGroup.columnGroup\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get columnGroup() {\n        return true;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n    /**\n     * Gets the width of the column group.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width() {\n        let isChildrenWidthInPercent = false, width;\n        width = `${this.children.reduce((acc, val) => {\n            if (val.hidden) {\n                return acc;\n            }\n            if (typeof val.width === 'string' && val.width.indexOf('%') !== -1) {\n                   isChildrenWidthInPercent = true;\n            }\n            return acc + parseInt(val.width, 10);\n        }, 0)}`;\n        return isChildrenWidthInPercent ? width + '%' : width;\n    }\n\n    set width(val) { }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, public cdr: ChangeDetectorRef) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(gridAPI, cdr);\n    }\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnLayoutComponent) }],\n    selector: 'igx-column-layout',\n    template: ``\n})\nexport class IgxColumnLayoutComponent extends IgxColumnGroupComponent implements AfterContentInit {\n    /**\n     * Gets the width of the column layout.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width() {\n        const width = this.getFilledChildColumnSizes(this.children).reduce((acc, val) => acc + parseInt(val, 10), 0);\n        return width;\n    }\n\n    set width(val) { }\n\n    get columnLayout() {\n        return true;\n    }\n\n    /**\n     * Gets whether the column layout is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this._hidden;\n    }\n\n    /**\n     * Sets the column layout hidden property.\n     * ```typescript\n     * <igx-column-layout [hidden] = \"true\"></igx-column->\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n    }\n\n    /**\n     *@hidden\n    */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n        if (!this.hidden) {\n            this.hidden = this.allChildren.some(x => x.hidden);\n        } else {\n            this.children.forEach(child => child.hidden = this.hidden);\n        }\n\n        this.children.forEach(child => {\n            child.disableHiding = true;\n            child.disablePinning = true;\n        });\n    }\n\n    /*\n     * Gets whether the group contains the last pinned child column of the column layout.\n     * ```typescript\n     * let columsHasLastPinned = this.columnLayout.hasLastPinnedChildColumn;\n     * ```\n     * @memberof IgxColumnLayoutComponent\n     */\n    get hasLastPinnedChildColumn() {\n        return this.children.some(child => child.isLastPinned);\n    }\n\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nexport interface IValueChangedEventArgs {\n    oldValue: any;\n    newValue: any;\n}\n\n/**\n *@hidden\n */\nexport abstract class ItemPropertyValueChanged {\n    private _object: any;\n    private _propName: string;\n\n    get object() {\n        return this._object;\n    }\n\n    set object(value) {\n        if (value) {\n            this._object = value;\n        }\n    }\n\n    @Input()\n    get value() {\n        return (this.object) ? this.object[this._propName] : null;\n    }\n\n    set value(value) {\n        this.onValueChanged(value);\n    }\n\n    @Output()\n    public valueChanged = new EventEmitter<IValueChangedEventArgs>();\n\n    constructor(propName: string) {\n        this._propName = propName;\n    }\n\n    protected onValueChanged(value) {\n        const currentValue = this.value;\n        if (value !== currentValue) {\n            this.object[this._propName] = value;\n            this.valueChanged.emit({ oldValue: currentValue, newValue: value });\n        }\n    }\n}\n\n/** @hidden */\nexport class ColumnChooserItemBase extends ItemPropertyValueChanged {\n    @Input()\n    get column() {\n        return this.object;\n    }\n\n    set column(value) {\n        if (value) {\n            this.object = value;\n        }\n    }\n\n    @Input()\n    public indentation = 30;\n\n    @Input()\n    public container: any;\n\n    constructor(public prop: string) {\n        super(prop);\n    }\n\n    get name() {\n        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';\n    }\n\n    get level() {\n        return this.column.level;\n    }\n\n    get calcIndent() {\n        return this.indentation * this.level;\n    }\n}\n","\nimport { Directive } from '@angular/core';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport interface IColumnVisibilityChangedEventArgs {\n    column: any;\n    newValue: boolean;\n}\n\n/** @hidden */\n@Directive({\n    selector: '[igxColumnHidingItem]'\n})\nexport class IgxColumnHidingItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('hidden');\n    }\n\n    get disabled() {\n        return this.column.disableHiding;\n    }\n}\n","import { ChangeDetectorRef, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { IgxStringFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport enum ColumnDisplayOrder {\n    Alphabetical = 'Alphabetical',\n    DisplayOrder = 'DisplayOrder'\n}\n\nclass CustomFilteringStrategy extends FilteringStrategy {\n    public filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[] {\n        const res: ColumnChooserItemBase[] = [];\n        data.forEach((item: ColumnChooserItemBase) => {\n            if (this.matchRecord(item, expressionsTree.filteringOperands[0] as IFilteringExpression)) {\n                res.push(item);\n            } else if (item.column.columnGroup) {\n                if (item.column.allChildren.findIndex((child) =>\n                    this.matchRecord(child, expressionsTree.filteringOperands[1] as IFilteringExpression) ||\n                    this.matchRecord(child, expressionsTree.filteringOperands[2] as IFilteringExpression)) > -1) {\n                    res.push(item);\n                }\n            }\n        });\n\n        return res;\n    }\n}\n\n/** @hidden */\nexport abstract class ColumnChooserBase implements OnDestroy {\n    /**\n     * Gets the grid columns that are going to be manipulated.\n     * ```typescript\n     * let gridColumns = this.columnHidingUI.columns;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n\n    @Input()\n    get columns() {\n        return this._gridColumns;\n    }\n    /**\n     * Sets the the grid columns that are going to be manipulated.\n     * ```html\n     * <igx-column-hiding [columns]=\"grid.columns\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columns(value) {\n        if (value) {\n            this._gridColumns = value;\n            this.createColumnItems();\n            if (this.filterCriteria) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Sets/gets the title of the column chooser.\n     * ```typescript\n     * let title =  this.columnHidingUI.title;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get title() {\n        return this._title;\n    }\n    /**\n     * ```html\n     * <igx-column-hiding [title]=\"'IgxColumnHidingComponent Title'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set title(value) {\n        this._title = (value) ? value : '';\n    }\n    /**\n     * Gets the prompt that is displayed in the filter input.\n     * ```typescript\n     * let filterColumnsPrompt =  this.columnHidingUI.filterColumnsPrompt;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n    /**\n     * Sets the prompt that is going to be displayed in the filter input.\n     * ```html\n     * <igx-column-hiding [filterColumnsPrompt]=\"'Type here to search'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterColumnsPrompt(value) {\n        this._filterColumnsPrompt = (value) ? value : '';\n    }\n    /**\n     * Hides/ shows the filtering columns input from the UI.\n     */\n    @Input()\n    public disableFilter = false;\n    /**\n     * Gets the items of the selected columns.\n     * ```typescript\n     * let columnItems =  this.columnHidingUI.columnItems;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnItems() {\n        return this._currentColumns;\n    }\n    /**\n     * Gets the value which filters the columns list.\n     * ```typescript\n     * let filterCriteria =  this.columnHidingUI.filterCriteria;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterCriteria() {\n        return this._filterCriteria;\n    }\n\n    /**\n     * Sets the value which filters the columns list.\n     * ```html\n     *  <igx-column-hiding [filterCriteria]=\"'ID'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterCriteria(value) {\n        if (!value || value.length === 0) {\n            this.clearFiltering();\n            this._filterCriteria = '';\n            this.cdr.detectChanges();\n            return;\n        } else if (this._filterCriteria && this._filterCriteria.length > value.length) {\n            this.clearFiltering();\n        }\n\n        this._filterCriteria = value;\n        this.filter();\n        this.cdr.detectChanges();\n    }\n    /**\n     * Gets the display order of the columns.\n     * ```typescript\n     * let columnDisplayOrder  =  this.columnHidingUI.columnDisplayOrder;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnDisplayOrder() {\n        return this._columnDisplayOrder;\n    }\n    /**\n     * Sets the display order of the columns.\n     * ```typescript\n     * this.columnHidingUI.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columnDisplayOrder(value: ColumnDisplayOrder) {\n        if (value !== undefined) {\n            this.orderColumns(value);\n            if (this._filterCriteria.length > 0) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Access to the columnHidingUI:\n     * ```typescript\n     * @ViewChild('column-hiding-component')\n     *  public columnHidingUI: IgxColumnHidingComponent;\n     * ```\n     * Sets/gets the max height of the column area.\n     * ```typescript\n     * let columnsAreaMaxHeight =  this.columnHidingUI.columnsAreaMaxHeight;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [columnsAreaMaxHeight]=\"200px\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    public columnsAreaMaxHeight = '100%';\n    /**\n     * Sets/Gets the css class selector.\n     * By default the value of the `class` attribute is `\"igx-column-hiding\"`.\n     * ```typescript\n     * let cssCLass =  this.columnHidingUI.cssClass;\n     * ```\n     * ```typescript\n     * this.columnHidingUI.cssClass = 'column-chooser';\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @HostBinding('attr.class')\n    public cssClass = 'igx-column-hiding';\n    /**\n     *@hidden\n     */\n    private _currentColumns = [];\n    /**\n     *@hidden\n     */\n    private _gridColumns = [];\n    /**\n     *@hidden\n     */\n    private _rawColumns = [];\n    /**\n     *@hidden\n     */\n    private _columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;\n    /**\n     *@hidden\n     */\n    private _filterCriteria = '';\n    /**\n     *@hidden\n     */\n    private _filterColumnsPrompt = '';\n    /**\n     *@hidden\n     */\n    private _title = '';\n\n    constructor(public cdr: ChangeDetectorRef) {\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        for (const item of this._currentColumns) {\n            item.valueChanged.unsubscribe();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private createColumnItems() {\n        if (this._gridColumns.length > 0) {\n            this._rawColumns = [];\n            this._gridColumns.forEach((column) => {\n                const item = this.createColumnItem(this, column);\n                if (item) {\n                    this._rawColumns.push(item);\n                }\n            });\n            this._currentColumns = this._rawColumns.slice(0);\n            this.orderColumns(this._columnDisplayOrder);\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected abstract createColumnItem(container: any, column: any);\n    /**\n     *@hidden\n     */\n    private orderColumns(value) {\n        this._columnDisplayOrder = value;\n        if (value === ColumnDisplayOrder[ColumnDisplayOrder.Alphabetical] ||\n            value === ColumnDisplayOrder.Alphabetical) {\n            this._currentColumns = this._rawColumns.slice(0).sort((current, next) => {\n                return current.name.toLowerCase().localeCompare(next.name.toLowerCase());\n            });\n        } else {\n            this._currentColumns = this._rawColumns;\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected filter() {\n        const filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.Or);\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('name'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('field'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('header'));\n\n        const strategy = new CustomFilteringStrategy();\n        this._currentColumns = strategy.filter(this._currentColumns, filteringExpressionsTree);\n    }\n    /**\n     *@hidden\n     */\n    protected createFilteringExpression(fieldName: string): IFilteringExpression {\n        return {\n            condition: IgxStringFilteringOperand.instance().condition('contains'),\n            fieldName: fieldName,\n            ignoreCase: true,\n            searchVal: this._filterCriteria\n        };\n    }\n    /**\n     *@hidden\n     */\n    protected clearFiltering() {\n        this.createColumnItems();\n    }\n}\n\n\n","import { CommonModule } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    NgModule,\n    Output,\n    OnDestroy\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IColumnVisibilityChangedEventArgs, IgxColumnHidingItemDirective } from './column-hiding-item.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-hiding',\n    templateUrl: './column-hiding.component.html'\n})\nexport class IgxColumnHidingComponent extends ColumnChooserBase implements OnDestroy {\n    /**\n     * Returns a boolean indicating whether the `HIDE ALL` button is disabled.\n     * ```html\n     * <igx-column-hiding #columnHidingUI\n     *     [columns]=\"grid.columns\" [title]=\"'Column Hiding'\">\n     * </igx-column-hiding>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'columnHidingUI'\")\n     * public columnHiding: IgxColumnHidingComponent;\n     * let isHideAlldisabled =  this.columnHiding.disableHideAll;\n     * ```\n     *@memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableHideAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount === this.columns.length) {\n            return true;\n        } else if (this.hidableColumns.length < 1 ||\n            this.hidableColumns.length === this.hidableColumns.filter((col) => col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Returns a boolean indicating whether the `SHOW ALL` button is disabled.\n     * ```typescript\n     * let isShowAlldisabled =  this.columnHiding.disableShowAll;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableShowAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount < 1 || this.hidableColumns.length < 1) {\n            return true;\n        } else if (this.hidableColumns.length === this.hidableColumns.filter((col) => !col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Sets/gets the text of the button that shows all columns if they are hidden.\n     * ```typescript\n     * let showAllButtonText =  this.columnHiding.showAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [showAllText] = \"'Show Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public showAllText = 'Show All';\n    /**\n     * Sets/gets the text of the button that hides all columns if they are shown.\n     * ```typescript\n     * let hideAllButtonText =  this.columnHiding.hideAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [hideAllText] = \"'Hide Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public hideAllText = 'Hide All';\n    /**\n     * An event that is emitted after the columns visibility is changed.\n     * Provides references to the `column` and the `newValue` properties as event arguments.\n     * ```html\n     *  <igx-column-hiding (onColumnVisibilityChanged) = \"onColumnVisibilityChanged($event)\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n    /**\n     * Gets the count of the hidden columns.\n     * ```typescript\n     * let hiddenColumnsCount =  this.columnHiding.hiddenColumnsCount;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public get hiddenColumnsCount() {\n        return (this.columns) ? this.columns.filter((col) => col.hidden).length : 0;\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     *@hidden\n     */\n    public get hidableColumns() {\n        return this.columnItems.filter((col) => !col.disabled);\n    }\n\n    private destroy$ = new Subject<boolean>();\n    /**\n     *@hidden\n     */\n    protected createColumnItem(container: any, column: any) {\n        if (column.grid.hasColumnLayouts && !column.columnLayout) {\n            return null;\n        }\n        const item = new IgxColumnHidingItemDirective();\n        item.container = container;\n        item.column = column;\n\n        item.valueChanged.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.onVisibilityChanged({ column: item.column, newValue: args.newValue });\n        });\n\n        return item;\n    }\n    /**\n     * Shows all columns in the grid.\n     * ```typescript\n     * this.columnHiding.showAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public showAllColumns() {\n        for (const col of this.hidableColumns) {\n            col.value = false;\n        }\n    }\n    /**\n     * Hides all columns in the grid.\n     * ```typescript\n     * this.columnHiding.hideAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public hideAllColumns() {\n        for (const col of this.hidableColumns) {\n            col.value = true;\n        }\n    }\n    /**\n     * @hidden\n     */\n    public onVisibilityChanged(args: IColumnVisibilityChangedEventArgs) {\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxColumnHidingComponent, IgxColumnHidingItemDirective],\n    exports: [IgxColumnHidingComponent],\n    imports: [\n        IgxButtonModule,\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule,\n    ]\n})\nexport class IgxColumnHidingModule {\n}\n","\nimport { CommonModule } from '@angular/common';\nimport { Directive, Component, EventEmitter, Output, NgModule, ChangeDetectorRef } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\n\n@Directive({\n    selector: '[igxColumnPinningItem]'\n})\nexport class IgxColumnPinningItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('pinned');\n    }\n\n    /**\n     * Returns whether a column could be pinned.\n     * It's not possible to pin a column if there is not enough space for the unpinned area.\n     * ```typescript\n     * const columnItem: IgxColumnPinningItemDirective;\n     * this.columnItem.pinnable;\n     * ```\n     */\n    get pinnable() {\n        if (this.column.grid.getUnpinnedWidth(true) - this.column.width < this.column.grid.unpinnedAreaMinWidth) {\n            return false;\n        }\n        return true;\n    }\n}\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-pinning',\n    templateUrl: './column-pinning.component.html'\n})\nexport class IgxColumnPinningComponent extends ColumnChooserBase {\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     * @hidden\n     */\n    createColumnItem(container: any, column: any) {\n        if (column.level !== 0 || column.disablePinning) {\n            return null;\n        }\n        const item = new IgxColumnPinningItemDirective();\n        item.container = container;\n        item.column = column;\n        return item;\n    }\n\n    /**\n     * @hidden\n     */\n    public checkboxValueChange(event, columnItem: IgxColumnPinningItemDirective) {\n        if (event.checked && !columnItem.pinnable) {\n            event.checkbox.checked = false;\n            return false;\n        }\n        columnItem.value = !columnItem.value;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxColumnPinningComponent, IgxColumnPinningItemDirective],\n    exports: [IgxColumnPinningComponent],\n    imports: [\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule\n    ]\n})\nexport class IgxColumnPinningModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    HostBinding,\n    Input,\n    Optional,\n    ViewChild,\n    Inject,\n    TemplateRef\n} from '@angular/core';\n\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    CsvFileTypes,\n    IgxBaseExporter,\n    IgxCsvExporterOptions,\n    IgxCsvExporterService,\n    IgxExcelExporterOptions,\n    IgxExcelExporterService,\n    AbsoluteScrollStrategy\n} from '../services/index';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { IgxColumnHidingComponent } from './column-hiding.component';\nimport { IgxColumnPinningComponent } from './column-pinning.component';\nimport { OverlaySettings, PositionSettings, HorizontalAlignment, VerticalAlignment } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position';\n\n/**\n * This class encapsulates the Toolbar's logic and is internally used by\n * the `IgxGridComponent`, `IgxTreeGridComponent` and `IgxHierarchicalGridComponent`.\n */\n@Component({\n    selector: 'igx-grid-toolbar',\n    templateUrl: './grid-toolbar.component.html'\n})\nexport class IgxGridToolbarComponent extends DisplayDensityBase {\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid-toolbar')\n    @Input()\n    public gridID: string;\n\n    /**\n     * Gets the default text shown in the filtering box.\n     * ```typescript\n     * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    public get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n\n    /**\n     * Sets the default text shown in the filtering box.\n     * ```typescript\n     * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');\n     * ```\n     */\n    public set filterColumnsPrompt(value: string) {\n        this._filterColumnsPrompt = value;\n    }\n\n    private _filterColumnsPrompt = 'Filter columns list ...';\n\n    /**\n     * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.\n     * ```typescript\n     * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;\n     * ```\n     */\n    @Input()\n    get defaultDropDownsMaxHeight() {\n        const gridHeight = this.grid.calcHeight;\n        return (gridHeight) ? gridHeight * 0.7 + 'px' : '100%';\n    }\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Hiding UI.\n     * ```typescript\n     * const dropdownHiding = this.grid.toolbar.columnHidingDropdown;\n     * ```\n     */\n    @ViewChild('columnHidingDropdown', { read: IgxDropDownComponent })\n    public columnHidingDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnHidingComponent`.\n     * ```typescript\n     * const hidingUI = this.grid.toolbar.columnHidingUI;\n     * ```\n     */\n    @ViewChild(IgxColumnHidingComponent)\n    public columnHidingUI: IgxColumnHidingComponent;\n\n    /**\n     * Provides a reference to the Column Hiding button.\n     * ```typescript\n     * const hidingButton = this.grid.toolbar.columnHidingButton;\n     * ```\n     */\n    @ViewChild('columnHidingButton')\n    public columnHidingButton;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Export button.\n     * ```typescript\n     * const exportDropdown = this.grid.toolbar.exportDropdown;\n     * ```\n     */\n    @ViewChild('exportDropdown', { read: IgxDropDownComponent })\n    public exportDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the Export button.\n     * ```typescript\n     * const exportBtn = this.grid.toolbar.exportButton;\n     * ```\n     */\n    @ViewChild('btnExport')\n    public exportButton;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Pinning UI.\n     * ```typescript\n     * const dropdownPinning = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild('columnPinningDropdown', { read: IgxDropDownComponent })\n    public columnPinningDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnPinningComponent`.\n     * ```typescript\n     * const pinningUI = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild(IgxColumnPinningComponent)\n    public columnPinningUI: IgxColumnPinningComponent;\n\n    /**\n     * Provides a reference to the Column Pinning button.\n     * ```typescript\n     * const pinningButton = this.grid.toolbar.columnPinningButton;\n     * ```\n     */\n    @ViewChild('columnPinningButton')\n    public columnPinningButton;\n\n    /**\n     * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const grid = this.igxGrid1.toolbar.grid;\n     * ```\n     */\n    public get grid(): IgxGridBaseComponent {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an export button.\n     * ```typescript\n     * const exportButton = this.igxGrid1.toolbar.shouldShowExportButton;\n     * ```\n     */\n    public get shouldShowExportButton(): boolean {\n        return (this.grid != null && (this.grid.exportExcel || this.grid.exportCsv));\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an Excel export button.\n     * ```typescript\n     * const exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;\n     * ```\n     */\n    public get shouldShowExportExcelButton(): boolean {\n        return (this.grid != null && this.grid.exportExcel);\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an CSV export button.\n     * ```typescript\n     * const exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;\n     * ```\n     */\n    public get shouldShowExportCsvButton(): boolean {\n        return (this.grid != null && this.grid.exportCsv);\n    }\n\n    /**\n     * Returns how many columns are pinned.\n     * ```typescript\n     * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;\n     * ```\n     */\n    public get pinnedColumnsCount() {\n        return this.grid.pinnedColumns.filter(col => !col.columnLayout).length;\n    }\n\n    /**\n     * Returns the theme of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTheme = this.grid.toolbar.hostClass;\n     * ```\n     */\n\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid-toolbar');\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public cdr: ChangeDetectorRef,\n        @Optional() public excelExporter: IgxExcelExporterService,\n        @Optional() public csvExporter: IgxCsvExporterService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n    }\n\n    private _positionSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Left,\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _overlaySettings: OverlaySettings = {\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n\n\n    /**\n     * Returns the title of `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getTitle(): string {\n        return this.grid != null ? this.grid.toolbarTitle : '';\n    }\n\n    /**\n     * Returns the text of the export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getExportText(): string {\n        return this.grid != null ? this.grid.exportText : '';\n    }\n\n    /**\n     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();\n     * ```\n     */\n    public getExportExcelText(): string {\n        return this.grid != null ? this.grid.exportExcelText : '';\n    }\n\n    /**\n     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();\n     * ```\n     */\n    public getExportCsvText(): string {\n        return this.grid != null ? this.grid.exportCsvText : '';\n    }\n\n    /**\n     * Toggles the export button's dropdown menu.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportClicked();\n     * ```\n     */\n    public exportClicked() {\n        this._overlaySettings.positionStrategy.settings.target = this.exportButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.exportDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Exports the grid to excel.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToExcelClicked();\n     * ```\n     */\n    public exportToExcelClicked() {\n        this.performExport(this.excelExporter, 'excel');\n    }\n\n    /**\n     * Exports the grid to CSV.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToCsvClicked();\n     * ```\n     */\n    public exportToCsvClicked() {\n        this.performExport(this.csvExporter, 'csv');\n    }\n\n    private performExport(exp: IgxBaseExporter, exportType: string) {\n        this.exportClicked();\n\n        const fileName = 'ExportedData';\n        const options = exportType === 'excel' ?\n            new IgxExcelExporterOptions(fileName) :\n            new IgxCsvExporterOptions(fileName, CsvFileTypes.CSV);\n\n        const args = { grid: this.grid, exporter: exp, options: options, cancel: false };\n\n        this.grid.onToolbarExporting.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        exp.export(this.grid, options);\n    }\n\n    /**\n     * Toggles the Column Hiding UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnHidingUI();\n     * ```\n     */\n    public toggleColumnHidingUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnHidingButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnHidingDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Toggles the Column Pinning UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnPinningUI();\n     * ```\n     */\n    public toggleColumnPinningUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnPinningButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnPinningDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the\n     * `toolbar custom container` by providing references to the parent IgxGird and the toolbar itself.\n     * ```typescript\n     * const context =  this.igxGrid.toolbar.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            // $implicit: this\n            grid: this.grid,\n            toolbar: this\n        };\n    }\n\n    /** @hidden */\n    public get customContentTemplate(): TemplateRef<any> {\n        if (this.grid != null && this.grid.toolbarCustomContentTemplate != null) {\n            return this.grid.toolbarCustomContentTemplate.template;\n        } else {\n            return null;\n        }\n    }\n}\n\n/**\n * The IgxGridToolbarCustomContentDirective directive is used to mark an 'ng-template' (with\n * the 'igxToolbarCustomContent' selector) defined in the IgxGrid which is used to provide\n * custom content for cener part of the IgxGridToolbar.\n */\n@Directive({\n    selector: '[igxToolbarCustomContent]'\n})\nexport class IgxGridToolbarCustomContentDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n} from '@angular/core';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridSelectionService } from '../../core/grid-selection';\nimport { ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-groupby-row',\n    templateUrl: './groupby-row.component.html'\n})\nexport class IgxGridGroupByRowComponent {\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        private gridSelection: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    protected defaultCssClass = 'igx-grid__group-row';\n\n    /**\n     * @hidden\n     */\n    protected paddingIndentationCssClass = 'igx-grid__group-row--padding-level';\n\n    /**\n     * @hidden\n     */\n    @Input()\n    protected isFocused = false;\n\n    /**\n     * Returns whether the row is focused.\n     * ```\n     * let gridRowFocused = this.grid1.rowList.first.focused;\n     * ```\n     */\n    get focused(): boolean {\n        return this.isFocused;\n    }\n\n    /**\n     * An @Input property that sets the index of the row.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * An @Input property that sets the id of the grid the row belongs to.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * An @Input property that specifies the group record the component renders for.\n     * ```typescript\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public groupRow: IGroupByRecord;\n\n    /**\n     * Returns a reference of the content of the group.\n     * ```typescript\n     * const groupRowContent = this.grid1.rowList.first.groupContent;\n     * ```\n     */\n    @ViewChild('groupContent')\n    public groupContent: ElementRef;\n\n    /**\n     * Returns whether the group row is expanded.\n     * ```typescript\n     * const groupRowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this.grid.isExpandedGroup(this.groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedBy(): string {\n        const grRowExpr = this.groupRow.expression !== undefined ? this.groupRow.expression.fieldName : '';\n        return this.gridID + '_' + grRowExpr;\n    }\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * Returns a reference to the underlying HTML element.\n     * ```typescript\n     * const groupRowElement = this.nativeElement;\n     * ```\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the style classes applied to the group rows.\n     * ```typescript\n     * const groupCssStyles = this.grid1.rowList.first.styleClasses;\n     * ```\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return `${this.defaultCssClass} ` + `${this.paddingIndentationCssClass}-` + this.groupRow.level +\n            (this.focused ? ` ${this.defaultCssClass}--active` : '');\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.isFocused = true;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.isFocused = false;\n    }\n\n    /**\n     * Toggles the group row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        const isVirtualized = !this.grid.verticalScrollContainer.dc.instance.notVirtual;\n        const groupRowIndex = this.index;\n        this.grid.toggleGroup(this.groupRow);\n        if (isVirtualized) {\n            const groupRow = this.grid.nativeElement.querySelector(`[data-rowIndex=\"${groupRowIndex}\"]`);\n            if (groupRow) {\n                groupRow.focus();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const keydownArgs = { targetType: 'groupRow', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInGroupRow(key, event.shiftKey, event.altKey) || event.ctrlKey) { return; }\n\n        if (this.isToggleKey(key, event.altKey)) {\n            if ((this.expanded && ROW_COLLAPSE_KEYS.has(key)) || (!this.expanded && ROW_EXPAND_KEYS.has(key))) {\n                this.toggle();\n            }\n            return;\n        }\n        // TODO: to be deleted when onFocusChange event is removed #4054\n        const args = { cell: this, groupRow: null, event: event, cancel: false };\n        this.grid.onFocusChange.emit(args);\n        if (args.cancel) { return; }\n\n        const selection = this.gridSelection;\n        selection.keyboardState.shift = event.shiftKey && !(key === 'tab');\n\n        const visibleColumnIndex = selection.activeElement && this.grid.columnList.filter(col => !col.hidden).map(c => c.visibleIndex)\n                .indexOf(selection.activeElement.column) !== -1 ? selection.activeElement.column : 0;\n        switch (key) {\n            case 'arrowdown':\n            case 'down':\n                this.grid.navigation.navigateDown(this.nativeElement, this.index, visibleColumnIndex);\n                break;\n            case 'arrowup':\n            case 'up':\n                this.grid.navigation.navigateUp(this.nativeElement, this.index, visibleColumnIndex);\n                break;\n            case 'tab':\n                this.handleTabKey(event.shiftKey);\n                break;\n        }\n    }\n\n    /**\n     * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.\n     * ```typescript\n     * this.grid1.rowList.first.grid;\n     * ```\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * @hidden\n     */\n    get dataType(): any {\n        return this.grid.getColumnByName(this.groupRow.expression.fieldName).dataType;\n    }\n\n    private handleTabKey(shift) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.nativeElement, this.index, 0);\n        } else {\n            if (this.index === this.grid.verticalScrollContainer.igxForOf.length - 1 && this.grid.rootSummariesEnabled) {\n                this.grid.navigation.onKeydownHome(0, true);\n            } else {\n                this.grid.navigation.navigateDown(this.nativeElement, this.index, 0);\n            }\n        }\n    }\n\n    private isKeySupportedInGroupRow(key, shift = false, alt = false) {\n        if (shift) {\n            return ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n        }\n        return this.isToggleKey(key, alt) ? true : ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n    }\n\n    private isToggleKey(key, altKey) {\n        return altKey && ['left', 'right', 'up', 'down', 'arrowleft', 'arrowright', 'arrowup', 'arrowdown'].indexOf(key) !== -1;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { IgxGridBaseComponent, FilterMode } from './grid-base.component';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridGroupByRowComponent } from './grid/groupby-row.component';\n\nenum MoveDirection {\n    LEFT = 'left',\n    RIGHT = 'right'\n}\n\n/** @hidden */\n@Injectable()\nexport class IgxGridNavigationService {\n    public grid: IgxGridBaseComponent;\n\n    get displayContainerWidth() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);\n    }\n\n    get displayContainerScrollLeft() {\n        return parseInt(this.grid.parentVirtDir.getHorizontalScroll().scrollLeft, 10);\n    }\n\n    get verticalDisplayContainerElement() {\n        return this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public horizontalScroll(rowIndex) {\n        let rowComp = this.grid.dataRowList.find((row) => row.index === rowIndex) ?\n        this.grid.dataRowList.find((row) => row.index === rowIndex) : this.grid.dataRowList.first;\n        if (!rowComp) {\n            rowComp = this.grid.summariesRowList.find((row) => row.index === rowIndex);\n        }\n        return rowComp.virtDirRow;\n    }\n\n    public getColumnUnpinnedIndex(visibleColumnIndex: number) {\n        const column = this.grid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    public isColumnFullyVisible(visibleColumnIndex: number) {\n        let forOfDir;\n        if (this.grid.dataRowList.length > 0) {\n            forOfDir = this.grid.dataRowList.first.virtDirRow;\n        } else {\n            forOfDir = this.grid.headerContainer;\n        }\n        const horizontalScroll = forOfDir.getHorizontalScroll();\n        if (!horizontalScroll.clientWidth ||\n            this.grid.columnList.filter(c => !c.columnGroup).find((column) => column.visibleIndex === visibleColumnIndex).pinned) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft;\n    }\n\n    public isColumnLeftFullyVisible(visibleColumnIndex) {\n        let forOfDir;\n        if (this.grid.dataRowList.length > 0) {\n            forOfDir = this.grid.dataRowList.first.virtDirRow;\n        } else {\n            forOfDir = this.grid.headerContainer;\n        }\n        const horizontalScroll = forOfDir.getHorizontalScroll();\n        if (!horizontalScroll.clientWidth ||\n            this.grid.columnList.filter(c => !c.columnGroup).find((column) => column.visibleIndex === visibleColumnIndex).pinned) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        return this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup);\n    }\n\n    public isRowInEditMode(rowIndex): boolean {\n        return this.grid.rowEditable && (this.grid.rowInEditMode && this.grid.rowInEditMode.index === rowIndex);\n    }\n\n    public isColumnEditable(visibleColumnIndex: number): boolean {\n        const column = this.gridOrderedColumns.find(c => c.visibleIndex === visibleColumnIndex);\n        return column ? column.editable : false;\n    }\n\n    public findNextEditable(direction: string, visibleColumnIndex: number) {\n        const gridColumns = this.gridOrderedColumns;\n        if (direction === MoveDirection.LEFT) {\n            return gridColumns.splice(0, visibleColumnIndex + 1).reverse().findIndex(e => e.editable);\n        } else if (direction === MoveDirection.RIGHT) {\n            return gridColumns.splice(visibleColumnIndex, gridColumns.length - 1).findIndex(e => e.editable);\n        }\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        return this.grid.nativeElement.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public onKeydownArrowRight(element, rowIndex, visibleColumnIndex, isSummary = false) {\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n        if (this.isColumnFullyVisible(visibleColumnIndex + 1)) { // if next column is fully visible or is pinned\n            if (element.classList.contains('igx-grid__td--pinned-last') || element.classList.contains('igx-grid-summary--pinned-last')) {\n                if (this.isColumnLeftFullyVisible(visibleColumnIndex + 1)) {\n                    element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                } else {\n                    this.grid.nativeElement.focus({ preventScroll: true });\n                    this.grid.parentVirtDir.onChunkLoad\n                        .pipe(first())\n                        .subscribe(() => {\n                            element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                        });\n                    this.horizontalScroll(rowIndex).scrollTo(0);\n                }\n            } else {\n                element.nextElementSibling.focus({ preventScroll: true });\n            }\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex + 1, isSummary);\n        }\n    }\n\n    public onKeydownArrowLeft(element, rowIndex, visibleColumnIndex, isSummary = false) {\n        if (visibleColumnIndex === 0) {\n            return;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex - 1);\n        if (!element.previousElementSibling && this.grid.pinnedColumns.length && index === - 1) {\n            element.parentNode.previousElementSibling.focus({ preventScroll: true });\n        } else if (!this.isColumnLeftFullyVisible(visibleColumnIndex - 1)) {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex - 1, isSummary);\n        } else {\n            element.previousElementSibling.focus({ preventScroll: true });\n        }\n\n    }\n\n    public movePreviousEditable(rowIndex, visibleColumnIndex) {\n        const addedIndex = this.isColumnEditable(visibleColumnIndex - 1) ?\n            0 :\n            this.findNextEditable(MoveDirection.LEFT, visibleColumnIndex - 1);\n        if (addedIndex === -1) {\n            this.grid.rowEditTabs.last.element.nativeElement.focus();\n            return;\n        }\n        const editableIndex = visibleColumnIndex - 1 - addedIndex;\n        if (this.getColumnUnpinnedIndex(editableIndex) === -1 && this.grid.pinnedColumns.length) {\n            // if target is NOT pinned and there are pinned columns\n            // since addedIndex !== -1, there will always be a target\n            this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus();\n        } else if (!this.isColumnLeftFullyVisible(editableIndex)) {  // if not fully visible, perform scroll\n            this.performHorizontalScrollToCell(rowIndex, editableIndex);\n        } else {\n            this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus(); // if fully visible, just focus\n        }\n    }\n\n    public moveNextEditable(element, rowIndex, visibleColumnIndex) {\n        let addedIndex = 0;\n        addedIndex = this.isColumnEditable(visibleColumnIndex + 1) ?\n            0 :\n            this.findNextEditable(MoveDirection.RIGHT, visibleColumnIndex + 1);\n        if (addedIndex === -1 && this.grid.rowEditTabs) { // no previous edit column -> go to RE buttons\n            this.grid.rowEditTabs.first.element.nativeElement.focus();\n            return;\n        }\n        const editableIndex = visibleColumnIndex + 1 + addedIndex;\n        if (this.isColumnFullyVisible(editableIndex)) { // If column is fully visible\n            if (element.classList.contains('igx-grid__td--pinned-last')) { // If this is pinned\n                if (this.isColumnLeftFullyVisible(editableIndex)) { // If next column is fully visible LEFT\n                    this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus(); // focus\n                } else { // if NOT fully visible, perform scroll\n                    this.performHorizontalScrollToCell(rowIndex, editableIndex);\n                }\n            } else { // cell is next cell\n                this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus();\n            }\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, editableIndex);\n        }\n    }\n\n    public onKeydownHome(rowIndex, isSummary = false) {\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        const cellSelector = this.getCellSelector(0, isSummary);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        let firstCell =  rowElement.querySelector(cellSelector);\n        if (this.grid.pinnedColumns.length || this.displayContainerScrollLeft === 0) {\n            firstCell.focus({ preventScroll: true });\n        } else {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    firstCell = rowElement.querySelector(cellSelector);\n                    firstCell.focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(0);\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        const index = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex;\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        if (this.isColumnFullyVisible(index)) {\n            const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n            allCells[allCells.length - 1].focus({ preventScroll: true });\n        } else {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n                    allCells[allCells.length - 1].focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(this.getColumnUnpinnedIndex(index));\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        if (verticalScroll.scrollTop === 0) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            cells[0].focus();\n        } else {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(0);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[0].focus(); }\n                });\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            cells[cells.length - 1].focus();\n        } else {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                });\n        }\n    }\n\n    public navigateUp(rowElement, currentRowIndex, visibleColumnIndex) {\n        if (currentRowIndex === 0) {\n            return;\n        }\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        if (!rowElement.previousElementSibling ||\n            rowElement.previousElementSibling.offsetTop < Math.abs(containerTopOffset)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(currentRowIndex - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const tag = rowElement.tagName.toLowerCase();\n                    const rowSelector = this.getRowSelector();\n                    if (tag === rowSelector || tag === 'igx-grid-summary-row') {\n                        rowElement = this.getRowByIndex(currentRowIndex, tag);\n                    } else {\n                        rowElement = this.grid.nativeElement.querySelector(\n                            `igx-grid-groupby-row[data-rowindex=\"${currentRowIndex}\"]`);\n                    }\n                    this.focusPreviousElement(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusPreviousElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusPreviousElement(currentRowEl, visibleColumnIndex) {\n        this.focusElem(currentRowEl.previousElementSibling, visibleColumnIndex);\n    }\n\n    public navigateDown(rowElement, currentRowIndex, visibleColumnIndex) {\n        if (currentRowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1 ||\n            (currentRowIndex === 0 && rowElement.tagName.toLowerCase() === 'igx-grid-summary-row')) { // check if this is rootSummary row\n            return;\n        }\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(currentRowIndex + 1);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = rowElement.nextElementSibling ?\n            rowElement.nextElementSibling.offsetTop + rowHeight + parseInt(this.verticalDisplayContainerElement.style.top, 10) :\n            containerHeight + rowHeight;\n        this.grid.nativeElement.focus({ preventScroll: true });\n        if (containerHeight && containerHeight < targetEndTopOffset) {\n            const nextIndex = currentRowIndex + 1;\n            this.grid.verticalScrollContainer.scrollTo(nextIndex);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    rowElement = this.getNextRowByIndex(nextIndex);\n                    this.focusElem(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusNextElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusElem(rowElement, visibleColumnIndex) {\n        if (rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n            rowElement.focus();\n        } else {\n            const isSummaryRow = rowElement.tagName.toLowerCase() === 'igx-grid-summary-row';\n            if (this.isColumnFullyVisible(visibleColumnIndex) && this.isColumnLeftFullyVisible(visibleColumnIndex)) {\n                const cellSelector = this.getCellSelector(visibleColumnIndex, isSummaryRow);\n                const cell = rowElement.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cell.focus();\n                return cell;\n            }\n            this.performHorizontalScrollToCell(parseInt(\n            rowElement.getAttribute('data-rowindex'), 10), visibleColumnIndex, isSummaryRow);\n        }\n    }\n\n    protected focusNextElement(rowElement, visibleColumnIndex) {\n        return  this.focusElem(rowElement.nextElementSibling, visibleColumnIndex);\n    }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();\n        if (verticalScroll.scrollTop === 0) {\n            this.onKeydownHome(this.grid.dataRowList.first.index);\n        } else {\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n                this.grid.nativeElement.focus({ preventScroll: true });\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        }\n    }\n\n    public goToLastCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rows = this.getAllRows();\n            const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n            this.onKeydownEnd(rowIndex);\n        } else {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rows = this.getAllRows();\n                    if (rows.length > 0) {\n                        const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n                        this.onKeydownEnd(rowIndex);\n                    }\n                });\n        }\n    }\n\n    public goToLastBodyElement() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rowIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n            const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`);\n            if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n                row.focus();\n                return;\n            }\n            const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n            this.onKeydownEnd(rowIndex, isSummary);\n        } else {\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rowIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n                    const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`);\n                    if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n                        row.focus();\n                        return;\n                    }\n                    const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n                    this.onKeydownEnd(rowIndex, isSummary);\n                });\n        }\n    }\n\n    public performTab(currentRowEl, rowIndex, visibleColumnIndex, isSummaryRow = false) {\n        if (isSummaryRow && rowIndex === 0 &&\n            this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n                return;\n\n        }\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            if (this.isRowInEditMode(rowIndex)) {\n                this.grid.rowEditTabs.first.element.nativeElement.focus();\n                return;\n            }\n            const rowEl = this.grid.rowList.find(row => row.index === rowIndex + 1) ?\n                this.grid.rowList.find(row => row.index === rowIndex + 1) :\n                this.grid.summariesRowList.find(row => row.index === rowIndex + 1);\n            if (rowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1 && this.grid.rootSummariesEnabled) {\n                this.onKeydownHome(0, true);\n                return;\n            }\n            if (rowEl) {\n                this.navigateDown(currentRowEl, rowIndex, 0);\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummaryRow);\n            if (cell) {\n                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {\n                    this.moveNextEditable(cell, rowIndex, visibleColumnIndex);\n                    return;\n                }\n                this.onKeydownArrowRight(cell, rowIndex, visibleColumnIndex, isSummaryRow);\n            }\n        }\n    }\n\n    public moveFocusToFilterCell(toStart?: boolean) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            this.grid.filteringService.focusFilterRowCloseButton();\n            return;\n        }\n\n        const columns = this.grid.filteringService.unpinnedFilterableColumns;\n        const targetIndex = toStart ? 0 : columns.length - 1;\n        const visibleIndex = columns[targetIndex].visibleIndex;\n        const isVisible = toStart ? this.isColumnLeftFullyVisible(visibleIndex) : this.isColumnFullyVisible(visibleIndex);\n        if (isVisible) {\n            this.grid.filteringService.focusFilterCellChip(columns[targetIndex], false);\n        } else {\n            this.grid.filteringService.scrollToFilterCell(columns[targetIndex], false);\n        }\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const prevFilterableIndex = cols.indexOf(column) - 1;\n        const visibleIndex = column.visibleIndex;\n        if (visibleIndex === 0 || prevFilterableIndex < 0) {\n            // prev is not filter cell\n            const firstFiltarableCol = this.getFirstPinnedFilterableColumn();\n            if (!firstFiltarableCol || column === firstFiltarableCol) {\n                eventArgs.preventDefault();\n            }\n            return;\n        }\n        const prevColumn = cols[prevFilterableIndex];\n        const prevVisibleIndex = prevColumn.visibleIndex;\n\n        if (prevFilterableIndex >= 0 && visibleIndex > 0 && !this.isColumnLeftFullyVisible(prevVisibleIndex) && !column.pinned) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(prevColumn, false);\n        }\n    }\n\n    public navigateFirstCellIfPossible(eventArgs) {\n        if (this.grid.rowList.length > 0) {\n            if (this.grid.rowList.filter(row => row instanceof IgxGridGroupByRowComponent).length > 0 ) {\n                eventArgs.stopPropagation();\n                return;\n            }\n            this.goToFirstCell();\n        } else if (this.grid.rootSummariesEnabled) {\n            this.onKeydownHome(0, true);\n        }\n        eventArgs.preventDefault();\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            this.navigateFirstCellIfPossible(eventArgs);\n            return;\n        }\n        const nextColumn = cols[nextFilterableIndex];\n        const nextVisibleIndex = nextColumn.visibleIndex;\n        if (!column.pinned && !this.isColumnFullyVisible(nextVisibleIndex)) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(nextColumn, true);\n        } else if (column === this.getLastPinnedFilterableColumn() && !this.isColumnFullyVisible(nextVisibleIndex)) {\n            this.grid.filteringService.scrollToFilterCell(nextColumn, false);\n            eventArgs.stopPropagation();\n        }\n    }\n\n    private getLastPinnedFilterableColumn(): IgxColumnComponent {\n        const pinnedFilterableColums =\n            this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable);\n        return pinnedFilterableColums[pinnedFilterableColums.length - 1];\n    }\n\n    private getFirstPinnedFilterableColumn(): IgxColumnComponent {\n        return this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable)[0];\n    }\n\n    public performShiftTabKey(currentRowEl, rowIndex, visibleColumnIndex, isSummary = false) {\n        if (isSummary && rowIndex === 0 && visibleColumnIndex === 0 && this.grid.rowList.length) {\n            this.goToLastBodyElement();\n            return;\n        }\n        if (visibleColumnIndex === 0) {\n            if (this.isRowInEditMode(rowIndex)) {\n                this.grid.rowEditTabs.last.element.nativeElement.focus();\n                return;\n            }\n            if (rowIndex === 0 && this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                this.navigateUp(currentRowEl, rowIndex,\n                    this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex);\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);\n            if (cell) {\n                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {\n                    this.movePreviousEditable(rowIndex, visibleColumnIndex);\n                    return;\n                }\n                this.onKeydownArrowLeft(cell, rowIndex, visibleColumnIndex, isSummary);\n            }\n        }\n    }\n\n    public shouldPerformVerticalScroll(targetRowIndex): boolean {\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n            .concat(this.grid.rowList.toArray()).find(r => r.index === targetRowIndex);\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(targetRowIndex);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = targetRow ? targetRow.nativeElement.offsetTop + rowHeight + containerTopOffset :\n                containerHeight + rowHeight;\n        if (!targetRow || targetRow.nativeElement.offsetTop < Math.abs(containerTopOffset)\n                || containerHeight && containerHeight < targetEndTopOffset) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private performHorizontalScrollToCell(rowIndex, visibleColumnIndex, isSummary = false) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        this.grid.nativeElement.focus({ preventScroll: true });\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary).focus({ preventScroll: true });\n            });\n        this.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);\n    }\n    protected getRowByIndex(index, selector = this.getRowSelector()) {\n        return this.grid.nativeElement.querySelector(\n                `${selector}[data-rowindex=\"${index}\"]`);\n    }\n\n    protected getNextRowByIndex(nextIndex) {\n        return this.grid.tbody.nativeElement.querySelector(\n            `[data-rowindex=\"${nextIndex}\"]`);\n    }\n\n    private getAllRows() {\n        const selector = this.getRowSelector();\n        return this.grid.nativeElement.querySelectorAll(selector);\n    }\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-grid-cell';\n    }\n\n    protected getRowSelector(): string {\n        return 'igx-grid-row';\n    }\n}\n","import { Directive, ElementRef, forwardRef, HostListener, Inject, QueryList } from '@angular/core';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { first, tap } from 'rxjs/operators';\nimport { IgxGridNavigationService } from './grid-navigation.service';\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEdit]'\n})\nexport class IgxRowEditTemplateDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditText]'\n})\nexport class IgxRowEditTextDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditActions]'\n})\nexport class IgxRowEditActionsDirective { }\n\n\n// TODO: Refactor circular ref, deps and logic\n/** @hidden */\n@Directive({\n    selector: `[igxRowEditTabStop]`\n})\nexport class IgxRowEditTabStopDirective {\n    private get allTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.grid.rowEditTabs;\n    }\n\n    private grid: IgxGridBaseComponent;\n    private navigationService: IgxGridNavigationService;\n\n    constructor(\n        @Inject(forwardRef(() => IgxGridBaseComponent)) grid,\n        public element: ElementRef,\n        @Inject(forwardRef(() => IgxGridNavigationService)) navigationService) {\n            this.grid = grid;\n            this.navigationService = navigationService;\n            this.navigationService.grid = grid;\n        }\n    @HostListener('keydown.Tab', [`$event`])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    public handleTab(event: KeyboardEvent): void {\n        event.stopPropagation();\n        if (this.allTabs.length > 1) {\n            if ((this.allTabs.last ===  this && !event.shiftKey) ||\n                (this.allTabs.first ===  this && event.shiftKey)\n            ) {\n                this.move(event);\n            }\n        } else {\n            this.move(event);\n        }\n    }\n    private focusNextCell(rowIndex, cellIndex) {\n        const grid = this.grid as any;\n        grid.parentVirtDir.onChunkLoad.pipe(first(), tap(() => grid.markForCheck())).subscribe(() => {\n            grid.rowInEditMode.cells.find(c => c.visibleColumnIndex === cellIndex).element.nativeElement.focus();\n        });\n    }\n    private move(event: KeyboardEvent) {\n        event.preventDefault();\n        const horizontalScroll = this.grid.parentVirtDir.getHorizontalScroll();\n        const targetIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;\n        const targetCell = this.grid.rowInEditMode.cells.find(e => e.visibleColumnIndex === targetIndex);\n        if (!targetCell ||\n            !this.navigationService.isColumnFullyVisible(targetIndex)\n            || !this.navigationService.isColumnLeftFullyVisible(targetIndex)) {\n            this.focusNextCell(this.grid.rowInEditMode.index, targetIndex);\n            horizontalScroll.scrollLeft =\n            this.grid.rowInEditMode.virtDirRow.getColumnScrollLeft(this.navigationService.getColumnUnpinnedIndex(targetIndex));\n        } else {\n            targetCell.nativeElement.focus();\n        }\n    }\n}\n","/* tslint:disable */\nexport default [\n    {\n        name: 'add_filter',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 15v-3h-2v3h-3v2h3v3h2v-3h3v-2h-3zM5 10h10v2H5zM2 5h16v2H2zM8 15h4v2H8z\"/>\n      </svg>`\n    },\n    {\n        name: 'contains',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 3v18h18V3zm16 16H5V5h14z\"/>\n        <path d=\"M12 11.3a4.39 4.39 0 0 0-2.54.63 2.07 2.07 0 0 0-.9 1.78 2.29 2.29 0 0 0 .66 1.74 2.63 2.63 0 0 0 1.89.63 2.39 2.39 0 0 0 1.32-.37 3.05 3.05 0 0 0 1-.93 3.72 3.72 0 0 0 .08.57c0 .19.1.38.16.58h1.79a4.51 4.51 0 0 1-.21-.88 5.57 5.57 0 0 1-.07-.93v-3.5a2.44 2.44 0 0 0-.84-2 3.34 3.34 0 0 0-2.22-.7 3.54 3.54 0 0 0-2.3.72A1.93 1.93 0 0 0 9 10.29h1.71a.93.93 0 0 1 .29-.71 1.5 1.5 0 0 1 1-.29 1.45 1.45 0 0 1 1 .35 1.3 1.3 0 0 1 .37 1v.69zm1.4 1.08v1.17a1.61 1.61 0 0 1-.71.77 2.27 2.27 0 0 1-1.21.34 1.18 1.18 0 0 1-.84-.27.92.92 0 0 1-.3-.72 1.16 1.16 0 0 1 .44-.9 1.76 1.76 0 0 1 1.22-.39z\"/>\n      </svg>`\n    },\n    {\n        name: 'does_not_contain',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21,19.74V3H4.26L2.89,1.63,1.63,2.92,3,4.29V21H19.73l1.37,1.37,1.27-1.26ZM5,19V6.28l5.28,5.27a3.19,3.19,0,0,0-.81.38,2.07,2.07,0,0,0-.9,1.78,2.29,2.29,0,0,0,.66,1.74,2.63,2.63,0,0,0,1.89.63,2.39,2.39,0,0,0,1.32-.37,3.05,3.05,0,0,0,1-.93,3.72,3.72,0,0,0,.08.57c0,.19.1.38.16.58h1L17.73,19Zm5.79-6.23a1.31,1.31,0,0,1,.45-.25l1.37,1.36.28.29a1.57,1.57,0,0,1-.19.15,2.27,2.27,0,0,1-1.21.34,1.18,1.18,0,0,1-.84-.27.92.92,0,0,1-.3-.72A1.16,1.16,0,0,1,10.79,12.77Zm2.6-1.47h-.83L10.94,9.68l.08-.1a1.5,1.5,0,0,1,1-.29,1.45,1.45,0,0,1,1,.35,1.3,1.3,0,0,1,.37,1ZM19,17.74l-3.85-3.85V10.62a2.44,2.44,0,0,0-.84-2,3.34,3.34,0,0,0-2.22-.7,3.64,3.64,0,0,0-2.24.67L6.26,5H19Z\"/>\n    </svg>`\n    },\n    {\n        name: 'all',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M2 14h8v2H2zM2 6h12v2H2zM16 17l-3-3-1.5 1.5L16 20l7-7-1.5-1.5L16 17zM2 10h12v2H2z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 17h2v2H5zM13 17h2v2h-2zM5 13h2v2H5zM17 17h2v2h-2zM13 5h2v2h-2zM9 17h2v2H9zM17 9h2v2h-2zM17 13h2v2h-2zM17 5h2v2h-2zM5 9h2v2H5zM5 5h2v2H5zM9 5h2v2H9z\"/>\n      </svg>`\n    },\n    {\n        name: 'end_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M13.14 6.76L17.49 12l-4.35 5.24 1.54 1.28L20.09 12l-5.41-6.52-1.54 1.28z\"/>\n        <path d=\"M11.91 11h2v2h-2zM7.91 11h2v2h-2zM3.91 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'ends_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 14.5h2v2H3zM11 14.5h2v2h-2zM7 14.5h2v2H7zM20.8 14.8v-3A2.1 2.1 0 0 0 20 10a3 3 0 0 0-2-.6 3 3 0 0 0-2 .6 1.7 1.7 0 0 0-.7 1.5h1.5a.8.8 0 0 1 .3-.7 1.3 1.3 0 0 1 .9-.3 1.3 1.3 0 0 1 .9.4 1.1 1.1 0 0 1 .3.8v.6H18a3.8 3.8 0 0 0-2.2.6 1.8 1.8 0 0 0-.8 1.5 2 2 0 0 0 .6 1.6 2.3 2.3 0 0 0 1.6.6 2.1 2.1 0 0 0 1.2-.4 2.8 2.8 0 0 0 .8-.8 4.3 4.3 0 0 0 .1.5l.1.5H21a4.1 4.1 0 0 1-.2-.7 5.4 5.4 0 0 1 0-1zm-1.6-.5a1.5 1.5 0 0 1-.6.7 2 2 0 0 1-1 .2 1.1 1.1 0 0 1-.8-.2.8.8 0 0 1-.2-.6 1 1 0 0 1 .3-.8 1.5 1.5 0 0 1 1.1-.3h1.2z\"/>\n      </svg>`\n    },\n    {\n        name: 'equals',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 13.5h14v2H5zM5 8.5h14v2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 9.47L6 3v2.11L15.09 10 6 14.9v2.11l12-6.47V9.47z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 7.11L15.09 12 6 16.89V19l12-6.46v-1.08L6 5v2.11z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'is_after',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 7h4v10h-4v2h6V5h-6v2zM11 3h2v18h-2zM7 5h2v2H7zM3 5h2v2H3zM3 17h2v2H3zM3 13h2v2H3zM3 9h2v2H3zM7 17h2v2H7z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_before',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 19h6v-2H5V7h4V5H3v14zM11 3h2v18h-2zM15 5h2v2h-2zM19 5h2v2h-2zM19 13h2v2h-2zM15 17h2v2h-2zM19 17h2v2h-2zM19 9h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_false',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm4.31 9.79l-1.52 1.52L8 13.52l-2.79 2.79-1.52-1.52L6.48 12 3.69 9.21l1.52-1.52L8 10.48l2.79-2.79 1.52 1.52L9.52 12zM18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7z\"/>\n        <path d=\"M17.52 13.85l2.91-2.92-.78-.78-2.13 2.12-1.17-1.15-.38.37-.41.41.42.42L17 13.34l.52.51z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_not_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M16.58 6.07l.79-1.36-1.74-1-.78 1.35a7.5 7.5 0 0 0-7.43 12.87l-.79 1.36 1.74 1 .78-1.35a7.5 7.5 0 0 0 7.43-12.87zM6.5 12A5.5 5.5 0 0 1 12 6.5a5.65 5.65 0 0 1 1.84.32l-5.41 9.36A5.49 5.49 0 0 1 6.5 12zm5.5 5.5a5.65 5.65 0 0 1-1.84-.32l5.41-9.36A5.5 5.5 0 0 1 12 17.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M12 4.5a7.5 7.5 0 1 0 7.5 7.5A7.5 7.5 0 0 0 12 4.5zm0 13a5.5 5.5 0 1 1 5.5-5.5 5.5 5.5 0 0 1-5.5 5.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_true',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19.44 14.22zM16.56 14.22zM16.56 14.22L18 12.79l1.44 1.43.78-.78L18.79 12l1.43-1.44-.78-.78L18 11.21l-1.44-1.43-.78.78L17.21 12l-1.43 1.44.78.78z\"/>\n        <path d=\"M18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7zM8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm-.93 10.18l-3.38-3.37 1.13-1.12 2.25 2.25 4.11-4.12 1.13 1.12z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.5 14a4.48 4.48 0 1 0 4.5 4.5 4.47 4.47 0 0 0-4.5-4.5zm3.5 5.5h-4v2l-3-3 3-3v2h4zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 10v11H7v2h14a2 2 0 0 0 2-2V10z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.87 9l-2.99 3 2.99 3v-2.25h5.26v-1.5H8.87V9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 14.9L8.91 10 18 5.11V3L6 9.47v1.07l12 6.47V14.9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 12.54L18 19v-2.11L8.91 12 18 7.11V5L6 11.46v1.08z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M20 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2 6.74v-2h-4v-2h4v-2l3 3zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M11.13 11.25H5.88v1.5h5.25V15l3-3-3-3v2.25z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 9h2v2H5zM9 17h2v2H9zM13 17h2v2h-2zM17 9h2v2h-2zM17 5h2v2h-2zM5 17h2v2H5zM13 5h2v2h-2zM5 13h2v2H5zM19 15v-2h-2v.47L18.53 15H19zM11 7V5H9v.46L10.54 7H11zM2.76 1.76L1.5 3.06 20.97 22.5l1.26-1.26-8.89-8.89L2.76 1.76z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.37 4.71l-1.74-1-2.76 4.79H5v2h6.71l-1.73 3H5v2h3.82l-2.19 3.79 1.74 1 2.76-4.79H19v-2h-6.71l1.73-3H19v-2h-3.82l2.19-3.79z\"/>\n      </svg>`\n    },\n    {\n        name: 'start_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M18.1 11h2v2h-2zM10.1 11h2v2h-2z\"/>\n        <path d=\"M10.9 6.8L9.3 5.5 4 12l5.4 6.5 1.6-1.3L6.5 12 11 6.8zM14.1 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'starts_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M4.97 13.23h3.06L6.5 9.12l-1.53 4.11z\"/>\n        <path d=\"M5.89 7.5L2 16.5h1.72l.73-1.8h4.1l.73 1.8H11l-3.89-9zM5 13.23l1.5-4.11L8 13.23zM12 14.5h2v2h-2zM20 14.5h2v2h-2zM16 14.5h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 9h2v2H6zM6 13h2v2H6zM11 13h2v2h-2zM6 17h2v2H6zM11 17h2v2h-2zM11 9h2v2h-2zM16 9h2v2h-2zM21 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2.94 5.41l-1.75-1.76.69-.71 1.05 1L20 16.83l.71.71z\"/>\n        <path d=\"M5 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.85 13.15l-1.77-1.77-.88.89 2.65 2.65 4.95-4.96-.88-.88-4.07 4.07z\"/>\n      </svg>`\n    },\n    {\n        name: 'today',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n        <path d=\"M16.53 12.06L15.47 11l-4.88 4.88-2.12-2.12-1.06 1.06L10.59 18l5.94-5.94z\"/>\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 15h5v5h-5zM6 13h5v5H6zM13 6h5v5h-5zM6 6h5v5H6z\"/>\n        <path d=\"M20 2H4a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h9v-2H4V4h16v9h2V4a2 2 0 0 0-2-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'yesterday',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M10.68 15.38h6.13v-1.75h-6.13V11l-3.49 3.5 3.49 3.5v-2.62z\"/>\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n      </svg>`\n    },\n    {\n        name: 'pin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15.18 2.25l7.07 7.07-2.83-.01-3.54 3.55.01 4.24-3.53-3.54-5.66 5.66H5.28V17.8l5.66-5.66L7.4 8.61l4.24.01 3.55-3.54-.01-2.83z\"/>\n      </svg>`\n    },\n    {\n        name: 'unpin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M0 0h24v25H0V0z\"/>\n        <path d=\"M11.84 14.08L6.7 19.22H5.28V17.8l5.14-5.14L2 4.26 3.29 3l18 18L20 22.21zm4-.49l-5-5h.73l3.55-3.54v-2.8l7.07 7.07h-2.77l-3.54 3.54z\" />\n      </svg>`\n    }\n];\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-strategy';\nimport { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridSort',\n    pure: true\n})\nexport class IgxGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expressions: ISortingExpression[], id: string, pipeTrigger: number): any[] {\n        const grid = this.gridAPI.grid;\n        let result: any[];\n\n        if (!expressions.length) {\n            result = collection;\n        } else {\n            result = DataUtil.sort(cloneArray(collection), expressions);\n        }\n        grid.filteredSortedData = result;\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPreGroupBy',\n    pure: true\n})\nexport class IgxGridPreGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expression: IGroupingExpression | IGroupingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, groupsRecords: any[], pipeTrigger: number): IGroupByResult {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        state.expressions = grid.groupingExpressions;\n\n        if (!state.expressions.length) {\n            // empty the array without changing reference\n            groupsRecords.splice(0, groupsRecords.length);\n            return {\n                data: collection,\n                metadata: collection\n            };\n        }\n\n        state.expansion = grid.groupingExpansionState;\n        state.defaultExpanded = grid.groupsExpanded;\n\n        return DataUtil.group(cloneArray(collection), state, grid, groupsRecords);\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPostGroupBy',\n    pure: true\n})\nexport class IgxGridPostGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: IGroupByResult, expression: IGroupingExpression | IGroupingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, pipeTrigger: number): any[] {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        state.expressions = grid.groupingExpressions;\n\n        if (!state.expressions.length) {\n            return collection.data;\n        }\n\n        state.expansion = grid.groupingExpansionState;\n        state.defaultExpanded = grid.groupsExpanded;\n\n        return DataUtil.restoreGroups({\n            data: cloneArray(collection.data),\n            metadata: cloneArray(collection.metadata)\n        }, state);\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPaging',\n    pure: true\n})\nexport class IgxGridPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    public transform(collection: IGroupByResult, page = 0, perPage = 15, id: string, pipeTrigger: number): IGroupByResult {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: IGroupByResult = {\n            data: DataUtil.page(cloneArray(collection.data), state),\n            metadata: DataUtil.page(cloneArray(collection.metadata), state)\n        };\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridFiltering',\n    pure: true\n})\nexport class IgxGridFilteringPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    public transform(collection: any[], expressionsTree: IFilteringExpressionsTree,\n        id: string, pipeTrigger: number) {\n        const grid = this.gridAPI.grid;\n        const state = { expressionsTree: expressionsTree };\n\n        if (!state.expressionsTree ||\n            !state.expressionsTree.filteringOperands ||\n            state.expressionsTree.filteringOperands.length === 0) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        grid.filteredData = result;\n        return result;\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { IgxIconService } from '../../icon/icon.service';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IgxGridBaseComponent, IColumnResizeEventArgs, IGridDataBindable } from '../grid-base.component';\nimport icons from './svgIcons';\nimport { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\nimport { IgxGridSortingPipe } from '../grid/grid.pipes';\nimport { IgxDatePipeComponent } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { GridBaseAPIService } from '../api.service';\n\nconst FILTERING_ICONS_FONT_SET = 'filtering-icons';\n\n/**\n *@hidden\n */\nexport class ExpressionUI {\n    public expression: IFilteringExpression;\n    public beforeOperator: FilteringLogic;\n    public afterOperator: FilteringLogic;\n    public isSelected = false;\n    public isVisible = true;\n}\n\n/**\n *@hidden\n */\n@Injectable()\nexport class IgxFilteringService implements OnDestroy {\n\n    private columnsWithComplexFilter = new Set<string>();\n    private areEventsSubscribed = false;\n    private destroy$ = new Subject<boolean>();\n    private isFiltering = false;\n    private columnToExpressionsMap = new Map<string, ExpressionUI[]>();\n    private _datePipe: IgxDatePipeComponent;\n    private columnStartIndex = -1;\n\n    public gridId: string;\n    public isFilterRowVisible = false;\n    public filteredColumn: IgxColumnComponent = null;\n    public selectedExpression: IFilteringExpression = null;\n    public columnToFocus: IgxColumnComponent = null;\n    public shouldFocusNext = false;\n    public columnToMoreIconHidden = new Map<string, boolean>();\n\n    grid: IgxGridBaseComponent;\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, private iconService: IgxIconService) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public get displayContainerWidth() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);\n    }\n\n    public get displayContainerScrollLeft() {\n        return parseInt(this.grid.parentVirtDir.getHorizontalScroll().scrollLeft, 10);\n    }\n\n    public get areAllColumnsInView() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10) === 0;\n    }\n\n    public get unpinnedFilterableColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup && col.filterable);\n    }\n\n    public get unpinnedColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup);\n    }\n\n    public get datePipe(): IgxDatePipeComponent {\n        if (!this._datePipe) {\n            this._datePipe = new IgxDatePipeComponent(this.grid.locale);\n        }\n        return this._datePipe;\n    }\n\n    /**\n     * Subscribe to grid's events.\n     */\n    public subscribeToEvents() {\n        if (!this.areEventsSubscribed) {\n            this.areEventsSubscribed = true;\n\n            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IColumnResizeEventArgs) => {\n                this.updateFilteringCell(eventArgs.column);\n            });\n\n            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IForOfState) => {\n                if (eventArgs.startIndex !== this.columnStartIndex) {\n                    this.columnStartIndex = eventArgs.startIndex;\n                    this.grid.filterCellList.forEach((filterCell) => {\n                        filterCell.updateFilterCellArea();\n                    });\n                }\n                if (this.columnToFocus) {\n                    this.focusFilterCellChip(this.columnToFocus, false);\n                    this.columnToFocus = null;\n                }\n            });\n\n            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.grid.filterCellList.forEach((filterCell) => {\n                    filterCell.updateFilterCellArea();\n                });\n            });\n        }\n    }\n\n    /**\n     * Internal method to create expressionsTree and filter grid used in both filter modes.\n     */\n    public filterInternal(field: string, expressions: FilteringExpressionsTree | Array<ExpressionUI> = null): void {\n        this.isFiltering = true;\n\n        let expressionsTree;\n        if (expressions instanceof FilteringExpressionsTree) {\n            expressionsTree = expressions;\n        } else {\n            expressionsTree = this.createSimpleFilteringTree(field, expressions);\n        }\n\n        if (expressionsTree.filteringOperands.length === 0) {\n            this.clearFilter(field);\n        } else {\n            this.filter(field, null, expressionsTree);\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Execute filtering on the grid.\n     */\n    public filter(field: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        const col = this.gridAPI.get_column_by_name(field);\n        const filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);\n\n        if (conditionOrExpressionTree) {\n            this.gridAPI.filter(field, value, conditionOrExpressionTree, filteringIgnoreCase);\n        } else {\n            const expressionsTreeForColumn = this.grid.filteringExpressionsTree.find(field);\n            if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {\n                this.gridAPI.filter(field, value, expressionsTreeForColumn, filteringIgnoreCase);\n            } else {\n                const expressionForColumn = expressionsTreeForColumn as IFilteringExpression;\n                this.gridAPI.filter(field, value, expressionForColumn.condition, filteringIgnoreCase);\n            }\n        }\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(col.filteringExpressionsTree));\n    }\n\n    /**\n     * Clear the filter of a given column.\n     */\n    public clearFilter(field: string): void {\n        if (field) {\n            const column = this.gridAPI.get_column_by_name(field);\n            if (!column) {\n                return;\n            }\n        }\n\n        this.isFiltering = true;\n\n        this.gridAPI.clear_filter(field);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(null));\n\n        if (field) {\n            const expressions = this.getExpressions(field);\n            expressions.length = 0;\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     */\n    public filterGlobal(value: any, condition?, ignoreCase?) {\n        this.gridAPI.filter_global(value, condition, ignoreCase);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(this.grid.filteringExpressionsTree));\n    }\n\n    /**\n     * Register filtering SVG icons in the icon service.\n     */\n    public registerSVGIcons(): void {\n        for (const icon of icons) {\n            if (!this.iconService.isSvgIconCached(icon.name, FILTERING_ICONS_FONT_SET)) {\n                this.iconService.addSvgIconFromText(icon.name, icon.value, FILTERING_ICONS_FONT_SET);\n            }\n        }\n    }\n\n    /**\n     * Returns the ExpressionUI array for a given column.\n     */\n    public getExpressions(columnId: string): ExpressionUI[] {\n        if (!this.columnToExpressionsMap.has(columnId)) {\n            const column = this.grid.columns.find((col) => col.field === columnId);\n            const expressionUIs = new Array<ExpressionUI>();\n\n            this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);\n            this.columnToExpressionsMap.set(columnId, expressionUIs);\n\n            return expressionUIs;\n        }\n\n        return this.columnToExpressionsMap.get(columnId);\n    }\n\n    /**\n     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.\n     */\n    public refreshExpressions() {\n        if (!this.isFiltering) {\n            this.columnsWithComplexFilter.clear();\n\n            this.columnToExpressionsMap.forEach((value: ExpressionUI[], key: string) => {\n                const column = this.grid.columns.find((col) => col.field === key);\n                if (column) {\n                    value.length = 0;\n\n                    this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, value);\n\n                    const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n                    if (isComplex) {\n                        this.columnsWithComplexFilter.add(key);\n                    }\n\n                    this.updateFilteringCell(column);\n                } else {\n                    this.columnToExpressionsMap.delete(key);\n                }\n            });\n        }\n    }\n\n    /**\n     * Remove an ExpressionUI for a given column.\n     */\n    public removeExpression(columnId: string, indexToRemove: number) {\n        const expressionsList = this.getExpressions(columnId);\n\n        if (indexToRemove === 0 && expressionsList.length > 1) {\n            expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === expressionsList.length - 1) {\n            expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;\n            expressionsList[0].beforeOperator = null;\n            expressionsList[expressionsList.length - 1].afterOperator = null;\n        }\n\n        expressionsList.splice(indexToRemove, 1);\n    }\n\n    /**\n     * Generate filtering tree for a given column from existing ExpressionUIs.\n     */\n    public createSimpleFilteringTree(columnId: string, expressionUIList = null): FilteringExpressionsTree {\n        const expressionsList = expressionUIList ? expressionUIList : this.getExpressions(columnId);\n        const expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);\n        let currAndBranch: FilteringExpressionsTree;\n        let currExpressionUI: ExpressionUI;\n\n        for (let i = 0; i < expressionsList.length; i++) {\n            currExpressionUI = expressionsList[i];\n\n            if (!currExpressionUI.expression.condition.isUnary && currExpressionUI.expression.searchVal === null) {\n                if (currExpressionUI.afterOperator === FilteringLogic.And && !currAndBranch) {\n                    currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                    expressionsTree.filteringOperands.push(currAndBranch);\n                }\n                continue;\n            }\n\n            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||\n                 currExpressionUI.beforeOperator === FilteringLogic.Or) &&\n                currExpressionUI.afterOperator === FilteringLogic.And) {\n\n                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                expressionsTree.filteringOperands.push(currAndBranch);\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n\n            } else if (currExpressionUI.beforeOperator === FilteringLogic.And) {\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n            } else {\n                expressionsTree.filteringOperands.push(currExpressionUI.expression);\n                currAndBranch = null;\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * Returns whether a complex filter is applied to a given column.\n     */\n    public isFilterComplex(columnId: string) {\n        if (this.columnsWithComplexFilter.has(columnId)) {\n            return true;\n        }\n\n        const column = this.grid.columns.find((col) => col.field === columnId);\n        const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n        if (isComplex) {\n            this.columnsWithComplexFilter.add(columnId);\n        }\n\n        return isComplex;\n    }\n\n    /**\n     * Returns the string representation of the FilteringLogic operator.\n     */\n    public getOperatorAsString(operator: FilteringLogic): any {\n        if (operator === 0) {\n            return this.grid.resourceStrings.igx_grid_filter_operator_and;\n        } else {\n            return this.grid.resourceStrings.igx_grid_filter_operator_or;\n        }\n    }\n\n    /**\n     * Generate the label of a chip from a given filtering expression.\n     */\n    public getChipLabel(expression: IFilteringExpression): any {\n        if (expression.condition.isUnary) {\n            return this.grid.resourceStrings[`igx_grid_filter_${expression.condition.name}`] || expression.condition.name;\n        } else if (expression.searchVal instanceof Date) {\n            return this.datePipe.transform(expression.searchVal, this.grid.locale);\n        } else {\n            return expression.searchVal;\n        }\n    }\n\n    /**\n     * Updates the content of a filterCell.\n     */\n    public updateFilteringCell(column: IgxColumnComponent) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.updateFilterCellArea();\n        }\n    }\n\n    /**\n     * Focus a chip in a filterCell.\n     */\n    public focusFilterCellChip(column: IgxColumnComponent, focusFirst: boolean) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.focusChip(focusFirst);\n        }\n    }\n\n    /**\n     * Focus the close button in the filtering row.\n     */\n    public focusFilterRowCloseButton() {\n        this.grid.filteringRow.closeButton.nativeElement.focus();\n    }\n\n    public get filteredData() {\n        return this.grid.filteredData;\n    }\n\n    public get sortedData() {\n        const sortData = new IgxGridSortingPipe((this.grid as any).gridAPI)\n            .transform(this.grid.data, this.grid.sortingExpressions, this.gridId, 0);\n        return sortData;\n    }\n\n    /**\n     * Scrolls to a filterCell.\n     */\n    public scrollToFilterCell(column: IgxColumnComponent, shouldFocusNext: boolean) {\n        this.grid.nativeElement.focus({preventScroll: true});\n        this.columnToFocus = column;\n        this.shouldFocusNext = shouldFocusNext;\n\n        let currentColumnRight = 0;\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.unpinnedColumns[index].width, 10);\n            if (this.unpinnedColumns[index] === column) {\n                currentColumnLeft = currentColumnRight - parseInt(this.unpinnedColumns[index].width, 10);\n                break;\n            }\n        }\n\n        const forOfDir = this.grid.headerContainer;\n        const width = this.displayContainerWidth + this.displayContainerScrollLeft;\n        if (shouldFocusNext) {\n            forOfDir.getHorizontalScroll().scrollLeft += currentColumnRight - width;\n        } else {\n            forOfDir.getHorizontalScroll().scrollLeft = currentColumnLeft;\n        }\n    }\n\n    private isFilteringTreeComplex(expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (!expressions) {\n            return false;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            if (expressionsTree.operator === FilteringLogic.Or) {\n                const andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);\n\n                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.\n                return andOperatorsCount > 1;\n            }\n\n            let isComplex = false;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);\n            }\n\n            return isComplex;\n        }\n\n        return false;\n    }\n\n    private getChildAndOperatorsCount(expressions: IFilteringExpressionsTree): number {\n        let count = 0;\n        let operand;\n        for (let i = 0; i < expressions.filteringOperands.length; i++) {\n            operand = expressions[i];\n            if (operand instanceof FilteringExpressionsTree) {\n                if (operand.operator === FilteringLogic.And) {\n                    count++;\n                }\n\n                count = count + this.getChildAndOperatorsCount(operand);\n            }\n        }\n\n        return count;\n    }\n\n    public generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression,\n        operator: FilteringLogic,\n        expressionsUIs: ExpressionUI[]): void {\n        this.generateExpressionsListRecursive(expressions, operator, expressionsUIs);\n\n        // The beforeOperator of the first expression and the afterOperator of the last expression should be null\n        if (expressionsUIs.length) {\n            expressionsUIs[expressionsUIs.length - 1].afterOperator = null;\n        }\n    }\n\n    private generateExpressionsListRecursive(expressions: IFilteringExpressionsTree | IFilteringExpression,\n                                    operator: FilteringLogic,\n                                    expressionsUIs: ExpressionUI[]): void {\n        if (!expressions) {\n            return;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                this.generateExpressionsListRecursive(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);\n            }\n            if (expressionsUIs.length) {\n                expressionsUIs[expressionsUIs.length - 1].afterOperator = operator;\n            }\n        } else {\n            const exprUI = new ExpressionUI();\n            exprUI.expression = expressions as IFilteringExpression;\n            exprUI.afterOperator = operator;\n\n            const prevExprUI = expressionsUIs[expressionsUIs.length - 1];\n            if (prevExprUI) {\n                exprUI.beforeOperator = prevExprUI.afterOperator;\n            }\n\n            expressionsUIs.push(exprUI);\n        }\n    }\n\n    public isFilteringExpressionsTreeEmpty(): boolean {\n        const expressionTree = this.grid.filteringExpressionsTree;\n        if (!expressionTree.filteringOperands || !expressionTree.filteringOperands.length) {\n            return true;\n        }\n\n        let expr: any;\n\n        for (let i = 0; i < expressionTree.filteringOperands.length; i++) {\n            expr = expressionTree.filteringOperands[i];\n\n            if ((expr instanceof FilteringExpressionsTree)) {\n                const exprTree = expr as FilteringExpressionsTree;\n                if (exprTree.filteringOperands && exprTree.filteringOperands.length) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","import { SimpleChanges, SimpleChange } from '@angular/core';\n\n/**\n* @hidden\n*/\nexport function WatchChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const oldValue = this[key];\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                originalSetter.call(this, val);\n                if (this.ngOnChanges) {\n                    // in case wacthed prop changes trigger ngOnChanges manually\n                    const changes: SimpleChanges = {\n                        [key]: new SimpleChange(oldValue, val, false)\n                    };\n                    this.ngOnChanges(changes);\n               }\n            }\n        };\n        return propDesc;\n    };\n}\n","import {\n    AfterViewInit,\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ViewChild\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxFilterOptions } from '../../../directives/filter/filter.directive';\nimport { IChangeCheckboxEventArgs } from '../../../checkbox/checkbox.component';\nimport { IgxInputDirective } from '../../../directives/input/input.directive';\nimport { DisplayDensity } from '../../../core/density';\nimport { IgxForOfDirective } from '../../../directives/for-of/for_of.directive';\nimport { FilterListItem } from './grid.excel-style-filtering.component';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-search',\n    templateUrl: './excel-style-search.component.html'\n})\nexport class IgxExcelStyleSearchComponent implements AfterViewInit {\n\n    public searchValue: any;\n\n    @Input()\n    public data: FilterListItem[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('input', { read: IgxInputDirective })\n    public searchInput: IgxInputDirective;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild(IgxForOfDirective)\n    protected virtDir: IgxForOfDirective<any>;\n\n    constructor() {}\n\n    public ngAfterViewInit() {\n        requestAnimationFrame(() => {\n            this.virtDir.recalcUpdateSizes();\n        });\n    }\n\n    public clearInput() {\n        this.searchValue = null;\n    }\n\n    public onCheckboxChange(eventArgs: IChangeCheckboxEventArgs) {\n        const selectedIndex = this.data.indexOf(eventArgs.checkbox.value);\n        if (selectedIndex === 0) {\n            this.data.forEach(element => {\n                element.isSelected = eventArgs.checked;\n                this.data[0].indeterminate = false;\n            });\n        } else {\n            eventArgs.checkbox.value.isSelected = eventArgs.checked;\n            if (!this.data.slice(1, this.data.length).find(el => el.isSelected === false)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = true;\n            } else if (!this.data.slice(1, this.data.length).find(el => el.isSelected === true)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = false;\n            } else {\n                this.data[0].indeterminate = true;\n            }\n        }\n        eventArgs.checkbox.nativeCheckbox.nativeElement.blur();\n    }\n\n    public get itemSize() {\n        let itemSize = '48px';\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy: itemSize = '32px'; break;\n            case DisplayDensity.compact: itemSize = '28px'; break;\n            default: break;\n        }\n        return itemSize;\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    AfterViewInit,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectorRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { ExpressionUI } from '../grid-filtering.service';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDropDownItemComponent, IgxDropDownComponent } from '../../../drop-down/index';\nimport { IgxInputGroupComponent, IgxInputDirective } from '../../../input-group/index';\nimport { DataType } from '../../../data-operations/data-util';\nimport { IFilteringOperation } from '../../../data-operations/filtering-condition';\nimport { OverlaySettings, ConnectedPositioningStrategy, CloseScrollStrategy } from '../../../services/index';\nimport { KEYS } from '../../../core/utils';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\nexport interface ILogicOperatorChangedArgs {\n    target: ExpressionUI;\n    newValue: FilteringLogic;\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-default-expression',\n    templateUrl: './excel-style-default-expression.component.html'\n})\nexport class IgxExcelStyleDefaultExpressionComponent implements AfterViewInit {\n\n    private _dropDownOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(),\n        scrollStrategy: new CloseScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public expressionUI: ExpressionUI;\n\n    @Input()\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @Output()\n    public onExpressionRemoved = new EventEmitter<ExpressionUI>();\n\n    @Output()\n    public onLogicOperatorChanged = new EventEmitter<ILogicOperatorChangedArgs>();\n\n    @ViewChild('inputGroupConditions', { read: IgxInputGroupComponent })\n    protected inputGroupConditions: IgxInputGroupComponent;\n\n    @ViewChild('inputValues', { read: IgxInputDirective })\n    protected inputValuesDirective: IgxInputDirective;\n\n    @ViewChild('dropdownConditions', { read: IgxDropDownComponent })\n    protected dropdownConditions: IgxDropDownComponent;\n\n    @ViewChild('logicOperatorButtonGroup', { read: IgxButtonGroupComponent })\n    protected logicOperatorButtonGroup: IgxButtonGroupComponent;\n\n    protected get inputValuesElement() {\n        return this.inputValuesDirective;\n    }\n\n    get isLast(): boolean {\n        return this.expressionsList[this.expressionsList.length - 1] === this.expressionUI;\n    }\n\n    get isSingle(): boolean {\n        return this.expressionsList.length === 1;\n    }\n\n    get inputConditionsPlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_condition_placeholder'];\n    }\n\n    get inputValuePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_placeholder'];\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.Number:\n                return 'number';\n            default:\n                return 'text';\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._dropDownOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._dropDownOverlaySettings.positionStrategy.settings.target = this.inputGroupConditions.element.nativeElement;\n    }\n\n    public focus() {\n        // use requestAnimationFrame to focus the values input because when initializing the component\n        // datepicker's input group is not yet fully initialized\n        requestAnimationFrame(() => this.inputValuesElement.focus());\n    }\n\n    public isConditionSelected(conditionName: string): boolean {\n        return this.expressionUI.expression.condition && this.expressionUI.expression.condition.name === conditionName;\n    }\n\n    public getConditionName(condition: IFilteringOperation) {\n        return condition ? this.translateCondition(condition.name) : null;\n    }\n\n    public getInputWidth() {\n        return this.inputGroupConditions.element.nativeElement.offsetWidth + 'px';\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expressionUI.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else if (!this.expressionUI.expression.condition) {\n            return 'filter_list';\n        } else {\n            return this.expressionUI.expression.condition.iconName;\n        }\n    }\n\n    public toggleCustomDialogDropDown() {\n        this.dropdownConditions.toggle(this._dropDownOverlaySettings);\n    }\n\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    public onConditionsChanged(eventArgs: any) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expressionUI.expression.condition = this.getCondition(value);\n\n        this.focus();\n    }\n\n    public isValueSelected(value: string): boolean {\n        if (this.expressionUI.expression.searchVal) {\n            return this.expressionUI.expression.searchVal === value;\n        } else {\n            return false;\n        }\n    }\n\n    public onValuesInput(eventArgs) {\n        this.expressionUI.expression.searchVal = this.transformValue(eventArgs.target.value);\n    }\n\n    public onLogicOperatorButtonClicked(eventArgs, buttonIndex: number) {\n        if (this.logicOperatorButtonGroup.selectedButtons.length === 0) {\n            eventArgs.stopPropagation();\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n        } else {\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onLogicOperatorKeyDown(eventArgs, buttonIndex: number) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onRemoveButtonClick() {\n        this.onExpressionRemoved.emit(this.expressionUI);\n    }\n\n    public onInputConditionsKeyDown(eventArgs) {\n        if (eventArgs.altKey && (eventArgs.key === KEYS.DOWN_ARROW || eventArgs.key === KEYS.DOWN_ARROW_IE)) {\n            this.toggleCustomDialogDropDown();\n        }\n\n        if (eventArgs.key === KEYS.TAB && eventArgs.shiftKey && this.expressionsList[0] === this.expressionUI) {\n            eventArgs.preventDefault();\n        }\n\n        event.stopPropagation();\n    }\n\n    private transformValue(value): any {\n        if (this.column.dataType === DataType.Number) {\n            value = parseFloat(value);\n        } else if (this.column.dataType === DataType.Boolean) {\n            value = Boolean(value);\n        }\n\n        return value;\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxDatePickerComponent } from '../../../date-picker/date-picker.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-date-expression',\n    templateUrl: './excel-style-date-expression.component.html'\n})\nexport class IgxExcelStyleDateExpressionComponent extends IgxExcelStyleDefaultExpressionComponent {\n\n    @ViewChild('datePicker', { read: IgxDatePickerComponent })\n    private datePicker: IgxDatePickerComponent;\n\n    protected get inputValuesElement() {\n        return this.datePicker.getEditElement();\n    }\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    get inputDatePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_date_placeholder'];\n    }\n\n    public openDatePicker(openDialog: Function) {\n        openDialog();\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ChangeDetectorRef,\n    ViewChild,\n    AfterViewInit,\n    TemplateRef,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DataType } from '../../../data-operations/data-util';\nimport {\n    IgxStringFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport {\n    ConnectedPositioningStrategy,\n    OverlaySettings,\n    VerticalAlignment,\n    PositionSettings,\n    HorizontalAlignment,\n    IgxOverlayService,\n    AbsoluteScrollStrategy\n} from '../../../services/index';\nimport { ILogicOperatorChangedArgs, IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { KEYS } from '../../../core/utils';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-custom-dialog',\n    templateUrl: './excel-style-custom-dialog.component.html'\n})\nexport class IgxExcelStyleCustomDialogComponent implements AfterViewInit {\n\n    @Input()\n    public expressionsList = new Array<ExpressionUI>();\n\n    private _customDialogPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _customDialogOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._customDialogPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public selectedOperator: string;\n\n    @Input()\n    public filteringService: IgxFilteringService;\n\n    @Input()\n    public overlayComponentId: string;\n\n    @Input()\n    public overlayService: IgxOverlayService;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChildren(IgxExcelStyleDefaultExpressionComponent)\n    private expressionComponents: QueryList<IgxExcelStyleDefaultExpressionComponent>;\n\n    @ViewChildren(IgxExcelStyleDateExpressionComponent)\n    private expressionDateComponents: QueryList<IgxExcelStyleDateExpressionComponent>;\n\n    @ViewChild('toggle', { read: IgxToggleDirective })\n    public toggle: IgxToggleDirective;\n\n    @ViewChild('defaultExpressionTemplate', { read: TemplateRef })\n    protected defaultExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('dateExpressionTemplate', { read: TemplateRef })\n    protected dateExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('expressionsContainer')\n    protected expressionsContainer: ElementRef;\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._customDialogOverlaySettings.outlet = this.grid.outlet;\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.dateExpressionTemplate;\n        }\n\n        return this.defaultExpressionTemplate;\n    }\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    public onCustomDialogOpening() {\n        if (this.selectedOperator) {\n            this.createInitialExpressionUIElement();\n        }\n    }\n\n    public onCustomDialogOpened() {\n        if (this.expressionComponents.first) {\n            this.expressionComponents.first.focus();\n        }\n    }\n\n    public open() {\n        this._customDialogOverlaySettings.positionStrategy.settings.target =\n            this.grid.rootGrid ? this.grid.rootGrid.nativeElement : this.grid.nativeElement;\n        this.toggle.open(this._customDialogOverlaySettings);\n    }\n\n    public onClearButtonClick() {\n        this.filteringService.clearFilter(this.column.field);\n        this.createInitialExpressionUIElement();\n        this.cdr.detectChanges();\n    }\n\n    public closeDialog() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n        }\n    }\n\n    public onApplyButtonClick() {\n        this.expressionsList = this.expressionsList.filter(\n            element => element.expression.condition &&\n            (element.expression.searchVal || element.expression.searchVal === 0 || element.expression.condition.isUnary));\n\n        if (this.expressionsList.length > 0) {\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.filteringService.filterInternal(this.column.field, this.expressionsList);\n        this.closeDialog();\n    }\n\n    public onAddButtonClick() {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        this.expressionsList[this.expressionsList.length - 1].afterOperator = FilteringLogic.And;\n        exprUI.beforeOperator = this.expressionsList[this.expressionsList.length - 1].afterOperator;\n\n        this.expressionsList.push(exprUI);\n\n        this.markChildrenForCheck();\n        this.scrollToBottom();\n    }\n\n    public onExpressionRemoved(event: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(event);\n\n        if (indexToRemove === 0 && this.expressionsList.length > 1) {\n            this.expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === this.expressionsList.length - 1) {\n            this.expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            this.expressionsList[indexToRemove - 1].afterOperator = this.expressionsList[indexToRemove + 1].beforeOperator;\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.expressionsList.splice(indexToRemove, 1);\n\n        this.cdr.detectChanges();\n\n        this.markChildrenForCheck();\n    }\n\n    public onLogicOperatorChanged(event: ILogicOperatorChangedArgs) {\n        const index = this.expressionsList.indexOf(event.target);\n        event.target.afterOperator = event.newValue;\n        if (index + 1 < this.expressionsList.length) {\n            this.expressionsList[index + 1].beforeOperator = event.newValue;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        eventArgs.stopPropagation();\n    }\n\n    public onApplyButtonKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.TAB && !eventArgs.shiftKey) {\n            eventArgs.stopPropagation();\n            eventArgs.preventDefault();\n        }\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n\n    private markChildrenForCheck() {\n        this.expressionComponents.forEach(x => x.cdr.markForCheck());\n        this.expressionDateComponents.forEach(x => x.cdr.markForCheck());\n    }\n\n    private createInitialExpressionUIElement() {\n        this.expressionsList = [];\n        const firstExprUI = new ExpressionUI();\n\n        firstExprUI.expression = {\n            condition: this.createCondition(this.selectedOperator),\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n        firstExprUI.afterOperator = FilteringLogic.And;\n\n        this.expressionsList.push(firstExprUI);\n\n        const secondExprUI = new ExpressionUI();\n        secondExprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        secondExprUI.beforeOperator = FilteringLogic.And;\n\n        this.expressionsList.push(secondExprUI);\n    }\n\n    private scrollToBottom() {\n        requestAnimationFrame(() => {\n            this.expressionsContainer.nativeElement.scrollTop = this.expressionsContainer.nativeElement.scrollHeight;\n        });\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-sorting',\n    templateUrl: './excel-style-sorting.component.html'\n})\nexport class IgxExcelStyleSortingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild('sortButtonGroup', { read: IgxButtonGroupComponent })\n    public sortButtonGroup: IgxButtonGroupComponent;\n\n    constructor() {}\n\n    public onSortButtonClicked(sortDirection) {\n        if (this.sortButtonGroup.selectedIndexes.length === 0) {\n            if (this.grid.isColumnGrouped(this.column.field)) {\n                this.selectButton(sortDirection);\n            } else {\n                this.grid.clearSort(this.column.field);\n            }\n        } else {\n            this.grid.sort({ fieldName: this.column.field, dir: sortDirection, ignoreCase: true });\n        }\n    }\n\n    public selectButton(sortDirection: number) {\n        if (sortDirection === 1) {\n            this.sortButtonGroup.selectButton(0);\n        } else {\n            this.sortButtonGroup.selectButton(1);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ViewChild,\n    HostBinding,\n    ChangeDetectionStrategy,\n    TemplateRef,\n    Directive,\n    OnDestroy,\n    AfterViewInit,\n    ElementRef\n} from '@angular/core';\nimport {\n    HorizontalAlignment,\n    VerticalAlignment,\n    ConnectedPositioningStrategy,\n    OverlaySettings,\n    IgxOverlayService,\n    AbsoluteScrollStrategy\n} from '../../../services/index';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport {\n    IFilteringOperation,\n    IgxStringFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxDateFilteringOperand,\n    InFilteringOperation,\n    InDateFilteringOperation\n} from '../../../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { cloneArray, KEYS } from '../../../core/utils';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { Subscription, Subject } from 'rxjs';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { ISelectionEventArgs, IgxDropDownComponent } from '../../../drop-down';\nimport { IgxColumnComponent } from '../../column.component';\n\n/**\n *@hidden\n */\nexport class FilterListItem {\n    public value: any;\n    public label: any;\n    public isSelected: boolean;\n    public indeterminate: boolean;\n    public isSpecial = false;\n}\n\n@Directive({\n    selector: '[igxExcelStyleSortingTemplate]'\n})\nexport class IgxExcelStyleSortingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleMovingTemplate]'\n})\nexport class IgxExcelStyleMovingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleHidingTemplate]'\n})\nexport class IgxExcelStyleHidingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStylePinningTemplate]'\n})\nexport class IgxExcelStylePinningTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-excel-style-filtering',\n    templateUrl: './grid.excel-style-filtering.component.html'\n})\nexport class IgxGridExcelStyleFilteringComponent implements OnDestroy, AfterViewInit {\n    private static readonly filterOptimizationThreshold = 2;\n\n    private shouldOpenSubMenu = true;\n    private expressionsList = new Array<ExpressionUI>();\n    private destroy$ = new Subject<boolean>();\n    private containsNullOrEmpty = false;\n    private selectAllSelected = true;\n    private selectAllIndeterminate = false;\n    private filterValues = new Set<any>();\n\n    protected columnMoving = new Subscription();\n\n    public column: IgxColumnComponent;\n    public filteringService: IgxFilteringService;\n    public listData = new Array<FilterListItem>();\n    public uniqueValues = [];\n    public overlayService: IgxOverlayService;\n    public overlayComponentId: string;\n\n    private _subMenuPositionSettings = {\n        verticalStartPoint: VerticalAlignment.Top\n    };\n\n    private _subMenuOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._subMenuPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @HostBinding('class.igx-excel-filter')\n    className = 'igx-excel-filter';\n\n    @ViewChild('dropdown', { read: ElementRef })\n    public mainDropdown: ElementRef;\n\n    @ViewChild('subMenu', { read: IgxDropDownComponent })\n    public subMenu: IgxDropDownComponent;\n\n    @ViewChild('customDialog', { read: IgxExcelStyleCustomDialogComponent })\n    public customDialog: IgxExcelStyleCustomDialogComponent;\n\n    @ViewChild('excelStyleSearch', { read: IgxExcelStyleSearchComponent })\n    protected excelStyleSearch: IgxExcelStyleSearchComponent;\n\n    @ViewChild('excelStyleSorting', { read: IgxExcelStyleSortingComponent })\n    protected excelStyleSorting: IgxExcelStyleSortingComponent;\n\n    @ViewChild('defaultExcelStyleSortingTemplate', { read: TemplateRef })\n    protected defaultExcelStyleSortingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStyleHidingTemplate', { read: TemplateRef })\n    protected defaultExcelStyleHidingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStyleMovingTemplate', { read: TemplateRef })\n    protected defaultExcelStyleMovingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStylePinningTemplate', { read: TemplateRef })\n    protected defaultExcelStylePinningTemplate: TemplateRef<any>;\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    get subMenuText() {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return this.grid.resourceStrings.igx_grid_excel_boolean_filter;\n            case DataType.Number:\n                return this.grid.resourceStrings.igx_grid_excel_number_filter;\n            case DataType.Date:\n                return this.grid.resourceStrings.igx_grid_excel_date_filter;\n            default:\n                return this.grid.resourceStrings.igx_grid_excel_text_filter;\n        }\n    }\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    ngAfterViewInit(): void {\n        this.expressionsList = new Array<ExpressionUI>();\n        this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);\n        if (this.expressionsList && this.expressionsList.length &&\n            this.expressionsList[0].expression.condition.name !== 'in') {\n            this.customDialog.expressionsList = this.expressionsList;\n        }\n        this.populateColumnData();\n\n        if (this.excelStyleSorting) {\n            const se = this.grid.sortingExpressions.find(expr => expr.fieldName === this.column.field);\n            if (se) {\n                this.excelStyleSorting.selectButton(se.dir);\n            }\n        }\n\n        requestAnimationFrame(() => {\n            this.excelStyleSearch.searchInput.nativeElement.focus();\n        });\n    }\n\n    public clearFilterClass() {\n        if (this.column.filteringExpressionsTree) {\n            return 'igx-excel-filter__actions-clear';\n        }\n\n        return 'igx-excel-filter__actions-clear--disabled';\n    }\n\n    public initialize(column: IgxColumnComponent, filteringService: IgxFilteringService, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.column = column;\n        this.filteringService = filteringService;\n        this.overlayService = overlayService;\n        this.overlayComponentId = overlayComponentId;\n\n        this._subMenuOverlaySettings.outlet = this.grid.outlet;\n\n        this.columnMoving = this.grid.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.closeDropdown();\n        });\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public onPin() {\n        this.column.pinned = !this.column.pinned;\n        this.closeDropdown();\n    }\n\n    public onHide() {\n        this.column.hidden = true;\n        this.grid.onColumnVisibilityChanged.emit({ column: this.column, newValue: true });\n        this.closeDropdown();\n    }\n\n    public onTextFilterClick(eventArgs) {\n        if (this.shouldOpenSubMenu) {\n            this._subMenuOverlaySettings.positionStrategy.settings.target = eventArgs.currentTarget;\n\n            const gridRect = this.grid.nativeElement.getBoundingClientRect();\n            const dropdownRect = this.mainDropdown.nativeElement.getBoundingClientRect();\n\n            let x = dropdownRect.left + dropdownRect.width;\n            let x1 = gridRect.left + gridRect.width;\n            x += window.pageXOffset;\n            x1 += window.pageXOffset;\n            if (Math.abs(x - x1) < 200) {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Left;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Left;\n            } else {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Right;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Right;\n            }\n\n            this.subMenu.open(this._subMenuOverlaySettings);\n            this.shouldOpenSubMenu = false;\n        }\n    }\n\n    public onTextFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.onTextFilterClick(eventArgs);\n        }\n    }\n\n    public onSubMenuClosed() {\n        requestAnimationFrame(() => {\n            this.shouldOpenSubMenu = true;\n        });\n    }\n\n    public onSubMenuSelection(eventArgs: ISelectionEventArgs) {\n        this.customDialog.selectedOperator = eventArgs.newSelection.value;\n        eventArgs.cancel = true;\n        this.mainDropdown.nativeElement.style.display = 'none';\n        this.subMenu.close();\n        this.customDialog.open();\n    }\n\n    private areExpressionsSelectable () {\n        if (this.expressionsList.length === 1 &&\n            (this.expressionsList[0].expression.condition.name === 'equals' ||\n             this.expressionsList[0].expression.condition.name === 'true' ||\n             this.expressionsList[0].expression.condition.name === 'false' ||\n             this.expressionsList[0].expression.condition.name === 'empty' ||\n             this.expressionsList[0].expression.condition.name === 'in')) {\n            return true;\n        }\n\n        const selectableExpressionsCount = this.expressionsList.filter(exp =>\n            (exp.beforeOperator === 1 || exp.afterOperator === 1) &&\n            (exp.expression.condition.name === 'equals' ||\n             exp.expression.condition.name === 'true' ||\n             exp.expression.condition.name === 'false' ||\n             exp.expression.condition.name === 'empty' ||\n             exp.expression.condition.name === 'in')).length;\n\n        return selectableExpressionsCount === this.expressionsList.length;\n    }\n\n    private areExpressionsValuesInTheList() {\n        if (this.column.dataType === DataType.Boolean) {\n            return true;\n        }\n\n        if (this.filterValues.size === 1) {\n            const firstValue = this.filterValues.values().next().value;\n\n            if (!firstValue && firstValue !== 0) {\n                return true;\n            }\n        }\n\n        for (let index = 0; index < this.uniqueValues.length; index++) {\n            if (this.filterValues.has(this.uniqueValues[index])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public populateColumnData() {\n        let data = this.column.gridAPI.get_all_data(this.grid.id);\n        const gridExpressionsTree: IFilteringExpressionsTree = this.grid.filteringExpressionsTree;\n        const expressionsTree = new FilteringExpressionsTree(gridExpressionsTree.operator, gridExpressionsTree.fieldName);\n\n        for (const operand of gridExpressionsTree.filteringOperands) {\n            if (operand instanceof FilteringExpressionsTree) {\n                const columnExprTree = operand as FilteringExpressionsTree;\n                if (columnExprTree.fieldName === this.column.field) {\n                    break;\n                }\n            }\n            expressionsTree.filteringOperands.push(operand);\n        }\n\n        if (expressionsTree.filteringOperands.length) {\n            const state = { expressionsTree: expressionsTree };\n            data = DataUtil.filter(cloneArray(data), state);\n        }\n\n        if (this.column.dataType === DataType.Date) {\n            this.uniqueValues = Array.from(new Set(data.map(record =>\n                record[this.column.field] ? record[this.column.field].toDateString() : record[this.column.field])));\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()).map(v =>\n                        new Date(v).toDateString()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal ? e.expression.searchVal.toDateString() : e.expression.searchVal] ];\n            }, []));\n        } else {\n            this.uniqueValues = Array.from(new Set(data.map(record => record[this.column.field])));\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal] ];\n            }, []));\n        }\n        this.listData = new Array<FilterListItem>();\n\n        const shouldUpdateSelection = this.areExpressionsSelectable() && this.areExpressionsValuesInTheList();\n\n        if (this.column.dataType === DataType.Boolean) {\n            this.addBooleanItems();\n        } else {\n            this.addItems(shouldUpdateSelection);\n        }\n\n        this.listData.sort((a, b) => this.sortData(a, b));\n\n        if (this.column.dataType === DataType.Date) {\n            this.uniqueValues = this.uniqueValues.map(value => new Date(value));\n        }\n\n        if (this.containsNullOrEmpty) {\n            this.addBlanksItem(shouldUpdateSelection);\n        }\n\n        this.addSelectAllItem();\n\n        this.cdr.detectChanges();\n    }\n\n    private addBooleanItems() {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            const filterListItem = new FilterListItem();\n            if (element !== undefined && element !== null && element !== '') {\n                if (this.column.filteringExpressionsTree) {\n                    if (element === true && this.expressionsList.find(exp => exp.expression.condition.name === 'true' )) {\n                        filterListItem.isSelected = true;\n                        this.selectAllIndeterminate = true;\n                    } else if (element === false && this.expressionsList.find(exp => exp.expression.condition.name === 'false' )) {\n                            filterListItem.isSelected = true;\n                            this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                filterListItem.value = element;\n                filterListItem.label = element;\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addItems(shouldUpdateSelection: boolean) {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            if (element !== undefined && element !== null && element !== '') {\n                const filterListItem = new FilterListItem();\n                if (this.column.filteringExpressionsTree) {\n                    if (shouldUpdateSelection) {\n                        if (this.filterValues.has(element)) {\n                            filterListItem.isSelected = true;\n                        } else {\n                            filterListItem.isSelected = false;\n                        }\n                        this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                        this.selectAllSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                if (this.column.dataType === DataType.Date) {\n                    filterListItem.value = new Date(element);\n                    filterListItem.label = new Date(element);\n                } else {\n                    filterListItem.value = element;\n                    filterListItem.label = element;\n                }\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addSelectAllItem() {\n        const selectAll =  new FilterListItem();\n        selectAll.isSelected = this.selectAllSelected;\n        selectAll.value = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.label = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.indeterminate = this.selectAllIndeterminate;\n        selectAll.isSpecial = true;\n        this.listData.unshift(selectAll);\n    }\n\n    private addBlanksItem(shouldUpdateSelection) {\n        const blanks =  new FilterListItem();\n        if (this.column.filteringExpressionsTree) {\n            if (shouldUpdateSelection) {\n                if (this.filterValues.has(null)) {\n                    blanks.isSelected = true;\n                } else {\n                    blanks.isSelected = false;\n                }\n            }\n        } else {\n            blanks.isSelected = true;\n        }\n        blanks.value = null;\n        blanks.label = this.grid.resourceStrings.igx_grid_excel_blanks;\n        blanks.indeterminate = false;\n        blanks.isSpecial = true;\n        this.listData.unshift(blanks);\n    }\n\n    private sortData(a: FilterListItem, b: FilterListItem) {\n        let valueA = a.value;\n        let valueB = b.value;\n        if (typeof(a) === DataType.String) {\n            valueA = a.value.toUpperCase();\n            valueB = b.value.toUpperCase();\n        }\n        if (valueA < valueB) {\n            return -1;\n        } else if (valueA > valueB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    // TODO: sort members by access modifier\n\n    get sortingTemplate() {\n        if (this.grid.excelStyleSortingTemplateDirective) {\n            return this.grid.excelStyleSortingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleSortingTemplate;\n        }\n    }\n\n    get movingTemplate() {\n        if (this.grid.excelStyleMovingTemplateDirective) {\n            return this.grid.excelStyleMovingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleMovingTemplate;\n        }\n    }\n\n    get pinningTemplate() {\n        if (this.grid.excelStylePinningTemplateDirective) {\n            return this.grid.excelStylePinningTemplateDirective.template;\n        } else {\n            return this.defaultExcelStylePinningTemplate;\n        }\n    }\n\n    get hidingTemplate() {\n        if (this.grid.excelStyleHidingTemplateDirective) {\n            return this.grid.excelStyleHidingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleHidingTemplate;\n        }\n    }\n\n    get applyButtonDisabled() {\n        return this.listData[0] && !this.listData[0].isSelected && !this.listData[0].indeterminate;\n    }\n\n    public applyFilter() {\n        const filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.column.field);\n        const selectedItems = this.listData.slice(1, this.listData.length).filter(el => el.isSelected === true);\n        const unselectedItem = this.listData.slice(1, this.listData.length).find(el => el.isSelected === false);\n\n        if (unselectedItem) {\n            if (selectedItems.length <= IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold) {\n                selectedItems.forEach(element => {\n                    let condition = null;\n                    if (element.value !== null && element.value !== undefined) {\n                        if (this.column.dataType === DataType.Boolean) {\n                            condition = this.createCondition(element.value.toString());\n                        } else {\n                            condition = this.createCondition('equals');\n                        }\n                    } else {\n                        condition = this.createCondition('empty');\n                    }\n                    filterTree.filteringOperands.push({\n                        condition: condition,\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: element.value\n                    });\n                });\n            } else {\n                const blanksItemIndex = selectedItems.findIndex(e => e.value === null || e.value === undefined);\n                let blanksItem: any;\n                if (blanksItemIndex >= 0) {\n                    blanksItem = selectedItems[blanksItemIndex];\n                    selectedItems.splice(blanksItemIndex, 1);\n                }\n\n                if (this.column.dataType === DataType.Date) {\n                    filterTree.filteringOperands.push({\n                        condition: new InDateFilteringOperation(),\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: new Set(selectedItems.map(d =>\n                            new Date(d.value.getFullYear(), d.value.getMonth(), d.value.getDate()).toISOString()))\n                    });\n                } else {\n                    filterTree.filteringOperands.push({\n                        condition: new InFilteringOperation(),\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: new Set(selectedItems.map(e => e.value))\n                    });\n                }\n\n                if (blanksItem) {\n                    filterTree.filteringOperands.push({\n                        condition: this.createCondition('empty'),\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: blanksItem.value\n                    });\n                }\n            }\n\n            this.expressionsList = new Array<ExpressionUI>();\n            this.filteringService.filterInternal(this.column.field, filterTree);\n        } else {\n            this.filteringService.clearFilter(this.column.field);\n        }\n\n        this.closeDropdown();\n    }\n\n    public closeDropdown() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n            this.overlayComponentId = null;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ESCAPE || eventArgs.key === KEYS.ESCAPE_IE) {\n            this.closeDropdown();\n        }\n        eventArgs.stopPropagation();\n    }\n\n    public clearFilter() {\n        this.filteringService.clearFilter(this.column.field);\n        this.populateColumnData();\n    }\n\n    public onClearFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.clearFilter();\n        }\n    }\n\n    public showCustomFilterItem(): boolean {\n        const exprTree = this.column.filteringExpressionsTree;\n        return exprTree && exprTree.filteringOperands && exprTree.filteringOperands.length &&\n            !((exprTree.filteringOperands[0] as IFilteringExpression).condition &&\n            (exprTree.filteringOperands[0] as IFilteringExpression).condition.name === 'in');\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgZone,\n    OnInit,\n    Inject,\n    OnDestroy,\n    NgModuleRef\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxOverlayService } from '../services/overlay/overlay';\nimport { IgxGridExcelStyleFilteringComponent } from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { OverlaySettings, PositionSettings, VerticalAlignment } from '../services/overlay/utilities';\nimport { AutoPositionStrategy } from '../services/overlay/position/auto-position-strategy';\nimport { useAnimation } from '@angular/animations';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { fadeIn, fadeOut } from '../animations/main';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll/absolute-scroll-strategy';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header',\n    templateUrl: './grid-header.component.html'\n})\nexport class IgxGridHeaderComponent implements DoCheck, OnInit, OnDestroy {\n\n    private _componentOverlayId: string;\n    private _filterMenuPositionSettings: PositionSettings;\n    private _filterMenuOverlaySettings: OverlaySettings;\n    private _destroy$ = new Subject<boolean>();\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public gridID: string;\n\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__th--fw',\n            this.column.headerClasses\n        ];\n\n        const classList = {\n            'igx-grid__th': !this.column.columnGroup,\n            'asc': this.ascending,\n            'desc': this.descending,\n            'igx-grid__th--number': this.column.dataType === DataType.Number,\n            'igx-grid__th--sortable': this.column.sortable,\n            'igx-grid__th--filtrable': this.column.filterable && this.grid.filteringService.isFilterRowVisible,\n            'igx-grid__th--sorted': this.sorted\n        };\n\n        Object.entries(classList).forEach(([klass, value]) => {\n            if (value) {\n                defaultClasses.push(klass);\n            }\n        });\n        return defaultClasses.join(' ');\n    }\n\n    @HostBinding('style.height.px')\n    get height() {\n        if (this.grid.hasColumnGroups) {\n            return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight;\n        }\n        return null;\n    }\n\n    get ascending() {\n        return this.sortDirection === SortingDirection.Asc;\n    }\n\n    get descending() {\n        return this.sortDirection === SortingDirection.Desc;\n    }\n\n    get sortingIcon(): string {\n        if (this.sortDirection !== SortingDirection.None) {\n            // arrow_downward and arrow_upward\n            // are material icons ligature strings\n            return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';\n        }\n        return 'arrow_upward';\n    }\n\n    get sorted() {\n        return this.sortDirection !== SortingDirection.None;\n    }\n\n    get filterIconClassName() {\n        return this.column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';\n    }\n\n    @HostBinding('attr.role')\n    public hostRole = 'columnheader';\n\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    @HostBinding('attr.id')\n    get headerID() {\n        return `${this.gridID}_${this.column.field}`;\n    }\n\n    protected sortDirection = SortingDirection.None;\n\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public colResizingService: IgxColumnResizingService,\n        public cdr: ChangeDetectorRef,\n        public elementRef: ElementRef,\n        public zone: NgZone,\n        private _filteringService: IgxFilteringService,\n        private _moduleRef: NgModuleRef<any>,\n        @Inject(IgxOverlayService) private _overlayService: IgxOverlayService\n    ) { }\n\n    public ngOnInit() {\n        this.initFilteringSettings();\n    }\n\n    public ngDoCheck() {\n        this.getSortDirection();\n        this.cdr.markForCheck();\n    }\n\n    ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n\n        if (this._componentOverlayId) {\n            this._overlayService.hide(this._componentOverlayId);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this.colResizingService.isColumnResizing) {\n            event.stopPropagation();\n            if (this.grid.filteringService.isFilterRowVisible) {\n                if (this.column.filterable && !this.column.columnGroup &&\n                    !this.grid.filteringService.isFilterComplex(this.column.field)) {\n                    this.grid.filteringService.filteredColumn = this.column;\n                }\n            } else if (this.column.sortable) {\n                this.triggerSort();\n            }\n        }\n    }\n\n    public onFilteringIconClick(event) {\n        event.stopPropagation();\n\n        this.toggleFilterDropdown();\n    }\n\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    protected getSortDirection() {\n        const expr = this.gridAPI.grid.sortingExpressions.find((x) => x.fieldName === this.column.field);\n        this.sortDirection = expr ? expr.dir : SortingDirection.None;\n    }\n\n    public onSortingIconClick(event) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            event.stopPropagation();\n            this.triggerSort();\n        }\n    }\n\n    private triggerSort() {\n        const groupingExpr = this.grid.groupingExpressions ?\n            this.grid.groupingExpressions.find((expr) => expr.fieldName === this.column.field) : null;\n        const sortDir = groupingExpr ?\n            this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc\n            : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;\n        this.sortDirection = sortDir;\n        this.grid.sort({ fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,\n            strategy: this.column.sortStrategy });\n    }\n\n    private toggleFilterDropdown() {\n        if (!this._componentOverlayId) {\n            const headerTarget = this.elementRef.nativeElement;\n            const filterIconTarget = headerTarget.querySelector('.' + this.filterIconClassName);\n\n            this._filterMenuOverlaySettings.positionStrategy.settings.target = filterIconTarget;\n            this._filterMenuOverlaySettings.outlet = this.grid.outlet;\n\n            this._componentOverlayId =\n                this._overlayService.attach(IgxGridExcelStyleFilteringComponent, this._filterMenuOverlaySettings, this._moduleRef);\n            this._overlayService.show(this._componentOverlayId, this._filterMenuOverlaySettings);\n        }\n    }\n\n    private initFilteringSettings() {\n        this._filterMenuPositionSettings = {\n            verticalStartPoint: VerticalAlignment.Bottom,\n            openAnimation: useAnimation(fadeIn, {\n                params: {\n                    duration: '250ms'\n                }\n            }),\n            closeAnimation: useAnimation(fadeOut, {\n                params: {\n                    duration: '200ms'\n                }\n            })\n        };\n\n        this._filterMenuOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            positionStrategy: new AutoPositionStrategy(this._filterMenuPositionSettings),\n            scrollStrategy: new AbsoluteScrollStrategy()\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this.onOverlayOpening(eventArgs);\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this.onOverlayClosed();\n            });\n    }\n\n    private onOverlayOpening(eventArgs) {\n        const instance = eventArgs.componentRef.instance as IgxGridExcelStyleFilteringComponent;\n        if (instance) {\n            instance.initialize(this.column, this._filteringService, this._overlayService, eventArgs.id);\n        }\n    }\n\n    private onOverlayClosed() {\n        this._componentOverlayId = null;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    HostBinding,\n    AfterViewInit,\n    ElementRef,\n    HostListener,\n    OnInit,\n    ChangeDetectionStrategy,\n    DoCheck\n} from '@angular/core';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../column.component';\nimport { IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { IgxFilteringService, ExpressionUI } from './grid-filtering.service';\nimport { KEYS } from '../../core/utils';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridGroupByRowComponent } from '../grid/groupby-row.component';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-cell',\n    templateUrl: './grid-filtering-cell.component.html'\n})\nexport class IgxGridFilteringCellComponent implements AfterViewInit, OnInit, DoCheck {\n\n    private baseClass = 'igx-grid__filtering-cell-indicator';\n    private currentTemplate = null;\n\n    public expressionsList: ExpressionUI[];\n    public moreFiltersCount = 0;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('emptyFilter', { read: TemplateRef })\n    protected emptyFilter: TemplateRef<any>;\n\n    @ViewChild('defaultFilter', { read: TemplateRef })\n    protected defaultFilter: TemplateRef<any>;\n\n    @ViewChild('complexFilter', { read: TemplateRef })\n    protected complexFilter: TemplateRef<any>;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChild('moreIcon', { read: ElementRef })\n    protected moreIcon: ElementRef;\n\n    @ViewChild('ghostChip', { read: IgxChipComponent })\n    protected ghostChip: IgxChipComponent;\n\n    @ViewChild('complexChip', { read: IgxChipComponent })\n    protected complexChip: IgxChipComponent;\n\n    @HostBinding('class.igx-grid__filtering-cell')\n    public cssClass = 'igx-grid__filtering-cell';\n\n    constructor(public cdr: ChangeDetectorRef, public filteringService: IgxFilteringService, public navService: IgxGridNavigationService) {\n        this.filteringService.subscribeToEvents();\n    }\n\n    ngOnInit(): void {\n        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n    }\n\n    ngAfterViewInit(): void {\n        this.updateFilterCellArea();\n    }\n\n    public ngDoCheck() {\n        this.updateFilterCellArea();\n    }\n\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeyDown(eventArgs) {\n\n        if (this.isLastElementFocused()) {\n            this.filteringService.grid.navigation.navigateNextFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    public onShiftTabKeyDown(eventArgs) {\n        if (this.isFirstElementFocused()) {\n            this.filteringService.grid.navigation.navigatePrevFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    /**\n     * Returns whether a chip with a given index is visible or not.\n     */\n    public isChipVisible(index: number) {\n        const expression = this.expressionsList[index];\n        return !!(expression && expression.isVisible);\n    }\n\n    /**\n     * Updates the filtering cell area.\n     */\n    public updateFilterCellArea() {\n        this.expressionsList = this.filteringService.getExpressions(this.column.field);\n        this.updateVisibleFilters();\n    }\n\n    get template(): TemplateRef<any> {\n        if (!this.column.filterable) {\n            this.currentTemplate = null;\n            return null;\n        }\n\n        if (this.column.filterCellTemplate) {\n            this.currentTemplate = this.column.filterCellTemplate;\n            return this.column.filterCellTemplate;\n        }\n\n        const expressionTree = this.column.filteringExpressionsTree;\n        if (!expressionTree || expressionTree.filteringOperands.length === 0) {\n            this.currentTemplate = this.emptyFilter;\n            return this.emptyFilter;\n        }\n\n        if (this.filteringService.isFilterComplex(this.column.field)) {\n            this.currentTemplate = this.complexFilter;\n            return this.complexFilter;\n        }\n\n        this.currentTemplate = this.defaultFilter;\n        return this.defaultFilter;\n    }\n\n    /**\n     * Gets the context passed to the filter template.\n     * @memberof IgxGridFilteringCellComponent\n     */\n    get context() {\n        return {\n            column: this.column\n        };\n    }\n\n    /**\n     * Chip clicked event handler.\n     */\n    public onChipClicked(expression?: IFilteringExpression) {\n        if (expression) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = (item.expression === expression);\n            });\n        } else if (this.expressionsList.length > 0) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = false;\n            });\n            this.expressionsList[0].isSelected = true;\n        }\n\n        const index = this.filteringService.unpinnedFilterableColumns.indexOf(this.column);\n        if (index >= 0 && !this.isColumnRightVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], true);\n        } else if (index >= 0 && !this.isColumnLeftVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], false);\n        }\n\n        this.filteringService.filteredColumn = this.column;\n        this.filteringService.isFilterRowVisible = true;\n        this.filteringService.selectedExpression = expression;\n    }\n\n    /**\n     * Chip removed event handler.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove);\n        this.focusChip();\n    }\n\n    /**\n     * Clears the filtering.\n     */\n    public clearFiltering(): void {\n        this.filteringService.clearFilter(this.column.field);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Chip keydown event handler.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, expression?: IFilteringExpression) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            this.onChipClicked(expression);\n        }\n    }\n\n    /**\n     * Returns the filtering indicator class.\n     */\n    public filteringIndicatorClass() {\n        return {\n            [this.baseClass]: !this.isMoreIconHidden(),\n            [`${this.baseClass}--hidden`]: this.isMoreIconHidden()\n        };\n    }\n\n    /**\n     * Focus a chip depending on the current visible template.\n     */\n    public focusChip(focusFirst: boolean = false) {\n        if (this.currentTemplate === this.defaultFilter) {\n            if (focusFirst) {\n                this.focusFirstElement();\n            } else {\n                this.focusElement();\n            }\n        } else if (this.currentTemplate === this.emptyFilter) {\n            this.ghostChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else if (this.currentTemplate === this.complexFilter) {\n            this.complexChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        }\n    }\n\n    private removeExpression(indexToRemove: number) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.updateVisibleFilters();\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private isMoreIconHidden(): boolean {\n        return this.filteringService.columnToMoreIconHidden.get(this.column.field);\n    }\n\n    private updateVisibleFilters() {\n        this.expressionsList.forEach((ex) => ex.isVisible = true);\n\n        if (this.moreIcon) {\n            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n        }\n        this.cdr.detectChanges();\n\n        if (this.chipsArea && this.expressionsList.length > 1) {\n            const areaWidth = this.chipsArea.element.nativeElement.offsetWidth;\n            let viewWidth = 0;\n            const chipsAreaElements = this.chipsArea.element.nativeElement.children;\n            let visibleChipsCount = 0;\n            const moreIconWidth = this.moreIcon.nativeElement.offsetWidth -\n                parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);\n\n            for (let index = 0; index < chipsAreaElements.length - 1; index++) {\n                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {\n                    viewWidth += chipsAreaElements[index].offsetWidth;\n                    if (index % 2 === 0) {\n                        visibleChipsCount++;\n                    } else {\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);\n                    }\n                } else {\n                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    } else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    }\n                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;\n                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);\n                    break;\n                }\n            }\n\n            for (let i = visibleChipsCount; i < this.expressionsList.length; i++) {\n                this.expressionsList[i].isVisible = false;\n            }\n            this.cdr.detectChanges();\n        }\n    }\n\n    private isFirstElementFocused(): boolean {\n        return !(this.chipsArea && this.chipsArea.chipsList.length > 0 &&\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`) !== document.activeElement);\n    }\n\n    private isLastElementFocused(): boolean {\n        if (this.chipsArea) {\n            if (this.isMoreIconHidden() && this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`) !==\n                document.activeElement) {\n                return false;\n            } else if (!this.isMoreIconHidden() && this.moreIcon.nativeElement !== document.activeElement) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private focusFirstElement(): void {\n        if (this.chipsArea.chipsList.length > 0) {\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else {\n            this.moreIcon.nativeElement.focus();\n        }\n    }\n\n    private focusElement(): void {\n        if (this.filteringService.shouldFocusNext) {\n            if (!this.isMoreIconHidden() && this.chipsArea.chipsList.length === 0) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n            }\n        } else {\n            if (!this.isMoreIconHidden()) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`).focus();\n            }\n        }\n    }\n\n    private isColumnRightVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnRight = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n        }\n        const width = this.filteringService.displayContainerWidth + this.filteringService.displayContainerScrollLeft;\n        return currentColumnRight <= width;\n    }\n\n    private isColumnLeftVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n            currentColumnLeft += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n        }\n        return currentColumnLeft >= this.filteringService.displayContainerScrollLeft;\n    }\n}\n","import {\n    Component,\n    HostBinding,\n    Input,\n    ViewChild,\n    QueryList,\n    ViewChildren,\n    forwardRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    HostListener\n} from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { isIE } from '../core/utils';\n\nconst Z_INDEX = 9999;\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header-group',\n    templateUrl: './grid-header-group.component.html'\n})\nexport class IgxGridHeaderGroupComponent implements DoCheck {\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n\n    /**\n     * Gets the column of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the `id` of the grid in which the header group is stored.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridHeaderComponent)\n    public headerCell: IgxGridHeaderComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridFilteringCellComponent)\n    public filterCell: IgxGridFilteringCellComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(forwardRef(() => IgxGridHeaderGroupComponent), { read: IgxGridHeaderGroupComponent })\n    public children: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * Gets the width of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.grid.getHeaderGroupWidth(this.column);\n    }\n\n    /**\n     * Gets the style classes of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__thead-item',\n            this.column.headerGroupClasses\n        ];\n\n        const classList = {\n            'igx-grid__th--pinned': this.isPinned,\n            'igx-grid__th--pinned-last': this.isLastPinned,\n            'igx-grid__drag-col-header': this.isHeaderDragged,\n            'igx-grid__th--filtering': this.isFiltered\n        };\n\n        Object.entries(classList).forEach(([className, value]) => {\n            if (value) {\n                defaultClasses.push(className);\n            }\n        });\n        return defaultClasses.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.z-index')\n    get zIndex() {\n        if (!this.column.pinned) {\n            return null;\n        }\n        return Z_INDEX - this.grid.pinnedColumns.indexOf(this.column);\n    }\n\n    /**\n     * Gets the grid of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is filtered.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isFiltered(): boolean {\n        return this.filteringService.filteredColumn === this.column;\n    }\n\n    /**\n     * Gets whether the header group is stored in the last column in the pinned area.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isLastPinned(): boolean {\n        return !this.grid.hasColumnLayouts ? this.column.isLastPinned : false;\n    }\n\n    @HostBinding('style.display')\n    get groupDisplayStyle(): string {\n        return this.grid.hasColumnLayouts && this.column.children && !isIE() ? 'flex' : '';\n    }\n\n    /**\n     * Gets whether the header group is stored in a pinned column.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isPinned(): boolean {\n        return this.column.pinned;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is moved.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isHeaderDragged(): boolean {\n        return this.grid.draggedColumn ===  this.column;\n    }\n\n    /**\n     * @hidden\n     */\n    get hasLastPinnedChildColumn(): boolean {\n        return this.column.allChildren.some(child => child.isLastPinned);\n    }\n\n    /**\n     * @hidden\n     */\n    get height() {\n        return this.element.nativeElement.getBoundingClientRect().height;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event): void {\n        // hack for preventing text selection in IE and Edge while dragging the resizer\n        event.preventDefault();\n    }\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    constructor(private cdr: ChangeDetectorRef,\n                public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                private element: ElementRef,\n                public colResizingService: IgxColumnResizingService,\n                public filteringService: IgxFilteringService) { }\n}\n","export interface IGridResourceStrings {\n    igx_grid_groupByArea_message?: string;\n    igx_grid_emptyFilteredGrid_message?: string;\n    igx_grid_emptyGrid_message?: string;\n    igx_grid_filter?: string;\n    igx_grid_filter_row_close?: string;\n    igx_grid_filter_row_reset?: string;\n    igx_grid_filter_row_placeholder?: string;\n    igx_grid_filter_row_boolean_placeholder?: string;\n    igx_grid_filter_row_date_placeholder?: string;\n    igx_grid_filter_operator_and?: string;\n    igx_grid_complex_filter?: string;\n    igx_grid_filter_operator_or?: string;\n    igx_grid_filter_contains?: string;\n    igx_grid_filter_doesNotContain?: string;\n    igx_grid_filter_startsWith?: string;\n    igx_grid_filter_endsWith?: string;\n    igx_grid_filter_equals?: string;\n    igx_grid_filter_doesNotEqual?: string;\n    igx_grid_filter_empty?: string;\n    igx_grid_filter_notEmpty?: string;\n    igx_grid_filter_null?: string;\n    igx_grid_filter_notNull?: string;\n    igx_grid_filter_before?: string;\n    igx_grid_filter_after?: string;\n    igx_grid_filter_today?: string;\n    igx_grid_filter_yesterday?: string;\n    igx_grid_filter_thisMonth?: string;\n    igx_grid_filter_lastMonth?: string;\n    igx_grid_filter_nextMonth?: string;\n    igx_grid_filter_thisYear?: string;\n    igx_grid_filter_lastYear?: string;\n    igx_grid_filter_nextYear?: string;\n    igx_grid_filter_greaterThan?: string;\n    igx_grid_filter_lessThan?: string;\n    igx_grid_filter_greaterThanOrEqualTo?: string;\n    igx_grid_filter_lessThanOrEqualTo?: string;\n    igx_grid_filter_true?: string;\n    igx_grid_filter_false?: string;\n    igx_grid_filter_all?: string;\n    igx_grid_filter_condition_placeholder?: string;\n    igx_grid_summary_count?: string;\n    igx_grid_summary_min?: string;\n    igx_grid_summary_max?: string;\n    igx_grid_summary_sum?: string;\n    igx_grid_summary_average?: string;\n    igx_grid_summary_earliest?: string;\n    igx_grid_summary_latest?: string;\n    igx_grid_excel_filter_moving_left?: string;\n    igx_grid_excel_filter_moving_left_short?: string;\n    igx_grid_excel_filter_moving_right?: string;\n    igx_grid_excel_filter_moving_right_short?: string;\n    igx_grid_excel_filter_moving_header?: string;\n    igx_grid_excel_filter_sorting_asc?: string;\n    igx_grid_excel_filter_sorting_asc_short?: string;\n    igx_grid_excel_filter_sorting_desc?: string;\n    igx_grid_excel_filter_sorting_desc_short?: string;\n    igx_grid_excel_filter_sorting_header?: string;\n    igx_grid_excel_custom_dialog_add?: string;\n    igx_grid_excel_custom_dialog_clear?: string;\n    igx_grid_excel_custom_dialog_header?: string;\n    igx_grid_excel_cancel?: string;\n    igx_grid_excel_apply?: string;\n    igx_grid_excel_search_placeholder?: string;\n    igx_grid_excel_select_all?: string;\n    igx_grid_excel_blanks?: string;\n    igx_grid_excel_hide?: string;\n    igx_grid_excel_pin?: string;\n    igx_grid_excel_unpin?: string;\n    igx_grid_excel_text_filter?: string;\n    igx_grid_excel_number_filter?: string;\n    igx_grid_excel_date_filter?: string;\n    igx_grid_excel_boolean_filter?: string;\n    igx_grid_excel_custom_filter?: string;\n}\n\nexport const GridResourceStringsEN: IGridResourceStrings = {\n    igx_grid_groupByArea_message: 'Drag a column header and drop it here to group by that column.',\n    igx_grid_emptyFilteredGrid_message: 'No records found.',\n    igx_grid_emptyGrid_message: 'Grid has no data.',\n    igx_grid_filter: 'Filter',\n    igx_grid_filter_row_close: 'Close',\n    igx_grid_filter_row_reset: 'Reset',\n    igx_grid_filter_row_placeholder: 'Add filter value',\n    igx_grid_filter_row_boolean_placeholder: 'All',\n    igx_grid_filter_row_date_placeholder: 'Pick up date',\n    igx_grid_filter_operator_and: 'And',\n    igx_grid_filter_operator_or: 'Or',\n    igx_grid_complex_filter: 'Complex Filter',\n    igx_grid_filter_contains: 'Contains',\n    igx_grid_filter_doesNotContain: 'Does Not Contain',\n    igx_grid_filter_startsWith: 'Starts With',\n    igx_grid_filter_endsWith: 'Ends With',\n    igx_grid_filter_equals: 'Equals',\n    igx_grid_filter_doesNotEqual: 'Does Not Equal',\n    igx_grid_filter_empty: 'Empty',\n    igx_grid_filter_notEmpty: 'Not Empty',\n    igx_grid_filter_null: 'Null',\n    igx_grid_filter_notNull: 'Not Null',\n    igx_grid_filter_before: 'Before',\n    igx_grid_filter_after: 'After',\n    igx_grid_filter_today: 'Today',\n    igx_grid_filter_yesterday: 'Yesterday',\n    igx_grid_filter_thisMonth: 'This Month',\n    igx_grid_filter_lastMonth: 'Last Month',\n    igx_grid_filter_nextMonth: 'Next Month',\n    igx_grid_filter_thisYear: 'This Year',\n    igx_grid_filter_lastYear: 'Last Year',\n    igx_grid_filter_nextYear: 'Next Year',\n    igx_grid_filter_greaterThan: 'Greater Than',\n    igx_grid_filter_lessThan: 'Less Than',\n    igx_grid_filter_greaterThanOrEqualTo: 'Greater Than Or Equal To',\n    igx_grid_filter_lessThanOrEqualTo: 'Less Than Or Equal To',\n    igx_grid_filter_true: 'True',\n    igx_grid_filter_false: 'False',\n    igx_grid_filter_all: 'All',\n    igx_grid_filter_condition_placeholder: 'Select filter',\n    igx_grid_summary_count: 'Count',\n    igx_grid_summary_min: 'Min',\n    igx_grid_summary_max: 'Max',\n    igx_grid_summary_sum: 'Sum',\n    igx_grid_summary_average: 'Avg',\n    igx_grid_summary_earliest: 'Earliest',\n    igx_grid_summary_latest: 'Latest',\n    igx_grid_excel_filter_moving_left: 'move left',\n    igx_grid_excel_filter_moving_left_short: 'left',\n    igx_grid_excel_filter_moving_right: 'move right',\n    igx_grid_excel_filter_moving_right_short: 'right',\n    igx_grid_excel_filter_moving_header: 'move',\n    igx_grid_excel_filter_sorting_asc: 'ascending',\n    igx_grid_excel_filter_sorting_asc_short: 'asc',\n    igx_grid_excel_filter_sorting_desc: 'descending',\n    igx_grid_excel_filter_sorting_desc_short: 'desc',\n    igx_grid_excel_filter_sorting_header: 'sort',\n    igx_grid_excel_custom_dialog_add: 'add filter',\n    igx_grid_excel_custom_dialog_clear: 'Clear filter',\n    igx_grid_excel_custom_dialog_header: 'Custom auto-filter on column: ',\n    igx_grid_excel_cancel: 'cancel',\n    igx_grid_excel_apply: 'apply',\n    igx_grid_excel_search_placeholder: 'Search',\n    igx_grid_excel_select_all: 'Select All',\n    igx_grid_excel_blanks: '(Blanks)',\n    igx_grid_excel_hide: 'Hide column',\n    igx_grid_excel_pin: 'Pin column',\n    igx_grid_excel_unpin: 'Unpin column',\n    igx_grid_excel_text_filter: 'Text filter',\n    igx_grid_excel_number_filter: 'Number filter',\n    igx_grid_excel_date_filter: 'Date filter',\n    igx_grid_excel_boolean_filter: 'Boolean filter',\n    igx_grid_excel_custom_filter: 'Custom filter...'\n};\n","export interface ITimePickerResourceStrings {\n    igx_time_picker_ok?: string;\n    igx_time_picker_cancel?: string;\n}\n\nexport const TimePickerResourceStringsEN: ITimePickerResourceStrings = {\n    igx_time_picker_ok: 'OK',\n    igx_time_picker_cancel: 'Cancel'\n};\n","import { IGridResourceStrings, GridResourceStringsEN } from './grid-resources';\nimport { ITimePickerResourceStrings, TimePickerResourceStringsEN } from './time-picker-resources';\nimport { cloneValue } from '../utils';\n\nexport interface IResourceStrings extends IGridResourceStrings, ITimePickerResourceStrings {}\n\n/**\n * @hidden\n */\nexport const CurrentResourceStrings = {\n    GridResStrings: cloneValue(GridResourceStringsEN),\n    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN)\n};\n\nfunction updateResourceStrings(currentStrings: IResourceStrings, newStrings: IResourceStrings ) {\n    for (const key of Object.keys(newStrings)) {\n        if (key in currentStrings) {\n            currentStrings[key] = newStrings[key];\n        }\n    }\n}\n\n/**\n * Changes the resource strings for all components in the application\n * ```\n * @param resourceStrings to be applied\n */\nexport function changei18n(resourceStrings: IResourceStrings) {\n    for (const key of Object.keys(CurrentResourceStrings)) {\n        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);\n    }\n}\n\n/**\n * Returns current resource strings for all components\n */\nexport function getCurrentResourceStrings(): IResourceStrings {\n    return {\n            ...CurrentResourceStrings.GridResStrings,\n            ...CurrentResourceStrings.TimePickerResStrings\n    };\n}\n","import { Injectable} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\n\n/** @hidden */\n@Injectable()\nexport class IgxGridSummaryService {\n    protected summaryCacheMap: Map<string, Map<string, any[]>> = new Map<string, Map<string, IgxSummaryResult[]>>();\n    public grid;\n    public rootSummaryID = 'igxGridRootSummary';\n    public summaryHeight = 0;\n    public maxSummariesLenght = 0;\n    public groupingExpressions = [];\n    public retriggerRootPipe = 0;\n    public deleteOperation = false;\n\n    public recalculateSummaries() {\n        this.resetSummaryHeight();\n        this.grid.calculateGridHeight();\n        this.grid.cdr.detectChanges();\n    }\n\n    public clearSummaryCache(args?) {\n        if (!this.summaryCacheMap.size) { return; }\n        if (!args) {\n            this.summaryCacheMap.clear();\n            if (this.grid && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n            return;\n        }\n        if (args.data) {\n            let rowID = args.rowID;\n            if (!args.rowID) {\n                rowID = this.grid.primaryKey ? args.data[this.grid.primaryKey] : args.data;\n            }\n            this.removeSummaries(rowID);\n        }\n        if (args.rowID !== undefined && args.rowID !== null) {\n            const columnName = args.cellID ? this.grid.columnList.find(col => col.index === args.cellID.columnID).field : undefined;\n            const isGroupedColumn = this.grid.groupingExpressions &&\n                    this.grid.groupingExpressions.map(expr => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && isGroupedColumn) {\n                this.removeSummaries(args.rowID);\n                return;\n            }\n            this.removeSummaries(args.rowID, columnName);\n        }\n    }\n\n    public removeSummaries(rowID, columnName?) {\n        if (this.summaryCacheMap.size === 0) { return; }\n        this.deleteSummaryCache(this.rootSummaryID, columnName);\n        if (this.summaryCacheMap.size === 1 && this.summaryCacheMap.has(this.rootSummaryID)) { return; }\n        if (this.isTreeGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                // TODO: this.removeChildRowSummaries(rowID, columnName);\n                this.summaryCacheMap.clear();\n                return;\n            }\n            this.removeAllTreeGridSummaries(rowID, columnName);\n        } else if (this.isHierarchicalGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                this.summaryCacheMap.clear();\n                return;\n            }\n        } else {\n           const summaryIds = this.getSummaryID(rowID, this.grid.groupingExpressions);\n           summaryIds.forEach(id => {\n               this.deleteSummaryCache(id, columnName);\n           });\n        }\n    }\n\n    public removeSummariesCachePerColumn(columnName) {\n        this.summaryCacheMap.forEach((cache) => {\n            if (cache.get(columnName)) {\n                cache.delete(columnName);\n            }\n        });\n        if (this.grid.rootSummariesEnabled) {  this.retriggerRootPipe++; }\n    }\n\n    public calcMaxSummaryHeight() {\n        if (this.summaryHeight) {\n            return this.summaryHeight;\n        }\n        if (!this.grid.data) {return this.summaryHeight = 0; }\n        let maxSummaryLength = 0;\n        this.grid.columnList.filter((col) => col.hasSummary && !col.hidden).forEach((column) => {\n            const getCurrentSummaryColumn = column.summaries.operate([]).length;\n            if (getCurrentSummaryColumn) {\n                if (maxSummaryLength < getCurrentSummaryColumn) {\n                    maxSummaryLength = getCurrentSummaryColumn;\n                }\n            }\n        });\n        this.maxSummariesLenght = maxSummaryLength;\n        this.summaryHeight =  maxSummaryLength * this.grid.defaultSummaryHeight;\n        return this.summaryHeight;\n    }\n\n    public calculateSummaries(rowID, data) {\n        let rowSummaries = this.summaryCacheMap.get(rowID);\n        if (!rowSummaries) {\n            rowSummaries = new Map<string, IgxSummaryResult[]>();\n            this.summaryCacheMap.set(rowID, rowSummaries);\n        }\n        if (!this.hasSummarizedColumns || !data) {return rowSummaries; }\n        this.grid.columnList.filter(col => col.hasSummary).forEach((column) => {\n            if (!rowSummaries.get(column.field)) {\n                const columnValues = data.map(record => record[column.field]);\n                rowSummaries.set(column.field,\n                    column.summaries.operate(columnValues));\n            }\n        });\n        return rowSummaries;\n    }\n\n    public resetSummaryHeight() {\n        this.summaryHeight = 0;\n        (this.grid as any)._summaryPipeTrigger++;\n        if (this.grid.rootSummariesEnabled) {\n            this.retriggerRootPipe++;\n        }\n    }\n\n    public updateSummaryCache(groupingArgs) {\n        if (this.summaryCacheMap.size === 0 || !this.hasSummarizedColumns) { return; }\n        if (this.groupingExpressions.length === 0) {\n            this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n            return;\n        }\n        if (groupingArgs.length === 0) {\n            this.groupingExpressions = [];\n            this.clearSummaryCache();\n            return;\n        }\n        this.compareGroupingExpressions(this.groupingExpressions, groupingArgs);\n        this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n    }\n\n    public get hasSummarizedColumns(): boolean {\n        const summarizedColumns = this.grid.columnList.filter(col => col.hasSummary && !col.hidden);\n        return summarizedColumns.length > 0;\n    }\n\n    private deleteSummaryCache(id, columnName) {\n        if (this.summaryCacheMap.get(id)) {\n            const filteringApplied = columnName && this.grid.filteringExpressionsTree &&\n                    this.grid.filteringExpressionsTree.filteringOperands.map((expr) => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && this.summaryCacheMap.get(id).get(columnName) && !filteringApplied) {\n                this.summaryCacheMap.get(id).delete(columnName);\n            } else {\n                this.summaryCacheMap.delete(id);\n            }\n            if (id === this.rootSummaryID && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n        }\n    }\n\n    private getSummaryID(rowID, groupingExpressions) {\n        if (groupingExpressions.length === 0) { return []; }\n        const summaryIDs = [];\n        let data = this.grid.data;\n        if (this.grid.transactions.enabled) {\n            data = DataUtil.mergeTransactions(\n                cloneArray(this.grid.data),\n                this.grid.transactions.getAggregatedChanges(true),\n                this.grid.primaryKey\n            );\n        }\n        const rowData = this.grid.primaryKey ? data.find(rec => rec[this.grid.primaryKey] === rowID) : rowID;\n        let id = '{ ';\n        groupingExpressions.forEach(expr => {\n            id += `'${expr.fieldName}': '${rowData[expr.fieldName]}'`;\n                summaryIDs.push(id.concat(' }'));\n                id += ', ';\n        });\n        return summaryIDs;\n    }\n\n    private removeAllTreeGridSummaries(rowID, columnName?) {\n        let row = this.grid.records.get(rowID);\n        if (!row) { return; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowID = row.rowID;\n            this.deleteSummaryCache(rowID, columnName);\n            row = row.parent;\n        }\n    }\n\n    // TODO: remove only deleted rows\n    private removeChildRowSummaries(rowID, columnName?) {\n    }\n\n    private compareGroupingExpressions(current, groupingArgs) {\n        const newExpressions = groupingArgs.expressions.map(record => record.fieldName);\n        const removedCols = groupingArgs.ungroupedColumns;\n        if (current.length <= newExpressions.length) {\n            const newExpr = newExpressions.slice(0, current.length).toString();\n            if (current.toString() !== newExpr) {\n                this.clearSummaryCache();\n            }\n        } else {\n            const currExpr = current.slice(0, newExpressions.length).toString();\n            if (currExpr !== newExpressions.toString()) {\n                this.clearSummaryCache();\n                return;\n            }\n            removedCols.map(col => col.field).forEach(colName => {\n                this.summaryCacheMap.forEach((cache, id) => {\n                   if (id.indexOf(colName) !== -1) {\n                       this.summaryCacheMap.delete(id);\n                   }});\n            });\n        }\n    }\n\n    private get isTreeGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';\n    }\n\n    private get isHierarchicalGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n    }\n\n}\n","import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy, ElementRef } from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxColumnComponent } from '../column.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { IgxGridSelectionService } from '../../core/grid-selection';\nimport { SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-cell',\n    templateUrl: './summary-cell.component.html'\n})\nexport class IgxSummaryCellComponent {\n\n    @Input()\n    public summaryResults: IgxSummaryResult[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public firstCellIndentation = 0;\n\n    @Input()\n    public hasSummary = false;\n\n    @Input()\n    public density;\n\n    constructor(private element: ElementRef, private selectionService: IgxGridSelectionService) {\n    }\n\n    @Input()\n    @HostBinding('attr.data-rowIndex')\n    public rowIndex: number;\n\n    @HostBinding('attr.data-visibleIndex')\n    get visibleColumnIndex(): number {\n        return this.column.visibleIndex;\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.aria-describedby')\n    public get describeby() {\n        return `Summary_${this.column.field}`;\n    }\n\n    @HostBinding('class.igx-grid-summary--active')\n    public focused: boolean;\n\n    @HostListener('focus')\n    public onFocus() {\n        this.focused = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n    }\n\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        const ctrl = event.ctrlKey;\n        const shift = event.shiftKey;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const args = { targetType: 'summaryCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInCell(key, ctrl)) { return; }\n\n        this.selectionService.keyboardState.shift = shift && !(key === 'tab');\n        const row = this.getRowElementByIndex(this.rowIndex);\n        switch (key) {\n            case 'tab':\n                if (shift) {\n                    this.grid.navigation.performShiftTabKey(row, this.rowIndex, this.visibleColumnIndex, true);\n                    break;\n                }\n                this.grid.navigation.performTab(row, this.rowIndex, this.visibleColumnIndex, true);\n                break;\n            case 'arrowleft':\n            case 'home':\n            case 'left':\n                if (ctrl || key === 'home') {\n                    this.grid.navigation.onKeydownHome(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.rowIndex, this.visibleColumnIndex, true);\n                break;\n            case 'end':\n            case 'arrowright':\n            case 'right':\n                if (ctrl || key === 'end') {\n                    this.grid.navigation.onKeydownEnd(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.rowIndex, this.visibleColumnIndex, true);\n                break;\n            case 'arrowup':\n            case 'up':\n                this.grid.navigation.navigateUp(row, this.rowIndex, this.visibleColumnIndex);\n                break;\n            case 'arrowdown':\n            case 'down':\n                this.grid.navigation.navigateDown(row, this.rowIndex, this.visibleColumnIndex);\n                break;\n        }\n    }\n\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.column.getCellWidth();\n    }\n\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    get columnDatatype(): DataType {\n        return this.column.dataType;\n    }\n\n    get itemHeight() {\n        return this.column.grid.defaultSummaryHeight;\n    }\n\n    /**\n    * @hidden\n    */\n    public get grid() {\n        return (this.column.grid as any);\n    }\n\n    private getRowElementByIndex(rowIndex) {\n        const summaryRows = this.grid.summariesRowList.toArray();\n        return summaryRows.find((sr) => sr.dataRowIndex === rowIndex).nativeElement;\n    }\n\n    private isKeySupportedInCell(key, ctrl) {\n        if (ctrl) {\n           return ['arrowup', 'arrowdown', 'up', 'down', 'end', 'home'].indexOf(key) === -1;\n        }\n        return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright', 'home', 'end', 'tab'].indexOf(key) !== -1;\n    }\n\n    public translateSummary(summary: IgxSummaryResult): string {\n        return this.grid.resourceStrings[`igx_grid_summary_${summary.key}`] || summary.label;\n    }\n}\n","import {\n    Component,\n    Input,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    ViewChild,\n    ElementRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck\n} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxSummaryCellComponent } from './summary-cell.component';\nimport { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-row',\n    templateUrl: './summary-row.component.html',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxSummaryRowComponent implements DoCheck  {\n\n    @Input()\n    public summaries: Map<string, IgxSummaryResult[]>;\n\n    @Input()\n    public gridID;\n\n    @Input()\n    public index: number;\n\n    @Input()\n    public indentation = 0;\n\n    @Input()\n    public firstCellIndentation = -1;\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    get minHeight() {\n        return this.grid.summaryService.calcMaxSummaryHeight() - 1;\n    }\n\n    @ViewChildren(IgxSummaryCellComponent, { read: IgxSummaryCellComponent })\n    public summaryCells: QueryList<IgxSummaryCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                public element: ElementRef,\n                public cdr: ChangeDetectorRef) {}\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    public get grid() {\n        return this.gridAPI.grid;\n    }\n\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    public getColumnSummaries(columnName) {\n        if (!this.summaries.get(columnName)) {\n            return [];\n        }\n        return this.summaries.get(columnName);\n\n    }\n\n    /**\n     * @hidden\n     */\n    public get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n}\n","import { Directive, Input, Output, EventEmitter, ElementRef, OnDestroy, NgZone, OnInit } from '@angular/core';\nimport { interval, Observable, Subscription, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nexport enum DragScrollDirection {\n    NONE,\n    LEFT,\n    TOP,\n    RIGHT,\n    BOTTOM,\n    TOPLEFT,\n    TOPRIGHT,\n    BOTTOMLEFT,\n    BOTTOMRIGHT\n}\n\n\n@Directive({\n    selector: '[igxGridDragSelect]'\n})\nexport class IgxGridDragSelectDirective implements OnInit, OnDestroy {\n    _activeDrag: boolean;\n\n    @Input('igxGridDragSelect')\n    get activeDrag(): boolean {\n        return this._activeDrag;\n    }\n\n    set activeDrag(val: boolean) {\n        if (val !== this._activeDrag) {\n            this.unsubscribe();\n            this._activeDrag = val;\n        }\n    }\n\n    @Output()\n    onDragStop = new EventEmitter<boolean>();\n\n    @Output()\n    onDragScroll = new EventEmitter<DragScrollDirection>();\n\n    get nativeElement(): HTMLElement {\n        return this.ref.nativeElement;\n    }\n\n    get clientRect(): ClientRect {\n        return this.nativeElement.getBoundingClientRect();\n    }\n\n    protected end$ = new Subject<any>();\n    protected lastDirection = DragScrollDirection.NONE;\n    protected _interval$: Observable<any>;\n    protected _sub: Subscription;\n\n    constructor(private ref: ElementRef, private zone: NgZone) {\n        this._interval$ = interval(100).pipe(\n            takeUntil(this.end$),\n            filter(() => this.activeDrag)\n        );\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.addEventListener('pointerleave', this.stopDragSelection);\n        });\n    }\n\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.removeEventListener('pointerleave', this.stopDragSelection);\n        });\n        this.unsubscribe();\n        this.end$.complete();\n    }\n\n\n    startDragSelection = (ev: PointerEvent) => {\n        if (!this.activeDrag) {\n            return;\n        }\n        const x = ev.clientX;\n        const y = ev.clientY;\n        const direction = this._measureDimensions(x, y);\n        if (direction === this.lastDirection) {\n            return;\n        }\n        this.unsubscribe();\n        this._sub = this._interval$.subscribe(() => this.onDragScroll.emit(direction));\n        this.lastDirection = direction;\n    }\n\n    stopDragSelection = () => {\n        if (!this.activeDrag) {\n            return;\n        }\n        this.onDragStop.emit(false);\n        this.unsubscribe();\n        this.lastDirection = DragScrollDirection.NONE;\n    }\n\n    _measureDimensions(x: number, y: number): DragScrollDirection {\n        let direction: DragScrollDirection;\n\n        const rect = this.clientRect;\n        const RATIO = 0.15;\n        const offsetX = Math.trunc(x - rect.left);\n        const offsetY = Math.trunc(y - rect.top);\n\n        const left = offsetX <= rect.width * RATIO;\n        const right = offsetX >= rect.width * (1 - RATIO);\n        const top = offsetY <= rect.height * RATIO;\n        const bottom = offsetY >= rect.height * (1 - RATIO);\n\n        if (top && left) {\n            direction = DragScrollDirection.TOPLEFT;\n        } else if (top && right) {\n            direction = DragScrollDirection.TOPRIGHT;\n        } else if (bottom && left) {\n            direction = DragScrollDirection.BOTTOMLEFT;\n        } else if (bottom && right) {\n            direction = DragScrollDirection.BOTTOMRIGHT;\n        } else if (top) {\n            direction = DragScrollDirection.TOP;\n        } else if (bottom) {\n            direction = DragScrollDirection.BOTTOM;\n        } else if (left) {\n            direction = DragScrollDirection.LEFT;\n        } else if (right) {\n            direction = DragScrollDirection.RIGHT;\n        } else {\n            direction = DragScrollDirection.NONE;\n        }\n\n        return direction;\n\n    }\n\n    protected unsubscribe() {\n        if (this._sub) {\n            this._sub.unsubscribe();\n        }\n    }\n}\n","import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxColumnResizerDirective } from './grid.common';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-column-resizer',\n    templateUrl: './grid-column-resizer.component.html'\n})\nexport class IgxGridColumnResizerComponent {\n    constructor(public colResizingService: IgxColumnResizingService) { }\n\n    @ViewChild(IgxColumnResizerDirective)\n    public resizer: IgxColumnResizerDirective;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    ChangeDetectionStrategy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { DataType } from '../../data-operations/data-util';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxDropDownComponent, ISelectionEventArgs } from '../../drop-down/index';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { HorizontalAlignment, VerticalAlignment, OverlaySettings } from '../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../services/overlay/position/connected-positioning-strategy';\nimport { IChipSelectEventArgs, IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { ExpressionUI } from './grid-filtering.service';\nimport { IgxDropDownItemComponent } from '../../drop-down/drop-down-item.component';\nimport { IgxFilteringService } from './grid-filtering.service';\nimport { KEYS, isEdge } from '../../core/utils';\nimport { AbsoluteScrollStrategy } from '../../services/overlay/scroll';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-row',\n    templateUrl: './grid-filtering-row.component.html'\n})\nexport class IgxGridFilteringRowComponent implements AfterViewInit {\n\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _conditionsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private _operatorsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private chipsAreaWidth: number;\n    private chipAreaScrollOffset = 0;\n    private _column = null;\n    private isKeyPressed = false;\n    private isComposing = false;\n\n    public showArrows: boolean;\n    public expression: IFilteringExpression;\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    set column(val) {\n        if (val) {\n            this._column = val;\n\n            this.expressionsList = this.filteringService.getExpressions(this._column.field);\n\n            this.resetExpression();\n\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    @Input()\n    get value(): any {\n        return this.expression ? this.expression.searchVal : null;\n    }\n\n    set value(val) {\n        if (!val && val !== 0) {\n            this.expression.searchVal = null;\n            this.showHideArrowButtons();\n        } else {\n            this.expression.searchVal = this.transformValue(val);\n            if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n                this.addExpression(true);\n            }\n        }\n\n        this.filter();\n    }\n\n    @ViewChild('defaultFilterUI', { read: TemplateRef })\n    protected defaultFilterUI: TemplateRef<any>;\n\n    @ViewChild('defaultDateUI', { read: TemplateRef })\n    protected defaultDateUI: TemplateRef<any>;\n\n    @ViewChild('input', { read: ElementRef })\n    protected input: ElementRef;\n\n    @ViewChild('inputGroupConditions', { read: IgxDropDownComponent })\n    protected dropDownConditions: IgxDropDownComponent;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChildren('operators', { read: IgxDropDownComponent })\n    protected dropDownOperators: QueryList<IgxDropDownComponent>;\n\n    @ViewChild('inputGroup', { read: ElementRef })\n    protected inputGroup: ElementRef;\n\n    @ViewChild('inputGroupPrefix', { read: ElementRef })\n    protected inputGroupPrefix: ElementRef;\n\n    @ViewChild('container')\n    protected container: ElementRef;\n\n    @ViewChild('operand')\n    protected operand: ElementRef;\n\n    @ViewChild('closeButton')\n    public closeButton: ElementRef;\n\n    @HostBinding('class.igx-grid__filtering-row')\n    public cssClass = 'igx-grid__filtering-row';\n\n    constructor(public filteringService: IgxFilteringService, public element: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    ngAfterViewInit() {\n        this._conditionsOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._operatorsOverlaySettings.outlet = this.column.grid.outletDirective;\n\n        this.input.nativeElement.focus();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeydown(event) {\n        event.stopPropagation();\n        if (document.activeElement === this.closeButton.nativeElement && !event.shiftKey) {\n            this.filteringService.grid.navigation.navigateFirstCellIfPossible(event);\n        }\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    public onEscKeydown(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.close();\n    }\n\n    get disabled(): boolean {\n        return !(this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0);\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.defaultDateUI;\n        }\n\n        return this.defaultFilterUI;\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.String:\n            case DataType.Boolean:\n                return 'text';\n            case DataType.Number:\n                return 'number';\n        }\n    }\n\n    get conditions(): any {\n        return this.column.filters.conditionList();\n    }\n\n    get isUnaryCondition(): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.isUnary;\n        } else {\n            return true;\n        }\n    }\n\n    get placeholder(): string {\n        if (this.expression.condition && this.expression.condition.isUnary) {\n            return this.filteringService.getChipLabel(this.expression);\n        } else if (this.column.dataType === DataType.Date) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_date_placeholder;\n        } else if (this.column.dataType === DataType.Boolean) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_boolean_placeholder;\n        } else {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_placeholder;\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input group's prefix.\n     */\n    public onPrefixKeyDown(event: KeyboardEvent) {\n        if ((event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) && this.dropDownConditions.collapsed) {\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            event.stopImmediatePropagation();\n        } else if (event.key === KEYS.TAB) {\n            if (event.shiftKey) {\n                event.preventDefault();\n                event.stopPropagation();\n            } else if (!this.dropDownConditions.collapsed) {\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            }\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input.\n     */\n    public onInputKeyDown(event: KeyboardEvent) {\n        this.isKeyPressed = true;\n\n        if (this.column.dataType === DataType.Boolean) {\n            if (event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) {\n                this.inputGroupPrefix.nativeElement.focus();\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n                event.stopPropagation();\n                return;\n            }\n        }\n\n        if (event.key === KEYS.ENTER) {\n            if (this.isComposing) {\n                return;\n            }\n            this.commitInput();\n        } else if (event.altKey && (event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE)) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        } else if (event.key === KEYS.ESCAPE || event.key === KEYS.ESCAPE_IE) {\n            event.preventDefault();\n            this.close();\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * Event handler for keyup on the input.\n     */\n    public onInputKeyUp(eventArgs) {\n        this.isKeyPressed = false;\n    }\n\n    /**\n     * Event handler for input on the input.\n     */\n    public onInput(eventArgs) {\n        // The 'iskeyPressed' flag is needed for a case in IE, because the input event is fired on focus and for some reason,\n        // when you have a japanese character as a placeholder, on init the value here is empty string .\n        if (isEdge() || this.isKeyPressed || eventArgs.target.value) {\n            this.value = eventArgs.target.value;\n        }\n    }\n\n    /**\n     * Event handler for compositionstart on the input.\n     */\n    public onCompositionStart() {\n        this.isComposing = true;\n    }\n\n    /**\n     * Event handler for compositionend on the input.\n     */\n    public onCompositionEnd() {\n        this.isComposing = false;\n    }\n\n    /**\n     * Event handler for input click event.\n     */\n    public onInputClick() {\n        if (this.column.dataType === DataType.Boolean && this.dropDownConditions.collapsed) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        }\n    }\n\n    /**\n     * Event handler for datepicker's close.\n     */\n    public datePickerClose() {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.filteringService.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    /**\n     * Returns the icon name of the current condition.\n     */\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else {\n            return this.expression.condition.iconName;\n        }\n    }\n\n    /**\n     * Returns whether a given condition is selected in dropdown.\n     */\n    public isConditionSelected(conditionName: string): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.name === conditionName;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Clears the current filtering.\n     */\n    public clearFiltering() {\n        this.filteringService.clearFilter(this.column.field);\n        this.resetExpression();\n        if (this.input) {\n            this.input.nativeElement.focus();\n        }\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /**\n     * Commits the value of the input.\n     */\n    public commitInput() {\n        this.chipsArea.chipsList.filter(chip => chip.selected = false);\n        let indexToDeselect = -1;\n        for (let index = 0; index < this.expressionsList.length; index++) {\n            const expression = this.expressionsList[index].expression;\n            if (expression.searchVal === null && !expression.condition.isUnary) {\n                indexToDeselect = index;\n            }\n        }\n        if (indexToDeselect !== -1) {\n            this.removeExpression(indexToDeselect, this.expression);\n        }\n        this.resetExpression();\n        this.scrollChipsWhenAddingExpression();\n    }\n\n    /**\n     * Clears the value of the input.\n     */\n    public clearInput() {\n        this.value = null;\n    }\n\n    /**\n     * Event handler for keydown on clear button.\n     */\n    public onClearKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.clearInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on clear button.\n     */\n    public onClearClick() {\n        this.clearInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for keydown on commit button.\n     */\n    public onCommitKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.commitInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on commit button.\n     */\n    public onCommitClick() {\n        this.commitInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for focusout on the input group.\n     */\n    public onInputGroupFocusout() {\n        if (!this.value && this.value !== 0) {\n            return;\n        }\n        requestAnimationFrame(() => {\n            const focusedElement = document.activeElement;\n            if (!(focusedElement && this.inputGroup.nativeElement.contains(focusedElement)) &&\n                this.dropDownConditions.collapsed) {\n                this.commitInput();\n            }\n        });\n    }\n\n    /**\n     * Closes the filtering edit row.\n     */\n    public close() {\n        if (this.expressionsList.length === 1 &&\n            this.expressionsList[0].expression.searchVal === null &&\n            this.expressionsList[0].expression.condition.isUnary === false) {\n            this.filteringService.getExpressions(this.column.field).pop();\n        } else {\n            this.expressionsList.forEach((item) => {\n                if (item.expression.searchVal === null && !item.expression.condition.isUnary) {\n                    this.filteringService.removeExpression(this.column.field, this.expressionsList.indexOf(item));\n                }\n            });\n        }\n\n        this.filteringService.isFilterRowVisible = false;\n\n        this.filteringService.updateFilteringCell(this.column);\n        this.filteringService.focusFilterCellChip(this.column, true);\n\n        this.filteringService.filteredColumn = null;\n        this.filteringService.selectedExpression = null;\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /*\n    * Opens date-picker if condition is not unary\n    */\n    public openDatePicker(openDialog: Function) {\n        if (!this.expression.condition.isUnary) {\n            openDialog();\n        }\n    }\n\n    /**\n     *  Event handler for date picker's selection.\n     */\n    public onDateSelected(value: Date) {\n        this.value = value;\n        this.commitInput();\n    }\n\n    /**\n     * Opens the conditions dropdown.\n     */\n    public toggleConditionsDropDown(target: any) {\n        this._conditionsOverlaySettings.positionStrategy.settings.target = target;\n        this.dropDownConditions.toggle(this._conditionsOverlaySettings);\n    }\n\n    /**\n     * Opens the logic operators dropdown.\n     */\n    public toggleOperatorsDropDown(eventArgs, index) {\n        this._operatorsOverlaySettings.positionStrategy.settings.target = eventArgs.target.parentElement;\n        this.dropDownOperators.toArray()[index].toggle(this._operatorsOverlaySettings);\n    }\n\n    /**\n     * Event handler for change event in conditions dropdown.\n     */\n    public onConditionsChanged(eventArgs) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expression.condition = this.getCondition(value);\n        if (this.expression.condition.isUnary) {\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.unaryConditionChangedCallback());\n        } else {\n            requestAnimationFrame(() => this.conditionChangedCallback());\n        }\n\n        if (this.input) {\n            // Add requestAnimationFrame becasue of an issue in IE, where you are still able to write in the input,\n            // if it has been focused and then set to readonly.\n            requestAnimationFrame(() => this.input.nativeElement.focus());\n        }\n    }\n\n    /**\n     *  Event handler for chip selected event.\n     */\n    public onChipSelected(eventArgs: IChipSelectEventArgs, expression: IFilteringExpression) {\n        if (eventArgs.selected) {\n            if (this.chipsArea.chipsList) {\n                this.chipsArea.chipsList.forEach((chip) => {\n                    if (chip !== eventArgs.owner) {\n                        chip.selected = false;\n                    }\n                });\n            }\n            this.expression = expression;\n\n            if (this.input) {\n                this.input.nativeElement.focus();\n            }\n        } else if (this.expression === expression) {\n            this.resetExpression();\n        }\n    }\n\n    /**\n     * Event handler for chip keydown event.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, chip: IgxChipComponent) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            chip.selected = !chip.selected;\n        }\n    }\n\n    /**\n     * Scrolls the first chip into view if the tab key is pressed on the left arrow.\n     */\n    public onLeftArrowKeyDown(event) {\n        if (event.key === KEYS.TAB) {\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * Event handler for chip removed event.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove, item.expression);\n\n        this.scrollChipsOnRemove();\n    }\n\n    /**\n     * Event handler for logic operator changed event.\n     */\n    public onLogicOperatorChanged(eventArgs: ISelectionEventArgs, expression: ExpressionUI) {\n        if (eventArgs.oldSelection) {\n            expression.afterOperator = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n            this.expressionsList[this.expressionsList.indexOf(expression) + 1].beforeOperator = expression.afterOperator;\n\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.filter());\n        }\n    }\n\n    /**\n     * Scrolls the chips into the chip area when left or right arrows are pressed.\n     */\n    public scrollChipsOnArrowPress(arrowPosition: string) {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        if (arrowPosition === 'right') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.right)) {\n                    count++;\n                }\n            }\n\n            if (count < chipAraeChildren.length) {\n                this.chipAreaScrollOffset -= Math.ceil(chipAraeChildren[count].getBoundingClientRect().right) -\n                    Math.ceil(containerRect.right) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n\n        if (arrowPosition === 'left') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                    count++;\n                }\n            }\n\n            if (count > 0) {\n                this.chipAreaScrollOffset += Math.ceil(containerRect.left) -\n                    Math.ceil(chipAraeChildren[count - 1].getBoundingClientRect().left) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n    }\n\n    private showHideArrowButtons() {\n        requestAnimationFrame(() => {\n            if (this.filteringService.isFilterRowVisible) {\n                const containerWidth = this.container.nativeElement.getBoundingClientRect().width;\n                this.chipsAreaWidth = this.chipsArea.element.nativeElement.getBoundingClientRect().width;\n\n                this.showArrows = this.chipsAreaWidth >= containerWidth && this.isColumnFiltered;\n\n                // TODO: revise the cdr.detectChanges() usage here\n                this.cdr.detectChanges();\n            }\n        });\n    }\n\n    private transformValue(value): any {\n        if (this.column.dataType === DataType.Number) {\n            value = parseFloat(value);\n        } else if (this.column.dataType === DataType.Boolean) {\n            value = Boolean(value);\n        }\n\n        return value;\n    }\n\n    private addExpression(isSelected: boolean) {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = this.expression;\n        exprUI.beforeOperator = this.expressionsList.length > 0 ? FilteringLogic.And : null;\n        exprUI.isSelected = isSelected;\n\n        this.expressionsList.push(exprUI);\n\n        const length = this.expressionsList.length;\n        if (this.expressionsList[length - 2]) {\n            this.expressionsList[length - 2].afterOperator = this.expressionsList[length - 1].beforeOperator;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private removeExpression(indexToRemove: number, expression: IFilteringExpression) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.filter();\n\n        if (this.expression === expression) {\n            this.resetExpression();\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private resetExpression() {\n        this.expression = {\n            fieldName: this.column.field,\n            condition: null,\n            searchVal: null,\n            ignoreCase: this.column.filteringIgnoreCase\n        };\n\n        if (this.column.dataType !== DataType.Boolean) {\n            this.expression.condition = this.getCondition(this.conditions[0]);\n        }\n\n        if (this.column.dataType === DataType.Date && this.input) {\n            this.input.nativeElement.value = null;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private scrollChipsWhenAddingExpression() {\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        if (!chipAraeChildren || chipAraeChildren.length === 0) {\n            return;\n        }\n\n        const containerRectRight = Math.ceil(this.container.nativeElement.getBoundingClientRect().right);\n\n        const lastChipRectRight = Math.ceil(chipAraeChildren[chipAraeChildren.length - 1].getBoundingClientRect().right);\n        if (lastChipRectRight >= containerRectRight) {\n            this.chipAreaScrollOffset -= lastChipRectRight - containerRectRight;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    private transform(offset: number) {\n        requestAnimationFrame(() => {\n            this.chipsArea.element.nativeElement.style.transform = `translate(${offset}px)`;\n        });\n    }\n\n    private scrollChipsOnRemove() {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        for (let index = 0; index < chipAraeChildren.length; index++) {\n            if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                count++;\n            }\n        }\n\n        if (count <= 2) {\n            this.chipAreaScrollOffset = 0;\n        } else {\n            const dif = chipAraeChildren[count].id === 'chip' ? count - 2 : count - 1;\n            this.chipAreaScrollOffset += Math.ceil(containerRect.left) - Math.ceil(chipAraeChildren[dif].getBoundingClientRect().left) + 1;\n        }\n\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    private conditionChangedCallback() {\n        if (!!this.expression.searchVal || this.expression.searchVal === 0) {\n            this.filter();\n        } else if (this.value) {\n            this.value = null;\n        }\n    }\n\n    private unaryConditionChangedCallback() {\n        if (this.value) {\n            this.value = null;\n        }\n        if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n            this.addExpression(true);\n        }\n        this.filter();\n    }\n\n    private filter() {\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private get isColumnFiltered() {\n        return this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0;\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    ContentChildren,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    IterableChangeRecord,\n    IterableDiffers,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    ViewContainerRef,\n    InjectionToken,\n    Optional\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil, first, filter } from 'rxjs/operators';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, isEdge, isNavigationKey, CancelableEventArgs, flatten, mergeObjects } from '../core/utils';\nimport { DataType } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IForOfState, IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport {\n    IgxBaseExporter,\n    IgxExporterOptionsBase,\n    AbsoluteScrollStrategy,\n    HorizontalAlignment,\n    VerticalAlignment,\n    IgxOverlayService\n} from '../services/index';\nimport { IgxCheckboxComponent } from './../checkbox/checkbox.component';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IColumnVisibilityChangedEventArgs } from './column-hiding-item.directive';\nimport { IgxColumnComponent } from './column.component';\nimport { ISummaryExpression } from './summaries/grid-summary';\nimport { DropPosition, ContainerPositioningStrategy, IgxDecimalPipeComponent, IgxDatePipeComponent } from './grid.common';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxRowComponent } from './row.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { Transaction, TransactionType, TransactionService, State } from '../services/index';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditTabStopDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditActionsDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxGridRowComponent } from './grid';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { WatchChanges } from './watch-changes';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IGridResourceStrings } from '../core/i18n/grid-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { DeprecateMethod, DeprecateProperty } from '../core/deprecateDecorators';\nimport { IgxGridSelectionService, GridSelectionRange, IgxGridCRUDService, IgxRow, IgxCell } from '../core/grid-selection';\nimport { DragScrollDirection } from './drag-select.directive';\nimport { ICachedViewLoadedEventArgs } from '../directives/template-outlet/template_outlet.directive';\nimport {\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective\n} from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport { IgxDragIndicatorIconDirective } from './row-drag.directive';\nimport { IgxDragDirective } from '../directives/dragdrop/dragdrop.directive';\n\nconst MINIMUM_COLUMN_WIDTH = 136;\nconst FILTER_ROW_HEIGHT = 50;\n\n// By default row editing overlay outlet is inside grid body so that overlay is hidden below grid header when scrolling.\n// In cases when grid has 1-2 rows there isn't enough space in grid body and row editing overlay should be shown above header.\n// Default row editing overlay height is higher then row height that is why the case is valid also for row with 2 rows.\n// More accurate calculation is not possible, cause row editing overlay is still not shown and we don't know its height,\n// but in the same time we need to set row editing overlay outlet before opening the overlay itself.\nconst MIN_ROW_EDITING_COUNT_THRESHOLD = 2;\n\nexport const IgxGridTransaction = new InjectionToken<string>('IgxGridTransaction');\n\nexport interface IGridCellEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n}\n\nexport interface IGridEditEventArgs extends CancelableEventArgs {\n    rowID: any;\n    cellID?: {\n        rowID: any,\n        columnID: any,\n        rowIndex: number\n    };\n    oldValue: any;\n    newValue?: any;\n    event?: Event;\n}\n\nexport interface IPinColumnEventArgs {\n    column: IgxColumnComponent;\n    insertAtIndex: number;\n    isPinned: boolean;\n}\n\nexport interface IPageEventArgs {\n    previous: number;\n    current: number;\n}\n\nexport interface IRowDataEventArgs {\n    data: any;\n}\n\nexport interface IColumnResizeEventArgs {\n    column: IgxColumnComponent;\n    prevWidth: string;\n    newWidth: string;\n}\n\nexport interface IRowSelectionEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    row?: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    event?: Event;\n}\n\nexport interface ISearchInfo {\n    searchText: string;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n    activeMatchIndex: number;\n    matchInfoCache: any[];\n}\n\nexport interface IGridToolbarExportEventArgs {\n    grid: IgxGridBaseComponent;\n    exporter: IgxBaseExporter;\n    options: IgxExporterOptionsBase;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingStartEventArgs {\n    source: IgxColumnComponent;\n}\n\nexport interface IColumnMovingEventArgs {\n    source: IgxColumnComponent;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingEndEventArgs {\n    source: IgxColumnComponent;\n    target: IgxColumnComponent;\n}\n\n// TODO: to be deleted when onFocusChange event is removed #4054\nexport interface IFocusChangeEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n    cancel: boolean;\n}\n\nexport interface IGridKeydownEventArgs {\n    targetType: GridKeydownTargetType;\n    target: Object;\n    event: Event;\n    cancel: boolean;\n}\n\nexport interface ICellPosition {\n    rowIndex: number;\n    visibleColumnIndex: number;\n}\nexport interface IGridDataBindable {\n    data: any[];\n    filteredData: any[];\n}\n\nexport interface IRowDragEndEventArgs {\n    owner: IgxDragDirective;\n    dragData: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    animation: boolean;\n}\n\nexport interface IRowDragStartEventArgs extends CancelableEventArgs {\n    owner: IgxDragDirective;\n    dragData: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n }\n\nexport enum GridSummaryPosition {\n    top = 'top',\n    bottom = 'bottom'\n}\n\nexport enum GridSummaryCalculationMode {\n    rootLevelOnly = 'rootLevelOnly',\n    childLevelsOnly = 'childLevelsOnly',\n    rootAndChildLevels = 'rootAndChildLevels'\n}\n\nexport enum FilterMode {\n    quickFilter = 'quickFilter',\n    excelStyleFilter = 'excelStyleFilter'\n}\n\nexport enum GridKeydownTargetType {\n    dataCell = 'dataCell',\n    summaryCell = 'summaryCell',\n    groupRow = 'groupRow',\n    hierarchicalRow = 'hierarchicalRow'\n}\n\nexport abstract class IgxGridBaseComponent extends DisplayDensityBase implements OnInit, OnDestroy, AfterContentInit, AfterViewInit {\n    private _scrollWidth: number;\n\n    public get scrollWidth() {\n        return this._scrollWidth;\n    }\n\n    private _resourceStrings = CurrentResourceStrings.GridResStrings;\n    private _emptyGridMessage = null;\n    private _emptyFilteredGridMessage = null;\n    private _isLoading = false;\n    private _locale = null;\n    private _observer: MutationObserver;\n    private _destroyed = false;\n    private overlayIDs = [];\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: IGridResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): IGridResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that autogenerates the `IgxGridComponent` columns.\n     * The default value is false.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public autoGenerate = false;\n\n    public abstract id: string;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is empty.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [emptyGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public emptyGridTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is loading.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [loadingGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public loadingGridTemplate: TemplateRef<any>;\n\n    @WatchChanges()\n    @Input()\n    public get filteringLogic() {\n        return this._filteringExpressionsTree.operator;\n    }\n\n    /**\n     * Sets the filtering logic of the `IgxGridComponent`.\n     * The default is AND.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [filteringLogic]=\"filtering\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set filteringLogic(value: FilteringLogic) {\n        this._filteringExpressionsTree.operator = value;\n    }\n\n    /**\n     * Returns the filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let filteringExpressionsTree = this.grid.filteringExpressionsTree;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get filteringExpressionsTree() {\n        return this._filteringExpressionsTree;\n    }\n\n    /**\n     * Sets the filtering state of the `IgxGridComponent`.\n     * ```typescript\n     * const logic = new FilteringExpressionsTree(FilteringLogic.And, \"ID\");\n     * logic.filteringOperands = [\n     *     {\n     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n     *          fieldName: 'ID',\n     *          searchVal: 1\n     *     }\n     * ];\n     * this.grid.filteringExpressionsTree = (logic);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            const val = (value as FilteringExpressionsTree);\n            for (let index = 0; index < val.filteringOperands.length; index++) {\n                if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {\n                    const newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);\n                    newExpressionsTree.filteringOperands.push(val.filteringOperands[index] as IFilteringExpression);\n                    val.filteringOperands[index] = newExpressionsTree;\n                }\n            }\n\n            // clone the filtering expression tree in order to trigger the filtering pipe\n            const filteringExpressionTreeClone = new FilteringExpressionsTree(value.operator, value.fieldName);\n            filteringExpressionTreeClone.filteringOperands = value.filteringOperands;\n            this._filteringExpressionsTree = filteringExpressionTreeClone;\n\n            if (this.filteringService.isFilteringExpressionsTreeEmpty()) {\n                this.filteredData = null;\n            }\n\n            this.filteringService.refreshExpressions();\n            this.summaryService.clearSummaryCache();\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * Returns the locale of the grid.\n     * If not set, returns browser's language.\n     */\n    @Input()\n    get locale(): string {\n        if (this._locale) {\n            return this._locale;\n        } else {\n            return 'en';\n        }\n    }\n\n    /**\n     * Sets the locale of the grid.\n     */\n    set locale(value) {\n        this._locale = value;\n    }\n\n    /**\n     * Returns whether the paging feature is enabled/disabled.\n     * The default state is disabled (false).\n     * ```\n     * const paging = this.grid.paging;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get paging(): boolean {\n        return this._paging;\n    }\n\n    /**\n     * Enables/Disables the paging feature.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [paging]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set paging(value: boolean) {\n        this._paging = value;\n        this._pipeTrigger++;\n\n        if (this._ngAfterViewInitPassed) {\n            this.cdr.detectChanges();\n            this.calculateGridHeight();\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * Returns the current page index.\n     * ```html\n     * let gridPage = this.grid.page;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get page(): number {\n        return this._page;\n    }\n\n    /**\n     * Sets the current page index.\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [page]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     */\n    set page(val: number) {\n        if (val === this._page || val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.onPagingDone.emit({ previous: this._page, current: val });\n        this._page = val;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns the number of visible items per page of the `IgxGridComponent`.\n     * The default is 15.\n     * ```html\n     * let itemsPerPage = this.grid.perPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get perPage(): number {\n        return this._perPage;\n    }\n\n    /**\n     * Sets the number of visible items per page of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [perPage]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set perPage(val: number) {\n        if (val < 0) {\n            return;\n        }\n\n        this.selectionService.clear();\n        this._perPage = val;\n        this.page = 0;\n        this.endEdit(true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * You can provide a custom `ng-template` for the pagination UI of the grid.\n     * ```html\n     * <igx-grid #grid [paging]=\"true\" [myTemplate]=\"myTemplate\" [height]=\"'305px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public paginationTemplate: TemplateRef<any>;\n\n    /**\n     * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * By default it is disabled (false).\n     * ```typescript\n     * let gridColHiding = this.grid.columnHiding;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get columnHiding() {\n        return this._columnHiding;\n    }\n\n    /**\n     * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * In order for the UI to work, you need to enable the toolbar as shown in the example below.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [showToolbar]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnHiding(value) {\n        if (this._columnHiding !== value) {\n            this._columnHiding = value;\n            if (this.gridAPI.grid) {\n                this.markForCheck();\n                if (this._ngAfterViewInitPassed) {\n                    this.calculateGridSizes();\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets whether the `IgxGridRowComponent` selection is enabled.\n     * By default it is set to false.\n     * ```typescript\n     * let rowSelectable = this.grid.rowSelectable;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get rowSelectable(): boolean {\n        return this._rowSelection;\n    }\n\n    /**\n     * Sets whether rows can be selected.\n     * ```html\n     * <igx-grid #grid [showToolbar]=\"true\" [rowSelectable]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set rowSelectable(val: boolean) {\n        this._rowSelection = val;\n        if (this.gridAPI.grid && this.columnList) {\n\n            // should selection persist?\n            this.allRowsSelected = false;\n            this.deselectAllRows();\n            this.calculateGridSizes();\n        }\n    }\n\n    @Input()\n    get rowDraggable(): boolean {\n        return this._rowDrag;\n    }\n\n    /**\n     * Sets whether rows can be moved.\n     * ```html\n     * <igx-grid #grid [rowDraggable]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set rowDraggable(val: boolean) {\n        this._rowDrag = val;\n        if (this.gridAPI.grid && this.columnList) {\n            this.calculateGridSizes();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public rowDragging = false;\n\n\n    /**\n * Sets whether the `IgxGridRowComponent` is editable.\n * By default it is set to false.\n * ```typescript\n * let rowEditable = this.grid.rowEditable;\n * ```\n * @memberof IgxGridBaseComponent\n */\n    @WatchChanges()\n    @Input()\n    get rowEditable(): boolean {\n        return this._rowEditable;\n    }\n    /**\n    * Sets whether rows can be edited.\n    * ```html\n    * <igx-grid #grid [showToolbar]=\"true\" [rowEditable]=\"true\" [primaryKey]=\"'ProductID'\" [columnHiding]=\"true\"></igx-grid>\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    set rowEditable(val: boolean) {\n        if (val && (this.primaryKey === undefined || this.primaryKey === null)) {\n            console.warn('The grid must have a `primaryKey` specified when using `rowEditable`!');\n        }\n        this._rowEditable = val;\n        if (this.gridAPI.grid) {\n            this.refreshGridState();\n        }\n    }\n\n    /**\n     * Returns the height of the `IgxGridComponent`.\n     * ```typescript\n     * let gridHeight = this.grid.height;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @HostBinding('style.height')\n    @Input()\n    public get height() {\n        return this._height;\n    }\n\n    /**\n     * Sets the height of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set height(value: string) {\n        if (this._height !== value) {\n            this._height = value;\n            requestAnimationFrame(() => {\n                if (!this._destroyed) {\n                    this.reflow();\n                    this.cdr.markForCheck();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns the width of the `IgxGridComponent`.\n     * ```typescript\n     * let gridWidth = this.grid.width;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @HostBinding('style.width')\n    @Input()\n    public get width() {\n        return this._width;\n    }\n\n    /**\n     * Sets the width of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [width]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set width(value: string) {\n        if (this._width !== value) {\n            this._width = value;\n            requestAnimationFrame(() => {\n                // Calling reflow(), because the width calculation\n                // might make the horizontal scrollbar appear/disappear.\n                // This will change the height, which should be recalculated.\n                if (!this._destroyed) {\n                    this.reflow();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns the width of the header of the `IgxGridComponent`.\n     * ```html\n     * let gridHeaderWidth = this.grid.headerWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerWidth() {\n        return parseInt(this._width, 10) - 17;\n    }\n\n    /**\n     * An @Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-even-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public evenRowCSS = 'igx-grid__tr--even';\n\n    /**\n     * An @Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-odd-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public oddRowCSS = 'igx-grid__tr--odd';\n\n    /**\n     * Returns the row height.\n     * ```typescript\n     * const rowHeight = this.grid.rowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get rowHeight() {\n        return this._rowHeight ? this._rowHeight : this.defaultRowHeight;\n    }\n\n    /**\n     * Sets the row height.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [rowHeight]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set rowHeight(value) {\n        this._rowHeight = parseInt(value, 10);\n    }\n\n    /**\n     * An @Input property that sets the default width of the `IgxGridComponent`'s columns.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [columnWidth]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get columnWidth(): string {\n        return this._columnWidth;\n    }\n    public set columnWidth(value: string) {\n        this._columnWidth = value;\n        this.columnWidthSetByUser = true;\n    }\n\n    /**\n     * An @Input property that sets the primary key of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [primaryKey]=\"'ProductID'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public primaryKey;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set emptyGridMessage(value: string) {\n        this._emptyGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records.\n    */\n    get emptyGridMessage(): string {\n        return this._emptyGridMessage || this.resourceStrings.igx_grid_emptyGrid_message;\n    }\n\n    /**\n     * An @Input property that sets whether the grid is going to show loading indicator.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [isLoading]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set isLoading(value: boolean) {\n        this._isLoading = value;\n        if (this.gridAPI.grid) {\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * An accessor that returns whether the grid is showing loading indicator.\n     */\n    get isLoading(): boolean {\n        return this._isLoading;\n    }\n\n    /**\n     * A property that allows the columns to be auto-generated once again after the initialization of the grid.\n     * This will allow to bind the grid to remote data and having auto-generated columns at the same time.\n     * Note that after generating the columns, this property would be disabled to avoid re-creating\n     * columns each time a new data is assigned.\n     * ```typescript\n     *  this.grid.shouldGenerate = true;\n     *  this.remoteData = this.remoteService.remoteData;\n     * ```\n     */\n    public shouldGenerate: boolean;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records and the grid is filtered.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set emptyFilteredGridMessage(value: string) {\n        this._emptyFilteredGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records and the grid is filtered.\n    */\n    get emptyFilteredGridMessage(): string {\n        return this._emptyFilteredGridMessage || this.resourceStrings.igx_grid_emptyFilteredGrid_message;\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the built-in column hiding UI.\n     * ```html\n     * <igx-grid [showToolbar]=\"true\" [columnHiding]=\"true\" columnHidingTitle=\"Column Hiding\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnHidingTitle = '';\n\n    /**\n     * Returns if the built-in column pinning UI should be shown in the toolbar.\n     * ```typescript\n     *  let colPinning = this.grid.columnPinning;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get columnPinning() {\n        return this._columnPinning;\n    }\n\n    /**\n     * Sets if the built-in column pinning UI should be shown in the toolbar.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnPinning(value) {\n        if (this._columnPinning !== value) {\n            this._columnPinning = value;\n            if (this.gridAPI.grid) {\n                this.markForCheck();\n                if (this._ngAfterViewInitPassed) {\n                    this.calculateGridSizes();\n                }\n            }\n        }\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the UI of the column pinning.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [columnPinningTitle]=\"'Column Hiding'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnPinningTitle = '';\n\n    /**\n     * Returns if the filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowFiltering;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get allowFiltering() {\n        return this._allowFiltering;\n    }\n\n    /**\n     * Sets if the filtering is enabled.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowFiltering]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set allowFiltering(value) {\n        if (this._allowFiltering !== value) {\n            this._allowFiltering = value;\n            if (this.calcHeight) {\n                this.calcHeight += value ? -FILTER_ROW_HEIGHT : FILTER_ROW_HEIGHT;\n            }\n            if (this._ngAfterViewInitPassed) {\n                if (this.maxLevelHeaderDepth) {\n                    this.theadRow.nativeElement.style.height = `${(this.maxLevelHeaderDepth + 1) * this.defaultRowHeight +\n                        (value && this.filterMode === FilterMode.quickFilter ? FILTER_ROW_HEIGHT : 0) + 1}px`;\n                }\n            }\n\n            this.filteringService.isFilterRowVisible = false;\n            this.filteringService.filteredColumn = null;\n\n            this.filteringService.registerSVGIcons();\n            if (this.gridAPI.grid) {\n                this.markForCheck();\n            }\n        }\n    }\n\n    /**\n     * Returns the filter mode.\n     * ```typescript\n     *  let filtering = this.grid.filterMode;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get filterMode() {\n        return this._filterMode;\n    }\n\n    /**\n     * Sets filter mode.\n     * By default it's set to FilterMode.quickFilter.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [filterMode]=\"'quickFilter'\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filterMode(value) {\n        this._filterMode = value;\n    }\n\n    /**\n     * Returns the summary position.\n     * ```typescript\n     *  let summaryPosition = this.grid.summaryPosition;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get summaryPosition() {\n        return this._summaryPosition;\n    }\n\n    /**\n     * Sets summary position.\n     * By default it is bottom.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryPosition=\"top\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set summaryPosition(value) {\n        this._summaryPosition = value;\n        if (this.gridAPI.grid) {\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * Returns the summary calculation mode.\n     * ```typescript\n     *  let summaryCalculationMode = this.grid.summaryCalculationMode;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get summaryCalculationMode() {\n        return this._summaryCalculationMode;\n    }\n\n    /**\n     * Sets summary calculation mode.\n     * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryCalculationMode=\"rootLevelOnly\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set summaryCalculationMode(value) {\n        this._summaryCalculationMode = value;\n        if (this.gridAPI.grid) {\n            this.summaryService.resetSummaryHeight();\n            this.endEdit(true);\n            this.calculateGridHeight();\n            this.cdr.markForCheck();\n        }\n    }\n\n    /**\n     * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onCellClick)=\"onCellClick($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClick(e){\n     *     alert(\"The cell has been clicked!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onSelection)=\"onCellSelect($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellSelect(e){\n     *     alert(\"The cell has been selected!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     *  Emitted when `IgxGridRowComponent` is selected.\n     * ```html\n     * <igx-grid #grid (onRowSelectionChange)=\"onRowClickChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClickChange(e){\n     *     alert(\"The selected row has been changed!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowSelectionChange = new EventEmitter<IRowSelectionEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is pinned.\n     * The index that the column is inserted at may be changed through the `insertAtIndex` property.\n     * ```typescript\n     * public columnPinning(event) {\n     *     if (event.column.field === \"Name\") {\n     *       event.insertAtIndex = 0;\n     *     }\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnPinning = new EventEmitter<IPinColumnEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent`\n     * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editCancel(event: IGridEditEventArgs){\n     *    const rowID: IgxColumnComponent = event.rowID;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editStart(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.\n     * Event is fired after editing is completed, when the cell is exiting edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editDone(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" a row enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editStart(event: IGridEditEventArgs) {\n     *          const editedRowObj = event.oldValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onRowEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing paging operation, column resizing, pinning, moving or hitting  `Done`\n     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     *\n     * ```typescript\n     *      editDone(event: IGridEditEventArgs) {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(false)` is called.\n     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button\n     * in the row editing overlay.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when a grid column is initialized. Returns the column object.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [onColumnInit]=\"initColumns($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * initColumns(event: IgxColumnComponent) {\n     * const column: IgxColumnComponent = event;\n     *       column.filterable = true;\n     *       column.sortable = true;\n     *       column.editable = true;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnInit = new EventEmitter<IgxColumnComponent>();\n\n    /**\n     * Emitted when sorting is performed through the UI. Returns the sorting expression.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onSortingDone)=\"sortingDone($event)\"></igx-grid>\n     * ```\n     * ```typescript\n     * sortingDone(event: SortingDirection){\n     *     const sortingDirection = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSortingDone = new EventEmitter<ISortingExpression | Array<ISortingExpression>>();\n\n    /**\n     * Emitted when filtering is performed through the UI.\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * ```typescript\n     * filteringDone(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     *}\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onFilteringDone)=\"filteringDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onFilteringDone = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted when paging is performed. Returns an object consisting of the previous and next pages.\n     * ```typescript\n     * pagingDone(event: IPageEventArgs){\n     *     const paging = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onPagingDone)=\"pagingDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onPagingDone = new EventEmitter<IPageEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.\n     * Returns the data for the new `IgxGridRowComponent` object.\n     * ```typescript\n     * rowAdded(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowAdded)=\"rowAdded($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowAdded = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.\n     * Returns an `IRowDataEventArgs` object.\n     * ```typescript\n     * rowDeleted(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowDeleted)=\"rowDeleted($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowDeleted = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     * ```typescript\n     *  <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is resized.\n     * Returns the `IgxColumnComponent` object's old and new width.\n     * ```typescript\n     * resizing(event: IColumnResizeEventArgs){\n     *     const grouping = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onColumnResized)=\"resizing($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnResized = new EventEmitter<IColumnResizeEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * contextMenu(event: IGridCellEventArgs){\n     *     const resizing = event;\n     *     console.log(resizing);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onContextMenu)=\"contextMenu($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onContextMenu = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * dblClick(event: IGridCellEventArgs){\n     *     const dblClick = event;\n     *     console.log(dblClick);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onDoubleClick)=\"dblClick($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDoubleClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }\n     * ```typescript\n     * visibilityChanged(event: IColumnVisibilityChangedEventArgs){\n     *    const visiblity = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnVisibilityChanged)=\"visibilityChanged($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.\n     * ```typescript\n     * movingStart(event: IColumnMovingStartEventArgs){\n     *     const movingStarts = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingStart)=\"movingStart($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingStart = new EventEmitter<IColumnMovingStartEventArgs>();\n\n    /**\n     * Emitted throughout the `IgxColumnComponent` moving operation.\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * ```typescript\n     * moving(event: IColumnMovingEventArgs){\n     *     const moving = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMoving)=\"moving($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMoving = new EventEmitter<IColumnMovingEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving ends.\n     * Returns the source and target `IgxColumnComponent` objects.\n     * ```typescript\n     * movingEnds(event: IColumnMovingEndEventArgs){\n     *     const movingEnds = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingEnd)=\"movingEnds($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingEnd = new EventEmitter<IColumnMovingEndEventArgs>();\n\n    /**\n     * @deprecated you should use onGridKeydown event\n     */\n    @Output()\n    @DeprecateProperty('onFocusChange event is deprecated. Use onGridKeydown event instead.')\n    public onFocusChange = new EventEmitter<IFocusChangeEventArgs>();\n\n    /**\n     * Emitted when keydown is triggered over element inside grid's body.\n     * This event is fired only if the key combination is supported in the grid.\n     * Return the target type, target object and the original event. This event is cancelable.\n     * ```typescript\n     * customKeydown(args: IGridKeydownEventArgs) {\n     *  const keydownEvent = args.event;\n     * }\n     * ```\n     * ```html\n     *  <igx-grid (onGridKeydown)=\"customKeydown($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onGridKeydown = new EventEmitter<IGridKeydownEventArgs>();\n\n     /**\n     * Emitted when start dragging a row.\n     * Return the dragged row.\n    */\n    @Output()\n    public onRowDragStart = new EventEmitter<IRowDragStartEventArgs>();\n\n    /**\n     * Emitted when dropping a row.\n     * Return the dropped row.\n    */\n    @Output()\n    public onRowDragEnd = new EventEmitter<IRowDragEndEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridColumnResizerComponent)\n    public resizeLine: IgxGridColumnResizerComponent;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: true })\n    public columnList: QueryList<IgxColumnComponent>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleSortingTemplateDirective, { read: IgxExcelStyleSortingTemplateDirective })\n    public excelStyleSortingTemplateDirective: IgxExcelStyleSortingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleMovingTemplateDirective, { read: IgxExcelStyleMovingTemplateDirective })\n    public excelStyleMovingTemplateDirective: IgxExcelStyleMovingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleHidingTemplateDirective, { read: IgxExcelStyleHidingTemplateDirective })\n    public excelStyleHidingTemplateDirective: IgxExcelStyleHidingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStylePinningTemplateDirective, { read: IgxExcelStylePinningTemplateDirective })\n    public excelStylePinningTemplateDirective: IgxExcelStylePinningTemplateDirective;\n\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxGridHeaderGroupComponent, { read: IgxGridHeaderGroupComponent })\n    public headerGroups: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * A list of all `IgxGridHeaderGroupComponent`.\n     * ```typescript\n     * const headerGroupsList = this.grid.headerGroupsList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerGroupsList(): IgxGridHeaderGroupComponent[] {\n        return this.headerGroups ? flatten(this.headerGroups.toArray()) : [];\n    }\n\n    /**\n     * A list of all `IgxGridHeaderComponent`.\n     * ```typescript\n     * const headers = this.grid.headerCellList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerCellList(): IgxGridHeaderComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.headerCell).filter((headerCell) => headerCell);\n    }\n\n    /**\n     * A list of all `IgxGridFilteringCellComponent`.\n     * ```typescript\n     * const filterCells = this.grid.filterCellList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get filterCellList(): IgxGridFilteringCellComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.filterCell).filter((filterCell) => filterCell);\n    }\n\n    @ViewChildren('row')\n    private _rowList: QueryList<IgxGridRowComponent>;\n\n    @ViewChildren('summaryRow', { read: IgxSummaryRowComponent })\n    protected _summaryRowList: QueryList<IgxSummaryRowComponent>;\n\n    public get summariesRowList() {\n        const res = new QueryList<any>();\n        if (!this._summaryRowList) {\n            return res;\n        }\n        const sumList = this._summaryRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(sumList);\n        return res;\n    }\n\n    /**\n     * A list of `IgxGridRowComponent`.\n     * ```typescript\n     * const rowList = this.grid.rowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get rowList() {\n        const res = new QueryList<any>();\n        if (!this._rowList) {\n            return res;\n        }\n        const rList = this._rowList\n            .filter((item) => {\n                return item.element.nativeElement.parentElement !== null;\n            })\n            .sort((a, b) => {\n                return a.index - b.index;\n            });\n        res.reset(rList);\n        return res;\n    }\n\n    @ViewChildren(IgxRowComponent, { read: IgxRowComponent })\n    private _dataRowList: QueryList<any>;\n\n    /**\n     * A list of `IgxGridRowComponent`, currently rendered.\n     * ```typescript\n     * const dataList = this.grid.dataRowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get dataRowList() {\n        const res = new QueryList<any>();\n        if (!this._dataRowList) {\n            return res;\n        }\n        const rList = this._dataRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        }).sort((a, b) => {\n            return a.index - b.index;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * A template reference for the template when the filtered `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('emptyFilteredGrid', { read: TemplateRef })\n    public emptyFilteredGridTemplate: TemplateRef<any>;\n\n    /**\n     * A template reference for the template when the `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('defaultEmptyGrid', { read: TemplateRef })\n    public emptyGridDefaultTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultLoadingGrid', { read: TemplateRef })\n    public loadingGridDefaultTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scrollContainer', { read: IgxGridForOfDirective })\n    public parentVirtDir: IgxGridForOfDirective<any>;\n\n    /**\n     * Returns the template which will be used by the toolbar to show custom content.\n     * ```typescript\n     * let customContentTemplate = this.grid.toolbarCustomContentTemplate;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    public get toolbarCustomContentTemplate(): IgxGridToolbarCustomContentDirective {\n        return this.toolbarCustomContentTemplates.first;\n    }\n\n    @ContentChildren(IgxGridToolbarCustomContentDirective, { read: IgxGridToolbarCustomContentDirective, descendants: false })\n    public toolbarCustomContentTemplates: QueryList<IgxGridToolbarCustomContentDirective>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollContainer', { read: IgxGridForOfDirective })\n    public verticalScrollContainer: IgxGridForOfDirective<any>;\n\n        /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollHolder', { read: IgxGridForOfDirective })\n    public verticalScroll: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scr', { read: ElementRef })\n    public scr: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('paginator', { read: ElementRef })\n    public paginator: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer', { read: IgxGridForOfDirective })\n    public headerContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerCheckboxContainer')\n    public headerCheckboxContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerDragContainer')\n    public headerDragContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerGroupContainer')\n    public headerGroupContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerCheckbox', { read: IgxCheckboxComponent })\n    public headerCheckbox: IgxCheckboxComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('filteringRow', { read: IgxGridFilteringRowComponent })\n    public filteringRow: IgxGridFilteringRowComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('theadRow')\n    public theadRow: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tbody')\n    public tbody: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tfoot')\n    public tfoot: ElementRef;\n\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective })\n    protected _outletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    public get outletDirective() {\n        return this._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective })\n    public rowEditingOutletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    public get rowOutletDirective() {\n        return this.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public get parentRowOutletDirective() {\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRowEditTemplate', { read: TemplateRef })\n    private defaultRowEditTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowEditTemplateDirective, { read: TemplateRef })\n    public rowEditCustom: TemplateRef<any>;\n\n    /** @hidden */\n    public get rowEditContainer(): TemplateRef<any> {\n        return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;\n    }\n    /** @hidden */\n    @ContentChild(IgxRowEditTextDirective, { read: TemplateRef })\n    public rowEditText: TemplateRef<any>;\n    /** @hidden */\n    @ContentChild(IgxRowEditActionsDirective, { read: TemplateRef })\n    public rowEditActions: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get rowInEditMode(): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        const editRowState = this.crudService.row;\n        return editRowState !== null ? this.rowList.find(e => e.rowID === editRowState.id) : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get firstEditableColumnIndex(): number {\n        const index = [...this.pinnedColumns, ...this.unpinnedColumns].filter(e => !e.columnGroup).findIndex(e => e.editable);\n        return index !== -1 ? index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get lastEditableColumnIndex(): number {\n        const orderedColumns = [...this.pinnedColumns, ...this.unpinnedColumns].filter(e => !e.columnGroup);\n        const index = orderedColumns.reverse().findIndex(e => e.editable);\n        return index !== -1 ? orderedColumns.length - 1 - index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsDEFAULT: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsCUSTOM: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     * TODO: Nav service logic doesn't handle 0 results from this querylist\n     */\n    public get rowEditTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective)\n    public rowEditingOverlay: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid');\n    }\n\n    get bannerClass(): string {\n        const position = this.rowEditPositioningStrategy.isTop ? 'igx-banner__border-top' : 'igx-banner__border-bottom';\n        return `${this.getComponentDensityClass('igx-banner')} ${position}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public hostRole = 'grid';\n\n    /**\n     * @hidden\n     */\n    get pipeTrigger(): number {\n        return this._pipeTrigger;\n    }\n\n    /**\n     * @hidden\n     */\n    get summaryPipeTrigger(): number {\n        return this._summaryPipeTrigger;\n    }\n\n    /**\n     * Returns the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * const sortingState = this.grid.sortingExpressions;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * Sets the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.sortingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Desc,\n     *     ignoreCase: true\n     * }];\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = cloneArray(value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns the state of the grid virtualization, including the start index and how many records are rendered.\n     * ```typescript\n     * const gridVirtState = this.grid1.virtualizationState;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get virtualizationState() {\n        return this.verticalScrollContainer.state;\n    }\n\n    /**\n     * @hidden\n     */\n    set virtualizationState(state) {\n        this.verticalScrollContainer.state = state;\n    }\n\n    /**\n     * Returns the total number of records in the data source.\n     * Works only with remote grid virtualization.\n     * ```typescript\n     * const itemCount = this.grid1.totalItemCount;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalItemCount() {\n        return this.verticalScrollContainer.totalItemCount;\n    }\n\n    /**\n     * Sets the total number of records in the data source.\n     * This property is required for virtualization to function when the grid is bound remotely.\n     * ```typescript\n     * this.grid1.totalItemCount = 55;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set totalItemCount(count) {\n        this.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.hasColumnLayouts ?\n                this.columnList.reduce((acc, col) => Math.max(acc, col.rowStart), 0) :\n                this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n    /**\n     * Returns the number of hidden `IgxColumnComponent`.\n     * ```typescript\n     * const hiddenCol = this.grid.hiddenColumnsCount;\n     * ``\n     */\n    get hiddenColumnsCount() {\n        return this.columnList.filter((col) => col.columnGroup === false && col.hidden === true).length;\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const hiddenColText = this.grid.hiddenColumnsText;\n     * ``\n     */\n    @WatchChanges()\n    @Input()\n    get hiddenColumnsText() {\n        return this._hiddenColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" [hiddenColumnsText]=\"'Hidden Columns'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set hiddenColumnsText(value) {\n        this._hiddenColumnsText = value;\n\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const pinnedText = this.grid.pinnedColumnsText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get pinnedColumnsText() {\n        return this._pinnedColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```html\n     * <igx-grid [pinnedColumnsText]=\"'PinnedCols Text\" [data]=\"data\" [width]=\"'100%'\" [height]=\"'500px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set pinnedColumnsText(value) {\n        this._pinnedColumnsText = value;\n    }\n\n    /**\n     * Get transactions service for the grid.\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        return this._transactions;\n    }\n\n    /**\n     * @hidden\n    */\n    public columnsWithNoSetWidths = null;\n\n    /* Toolbar related definitions */\n    private _showToolbar = false;\n    private _exportExcel = false;\n    private _exportCsv = false;\n    private _toolbarTitle: string = null;\n    private _exportText: string = null;\n    private _exportExcelText: string = null;\n    private _exportCsvText: string = null;\n    private _rowEditable = false;\n    private _currentRowState: any;\n    private _filteredSortedData = null;\n    /**\n     * @hidden\n    */\n    public get currentRowState(): any {\n        return this._currentRowState;\n    }\n\n    /**\n     * Provides access to the `IgxToolbarComponent`.\n     * ```typescript\n     * const gridToolbar = this.grid.toolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('toolbar', { read: IgxGridToolbarComponent })\n    public toolbar: IgxGridToolbarComponent = null;\n\n    @ViewChild('toolbar', { read: ElementRef })\n    private toolbarHtml: ElementRef = null;\n\n    /**\n     * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.\n     * ```typescript\n     * const toolbarGrid = this.grid.showToolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get showToolbar(): boolean {\n        return this._showToolbar;\n    }\n\n    /**\n     * Shows or hides the `IgxGridComponent`'s toolbar.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" ></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set showToolbar(newValue: boolean) {\n        if (this._showToolbar !== newValue) {\n            this._showToolbar = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the toolbar's title.\n     * ```typescript\n     * const toolbarTitle  = this.grid.toolbarTitle;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get toolbarTitle(): string {\n        return this._toolbarTitle;\n    }\n\n    /**\n     * Sets the toolbar's title.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [toolbarTitle]=\"'My Grid'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set toolbarTitle(newValue: string) {\n        if (this._toolbarTitle !== newValue) {\n            this._toolbarTitle = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to MS Excel is enabled or disabled.\n     * ```typescript\n     * cosnt excelExporter = this.grid.exportExcel;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcel(): boolean {\n        return this.getExportExcel();\n    }\n\n    /**\n     * Enable or disable the option for exporting to MS Excel.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcel(newValue: boolean) {\n        if (this._exportExcel !== newValue) {\n            this._exportExcel = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to CSV is enabled or disabled.\n     * ```typescript\n     * const exportCsv = this.grid.exportCsv;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsv(): boolean {\n        return this.getExportCsv();\n    }\n\n    /**\n     * Enable or disable the option for exporting to CSV.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsv(newValue: boolean) {\n        if (this._exportCsv !== newValue) {\n            this._exportCsv = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the main export button.\n     * ```typescript\n     * const exportText = this.grid.exportText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportText(): string {\n        return this._exportText;\n    }\n\n    /**\n     * Sets the textual content for the main export button.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportText(newValue: string) {\n        if (this._exportText !== newValue) {\n            this._exportText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the MS Excel export button.\n     * ```typescript\n     * const excelText = this.grid.exportExcelText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcelText(): string {\n        return this._exportExcelText;\n    }\n\n    /**\n     * Sets the textual content for the MS Excel export button.\n     * ```html\n     * <igx-grid [exportExcelText]=\"'My Excel Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcelText(newValue: string) {\n        if (this._exportExcelText !== newValue) {\n            this._exportExcelText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the CSV export button.\n     * ```typescript\n     * const csvText = this.grid.exportCsvText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsvText(): string {\n        return this._exportCsvText;\n    }\n\n    /**\n     * Sets the textual content for the CSV export button.\n     * ```html\n     * <igx-grid [exportCsvText]=\"'My Csv Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsvText(newValue: string) {\n        if (this._exportCsvText !== newValue) {\n            this._exportCsvText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public rowEditMessage;\n\n    /**\n     * Emitted when an export process is initiated by the user.\n     * ```typescript\n     * toolbarExporting(event: IGridToolbarExportEventArgs){\n     *     const toolbarExporting = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onToolbarExporting = new EventEmitter<IGridToolbarExportEventArgs>();\n\n    /* End of toolbar related definitions */\n\n    // TODO: Document\n    @Output()\n    onRangeSelection = new EventEmitter<GridSelectionRange>();\n\n    /**\n     * @hidden\n     */\n    public pagingState;\n    /**\n     * @hidden\n     */\n    public calcWidth: number;\n    /**\n     * @hidden\n     */\n    public calcHeight = 0;\n    /**\n     * @hidden\n     */\n    public tfootHeight: number;\n    /**\n     * @hidden\n     */\n    public chipsGoupingExpressions = [];\n    /**\n     * @hidden\n     */\n    public summariesHeight: number;\n\n    /**\n     * @hidden\n     */\n    public draggedColumn: IgxColumnComponent;\n\n    /**\n     * @hidden\n     */\n    public allRowsSelected = false;\n\n    /**\n     * @hidden\n     */\n    public disableTransitions = false;\n\n    /**\n     * @hidden\n     */\n    public lastSearchInfo: ISearchInfo = {\n        searchText: '',\n        caseSensitive: false,\n        exactMatch: false,\n        activeMatchIndex: 0,\n        matchInfoCache: []\n    };\n\n    /**\n     * @hidden\n     */\n    public columnWidthSetByUser = false;\n\n    abstract data: any[];\n    abstract filteredData: any[];\n    // abstract dataLength;\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    /**\n     * @hidden\n     */\n    protected _perPage = 15;\n    /**\n     * @hidden\n     */\n    protected _page = 0;\n    /**\n     * @hidden\n     */\n    protected _paging = false;\n    /**\n     * @hidden\n     */\n    protected _rowSelection = false;\n    /**\n     * @hidden\n     */\n    protected _rowDrag = false;\n    /**\n     * @hidden\n     */\n    protected _pipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _summaryPipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _columns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _pinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _unpinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _filteringExpressionsTree: IFilteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions: Array<ISortingExpression> = [];\n    /**\n     * @hidden\n     */\n    protected _maxLevelHeaderDepth = null;\n    /**\n     * @hidden\n     */\n    protected _columnHiding = false;\n    /**\n     * @hidden\n     */\n    protected _columnPinning = false;\n    /**\n     * @hidden\n     */\n    protected _keydownListener = null;\n    /**\n     * @hidden\n     */\n    protected _vScrollListener = null;\n    /**\n     * @hidden\n     */\n    protected _hScrollListener = null;\n    /**\n     * @hidden\n     */\n    protected _wheelListener = null;\n    protected _allowFiltering = false;\n    protected _filterMode = FilterMode.quickFilter;\n    private resizeHandler;\n    private columnListDiffer;\n    private _hiddenColumnsText = '';\n    private _pinnedColumnsText = '';\n    private _height = '100%';\n    private _width = '100%';\n    private _rowHeight;\n    protected _ngAfterViewInitPassed = false;\n    private _horizontalForOfs;\n    private _multiRowLayoutRowSize = 1;\n\n    // Caches\n    private _totalWidth = NaN;\n    private _pinnedVisible = [];\n    private _unpinnedVisible = [];\n    private _pinnedWidth = NaN;\n    private _unpinnedWidth = NaN;\n    private _visibleColumns = [];\n    private _columnGroups = false;\n\n    private _columnWidth: string;\n\n    private _defaultTargetRecordNumber = 10;\n\n    private _summaryPosition = GridSummaryPosition.bottom;\n    private _summaryCalculationMode = GridSummaryCalculationMode.rootAndChildLevels;\n\n    private rowEditPositioningStrategy = new ContainerPositioningStrategy({\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom,\n        closeAnimation: null\n    });\n\n    private rowEditSettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        outlet: this.rowOutletDirective,\n        positionStrategy: this.rowEditPositioningStrategy\n    };\n\n    private verticalScrollHandler(event) {\n        this.verticalScrollContainer.onScroll(event);\n        if (isEdge()) { this.wheelHandler(false); }\n        this.disableTransitions = true;\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.verticalScrollContainer.onChunkLoad.emit(this.verticalScrollContainer.state);\n            });\n\n            if (this.rowEditable) {\n                this.changeRowEditingOverlayStateOnScroll(this.rowInEditMode);\n            }\n            this.disableTransitions = false;\n        });\n\n        this.hideOverlays();\n    }\n\n    private horizontalScrollHandler(event) {\n        const scrollLeft = event.target.scrollLeft;\n        if (isEdge()) { this.wheelHandler(true); }\n        this.headerContainer.onHScroll(scrollLeft);\n        this._horizontalForOfs.forEach(vfor => vfor.onHScroll(scrollLeft));\n        this.cdr.markForCheck();\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.parentVirtDir.onChunkLoad.emit(this.headerContainer.state);\n            });\n        });\n\n        this.hideOverlays();\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public hideOverlays() {\n        this.overlayIDs.forEach(overlayID => {\n            this.overlayService.hide(overlayID);\n            this.overlayService.onClosed.pipe(\n                filter(o => o.id === overlayID),\n                takeUntil(this.destroy$)).subscribe(() => {\n                    this.nativeElement.focus();\n                });\n        });\n    }\n\n    private keydownHandler(event) {\n        const key = event.key.toLowerCase();\n        if ((isNavigationKey(key) && event.keyCode !== 32) || key === 'tab' || key === 'pagedown' || key === 'pageup') {\n            event.preventDefault();\n            if (key === 'pagedown') {\n                this.verticalScrollContainer.scrollNextPage();\n                this.nativeElement.focus();\n            } else if (key === 'pageup') {\n                this.verticalScrollContainer.scrollPrevPage();\n                this.nativeElement.focus();\n            }\n        }\n    }\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        public crudService: IgxGridCRUDService,\n        private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) protected _transactions: TransactionService<Transaction, State>,\n        private elementRef: ElementRef,\n        private zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        public cdr: ChangeDetectorRef,\n        protected resolver: ComponentFactoryResolver,\n        protected differs: IterableDiffers,\n        protected viewRef: ViewContainerRef,\n        public navigation: IgxGridNavigationService,\n        public filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n        this.resizeHandler = () => {\n            this.zone.run(() => this.calculateGridSizes());\n        };\n    }\n\n    _setupServices() {\n        this.gridAPI.grid = this;\n        this.crudService.grid = this;\n        this.navigation.grid = this;\n        this.filteringService.grid = this;\n        this.summaryService.grid = this;\n    }\n\n    _setupListeners() {\n        const destructor = takeUntil(this.destroy$);\n\n        this.onRowAdded.pipe(destructor).subscribe(args => this.refreshGridState(args));\n        this.onRowDeleted.pipe(destructor).subscribe(args => {\n            this.summaryService.deleteOperation = true;\n            this.summaryService.clearSummaryCache(args);\n        });\n        this.transactions.onStateUpdate.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.summaryService.clearSummaryCache();\n            this._pipeTrigger++;\n            this.markForCheck();\n            if (this.transactions.getAggregatedChanges(false).length === 0) {\n                // Needs better check, calling 'transactions.clear()' will also trigger this\n                if (this.gridAPI.atInexistingPage()) {\n                    this.page--;\n                }\n            }\n        });\n\n        this.onPagingDone.pipe(destructor).subscribe(() => {\n            this.endEdit(true);\n            this.selectionService.clear();\n            this.selectionService.activeElement = null;\n        });\n\n        this.onColumnMoving.pipe(destructor).subscribe(() => this.endEdit(true));\n        this.onColumnResized.pipe(destructor).subscribe(() => this.endEdit(true));\n\n        this.overlayService.onOpened.pipe(takeUntil(this.destroy$)).subscribe((event) => {\n            if (this.overlayService.getOverlayById(event.id).settings.outlet === this.outletDirective &&\n                this.overlayIDs.indexOf(event.id) < 0) {\n                this.overlayIDs.push(event.id);\n            }\n        });\n        this.overlayService.onClosed.pipe(takeUntil(this.destroy$)).subscribe((event) => {\n            const ind = this.overlayIDs.indexOf(event.id);\n            if (ind !== -1) {\n                this.overlayIDs.splice(ind, 1);\n            }\n        });\n    }\n\n    // TODO: Refactor\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._setupServices();\n        this._setupListeners();\n        this.columnListDiffer = this.differs.find([]).create(null);\n        this.calcWidth = this._width && this._width.indexOf('%') === -1 ? parseInt(this._width, 10) : 0;\n        this.shouldGenerate = this.autoGenerate;\n        this._scrollWidth = this.getScrollWidth();\n    }\n\n    protected setupColumns() {\n        if (this.autoGenerate) {\n            this.autogenerateColumns();\n        }\n\n        this.initColumns(this.columnList, (col: IgxColumnComponent) => this.onColumnInit.emit(col));\n\n        this.columnListDiffer.diff(this.columnList);\n        this.markForCheck();\n        this.resetCaches();\n        this._derivePossibleHeight();\n\n        this.columnList.changes\n        .pipe(takeUntil(this.destroy$))\n        .subscribe((change: QueryList<IgxColumnComponent>) => { this.onColumnsChanged(change); });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnsVisibleIndexCache() {\n        this.columnList.forEach(column => column.resetVisibleIndex());\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetForOfCache() {\n        const firstVirtRow = this.dataRowList.first;\n        if (firstVirtRow) {\n            firstVirtRow.virtDirRow.assumeMaster();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnCollections() {\n        this._visibleColumns.length = 0;\n        this._pinnedVisible.length = 0;\n        this._unpinnedVisible.length = 0;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCachedWidths() {\n        this._unpinnedWidth = NaN;\n        this._pinnedWidth = NaN;\n        this._totalWidth = NaN;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this.resetForOfCache();\n        this.resetColumnsVisibleIndexCache();\n        this.resetColumnCollections();\n        this.resetCachedWidths();\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.setupColumns();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.zone.runOutsideAngular(() => {\n            this.document.defaultView.addEventListener('resize', this.resizeHandler);\n            this._keydownListener = this.keydownHandler.bind(this);\n            this.nativeElement.addEventListener('keydown', this._keydownListener);\n        });\n        this.initPinning();\n\n        this.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            requestAnimationFrame(() => {\n                this.summaryService.summaryHeight = 0;\n                this.reflow();\n                this.verticalScrollContainer.recalcUpdateSizes();\n            });\n        });\n        this._ngAfterViewInitPassed = true;\n        this.calculateGridSizes();\n\n        // In some rare cases we get the AfterViewInit before the grid is added to the DOM\n        // and as a result we get 0 width and can't size ourselves properly.\n        // In order to prevent that add a mutation observer that watches if we have been added.\n        if (!this.isAttachedToDom) {\n            const config = { childList: true, subtree: true };\n            const callback = (mutationsList) => {\n                const childListHasChanged = mutationsList.filter((mutation) => {\n                    return mutation.type === 'childList';\n                }).length > 0;\n                if (childListHasChanged && this.isAttachedToDom) {\n                    this.reflow();\n                    this._observer.disconnect();\n                    this._observer = null;\n                }\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.document.body, config);\n        }\n\n        this._dataRowList.changes.pipe(takeUntil(this.destroy$)).subscribe(list =>\n            this._horizontalForOfs = this.combineForOfCollections(list.toArray()\n                .filter(item => item.element.nativeElement.parentElement !== null), this._summaryRowList)\n        );\n        this._summaryRowList.changes.pipe(takeUntil(this.destroy$)).subscribe(summaryList =>\n            this._horizontalForOfs - this.combineForOfCollections(this._dataRowList, summaryList.toArray()\n                .filter(item => item.element.nativeElement.parentElement !== null)));\n\n        this.zone.runOutsideAngular(() => {\n            this._vScrollListener = this.verticalScrollHandler.bind(this);\n            this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', this._vScrollListener);\n        });\n\n        this.zone.runOutsideAngular(() => {\n            this._hScrollListener = this.horizontalScrollHandler.bind(this);\n            this.parentVirtDir.getHorizontalScroll().addEventListener('scroll', this._hScrollListener);\n        });\n        this._horizontalForOfs = this.combineForOfCollections(this._dataRowList, this._summaryRowList);\n        const vertScrDC = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n        vertScrDC.addEventListener('scroll', (evt) => { this.scrollHandler(evt); });\n        vertScrDC.addEventListener('wheel', () => { this.wheelHandler(); });\n\n        this.verticalScrollContainer.onDataChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            requestAnimationFrame(() => {\n                if (!this._destroyed) {\n                    this.reflow();\n                }\n            });\n        });\n    }\n\n    private combineForOfCollections(dataList, summaryList) {\n        return dataList.map(row => row.virtDirRow).concat(summaryList.map(row => row.virtDirRow));\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.document.defaultView.removeEventListener('resize', this.resizeHandler);\n            this.nativeElement.removeEventListener('keydown', this._keydownListener);\n            this.verticalScrollContainer.getVerticalScroll().removeEventListener('scroll', this._vScrollListener);\n            this.parentVirtDir.getHorizontalScroll().removeEventListener('scroll', this._hScrollListener);\n            const vertScrDC = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n            vertScrDC.removeEventListener('scroll', (evt) => { this.scrollHandler(evt); });\n            vertScrDC.removeEventListener('wheel', () => { this.wheelHandler(); });\n        });\n        if (this._observer) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * Toggles the specified column's visibility.\n     * ```typescript\n     * this.grid1.toggleColumnVisibility({\n     *       column: this.grid1.columns[0],\n     *       newValue: true\n     * });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public toggleColumnVisibility(args: IColumnVisibilityChangedEventArgs) {\n        const col = args.column ? this.columnList.find((c) => c === args.column) : undefined;\n\n        if (!col) {\n            return;\n        }\n\n        col.hidden = args.newValue;\n        this.onColumnVisibilityChanged.emit(args);\n\n        this.markForCheck();\n    }\n\n    /**\n     * Returns the native element of the `IgxGridComponent`.\n     * ```typescript\n     * const nativeEl = this.grid.nativeElement.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.outletDirective;\n    }\n\n    /**\n     * Returns the `IgxGridComponent`'s rows height.\n     * ```typescript\n     * const rowHeigh = this.grid.defaultRowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultRowHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 40;\n            case DisplayDensity.compact:\n                return 32;\n            default:\n                return 50;\n        }\n    }\n\n    get defaultSummaryHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 30;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 36;\n        }\n    }\n\n    /**\n     * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.\n     * Used internally for restricting header group component width.\n     * The values below depend on the header cell default right/left padding values.\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultHeaderGroupMinWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 32;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 48;\n        }\n    }\n\n    /**\n     * Returns the maximum width of the container for the pinned `IgxColumnComponent`s.\n     * The width is 80% of the total grid width.\n     * ```typescript\n     * const maxPinnedColWidth = this.grid.calcPinnedContainerMaxWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get calcPinnedContainerMaxWidth(): number {\n        return (this.calcWidth * 80) / 100;\n    }\n\n    /**\n     * Returns the minimum width of the container for the unpinned `IgxColumnComponent`s.\n     * The width is 20% of the total grid width.\n     * ```typescript\n     * const minUnpinnedColWidth = this.grid.unpinnedAreaMinWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedAreaMinWidth(): number {\n        return (this.calcWidth * 20) / 100;\n    }\n\n    /**\n     * Returns the current width of the container for the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedWidth() {\n        if (!isNaN(this._pinnedWidth)) { return this._pinnedWidth; }\n        this._pinnedWidth = this.getPinnedWidth();\n        return this._pinnedWidth;\n    }\n\n    /**\n     * Returns the current width of the container for the unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedWidth = this.grid.getUnpinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedWidth() {\n        if (!isNaN(this._unpinnedWidth)) { return this._unpinnedWidth; }\n        this._unpinnedWidth = this.getUnpinnedWidth();\n        return this._unpinnedWidth;\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Update for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public get featureColumnsWidth() {\n        return this.getFeatureColumnsWidth();\n    }\n\n    /**\n     * @hidden\n     */\n    get summariesMargin() {\n        return this.rowSelectable || this.rowDraggable ? this.featureColumnsWidth : 0;\n    }\n\n    /**\n     * Returns an array of `IgxColumnComponent`s.\n     * ```typescript\n     * const colums = this.grid.columns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get columns(): IgxColumnComponent[] {\n        return this._columns;\n    }\n\n    /**\n     * Returns an array of the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedColumns = this.grid.pinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        if (this._pinnedVisible.length) {\n            return this._pinnedVisible;\n        }\n        this._pinnedVisible = this._pinnedColumns.filter(col => !col.hidden);\n        return this._pinnedVisible;\n    }\n\n    /**\n     * Returns an array of unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedColumns = this.grid.unpinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        if (this._unpinnedVisible.length) {\n            return this._unpinnedVisible;\n        }\n        this._unpinnedVisible = this._unpinnedColumns.filter((col) => !col.hidden);\n        return this._unpinnedVisible;\n    }\n\n    /**\n     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.\n\t * @memberof IgxGridBaseComponent\n     */\n    public getHeaderGroupWidth(column: IgxColumnComponent): string {\n        if (this.hasColumnLayouts) {\n            return '';\n        }\n        const colWidth = column.width;\n        const minWidth = this.defaultHeaderGroupMinWidth;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (!isPercentageWidth && parseInt(column.width, 10) < minWidth) {\n            return minWidth.toString();\n        }\n\n        return column.width;\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by field name.\n     * ```typescript\n     * const myCol = this.grid1.getColumnByName(\"ID\");\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public getColumnByName(name: string): IgxColumnComponent {\n        return this.columnList.find((col) => col.field === name);\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by index.\n     * ```typescript\n     * const myRow = this.grid1.getRowByIndex(1);\n     * ```\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByIndex(index: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.gridAPI.get_row_by_index(index);\n    }\n\n    /**\n     * Returns `IgxGridRowComponent` object by the specified primary key .\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * const myRow = this.grid1.getRowByKey(\"cell5\");\n     * ```\n     * @param keyValue\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByKey(keyValue: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.gridAPI.get_row_by_key(keyValue);\n    }\n\n    /**\n     * Returns an array of visible `IgxColumnComponent`s.\n     * ```typescript\n     * const visibleColumns = this.grid.visibleColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get visibleColumns(): IgxColumnComponent[] {\n        if (this._visibleColumns.length) {\n            return this._visibleColumns;\n        }\n        this._visibleColumns = this.columnList.filter(c => !c.hidden);\n        return this._visibleColumns;\n    }\n\n    /**\n     * Returns the `IgxGridCellComponent` that matches the conditions.\n     * ```typescript\n     * const myCell = this.grid1.getCellByColumn(2,\"UnitPrice\");\n     * ```\n     * @param rowIndex\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByColumn(rowIndex: number, columnField: string): IgxGridCellComponent {\n        const columnId = this.columnList.map((column) => column.field).indexOf(columnField);\n        if (columnId !== -1) {\n            return this.gridAPI.get_cell_by_index(rowIndex, columnId);\n        }\n    }\n\n    /**\n     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.\n     * Requires that the primaryKey property is set.\n     * ```typescript\n     * grid.getCellByKey(1, 'index');\n     * ```\n     * @param rowSelector match any rowID\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByKey(rowSelector: any, columnField: string): IgxGridCellComponent {\n        return this.gridAPI.get_cell_by_key(rowSelector, columnField);\n    }\n\n    /**\n     * Returns the total number of pages.\n     * ```typescript\n     * const totalPages = this.grid.totalPages;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalPages(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countPages;\n        }\n        return -1;\n    }\n\n    /**\n     * Returns the total number of records.\n     * Only functions when paging is enabled.\n     * ```typescript\n     * const totalRecords = this.grid.totalRecords;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalRecords(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countRecords;\n        }\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const firstPage = this.grid.isFirstPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.grid.isLastPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns the total width of the `IgxGridComponent`.\n     * ```typescript\n     * const gridWidth = this.grid.totalWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalWidth(): number {\n        if (!isNaN(this._totalWidth)) { return this._totalWidth; }\n        // Take only top level columns\n        const cols = this.visibleColumns.filter(col => col.level === 0 && !col.pinned);\n        let totalWidth = 0;\n        let i = 0;\n        for (i; i < cols.length; i++) {\n            totalWidth += parseInt(cols[i].calcWidth, 10) || 0;\n        }\n        this._totalWidth = totalWidth;\n        return totalWidth;\n    }\n\n    get showRowCheckboxes(): boolean {\n        return this.rowSelectable && this.columns.length > this.hiddenColumnsCount;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveColumns(from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const list = this.columnList.toArray();\n        const fromIndex = list.indexOf(from);\n        let toIndex = list.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n            if (toIndex < 0) {\n                toIndex = 0;\n            }\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        list.splice(toIndex, 0, ...list.splice(fromIndex, 1));\n        const newList = this._resetColumnList(list);\n        this.columnList.reset(newList);\n        this.columnList.notifyOnChanges();\n        this._columns = this.columnList.toArray();\n    }\n\n    /**\n     * @hidden\n     */\n    protected _resetColumnList(list?) {\n        if (!list) {\n            list = this.columnList.toArray();\n        }\n        let newList = [];\n        list.filter(c => c.level === 0).forEach(p => {\n            newList.push(p);\n            if (p.columnGroup) {\n                newList = newList.concat(p.allChildren);\n            }\n        });\n        return newList;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _reorderPinnedColumns(from: IgxColumnComponent, to: IgxColumnComponent, position: DropPosition) {\n        const pinned = this._pinnedColumns;\n        let dropIndex = pinned.indexOf(to);\n\n        if (to.columnGroup) {\n            dropIndex += to.allChildren.length;\n        }\n\n        if (position === DropPosition.BeforeDropTarget) {\n            dropIndex--;\n        }\n\n        if (position === DropPosition.AfterDropTarget) {\n            dropIndex++;\n        }\n\n        pinned.splice(dropIndex, 0, ...pinned.splice(pinned.indexOf(from), 1));\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveChildColumns(parent: IgxColumnComponent, from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const buffer = parent.children.toArray();\n        const fromIndex = buffer.indexOf(from);\n        let toIndex = buffer.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        buffer.splice(toIndex, 0, ...buffer.splice(fromIndex, 1));\n        parent.children.reset(buffer);\n    }\n    /**\n     * Moves a column to the specified drop target.\n     * ```typescript\n     * grid.moveColumn(compName, persDetails);\n     * ```\n\t  * @memberof IgxGridBaseComponent\n\t  */\n    public moveColumn(column: IgxColumnComponent, dropTarget: IgxColumnComponent, pos: DropPosition = DropPosition.None) {\n\n        let position = pos;\n        const fromIndex = column.visibleIndex;\n        const toIndex = dropTarget.visibleIndex;\n\n        if (pos === DropPosition.BeforeDropTarget && fromIndex < toIndex) {\n            position = DropPosition.BeforeDropTarget;\n        } else if (pos === DropPosition.AfterDropTarget && fromIndex > toIndex) {\n            position = DropPosition.AfterDropTarget;\n        } else {\n            position = DropPosition.None;\n        }\n\n\n        if ((column.level !== dropTarget.level) ||\n            (column.topLevelParent !== dropTarget.topLevelParent)) {\n            return;\n        }\n\n        this.endEdit(true);\n        if (column.level) {\n            this._moveChildColumns(column.parent, column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && column.pinned) {\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && !column.pinned) {\n            column.pin();\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (!dropTarget.pinned && column.pinned) {\n            column.unpin();\n\n            const list = this.columnList.toArray();\n            const fi = list.indexOf(column);\n            const ti = list.indexOf(dropTarget);\n\n            if (pos === DropPosition.BeforeDropTarget && fi < ti) {\n                position = DropPosition.BeforeDropTarget;\n            } else if (pos === DropPosition.AfterDropTarget && fi > ti) {\n                position = DropPosition.AfterDropTarget;\n            } else {\n                position = DropPosition.None;\n            }\n        }\n\n        this._moveColumns(column, dropTarget, position);\n        this.cdr.detectChanges();\n\n        const args = {\n            source: column,\n            target: dropTarget\n        };\n\n        this.onColumnMovingEnd.emit(args);\n    }\n\n    /**\n     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.\n     * ```typescript\n     * this.grid1.nextPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n\n    /**\n     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.\n     * ```typescript\n     * this.grid1.previousPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.grid1.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxGridBaseComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.page = val;\n    }\n\n    /**\n     * Manually marks the `IgxGridComponent` for change detection.\n     * ```typescript\n     * this.grid1.markForCheck();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public markForCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid1.addRow(record);\n     * ```\n     * @param data\n     * @memberof IgxGridBaseComponent\n     */\n    public addRow(data: any): void {\n        this.gridAPI.addRowToData(data);\n\n        this.onRowAdded.emit({ data });\n        this._pipeTrigger++;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * The method accept rowSelector as a parameter, which is the rowID.\n     * ```typescript\n     * this.grid1.deleteRow(0);\n     * ```\n     * @param rowSelector\n     * @memberof IgxGridBaseComponent\n     */\n    public deleteRow(rowSelector: any): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            this.deleteRowById(rowSelector);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        this.gridAPI.deleteRowById(rowId);\n    }\n\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        if (index !== -1) {\n            if (this.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                this.transactions.add(transaction, this.data[index]);\n            } else {\n                this.data.splice(index, 1);\n            }\n        } else {\n            const state: State = this.transactions.getState(rowID);\n            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');\n     * ```\n     * @param value the new value which is to be set.\n     * @param rowSelector corresponds to rowID.\n     * @param column corresponds to column field.\n     * @memberof IgxGridBaseComponent\n     */\n    public updateCell(value: any, rowSelector: any, column: string): void {\n        if (this.isDefined(this.primaryKey)) {\n            const col = this.columnList.toArray().find(c => c.field === column);\n            if (col) {\n                // Simplify\n                const rowData = this.gridAPI.getRowData(rowSelector);\n                const index = this.gridAPI.get_row_index_in_data(rowSelector);\n                // If row passed is invalid\n                if (index < 0) {\n                    return;\n                }\n                const id = {\n                    rowID: rowSelector,\n                    columnID: col.index,\n                    rowIndex: index\n                };\n\n                const cell = new IgxCell(id, index, col, rowData[col.field], rowData[col.field], rowData);\n                const args = this.gridAPI.update_cell(cell, value);\n\n                if (this.crudService.cell && this.crudService.sameCell(cell)) {\n                    if (args.cancel) {\n                        return;\n                    }\n                    this.gridAPI.escape_editMode();\n                }\n\n                this.cdr.markForCheck();\n            }\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent`, which is specified by\n     * rowSelector parameter and the data source record with the passed value.\n     * This method will apply requested update only if primary key is specified in the grid.\n     * ```typescript\n     * grid.updateRow({\n     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')\n     *   }, 1);\n     * ```\n     * @param value\n     * @param rowSelector correspond to rowID\n     * @memberof IgxGridBaseComponent\n     */\n    public updateRow(value: any, rowSelector: any): void {\n        if (this.isDefined(this.primaryKey)) {\n            const editableCell = this.crudService.cell;\n            if (editableCell && editableCell.id.rowID === rowSelector) {\n                this.gridAPI.escape_editMode();\n            }\n            const row = new IgxRow(rowSelector, -1, this.gridAPI.getRowData(rowSelector));\n            this.gridAPI.update_row(row, value);\n            this.cdr.markForCheck();\n        }\n    }\n\n    /**\n     * Sort a single `IgxColumnComponent`.\n     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.\n     * ```typescript\n     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public sort(expression: ISortingExpression | Array<ISortingExpression>): void {\n        this.endEdit(false);\n        if (expression instanceof Array) {\n            this.gridAPI.sort_multiple(expression);\n        } else {\n            this.gridAPI.sort(expression);\n        }\n        this.onSortingDone.emit(expression);\n    }\n\n    /**\n     * Filters a single `IgxColumnComponent`.\n     * ```typescript\n     * public filter(term) {\n     *      this.grid.filter(\"ProductName\", term, IgxStringFilteringOperand.instance().condition(\"contains\"));\n     * }\n     * ```\n     * @param name\n     * @param value\n     * @param conditionOrExpressionTree\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filter(name: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        this.filteringService.filter(name, value, conditionOrExpressionTree, ignoreCase);\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     * ```typescript\n     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));\n     * ```\n     * @param value\n     * @param condition\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filterGlobal(value: any, condition?, ignoreCase?) {\n        this.filteringService.filterGlobal(value, condition, ignoreCase);\n    }\n\n    /**\n     * Enables summaries for the specified column and applies your customSummary.\n     * If you do not provide the customSummary, then the default summary for the column data type will be applied.\n     * ```typescript\n     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);\n     * ```\n     * Enable summaries for the listed columns.\n     * ```typescript\n     * grid.enableSummaries('ProductName');\n     * ```\n     * @param rest\n     * @memberof IgxGridBaseComponent\n     */\n    public enableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._multipleSummaries(rest[0], true);\n        } else {\n            this._summaries(rest[0], true, rest[1]);\n        }\n        this.calculateGridHeight();\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Disable summaries for the specified column.\n     * ```typescript\n     * grid.disableSummaries('ProductName');\n     * ```\n     *\n     * Disable summaries for the listed columns.\n     * ```typescript\n     * grid.disableSummaries([{ fieldName: 'ProductName' }]);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public disableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._disableMultipleSummaries(rest[0]);\n        } else {\n            this._summaries(rest[0], false);\n        }\n    }\n\n    /**\n     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the filtering state of all `IgxColumnComponent`s.\n     * ```typescript\n     * this.grid.clearFilter();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearFilter(name?: string) {\n        this.filteringService.clearFilter(name);\n    }\n\n    /**\n     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the sorting state of all `IgxColumnComponent`.\n     * ```typescript\n     * this.grid.clearSort();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearSort(name?: string) {\n        if (!name) {\n            this.sortingExpressions = [];\n            return;\n        }\n        if (!this.gridAPI.get_column_by_name(name)) {\n            return;\n        }\n        this.gridAPI.clear_sort(name);\n    }\n\n    /**\n     * @hidden\n     */\n    @DeprecateMethod('There is no need to call clearSummaryCache method.The summary cache is cleared automatically when needed.')\n    public clearSummaryCache(args?) {\n    }\n\n    /**\n     * @hidden\n     */\n    public refreshGridState(args?) {\n        this.endEdit(true);\n        this.summaryService.clearSummaryCache(args);\n    }\n\n    // TODO: We have return values here. Move them to event args ??\n\n    /**\n     * Pins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public pinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.pin(index);\n    }\n\n    /**\n     * Unpins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public unpinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.unpin(index);\n    }\n\n\n    /**\n     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.\n     * ```typescript\n     * this.grid.reflow();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public reflow() {\n        this.calculateGridSizes();\n    }\n\n    /**\n     * @hidden\n     */\n    @DeprecateMethod('There is no need to call recalculateSummaries method. The summaries are recalculated automatically when needed.')\n    public recalculateSummaries() {\n    }\n\n    /**\n     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findNext(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, 1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findPrev(\"financial\");\n     * ````\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, -1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Reapplies the existing search.\n     * Returns how many times the grid contains the last search.\n     * ```typescript\n     * this.grid.refreshSearch();\n     * ```\n     * @param updateActiveInfo\n     * @memberof IgxGridBaseComponent\n     */\n    public refreshSearch(updateActiveInfo?: boolean): number {\n        if (this.lastSearchInfo.searchText) {\n            this.rebuildMatchCache();\n\n            if (updateActiveInfo) {\n                const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n                this.lastSearchInfo.matchInfoCache.forEach((match, i) => {\n                    if (match.column === activeInfo.column &&\n                        match.row === activeInfo.row &&\n                        match.index === activeInfo.index) {\n                        this.lastSearchInfo.activeMatchIndex = i;\n                    }\n                });\n            }\n\n            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Removes all the highlights in the cell.\n     * ```typescript\n     * this.grid.clearSearch();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public clearSearch() {\n        this.lastSearchInfo = {\n            searchText: '',\n            caseSensitive: false,\n            exactMatch: false,\n            activeMatchIndex: 0,\n            matchInfoCache: []\n        };\n\n        this.rowList.forEach((row) => {\n            if (row.cells) {\n                row.cells.forEach((c) => {\n                    c.clearHighlight();\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has sortable columns.\n     * ```typescript\n     * const sortableGrid = this.grid.hasSortableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSortableColumns(): boolean {\n        return this.columnList.some((col) => col.sortable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has editable columns.\n     * ```typescript\n     * const editableGrid = this.grid.hasEditableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasEditableColumns(): boolean {\n        return this.columnList.some((col) => col.editable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has fiterable columns.\n     * ```typescript\n     * const filterableGrid = this.grid.hasFilterableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasFilterableColumns(): boolean {\n        return this.columnList.some((col) => col.filterable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has summarized columns.\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSummarizedColumns(): boolean {\n        return this.summaryService.hasSummarizedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get rootSummariesEnabled(): boolean {\n        return this.summaryCalculationMode !== GridSummaryCalculationMode.childLevelsOnly;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has moveable columns.\n     * ```typescript\n     * const movableGrid = this.grid.hasMovableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasMovableColumns(): boolean {\n        return this.columnList && this.columnList.some((col) => col.movable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has column groups.\n     * ```typescript\n     * const groupGrid = this.grid.hasColumnGroups;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasColumnGroups(): boolean {\n        return this._columnGroups;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.\n     * ```typescript\n     * const layoutGrid = this.grid.hasColumnLayouts;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get hasColumnLayouts() {\n        return !!this.columnList.some(col => col.columnLayout);\n    }\n\n    /**\n     * Returns an array of the selected `IgxGridCellComponent`s.\n     * ```typescript\n     * const selectedCells = this.grid.selectedCells;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get selectedCells(): IgxGridCellComponent[] | any[] {\n        if (this.dataRowList) {\n            return this.dataRowList.map((row) => row.cells.filter((cell) => cell.selected))\n                .reduce((a, b) => a.concat(b), []);\n        }\n        return [];\n    }\n\n    /**\n     * @hidden\n     */\n    get multiRowLayoutRowSize() {\n        return this._multiRowLayoutRowSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get rowBasedHeight() {\n        return this.dataLength * this.rowHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isPercentWidth() {\n        return this._width && this._width.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isPercentHeight() {\n        return this._height && this._height.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden\n     * Sets this._height\n     */\n    protected _derivePossibleHeight() {\n        if (!this.isPercentHeight || !this._height || !this.isAttachedToDom || this.rowBasedHeight === 0) {\n            return;\n        }\n        if (!this.nativeElement.parentNode || !this.nativeElement.parentNode.clientHeight) {\n            const viewPortHeight = document.documentElement.clientHeight;\n            this._height = this.rowBasedHeight <= viewPortHeight ? null : viewPortHeight.toString();\n        } else {\n            const parentHeight = this.nativeElement.parentNode.getBoundingClientRect().height;\n            this._height = this.rowBasedHeight <= parentHeight ? null : this._height;\n        }\n    }\n\n    /**\n     * @hidden\n     * Sets columns defaultWidth property\n     */\n    protected _derivePossibleWidth() {\n        if (!this.columnWidthSetByUser) {\n            this._columnWidth = this.getPossibleColumnWidth();\n            this.columnList.forEach((column: IgxColumnComponent) => {\n                if (this.hasColumnLayouts && parseInt(this._columnWidth, 10)) {\n                    const columnWidthCombined = parseInt(this._columnWidth, 10) * (column.colEnd ? column.colEnd - column.colStart : 1);\n                    column.defaultWidth = columnWidthCombined + 'px';\n                } else {\n                    column.defaultWidth = this._columnWidth;\n                }\n            });\n            this.resetCachedWidths();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.totalItemCount || this.dataLength;\n        return this.rowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden\n     * Sets TBODY height i.e. this.calcHeight\n     */\n    protected calculateGridHeight() {\n        this._derivePossibleHeight();\n        // TODO: Calculate based on grid density\n        if (this.maxLevelHeaderDepth) {\n            this.theadRow.nativeElement.style.height = `${(this.maxLevelHeaderDepth + 1) * this.defaultRowHeight +\n                (this.allowFiltering && this.filterMode === FilterMode.quickFilter ? FILTER_ROW_HEIGHT : 0) + 1}px`;\n        }\n        this.summariesHeight = 0;\n        if (!this._height) {\n            this.calcHeight = null;\n            if (this.hasSummarizedColumns && this.rootSummariesEnabled) {\n                this.summariesHeight = this.summaryService.calcMaxSummaryHeight();\n            }\n            return;\n        }\n\n        if (this.hasSummarizedColumns && this.rootSummariesEnabled) {\n            this.summariesHeight = this.summaryService.calcMaxSummaryHeight();\n        }\n\n        this.calcHeight = this._calculateGridBodyHeight();\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getToolbarHeight(): number {\n        let toolbarHeight = 0;\n        if (this.showToolbar && this.toolbarHtml != null) {\n            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?\n                this.toolbarHtml.nativeElement.offsetHeight : 0;\n        }\n        return toolbarHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getPagingHeight(): number {\n        let pagingHeight = 0;\n        if (this.paging && this.paginator) {\n            pagingHeight = this.paginator.nativeElement.firstElementChild ?\n                this.paginator.nativeElement.offsetHeight : 0;\n        }\n        return pagingHeight;\n    }\n    /**\n     * @hidden\n     */\n    protected _calculateGridBodyHeight() {\n        const footerBordersAndScrollbars = this.tfoot.nativeElement.offsetHeight -\n            this.tfoot.nativeElement.clientHeight;\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement);\n        const toolbarHeight = this.getToolbarHeight();\n        const pagingHeight = this.getPagingHeight();\n        const groupAreaHeight = this.getGroupAreaHeight();\n        let gridHeight;\n\n        if (this.isPercentHeight) {\n            /*height in %*/\n            if (computed.getPropertyValue('height').indexOf('%') === -1 ) {\n                gridHeight = parseInt(computed.getPropertyValue('height'), 10);\n            } else {\n                return this.defaultTargetBodyHeight;\n            }\n        } else {\n            gridHeight = parseInt(this._height, 10);\n        }\n        const height = Math.abs(gridHeight - toolbarHeight -\n                this.theadRow.nativeElement.offsetHeight -\n                this.summariesHeight - pagingHeight -\n                groupAreaHeight - footerBordersAndScrollbars -\n                this.scr.nativeElement.clientHeight);\n\n        if (height === 0 || isNaN(gridHeight)) {\n            const bodyHeight = this.defaultTargetBodyHeight;\n            return bodyHeight > 0 ? bodyHeight : null;\n        }\n\n        return height;\n    }\n\n    public get outerWidth() {\n        return this.hasVerticalSroll() ? this.calcWidth + this.scrollWidth : this.calcWidth;\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     */\n    public getVisibleContentHeight() {\n        let height = this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;\n        if (this.hasSummarizedColumns) {\n            height += this.tfoot.nativeElement.clientHeight;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n     */\n    public getPossibleColumnWidth(baseWidth: number = null) {\n        let computedWidth;\n        if (baseWidth !== null) {\n            computedWidth = baseWidth;\n        } else {\n            computedWidth = this.calcWidth ||\n                parseInt(this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n        }\n\n        if (this.showRowCheckboxes) {\n            computedWidth -= this.headerCheckboxContainer ? this.headerCheckboxContainer.nativeElement.offsetWidth : 0;\n        }\n\n        const visibleChildColumns = this.visibleColumns.filter(c => !c.columnGroup);\n\n\n        // Column layouts related\n        let visibleCols = [];\n        const columnBlocks = this.visibleColumns.filter(c => c.columnGroup);\n        const colsPerBlock = columnBlocks.map(block => block.getInitialChildColumnSizes(block.children));\n        const combinedBlocksSize = colsPerBlock.reduce((acc, item) => acc + item.length, 0);\n        colsPerBlock.forEach(blockCols => visibleCols = visibleCols.concat(blockCols));\n        //\n\n        const columnsWithSetWidths = this.hasColumnLayouts ?\n            visibleCols.filter(c => c.widthSetByUser) :\n            visibleChildColumns.filter(c => c.widthSetByUser);\n\n        const columnsToSize = this.hasColumnLayouts ?\n            combinedBlocksSize - columnsWithSetWidths.length :\n            visibleChildColumns.length - columnsWithSetWidths.length;\n\n        const sumExistingWidths = columnsWithSetWidths\n            .reduce((prev, curr) => {\n                const colWidth = curr.width;\n                const widthValue = parseInt(colWidth, 10);\n                const currWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1 ?\n                    widthValue / 100 * computedWidth :\n                    widthValue;\n                return prev + currWidth;\n            }, 0);\n\n        const columnWidth = Math.floor(!Number.isFinite(sumExistingWidths) ?\n            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :\n            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH));\n\n        return columnWidth.toString();\n    }\n\n    /**\n     * @hidden\n     * Sets grid width i.e. this.calcWidth\n     */\n    protected calculateGridWidth() {\n        let width;\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement);\n        const el = this.document.getElementById(this.nativeElement.id);\n\n        if (this.isPercentWidth) {\n            /* width in %*/\n            width = computed.getPropertyValue('width').indexOf('%') === -1 ?\n                parseInt(computed.getPropertyValue('width'), 10) : null;\n        } else {\n            width = parseInt(this._width, 10);\n        }\n\n        if (!width && el) {\n            width = el.offsetWidth;\n        }\n\n\n        if (!width) {\n            width = this.columnList.reduce((sum, item) =>  sum + parseInt((item.width || item.defaultWidth), 10), 0);\n        }\n\n        if (this.hasVerticalSroll()) {\n            width -= this.scrollWidth;\n        }\n        if (Number.isFinite(width) && width !== this.calcWidth) {\n            this.calcWidth = width;\n            this.cdr.detectChanges();\n        }\n        this._derivePossibleWidth();\n    }\n\n    public hasVerticalSroll() {\n        if (!this._ngAfterViewInitPassed) { return false; }\n        const isScrollable = this.verticalScrollContainer.isScrollable();\n        return !!(this.calcWidth && this.verticalScrollContainer.igxForOf &&\n        this.verticalScrollContainer.igxForOf.length > 0 &&\n        isScrollable);\n    }\n\n    /**\n     * @hidden\n     */\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        const diff = this.columnListDiffer.diff(change);\n        if (diff) {\n            let added = false;\n            let removed = false;\n\n            this.initColumns(this.columnList);\n\n\n            diff.forEachAddedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                this.onColumnInit.emit(record.item);\n                added = true;\n            });\n\n            diff.forEachRemovedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                // Clear Filtering\n                this.gridAPI.clear_filter(record.item.field);\n\n                // Clear Sorting\n                this.gridAPI.clear_sort(record.item.field);\n                removed = true;\n            });\n\n            this.resetCaches();\n\n            if (added || removed) {\n                this.summaryService.clearSummaryCache();\n                this.calculateGridSizes();\n            }\n        }\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridSizes() {\n        /*\n            TODO: (R.K.) This layered lasagne should be refactored\n            ASAP. The reason I have to reset the caches so many times is because\n            after teach `detectChanges` call they are filled with invalid\n            state. Of course all of this happens midway through the grid\n            sizing process which of course, uses values from the caches, thus resulting\n            in a broken layout.\n        */\n        this.resetCaches();\n        const hasScroll = this.hasVerticalSroll();\n        this.calculateGridWidth();\n        this.cdr.detectChanges();\n        this.resetCaches();\n        this.calculateGridHeight();\n\n        if (this.rowEditable) {\n            this.repositionRowEditingOverlay(this.rowInEditMode);\n        }\n\n        this.cdr.detectChanges();\n        this.resetCaches();\n        // in case scrollbar has appeared recalc to size correctly.\n        if (hasScroll !== this.hasVerticalSroll()) {\n            this.calculateGridWidth();\n            this.cdr.detectChanges();\n            this.resetCaches();\n        }\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * Method used to override the calculations.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = 0;\n\n        if (this.headerCheckboxContainer) {\n            width += this.headerCheckboxContainer.nativeElement.getBoundingClientRect().width;\n        }\n        if (this.headerDragContainer) {\n            width += this.headerDragContainer.nativeElement.getBoundingClientRect().width;\n        }\n        return width;\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    public getPinnedWidth(takeHidden = false) {\n        const fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;\n        let sum = 0;\n        for (const col of fc) {\n            if (col.level === 0) {\n                sum += parseInt(col.width, 10);\n            }\n        }\n        sum += this.featureColumnsWidth;\n\n        return sum;\n    }\n\n    /**\n     * @hidden\n     * Gets calculated width of the unpinned area\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    protected getUnpinnedWidth(takeHidden = false) {\n        let width = this.isPercentWidth ?\n            this.calcWidth :\n            parseInt(this._width, 10);\n        if (this.hasVerticalSroll() && !this.isPercentWidth) {\n            width -= this.scrollWidth;\n        }\n        return width - this.getPinnedWidth(takeHidden);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _summaries(fieldName: string, hasSummary: boolean, summaryOperand?: any) {\n        const column = this.gridAPI.get_column_by_name(fieldName);\n        if (column) {\n            column.hasSummary = hasSummary;\n            if (summaryOperand) {\n                if (this.rootSummariesEnabled) { this.summaryService.retriggerRootPipe++; }\n                column.summaries = summaryOperand;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _multipleSummaries(expressions: ISummaryExpression[], hasSummary: boolean) {\n        expressions.forEach((element) => {\n            this._summaries(element.fieldName, hasSummary, element.customSummary);\n        });\n    }\n    /**\n     * @hidden\n     */\n    protected _disableMultipleSummaries(expressions) {\n        expressions.forEach((column) => {\n            const columnName = column && column.fieldName ? column.fieldName : column;\n            this._summaries(columnName, false);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveDataTypes(rec) {\n        if (typeof rec === 'number') {\n            return DataType.Number;\n        } else if (typeof rec === 'boolean') {\n            return DataType.Boolean;\n        } else if (typeof rec === 'object' && rec instanceof Date) {\n            return DataType.Date;\n        }\n        return DataType.String;\n    }\n\n    private getScrollWidth() {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.width = '100px';\n        style.height = '100px';\n        style.position = 'absolute';\n        style.top = '-10000px';\n        style.top = '-10000px';\n        style.overflow = 'scroll';\n        document.body.appendChild(div);\n        const scrollWidth = div.offsetWidth - div.clientWidth;\n        document.body.removeChild(div);\n        return scrollWidth;\n    }\n\n    /**\n     * @hidden\n     */\n    protected autogenerateColumns() {\n        const data = this.gridAPI.get_data();\n        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const fields = this.generateDataFields(data);\n        const columns = [];\n\n        fields.forEach((field) => {\n            const ref = this.viewRef.createComponent(factory, null, this.viewRef.injector);\n            ref.instance.field = field;\n            ref.instance.dataType = this.resolveDataTypes(data[0][field]);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n\n        this.columnList.reset(columns);\n        if (data && data.length > 0) {\n            this.shouldGenerate = false;\n        }\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return Object.keys(data && data.length !== 0 ? data[0] : []);\n    }\n\n    /**\n     * @hidden\n     */\n    onlyTopLevel(arr) {\n        return arr.filter(c => c.level === 0);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        // XXX: Deprecate index\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n        if (this.hasColumnLayouts) {\n            // Set overall row layout size\n            this.columnList.forEach((col) => {\n                if (col.columnLayout) {\n                    const layoutSize = col.children ?\n                     col.children.reduce((acc, val) => Math.max(val.rowStart + val.gridRowSpan - 1, acc), 1) :\n                     1;\n                     this._multiRowLayoutRowSize = Math.max(layoutSize, this._multiRowLayoutRowSize);\n                }\n            });\n        }\n        if (this.hasColumnLayouts && this.hasColumnGroups) {\n            // invalid configuration - multi-row and column groups\n            // remove column groups\n            const columnLayoutColumns = this.columnList.filter((col) => col.columnLayout || (col.parent && col.parent.columnLayout));\n            this.columnList.reset(columnLayoutColumns);\n        }\n        this._columns = this.columnList.toArray();\n        collection.forEach((column: IgxColumnComponent) => {\n            column.grid = this;\n            column.defaultWidth = this.columnWidth;\n            this.setColumnEditState(column);\n\n            if (cb) {\n                cb(column);\n            }\n        });\n\n        this.reinitPinStates();\n    }\n\n    private setColumnEditState(column: IgxColumnComponent) {\n        // When rowEditable is true, then all columns, with defined field, excluding priamaryKey, are set to editable by default.\n        if (this.rowEditable && column.editable === null &&\n            column.field && column.field !== this.primaryKey) {\n            column.editable = this.rowEditable;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected reinitPinStates() {\n        if (this.hasColumnGroups) {\n            this._pinnedColumns = this.columnList.filter((c) => c.pinned);\n        }\n        this._unpinnedColumns = this.columnList.filter((c) => !c.pinned);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public onHeaderCheckboxClick(event, filteredData) {\n        this.allRowsSelected = event.checked;\n        const newSelection =\n            event.checked ?\n                filteredData ?\n                    this.selection.add_items(this.id, this.selection.get_all_ids(filteredData, this.primaryKey)) :\n                    this.selection.get_all_ids(this.gridAPI.get_all_data(true), this.primaryKey) :\n                filteredData ?\n                    this.selection.delete_items(this.id, this.selection.get_all_ids(filteredData, this.primaryKey)) :\n                    this.selection.get_empty();\n        this.triggerRowSelectionChange(newSelection, null, event, event.checked);\n        this.checkHeaderCheckboxStatus(event.checked);\n    }\n\n    /**\n     * @hidden\n     */\n    get headerCheckboxAriaLabel() {\n        return this._filteringExpressionsTree.filteringOperands.length > 0 ?\n            this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all filtered' : 'Select all filtered' :\n            this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all' : 'Select all';\n    }\n\n    /**\n     * @hidden\n     */\n    public checkHeaderCheckboxStatus(headerStatus?: boolean) {\n        if (headerStatus === undefined) {\n            const filteredData = this.filteringService.filteredData;\n            const dataLength = filteredData ? filteredData.length : this.dataLength;\n            this.allRowsSelected = this.selection.are_all_selected(this.id, dataLength);\n            if (this.headerCheckbox) {\n                this.headerCheckbox.indeterminate = !this.allRowsSelected && !this.selection.are_none_selected(this.id);\n                if (!this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.checked =\n                        this.allRowsSelected;\n                }\n            }\n            this.cdr.markForCheck();\n        } else if (this.headerCheckbox) {\n            this.headerCheckbox.checked = headerStatus !== undefined ? headerStatus : false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public filteredItemsStatus(componentID: string, filteredData: any[], primaryKey?) {\n        const currSelection = this.selection.get(componentID);\n        let atLeastOneSelected = false;\n        let notAllSelected = false;\n        if (currSelection) {\n            for (const key of Object.keys(filteredData)) {\n                const dataItem = primaryKey ? filteredData[key][primaryKey] : filteredData[key];\n                if (currSelection.has(dataItem)) {\n                    atLeastOneSelected = true;\n                    if (notAllSelected) {\n                        return 'indeterminate';\n                    }\n                } else {\n                    notAllSelected = true;\n                    if (atLeastOneSelected) {\n                        return 'indeterminate';\n                    }\n                }\n            }\n        }\n        return atLeastOneSelected ? 'allSelected' : 'noneSelected';\n    }\n\n    /**\n     * @hidden\n     */\n    public updateHeaderCheckboxStatusOnFilter(data) {\n        if (!data) {\n            this.checkHeaderCheckboxStatus();\n            return;\n        }\n        switch (this.filteredItemsStatus(this.id, data, this.primaryKey)) {\n            case 'allSelected': {\n                if (!this.allRowsSelected) {\n                    this.allRowsSelected = true;\n                }\n                if (this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = false;\n                }\n                break;\n            }\n            case 'noneSelected': {\n                if (this.allRowsSelected) {\n                    this.allRowsSelected = false;\n                }\n                if (this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = false;\n                }\n                break;\n            }\n            default: {\n                if (!this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = true;\n                }\n                if (this.allRowsSelected) {\n                    this.allRowsSelected = false;\n                }\n                break;\n            }\n        }\n    }\n\n    /**\n     * Get current selection state.\n     * Returns an array with selected rows' IDs (primaryKey or rowData)\n     * ```typescript\n     * const selectedRows = this.grid.selectedRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectedRows(): any[] {\n        let selection: Set<any>;\n        selection = this.selection.get(this.id);\n        return selection ? Array.from(selection) : [];\n    }\n\n    /**\n     * Select specified rows by ID.\n     * ```typescript\n     * this.grid.selectRows([1,2,5], true);\n     * ```\n     * @param rowIDs\n     * @param clearCurrentSelection if true clears the current selection\n     * @memberof IgxGridBaseComponent\n     */\n    public selectRows(rowIDs: any[], clearCurrentSelection?: boolean) {\n        let newSelection: Set<any>;\n        let selectableRows = [];\n        if (this.transactions.enabled) {\n            selectableRows = rowIDs.filter(e => !this.gridAPI.row_deleted_transaction(e));\n        } else {\n            selectableRows = rowIDs;\n        }\n        newSelection = this.selection.add_items(this.id, selectableRows, clearCurrentSelection);\n        this.triggerRowSelectionChange(newSelection);\n    }\n\n    /**\n     * Deselect specified rows by ID.\n     * ```typescript\n     * this.grid.deselectRows([1,2,5]);\n     * ```\n     * @param rowIDs\n     * @memberof IgxGridBaseComponent\n     */\n    public deselectRows(rowIDs: any[]) {\n        let newSelection: Set<any>;\n        newSelection = this.selection.delete_items(this.id, rowIDs);\n        this.triggerRowSelectionChange(newSelection);\n    }\n\n    /**\n     * Selects all rows\n     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * ```typescript\n     * this.grid.selectAllRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectAllRows() {\n        this.triggerRowSelectionChange(this.selection.get_all_ids(this.gridAPI.get_all_data(true), this.primaryKey));\n    }\n\n    /**\n     * Deselects all rows\n     * ```typescript\n     * this.grid.deselectAllRows();\n     * ```\n     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     */\n    public deselectAllRows() {\n        this.triggerRowSelectionChange(this.selection.get_empty());\n    }\n\n    clearCellSelection(): void {\n        this.selectionService.clear();\n        this.selectionService.activeElement = null;\n        this.cdr.markForCheck();\n    }\n\n    dragScroll(dir: DragScrollDirection): void {\n        const scrollDelta = 48;\n        const horizontal = this.parentVirtDir.getHorizontalScroll();\n        const vertical = this.verticalScrollContainer.getVerticalScroll();\n        switch (dir) {\n            case DragScrollDirection.LEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                break;\n            case DragScrollDirection.RIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                break;\n            case DragScrollDirection.TOP:\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOM:\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.TOPLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.TOPRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            default:\n                return;\n        }\n        this.wheelHandler();\n    }\n\n    isDefined(arg: any): boolean {\n        return arg !== undefined && arg !== null;\n    }\n\n    selectRange(arg: GridSelectionRange | GridSelectionRange[] | null | undefined): void {\n        if (!this.isDefined(arg)) {\n            this.clearCellSelection();\n            return;\n        }\n        if (arg instanceof Array) {\n            arg.forEach(range => this.setSelection(range));\n        } else {\n            this.setSelection(arg);\n        }\n        this.cdr.markForCheck();\n    }\n\n    columnToVisibleIndex(field: string | number): number {\n        const visibleColumns = this.visibleColumns;\n        if (typeof field === 'number') {\n            return field;\n        }\n        return visibleColumns.find(column => column.field === field).visibleIndex;\n    }\n\n\n    setSelection(range: GridSelectionRange): void {\n        const startNode =  { row: range.rowStart, column: this.columnToVisibleIndex(range.columnStart) };\n        const endNode =  { row: range.rowEnd, column: this.columnToVisibleIndex(range.columnEnd) };\n\n        this.selectionService.pointerState.node = startNode;\n        this.selectionService.selectRange(endNode, this.selectionService.pointerState);\n        this.selectionService.addRangeMeta(endNode, this.selectionService.pointerState);\n        this.selectionService.initPointerState();\n    }\n\n    getSelectedRanges(): GridSelectionRange[] {\n        return this.selectionService.ranges;\n    }\n\n    extractDataFromSelection(source: any[]): any[] {\n        let column: IgxColumnComponent;\n        let record = {};\n        const selectedData = [];\n\n        const selectionMap = Array.from(this.selectionService.selection)\n            .filter((tuple) => tuple[0] < source.length);\n\n        const visibleColumns = this.visibleColumns\n            .filter(col => !col.columnGroup)\n            .sort((a, b) => a.visibleIndex - b.visibleIndex);\n\n\n        for (const [row, set] of selectionMap) {\n            if (!source[row]) {\n                continue;\n            }\n            const temp = Array.from(set);\n            for (const each of temp) {\n                column = visibleColumns[each];\n                if (column) {\n                    record[column.field] = source[row][column.field];\n                }\n            }\n            if (Object.keys(record).length) {\n                selectedData.push(record);\n            }\n            record = {};\n        }\n        return selectedData;\n    }\n\n    getSelectedData() {\n        const source = this.verticalScrollContainer.igxForOf;\n\n        return this.extractDataFromSelection(source);\n    }\n\n    /**\n     * @hidden\n     */\n    public triggerRowSelectionChange(newSelectionAsSet: Set<any>, row?: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>,\n        event?: Event, headerStatus?: boolean) {\n        const oldSelectionAsSet = this.selection.get(this.id);\n        const oldSelection = oldSelectionAsSet ? Array.from(oldSelectionAsSet) : [];\n        const newSelection = newSelectionAsSet ? Array.from(newSelectionAsSet) : [];\n        const args: IRowSelectionEventArgs = { oldSelection, newSelection, row, event };\n        this.onRowSelectionChange.emit(args);\n        newSelectionAsSet = this.selection.get_empty();\n        for (let i = 0; i < args.newSelection.length; i++) {\n            newSelectionAsSet.add(args.newSelection[i]);\n        }\n        this.selection.set(this.id, newSelectionAsSet);\n        this.checkHeaderCheckboxStatus(headerStatus);\n    }\n\n    /**\n     * @hidden\n     */\n    // @HostListener('scroll', ['$event'])\n    public scrollHandler(event) {\n        this.parentVirtDir.getHorizontalScroll().scrollLeft += event.target.scrollLeft;\n        this.verticalScrollContainer.getVerticalScroll().scrollTop += event.target.scrollTop;\n        event.target.scrollLeft = 0;\n        event.target.scrollTop = 0;\n    }\n\n    /**\n     * This method allows you to navigate to a position\n     * in the grid based on provided `rowindex` and `visibleColumnIndex`,\n     * also to execute a custom logic over the target element,\n     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }\n     * ```typescript\n     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public navigateTo(rowIndex: number, visibleColIndex = -1, cb: Function = null) {\n        if (rowIndex < 0 || rowIndex > this.verticalScrollContainer.igxForOf.length - 1\n            ||  (visibleColIndex !== -1 && this.columnList.map(col => col.visibleIndex).indexOf(visibleColIndex) === -1)) {\n            return;\n        }\n        this.wheelHandler();\n        if (this.verticalScrollContainer.igxForOf.slice(rowIndex, rowIndex + 1).find(rec => rec.expression || rec.childGridsData)) {\n            visibleColIndex = -1;\n        }\n        if (visibleColIndex === -1 || (this.navigation.isColumnFullyVisible(visibleColIndex)\n            && this.navigation.isColumnLeftFullyVisible(visibleColIndex))) {\n            if (this.navigation.shouldPerformVerticalScroll(rowIndex)) {\n                this.verticalScrollContainer.scrollTo(rowIndex);\n                this.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    this.executeCallback(rowIndex, visibleColIndex, cb);\n                });\n            } else {\n                this.executeCallback(rowIndex, visibleColIndex, cb);\n            }\n        } else {\n            const unpinnedIndex = this.navigation.getColumnUnpinnedIndex(visibleColIndex);\n            this.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                if (this.navigation.shouldPerformVerticalScroll(rowIndex)) {\n                    this.verticalScrollContainer.scrollTo(rowIndex);\n                    this.verticalScrollContainer.onChunkLoad\n                    .pipe(first()).subscribe(() => {\n                        this.executeCallback(rowIndex, visibleColIndex, cb);\n                    });\n                } else {\n                    this.executeCallback(rowIndex, visibleColIndex, cb);\n                }\n\n            });\n            this.navigation.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);\n        }\n    }\n\n     /**\n     * Returns `ICellPosition` which defines the next cell,\n     * according to the current position, that match specific criteria.\n     * You can pass callback function as a third parameter of `getPreviousCell` method.\n     * The callback function accepts IgxColumnComponent as a param\n     * ```typescript\n     *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public getNextCell(currRowIndex: number, curVisibleColIndex: number,\n            callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return {rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex};\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => a - b) :\n                                columns.map(editCol => editCol.visibleIndex).sort((a, b) => a - b);\n        const nextCellIndex = colIndexes.find(index => index > curVisibleColIndex);\n        if (this.verticalScrollContainer.igxForOf.slice(currRowIndex, currRowIndex + 1)\n                .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && nextCellIndex !== undefined) {\n            return {rowIndex: currRowIndex, visibleColumnIndex: nextCellIndex};\n        } else {\n            if (colIndexes.length === 0 || this.getNextDataRowIndex(currRowIndex) === currRowIndex) {\n                return {rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex};\n            } else {\n                return {rowIndex: this.getNextDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0]};\n            }\n        }\n    }\n\n     /**\n     * Returns `ICellPosition` which defines the previous cell,\n     * according to the current position, that match specific criteria.\n     * You can pass callback function as a third parameter of `getPreviousCell` method.\n     * The callback function accepts IgxColumnComponent as a param\n     * ```typescript\n     *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public getPreviousCell(currRowIndex: number, curVisibleColIndex: number,\n            callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns =  this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return {rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex};\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => b - a) :\n                                columns.map(editCol => editCol.visibleIndex).sort((a, b) => b - a);\n        const prevCellIndex = colIndexes.find(index => index < curVisibleColIndex);\n        if (this.verticalScrollContainer.igxForOf.slice(currRowIndex, currRowIndex + 1)\n                .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && prevCellIndex !== undefined) {\n            return {rowIndex: currRowIndex, visibleColumnIndex: prevCellIndex};\n        } else {\n            if (colIndexes.length === 0 || this.getPrevDataRowIndex(currRowIndex) === currRowIndex) {\n                return {rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex};\n            } else {\n                return {rowIndex: this.getPrevDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0]};\n            }\n        }\n    }\n\n    private executeCallback(rowIndex, visibleColIndex = -1, cb: Function = null) {\n        if (!cb) { return; }\n        let targetType, target;\n        const row =  this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).find(r => r.index === rowIndex);\n        if (!row) { return; }\n        switch (row.nativeElement.tagName.toLowerCase()) {\n            case 'igx-grid-groupby-row':\n                targetType = GridKeydownTargetType.groupRow;\n                target = row;\n                break;\n            case 'igx-grid-summary-row':\n                targetType = GridKeydownTargetType.summaryCell;\n                target = visibleColIndex !== -1 ?\n                    row.summaryCells.find(c => c.visibleColumnIndex === visibleColIndex) : row.summaryCells.first;\n                break;\n            case 'igx-child-grid-row':\n                targetType = GridKeydownTargetType.hierarchicalRow;\n                target = row;\n                break;\n            default:\n                targetType = GridKeydownTargetType.dataCell;\n                target = visibleColIndex !== -1 ? row.cells.find(c => c.visibleColumnIndex === visibleColIndex) : row.cells.first;\n                break;\n        }\n        const args = { targetType: targetType, target: target };\n        cb(args);\n    }\n\n    private getPrevDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex <= 0) { return currentRowIndex; }\n\n        const prevRow = this.verticalScrollContainer.igxForOf.slice(0, currentRowIndex).reverse()\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return prevRow ? this.verticalScrollContainer.igxForOf.indexOf(prevRow) : currentRowIndex;\n    }\n\n    private getNextDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex === this.verticalScrollContainer.igxForOf.length) {return currentRowIndex; }\n\n        const nextRow = this.verticalScrollContainer.igxForOf.slice(currentRowIndex + 1, this.verticalScrollContainer.igxForOf.length)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return nextRow ? this.verticalScrollContainer.igxForOf.indexOf(nextRow) : currentRowIndex;\n    }\n\n    private isValidPosition(rowIndex, colIndex): boolean {\n        const rows = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).length;\n        const cols = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0).length;\n        if (rows < 1 || cols < 1) { return false; }\n        if (rowIndex > -1 && rowIndex < this.verticalScrollContainer.igxForOf.length &&\n            colIndex > - 1 && colIndex <= this.unpinnedColumns[this.unpinnedColumns.length - 1].visibleIndex) {\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public wheelHandler(isScroll = false) {\n        if (document.activeElement &&\n        // tslint:disable-next-line:no-bitwise\n            (document.activeElement.compareDocumentPosition(this.tbody.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS ||\n        // tslint:disable-next-line:no-bitwise\n            (document.activeElement.compareDocumentPosition(this.tfoot.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS && isScroll))) {\n            (document.activeElement as HTMLElement).blur();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public trackColumnChanges(index, col) {\n        return col.field + col.calcWidth;\n    }\n\n    private find(text: string, increment: number, caseSensitive?: boolean, exactMatch?: boolean, scroll?: boolean) {\n        if (!this.rowList) {\n            return 0;\n        }\n\n        this.endEdit(false);\n\n        if (!text) {\n            this.clearSearch();\n            return 0;\n        }\n\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n        let rebuildCache = false;\n\n        if (this.lastSearchInfo.searchText !== text ||\n            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||\n            this.lastSearchInfo.exactMatch !== exactMatchResolved) {\n            this.lastSearchInfo = {\n                searchText: text,\n                activeMatchIndex: 0,\n                caseSensitive: caseSensitiveResolved,\n                exactMatch: exactMatchResolved,\n                matchInfoCache: []\n            };\n\n            rebuildCache = true;\n        } else {\n            this.lastSearchInfo.activeMatchIndex += increment;\n        }\n\n        if (rebuildCache) {\n            this.rowList.forEach((row) => {\n                if (row.cells) {\n                    row.cells.forEach((c) => {\n                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);\n                    });\n                }\n            });\n\n            this.rebuildMatchCache();\n        }\n\n        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {\n            this.lastSearchInfo.activeMatchIndex = 0;\n        } else if (this.lastSearchInfo.activeMatchIndex < 0) {\n            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;\n        }\n\n        if (this.lastSearchInfo.matchInfoCache.length) {\n            const matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];\n            this.lastSearchInfo = {...this.lastSearchInfo};\n\n            if (scroll !== false) {\n                this.scrollTo(matchInfo.row, matchInfo.column);\n            }\n\n            IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                column: matchInfo.column,\n                row: matchInfo.row,\n                index: matchInfo.index,\n            });\n\n        } else {\n            IgxTextHighlightDirective.clearActiveHighlight(this.id);\n        }\n\n        return this.lastSearchInfo.matchInfoCache.length;\n    }\n\n    /**\n     * Returns an array containing the filtered sorted data.\n     * ```typescript\n     * const filteredSortedData = this.grid1.filteredSortedData;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get filteredSortedData(): any[] {\n        return this._filteredSortedData;\n    }\n    set filteredSortedData(value: any[]) {\n        this._filteredSortedData = value;\n        this.refreshSearch(true);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initPinning() {\n        let currentPinnedWidth = 0;\n        const pinnedColumns = [];\n        const unpinnedColumns = [];\n        const newUnpinnedCols = [];\n\n        this.calculateGridWidth();\n        this.resetCaches();\n        // When a column is a group or is inside a group, pin all related.\n        this._pinnedColumns.forEach(col => {\n            if (col.parent) {\n                col.parent.pinned = true;\n            }\n            if (col.columnGroup) {\n                col.children.forEach(child => child.pinned = true);\n            }\n        });\n\n        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.\n        // We take into account top level columns (top level groups and non groups).\n        // If top level is unpinned the pinning handles all children to be unpinned as well.\n        for (let i = 0; i < this._columns.length; i++) {\n            if (this._columns[i].pinned && !this._columns[i].parent) {\n                // Pinned column. Check if with it the unpinned min width is exceeded.\n                const colWidth = parseInt(this._columns[i].width, 10);\n                if (currentPinnedWidth + colWidth > this.calcWidth - this.unpinnedAreaMinWidth) {\n                    // unpinned min width is exceeded. Unpin the columns and add it to the unpinned collection.\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                    newUnpinnedCols.push(this._columns[i]);\n                } else {\n                    // unpinned min width is not exceeded. Keep it pinned and add it to the pinned collection.\n                    currentPinnedWidth += colWidth;\n                    pinnedColumns.push(this._columns[i]);\n                }\n            } else if (this._columns[i].pinned && this._columns[i].parent) {\n                if (this._columns[i].topLevelParent.pinned) {\n                    pinnedColumns.push(this._columns[i]);\n                } else {\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                }\n            } else {\n                unpinnedColumns.push(this._columns[i]);\n            }\n        }\n\n        if (newUnpinnedCols.length) {\n            console.warn(\n                'igxGrid - The pinned area exceeds maximum pinned width. ' +\n                'The following columns were unpinned to prevent further issues:' +\n                newUnpinnedCols.map(col => '\"' + col.header + '\"').toString() + '. For more info see our documentation.'\n            );\n        }\n\n        // Assign the applicaple collections.\n        this._pinnedColumns = pinnedColumns;\n        this._unpinnedColumns = unpinnedColumns;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        let delayScrolling = false;\n\n        if (this.paging && typeof(row) !== 'number') {\n            const rowIndex = this.filteredSortedData.indexOf(row);\n            const page = Math.floor(rowIndex / this.perPage);\n\n            if (this.page !== page) {\n                delayScrolling = true;\n                this.page = page;\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof(row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(row));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof(row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(row));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollToHorizontally(column: any | number) {\n        let columnIndex = typeof column === 'number' ? column : this.getColumnByName(column).visibleIndex;\n        const scrollRow = this.rowList.find(r => r.virtDirRow);\n        const virtDir = scrollRow ? scrollRow.virtDirRow : null;\n        if (this.pinnedColumns.length) {\n            if (columnIndex >= this.pinnedColumns.length) {\n                columnIndex -= this.pinnedColumns.length;\n                this.scrollDirective(virtDir, columnIndex);\n            }\n        } else {\n            this.scrollDirective(virtDir, columnIndex);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollDirective(directive: IgxGridForOfDirective<any>, goal: number): void {\n        if (!directive) {\n            return;\n        }\n        // directive.onChunkLoad.pipe(first())\n        //     .subscribe(() => requestAnimationFrame(() => this.cdr.detectChanges()));\n        directive.scrollTo(goal);\n    }\n\n    private rebuildMatchCache() {\n        this.lastSearchInfo.matchInfoCache = [];\n\n        const caseSensitive = this.lastSearchInfo.caseSensitive;\n        const exactMatch = this.lastSearchInfo.exactMatch;\n        const searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();\n        const data = this.filteredSortedData;\n        const columnItems = this.visibleColumns.filter((c) => !c.columnGroup).sort((c1, c2) => c1.visibleIndex - c2.visibleIndex);\n\n        const numberPipe = new IgxDecimalPipeComponent(this.locale);\n        const datePipe = new IgxDatePipeComponent(this.locale);\n        data.forEach((dataRow) => {\n            columnItems.forEach((c) => {\n                const value = c.formatter ? c.formatter(dataRow[c.field]) :\n                    c.dataType === 'number' ? numberPipe.transform(dataRow[c.field], this.locale) :\n                        c.dataType === 'date' ? datePipe.transform(dataRow[c.field], this.locale)\n                            : dataRow[c.field];\n                if (value !== undefined && value !== null && c.searchable) {\n                    let searchValue = caseSensitive ? String(value) : String(value).toLowerCase();\n\n                    if (exactMatch) {\n                        if (searchValue === searchText) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: 0,\n                            });\n                        }\n                    } else {\n                        let occurenceIndex = 0;\n                        let searchIndex = searchValue.indexOf(searchText);\n\n                        while (searchIndex !== -1) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: occurenceIndex++,\n                            });\n\n                            searchValue = searchValue.substring(searchIndex + searchText.length);\n                            searchIndex = searchValue.indexOf(searchText);\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpandedGroup(_group: IGroupByRecord): boolean {\n        return undefined;\n    }\n\n    /**\n    * @hidden\n    */\n    protected getGroupByRecords(): IGroupByRecord[] {\n        return null;\n    }\n\n    protected changeRowEditingOverlayStateOnScroll(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>) {\n        if (!this.rowEditable || this.rowEditingOverlay.collapsed) {\n            return;\n        }\n        if (!row) {\n            this.toggleRowEditingOverlay(false);\n        } else {\n            this.repositionRowEditingOverlay(row);\n        }\n    }\n\n    openRowOverlay(id) {\n        this.configureRowEditingOverlay(id, this.rowList.length <= MIN_ROW_EDITING_COUNT_THRESHOLD);\n\n        this.rowEditingOverlay.open(this.rowEditSettings);\n        this.rowEditPositioningStrategy.isTopInitialPosition = this.rowEditPositioningStrategy.isTop;\n        this._wheelListener = this.rowEditingWheelHandler.bind(this);\n        this.rowEditingOverlay.element.addEventListener('wheel', this._wheelListener);\n    }\n\n    /**\n     * @hidden\n     */\n    public closeRowEditingOverlay() {\n        this.rowEditingOverlay.element.removeEventListener('wheel', this._wheelListener);\n        this.rowEditPositioningStrategy.isTopInitialPosition = null;\n        this.rowEditingOverlay.close();\n        this.rowEditingOverlay.element.parentElement.style.display = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public toggleRowEditingOverlay(show) {\n        const rowStyle = this.rowEditingOverlay.element.style;\n        if (show) {\n            rowStyle.display = 'block';\n        } else {\n            rowStyle.display = 'none';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public repositionRowEditingOverlay(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>) {\n        if (!this.rowEditingOverlay.collapsed) {\n            const rowStyle = this.rowEditingOverlay.element.parentElement.style;\n            if (row) {\n                rowStyle.display = '';\n                this.configureRowEditingOverlay(row.rowID);\n                this.rowEditingOverlay.reposition();\n            } else {\n                rowStyle.display = 'none';\n            }\n        }\n    }\n\n    private configureRowEditingOverlay(rowID: any, useOuter = false) {\n        this.rowEditSettings.outlet = useOuter ? this.parentRowOutletDirective : this.rowOutletDirective;\n        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;\n        const targetRow = this.gridAPI.get_row_by_key(rowID);\n        if (!targetRow) {\n            return;\n        }\n        this.rowEditPositioningStrategy.settings.target = targetRow.element.nativeElement;\n        this.toggleRowEditingOverlay(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowChangesCount() {\n        if (!this.crudService.row) {\n            return 0;\n        }\n        const rowChanges = this.transactions.getAggregatedValue(this.crudService.row.id, false);\n        return rowChanges ? Object.keys(rowChanges).length : 0;\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.gridAPI.get_all_data()[rowIndex], value);\n    }\n\n    endRowTransaction(commit: boolean, row: IgxRow) {\n        row.newData = this.transactions.getAggregatedValue(row.id, true);\n\n        let args = row.createEditEventArgs();\n\n        if (!commit) {\n            this.onRowEditCancel.emit(args);\n            this.transactions.endPending(false);\n        } else {\n            args = this.gridAPI.update_row(row, row.newData);\n        }\n        if (args.cancel) {\n            this.transactions.startPending();\n            return;\n        }\n        this.crudService.endRowEdit();\n        this.closeRowEditingOverlay();\n    }\n\n    // TODO: Refactor\n    /**\n     * Finishes the row transactions on the current row.\n     * If `commit === true`, passes them from the pending state to the data (or transaction service)\n     *\n     * Binding to the event\n     * ```html\n     * <button igxButton (click)=\"grid.endEdit(true)\">Commit Row</button>\n     * ```\n     * @param commit\n     */\n    public endEdit(commit = true, event?: Event) {\n        const row = this.crudService.row;\n        const cell = this.crudService.cell;\n        const columnindex = cell ? cell.column.index : -1;\n        const ri = row ? row.index : -1;\n\n        // TODO: Merge the crudService with wht BaseAPI service\n        if (!row && !cell) { return; }\n\n        commit ? this.gridAPI.submit_value() : this.gridAPI.escape_editMode();\n\n        if (!this.rowEditable || this.rowEditingOverlay && this.rowEditingOverlay.collapsed || !row) {\n            return;\n        }\n\n        this.endRowTransaction(commit, row);\n\n        const currentCell = this.gridAPI.get_cell_by_index(ri, columnindex);\n        if (currentCell && event) {\n            currentCell.nativeElement.focus();\n        }\n    }\n    /**\n     * @hidden\n     */\n    private rowEditingWheelHandler(event: WheelEvent) {\n        if (event.deltaY > 0) {\n            this.verticalScrollContainer.scrollNext();\n        } else {\n            this.verticalScrollContainer.scrollPrev();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get dataWithAddedInTransactionRows() {\n        const result = <any>cloneArray(this.gridAPI.get_all_data());\n        if (this.transactions.enabled) {\n            result.push(...this.transactions.getAggregatedChanges(true)\n                .filter(t => t.type === TransactionType.ADD)\n                .map(t => t.newValue));\n        }\n\n        return result;\n    }\n\n    public get dataLength() {\n        return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data().length;\n    }\n\n    public hasHorizontalScroll() {\n        return this.totalWidth - this.unpinnedWidth > 0;\n    }\n\n    protected _restoreVirtState(row) {\n         // check virtualization state of data record added from cache\n         // in case state is no longer valid - update it.\n         const rowForOf = row.virtDirRow;\n         const gridScrLeft = rowForOf.getHorizontalScroll().scrollLeft;\n         const left = -parseInt(rowForOf.dc.instance._viewContainer.element.nativeElement.style.left, 10);\n         const actualScrollLeft = left + rowForOf.getColumnScrollLeft(rowForOf.state.startIndex);\n        if (gridScrLeft !== actualScrollLeft) {\n            rowForOf.onHScroll(gridScrLeft);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean {\n        return this._exportExcel;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean {\n        return this._exportCsv;\n    }\n\n    /**\n    * @hidden\n    */\n    public isSummaryRow(rowData): boolean {\n        return rowData.summaries && (rowData.summaries instanceof Map);\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isAttachedToDom(): boolean {\n        return this.document.body.contains(this.nativeElement);\n    }\n\n\n\n    /**\n     * @hidden\n     */\n    public cachedViewLoaded(args: ICachedViewLoadedEventArgs) {\n        if (args.context['templateID'] === 'dataRow' && args.context['$implicit'] === args.oldContext['$implicit']) {\n            args.view.detectChanges();\n            const row = this.getRowByIndex(args.context.index);\n            if (row && row.cells) {\n                row.cells.forEach((c) => {\n                    c.highlightText(\n                        this.lastSearchInfo.searchText,\n                        this.lastSearchInfo.caseSensitive,\n                        this.lastSearchInfo.exactMatch);\n                });\n            }\n        }\n        if (this.hasHorizontalScroll()) {\n            const tmplId = args.context.templateID;\n            const index = args.context.index;\n            args.view.detectChanges();\n            const row = tmplId === 'dataRow' ? this.getRowByIndex(index) : null;\n            const summaryRow = tmplId === 'summaryRow' ? this.summariesRowList.toArray().find((sr) => sr.dataRowIndex === index) : null;\n            if (row && row instanceof IgxRowComponent) {\n                this._restoreVirtState(row);\n            } else if (summaryRow) {\n                this._restoreVirtState(summaryRow);\n            }\n        }\n    }\n}\n\n\n","import {\n    Directive, EmbeddedViewRef, Input, OnChanges, ChangeDetectorRef,\n    SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef, NgModule, NgZone, ViewRef, Output, EventEmitter\n} from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxTemplateOutlet]' })\nexport class IgxTemplateOutletDirective implements OnChanges {\n    private _viewRef !: EmbeddedViewRef<any>;\n\n    /**\n    * The embedded views cache. Collection is key-value paired.\n    * Key is the template id, value is the embedded view for the related template.\n    */\n    private _embeddedViewsMap: Map<string, EmbeddedViewRef<any>> = new Map();\n\n    @Input() public igxTemplateOutletContext !: Object;\n\n    @Input() public igxTemplateOutlet !: TemplateRef<any>;\n\n    @Output()\n    public onViewCreated = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onViewMoved = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onCachedViewLoaded = new EventEmitter<ICachedViewLoadedEventArgs>();\n\n    constructor(public _viewContainerRef: ViewContainerRef, private _zone: NgZone, public cdr: ChangeDetectorRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const actionType: TemplateOutletAction = this._getActionType(changes);\n        switch (actionType) {\n            case TemplateOutletAction.CreateView: this._recreateView(); break;\n            case TemplateOutletAction.MoveView: this._moveView(); break;\n            case TemplateOutletAction.UseCachedView: this._useCachedView(); break;\n            case TemplateOutletAction.UpdateViewContext: this._updateExistingContext(this.igxTemplateOutletContext); break;\n        }\n    }\n\n    private _recreateView() {\n        // detach old and create new\n        if (this._viewRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        }\n        if (this.igxTemplateOutlet) {\n            this._viewRef = this._viewContainerRef.createEmbeddedView(\n                this.igxTemplateOutlet, this.igxTemplateOutletContext);\n            this.onViewCreated.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            const tmplId = this.igxTemplateOutletContext['templateID'];\n            if (tmplId) {\n                // if context contains a template id, check if we have a view for that template already stored in the cache\n                // if not create a copy and add it to the cache in detached state.\n                // Note: Views in detached state do not appear in the DOM, however they remain stored in memory.\n                const res = this._embeddedViewsMap.get(this.igxTemplateOutletContext['templateID']);\n                if (!res) {\n                    this._embeddedViewsMap.set(this.igxTemplateOutletContext['templateID'], this._viewRef);\n                }\n            }\n        }\n    }\n\n    private _moveView() {\n        // using external view and inserting it in current view.\n        const view = this.igxTemplateOutletContext['moveView'];\n        const owner = this.igxTemplateOutletContext['owner'];\n        if (view !== this._viewRef) {\n            if (owner._viewContainerRef.indexOf(view) !== -1) {\n                // detach in case view it is attached somewhere else at the moment.\n                owner._viewContainerRef.detach(owner._viewContainerRef.indexOf(view));\n            }\n            if (this._viewRef && this._viewContainerRef.indexOf(this._viewRef) !== -1) {\n                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n            }\n            this._viewRef = view;\n            this._viewContainerRef.insert(view, 0);\n            this._updateExistingContext(this.igxTemplateOutletContext);\n            this.onViewMoved.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n        }\n    }\n    private _useCachedView() {\n        // use view for specific template cached in the current template outlet\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        // if view exists, but template has been changed and there is a view in the cache with the related template\n        // then detach old view and insert the stored one with the matching template\n        // after that update its context.\n        this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        this._viewRef = cachedView;\n        const oldContext = this._cloneContext(cachedView.context);\n        this._viewContainerRef.insert(this._viewRef, 0);\n        this._updateExistingContext(this.igxTemplateOutletContext);\n        this.onCachedViewLoaded.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext, oldContext });\n    }\n\n    private _shouldRecreateView(changes: SimpleChanges): boolean {\n        const ctxChange = changes['igxTemplateOutletContext'];\n        return !!changes['igxTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n    }\n\n    private _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            for (const propName of currCtxKeys) {\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _updateExistingContext(ctx: Object): void {\n        for (const propName of Object.keys(ctx)) {\n            (<any>this._viewRef.context)[propName] = (<any>this.igxTemplateOutletContext)[propName];\n        }\n    }\n\n    private _cloneContext(ctx: any): any {\n        const clone = {};\n        for (const propName of Object.keys(ctx)) {\n            clone[propName] = ctx[propName];\n        }\n        return clone;\n    }\n\n    private _getActionType(changes: SimpleChanges) {\n        const movedView = this.igxTemplateOutletContext['moveView'];\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        const shouldRecreate = this._shouldRecreateView(changes);\n        if (movedView) {\n            // view is moved from external source\n            return TemplateOutletAction.MoveView;\n        } else if (shouldRecreate && cachedView) {\n            // should recreate (template or context change) and there is a matching template in cache\n            return TemplateOutletAction.UseCachedView;\n        } else if (!this._viewRef || shouldRecreate) {\n            // no view or should recreate\n            return TemplateOutletAction.CreateView;\n        } else if (this.igxTemplateOutletContext) {\n            // has context, update context\n            return TemplateOutletAction.UpdateViewContext;\n        }\n    }\n}\nenum TemplateOutletAction {\n    CreateView,\n    MoveView,\n    UseCachedView,\n    UpdateViewContext\n}\n\nexport interface IViewChangeEventArgs {\n    owner: IgxTemplateOutletDirective;\n    view: EmbeddedViewRef<any>;\n    context: any;\n}\n\nexport interface ICachedViewLoadedEventArgs extends IViewChangeEventArgs {\n    oldContext: any;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTemplateOutletDirective],\n    entryComponents: [],\n    exports: [IgxTemplateOutletDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxTemplateOutletModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\n\n@Pipe({\n    name: 'igxGridSummaryDataPipe',\n    pure: true\n})\nexport class IgxSummaryDataPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    transform(id: string, trigger: number = 0) {\n        const summaryService = this.gridAPI.grid.summaryService;\n        return summaryService.calculateSummaries(\n            summaryService.rootSummaryID,\n            this.gridAPI.get_summary_data()\n        );\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n@Directive({\n    selector: '[igxProcessBarText]'\n})\nexport class IgxProcessBarTextTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Renderer2,\n    ViewChild,\n    ContentChild\n} from '@angular/core';\nimport { IgxProcessBarTextTemplateDirective } from './progressbar.common';\n\nconst ONE_PERCENT = 0.01;\nconst MIN_VALUE = 0;\n\nexport enum IgxTextAlign {\n    START = 'start',\n    CENTER = 'center',\n    END = 'end'\n}\n\nexport enum IgxProgressType {\n    DANGER = 'danger',\n    INFO = 'info',\n    WARNING = 'warning',\n    SUCCESS = 'success'\n}\n\nexport interface IChangeProgressEventArgs {\n    previousValue: number;\n    currentValue: number;\n}\n\nexport abstract class BaseProgress {\n    /**\n     * @hidden\n     */\n    private requestAnimationId: number = undefined;\n\n    /**\n     * @hidden\n     */\n    protected _valueInPercent = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _max = 100;\n    /**\n     * @hidden\n     */\n    protected _value = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _animate = true;\n\n    /**\n     * @hidden\n     */\n    protected _step;\n\n    /**\n     *Returns the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *public valuePercent(event){\n     *    let percentValue = this.progressBar.valueInPercent;\n     *    alert(percentValue);\n     *}\n     *```\n     */\n    public get valueInPercent(): number {\n        return this._valueInPercent;\n    }\n\n    /**\n     *Sets the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *    public setValue(event){\n     *    this.progressBar.valueInPercent = 56;\n     *}\n     * //...\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"setValue()\">setValue</button>\n     *```\n     */\n    public set valueInPercent(value: number) {\n        this._valueInPercent = value;\n    }\n\n    /**\n     * @hidden\n     */\n    protected runAnimation(val: number, step: number) {\n        this.requestAnimationId = requestAnimationFrame(\n            () => this.updateProgressSmoothly.call(this, val, step));\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressSmoothly(val: number, step: number) {\n        this._value += step;\n        const passedValue = convertInPercentage(val, this._max);\n        const progressValue = convertInPercentage(this._value, this._max);\n        if (this.valueInPercent === passedValue) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else if (this.isInLimitRange(progressValue, passedValue, step)) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else {\n            this.valueInPercent = progressValue;\n            this.requestAnimationId = requestAnimationFrame(() => this.updateProgressSmoothly.call(this, val, step));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressDirectly(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n\n    /**\n     * @hidden\n     */\n    protected directionFlow(currentValue: number, prevValue: number, step: number): number {\n        if (currentValue < prevValue) {\n            return step;\n        }\n\n        return -step;\n    }\n\n    /**\n     * @hidden\n     */\n    private isInLimitRange(val: number, comparator: number, step: number) {\n        return this.isExceedingUpperLimit(val, comparator, step) || this.isExceedingLowerLimit(val, comparator, step);\n    }\n\n    /**\n     * @hidden\n     *\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingUpperLimit(val: number, comparator: number, step: number) {\n        return val > comparator && step > 0;\n    }\n\n    /**\n     * @hidden\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingLowerLimit(val: number, comparator: number, step: number) {\n        return val < comparator && step < 0;\n    }\n\n    /**\n     * @hidden\n     * @param step\n     */\n    private updateProgress(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n}\nlet NEXT_LINEAR_ID = 0;\nlet NEXT_CIRCULAR_ID = 0;\n@Component({\n    selector: 'igx-linear-bar',\n    templateUrl: 'templates/linear-bar.component.html'\n})\nexport class IgxLinearProgressBarComponent extends BaseProgress {\n\n    /**\n     *Animation on progress `IgxLinearProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-linear-bar [animate]=\"false\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxLinearProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('attr.aria-valuemax')\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-linear-bar>\n     *```\n     */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    constructor() {\n        super();\n    }\n\n    @HostBinding('attr.aria-valuemin')\n    public valueMin = 0;\n\n    @HostBinding('class.igx-linear-bar')\n    public cssClass = 'igx-linear-bar';\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have striped style. By default it is set to false.\n     *```html\n     *<igx-linear-bar [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--striped')\n    @Input()\n    public striped = false;\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have indeterminate. By default it is set to false.\n     *```html\n     *<igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**An @Input property that sets the value of the `role` attribute. If not provided it will be automatically set to `progressbar`.\n     * ```html\n     *<igx-linear-bar role=\"progressbar\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'progressbar';\n\n    /**An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     *<igx-linear-bar [id]=\"'igx-linear-bar-55'\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-linear-bar-${NEXT_LINEAR_ID++}`;\n\n    /**\n     *Set the position that defines where the text is aligned.\n     Possible options - `IgxTextAlign.START` (default), `IgxTextAlign.CENTER`, `IgxTextAlign.END`.\n     *```typescript\n     *public positionCenter: IgxTextAlign;\n     *public ngOnInit() {\n     *    this.positionCenter = IgxTextAlign.CENTER;\n     *}\n     * //...\n     *```\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textAlign: IgxTextAlign = IgxTextAlign.START;\n\n    /**\n     *Set the text to be visible. By default it is set to true.\n     * ```html\n     *<igx-linear-bar type=\"default\" [textVisibility]=\"false\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     *Set the position that defines if the text should be aligned above the progress line. By default is set to false.\n     *```html\n     *<igx-linear-bar type=\"danger\" [textTop]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textTop = false;\n\n    /**\n     *Set a custom text that is displayed according to the defined position.\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public text: string;\n\n    /**\n     *Set type of the `IgxLinearProgressBarComponent`. Possible options - `default`, `success`, `info`, `warning`, and `danger`.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"100\" [value]=\"0\" type=\"danger\"></igx-linear-bar>\n     *```\n     */\n\n    @Input()\n    public type = 'default';\n\n     /**\n     *Returns value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     */\n    @HostBinding('attr.aria-valuenow')\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    set value(val) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInRange)) {\n            return;\n        }\n        const changedValues = {\n            currentValue: valueInRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this._animate && val >= this.step) {\n            super.runAnimation(valueInRange, updateValue);\n        } else {\n            super.updateProgressDirectly(valueInRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-linear-bar (onProgressChanged)=\"progressChange($event)\" type=\"success\">\n     *```\n     */\n    @Output() public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--danger')\n    public get danger() {\n        return this.type === IgxProgressType.DANGER;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--info')\n    public get info() {\n        return this.type === IgxProgressType.INFO;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--warning')\n    public get warning() {\n        return this.type === IgxProgressType.WARNING;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--success')\n    public get success() {\n        return this.type === IgxProgressType.SUCCESS;\n    }\n}\n\n@Component({\n    selector: 'igx-circular-bar',\n    templateUrl: 'templates/circular-bar.component.html'\n})\nexport class IgxCircularProgressBarComponent extends BaseProgress {\n\n    private readonly STROKE_OPACITY_DVIDER = 100;\n    private readonly STROKE_OPACITY_ADDITION = .2;\n\n    /** @hidden */\n    @HostBinding('class.igx-circular-bar')\n    public cssClass = 'igx-circular-bar';\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-circular-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-circular-bar>\n     *```\n     */\n    @Output()\n    public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-circular-bar [id]=\"'igx-circular-bar-55'\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-circular-bar-${NEXT_CIRCULAR_ID++}`;\n\n    /**\n     *An @Input property that sets the value of the `indeterminate` attribute. If not provided it will be automatically set to false.\n     *```html\n     *<igx-circular-bar [indeterminate]=\"true\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('class.igx-circular-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**\n     *Sets the text visibility. By default it is set to true.\n     *```html\n     *<igx-circular-bar [textVisibility]=\"false\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     * Sets/gets the text to be displayed inside the `igxCircularBar`.\n     *```html\n     *<igx-circular-bar text=\"Progress\"></igx-circular-bar>\n     *```\n     *```typescript\n     *let text = this.circularBar.text;\n     *```\n     */\n    @Input()\n    public text: string;\n\n    @ContentChild(IgxProcessBarTextTemplateDirective, { read: IgxProcessBarTextTemplateDirective })\n    public textTemplate: IgxProcessBarTextTemplateDirective;\n\n    /**\n     * @hidden\n    */\n    public get context(): any {\n        return {\n            $implicit: { value: this.value, valueInPercent: this.valueInPercent, max: this.max }\n        };\n    }\n\n    /**\n    *Animation on progress `IgxCircularProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-circular-bar [animate]=\"false\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxCircularProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-circular-bar [max]=\"200\" [value]=\"0\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     *```html\n     *<igx-circular-bar [max]=\"245\" [animate]=\"false\" [value]=\"currentValue\"></igx-circular-bar>\n     *```\n     */\n    get max(): number {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-circular-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-circular-bar>\n     *```\n    */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    /**\n     *Returns value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"getValue()\">Click</button>\n     *```\n     */\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```html\n     *<igx-circular-bar [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    set value(val: number) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInProperRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInProperRange)) {\n            return;\n        }\n\n        const changedValues = {\n            currentValue: valueInProperRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this.animate && val >= this.step) {\n            super.runAnimation(valueInProperRange, updateValue);\n        } else {\n            this.updateProgressDirectly(valueInProperRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    private _circleRadius = 46;\n    private _circumference = 2 * Math.PI * this._circleRadius;\n\n    @ViewChild('circle') private _svgCircle: ElementRef;\n\n    constructor(private renderer: Renderer2) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    public updateProgressSmoothly(val: number, step: number) {\n        // Set frames for the animation\n        const FRAMES = [{\n            strokeDashoffset: this.getProgress(this._value),\n            strokeOpacity: (this._value / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }, {\n            strokeDashoffset: this.getProgress(this.valueInPercent),\n            strokeOpacity: (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }];\n        this._svgCircle.nativeElement.animate(FRAMES, {\n            easing: 'ease-out',\n            fill: 'forwards'\n        });\n\n        super.updateProgressSmoothly(val, step);\n    }\n\n    /**\n     * @hidden\n    */\n    public get textContent(): string {\n        return this.text;\n    }\n\n    /**\n     * @hidden\n    */\n    public updateProgressDirectly(val: number) {\n        super.updateProgressDirectly(val);\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-dashoffset',\n            this.getProgress(this.valueInPercent));\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-opacity',\n            (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION);\n    }\n\n    private getProgress(percentage: number) {\n        return this._circumference - (percentage * this._circumference / 100);\n    }\n}\n\nexport function getValueInProperRange(value: number, max: number, min = 0): number {\n    return Math.max(Math.min(value, max), min);\n}\n\nexport function convertInPercentage(value: number, max: number) {\n    return Math.floor(100 * value / max);\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    exports: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    imports: [CommonModule]\n})\nexport class IgxProgressBarModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { DataUtil } from '../data-operations/data-util';\nimport { cloneArray } from '../core/utils';\n\n@Pipe({\n    name: 'igxCellStyles'\n})\nexport class IgxGridCellStylesPipe implements PipeTransform {\n\n    transform(cssClasses: any, _value: any, data: any, field: string): string {\n        if (!cssClasses) {\n            return '';\n        }\n\n        const result = [];\n\n        Object.entries(cssClasses).forEach(([cssClass, callbackOrValue]) => {\n            const apply = typeof callbackOrValue === 'function' ? callbackOrValue(data, field) : callbackOrValue;\n            if (apply) {\n                result.push(cssClass);\n            }\n        });\n\n        return result.join(' ');\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxNotGrouped'\n})\nexport class IgxGridNotGroupedPipe implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => !item.columnGroup);\n    }\n}\n\n@Pipe({\n    name: 'igxTopLevel'\n})\nexport class IgxGridTopLevelColumns implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => item.level === 0);\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\nexport class IgxGridFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridTransaction',\n    pure: true\n})\nexport class IgxGridTransactionPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    transform(collection: any[], id: string, pipeTrigger: number) {\n        const grid: IgxGridBaseComponent = this.gridAPI.grid;\n\n        if (collection && grid.transactions.enabled) {\n            const result = DataUtil.mergeTransactions(\n                cloneArray(collection),\n                grid.transactions.getAggregatedChanges(true),\n                grid.primaryKey);\n            return result;\n        }\n        return collection;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxDatePipeComponent, IgxDecimalPipeComponent } from './grid.common';\nimport {\n    IgxGridFilterConditionPipe,\n    IgxGridTransactionPipe,\n    IgxGridNotGroupedPipe,\n    IgxGridTopLevelColumns,\n    IgxGridCellStylesPipe\n} from './grid-common.pipes';\n\n@NgModule({\n    declarations: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe\n    ],\n    exports: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe\n    ],\n    imports: [\n        CommonModule\n    ]\n  })\nexport class IgxGridPipesModule { }\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../../column.component';\nimport { IgxGridBaseComponent } from '../../grid-base.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-column-moving',\n    templateUrl: './excel-style-column-moving.component.html'\n})\nexport class IgxExcelStyleColumnMovingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: IgxGridBaseComponent;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    constructor() {}\n\n    private get visibleColumns() {\n        return this.grid.visibleColumns.filter(col => !(col instanceof IgxColumnGroupComponent));\n    }\n\n    get canNotMoveLeft() {\n        return this.column.visibleIndex === 0 ||\n            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && this.column.disablePinning) ||\n            (this.column.level !== 0 && !this.findColumn(0, this.visibleColumns));\n    }\n\n    get canNotMoveRight() {\n        return this.column.visibleIndex === this.visibleColumns.length - 1 ||\n            (this.column.level !== 0 && !this.findColumn(1, this.visibleColumns));\n    }\n\n    public onMoveButtonClicked(moveDirection) {\n        let targetColumn;\n        if (this.column.pinned) {\n            if (this.column.isLastPinned && moveDirection === 1) {\n                targetColumn = this.grid.unpinnedColumns[0];\n                moveDirection = 0;\n            } else {\n                targetColumn = this.findColumn(moveDirection, this.grid.pinnedColumns);\n            }\n        } else if (this.grid.unpinnedColumns.indexOf(this.column) === 0 && moveDirection === 0) {\n            targetColumn = this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1];\n            moveDirection = 1;\n        } else {\n            targetColumn = this.findColumn(moveDirection, this.grid.unpinnedColumns);\n        }\n        this.grid.moveColumn(this.column, targetColumn, moveDirection);\n    }\n\n    private findColumn(moveDirection: number, columns: IgxColumnComponent[]) {\n        let index = columns.indexOf(this.column);\n        if (moveDirection === 0) {\n            while (index > 0) {\n                index--;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        } else {\n            while (index < columns.length - 1) {\n                index++;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        }\n    }\n}\n","import { Directive, TemplateRef, EventEmitter, QueryList, Optional, Inject } from '@angular/core';\nimport { DisplayDensityBase, IDisplayDensityOptions, DisplayDensityToken } from '../core/density';\n\nexport interface IListChild {\n    index: number;\n}\n\n/** @hidden */\nexport abstract class IgxListBase extends DisplayDensityBase {\n    onItemClicked: EventEmitter<any>;\n    allowLeftPanning: boolean;\n    allowRightPanning: boolean;\n    panEndTriggeringThreshold: number;\n    onLeftPan: EventEmitter<any>;\n    onRightPan: EventEmitter<any>;\n    onPanStateChange: EventEmitter<any>;\n    children: QueryList<any>;\n    listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n    listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n}\n\nexport enum IgxListPanState { NONE, LEFT, RIGHT }\n\n@Directive({\n    selector: '[igxEmptyList]'\n})\nexport class IgxEmptyListTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxDataLoading]'\n})\nexport class IgxDataLoadingTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemLeftPanning]'\n})\nexport class IgxListItemLeftPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemRightPanning]'\n})\nexport class IgxListItemRightPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Inject, Injectable, NgZone } from '@angular/core';\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\n\nconst EVENT_SUFFIX = 'precise';\n\n/**\n * Touch gestures manager based on Hammer.js\n * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.\n * @hidden\n */\n@Injectable()\nexport class HammerGesturesManager {\n    /**\n     * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.\n     */\n    protected hammerOptions: HammerOptions = {\n        // D.P. #447 Force TouchInput due to PointerEventInput bug (https://github.com/hammerjs/hammer.js/issues/1065)\n        // see https://github.com/IgniteUI/igniteui-angular/issues/447#issuecomment-324601803\n        inputClass: Hammer.TouchInput,\n        recognizers: [\n            [ Hammer.Pan, { threshold: 0 } ],\n            [ Hammer.Pinch, { enable: true } ],\n            [ Hammer.Rotate, { enable: true } ],\n            [ Hammer.Swipe, {\n                direction: Hammer.DIRECTION_HORIZONTAL\n            }]\n        ]\n    };\n\n    private _hammerManagers: Array<{ element: EventTarget, manager: HammerManager; }> = [];\n\n    constructor(private _zone: NgZone, @Inject(DOCUMENT) private doc: any) {\n    }\n\n    public supports(eventName: string): boolean {\n        return eventName.toLowerCase().endsWith('.' + EVENT_SUFFIX);\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     */\n    public addEventListener(element: HTMLElement,\n                            eventName: string,\n                            eventHandler: (eventObj) => void,\n                            options: object = null): () => void {\n\n        // Creating the manager bind events, must be done outside of angular\n        return this._zone.runOutsideAngular(() => {\n            let mc: HammerManager = this.getManagerForElement(element);\n            if (mc === null) {\n                // new Hammer is a shortcut for Manager with defaults\n                mc = new Hammer(element, this.hammerOptions);\n                this.addManagerForElement(element, mc);\n            }\n            const handler = (eventObj) => { this._zone.run(() => { eventHandler(eventObj); }); };\n            mc.on(eventName, handler);\n            return () => { mc.off(eventName, handler); };\n        });\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     *\n     * @param target Can be one of either window, body or document(fallback default).\n     */\n    public addGlobalEventListener(target: string, eventName: string, eventHandler: (eventObj) => void): () => void {\n        const element = this.getGlobalEventTarget(target);\n\n        // Creating the manager bind events, must be done outside of angular\n        return this.addEventListener(element as HTMLElement, eventName, eventHandler);\n    }\n\n    /**\n     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.\n     * Supported: window, document, body. Defaults to document for invalid args.\n     * @param target Target name\n     */\n    public getGlobalEventTarget(target: string): EventTarget {\n        return getDOM().getGlobalEventTarget(this.doc, target);\n    }\n\n    /**\n     * Set HammerManager options.\n     *\n     * @param element The DOM element used to create the manager on.\n     *\n     * ### Example\n     *\n     * ```ts\n     * manager.setManagerOption(myElem, \"pan\", { pointers: 1 });\n     * ```\n     */\n    public setManagerOption(element: EventTarget, event: string, options: any) {\n        const manager = this.getManagerForElement(element);\n        manager.get(event).set(options);\n    }\n\n    /**\n     * Add an element and manager map to the internal collection.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public addManagerForElement(element: EventTarget, manager: HammerManager) {\n        this._hammerManagers.push({element, manager});\n    }\n\n    /**\n     * Get HammerManager for the element or null\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public getManagerForElement(element: EventTarget): HammerManager {\n        const result =  this._hammerManagers.filter((value, index, array) => {\n            return value.element === element;\n        });\n        return result.length ? result[0].manager : null;\n    }\n\n    /**\n     * Destroys the HammerManager for the element, removing event listeners in the process.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public removeManagerForElement(element: HTMLElement) {\n        let index: number = null;\n        for (let i = 0; i < this._hammerManagers.length; i++) {\n            if (element === this._hammerManagers[i].element) {\n                index = i;\n                break;\n            }\n        }\n        if (index !== null) {\n            const item = this._hammerManagers.splice(index, 1)[0];\n            // destroy also\n            item.manager.destroy();\n        }\n    }\n\n    /** Destroys all internally tracked HammerManagers, removing event listeners in the process. */\n    public destroy() {\n        for (const item of this._hammerManagers) {\n            item.manager.destroy();\n        }\n        this._hammerManagers = [];\n    }\n}\n","\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\n\nimport {\n    IgxListPanState,\n    IListChild,\n    IgxListBase\n} from './list.common';\n\nimport { HammerGesturesManager } from '../core/touch';\n\n/**\n * The Ignite UI List Item component is a container intended for row items in the Ignite UI for Angular List component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-list-item',\n    templateUrl: 'list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IgxListItemComponent implements IListChild {\n\n    /**\n     *@hidden\n     */\n    private _panState: IgxListPanState = IgxListPanState.NONE;\n\n    /**\n     *@hidden\n     */\n    private panOffset = 0;\n\n    /**\n     * @hidden\n     */\n    private _index: number = null;\n\n    /**\n     *@hidden\n     */\n    private lastPanDir = IgxListPanState.NONE;\n\n    /**\n     * Provides a reference to the template's base element shown when left panning a list item.\n     * ```typescript\n     * const leftPanTmpl = this.listItem.leftPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('leftPanningTmpl')\n    public leftPanningTemplateElement;\n\n    /**\n     * Provides a reference to the template's base element shown when right panning a list item.\n     * ```typescript\n     * const rightPanTmpl = this.listItem.rightPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('rightPanningTmpl')\n    public rightPanningTemplateElement;\n\n    constructor(\n        public list: IgxListBase,\n        private elementRef: ElementRef,\n        private _renderer: Renderer2) {\n    }\n\n    /**\n     * Sets/gets whether the `list item` is a header.\n     * ```html\n     * <igx-list-item [isHeader] = \"true\">Header</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHeader =  this.listItem.isHeader;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public isHeader: boolean;\n\n    /**\n     * Sets/gets whether the `list item` is hidden.\n     * By default the `hidden` value is `false`.\n     * ```html\n     * <igx-list-item [hidden] = \"true\">Hidden Item</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHidden =  this.listItem.hidden;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public hidden = false;\n\n    /**\n     * Gets the `role` attribute of the `list item`.\n     * ```typescript\n     * let itemRole =  this.listItem.role;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return this.isHeader ? 'separator' : 'listitem';\n    }\n\n    /**\n     * Sets/gets the `aria-label` attribute of the `list item`.\n     * ```typescript\n     * this.listItem.ariaLabel = \"Item1\";\n     * ```\n     * ```typescript\n     * let itemAriaLabel = this.listItem.ariaLabel;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel: string;\n\n    /**\n     * Gets the `touch-action` style of the `list item`.\n     * ```typescript\n     * let touchAction = this.listItem.touchAction;\n     * ```\n     */\n    @HostBinding('style.touch-action')\n    public touchAction = 'pan-y';\n\n    /**\n     * Indicates whether `list item` should have header style.\n     * ```typescript\n     * let headerStyle =  this.listItem.headerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__header')\n    get headerStyle(): boolean {\n        return this.isHeader;\n    }\n\n    /**\n     * Applies the inner style of the `list item` if the item is not counted as header.\n     * ```typescript\n     * let innerStyle =  this.listItem.innerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__item-base')\n    get innerStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Returns string value which describes the display mode of the `list item`.\n     * ```typescript\n     * let isHidden = this.listItem.display;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('style.display')\n    get display(): string {\n        return this.hidden ? 'none' : '';\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(evt) {\n        this.list.onItemClicked.emit({ item: this, event: evt, direction: this.lastPanDir });\n        this.lastPanDir = IgxListPanState.NONE;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panstart', ['$event'])\n    panStart(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panmove', ['$event'])\n    panMove(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n        const isPanningToLeft = ev.deltaX < 0;\n        if (isPanningToLeft && this.isTrue(this.list.allowLeftPanning)) {\n            this.showLeftPanTemplate();\n            this.setContentElementLeft(Math.max(this.maxLeft, ev.deltaX));\n        } else if (!isPanningToLeft && this.isTrue(this.list.allowRightPanning)) {\n            this.showRightPanTemplate();\n            this.setContentElementLeft(Math.min(this.maxRight, ev.deltaX));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panend', ['$event'])\n    panEnd(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n\n        // the translation offset of the current list item content\n        const relativeOffset = this.panOffset;\n        const widthTriggeringGrip = this.width * this.list.panEndTriggeringThreshold;\n\n        if (relativeOffset === 0) {\n            return; // no panning has occured\n        }\n\n        const dir = relativeOffset > 0 ? IgxListPanState.RIGHT : IgxListPanState.LEFT;\n        this.lastPanDir = dir;\n\n        const oldPanState = this._panState;\n        if (Math.abs(relativeOffset) < widthTriggeringGrip) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n            this.hideLeftAndRightPanTemplates();\n            return;\n        }\n\n        const args = { item: this, direction: dir, keepItem: false};\n\n        if (dir === IgxListPanState.LEFT) {\n            this.list.onLeftPan.emit(args);\n        } else {\n            this.list.onRightPan.emit(args);\n        }\n\n        if (args.keepItem === true) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n        } else {\n            if (dir === IgxListPanState.LEFT) {\n                this.setContentElementLeft(this.maxLeft);\n                this._panState = IgxListPanState.LEFT;\n            } else {\n                this.setContentElementLeft(this.maxRight);\n                this._panState = IgxListPanState.RIGHT;\n            }\n        }\n\n        if (oldPanState !== this._panState) {\n            const args2 = { oldState: oldPanState, newState: this._panState, item: this };\n            this.list.onPanStateChange.emit(args2);\n        }\n        this.hideLeftAndRightPanTemplates();\n    }\n\n    /**\n     *@hidden\n     */\n    private showLeftPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('visible', 'hidden');\n    }\n\n    /**\n     *@hidden\n     */\n    private showRightPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('hidden', 'visible');\n    }\n\n    /**\n     *@hidden\n     */\n    private hideLeftAndRightPanTemplates() {\n        setTimeout(() => {\n            this.setLeftAndRightTemplatesVisibility('hidden', 'hidden');\n        }, 500);\n    }\n\n    /**\n     *@hidden\n     */\n    private setLeftAndRightTemplatesVisibility(leftVisibility, rightVisibility) {\n        if (this.leftPanningTemplateElement && this.leftPanningTemplateElement.nativeElement) {\n            this.leftPanningTemplateElement.nativeElement.style.visibility = leftVisibility;\n        }\n        if (this.rightPanningTemplateElement && this.rightPanningTemplateElement.nativeElement) {\n            this.rightPanningTemplateElement.nativeElement.style.visibility = rightVisibility;\n        }\n    }\n\n    /**\n     * Gets the `panState` of a `list item`.\n     * ```typescript\n     * let itemPanState =  this.listItem.panState;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get panState(): IgxListPanState {\n        return this._panState;\n    }\n\n    /**\n     * Gets the `index` of a `list item`.\n     * ```typescript\n     * let itemIndex =  this.listItem.index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public get index(): number {\n        return this._index !== null ? this._index : this.list.children.toArray().indexOf(this);\n    }\n\n    /**\n     * Sets the `index` of the `list item`.\n     * ```typescript\n     * this.listItem.index = index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public set index(value: number) {\n        this._index = value;\n    }\n\n    /**\n     * Returns an element reference to the list item.\n     * ```typescript\n     * let listItemElement =  this.listItem.element.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Returns a reference container which contains the list item's content.\n     * ```typescript\n     * let listItemContainer =  this.listItem.contentElement.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get contentElement() {\n        const candidates = this.element.getElementsByClassName('igx-list__item-content');\n        return (candidates && candidates.length > 0) ? candidates[0] : null;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list item container`\n     * by providing the `$implicit` declaration which is the `IgxListItemComponent` itself.\n     * ```typescript\n     * let listItemComponent = this.listItem.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Gets the width of a `list item`.\n     * ```typescript\n     * let itemWidth = this.listItem.width;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get width() {\n        if (this.element) {\n            return this.element.offsetWidth;\n        }\n    }\n\n    /**\n     * Gets the maximum left position of the `list item`.\n     * ```typescript\n     * let maxLeft = this.listItem.maxLeft;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxLeft() {\n        return -this.width;\n    }\n\n    /**\n     * Gets the maximum right position of the `list item`.\n     * ```typescript\n     * let maxRight = this.listItem.maxRight;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxRight() {\n        return this.width;\n    }\n\n    /**\n     *@hidden\n     */\n    private setContentElementLeft(value: number) {\n        this.panOffset = value;\n        this.contentElement.style.transform = 'translateX(' + value + 'px)';\n    }\n\n    /**\n     *@hidden\n     */\n    private isTrue(value: boolean): boolean {\n        if (typeof (value) === 'boolean') {\n            return value;\n        } else {\n            return value === 'true';\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    Optional,\n    Inject\n} from '@angular/core';\n\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\nimport { IgxListItemComponent } from './list-item.component';\nimport {\n    IgxListBase,\n    IgxDataLoadingTemplateDirective,\n    IgxEmptyListTemplateDirective,\n    IgxListPanState,\n    IgxListItemLeftPanningTemplateDirective,\n    IgxListItemRightPanningTemplateDirective\n} from './list.common';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../core/density';\n\nlet NEXT_ID = 0;\nexport interface IPanStateChangeEventArgs {\n    oldState: IgxListPanState;\n    newState: IgxListPanState;\n    item: IgxListItemComponent;\n}\n\nexport interface IListItemClickEventArgs {\n    item: IgxListItemComponent;\n    event: Event;\n    direction: IgxListPanState;\n}\n\nexport interface IListItemPanningEventArgs {\n    item: IgxListItemComponent;\n    direction: IgxListPanState;\n    keepItem: boolean;\n}\n\n/**\n * **Ignite UI for Angular List** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/list.html)\n *\n * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering\n * of list items. Each list item is completely templateable and will support any valid HTML or Angular component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    selector: 'igx-list',\n    templateUrl: 'list.component.html',\n    providers: [{ provide: IgxListBase, useExisting: IgxListComponent }]\n})\nexport class IgxListComponent extends IgxListBase {\n\n    constructor(public element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns a collection of all items and headers in the list.\n     * ```typescript\n     * let listChildren: QueryList = this.list.children;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChildren(forwardRef(() => IgxListItemComponent))\n    public children: QueryList<IgxListItemComponent>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected get sortedChildren(): IgxListItemComponent[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxListItemComponent, b: IgxListItemComponent) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `false`.\n     * ```typescript\n     * let emptyTemplate = this.list.emptyListTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective })\n    public emptyListTemplate: IgxEmptyListTemplateDirective;\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `true`.\n     * ```typescript\n     * let loadingTemplate = this.list.dataLoadingTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective })\n    public dataLoadingTemplate: IgxDataLoadingTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when left panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemLeftPanTmpl = this.list.listItemLeftPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective })\n    public listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when right panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemRightPanTmpl = this.list.listItemRightPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective })\n    public listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    /**\n     * Provides a threshold after which the item's panning will be completed automatically.\n     * By default this property is set to 0.5 which is 50% of the list item's width.\n     * ```typescript\n     * this.list.panEndTriggeringThreshold = 0.8;\n     * ```\n     */\n    @Input()\n    public panEndTriggeringThreshold = 0.5;\n\n    /**@hidden*/\n    @ViewChild('defaultEmptyList', { read: TemplateRef })\n    protected defaultEmptyListTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ViewChild('defaultDataLoading', { read: TemplateRef })\n    protected defaultDataLoadingTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the `id` of the list.\n     * If not set, the `id` of the first list component will be `\"igx-list-0\"`.\n     * ```html\n     * <igx-list id = \"my-first-list\"></igx-list>\n     * ```\n     * ```typescript\n     * let listId =  this.list.id;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-list-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the left panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLeftPanningAllowed = this.list.allowLeftPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowLeftPanning = false;\n\n    /**\n     * Sets/gets whether the right panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowRightPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isRightPanningAllowed = this.list.allowRightPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowRightPanning = false;\n\n    /**\n     * Sets/gets whether the list is currently loading data.\n     * Set it to display the dataLoadingTemplate while data is being retrieved.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [isLoading]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLoading = this.list.isLoading;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public isLoading = false;\n\n    /**\n     * Emits an event within the current list when left pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\" (onLeftPan)=\"onLeftPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onLeftPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n     * Emits an event within the current list when right pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowRightPanning]=\"true\" (onRightPan)=\"onRightPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onRightPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n    * Emits an event within the current list when pan gesture is executed on list item.\n    * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.\n    * ```html\n    * <igx-list (onPanStateChange) = \"onPanStateChange($event)\"></igx-list>\n    * ```\n    * @memberof IgxListComponent\n    */\n    @Output()\n    public onPanStateChange = new EventEmitter<IPanStateChangeEventArgs>();\n\n    /**\n     * Emits an event within the current list when a list item has been clicked.\n     * Provides references to the `IgxListItemComponent` and `Event` as event arguments.\n     *  ```html\n     * <igx-list (onItemClicked) = \"onItemClicked($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onItemClicked = new EventEmitter<IListItemClickEventArgs>();\n\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let listRole =  this.list.role;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'list';\n    }\n\n    /**\n     * Returns boolean indicating if the list is empty.\n     * ```typescript\n     * let isEmpty =  this.list.isListEmpty;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('class.igx-list-empty')\n    public get isListEmpty(): boolean {\n        return !this.children || this.children.length === 0;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list')\n    public get cssClass(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list--compact')\n    public get cssClassCompact(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list--cosy')\n    public get cssClassCosy(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * Returns the `items` in the list excluding the headers.\n     * ```typescript\n     * let listItems: IgxListItemComponent[] = this.list.items;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get items(): IgxListItemComponent[] {\n        const items: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n        return items;\n    }\n\n    /**\n     * Returns the headers in the list.\n     * ```typescript\n     * let listHeaders: IgxListItemComponent[] =  this.list.headers;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get headers(): IgxListItemComponent[] {\n        const headers: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list container`\n     * by providing the `$implicit` declaration which is the `IgxListComponent` itself.\n     * ```typescript\n     * let listComponent =  this.list.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Returns the `template` of an empty list.\n     * ```typescript\n     * let listTemplate = this.list.template;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.isLoading) {\n            return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;\n        } else {\n            return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxListComponent, IgxListItemComponent,\n        IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective],\n    exports: [IgxListComponent, IgxListItemComponent,\n        IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective],\n    imports: [CommonModule, IgxRippleModule]\n})\nexport class IgxListModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { FilterListItem } from './grid.excel-style-filtering.component';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'excelStyleSearchFilter'\n})\nexport class IgxExcelStyleSearchFilterPipe implements PipeTransform {\n    transform(items: FilterListItem[], searchText: string): any[] {\n        if (!items || !items.length) {\n            return [];\n        }\n\n        if (!searchText) {\n            return items;\n        }\n\n        searchText = searchText.toLowerCase();\n        const result = items.filter((it, i) => (i === 0 && it.isSpecial) ||\n            (it.value || it.value === 0) &&\n            it.value.toString().toLowerCase().indexOf(searchText) > -1);\n\n        return result.length > 1 ? result : [];\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n    IgxGridExcelStyleFilteringComponent,\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective\n} from './grid.excel-style-filtering.component';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { IgxExcelStyleColumnMovingComponent } from './excel-style-column-moving.component';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { IgxSelectionAPIService } from '../../../core/selection';\nimport { FormsModule } from '@angular/forms';\nimport { IgxGridPipesModule } from '../../grid-pipes.module';\nimport { IgxButtonModule } from '../../../directives/button/button.directive';\nimport { IgxButtonGroupModule } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDatePickerModule } from '../../../date-picker/date-picker.component';\nimport { IgxIconModule } from '../../../icon/index';\nimport { IgxRippleModule } from '../../../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../../../input-group/input-group.component';\nimport { IgxDropDownModule } from '../../../drop-down/index';\nimport { IgxForOfModule } from '../../../directives/for-of/for_of.directive';\nimport { IgxCheckboxModule } from '../../../checkbox/checkbox.component';\nimport { IgxFilterModule } from '../../../directives/filter/filter.directive';\nimport { IgxToggleModule } from '../../../directives/toggle/toggle.directive';\nimport { IgxListModule } from '../../../list/list.component';\nimport { IgxExcelStyleSearchFilterPipe } from './excel-style-search.pipe';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingComponent,\n        IgxExcelStyleColumnMovingComponent,\n        IgxExcelStyleSearchComponent,\n        IgxExcelStyleCustomDialogComponent,\n        IgxExcelStyleDefaultExpressionComponent,\n        IgxExcelStyleDateExpressionComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleSearchFilterPipe\n    ],\n    exports: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleDateExpressionComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxGridPipesModule,\n        IgxButtonModule,\n        IgxButtonGroupModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxDropDownModule,\n        IgxForOfModule,\n        IgxCheckboxModule,\n        IgxFilterModule,\n        IgxToggleModule,\n        IgxListModule\n    ],\n    entryComponents: [\n        IgxGridExcelStyleFilteringComponent\n    ],\n    providers: [\n        IgxSelectionAPIService\n    ]\n})\nexport class IgxGridExcelStyleFilteringModule {\n\n}\n","import { Directive, Input, OnDestroy, NgModule } from '@angular/core';\nimport { IgxDragDirective } from '../directives/dragdrop/dragdrop.directive';\nimport { IRowDragEndEventArgs, IRowDragStartEventArgs } from './grid-base.component';\nimport { KEYS } from '../core/utils';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { IgxRowComponent, IgxGridBaseComponent, IGridDataBindable } from './grid';\n\n\nconst ghostBackgroundClass = 'igx-grid__tr--ghost';\nconst gridCellClass = 'igx-grid__td';\nconst rowSelectedClass = 'igx-grid__tr--selected';\nconst cellSelectedClass = 'igx-grid__td--selected';\nconst cellActiveClass = 'igx-grid__td--active';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowDrag]'\n})\nexport class IgxRowDragDirective extends IgxDragDirective implements OnDestroy {\n    private row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    private subscription$: Subscription;\n    private _rowDragStarted = false;\n\n    @Input('igxRowDrag')\n    set data(val) {\n        this.row = val;\n    }\n\n    get data() {\n        return this.row;\n    }\n\n    public onPointerDown(event) {\n        event.preventDefault();\n        this._rowDragStarted = false;\n        super.onPointerDown(event);\n    }\n\n    public onPointerMove(event) {\n        super.onPointerMove(event);\n        if (this._dragStarted && !this._rowDragStarted) {\n            this._rowDragStarted = true;\n            const args: IRowDragStartEventArgs = {\n                owner: this,\n                dragData: this.row,\n                cancel: false\n            };\n\n            this.row.grid.onRowDragStart.emit(args);\n            if (args.cancel) {\n                this.dragGhost.parentNode.removeChild(this.dragGhost);\n                this.dragGhost = null;\n                this._dragStarted = false;\n                this._clicked = false;\n                return;\n            }\n            this.row.dragging = true;\n            this.row.grid.rowDragging = true;\n            this.row.grid.markForCheck();\n\n            this.subscription$ = fromEvent(this.row.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n                if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                    this._lastDropArea = false;\n                    this.onPointerUp(event);\n                }\n            });\n        }\n    }\n\n    public onPointerUp(event) {\n\n        if (!this._clicked) {\n            return;\n        }\n\n        const args: IRowDragEndEventArgs = {\n            owner: this,\n            dragData: this.row,\n            animation: false\n        };\n        this.zone.run(() => {\n            this.row.grid.onRowDragEnd.emit(args);\n        });\n\n        if (args.animation) {\n            this.animateOnRelease = true;\n        }\n\n        const dropArea = this._lastDropArea;\n        super.onPointerUp(event);\n        if (!dropArea && this.animateOnRelease) {\n            this.dragGhost.addEventListener('transitionend',  this.transitionEndEvent, false);\n        }   else {\n            this.endDragging();\n        }\n    }\n\n    protected createDragGhost(event) {\n        this.row.grid.endEdit(true);\n        this.row.grid.markForCheck();\n        super.createDragGhost(event, this.row.nativeElement);\n\n        const ghost = this.dragGhost;\n\n        const gridRect = this.row.grid.nativeElement.getBoundingClientRect();\n        const rowRect = this.row.nativeElement.getBoundingClientRect();\n        ghost.style.overflow = 'hidden';\n        ghost.style.width = gridRect.width + 'px';\n        ghost.style.height = rowRect.height + 'px';\n\n        this.renderer.addClass(ghost, ghostBackgroundClass);\n        this.renderer.removeClass(ghost, rowSelectedClass);\n\n        const ghostCells = ghost.getElementsByClassName(gridCellClass);\n        for (let index = 0; index < ghostCells.length; index++) {\n            this.renderer.removeClass(ghostCells[index], cellSelectedClass);\n            this.renderer.removeClass(ghostCells[index], cellActiveClass);\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$ && !this.subscription$.closed) {\n            this.subscription$.unsubscribe();\n        }\n    }\n\n    private endDragging() {\n        this.onTransitionEnd(null);\n        this.row.dragging = false;\n        this.row.grid.rowDragging = false;\n        this.row.grid.markForCheck();\n        this._unsubscribe();\n    }\n\n    private transitionEndEvent = (evt?) => {\n        if (this.dragGhost) {\n            this.dragGhost.removeEventListener('transitionend', this.transitionEndEvent, false);\n        }\n        this.endDragging();\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxDragIndicatorIcon]'\n})\n\nexport class IgxDragIndicatorIconDirective {\n}\n\n@NgModule({\n    declarations: [IgxRowDragDirective, IgxDragIndicatorIconDirective],\n    entryComponents: [],\n    exports: [IgxRowDragDirective, IgxDragIndicatorIconDirective],\n    imports: []\n})\n\nexport class IgxRowDragModule {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDatePickerModule } from '../date-picker/date-picker.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\nimport { IgxForOfModule } from '../directives/for-of/for_of.directive';\nimport { IgxTemplateOutletModule } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxTextHighlightModule } from '../directives/text-highlight/text-highlight.directive';\nimport { IgxTextSelectionModule } from '../directives/text-selection/text-selection.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent, IgxColumnGroupComponent, IgxColumnLayoutComponent } from './column.component';\nimport { IgxColumnHidingModule } from './column-hiding.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellFooterTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxColumnResizerDirective,\n    IgxColumnMovingDragDirective,\n    IgxColumnMovingDropDirective,\n    IgxGridBodyDirective,\n    IgxColumnMovingService,\n    IgxFilterCellTemplateDirective,\n    IgxResizeHandleDirective\n} from './grid.common';\nimport { IgxGridTransaction } from './grid-base.component';\nimport { IgxRowComponent } from './row.component';\nimport { IgxChipsModule } from '../chips/chips.module';\nimport { IgxDragDropModule } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxButtonGroupModule } from '../buttonGroup/buttonGroup.component';\nimport { IgxColumnPinningModule } from './column-pinning.component';\nimport { IgxBaseTransactionService } from '../services/transaction/base-transaction';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditActionsDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditTabStopDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { IgxSummaryCellComponent } from './summaries/summary-cell.component';\nimport { IgxSummaryDataPipe } from './summaries/grid-root-summary.pipe';\nimport { IgxGridSelectionService } from '../core/grid-selection';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxProgressBarModule } from '../progressbar/progressbar.component';\nimport { IgxFilterModule } from '../directives/filter/filter.directive';\nimport { IgxGridPipesModule } from './grid-pipes.module';\nimport { IgxGridExcelStyleFilteringModule } from './filtering/excel-style/grid.excel-style-filtering.module';\nimport { IgxGridDragSelectDirective } from './drag-select.directive';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\nimport { IgxRowDragModule } from './row-drag.directive';\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxGridHeaderComponent,\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxResizeHandleDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridBodyDirective,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxSummaryDataPipe,\n        IgxRowComponent,\n        IgxGridHeaderGroupComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryCellComponent,\n        IgxGridDragSelectDirective,\n        IgxGridColumnResizerComponent,\n        IgxFilterCellTemplateDirective\n    ],\n    entryComponents: [\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent\n    ],\n    exports: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxGridHeaderComponent,\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridBodyDirective,\n        IgxRowComponent,\n        IgxSummaryDataPipe,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxProgressBarModule,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxGridHeaderGroupComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryCellComponent,\n        IgxGridDragSelectDirective,\n        IgxGridColumnResizerComponent,\n        IgxFilterModule,\n        IgxGridPipesModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxFilterCellTemplateDirective,\n        IgxRowDragModule\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxProgressBarModule,\n        IgxFilterModule,\n        IgxGridPipesModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxRowDragModule\n    ],\n    providers: [\n        IgxGridSelectionService,\n        IgxSelectionAPIService,\n        IgxColumnMovingService,\n        IgxGridNavigationService,\n        IgxColumnResizingService,\n        IgxGridSummaryService,\n        { provide: IgxGridTransaction, useClass: IgxBaseTransactionService }\n    ]\n})\nexport class IgxGridCommonModule { }\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\n\nexport class IgxGridAPIService extends GridBaseAPIService<IgxGridComponent> {\n\n    public groupBy(expression: IGroupingExpression): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState, groupingState], expression);\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public groupBy_multiple(expressions: IGroupingExpression[]): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            this.prepare_sorting_expression([sortingState, groupingState], each);\n        }\n\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        if (name) {\n            const names = typeof name === 'string' ? [ name ] : name;\n            const groupedCols = groupingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            const newSortingExpr = sortingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            this.grid.groupingExpressions = groupedCols;\n            this.grid.sortingExpressions = newSortingExpr;\n            names.forEach((colName) => {\n                const grExprIndex = groupingState.findIndex((exp) => exp.fieldName === colName);\n                const grpExpandState = this.grid.groupingExpansionState;\n                /* remove expansion states related to the cleared group\n                and all with deeper hierarchy than the cleared group */\n                this.grid.groupingExpansionState = grpExpandState\n                    .filter((val) => {\n                        return val.hierarchy && val.hierarchy.length <= grExprIndex;\n                    });\n            });\n        } else {\n            // clear all\n            this.grid.groupingExpressions = [];\n            this.grid.groupingExpansionState = [];\n            for (const grExpr of groupingState) {\n                const sortExprIndex = sortingState.findIndex((exp) => exp.fieldName === grExpr.fieldName);\n                if (sortExprIndex > -1) {\n                    sortingState.splice(sortExprIndex, 1);\n                }\n            }\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    public groupBy_get_expanded_for_group(groupRow: IGroupByRecord): IGroupByExpandState {\n        const grState = this.grid.groupingExpansionState;\n        const hierarchy = DataUtil.getHierarchy(groupRow);\n        return grState.find((state) =>\n            DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n    }\n\n    public groupBy_is_row_in_group(groupRow: IGroupByRecord, rowID): boolean {\n        const grid = this.grid;\n        let rowInGroup = false;\n        groupRow.records.forEach(row => {\n            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {\n                rowInGroup = true;\n            }\n        });\n        return rowInGroup;\n    }\n\n    public groupBy_toggle_group(groupRow: IGroupByRecord) {\n        const grid = this.grid;\n        const expansionState = grid.groupingExpansionState;\n        let toggleRowEditingOverlay: boolean;\n        let isEditRowInGroup = false;\n        if (grid.rowEditable) {\n            const rowState = this.grid.crudService.row;\n\n            // Toggle only row editing overlays that are inside current expanded/collapsed group.\n            isEditRowInGroup = rowState ? this.groupBy_is_row_in_group(groupRow, rowState.id) : false;\n        }\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        if (state) {\n            state.expanded = !state.expanded;\n            if (isEditRowInGroup) {\n                toggleRowEditingOverlay = state.expanded;\n            }\n        } else {\n            expansionState.push({\n                expanded: !grid.groupsExpanded,\n                hierarchy: DataUtil.getHierarchy(groupRow)\n            });\n            if (isEditRowInGroup) {\n                toggleRowEditingOverlay = false;\n            }\n        }\n        this.grid.groupingExpansionState = expansionState;\n        if (grid.rowEditable) {\n            grid.repositionRowEditingOverlay(grid.rowInEditMode);\n        }\n    }\n\n    protected remove_grouping_expression(fieldName) {\n        const groupingExpressions = this.grid.groupingExpressions;\n        const index = groupingExpressions.findIndex((expr) => expr.fieldName === fieldName);\n        if (index !== -1) {\n            groupingExpressions.splice(index, 1);\n        }\n    }\n\n    public arrange_sorting_expressions() {\n        const groupingState = this.grid.groupingExpressions;\n        this.grid.sortingExpressions.sort((a, b) => {\n            const groupExprA = groupingState.find((expr) => expr.fieldName === a.fieldName);\n            const groupExprB = groupingState.find((expr) => expr.fieldName === b.fieldName);\n            if (groupExprA && groupExprB) {\n                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;\n            } else if (groupExprA) {\n                return -1;\n            } else if (groupExprB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n    public get_groupBy_record_id(gRow: IGroupByRecord): string {\n        let recordId = '{ ';\n        const hierrarchy = DataUtil.getHierarchy(gRow);\n\n        for (let i = 0; i < hierrarchy.length; i++) {\n            const groupByKey = hierrarchy[i];\n            recordId += `'${groupByKey.fieldName}': '${groupByKey.value}'`;\n\n            if (i < hierrarchy.length - 1) {\n                recordId += ', ';\n            }\n        }\n        recordId += ' }';\n\n        return recordId;\n    }\n\n}\n","import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';\nimport { IgxDropDirective } from '../../directives/dragdrop/dragdrop.directive';\nimport { IgxColumnMovingDragDirective } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxGridComponent } from './grid.component';\nimport { SortingDirection } from '../../data-operations/sorting-expression.interface';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupByRow]'\n})\nexport class IgxGroupByRowTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupAreaDrop]'\n})\nexport class IgxGroupAreaDropDirective extends IgxDropDirective {\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone) {\n        super(elementRef, renderer, zone);\n    }\n\n    @HostBinding('class.igx-drop-area--hover')\n    public hovered = false;\n\n\n    public onDragEnter(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        const grid = <IgxGridComponent>column.grid;\n        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n        if (column.groupable && !isGrouped && !column.columnGroup) {\n            drag.icon.innerText = 'group_work';\n            this.hovered = true;\n        } else {\n            drag.icon.innerText = 'block';\n            this.hovered = false;\n        }\n    }\n\n    public onDragLeave(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        event.detail.owner.icon.innerText = 'block';\n        this.hovered = false;\n    }\n\n    public onDragDrop(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        if (drag instanceof IgxColumnMovingDragDirective) {\n            const column: IgxColumnComponent = drag.column;\n            if (!this.columnBelongsToGrid(column)) {\n                return;\n            }\n            const grid = <IgxGridComponent>column.grid;\n            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n            if (column.groupable && !isGrouped && !column.columnGroup) {\n                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,\n                    strategy: column.sortStrategy, groupingComparer: column.groupingComparer });\n            }\n        }\n    }\n\n    private closestParentByAttr(elem, attr) {\n        return elem.hasAttribute(attr) ?\n            elem :\n            this.closestParentByAttr(elem.parentElement, attr);\n    }\n\n    private columnBelongsToGrid(column) {\n        const elem = this.elementRef.nativeElement;\n        const closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');\n        if (!column) {\n            return false;\n        } else {\n            const grid = <IgxGridComponent>column.grid;\n            if (!grid || grid.id !== closestGridID) {\n                return false;\n            }\n            return true;\n        }\n    }\n}\n","import {\n    Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ContentChild, ViewChildren,\n    QueryList, ViewChild, ElementRef, TemplateRef, DoCheck, NgZone, ChangeDetectorRef, ComponentFactoryResolver,\n    IterableDiffers, ViewContainerRef, Inject, AfterContentInit, HostBinding, forwardRef, OnInit, Optional\n} from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IgxGridTransaction, IFocusChangeEventArgs, IGridDataBindable, FilterMode } from '../grid-base.component';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { cloneArray } from '../../core/utils';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IgxGroupByRowTemplateDirective } from './grid.directives';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../../chips/chips-area.component';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { TransactionService, Transaction, State } from '../../services/transaction/transaction';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxColumnComponent } from '../column.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\n\nlet NEXT_ID = 0;\n\nexport interface IGridFocusChangeEventArgs extends IFocusChangeEventArgs {\n    groupRow: IgxGridGroupByRowComponent;\n}\nexport interface IGroupingDoneEventArgs {\n    expressions: Array<ISortingExpression> | ISortingExpression;\n    groupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n    ungroupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n}\n\n/**\n * **Ignite UI for Angular Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Grid is used for presenting and manipulating tabular data in the simplest way possible.  Once data\n * has been bound, it can be manipulated through filtering, sorting & editing operations.\n *\n * Example:\n * ```html\n * <igx-grid [data]=\"employeeData\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    providers: [IgxGridNavigationService, IgxGridSummaryService, IgxGridSelectionService, IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxGridComponent) },\n        IgxFilteringService, IgxColumnResizingService, IgxForOfSyncService\n    ],\n    selector: 'igx-grid',\n    templateUrl: './grid.component.html'\n})\nexport class IgxGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit, DoCheck, AfterContentInit {\n    private _id = `igx-grid-${NEXT_ID++}`;\n    /**\n     * @hidden\n     */\n    protected _groupingExpressions: IGroupingExpression[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupingExpandState: IGroupByExpandState[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupRowTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _groupAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected groupingDiffer;\n    private _data;\n    private _hideGroupedColumns = false;\n    private _dropAreaMessage = null;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxGridComponent` with an array of data.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n    */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value;\n        if (this._ngAfterViewInitPassed &&\n            this.calcHeight === null &&\n            this.isPercentHeight) {\n            /* the body should be auto-sized in this case before igxFor renders the whole data */\n            const bodyHeight = this.defaultTargetBodyHeight;\n            this.calcHeight = bodyHeight > 0 ? bodyHeight : null;\n        }\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n    }\n\n    private _gridAPI: IgxGridAPIService;\n    private _filteredData = null;\n\n    constructor(\n        selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) _transactions: TransactionService<Transaction, State>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(selectionService,\n                  crudService, gridAPI, selection, _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation,\n                  filteringService, overlayService, summaryService, _displayDensityOptions);\n            this._gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    /**\n     * Returns the group by state of the `IgxGridComponent`.\n     * ```typescript\n     * let groupByState = this.grid.groupingExpressions;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpressions(): IGroupingExpression[] {\n        return this._groupingExpressions;\n    }\n\n    /**\n     * Sets the group by state of the `IgxGridComponent` and emits the `onGroupingDone`\n     * event with the appropriate arguments.\n     * ```typescript\n     * this.grid.groupingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Asc,\n     *     ignoreCase: false\n     * }];\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpressions(value: IGroupingExpression[]) {\n        if (value && value.length > 10) {\n            throw Error('Maximum amount of grouped columns is 10.');\n        }\n        const oldExpressions: IGroupingExpression[] = this.groupingExpressions;\n        const newExpressions: IGroupingExpression[] = value;\n        this._groupingExpressions = cloneArray(value);\n        this.chipsGoupingExpressions = cloneArray(value);\n        if (this._gridAPI.grid) {\n            /* grouping should work in conjunction with sorting\n            and without overriding separate sorting expressions */\n            this._applyGrouping();\n            this._gridAPI.arrange_sorting_expressions();\n            this.cdr.markForCheck();\n        } else {\n            // setter called before grid is registered in grid API service\n            this.sortingExpressions.unshift.apply(this.sortingExpressions, this._groupingExpressions);\n        }\n        if (JSON.stringify(oldExpressions) !== JSON.stringify(newExpressions) && this.columnList) {\n            const groupedCols: IgxColumnComponent[] = [];\n            const ungroupedCols: IgxColumnComponent[] = [];\n            const groupedColsArr = newExpressions.filter((obj) => {\n                return !oldExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            groupedColsArr.forEach((elem) => {\n                groupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            const ungroupedColsArr = oldExpressions.filter((obj) => {\n                return !newExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            ungroupedColsArr.forEach((elem) => {\n                ungroupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            this.cdr.detectChanges();\n            const groupingDoneArgs: IGroupingDoneEventArgs = {\n                expressions: newExpressions,\n                groupedColumns: groupedCols,\n                ungroupedColumns: ungroupedCols\n            };\n            this.onGroupingDone.emit(groupingDoneArgs);\n        }\n    }\n\n    /**\n     * Returns a list of expansion states for group rows.\n     * Includes only states that differ from the default one (controlled through groupsExpanded and states that the user has changed.\n     * Contains the expansion state (expanded: boolean) and the unique identifier for the group row (Array).\n     * ```typescript\n     * const groupExpState = this.grid.groupingExpansionState;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpansionState() {\n        return this._groupingExpandState;\n    }\n\n    /**\n     * Sets a list of expansion states for group rows.\n     * ```typescript\n     *      this.grid.groupingExpansionState = [{\n     *      expanded: false,\n     *      hierarchy: [{ fieldName: 'ID', value: 1 }]\n     *   }];\n     * // You can use DataUtil.getHierarchy(groupRow) to get the group `IgxGridRowComponent` hierarchy.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpansionState(value) {\n        this._groupingExpandState = cloneArray(value);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * An @Input property that determines whether created groups are rendered expanded or collapsed.\n     * The default rendered state is expanded.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [groupsExpanded]=\"false\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public groupsExpanded = true;\n\n    /**\n     * A hierarchical representation of the group by records.\n     * ```typescript\n     * let groupRecords = this.grid.groupsRecords;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupsRecords: IGroupByRecord[] = [];\n\n    /**\n     * An @Input property that sets whether the grouped columns should be hidden as well.\n     * The default value is \"false\"\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [hideGroupedColumns]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public get hideGroupedColumns() {\n        return this._hideGroupedColumns;\n    }\n\n    public set hideGroupedColumns(value: boolean) {\n        if (value) {\n            this.groupingDiffer = this.differs.find(this.groupingExpressions).create();\n        } else {\n            this.groupingDiffer = null;\n        }\n        if (this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(value);\n        }\n\n        this._hideGroupedColumns = value;\n    }\n\n    /**\n     * An @Input property that sets the message displayed inside the GroupBy drop area where columns can be dragged on.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid dropAreaMessage=\"Drop here to group!\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    set dropAreaMessage(value: string) {\n        this._dropAreaMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed inside the GroupBy drop area where columns can be dragged on.\n    */\n    get dropAreaMessage(): string {\n        return this._dropAreaMessage || this.resourceStrings.igx_grid_groupByArea_message;\n    }\n\n    /**\n     * An @Input property that sets the template that will be rendered as a GroupBy drop area.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid [dropAreaTemplate]=\"dropAreaRef\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     *\n     * <ng-template #myDropArea>\n     *      <span> Custom drop area! </span>\n     * </ng-template>\n     * ```\n     * ```ts\n     * @ViewChild('myDropArea', { read: TemplateRef })\n     * public dropAreaRef: TemplateRef<any>;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public dropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * Emitted when a new `IgxColumnComponent` gets grouped/ungrouped, or multiple columns get\n     * grouped/ungrouped at once by using the Group By API.\n     * The `onGroupingDone` event would be raised only once if several columns get grouped at once by calling\n     * the `groupBy()` or `clearGrouping()` API methods and passing an array as an argument.\n     * The event arguments provide the `expressions`, `groupedColumns` and `ungroupedColumns` properties, which contain\n     * the `ISortingExpression` and the `IgxColumnComponent` related to the grouping/ungrouping operation.\n     * Please note that `groupedColumns` and `ungroupedColumns` show only the **newly** changed columns (affected by the **last**\n     * grouping/ungrouping operation), not all columns which are currently grouped/ungrouped.\n     * columns.\n     * ```typescript\n     * groupingDone(event: IGroupingDoneEventArgs){\n     *     const expressions = event.expressions;\n     *     //the newly grouped columns\n     *     const groupedColumns = event.groupedColumns;\n     *     //the newly ungrouped columns\n     *     const ungroupedColumns = event.ungroupedColumns;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onGroupingDone)=\"groupingDone($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onGroupingDone = new EventEmitter<IGroupingDoneEventArgs>();\n\n    @Output()\n    public onFocusChange = new EventEmitter<IGridFocusChangeEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxGroupByRowTemplateDirective, { read: IgxGroupByRowTemplateDirective })\n    protected groupTemplate: IgxGroupByRowTemplateDirective;\n\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.dragIndicatorIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-grid #grid>\n     *      ...\n     *      <ng-template igxDragIndicatorIcon>\n     *          <igx-icon fontSet=\"material\">info</igx-icon>\n     *      </ng-template>\n     *  </igx-grid>\n     * ```\n     */\n    @ContentChild(IgxDragIndicatorIconDirective, { read: TemplateRef })\n    public dragIndicatorIconTemplate: TemplateRef<any> = null;\n\n    @ViewChildren(IgxGridGroupByRowComponent, { read: IgxGridGroupByRowComponent })\n    private _groupsRowList: QueryList<IgxGridGroupByRowComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultDropArea', { read: TemplateRef })\n    public defaultDropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * A list of all group rows.\n     * ```typescript\n     * const groupList = this.grid.groupsRowList;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get groupsRowList() {\n        const res = new QueryList<any>();\n        if (!this._groupsRowList) {\n            return res;\n        }\n        const rList = this._groupsRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('groupArea')\n    public groupArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    get groupAreaHostClass(): string {\n        return this.getComponentDensityClass('igx-drop-area');\n    }\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group row.\n     * ```\n     * const groupRowTemplate = this.grid.groupRowTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupRowTemplate(): TemplateRef<any> {\n        return this._groupRowTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group `IgxGridRowComponent`.\n     * ```typescript\n     * this.grid.groupRowTemplate = myRowTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupRowTemplate(template: TemplateRef<any>) {\n        this._groupRowTemplate = template;\n        this.markForCheck();\n    }\n\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * const groupAreaTemplate = this.grid.groupAreaTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupAreaTemplate(): TemplateRef<any> {\n        return this._groupAreaTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * this.grid.groupAreaTemplate = myAreaTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupAreaTemplate(template: TemplateRef<any>) {\n        this._groupAreaTemplate = template;\n        this.markForCheck();\n    }\n\n    /**\n     * Groups by a new `IgxColumnComponent` based on the provided expression, or modifies an existing one.\n     * Also allows for multiple columns to be grouped at once if an array of `ISortingExpression` is passed.\n     * The onGroupingDone event would get raised only **once** if this method gets called multiple times with the same arguments.\n     * ```typescript\n     * this.grid.groupBy({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * this.grid.groupBy([\n            { fieldName: name1, dir: SortingDirection.Asc, ignoreCase: false },\n            { fieldName: name2, dir: SortingDirection.Desc, ignoreCase: true },\n            { fieldName: name3, dir: SortingDirection.Desc, ignoreCase: false }\n        ]);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupBy(expression: IGroupingExpression | Array<IGroupingExpression>): void {\n        this.endEdit(true);\n        this._gridAPI.submit_value();\n        if (expression instanceof Array) {\n            this._gridAPI.groupBy_multiple(expression);\n        } else {\n            this._gridAPI.groupBy(expression);\n        }\n        this.cdr.detectChanges();\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Clears all grouping in the grid, if no parameter is passed.\n     * If a parameter is provided, clears grouping for a particular column or an array of columns.\n     * ```typescript\n     * this.grid.clearGrouping(); //clears all grouping\n     * this.grid.clearGrouping(\"ID\"); //ungroups a single column\n     * this.grid.clearGrouping([\"ID\", \"Column1\", \"Column2\"]); //ungroups multiple columns\n     * ```\n     *\n     */\n    public clearGrouping(name?: string | Array<string>): void {\n        this._gridAPI.clear_groupby(name);\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Returns if a group is expanded or not.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const expandedGroup = this.grid.isExpandedGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public isExpandedGroup(group: IGroupByRecord): boolean {\n        const state: IGroupByExpandState = this._getStateForGroupRow(group);\n        return state ? state.expanded : this.groupsExpanded;\n    }\n\n    /**\n     * Toggles the expansion state of a group.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const toggleExpGroup = this.grid.toggleGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleGroup(groupRow: IGroupByRecord) {\n        this._toggleGroup(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    public isGroupByRecord(record: any): boolean {\n        // return record.records instance of GroupedRecords fails under Webpack\n        return record.records && record.records.length;\n    }\n\n    /**\n     * Toggles the expansion state of all group rows recursively.\n     * ```typescript\n     * this.grid.toggleAllGroupRows;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleAllGroupRows() {\n        this.groupingExpansionState = [];\n        this.groupsExpanded = !this.groupsExpanded;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has groupable columns.\n     * ```typescript\n     * const groupableGrid = this.grid.hasGroupableColumns;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get hasGroupableColumns(): boolean {\n        return this.columnList.some((col) => col.groupable && !col.columnGroup);\n    }\n\n    private _setGroupColsVisibility(value) {\n        this.groupingExpressions.forEach((expr) => {\n            const col = this.getColumnByName(expr.fieldName);\n            col.hidden = value;\n        });\n    }\n\n    /**\n     * Returns if the grid's group by drop area is visible.\n     * ```typescript\n     * const dropVisible = this.grid.dropAreaVisible;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get dropAreaVisible(): boolean {\n        return (this.draggedColumn && this.draggedColumn.groupable) ||\n            !this.chipsGoupingExpressions.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _getStateForGroupRow(groupRow: IGroupByRecord): IGroupByExpandState {\n        return this._gridAPI.groupBy_get_expanded_for_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _toggleGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_toggle_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _applyGrouping() {\n        this._gridAPI.sort_multiple(this._groupingExpressions);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return this.groupingExpressions.find(exp => exp.fieldName === fieldName) ? true : false;\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData, rowIndex): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isGroupByRecord(rowData) ? 'groupRow' : this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupByRecords(): IGroupByRecord[] {\n        if (this.groupingExpressions && this.groupingExpressions.length) {\n            const state = {\n                expressions: this.groupingExpressions,\n                expansion: this.groupingExpansionState,\n                defaultExpanded: this.groupsExpanded\n            };\n\n            return DataUtil.group(cloneArray(this.filteredSortedData), state, this).metadata;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipRemoved(event: IBaseChipEventArgs) {\n        this.clearGrouping(event.owner.id);\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsOrderChanged(event: IChipsAreaReorderEventArgs) {\n        const newGrouping = [];\n        for (let i = 0; i < event.chipsArray.length; i++) {\n            const expr = this.groupingExpressions.filter((item) => {\n                return item.fieldName === event.chipsArray[i].id;\n            })[0];\n\n            if (!this.getColumnByName(expr.fieldName).groupable) {\n                // disallow changing order if there are columns with groupable: false\n                return;\n            }\n            newGrouping.push(expr);\n        }\n        this.groupingExpansionState = [];\n        this.chipsGoupingExpressions = newGrouping;\n\n        if (event.originalEvent instanceof KeyboardEvent) {\n            // When reordered using keyboard navigation, we don't have `onMoveEnd` event.\n            this.groupingExpressions = this.chipsGoupingExpressions;\n        }\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsMovingEnded() {\n        this.groupingExpressions = this.chipsGoupingExpressions;\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipClicked(event: IChipClickEventArgs) {\n        const sortingExpr = this.sortingExpressions;\n        const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n        columnExpr.dir = 3 - columnExpr.dir;\n        this.sort(columnExpr);\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: IChipKeyDownEventArgs) {\n        if (event.originalEvent.key === ' ' || event.originalEvent.key === 'Spacebar' || event.originalEvent.key === 'Enter') {\n            const sortingExpr = this.sortingExpressions;\n            const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n            columnExpr.dir = 3 - columnExpr.dir;\n            this.sort(columnExpr);\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return this.groupArea ? this.groupArea.nativeElement.offsetHeight : 0;\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = super.getFeatureColumnsWidth();\n\n        if (this.groupingExpressions.length && this.headerGroupContainer) {\n            width += this.headerGroupContainer.nativeElement.offsetWidth;\n        }\n\n        return width;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        if (this.groupingExpressions && this.groupingExpressions.length\n            && typeof(row) !== 'number') {\n            const groupByRecords = this.getGroupByRecords();\n            const rowIndex = this.filteredSortedData.indexOf(row);\n            const groupByRecord = groupByRecords[rowIndex];\n\n            if (groupByRecord && !this.isExpandedGroup(groupByRecord)) {\n                this.toggleGroup(groupByRecord);\n            }\n        }\n\n        super.scrollTo(row, column);\n    }\n\n    /**\n    * @hidden\n    */\n    public get dropAreaTemplateResolved(): TemplateRef<any> {\n        if (this.dropAreaTemplate) {\n            return this.dropAreaTemplate;\n        } else {\n            return this.defaultDropAreaTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getGroupByChipTitle(expression: IGroupingExpression): string {\n        return this.getColumnByName(expression.fieldName).header || expression.fieldName;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.allowFiltering && this.hasColumnLayouts) {\n            this.filterMode = FilterMode.excelStyleFilter;\n        }\n        if (this.groupTemplate) {\n            this._groupRowTemplate = this.groupTemplate.template;\n        }\n        super.ngAfterContentInit();\n\n        if (this.hideGroupedColumns && this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(this.hideGroupedColumns);\n        }\n    }\n\n    public ngOnInit() {\n        super.ngOnInit();\n        this.onGroupingDone.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.endEdit(true);\n            this.summaryService.updateSummaryCache(args);\n        });\n    }\n\n    public ngDoCheck(): void {\n        super.ngDoCheck();\n        if (this.groupingDiffer) {\n            const changes = this.groupingDiffer.diff(this.groupingExpressions);\n            if (changes && this.columnList) {\n                changes.forEachAddedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = true;\n                });\n                changes.forEachRemovedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = false;\n                });\n            }\n        }\n    }\n\n    getSelectedData(): any[] {\n        if (this.groupingExpressions.length) {\n            const source = [];\n\n            const process = (record) => {\n                if (record.expression || record.summaries) {\n                    source.push(null);\n                    return;\n                }\n                source.push(record);\n\n            };\n\n            this.verticalScrollContainer.igxForOf.forEach(process);\n            return this.extractDataFromSelection(source);\n        } else {\n            return super.getSelectedData();\n        }\n    }\n}\n","import { Component, forwardRef, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, HostBinding } from '@angular/core';\nimport { IgxGridComponent } from './grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-row',\n    templateUrl: './grid-row.component.html',\n    providers: [{provide: IgxRowComponent, useExisting: forwardRef(() => IgxGridRowComponent)}]\n})\nexport class IgxGridRowComponent extends IgxRowComponent<IgxGridComponent> {\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n            super(gridAPI, crudService, selectionService, selection, element, cdr);\n        }\n\n        @HostBinding('class.igx-grid__tr--mrl')\n        get hasColumnLayouts(): boolean {\n            return this.grid.hasColumnLayouts;\n        }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, GridSummaryPosition, GridSummaryCalculationMode, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridComponent } from './grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\n\n/** @hidden */\n@Pipe({\n    name: 'gridSummary',\n    pure: true\n})\nexport class IgxGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(flatData: any[],\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n\n        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return flatData;\n        }\n\n        return this.addSummaryRows(id, flatData, summaryPosition);\n    }\n\n    private addSummaryRows(gridId: string, collection: any[], summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const lastChildMap = new Map<any, IGroupByRecord[]>();\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            recordsWithSummary.push(record);\n\n            let recordId;\n            let groupByRecord: IGroupByRecord = null;\n\n            if (grid.isGroupByRecord(record)) {\n                groupByRecord = record as IGroupByRecord;\n                recordId = this.gridAPI.get_groupBy_record_id(groupByRecord);\n            } else {\n                recordId = this.gridAPI.get_row_id(record);\n            }\n\n            if (summaryPosition === GridSummaryPosition.bottom && lastChildMap.has(recordId)) {\n                const groupRecords = lastChildMap.get(recordId);\n\n                for (let j = 0; j < groupRecords.length; j++) {\n                    const groupRecord = groupRecords[j];\n                    const groupRecordId = this.gridAPI.get_groupBy_record_id(groupRecord);\n                    const records = this.removeDeletedRecord(grid, groupRecord.records.slice());\n                    const summaries = grid.summaryService.calculateSummaries(groupRecordId, records);\n                    const summaryRecord: ISummaryRecord = {\n                        summaries: summaries,\n                        max: maxSummaryHeight\n                    };\n                    recordsWithSummary.push(summaryRecord);\n                }\n            }\n\n            if (groupByRecord === null || !grid.isExpandedGroup(groupByRecord)) {\n                continue;\n            }\n\n            if (summaryPosition === GridSummaryPosition.top) {\n                const records = this.removeDeletedRecord(grid, groupByRecord.records.slice());\n                const summaries = grid.summaryService.calculateSummaries(recordId, records);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max:  maxSummaryHeight\n                };\n                recordsWithSummary.push(summaryRecord);\n            } else if (summaryPosition === GridSummaryPosition.bottom) {\n                let lastChild = groupByRecord;\n\n                while (lastChild.groups && lastChild.groups.length > 0 && grid.isExpandedGroup(lastChild)) {\n                    lastChild = lastChild.groups[lastChild.groups.length - 1];\n                }\n\n                let lastChildId;\n                if (grid.isExpandedGroup(lastChild)) {\n                    lastChildId = this.gridAPI.get_row_id(lastChild.records[lastChild.records.length - 1]);\n                } else {\n                    lastChildId = this.gridAPI.get_groupBy_record_id(lastChild);\n                }\n\n                let groupRecords = lastChildMap.get(lastChildId);\n                if (!groupRecords) {\n                    groupRecords = [];\n                    lastChildMap.set(lastChildId, groupRecords);\n                }\n                groupRecords.unshift(groupByRecord);\n            }\n    }\n\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, data) {\n        if (!grid.transactions.enabled) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n    IgxGroupAreaDropDirective,\n    IgxGroupByRowTemplateDirective\n} from './grid.directives';\nimport { IgxGridComponent } from './grid.component';\nimport {\n    IgxGridPagingPipe,\n    IgxGridPostGroupingPipe,\n    IgxGridPreGroupingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe\n} from './grid.pipes';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IgxGridRowComponent } from './grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { DeprecateMethod } from '../../core/deprecateDecorators';\nimport { IgxGridSummaryPipe } from './grid.summary.pipe';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxGridComponent,\n    IgxGridRowComponent,\n    IgxGridGroupByRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridPreGroupingPipe,\n    IgxGridPostGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe\n  ],\n  exports: [\n    IgxGridComponent,\n    IgxGridGroupByRowComponent,\n    IgxGridRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridCommonModule,\n    IgxGridPreGroupingPipe,\n    IgxGridPostGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule\n  ]\n})\nexport class IgxGridModule {\n  @DeprecateMethod('IgxGridModule.forRoot method is deprecated. Use IgxGridModule instead.')\n  public static forRoot() {\n    return {\n        ngModule: IgxGridModule\n    };\n  }\n}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { IgxColumnComponent } from '../column.component';\nimport { HierarchicalTransaction, TransactionType, State } from '../../services';\nimport { mergeObjects } from '../../core/utils';\n\nexport class IgxTreeGridAPIService extends GridBaseAPIService<IgxTreeGridComponent> {\n    public get_all_data(transactions?: boolean): any[] {\n        const grid = this.grid;\n        const data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;\n        return data ? data : [];\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        const data = grid.processedRootRecords.filter(row => row.isFilteredOutParent === undefined || row.isFilteredOutParent === false)\n            .map(rec => rec.data);\n        if (grid.transactions.enabled) {\n            const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n            deletedRows.forEach(rowID => {\n                const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                const index = tempData.indexOf(rowID);\n                if (index !== -1) {\n                    data.splice(index, 1);\n                }\n            });\n        }\n        return data;\n    }\n\n    public expand_row(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, true);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public collapse_row(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, false);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public toggle_row_expansion(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        const treeRecord = grid.records.get(rowID);\n\n        if (treeRecord) {\n            const isExpanded = this.get_row_expansion_state(treeRecord);\n            expandedStates.set(rowID, !isExpanded);\n            grid.expansionStates = expandedStates;\n        }\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public trigger_row_expansion_toggle(row: ITreeGridRecord, expanded: boolean, event?: Event, visibleColumnIndex?) {\n        const grid = this.grid;\n\n        if (row.expanded === expanded ||\n            ((!row.children || !row.children.length) && (!grid.loadChildrenOnDemand ||\n            (grid.hasChildrenKey && !row.data[grid.hasChildrenKey])))) {\n            return;\n        }\n\n        const args: IRowToggleEventArgs = {\n            rowID: row.rowID,\n            expanded: expanded,\n            event: event,\n            cancel: false\n        };\n        grid.onRowToggle.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n        visibleColumnIndex = visibleColumnIndex ? visibleColumnIndex : 0;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(row.rowID, expanded);\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n\n        requestAnimationFrame(() => {\n            const el = this.grid.selectionService.activeElement;\n            if (el) {\n                const cell = this.get_cell_by_visible_index(el.row, el.column);\n                if (cell) {\n                    cell.nativeElement.focus();\n                }\n            }\n        });\n    }\n\n    public expand_path_to_record(record: ITreeGridRecord) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n\n        while (record.parent) {\n            record = record.parent;\n            const expanded = this.get_row_expansion_state(record);\n\n            if (!expanded) {\n                expandedStates.set(record.rowID, true);\n            }\n        }\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public get_row_expansion_state(record: ITreeGridRecord): boolean {\n        const grid = this.grid;\n        const states = grid.expansionStates;\n        const expanded = states.get(record.rowID);\n\n        if (expanded !== undefined) {\n            return expanded;\n        } else {\n            return record.children && record.children.length && record.level < grid.expansionDepth;\n        }\n    }\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        if (grid.primaryKey && grid.foreignKey) {\n            super.update_row_in_array(value, rowID, index);\n        } else {\n            const record = grid.records.get(rowID);\n            const childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;\n            index = grid.primaryKey ? childData.map(c => c[grid.primaryKey]).indexOf(rowID) :\n                childData.indexOf(rowID);\n            childData[index] = value;\n        }\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number && column.visibleIndex !== 0;\n    }\n\n    public deleteRowById(rowID: any) {\n        const treeGrid = this.grid;\n        const flatDataWithCascadeOnDeleteAndTransactions =\n        treeGrid.primaryKey &&\n        treeGrid.foreignKey &&\n        treeGrid.cascadeOnDelete &&\n        treeGrid.transactions.enabled;\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.startPending();\n        }\n\n        super.deleteRowById(rowID);\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.endPending(true);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        const treeGrid = this.grid;\n        const record = treeGrid.records.get(rowID);\n\n        if (treeGrid.primaryKey && treeGrid.foreignKey) {\n            index = treeGrid.primaryKey ?\n                treeGrid.data.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                treeGrid.data.indexOf(rowID);\n            super.deleteRowFromData(rowID, index);\n\n            if (treeGrid.cascadeOnDelete) {\n                if (record && record.children && record.children.length > 0) {\n                    for (let i = 0; i < record.children.length; i++) {\n                        const child = record.children[i];\n                        super.deleteRowById(child.rowID);\n                    }\n                }\n            }\n        } else {\n            const collection = record.parent ? record.parent.data[treeGrid.childDataKey] : treeGrid.data;\n            index = treeGrid.primaryKey ?\n                collection.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                collection.indexOf(rowID);\n\n            const selectedChildren = [];\n            this.get_selected_children(record, selectedChildren);\n            if (selectedChildren.length > 0) {\n                treeGrid.deselectRows(selectedChildren);\n            }\n\n            if (treeGrid.transactions.enabled) {\n                const path = treeGrid.generateRowPath(rowID);\n                treeGrid.transactions.add({\n                    id: rowID,\n                    type: TransactionType.DELETE,\n                    newValue: null,\n                    path: path\n                },\n                    collection[index]\n                );\n            } else {\n                collection.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(\n        grid: IgxTreeGridComponent,\n        rowID: any,\n        rowValueInDataSource: any,\n        rowCurrentValue: any,\n        rowNewValue: { [x: string]: any }) {\n        if (grid.transactions.enabled) {\n            const path = grid.generateRowPath(rowID);\n            const transaction: HierarchicalTransaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue,\n                path: path\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    public get_selected_children(record: ITreeGridRecord, selectedRowIDs: any[]) {\n        const grid = this.grid;\n        if (!record.children || record.children.length === 0) {\n            return;\n        }\n        for (const child of record.children) {\n            if (grid.selection.is_item_selected(grid.id, child.rowID)) {\n                selectedRowIDs.push(child.rowID);\n            }\n            this.get_selected_children(child, selectedRowIDs);\n        }\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        return this.row_deleted_parent(rowID) || super.row_deleted_transaction(rowID);\n    }\n\n    private row_deleted_parent(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if ((grid.cascadeOnDelete && grid.foreignKey) || grid.childDataKey) {\n            let node = grid.records.get(rowID);\n            while (node) {\n                const state: State = grid.transactions.getState(node.rowID);\n                if (state && state.type === TransactionType.DELETE) {\n                    return true;\n                }\n                node = node.parent;\n            }\n        }\n        return false;\n    }\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\n\nexport class IgxTreeGridNavigationService extends IgxGridNavigationService {\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        if (isSummary) {\n            return 'igx-grid-summary-cell';\n        }\n        if (visibleIndex === 0) {\n            return 'igx-tree-grid-cell';\n        }\n        return 'igx-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-tree-grid-row';\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowLoadingIndicator]'\n})\nexport class IgxRowLoadingIndicatorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ElementRef,\n    HostBinding,\n    Input,\n    IterableDiffers,\n    ViewContainerRef,\n    Output,\n    EventEmitter,\n    Inject,\n    NgZone,\n    forwardRef,\n    Optional,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    ContentChild,\n    AfterContentInit,\n    ViewChild\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IgxGridTransaction, IGridDataBindable } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { HierarchicalTransaction, HierarchicalState, TransactionType } from '../../services/transaction/transaction';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalTransactionService } from '../../services/index';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IgxTreeGridNavigationService } from './tree-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { mergeObjects } from '../../core/utils';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxColumnComponent } from '../column.component';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Tree Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Tree Grid displays and manipulates hierarchical data with consistent schema formatted as a table and\n * provides features such as sorting, filtering, editing, column pinning, paging, column moving and hiding.\n *\n * Example:\n * ```html\n * <igx-tree-grid [data]=\"employeeData\" primaryKey=\"employeeID\" foreignKey=\"PID\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-tree-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-tree-grid',\n    templateUrl: 'tree-grid.component.html',\n    providers: [\n        IgxGridSelectionService, IgxGridCRUDService, IgxTreeGridNavigationService, IgxGridSummaryService,\n        { provide: GridBaseAPIService, useClass: IgxTreeGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxTreeGridComponent) }, IgxFilteringService, IgxForOfSyncService]\n})\nexport class IgxTreeGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit, AfterContentInit {\n    private _id = `igx-tree-grid-${NEXT_ID++}`;\n    private _data;\n    private _rowLoadingIndicatorTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-tree-grid [id]=\"'igx-tree-grid-1'\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxTreeGridComponent` with an array of data.\n     * ```html\n     * <igx-tree-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value;\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n    }\n\n    /**\n     * Get transactions service for the grid.\n     * @experimental @hidden\n     */\n    get transactions(): IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState> {\n        return this._transactions;\n    }\n\n    /**\n    * @hidden\n    */\n    public flatData: any[];\n\n    /**\n    * @hidden\n    */\n    public processedExpandedFlatData: any[];\n\n    /**\n     * Returns an array of the root level `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the root record with index=2\n     * const states = this.grid.rootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public rootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the record with primaryKey=2\n     * const states = this.grid.records.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public records: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * Returns an array of processed (filtered and sorted) root `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed root record with index=2\n     * const states = this.grid.processedRootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all processed (filtered and sorted) `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed record with primaryKey=2\n     * const states = this.grid.processedRecords.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRecords: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * An @Input property that sets the child data key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public childDataKey;\n\n    /**\n     * An @Input property that sets the foreign key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [autoGenerate]=\"true\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public foreignKey;\n\n    /**\n     * An @Input property that sets the key indicating whether a row has children.\n     * This property is only used for load on demand scenarios.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [hasChildrenKey]=\"'hasEmployees'\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public hasChildrenKey;\n\n    /**\n     * An @Input property indicating whether child records should be deleted when their parent gets deleted.\n     * By default it is set to true and deletes all children along with the parent.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" cascadeOnDelete=\"false\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public cascadeOnDelete = true;\n\n    private _expansionDepth = Infinity;\n\n    /**\n     * An @Input property that sets the count of levels to be expanded in the `IgxTreeGridComponent`. By default it is\n     * set to `Infinity` which means all levels would be expanded.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" expansionDepth=\"1\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionDepth(): number {\n        return this._expansionDepth;\n    }\n\n    public set expansionDepth(value: number) {\n        this._expansionDepth = value;\n        this.cdr.markForCheck();\n    }\n\n    private _expansionStates: Map<any, boolean> = new Map<any, boolean>();\n\n    /**\n     * Returns a list of key-value pairs [row ID, expansion state]. Includes only states that differ from the default one.\n     * ```typescript\n     * const expansionStates = this.grid.expansionStates;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionStates() {\n        return this._expansionStates;\n    }\n\n    /**\n     * Sets a list of key-value pairs [row ID, expansion state].\n     * ```typescript\n     * const states = new Map<any, boolean>();\n     * states.set(1, true);\n     * this.grid.expansionStates = states;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public set expansionStates(value) {\n        this._expansionStates = this.cloneMap(value);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowLoadingIndicatorTemplateDirective, { read: IgxRowLoadingIndicatorTemplateDirective })\n    protected rowLoadingTemplate: IgxRowLoadingIndicatorTemplateDirective;\n\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.dragIndicatorIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-grid #grid>\n     *      ...\n     *      <ng-template igxDragIndicatorIcon>\n     *          <igx-icon fontSet=\"material\">info</igx-icon>\n     *      </ng-template>\n     *  </igx-grid>\n     * ```\n     */\n    @ContentChild(IgxDragIndicatorIconDirective, { read: TemplateRef })\n    public dragIndicatorIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * An @Input property that provides a template for the row loading indicator when load on demand is enabled.\n     * ```html\n     * <ng-template #rowLoadingTemplate>\n     *     <igx-icon fontSet=\"material\">loop</igx-icon>\n     * </ng-template>\n     *\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'ID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [rowLoadingIndicatorTemplate]=\"rowLoadingTemplate\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get rowLoadingIndicatorTemplate(): TemplateRef<any> {\n        return this._rowLoadingIndicatorTemplate;\n    }\n\n    public set rowLoadingIndicatorTemplate(value: TemplateRef<any>) {\n        this._rowLoadingIndicatorTemplate = value;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * An @Input property that provides a callback for loading child rows on demand.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [loadChildrenOnDemand]=\"loadChildren\">\n     * </igx-tree-grid>\n     * ```\n     * ```typescript\n     * public loadChildren = (parentID: any, done: (children: any[]) => void) => {\n     *     this.dataService.getData(parentID, children => done(children));\n     * }\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public loadChildrenOnDemand: (parentID: any, done: (children: any[]) => void) => void;\n\n    /**\n     * Emitted when the expanded state of a row gets changed.\n     * ```typescript\n     * rowToggle(event: IRowToggleEventArgs){\n     *  // the id of the row\n     *  const rowID = event.rowID;\n     *  // the new expansion state\n     *  const newExpandedState = event.expanded;\n     *  // the original event that triggered onRowToggle\n     *  const originalEvent = event.event;\n     *  // whether the event should be cancelled\n     *  event.cancel = true;\n     * }\n     * ```\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" (onRowToggle)=\"rowToggle($event)\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Output()\n    public onRowToggle = new EventEmitter<IRowToggleEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public loadingRows = new Set<any>();\n\n    private _gridAPI: IgxTreeGridAPIService;\n    private _filteredData = null;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    constructor(\n        selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) protected _transactions: IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxTreeGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(selectionService, crudService, gridAPI, selection,\n                _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation,\n                filteringService, overlayService, summaryService, _displayDensityOptions);\n        this._gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        this.onRowToggle.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.loadChildrenOnRowExpansion(args);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.rowLoadingTemplate) {\n            this._rowLoadingIndicatorTemplate = this.rowLoadingTemplate.template;\n        }\n        super.ngAfterContentInit();\n    }\n\n    private loadChildrenOnRowExpansion(args: IRowToggleEventArgs) {\n        if (this.loadChildrenOnDemand) {\n            const parentID = args.rowID;\n\n            if (args.expanded && !this._expansionStates.has(parentID)) {\n                this.loadingRows.add(parentID);\n\n                this.loadChildrenOnDemand(parentID, children => {\n                    this.loadingRows.delete(parentID);\n                    this.addChildRows(children, parentID);\n                    this.cdr.markForCheck();\n\n                    requestAnimationFrame(() => {\n                        const cellID = this.selection.first_item(`${this.id}-cell`);\n                        if (cellID) {\n                            const cell = this._gridAPI.get_cell_by_index(cellID.rowIndex, cellID.columnID);\n                            if (cell) {\n                                cell.nativeElement.focus();\n                            }\n                        }\n                    });\n                });\n            }\n        }\n    }\n\n    private addChildRows(children: any[], parentID: any) {\n        if (this.primaryKey && this.foreignKey) {\n            for (const child of children) {\n                child[this.foreignKey] = parentID;\n            }\n            this.data.push(...children);\n        } else if (this.childDataKey) {\n            let parent = this.records.get(parentID);\n            let parentData = parent.data;\n\n            if (this.transactions.enabled && this.transactions.getAggregatedChanges(true).length) {\n                const path = [];\n                while (parent) {\n                    path.push(parent.rowID);\n                    parent = parent.parent;\n                }\n\n                let collection = this.data;\n                let record: any;\n                for (let i = path.length - 1; i >= 0; i--) {\n                    const pid = path[i];\n                    record = collection.find(r => r[this.primaryKey] === pid);\n\n                    if (!record) {\n                        break;\n                    }\n                    collection = record[this.childDataKey];\n                }\n                if (record) {\n                    parentData = record;\n                }\n            }\n\n            parentData[this.childDataKey] = children;\n        }\n\n        this._pipeTrigger++;\n    }\n\n    private cloneMap(mapIn: Map<any, boolean>): Map<any, boolean> {\n        const mapCloned: Map<any, boolean> = new Map<any, boolean>();\n\n        mapIn.forEach((value: boolean, key: any, mapObj: Map<any, boolean>) => {\n\n            mapCloned.set(key, value);\n        });\n\n        return mapCloned;\n    }\n\n    /**\n     * Expands the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be expanded.\n     * ```typescript\n     * this.grid.expandRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandRow(rowID: any) {\n        this._gridAPI.expand_row(rowID);\n    }\n\n    /**\n     * Collapses the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be collapsed.\n     * ```typescript\n     * this.grid.collapseRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseRow(rowID: any) {\n        this._gridAPI.collapse_row(rowID);\n    }\n\n    /**\n     * Toggles the expansion state of the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be toggled.\n     * ```typescript\n     * this.grid.toggleRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public toggleRow(rowID: any) {\n        this._gridAPI.toggle_row_expansion(rowID);\n    }\n\n    /**\n     * Expands all rows.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandAll() {\n        this._expansionDepth = Infinity;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Collapses all rows.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseAll() {\n        this._expansionDepth = 0;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Creates a new `IgxTreeGridRowComponent` with the given data. If a parentRowID is not specified, the newly created\n     * row would be added at the root level. Otherwise, it would be added as a child of the row whose primaryKey matches\n     * the specified parentRowID. If the parentRowID does not exist, an error would be thrown.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid.addRow(record, 1); // Adds a new child row to the row with ID=1.\n     * ```\n     * @param data\n     * @param parentRowID\n     * @memberof IgxTreeGridComponent\n     */\n    public addRow(data: any, parentRowID?: any) {\n        if (parentRowID) {\n            const parentRecord = this.records.get(parentRowID);\n\n            if (!parentRecord) {\n                throw Error('Invalid parent row ID!');\n            }\n            this.summaryService.clearSummaryCache({rowID: parentRecord.rowID});\n            if (this.primaryKey && this.foreignKey) {\n                data[this.foreignKey] = parentRowID;\n                super.addRow(data);\n            } else {\n                const parentData = parentRecord.data;\n                const childKey = this.childDataKey;\n                if (this.transactions.enabled) {\n                    const rowId = this.primaryKey ? data[this.primaryKey] : data;\n                    const path: any[] = [];\n                    path.push(...this.generateRowPath(parentRowID));\n                    path.push(parentRowID);\n                    this.transactions.add({\n                        id: rowId,\n                        path: path,\n                        newValue: data,\n                        type: TransactionType.ADD\n                    } as HierarchicalTransaction,\n                        null);\n                } else {\n                    if (!parentData[childKey]) {\n                        parentData[childKey] = [];\n                    }\n                    parentData[childKey].push(data);\n                }\n                this.onRowAdded.emit({ data });\n                this._pipeTrigger++;\n                this.cdr.markForCheck();\n            }\n        } else {\n            if (this.primaryKey && this.foreignKey) {\n                const rowID = data[this.foreignKey];\n                this.summaryService.clearSummaryCache({rowID: rowID});\n            }\n            super.addRow(data);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        //  if this is flat self-referencing data, and CascadeOnDelete is set to true\n        //  and if we have transactions we should start pending transaction. This allows\n        //  us in case of delete action to delete all child rows as single undo action\n        this._gridAPI.deleteRowById(rowId);\n\n    }\n\n    /** @hidden */\n    public generateRowPath(rowId: any): any[] {\n        const path: any[] = [];\n        let record = this.records.get(rowId);\n\n        while (record.parent) {\n            path.push(record.parent.rowID);\n            record = record.parent;\n        }\n\n        return path.reverse();\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        let delayScrolling = false;\n        let record: ITreeGridRecord;\n\n        if (typeof(row) !== 'number') {\n            const rowData = row;\n            const rowID = this._gridAPI.get_row_id(rowData);\n            record = this.processedRecords.get(rowID);\n            this._gridAPI.expand_path_to_record(record);\n\n            if (this.paging) {\n                const rowIndex = this.processedExpandedFlatData.indexOf(rowData);\n                const page = Math.floor(rowIndex / this.perPage);\n\n                if (this.page !== page) {\n                    delayScrolling = true;\n                    this.page = page;\n                }\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof(row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(record));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof(row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(record));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData, rowIndex): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    getSelectedData(): any[] {\n        const source = [];\n\n        const process = (record) => {\n            if (record.summaries) {\n                source.push(null);\n                return;\n            }\n            source.push(record.data);\n        };\n\n        this.verticalScrollContainer.igxForOf.forEach(process);\n        return this.extractDataFromSelection(source);\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.flatData[rowIndex], value);\n    }\n\n    /**\n     * @hidden\n    */\n   protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - tree grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !(col.parent && col.parent.columnLayout));\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n}\n","import { Component, forwardRef, Input, ViewChildren, QueryList, HostBinding, ElementRef, ChangeDetectorRef, DoCheck } from '@angular/core';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    selector: 'igx-tree-grid-row',\n    templateUrl: 'tree-grid-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxTreeGridRowComponent) }]\n})\nexport class IgxTreeGridRowComponent extends IgxRowComponent<IgxTreeGridComponent> implements DoCheck {\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxTreeGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(gridAPI, crudService, selectionService, selection, element, cdr);\n    }\n    private _treeRow: ITreeGridRecord;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1);\n     * const cells = row.cells;\n     * ```\n     */\n    @ViewChildren('treeCell')\n    public cells: QueryList<any>;\n\n    /**\n     * The `ITreeGridRecord` passed to the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const treeRow = row.treeRow;\n     * ```\n     */\n    @Input()\n    public get treeRow(): ITreeGridRecord {\n        return this._treeRow;\n    }\n    public set treeRow(value: ITreeGridRecord) {\n        if (this._treeRow !== value) {\n            this._treeRow = value;\n            this.rowData = this._treeRow.data;\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const expanded = row.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this._treeRow.expanded;\n    }\n\n    /**\n     * Sets a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * row.expanded = true;\n     * ```\n     */\n    set expanded(value: boolean) {\n        (this.gridAPI as IgxTreeGridAPIService).trigger_row_expansion_toggle(this._treeRow, value);\n    }\n\n    /**\n     * @hidden\n     */\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     */\n    public get showIndicator() {\n        return this.grid.loadChildrenOnDemand ?\n            this.grid.expansionStates.has(this.rowID) ?\n                this.treeRow.children && this.treeRow.children.length :\n                this.grid.hasChildrenKey ?\n                    this.rowData[this.grid.hasChildrenKey] :\n                    true :\n            this.treeRow.children && this.treeRow.children.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const classes = super.resolveClasses();\n        const filteredClass = this.treeRow.isFilteredOutParent ? 'igx-grid__tr--filtered' : '';\n        return `${classes} ${filteredClass}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isLoading = this.grid.loadChildrenOnDemand ? this.grid.loadingRows.has(this.rowID) : false;\n        super.ngDoCheck();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray, cloneHierarchicalArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridHierarchizing',\n    pure: true\n})\nexport class IgxTreeGridHierarchizingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], primaryKey: string, foreignKey: string, childDataKey: string,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        let hierarchicalRecords: ITreeGridRecord[] = [];\n        const treeGridRecordsMap = new Map<any, ITreeGridRecord>();\n        const flatData: any[] = [];\n\n        if (primaryKey && foreignKey) {\n            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap, flatData);\n        } else if (childDataKey) {\n            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined,\n                flatData, 0, treeGridRecordsMap);\n        }\n\n        grid.flatData = flatData;\n        grid.records = treeGridRecordsMap;\n        grid.rootRecords = hierarchicalRecords;\n        return hierarchicalRecords;\n    }\n\n    private getRowID(primaryKey: any, rowData: any) {\n        return primaryKey ? rowData[primaryKey] : rowData;\n    }\n\n    private hierarchizeFlatData(id: string, collection: any[], primaryKey: string, foreignKey: string,\n        map: Map<any, ITreeGridRecord>, flatData: any[]):\n        ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n        const missingParentRecords: ITreeGridRecord[] = [];\n        collection.forEach(row => {\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, row),\n                data: row,\n                children: []\n            };\n            const parent = map.get(row[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                missingParentRecords.push(record);\n            }\n\n            map.set(row[primaryKey], record);\n        });\n\n        missingParentRecords.forEach(record => {\n            const parent = map.get(record.data[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                result.push(record);\n            }\n        });\n\n        this.setIndentationLevels(id, result, 0, flatData);\n\n        return result;\n    }\n\n    private setIndentationLevels(id: string, collection: ITreeGridRecord[], indentationLevel: number, flatData: any[]) {\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            record.level = indentationLevel;\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(record.data);\n\n            if (record.children && record.children.length > 0) {\n                this.setIndentationLevels(id, record.children, indentationLevel + 1, flatData);\n            }\n        }\n    }\n\n    private hierarchizeRecursive(id: string, collection: any[], primaryKey: string, childDataKey: string,\n        parent: ITreeGridRecord, flatData: any[], indentationLevel: number, map: Map<any, ITreeGridRecord>): ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n\n        for (let i = 0; i < collection.length; i++) {\n            const item = collection[i];\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, item),\n                data: item,\n                parent: parent,\n                level: indentationLevel\n            };\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(item);\n            map.set(record.rowID, record);\n            record.children = item[childDataKey] ?\n                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :\n                undefined;\n            result.push(record);\n        }\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridFlattening',\n    pure: true\n})\nexport class IgxTreeGridFlatteningPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], id: string,\n        expandedLevels: number, expandedStates: Map<any, boolean>, pipeTrigger: number): any[] {\n\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const data: ITreeGridRecord[] = [];\n\n        grid.processedRootRecords = collection;\n        grid.processedRecords = new Map<any, ITreeGridRecord>();\n\n        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);\n\n        grid.processedExpandedFlatData = data.map(r => r.data);\n\n        return data;\n    }\n\n    private getFlatDataRecursive(collection: ITreeGridRecord[], data: ITreeGridRecord[],\n        expandedLevels: number, expandedStates: Map<any, boolean>, gridID: string,\n        parentExpanded: boolean) {\n        if (!collection || !collection.length) {\n            return;\n        }\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        for (let i = 0; i < collection.length; i++) {\n            const hierarchicalRecord = collection[i];\n\n            if (parentExpanded) {\n                data.push(hierarchicalRecord);\n            }\n\n            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(hierarchicalRecord);\n\n            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);\n\n            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);\n\n            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels,\n                expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);\n        }\n    }\n\n    private updateNonProcessedRecordExpansion(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.expanded = record.expanded;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSorting',\n    pure: true\n})\nexport class IgxTreeGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(\n        hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        id: string,\n        pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n\n        let result: ITreeGridRecord[];\n        if (!expressions.length) {\n            result = hierarchicalData;\n        } else {\n            result = DataUtil.treeGridSort(hierarchicalData, expressions);\n        }\n        const filteredSortedData = [];\n        this.flattenTreeGridRecords(result, filteredSortedData);\n        grid.filteredSortedData = filteredSortedData;\n\n        return result;\n    }\n\n    private flattenTreeGridRecords(records: ITreeGridRecord[], flatData: any[]) {\n        if (records && records.length) {\n            for (const record of records) {\n                flatData.push(record.data);\n                this.flattenTreeGridRecords(record.children, flatData);\n            }\n        }\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridPaging',\n    pure: true\n})\nexport class IgxTreeGridPagingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], page = 0, perPage = 15, id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        if (!grid.paging) {\n            return collection;\n        }\n\n        const len = collection.length;\n        const totalPages = Math.ceil(len / perPage);\n\n        const state = {\n            index: (totalPages > 0 && page >= totalPages) ? totalPages - 1 : page,\n            recordsPerPage: perPage\n        };\n\n        const result: ITreeGridRecord[] = DataUtil.page(cloneArray(collection), state);\n        grid.pagingState = state;\n        (grid as any)._page = state.index;\n\n        return result;\n    }\n}\n/** @hidden */\n@Pipe({\n    name: 'treeGridTransaction',\n    pure: true\n})\nexport class IgxTreeGridTransactionPipe implements PipeTransform {\n\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    transform(collection: any[], id: string, pipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        if (collection && grid.transactions.enabled) {\n            const aggregatedChanges = grid.transactions.getAggregatedChanges(true);\n            if (aggregatedChanges.length > 0) {\n                const primaryKey = grid.primaryKey;\n                if (!primaryKey) {\n                    return collection;\n                }\n\n                const foreignKey = grid.foreignKey;\n                const childDataKey = grid.childDataKey;\n\n                if (foreignKey) {\n                    const flatDataClone = cloneArray(collection);\n                    return DataUtil.mergeTransactions(\n                        flatDataClone,\n                        aggregatedChanges,\n                        grid.primaryKey);\n                } else if (childDataKey) {\n                    const hierarchicalDataClone = cloneHierarchicalArray(collection, childDataKey);\n                    return DataUtil.mergeHierarchicalTransactions(\n                        hierarchicalDataClone,\n                        aggregatedChanges,\n                        childDataKey,\n                        grid.primaryKey);\n                }\n            }\n        }\n\n        return collection;\n    }\n}\n","import { Component, ChangeDetectorRef, ElementRef, ViewChild, Inject, ChangeDetectionStrategy, NgZone, OnInit, Input } from '@angular/core';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { getNodeSizeViaRange } from '../../core/utils';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-cell',\n    templateUrl: 'tree-cell.component.html'\n})\nexport class IgxTreeGridCellComponent extends IgxGridCellComponent implements OnInit {\n    private treeGridAPI: IgxTreeGridAPIService;\n\n    constructor(\n                selectionService: IgxGridSelectionService,\n                crudService: IgxGridCRUDService,\n                gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                selection: IgxSelectionAPIService,\n                cdr: ChangeDetectorRef,\n                element: ElementRef,\n                protected zone: NgZone,\n                @Inject(DOCUMENT) public document) {\n        super(selectionService, crudService, gridAPI, selection, cdr, element, zone);\n        this.treeGridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    expanded = false;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    level = 0;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    showIndicator = false;\n\n    @ViewChild('indicator', { read: ElementRef })\n    public indicator: ElementRef;\n\n    @ViewChild('indentationDiv', { read: ElementRef })\n    public indentationDiv: ElementRef;\n\n    @ViewChild('defaultContentElement', { read: ElementRef })\n    public defaultContentElement: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        super.ngOnInit();\n    }\n\n    /**\n     * @hidden\n     */\n    public toggle(event: Event) {\n        event.stopPropagation();\n        this.treeGridAPI.trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n    }\n\n    /**\n     * @hidden\n     */\n    public onIndicatorFocus() {\n        this.gridAPI.submit_value();\n        this.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    public onLoadingDblClick(event: Event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public calculateSizeToFit(range: any): number {\n        const indicatorWidth = this.indicator.nativeElement.getBoundingClientRect().width;\n        const indicatorStyle = this.document.defaultView.getComputedStyle(this.indicator.nativeElement);\n        const indicatorMargin = parseFloat(indicatorStyle.marginRight);\n        let leftPadding = 0;\n        if (this.indentationDiv) {\n            const indentationStyle = this.document.defaultView.getComputedStyle(this.indentationDiv.nativeElement);\n            leftPadding = parseFloat(indentationStyle.paddingLeft);\n        }\n        const largestWidth = Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n        return largestWidth + indicatorWidth + indicatorMargin + leftPadding;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, GridSummaryPosition, GridSummaryCalculationMode, IGridDataBindable } from '../grid-base.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSummary',\n    pure: true\n})\nexport class IgxTreeGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(flatData: ITreeGridRecord[],\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return flatData;\n        }\n\n        return this.addSummaryRows(grid, flatData, summaryPosition);\n    }\n\n    private addSummaryRows(grid: IgxTreeGridComponent, collection: ITreeGridRecord[], summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            recordsWithSummary.push(record);\n\n            const isExpanded = record.children && record.children.length > 0 && record.expanded;\n\n            if (summaryPosition === GridSummaryPosition.bottom && !isExpanded) {\n                let childRecord = record;\n                let parent = record.parent;\n\n                while (parent) {\n                    const children = parent.children;\n\n                    if (children[children.length - 1] === childRecord ) {\n                        let childData = children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                        childData = this.removeDeletedRecord(grid, parent.rowID, childData);\n                        const summaries = grid.summaryService.calculateSummaries(parent.rowID, childData);\n                        const summaryRecord: ISummaryRecord = {\n                            summaries: summaries,\n                            max: maxSummaryHeight,\n                            cellIndentation: parent.level + 1\n                        };\n                        recordsWithSummary.push(summaryRecord);\n\n                        childRecord = parent;\n                        parent = childRecord.parent;\n                    } else {\n                        break;\n                    }\n                }\n            } else if (summaryPosition === GridSummaryPosition.top && isExpanded) {\n                let childData = record.children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                childData = this.removeDeletedRecord(grid, record.rowID, childData);\n                const summaries = grid.summaryService.calculateSummaries(record.rowID, childData);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight,\n                    cellIndentation: record.level + 1\n                };\n                recordsWithSummary.push(summaryRecord);\n            }\n        }\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, rowId, data) {\n        if (!grid.transactions.enabled || !grid.cascadeOnDelete) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        let row = grid.records.get(rowId);\n        if (!row && deletedRows.lenght === 0) { return []; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowId = row.rowID;\n            if (deletedRows.indexOf(rowId) !== -1) {\n                return [];\n            }\n            row = row.parent;\n        }\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxTreeGridRowComponent } from './tree-grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxTreeGridHierarchizingPipe } from './tree-grid.pipes';\nimport { IgxTreeGridFlatteningPipe, IgxTreeGridSortingPipe, IgxTreeGridPagingPipe, IgxTreeGridTransactionPipe } from './tree-grid.pipes';\nimport { IgxTreeGridCellComponent } from './tree-cell.component';\nimport { IgxTreeGridFilteringPipe } from './tree-grid.filtering.pipe';\nimport { IgxTreeGridSummaryPipe } from './tree-grid.summary.pipe';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxTreeGridHierarchizingPipe,\n    IgxTreeGridFlatteningPipe,\n    IgxTreeGridSortingPipe,\n    IgxTreeGridFilteringPipe,\n    IgxTreeGridPagingPipe,\n    IgxTreeGridTransactionPipe,\n    IgxTreeGridSummaryPipe,\n    IgxRowLoadingIndicatorTemplateDirective\n  ],\n  exports: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxRowLoadingIndicatorTemplateDirective,\n    IgxGridCommonModule\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule\n  ]\n})\nexport class IgxTreeGridModule {\n}\n","import { IgxSelectionAPIService } from '../../core/selection';\nimport { Injectable } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\n\n/** @hidden */\nexport class IgxHierarchicalSelectionAPIService extends IgxSelectionAPIService {\n    protected hSelection: Map<string,  Map<string, any>> = new Map<string,   Map<string, any>>();\n\n    public add_sub_item(rootID: string,  parentID: string, cell: any) {\n        const selItem = new Map<string, any>();\n        selItem.set(parentID, cell);\n        this.hSelection.set(rootID, selItem);\n    }\n\n    public get_sub_item(rootID: string) {\n        let selItem;\n        const sel = this.hSelection.get(rootID);\n        if (sel) {\n            selItem = {\n                gridID: this.hSelection.get(rootID).keys().next().value ,\n                cell: this.hSelection.get(rootID).values().next().value\n            };\n        }\n        return selItem;\n    }\n\n    public clear_sub_item(rootID: string) {\n        return this.hSelection.set(rootID, null);\n    }\n\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { first } from 'rxjs/operators';\nimport { FilterMode } from '../grid-base.component';\nimport { IgxColumnComponent } from '../../grids/column.component';\n\nexport class IgxHierarchicalGridNavigationService extends IgxGridNavigationService {\n    public grid: IgxHierarchicalGridComponent;\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false) {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-hierarchical-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-hierarchical-grid-row';\n    }\n\n    protected getRowByIndex(index) {\n        const selector = this.getRowSelector();\n        const rows = Array.from(this.grid.nativeElement.querySelectorAll(\n            `${selector}[data-rowindex=\"${index}\"]`));\n        let row;\n        rows.forEach((r) => {\n            const parentGrid = this.getClosestElemByTag(r, 'igx-hierarchical-grid');\n            if (parentGrid && parentGrid.getAttribute('id') === this.grid.id) {\n                    row = r;\n            }\n        });\n        return row;\n    }\n\n    private getChildContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode.parentNode;\n    }\n\n    private getChildGridRowContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode;\n    }\n\n    private getChildGrid(childGridID, grid) {\n        const cgrid = grid.hgridAPI.getChildGrids(true).filter((g) => g.id === childGridID)[0];\n        return cgrid;\n    }\n\n    private _isScrolledToBottom(grid) {\n        const scrollTop = grid.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const scrollHeight = grid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n        return scrollHeight === 0 || Math.round(scrollTop +  grid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n    }\n    private getIsChildAtIndex(index) {\n        return this.grid.isChildGridRecord(this.grid.verticalScrollContainer.igxForOf[index]);\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (isSummary) {\n            const summaryRow =  this.grid.summariesRowList.toArray()[0].nativeElement;\n            return summaryRow.querySelector(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n        }\n        const row = this.getRowByIndex(rowIndex);\n        return row.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public navigateUp(rowElement, currentRowIndex, visibleColumnIndex) {\n        const prevElem = rowElement.previousElementSibling;\n        if (prevElem) {\n            const nodeName =  prevElem.children[0].nodeName.toLowerCase();\n            const isElemChildGrid =  nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isElemChildGrid) {\n                this.focusPrevChild(prevElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateUp(rowElement, currentRowIndex, visibleColumnIndex);\n                }\n            }\n        } else if (currentRowIndex !== 0) {\n            // handle scenario when prev item is child grid but is not yet in view\n            const isPrevChildGrid = this.getIsChildAtIndex(currentRowIndex - 1);\n            if (!isPrevChildGrid) {\n                super.navigateUp(rowElement, currentRowIndex, visibleColumnIndex);\n            } else {\n                this.scrollGrid(this.grid, -rowElement.offsetHeight,\n                    () => {\n                        rowElement = this.getRowByIndex(currentRowIndex);\n                        this.navigateUp(rowElement, currentRowIndex, visibleColumnIndex);\n                    });\n            }\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === 0) {\n                // move to prev row in sibling layout or parent\n                this.focusPrev(visibleColumnIndex);\n        }\n    }\n    public navigateDown(rowElement, currentRowIndex, visibleColumnIndex) {\n        const nextElem = rowElement.nextElementSibling;\n        if (nextElem) {\n            // next elem is in DOM\n            const nodeName =  nextElem.children[0].nodeName.toLowerCase();\n            const isNextElemChildGrid =  nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isNextElemChildGrid) {\n                this.focusNextChild(nextElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateDown(rowElement, currentRowIndex, visibleColumnIndex);\n                }\n            }\n        } else if (currentRowIndex !== this.grid.verticalScrollContainer.igxForOf.length - 1) {\n             // scroll next in view\n             super.navigateDown(rowElement, currentRowIndex, visibleColumnIndex);\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1) {\n                // move to next row in sibling layout or in parent\n                this.focusNext(visibleColumnIndex);\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        if (this.grid.parent !== null) {\n            // navigating in child\n            const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n            const cellSelector = this.getCellSelector(visibleColumnIndex);\n\n            if (verticalScroll.scrollTop === 0) {\n                this._focusScrollCellInView(visibleColumnIndex);\n            } else {\n                this.scrollGrid(this.grid, 'top',\n                () => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) {\n                        this._focusScrollCellInView(visibleColumnIndex);\n                     }\n                });\n            }\n\n        } else {\n            super.navigateTop(visibleColumnIndex);\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        // handle scenario where last index is child grid\n        // in that case focus cell in last data row\n        const lastIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n            const cellSelector = this.getCellSelector(visibleColumnIndex);\n            if (verticalScroll.scrollTop === scrTopPosition) {\n                const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                    `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cells[cells.length - 1].focus();\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop,\n                () => {\n                    const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                });\n            }\n        } else {\n            super.navigateBottom(visibleColumnIndex);\n        }\n    }\n    public goToLastCell() {\n        // handle scenario where last index is child grid\n        // in that case focus last cell in last data row\n        const lastIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n            if (verticalScroll.scrollTop === scrTopPosition) {\n                this.onKeydownEnd(targetIndex);\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop,\n                    () => {\n                        this.onKeydownEnd(targetIndex);\n                    });\n            }\n        } else {\n            super.goToLastCell();\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        if (this.grid.parent && !isSummary) {\n            // handle scenario where last child row might not be in view\n            // parent should scroll to child grid end\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diffBottom =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n            const row = this.grid.getRowByIndex(rowIndex).element.nativeElement;\n            const rowBottom = row.getBoundingClientRect().bottom;\n            const rowIsVisible = rowBottom <= this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridTop = this._getMaxTop(this.grid);\n            const diffTop = row.getBoundingClientRect().bottom -\n            row.offsetHeight - gridTop;\n            const endIsVisible = diffBottom <= 0;\n            const topVisible = diffTop >= 0;\n            if (!endIsVisible && !rowIsVisible) {\n                this.scrollGrid(this.grid.parent, diffBottom, () => super.onKeydownEnd(rowIndex));\n            } else if (!topVisible) {\n                const scrGrid = this.grid.verticalScrollContainer.getVerticalScroll().scrollTop !== 0 ? this.grid :\n                this.getNextScrollable(this.grid).grid;\n                const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n                this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : this.grid.rootGrid;\n                this.scrollGrid(topGrid, diffTop, () => super.onKeydownEnd(rowIndex));\n            } else {\n                super.onKeydownEnd(rowIndex, isSummary);\n            }\n        } else {\n            super.onKeydownEnd(rowIndex, isSummary);\n        }\n\n    }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();\n        if (verticalScroll.scrollTop === 0 && this.grid.parent) {\n            // scroll parent so that current child is in view\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        } else {\n            super.goToFirstCell();\n        }\n    }\n\n    public performTab(currentRowEl, rowIndex, visibleColumnIndex, isSummaryRow = false) {\n        const summaryRows = this.grid.summariesRowList.toArray();\n        const hasSummaries = summaryRows.length > 0;\n        const isLastDataRow = rowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1;\n        const nextIsDataRow = this.grid.dataRowList.find(row => row.index === rowIndex + 1) ;\n        const isLastColumn =  this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex;\n        const isLastSummaryRow = hasSummaries && isSummaryRow;\n        const nextIndex = rowIndex + 1;\n        const virt = this.grid.verticalScrollContainer;\n        const isNextChild = nextIndex <= virt.igxForOf.length - 1 &&\n            this.grid.isChildGridRecord(virt.igxForOf[nextIndex]);\n        if (!nextIsDataRow && !(isLastDataRow && hasSummaries) && isLastColumn && !isSummaryRow) {\n            // navigating in child, next is not summary\n            const childContainer = this.getChildGridRowContainer();\n            const nextIsSiblingChild = this.grid.parent ? !!childContainer.nextElementSibling : false;\n            if (nextIsSiblingChild) {\n                this.focusNextChildDOMElem(childContainer, this.grid.parent);\n            } else if (isNextChild) {\n                const isInView = virt.state.startIndex + virt.state.chunkSize > nextIndex;\n                if (!isInView) {\n                    this.scrollGrid(this.grid, 'next', () => {\n                        this.focusNextChildDOMElem(currentRowEl, this.grid);\n                    });\n                } else {\n                    this.focusNextChildDOMElem(currentRowEl, this.grid);\n                }\n            } else {\n                this.navigateDown(currentRowEl, rowIndex, 0);\n            }\n        } else if (isLastSummaryRow && isLastColumn && this.grid.parent) {\n            // navigating in child summary, next is parent summary or next parent row\n            const parent = this.grid.parent;\n            const parentHasSummary = parent.summariesRowList.toArray().length > 0;\n            const parentRowIndex = parseInt(\n                this.getClosestElemByTag(currentRowEl, 'igx-child-grid-row').parentNode.getAttribute('data-rowindex'), 10);\n            const isLastRowInParent = parent.verticalScrollContainer.igxForOf.length - 1 === parentRowIndex;\n            // check if next is sibling\n            const childRowContainer = this.getChildGridRowContainer(this.grid);\n            const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n            if (isLastRowInParent && parentHasSummary && !nextIsSiblingChild) {\n                // next is parent summary\n                const parentSummary = parent.summariesRowList.toArray()[0].nativeElement;\n                parent.navigation.focusNextRow(parentSummary, 0, this.grid.rootGrid, true);\n            } else {\n                // next is sibling or parent\n                this.focusNext(0);\n            }\n        } else  if (isLastDataRow && hasSummaries && isLastColumn && this.grid.parent) {\n            // navigating in child rows, next is child grid's summary row\n           this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid.parent, true);\n        } else {\n            super.performTab(currentRowEl, rowIndex, visibleColumnIndex, isSummaryRow);\n        }\n    }\n\n    private focusNextChildDOMElem(currentRowEl, grid) {\n        const gridElem = currentRowEl.nextElementSibling.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n        if (childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n            childGrid.navigation.moveFocusToFilterCell(true);\n            return;\n        }\n        this.focusNextChild(currentRowEl.nextElementSibling, 0, grid);\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        if (column.visibleIndex === 0 && this.grid.parent) {\n            eventArgs.preventDefault();\n            let targetGrid = this.grid.parent;\n            const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n            if (prevSiblingChild) {\n                const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                targetGrid = this.getChildGrid(gridElem.getAttribute('id'), this.grid.parent);\n            }\n            this.focusPrev(targetGrid.unpinnedColumns[targetGrid.unpinnedColumns.length - 1].visibleIndex);\n        } else {\n            super.navigatePrevFilterCell(column, eventArgs);\n        }\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            const dataRows = this.grid.rowList.toArray();\n            const hasRows = dataRows.length !== 0;\n            const summaryRows = this.grid.summariesRowList.toArray();\n            const hasSummaries = summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0;\n            if (hasRows) {\n                this.focusNextRow(dataRows[0].nativeElement, 0, this.grid, false);\n            } else if (hasSummaries) {\n                this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid, true);\n            } else {\n                this.focusNext(0);\n            }\n            eventArgs.preventDefault();\n        } else {\n            super.navigateNextFilterCell(column, eventArgs);\n        }\n    }\n\n    public performShiftTabKey(currentRowEl, rowIndex, visibleColumnIndex, isSummary = false) {\n        if (visibleColumnIndex === 0 && rowIndex === 0 && this.grid.parent && !isSummary) {\n            if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n                if (prevSiblingChild) {\n                    const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                    this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n                } else {\n                    this.navigateUp(currentRowEl, rowIndex,\n                        this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex);\n                }\n            }\n        } else if (visibleColumnIndex === 0 && currentRowEl.previousElementSibling &&\n            currentRowEl.previousElementSibling.children[0].tagName.toLowerCase() === 'igx-child-grid-row') {\n            const gridElem = this.getLastGridElem(currentRowEl.previousElementSibling);\n            this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n        } else if (visibleColumnIndex === 0 && isSummary) {\n            const lastRowIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n            if (lastRowIndex === -1) {\n                // no child data\n                if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                    this.moveFocusToFilterCell();\n                } else {\n                    this.navigateUp(currentRowEl, rowIndex,\n                        this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex);\n                }\n            } else if (!this.getIsChildAtIndex(lastRowIndex)) {\n                super.goToLastCell();\n            } else {\n                const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(lastRowIndex, true);\n                const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n                if (verticalScroll.scrollTop === scrTopPosition || isNaN(scrTopPosition)) {\n                    const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                    this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                } else {\n                    this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop,\n                        () => {\n                            const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                            this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                        });\n                }\n            }\n        } else {\n            super.performShiftTabKey(currentRowEl, rowIndex, visibleColumnIndex, isSummary);\n        }\n    }\n\n    private getLastGridElem(trContainer) {\n        const children = trContainer.children;\n        const closestChild = children[children.length - 1].children[0].children[0];\n        return closestChild;\n    }\n\n    private performShiftTabIntoChild(gridElem, currentRowEl, rowIndex) {\n        const childGridID = gridElem.getAttribute('id');\n            const childGrid = this.getChildGrid(childGridID, this.grid) || this.getChildGrid(childGridID, this.grid.parent);\n            const lastIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n            const summaryRows = childGrid.summariesRowList.toArray();\n            if (summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0) {\n                // move focus to last summary row cell\n                const summaryRow = summaryRows[0].nativeElement;\n                this.focusPrevRow(summaryRow, lastIndex, childGrid, true, true);\n            } else if (childGrid.rowList.toArray().length === 0 &&\n             childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n                 // move to filter cell\n                childGrid.navigation.moveFocusToFilterCell();\n            } else {\n                // move to next cell\n                this.navigateUp(currentRowEl, rowIndex, lastIndex);\n            }\n    }\n\n    private _focusScrollCellInView(visibleColumnIndex) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        const cells = this.grid.nativeElement.querySelectorAll(\n            `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n        const cell = cells[0];\n        const childContainer = this.grid.nativeElement.parentNode.parentNode;\n        const scrTop = this.grid.parent.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const dc = childContainer.parentNode.parentNode;\n        const scrWith = parseInt(dc.style.top, 10);\n        if (scrTop === 0 || scrWith === 0) {\n            // cell is in view\n            cell.focus({preventScroll: true});\n        } else {\n            // scroll parent so that cell is in view\n            this.scrollGrid(this.grid.parent, scrWith , () => cell.focus({preventScroll: true}));\n        }\n    }\n\n    private focusNextChild(elem, visibleColumnIndex, grid) {\n        const gridElem = elem.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.toArray().length === 0) {\n            this.focusNext(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the next child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        if (childGrid.verticalScrollContainer.state.startIndex !== 0) {\n            // scroll to top\n            this.scrollGrid(childGrid, 'top', () => this.focusNextRow(elem, visibleColumnIndex, childGrid));\n        } else {\n            this.focusNextRow(elem, visibleColumnIndex, childGrid);\n        }\n    }\n    private focusPrevChild(elem, visibleColumnIndex, grid) {\n        const grids = [];\n        const gridElems = Array.from(elem.querySelectorAll('igx-hierarchical-grid'));\n        const childLevel = grid.childLayoutList.first.level;\n        gridElems.forEach((hg) => {\n            const parentRow = this.getClosestElemByTag(hg, 'igx-child-grid-row');\n            if (parentRow && parseInt(parentRow.getAttribute('data-level'), 10) === childLevel) {\n                grids.push(hg);\n            }\n        });\n        const gridElem = grids[grids.length - 1];\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.toArray().length === 0) {\n            this.focusPrev(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the previous child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        const isScrolledToBottom = this._isScrolledToBottom(childGrid);\n        const lastIndex = childGrid.verticalScrollContainer.igxForOf.length - 1;\n        if (!isScrolledToBottom) {\n            // scroll to end\n            this.scrollGrid(childGrid, 'bottom', () => this.focusPrevChild(elem, visibleColumnIndex, grid));\n        } else {\n            const lastRowInChild = childGrid.getRowByIndex(lastIndex);\n            const isChildGrid = lastRowInChild.nativeElement.nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isChildGrid) {\n                this.focusPrevChild(lastRowInChild.nativeElement.parentNode, visibleColumnIndex, childGrid);\n            } else {\n                this.focusPrevRow(lastRowInChild.nativeElement, visibleColumnIndex, childGrid, true);\n            }\n        }\n    }\n    private focusPrev(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        let parentContainer = this.getChildContainer(currGrid);\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const prevIsSiblingChild = !!childRowContainer.previousElementSibling;\n        let prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n        if (prev) {\n            if (prevIsSiblingChild) {\n                this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n            } else {\n                this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n            }\n        } else {\n            this.scrollGrid(currGrid.parent, 'prev',\n            () => {\n            parentContainer = this.getChildContainer(grid);\n            childRowContainer = this.getChildGridRowContainer(grid);\n            prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n            if (prevIsSiblingChild) {\n                this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n            } else {\n                this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n            }\n            });\n        }\n    }\n\n    private getNextParentInfo(grid) {\n        // find next parent that is not at bottom\n        let currGrid = grid.parent;\n        let nextElem = this.getChildContainer(grid).nextElementSibling;\n        while (!nextElem && currGrid.parent !== null) {\n            nextElem = this.getChildContainer(currGrid).nextElementSibling;\n            currGrid = currGrid.parent;\n        }\n\n        return { grid: currGrid, nextElement: nextElem};\n    }\n    private getNextScrollable(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return {grid: grid, prev: null };\n        }\n        let nonScrollable = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop === 0;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            nonScrollable = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop === 0;\n        }\n        return {grid: currGrid, prev: prev };\n    }\n\n    private focusNext(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        const parentInfo = this.getNextParentInfo(currGrid);\n        const nextParentGrid = parentInfo.grid;\n        let nextParentElem = parentInfo.nextElement;\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n        let next = childRowContainer.nextElementSibling || nextParentElem;\n        const verticalScroll = nextParentGrid.verticalScrollContainer.getVerticalScroll();\n        if (next) {\n            if (nextIsSiblingChild) {\n                this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n            } else {\n                this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n            }\n        } else if (verticalScroll.scrollTop !==\n            verticalScroll.scrollHeight - nextParentGrid.verticalScrollContainer.igxForContainerSize ) {\n            this.scrollGrid(nextParentGrid, 'next',\n            () => {\n                nextParentElem = parentInfo.nextElement;\n                childRowContainer = this.getChildGridRowContainer();\n                next = childRowContainer.nextElementSibling || nextParentElem;\n                if (next && nextIsSiblingChild) {\n                    this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n                } else if (next) {\n                    this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n                }\n            });\n        }\n    }\n    private getNextScrollableDown(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return {grid: grid, prev: null };\n        }\n        let scrollTop = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n        let scrollHeight = currGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n        let nonScrollable = scrollHeight === 0 ||\n        Math.round(scrollTop +  currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            scrollTop = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n            scrollHeight = currGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n            nonScrollable = scrollHeight === 0 ||\n            Math.round(scrollTop +  currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        }\n        return {grid: currGrid, prev: prev };\n    }\n\n    private _getMinBottom(grid) {\n        let currGrid = grid;\n        let bottom = currGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            bottom = Math.min(bottom, currGrid.tbody.nativeElement.getBoundingClientRect().bottom);\n        }\n        return bottom;\n    }\n\n    private _getMaxTop(grid) {\n        let currGrid = grid;\n        let top = currGrid.tbody.nativeElement.getBoundingClientRect().top;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            top = Math.max(top, currGrid.tbody.nativeElement.getBoundingClientRect().top);\n        }\n        return top;\n    }\n\n    private focusNextRow(elem, visibleColumnIndex, grid, isSummary?) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex) && grid.navigation.isColumnLeftFullyVisible(visibleColumnIndex)) {\n            const cell =\n            elem.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            const closestScrollableGrid = this.getNextScrollableDown(grid).grid;\n            // const diff = cell.getBoundingClientRect().bottom - grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridBottom = this._getMinBottom(grid);\n            const diff = cell.getBoundingClientRect().bottom - gridBottom;\n            const inView =  diff <= 0;\n            const scrollTop = closestScrollableGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n            const scrollHeight = closestScrollableGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n            const canScroll = !(scrollHeight === 0 ||\n        Math.round(scrollTop +  closestScrollableGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight);\n            if (!inView && canScroll) {\n                this.scrollGrid(closestScrollableGrid, diff, () => cell.focus({ preventScroll: true }));\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            const cellElem = elem.querySelector(`${cellSelector}`);\n            const rowIndex = parseInt(cellElem.getAttribute('data-rowindex'), 10);\n            grid.navigation.performHorizontalScrollToCell(rowIndex, visibleColumnIndex);\n        }\n    }\n\n    private focusPrevRow(elem, visibleColumnIndex, grid, inChild?, isSummary?) {\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex) && grid.navigation.isColumnLeftFullyVisible(visibleColumnIndex)) {\n            const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n            const cells =  elem.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            let cell = cells[cells.length - 1];\n            const rIndex = parseInt(elem.getAttribute('data-rowindex'), 10);\n            const scrGrid = grid.verticalScrollContainer.getVerticalScroll().scrollTop !== 0 ? grid :\n             this.getNextScrollable(grid).grid;\n            const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n            grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : grid.rootGrid;\n            const gridTop = this._getMaxTop(grid);\n            const scrTop = scrGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n            const diff = cell.getBoundingClientRect().bottom -\n            cell.offsetHeight - gridTop;\n            if (scrTop !== 0 && diff < 0 && !inChild) {\n                this.scrollGrid(scrGrid, diff, () => {\n                    const el = !isSummary ? grid.navigation.getRowByIndex(rIndex) : elem;\n                    cell = el.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`)[0];\n                    cell.focus({ preventScroll: true });\n                });\n            } else if (diff < 0 && inChild) {\n                this.scrollGrid(topGrid, diff, () => {\n                    cell.focus({ preventScroll: true });\n                });\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, () => {\n                this.focusPrevRow(elem, visibleColumnIndex, grid, inChild, isSummary);\n            });\n        }\n    }\n\n    private horizontalScrollGridToIndex(grid, visibleColumnIndex, callBackFunc) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(callBackFunc);\n        grid.dataRowList.toArray()[0].virtDirRow.scrollTo(unpinnedIndex);\n    }\n    private scrollGrid(grid, target, callBackFunc) {\n        grid.nativeElement.focus({preventScroll: true});\n        requestAnimationFrame(() => {\n            if (typeof target === 'number') {\n                grid.verticalScrollContainer.addScrollTop(target);\n            } else {\n                switch (target) {\n                    case 'top' : grid.verticalScrollContainer.scrollTo(0); break;\n                    case 'bottom' : grid.verticalScrollContainer.scrollTo(grid.verticalScrollContainer.igxForOf.length - 1); break;\n                    case 'next' :  grid.verticalScrollContainer.scrollNext(); break;\n                    case 'prev' :  grid.verticalScrollContainer.scrollPrev(); break;\n                }\n            }\n            grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(callBackFunc);\n        });\n    }\n\n    private _navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const prevElem = rowElement.previousElementSibling;\n        const scrollable = this.getNextScrollable(this.grid);\n        const grid = scrollable.grid;\n        const scrTop = grid.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const containerTop = scrollable.prev.nativeElement.parentNode.parentNode.parentNode.parentNode;\n        const top = parseInt(containerTop.style.top, 10);\n        if (scrTop !== 0 && top < 0) {\n            this.scrollGrid(grid, -prevElem.offsetHeight,\n                () => super.navigateUp(rowElement, currentRowIndex, visibleColumnIndex));\n        } else {\n            super.navigateUp(rowElement, currentRowIndex, visibleColumnIndex);\n        }\n    }\n\n    private _navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const nextElem = rowElement.nextElementSibling;\n        const childContainer = this.grid.nativeElement.parentNode.parentNode;\n        const diff =\n        childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n        const endIsVisible = diff < 0;\n        const scrollable = this.getNextScrollableDown(this.grid);\n        const grid = scrollable.grid;\n        if (!endIsVisible) {\n            this.scrollGrid(grid, nextElem.offsetHeight,\n                () => super.navigateDown(rowElement, currentRowIndex, visibleColumnIndex));\n        } else {\n            super.navigateDown(rowElement, currentRowIndex, visibleColumnIndex);\n        }\n    }\n\n    private getClosestElemByTag(sourceElem, targetTag) {\n        let result = sourceElem;\n        while (result !== null && result.nodeType === 1) {\n            if (result.tagName.toLowerCase() === targetTag.toLowerCase()) {\n                return result;\n            }\n            result = result.parentNode;\n        }\n        return null;\n    }\n}\n","import {\n    QueryList,\n    ContentChildren,\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    Optional,\n    Input,\n    ViewChild,\n    TemplateRef\n} from '@angular/core';\nimport { IgxGridBaseComponent, IgxGridTransaction, IGridDataBindable } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../column.component';\nimport { IgxSummaryOperand } from '../summaries/grid-summary';\nimport { IgxHierarchicalTransactionService, IgxOverlayService } from '../../services/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\n\nexport const IgxHierarchicalTransactionServiceFactory = {\n    provide: IgxGridTransaction,\n    useFactory: hierarchicalTransactionServiceFactory\n};\n\nexport function hierarchicalTransactionServiceFactory() {\n    return () => new IgxHierarchicalTransactionService();\n}\n\nexport interface IPathSegment {\n    rowID: any;\n    rowIslandKey: string;\n}\n\nexport abstract class IgxHierarchicalGridBaseComponent extends IgxGridBaseComponent {\n    public abstract rootGrid;\n\n    @Input()\n    public expandChildren: boolean;\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        this._maxLevelHeaderDepth = this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        return this._maxLevelHeaderDepth;\n    }\n\n     /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.rootGrid ? this.rootGrid.outletDirective : this.outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public hgridAPI: IgxHierarchicalGridAPIService;\n\n    /**\n     * @hidden\n     */\n    public parentIsland: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n    */\n    public childRow: IgxChildGridRowComponent;\n\n    protected _expandChildren = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxHierarchicalSelectionAPIService,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            gridAPI,\n            selection,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    public createColumnsList(cols: Array<any>) {\n        const columns = [];\n        const topLevelCols = this.onlyTopLevel(cols);\n        topLevelCols.forEach((col) => {\n            const ref = this._createColumn(col);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n        const result = flatten(columns);\n        this.columnList.reset(result);\n        this.columnList.notifyOnChanges();\n    }\n\n    protected _createColumn(col) {\n        let ref;\n        if (col instanceof IgxColumnGroupComponent) {\n            ref = this._createColGroupComponent(col);\n        } else {\n            ref = this._createColComponent(col);\n        }\n        return ref;\n    }\n\n    protected _createColGroupComponent(col: IgxColumnGroupComponent) {\n        const factoryGroup = this.resolver.resolveComponentFactory(IgxColumnGroupComponent);\n        const ref = this.viewRef.createComponent(factoryGroup, null, this.viewRef.injector);\n        ref.changeDetectorRef.detectChanges();\n        factoryGroup.inputs.forEach((input) => {\n            const propName = input.propName;\n            (<any>ref.instance)[propName] = (<any>col)[propName];\n        });\n        if (col.children.length > 0) {\n            const newChildren = [];\n            col.children.forEach(child => {\n                const newCol = this._createColumn(child).instance;\n                newCol.parent = ref.instance;\n                newChildren.push(newCol);\n            });\n            (<IgxColumnGroupComponent>ref.instance).children.reset(newChildren);\n            (<IgxColumnGroupComponent>ref.instance).children.notifyOnChanges();\n        }\n        (<IgxColumnGroupComponent>ref.instance).grid = this;\n        return ref;\n    }\n\n    protected _createColComponent(col) {\n        const factoryColumn = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const ref = this.viewRef.createComponent(factoryColumn, null, this.viewRef.injector);\n        factoryColumn.inputs.forEach((input) => {\n            const propName = input.propName;\n            if (!((<any>col)[propName] instanceof IgxSummaryOperand)) {\n                (<any>ref.instance)[propName] = (<any>col)[propName];\n            } else {\n                (<any>ref.instance)[propName] = col[propName].constructor;\n            }\n        });\n        (<IgxColumnComponent>ref.instance).grid = this;\n        return ref;\n    }\n\n    protected getGridsForIsland(rowIslandID: string) {\n        return this.hgridAPI.getChildGridsForRowIsland(rowIslandID);\n    }\n\n    protected getChildGrid(path: Array<IPathSegment>) {\n        if (!path) {\n            return;\n        }\n        return this.hgridAPI.getChildGrid(path);\n    }\n}\n\nfunction flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            result = result.concat(flatten(el.children.toArray()));\n        }\n    });\n    return result;\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\nimport { IPathSegment } from './hierarchical-grid-base.component';\nimport { IgxGridBaseComponent, GridBaseAPIService, IGridDataBindable } from '../grid';\nexport class IgxHierarchicalGridAPIService extends GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable> {\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<string, Map<any, IgxHierarchicalGridComponent>> =\n        new Map<string, Map<any, IgxHierarchicalGridComponent>>();\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    getChildRowIsland(key: string) {\n        return this.childRowIslands.get(key);\n    }\n\n    getChildGrid(path: Array<IPathSegment>) {\n        const currPath = path;\n        let grid;\n        const pathElem = currPath.shift();\n        const childrenForLayout = this.childGrids.get(pathElem.rowIslandKey);\n        if (childrenForLayout) {\n            const childGrid = childrenForLayout.get(pathElem.rowID);\n            if (currPath.length === 0) {\n                grid = childGrid;\n            } else {\n                grid = childGrid.hgridAPI.getChildGrid(currPath);\n            }\n        }\n        return grid;\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        const allChildren = [];\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid) => {\n                allChildren.push(grid);\n                if (inDepth) {\n                    const children = grid.hgridAPI.getChildGrids(inDepth);\n                    children.forEach((item) => {\n                        allChildren.push(item);\n                    });\n                }\n            });\n        });\n\n        return allChildren;\n    }\n\n    getParentRowId(childGrid: IgxHierarchicalGridComponent) {\n        let rowID;\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid, key) => {\n                if (grid === childGrid) {\n                    rowID = key;\n                    return;\n                }\n            });\n        });\n        return rowID;\n    }\n\n    registerChildGrid(parentRowID: string|object, rowIslandKey: string, grid: IgxHierarchicalGridComponent) {\n        let childrenForLayout = this.childGrids.get(rowIslandKey);\n        if (!childrenForLayout) {\n            this.childGrids.set(rowIslandKey, new Map<any, IgxHierarchicalGridComponent>());\n            childrenForLayout = this.childGrids.get(rowIslandKey);\n        }\n        childrenForLayout.set(parentRowID, grid);\n    }\n\n    getChildGridsForRowIsland(rowIslandKey): IgxHierarchicalGridComponent[] {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        const children = [];\n        if (childrenForLayout) {\n            childrenForLayout.forEach((child) => {\n                children.push(child);\n            });\n        }\n        return children;\n    }\n\n    getChildGridByID(rowIslandKey, rowID) {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        return childrenForLayout.get(rowID);\n    }\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\n\nexport class IgxRowIslandAPIService {\n    public change: Subject<any> = new Subject<any>();\n    protected state: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<any, IgxHierarchicalGridComponent> = new Map<any, IgxHierarchicalGridComponent>();\n\n    public register(rowIsland: IgxRowIslandComponent) {\n        this.state.set(rowIsland.id, rowIsland);\n        this.destroyMap.set(rowIsland.id, new Subject<boolean>());\n    }\n\n    public unsubscribe(rowIsland: IgxRowIslandComponent) {\n        this.state.delete(rowIsland.id);\n    }\n\n    public get(id: string): IgxRowIslandComponent {\n        return this.state.get(id);\n    }\n\n    public unset(id: string) {\n        this.state.delete(id);\n        this.destroyMap.delete(id);\n    }\n\n    public reset(oldId: string, newId: string) {\n        const destroy = this.destroyMap.get(oldId);\n        const rowIsland = this.get(oldId);\n\n        this.unset(oldId);\n\n        if (rowIsland) {\n            this.state.set(newId, rowIsland);\n        }\n\n        if (destroy) {\n            this.destroyMap.set(newId, destroy);\n        }\n    }\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(rowIslandKey: string) {\n        return this.childRowIslands.get(rowIslandKey);\n    }\n\n    registerChildGrid(parentRowID: string|object, grid: IgxHierarchicalGridComponent) {\n        this.childGrids.set(parentRowID, grid);\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        let allChildren = [];\n        this.childGrids.forEach((grid) => {\n            allChildren.push(grid);\n        });\n        if (inDepth) {\n            this.childRowIslands.forEach((layout) => {\n                allChildren = allChildren.concat(layout.rowIslandAPI.getChildGrids(inDepth));\n            });\n        }\n\n        return allChildren;\n    }\n\n    getChildGridByID(rowID) {\n        return this.childGrids.get(rowID);\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    Input,\n    QueryList,\n    OnInit,\n    Inject,\n    ElementRef,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    IterableDiffers,\n    ViewContainerRef,\n    NgZone,\n    AfterViewInit,\n    OnChanges,\n    Output,\n    EventEmitter,\n    Optional,\n    OnDestroy\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxGridTransaction, IGridDataBindable, IgxGridBaseComponent } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { TransactionService, Transaction, State } from '../../services';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\nimport { IgxOverlayService } from '../../services/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nexport interface IGridCreatedEventArgs {\n    owner: IgxRowIslandComponent;\n    parentID: any;\n    grid: IgxHierarchicalGridComponent;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-row-island',\n    template: ``,\n    providers: [IgxRowIslandAPIService]\n})\nexport class IgxRowIslandComponent extends IgxHierarchicalGridBaseComponent\n            implements AfterContentInit, AfterViewInit, OnChanges, OnInit, OnDestroy {\n    /**\n     * Sets the key of the row island by which child data would be taken from the row data if such is provided.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\">\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    public key: string;\n\n    /**\n     * Sets if all immediate children of the grids for this `IgxRowIslandComponent` should be expanded/collapsed.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" [expandChildren]=\"true\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._expandChildren = value;\n        this.rowIslandAPI.getChildGrids().forEach((grid) => {\n            if (document.body.contains(grid.nativeElement)) {\n                // Detect changes right away if the grid is visible\n                grid.expandChildren = value;\n                grid.markForCheck();\n            } else {\n                // Else defer the detection on changes when the grid gets into view for performance.\n                grid.updateOnRender = true;\n            }\n        });\n    }\n\n    /**\n     * Gets if all immediate children of the grids for this `IgxRowIslandComponent` have been set to be expanded/collapsed.\n     * ```typescript\n     * const expanded = this.rowIsland.expandChildren;\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    get expandChildren(): boolean {\n        return this._expandChildren;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public children = new QueryList<IgxRowIslandComponent>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: false })\n    public childColumns = new QueryList<IgxColumnComponent>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onLayoutChange = new EventEmitter<any>();\n\n    /**\n     * Event emmited when a grid is being created based on this row island.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" (onGridCreated)=\"gridCreated($event)\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Output()\n    public onGridCreated = new EventEmitter<IGridCreatedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    get id() {\n        const pId = this.parentId ? this.parentId.substring(this.parentId.indexOf(this.layout_id) + this.layout_id.length) + '-' : '';\n        return this.layout_id + pId +  this.key;\n    }\n\n    /**\n     * @hidden\n     */\n    get parentId() {\n       return this.parentIsland ? this.parentIsland.id : null;\n    }\n\n    /**\n     * @hidden\n     */\n    get level() {\n        let ptr = this.parentIsland;\n        let lvl = 0;\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parentIsland;\n        }\n        return lvl + 1;\n    }\n\n    /**\n     * Get transactions service for the children grid components.\n     * @experimental @hidden\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        const grids = this.rowIslandAPI.getChildGrids();\n        return grids.length ? grids[0].transactions : this._transactions;\n    }\n\n    /**\n     * @hidden\n     */\n    public initialChanges = [];\n\n    /**\n     * @hidden\n     */\n    public rootGrid = null;\n    readonly data: any[];\n    readonly filteredData: any[];\n    private layout_id = `igx-row-island-`;\n    private isInit = false;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxHierarchicalSelectionAPIService,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        public rowIslandAPI: IgxRowIslandAPIService) {\n        super(\n            selectionService,\n            crudService,\n            gridAPI,\n            selection,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions\n        );\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parentIsland = this;\n        });\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            return colsArray.indexOf(item) === -1;\n        });\n        this.childColumns.reset(topCols);\n        this.columnList.changes.pipe(takeUntil(this.destroy$)).subscribe(() => { this.updateColumnList(); });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.rowIslandAPI.register(this);\n        if (this.parentIsland) {\n            this.parentIsland.rowIslandAPI.registerChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.registerChildRowIsland(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes) {\n        this.onLayoutChange.emit(changes);\n        if (!this.isInit) {\n            this.initialChanges.push(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        // Override the base destroy because we don't have rendered anything to use removeEventListener on\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.rowIslandAPI.unset(this.id);\n        if (this.parentIsland) {\n            this.parentIsland.rowIslandAPI.unsetChildRowIsland(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    reflow() {}\n\n    /**\n     * @hidden\n     */\n    calculateGridHeight() {}\n\n    protected updateColumnList() {\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            if (colsArray.indexOf(item) === -1) {\n                /* Reset the default width of the columns that come into this row island,\n                because the root catches them first during the detectChanges() and sets their defaultWidth. */\n                item.defaultWidth = undefined;\n                return true;\n            }\n            return false;\n        });\n        this.childColumns.reset(topCols);\n\n        if (this.parentIsland) {\n            this.parentIsland.columnList.notifyOnChanges();\n        } else {\n            this.rootGrid.columnList.notifyOnChanges();\n        }\n\n        this.rowIslandAPI.getChildGrids().forEach((grid: IgxHierarchicalGridComponent) => {\n            grid.createColumnsList(this.childColumns.toArray());\n            if (!document.body.contains(grid.nativeElement)) {\n                grid.updateOnRender = true;\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnInit,\n    ViewChild,\n    AfterViewInit,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { GridBaseAPIService } from '.././api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-child-grid-row',\n    templateUrl: './child-grid-row.component.html'\n})\nexport class IgxChildGridRowComponent implements AfterViewInit, OnInit {\n\n\n    /**\n * Returns whether the row is expanded.\n * ```typescript\n * const RowExpanded = this.grid1.rowList.first.expanded;\n * ```\n */\n    public expanded = false;\n\n    @Input()\n    layout: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n     */\n    public get parentHasScroll() {\n        return !this.parentGrid.verticalScrollContainer.dc.instance.notVirtual;\n    }\n\n\n    /**\n     * @hidden\n     */\n    // public get layout() {\n    //     const layout = (this.gridAPI as IgxHierarchicalGridAPIService).getLayout(`igx-row-island-` + this.rowData.key);\n    //    return layout;\n    // }\n    /**\n    * @hidden\n    */\n    @Input()\n    public parentGridID: string;\n\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public rowData: any = [];\n\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    @ViewChild('hgrid')\n    private hGrid: any/* TODO: IgxHierarchicalGridComponent*/;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    // TODO: Refactor\n    get parentGrid(): any/* TODO: IgxHierarchicalGridComponent*/ {\n        return this.gridAPI.grid;\n    }\n\n    @HostBinding('attr.data-level')\n    get level() {\n        return this.layout.level;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<any/* TODO: IgxHierarchicalGridComponent*/>,\n        private selectionAPI: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        // setting child data only once on init\n        // due to context change issues when moving cached views containing hierarchical child grids\n        this.hGrid.data = this.rowData.childGridsData[this.layout.key];\n        this.layout.onLayoutChange.subscribe((ch) => {\n            this._handleLayoutChanges(ch);\n        });\n        const changes = this.layout.initialChanges;\n        changes.forEach(change => {\n            this._handleLayoutChanges(change);\n        });\n        this.hGrid.parent = this.parentGrid;\n        this.hGrid.parentIsland = this.layout;\n        this.hGrid.childRow =  this;\n        this.layout.onGridCreated.emit({\n            owner: this.layout,\n            parentID: this.rowData.rowID,\n            grid: this.hGrid\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.hGrid.childLayoutList = this.layout.children;\n        if (this.layout.childColumns.length > 0 && !this.hGrid.autoGenerate) {\n            this.hGrid.createColumnsList(this.layout.childColumns.toArray());\n        }\n        const layouts = this.hGrid.childLayoutList.toArray();\n        layouts.forEach((l) => this.hGrid.hgridAPI.registerChildRowIsland(l));\n        this.parentGrid.hgridAPI.registerChildGrid(this.rowData.rowID, this.layout.key, this.hGrid);\n        this.layout.rowIslandAPI.registerChildGrid(this.rowData.rowID, this.hGrid);\n\n        this.hGrid.cdr.detectChanges();\n    }\n\n\n    private _handleLayoutChanges(changes: SimpleChanges) {\n        for (const change in changes) {\n            if (changes.hasOwnProperty(change)) {\n                this.hGrid[change] = changes[change].currentValue;\n            }\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    forwardRef,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ContentChildren,\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    AfterViewInit,\n    AfterContentInit,\n    Optional,\n    OnInit,\n    OnDestroy,\n    ContentChild\n} from '@angular/core';\nimport { IgxGridBaseComponent, IgxGridTransaction } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../../core/displayDensity';\nimport { IGridDataBindable, IgxColumnComponent, } from '../grid/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxTemplateOutletDirective } from '../../directives/template-outlet/template_outlet.directive';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\n\nlet NEXT_ID = 0;\n\nexport interface HierarchicalStateRecord {\n    rowID: any;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid',\n    templateUrl: 'hierarchical-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxHierarchicalGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxHierarchicalGridComponent) },\n        IgxGridSummaryService,\n        IgxFilteringService,\n        IgxHierarchicalGridNavigationService,\n        IgxForOfSyncService\n    ]\n})\nexport class IgxHierarchicalGridComponent extends IgxHierarchicalGridBaseComponent\n    implements IGridDataBindable, AfterViewInit, AfterContentInit, OnInit, OnDestroy {\n\n    /**\n     * Sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-hgrid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this.h_id;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxHierarchicalGridComponent` with an array of data.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    public set data(value: any[]) {\n        this._data = value;\n        if (this.parent) {\n            this.calculateGridHeight();\n        }\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n        if (this.parent && (this.height === null || this.height.indexOf('%') !== -1)) {\n            // If the height will change based on how much data there is, recalculate sizes in igxForOf.\n            requestAnimationFrame(() => {\n                this.updateParentSizes();\n            });\n        }\n    }\n\n    /**\n     * Returns an array of data set to the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get data(): any[] {\n        return this._data;\n    }\n\n    /**\n    * Sets the state of the `IgxHierarchicalGridComponent` containing which rows are expanded.\n    * ```typescript\n    * this.gridState = [{ rowID: 1 }, { rowID: 4}];\n    * ```\n    * ```html\n    * <igx-hierarchical-grid [primaryKey]=\"'ID'\" [data]=\"Data\" [autoGenerate]=\"false\" [hierarchicalState]=\"hgridState\">\n    *      <igx-column field=\"ID\"  [dataType]='number'></igx-column>\n    *      <igx-column field=\"Product\"  [dataType]='string'></igx-column>\n    *      <igx-column field=\"Description\"  [dataType]='string'></igx-column>\n    * </igx-hierarchical-grid>\n    * ```\n    * @memberof IgxHierarchicalGridComponent\n    */\n    @Input()\n    public get hierarchicalState() {\n        return this._hierarchicalState;\n    }\n    public set hierarchicalState(val) {\n        this._hierarchicalState = val;\n        if (this.parent) {\n            requestAnimationFrame(() => {\n                this.updateParentSizes();\n            });\n        }\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets if all immediate children of the `IgxHierarchicalGridComponent` should be expanded/collapsed.\n     * Defult value is false.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\" [expandChildren]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._expandChildren = value;\n        if (value && this.data) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n        } else if (this.data) {\n            this.hierarchicalState = [];\n        }\n    }\n\n    /**\n     * Gets if all immediate children of the `IgxHierarchicalGridComponent` previously have been set to be expanded/collapsed.\n     * If previously set and some rows have been manually expanded/collapsed it will still return the last set value.\n     * ```typescript\n     * const expanded = this.grid.expandChildren;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    get expandChildren(): boolean {\n        return this._expandChildren;\n    }\n\n    /**\n     * Gets the unique identifier of the parent row. It may be a `string` or `number` if `primaryKey` of the\n     * parent grid is set or an object reference of the parent record otherwise.\n     * ```typescript\n     * const foreignKey = this.grid.foreignKey;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get foreignKey() {\n        if (!this.parent) {\n            return null;\n        }\n        return this.parent.hgridAPI.getParentRowId(this);\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public childLayoutList: QueryList<IgxRowIslandComponent>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: true })\n    public allLayoutList: QueryList<IgxRowIslandComponent>;\n\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.dragIndicatorIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-grid #grid>\n     *      ...\n     *      <ng-template igxDragIndicatorIcon>\n     *          <igx-icon fontSet=\"material\">info</igx-icon>\n     *      </ng-template>\n     *  </igx-grid>\n     * ```\n     */\n    @ContentChild(IgxDragIndicatorIconDirective, { read: TemplateRef })\n    public dragIndicatorIconTemplate: TemplateRef<any> = null;\n\n    @ViewChild('hierarchical_record_template', { read: TemplateRef })\n    protected hierarchicalRecordTemplate: TemplateRef<any>;\n\n    @ViewChild('child_record_template', { read: TemplateRef })\n    protected childTemplate: TemplateRef<any>;\n\n    @ViewChild('headerHierarchyExpander', { read: ElementRef })\n    protected headerHierarchyExpander: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public templateOutlets: QueryList<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxChildGridRowComponent, { read: IgxChildGridRowComponent })\n    public hierarchicalRows: QueryList<IgxChildGridRowComponent>;\n\n    /**\n     * @hidden\n     */\n    get hasExpandableChildren() {\n        return !!this.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    public childLayoutKeys = [];\n\n    /**\n     * @hidden\n     */\n    public highlightedRowID = null;\n\n    /**\n     * @hidden\n     */\n    public updateOnRender = false;\n\n    /**\n     * @hidden\n     */\n    public parent = null;\n\n    private _hierarchicalState = [];\n    private _data;\n    private _filteredData = null;\n    private h_id = `igx-hierarchical-grid-${NEXT_ID++}`;\n    private childGridTemplates: Map<any, any> = new Map();\n    private scrollTop = 0;\n    private scrollLeft = 0;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxHierarchicalSelectionAPIService,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            gridAPI,\n            selection,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this._transactions = this.parentIsland ? this.parentIsland.transactions : this._transactions;\n        super.ngOnInit();\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', this.hg_verticalScrollHandler.bind(this));\n        this.parentVirtDir.getHorizontalScroll().addEventListener('scroll', this.hg_horizontalScrollHandler.bind(this));\n\n        if (this.expandChildren && this.data && this.hierarchicalState.length !== this.data.length) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n        }\n\n        this.verticalScrollContainer.onBeforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe((view) => {\n            const rowData = view.context.$implicit;\n            if (this.isChildGridRecord(rowData)) {\n                const cachedData = this.childGridTemplates.get(rowData.rowID);\n                if (cachedData) {\n                    const tmlpOutlet = cachedData.owner;\n                    tmlpOutlet._viewContainerRef.detach(0);\n                }\n            }\n        });\n\n        if (this.parent) {\n            this._displayDensity = this.rootGrid._displayDensity;\n            this.rootGrid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                requestAnimationFrame(() => {\n                    this._displayDensity = this.rootGrid._displayDensity;\n                    if (document.body.contains(this.nativeElement)) {\n                        this.reflow();\n                    } else {\n                        this.updateOnRender = true;\n                    }\n                });\n            });\n            this.childLayoutKeys = this.parentIsland.children.map((item) => item.key);\n        } else {\n            this.childLayoutKeys = this.childLayoutList.map((item) => item.key);\n            this.cdr.detectChanges();\n        }\n\n        this.toolbarCustomContentTemplates = this.parentIsland ?\n            this.parentIsland.toolbarCustomContentTemplates :\n            this.toolbarCustomContentTemplates;\n    }\n\n    public get outletDirective() {\n        return this.rootGrid._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public get parentRowOutletDirective() {\n        return this === this.rootGrid ? null : this.rootGrid.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateColumnList(false);\n        super.ngAfterContentInit();\n    }\n\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        this.updateColumnList();\n        super.onColumnsChanged(change);\n    }\n\n    private updateColumnList(recalcColSizes = true) {\n        const childLayouts = this.parent ? this.childLayoutList : this.allLayoutList;\n        const nestedColumns = childLayouts.map((layout) => {\n            if (!layout.rootGrid && !this.parent) {\n                // If the layout doesn't have rootGrid set and this is the root, set it\n                layout.rootGrid = this;\n            }\n            return layout.columnList.toArray();\n        });\n        const colsArray = [].concat.apply([], nestedColumns);\n        const colLength = this.columnList.length;\n        if (colsArray.length > 0) {\n            const topCols = this.columnList.filter((item) => {\n                return colsArray.indexOf(item) === -1;\n            });\n            this.columnList.reset(topCols);\n            if (recalcColSizes && this.columnList.length !== colLength) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (!this.parent) {\n            this.hgridAPI.getChildGrids(true).forEach((grid) => {\n                if (!grid.childRow.cdr.destroyed) {\n                    grid.childRow.cdr.destroy();\n                }\n            });\n        }\n        super.ngOnDestroy();\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = super.getFeatureColumnsWidth();\n\n        if (this.hasExpandableChildren) {\n            width += this.headerHierarchyExpander.nativeElement.clientWidth || this.getDefaultExpanderWidth();\n        }\n\n        return width;\n    }\n\n    private getDefaultExpanderWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 57;\n            case DisplayDensity.compact:\n                return 49;\n            default:\n                return 72;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isRowHighlighted(rowData) {\n        return this.highlightedRowID === rowData.rowID;\n    }\n\n    /**\n     * @hidden\n     */\n    public isHierarchicalRecord(record: any): boolean {\n        return this.childLayoutList.length !== 0 && record[this.childLayoutList.first.key];\n    }\n\n    /**\n     * @hidden\n     */\n    public isChildGridRecord(record: any): boolean {\n        // Can be null when there is defined layout but no child data was found\n        return record.childGridsData !== undefined;\n    }\n\n    /**\n     * @hidden\n     */\n    public trackChanges(index, rec) {\n        if (rec.childGridsData !== undefined) {\n            // if is child rec\n            return rec.rowID;\n        }\n        return rec;\n    }\n\n    /**\n     * @hidden\n     */\n    public getContext(rowData): any {\n        if (this.isChildGridRecord(rowData)) {\n            const cachedData = this.childGridTemplates.get(rowData.rowID);\n            if (cachedData) {\n                const view = cachedData.view;\n                const tmlpOutlet = cachedData.owner;\n                return {\n                    $implicit: rowData,\n                    moveView: view,\n                    owner: tmlpOutlet,\n                    index: this.verticalScrollContainer.igxForOf.indexOf(rowData)\n                };\n            } else {\n                const rowID = this.primaryKey ? rowData.rowID : this.data.indexOf(rowData.rowID);\n                // child rows contain unique grids, hence should have unique templates\n                return {\n                    $implicit: rowData,\n                    templateID: 'childRow-' + rowID,\n                    index: this.verticalScrollContainer.igxForOf.indexOf(rowData)\n                };\n            }\n        } else {\n            return {\n                $implicit: rowData,\n                templateID: 'dataRow',\n                index: this.verticalScrollContainer.igxForOf.indexOf(rowData)\n            };\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    public get rootGrid() {\n        let currGrid = this;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    /**\n     * @hidden\n    */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - hierarchical grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !(col.parent && col.parent.columnLayout));\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     * For hierarchical child grid it may be scrolled and not fully visible.\n     */\n    public getVisibleContentHeight() {\n        let height = super.getVisibleContentHeight();\n        if (this.parent) {\n            const rootHeight = this.rootGrid.getVisibleContentHeight();\n            const topDiff = this.nativeElement.getBoundingClientRect().top - this.rootGrid.nativeElement.getBoundingClientRect().top;\n            height = rootHeight - topDiff > height ? height : rootHeight - topDiff;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n    */\n    public collapseAllRows() {\n        this.hierarchicalState = [];\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpanded(record: any): boolean {\n        let inState;\n        if (record.childGridsData !== undefined) {\n            inState = !!this.hierarchicalState.find(v => v.rowID === record.rowID);\n        } else {\n            inState = !!this.hierarchicalState.find(v => {\n                return this.primaryKey ? v.rowID === record[this.primaryKey] : v.rowID === record;\n            });\n        }\n        return inState && this.childLayoutList.length !== 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public viewCreatedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            const key = args.context.$implicit.rowID;\n            this.childGridTemplates.set(key, args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public viewMovedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            // view was moved, update owner in cache\n            const key = args.context.$implicit.rowID;\n            const cachedData = this.childGridTemplates.get(key);\n            cachedData.owner = args.owner;\n\n            this.childLayoutList.forEach((layout) => {\n                const relatedGrid = this.hgridAPI.getChildGridByID(layout.key, args.context.$implicit.rowID);\n                if (relatedGrid && relatedGrid.updateOnRender) {\n                    // Detect changes if `expandChildren` has changed when the grid wasn't visible. This is for performance reasons.\n                    relatedGrid.reflow();\n                    relatedGrid.updateOnRender = false;\n                }\n            });\n\n            const childGrids = this.getChildGrids(true);\n            childGrids.forEach((grid) => {\n                grid.updateScrollPosition();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public updateScrollPosition() {\n        const vScr = this.verticalScrollContainer.getVerticalScroll();\n        const hScr = this.parentVirtDir.getHorizontalScroll();\n        if (vScr) {\n            vScr.scrollTop = this.scrollTop;\n        }\n        if (hScr) {\n            hScr.scrollLeft = this.scrollLeft;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getPossibleColumnWidth() {\n        let computedWidth = this.calcWidth || parseInt(\n            this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n        computedWidth -= this.headerHierarchyExpander.nativeElement.clientWidth;\n        return super.getPossibleColumnWidth(computedWidth);\n    }\n\n    protected getChildGrids(inDeph?: boolean) {\n        return this.hgridAPI.getChildGrids(inDeph);\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return super.generateDataFields(data).filter((field) => {\n            const layoutsList = this.parentIsland ? this.parentIsland.children : this.childLayoutList;\n            const keys = layoutsList.map((item) => item.key);\n            return keys.indexOf(field) === -1;\n        });\n    }\n\n    protected _calculateGridBodyHeight() {\n        if (!this.parent || !this.isPercentHeight) {\n            return super._calculateGridBodyHeight();\n        }\n        const bodyHeight = this.defaultTargetBodyHeight;\n        return bodyHeight > 0 ? bodyHeight : null;\n    }\n\n    private hg_verticalScrollHandler(event) {\n        this.scrollTop = event.target.scrollTop;\n    }\n\n    public onContainerScroll() {\n        this.hideOverlays();\n    }\n\n    private hg_horizontalScrollHandler(event) {\n        this.scrollLeft = event.target.scrollLeft;\n    }\n\n    private updateParentSizes() {\n        let currGrid = this.parent;\n        while (currGrid) {\n            const hadScrollbar = currGrid.hasVerticalSroll();\n            const virt = currGrid.verticalScrollContainer;\n            virt.recalcUpdateSizes();\n            const offset = parseInt(virt.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n            const scr = virt.getVerticalScroll();\n            scr.scrollTop = virt.getScrollForIndex(virt.state.startIndex) - offset;\n\n            if (hadScrollbar !== currGrid.hasVerticalSroll()) {\n                // If after recalculations the grid should show vertical scrollbar it should also reflow.\n                currGrid.reflow();\n            }\n\n            currGrid = currGrid.parent;\n        }\n    }\n}\n","import { IgxGridCellComponent } from '../cell.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ChangeDetectorRef, ElementRef, ChangeDetectionStrategy, Component,\n     OnInit, HostListener, NgZone } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-cell',\n    templateUrl: './../cell.component.html'\n})\nexport class IgxHierarchicalGridCellComponent extends IgxGridCellComponent implements OnInit {\n\n    protected hSelection;\n    protected _rootGrid;\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>,\n        public selection: IgxHierarchicalSelectionAPIService,\n        public cdr: ChangeDetectorRef,\n        private helement: ElementRef,\n        protected zone: NgZone,\n        ) {\n            super(selectionService, crudService, gridAPI, selection, cdr, helement, zone);\n            this.hSelection = <IgxHierarchicalSelectionAPIService>selection;\n         }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this._rootGrid = this._getRootGrid();\n    }\n\n    private _getRootGrid() {\n        let currGrid = this.grid;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    // TODO: Extend the new selection service to avoid complete traversal\n    _clearAllHighlights() {\n        [this._rootGrid, ...this._rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    _updateCellSelectionStatus() {\n        this._clearAllHighlights();\n        const currentElement = this.grid.nativeElement;\n        let parentGrid = this.grid;\n        let childGrid;\n        // add highligh to the current grid\n        if (this._rootGrid.id !== currentElement.id) {\n            currentElement.classList.add('igx-grid__tr--highlighted');\n        }\n\n        // add highligh to the current grid\n        while (this._rootGrid.id !== parentGrid.id) {\n            childGrid = parentGrid;\n            parentGrid = parentGrid.parent;\n\n            const parentRowID = parentGrid.hgridAPI.getParentRowId(childGrid);\n            parentGrid.highlightedRowID = parentRowID;\n        }\n        super._updateCellSelectionStatus();\n    }\n\n    // TODO: Refactor\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (event.altKey) {\n            const grid = this.gridAPI.grid;\n            const state = this.gridAPI.grid.hierarchicalState;\n            const collapse = this.row.expanded && (key === 'left' || key === 'arrowleft' || key === 'up' || key === 'arrowup');\n            const expand = !this.row.expanded && (key === 'right' || key === 'arrowright' || key === 'down' || key === 'arrowdown');\n            if (collapse) {\n                grid.hierarchicalState = state.filter(v => {\n                    return v.rowID !== this.row.rowID;\n                });\n            } else if (expand) {\n                state.push({ rowID: this.row.rowID });\n                grid.hierarchicalState = [...state];\n            }\n            if (expand || collapse) {\n                const rowID = this.cellID.rowID;\n                grid.cdr.detectChanges();\n                this.persistFocusedCell(rowID);\n            }\n            return;\n        }\n        super.dispatchEvent(event);\n    }\n    protected persistFocusedCell(rowID) {\n        requestAnimationFrame(() => {\n            // TODO: Test it out\n            const cell = this.gridAPI.get_cell_by_key(rowID, this.column.field);\n            if (cell) {\n                cell.nativeElement.focus();\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    forwardRef,\n    ElementRef,\n    ChangeDetectorRef,\n    ViewChildren,\n    QueryList,\n    ViewChild\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { GridBaseAPIService } from '.././api.service';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nimport { IgxGridCRUDService, IgxGridSelectionService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-row',\n    templateUrl: './hierarchical-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxHierarchicalRowComponent) }]\n})\nexport class IgxHierarchicalRowComponent extends IgxRowComponent<IgxHierarchicalGridComponent> {\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxHierarchicalGridCellComponent), { read: IgxHierarchicalGridCellComponent })\n    public cells: QueryList<IgxHierarchicalGridCellComponent>;\n\n    @ViewChild('expander', { read: ElementRef })\n    public expander: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n        /**\n     * Returns whether the row is expanded.\n     * ```typescript\n     * const RowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('class.igx-grid__tr--expanded')\n    public get expanded() {\n        return this.grid.isExpanded(this.rowData);\n    }\n\n    public get hasChildren() {\n        return  !!this.grid.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid__tr--highlighted')\n    public get highlighted() {\n        return this.grid && this.grid.highlightedRowID === this.rowID;\n    }\n\n    /**\n     * Toggles the hierarchical row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        if (this.added) {\n            return;\n        }\n        const grid = this.gridAPI.grid;\n        const state = this.gridAPI.grid.hierarchicalState;\n        if (!this.expanded) {\n            state.push({ rowID: this.rowID });\n            grid.hierarchicalState = [...state];\n        } else {\n            grid.hierarchicalState = state.filter(v => {\n                return v.rowID !== this.rowID;\n            });\n        }\n        grid.cdr.detectChanges();\n        requestAnimationFrame(() => {\n            grid.reflow();\n        });\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        private hselection: IgxHierarchicalSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            super(gridAPI, crudService, selectionService, hselection, element, cdr);\n        }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { DataUtil } from '../../data-operations/data-util';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchical',\n    pure: true\n})\nexport class IgxGridHierarchicalPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(\n        collection: any,\n        state = [],\n        id: string,\n        primaryKey: any,\n        childKeys: string[],\n        pipeTrigger: number\n        ): any[] {\n        if (childKeys.length === 0) {\n            return collection;\n        }\n        const grid: IgxHierarchicalGridComponent = this.gridAPI.grid;\n        const result = this.addHierarchy(grid, cloneArray(collection), state, primaryKey, childKeys);\n\n        return result;\n    }\n\n    public addHierarchy<T>(grid, data: T[], state, primaryKey, childKeys: string[]): T[] {\n        const result = [];\n\n        data.forEach((v) => {\n            result.push(v);\n            const childGridsData = {};\n            childKeys.forEach((childKey) => {\n                const childData = v[childKey] ? v[childKey] : null;\n                childGridsData[childKey] = childData;\n            });\n            if (grid.isExpanded(v)) {\n                result.push({ rowID: primaryKey ? v[primaryKey] : v, childGridsData: childGridsData});\n            }\n        });\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchicalPaging',\n    pure: true\n})\nexport class IgxGridHierarchicalPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(collection: any[], page = 0, perPage = 15, id: string, pipeTrigger: number): any[] {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: any[] = DataUtil.page(cloneArray(collection), state);\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxGridModule } from '../grid/grid.module';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxHierarchicalRowComponent } from './hierarchical-row.component';\nimport { IgxGridHierarchicalPipe, IgxGridHierarchicalPagingPipe } from './hierarchical-grid.pipes';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxGridHierarchicalPipe,\n    IgxGridHierarchicalPagingPipe\n  ],\n  exports: [\n    IgxGridModule,\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridModule\n  ],\n  providers: [\n    IgxRowIslandAPIService,\n    IgxHierarchicalSelectionAPIService\n  ]\n})\nexport class IgxHierarchicalGridModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Directive,\n    ContentChild\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxIconModule } from '../icon/index';\n\n/**\n * IgxActionIcon is a container for the action nav icon of the IgxNavbar.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-action-icon'\n})\nexport class IgxActionIconDirective { }\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)\n *\n * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation\n * state such as a \"Go Back\" button. It also supports other actions represented by icons.\n *\n * Example:\n * ```html\n * <igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n *   <igx-icon>search</igx-icon>\n *   <igx-icon>favorite</igx-icon>\n *   <igx-icon>more_vert</igx-icon>\n * </igx-navbar>\n * ```\n */\n\n@Component({\n    selector: 'igx-navbar',\n    templateUrl: 'navbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `\n    ]\n})\n\nexport class IgxNavbarComponent {\n    private static NEXT_ID = 1;\n    private isVisible = true;\n\n    /**\n     *An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-navbar [id]=\"'igx-navbar-12'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-navbar-${NEXT_ID++}`;\n    /**\n     *Returns whether the `IgxNavbarComponent` action button is visible, true/false.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public navBar: IgxNavbarComponent;\n     *ngAfterViewInit(){\n     *    let actionButtonVisibile = this.navBar.isActionButtonVisible;\n     *}\n     *```\n     */\n    @Input()\n    public get isActionButtonVisible(): boolean {\n        if (this.actionIconTemplate || !this.actionButtonIcon) {\n            return false;\n        }\n        return this.isVisible;\n    }\n\n    /**\n     *Sets whether the action button of the `IgxNavbarComponent` is visible.\n     *```html\n     *<igx-navbar [title]=\"currentView\" [isActionButtonVisible]=\"'false'\"></igx-navbar>\n     *```\n     */\n    public set isActionButtonVisible(value: boolean) {\n        this.isVisible = value;\n    }\n    /**\n     *An @Input property that sets the icon of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar [title]=\"currentView\" actionButtonIcon=\"arrow_back\"></igx-navbar>\n     *```\n     */\n    @Input() public actionButtonIcon: string;\n\n    /**\n     *An @Input property that sets the title of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input() public title: string;\n\n    /**\n     *The event that will be thrown when the action is executed,\n     *provides reference to the `IgxNavbar` component as argument\n     *```typescript\n     *public actionExc(event){\n     *    alert(\"Action Execute!\");\n     *}\n     * //..\n     *```\n     *```html\n     *<igx-navbar (onAction)=\"actionExc($event)\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Output() public onAction = new EventEmitter<IgxNavbarComponent>();\n\n    /**\n     *An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.\n     *```html\n     *<igx-navbar [titleId]=\"'igx-navbar-7'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input()\n    public titleId = `igx-navbar-${IgxNavbarComponent.NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxActionIconDirective, { read: IgxActionIconDirective })\n    protected actionIconTemplate: IgxActionIconDirective;\n\n    /**\n     *@hidden\n     */\n    public _triggerAction() {\n        this.onAction.emit(this);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavbarComponent, IgxActionIconDirective],\n    exports: [IgxNavbarComponent, IgxActionIconDirective],\n    imports: [IgxButtonModule, IgxIconModule, CommonModule]\n})\nexport class IgxNavbarModule {\n}\n","import { Directive, HostBinding, Input, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDrawerItem]',\n    exportAs: 'igxDrawerItem'\n})\nexport class IgxNavDrawerItemDirective {\n\n    /**\n     * @hidden\n     */\n    @Input('active') public active = false;\n\n    /**\n     * @hidden\n     */\n    @Input('isHeader') public isHeader = false;\n\n    /**\n     * @hidden\n     */\n    public readonly activeClass = 'igx-nav-drawer__item--active';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item')\n    get defaultCSS(): boolean {\n        return !this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--active')\n    get currentCSS(): boolean {\n        return this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--header')\n    get headerCSS(): boolean {\n        return this.isHeader;\n    }\n}\n\n@Directive({\n    selector: '[igxDrawer]'\n})\nexport class IgxNavDrawerTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n\n@Directive({\n    selector: '[igxDrawerMini]'\n})\nexport class IgxNavDrawerMiniTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Renderer,\n    SimpleChange,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { fromEvent, interval, Subscription } from 'rxjs';\nimport { debounce } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { HammerGesturesManager } from '../core/touch';\nimport { IgxNavDrawerMiniTemplateDirective, IgxNavDrawerTemplateDirective } from './navigation-drawer.directives';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navigation Drawer** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navdrawer.html)\n *\n * The Ignite UI Navigation Drawer is a collapsible side navigation container commonly used in combination with the Navbar.\n *\n * Example:\n * ```html\n * <igx-nav-drawer id=\"navigation\" [isOpen]=\"true\">\n *   <ng-template igxDrawer>\n *     <nav>\n *       <span igxDrawerItem [isHeader]=\"true\">Email</span>\n *       <span igxDrawerItem igxRipple>Inbox</span>\n *       <span igxDrawerItem igxRipple>Deleted</span>\n *       <span igxDrawerItem igxRipple>Sent</span>\n *     </nav>\n *   </ng-template>\n * </igx-nav-drawer>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-nav-drawer',\n    templateUrl: 'navigation-drawer.component.html',\n    styles: [`\n        :host {\n            display: block;\n            height: 100%;\n        }\n    `]\n})\nexport class IgxNavigationDrawerComponent implements\n    IToggleView,\n    OnInit,\n    AfterContentInit,\n    OnDestroy,\n    OnChanges {\n\n    @HostBinding('class') public cssClass = 'igx-nav-drawer';\n\n    /**\n     * ID of the component\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerId = this.navdrawer.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     *  <igx-nav-drawer id='navdrawer'></igx-nav-drawer>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-nav-drawer-${NEXT_ID++}`;\n\n    /**\n     * Position of the Navigation Drawer. Can be \"left\"(default) or \"right\".\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerPosition = this.navdrawer.position;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [position]=\"'left'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public position = 'left';\n\n    /**\n     * Enables the use of touch gestures to manipulate the drawer:\n     * - swipe/pan from edge to open, swipe-toggle and pan-drag.\n     *\n     * ```typescript\n     * // get\n     * let gesturesEnabled = this.navdrawer.enableGestures;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [enableGestures]='true'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public enableGestures = true;\n\n    /**\n     * State of the drawer.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsOpen = this.navdrawer.isOpen;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [isOpen]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public isOpen = false;\n\n    /**\n     * When pinned the drawer is relatively positioned instead of sitting above content.\n     * May require additional layout styling.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsPinned = this.navdrawer.pin;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pin]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pin = false;\n\n    /**\n     * Minimum device width required for automatic pin to be toggled.\n     * Default is 1024, can be set to a falsy value to disable this behavior.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerPinTreshold = this.navdrawer.pinThreshold;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pinTreshold]='1024'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pinThreshold = 1024;\n\n    /**\n     * Returns nativeElement of the component.\n     *\n     * @hidden\n     */\n    get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Width of the drawer in its open state. Defaults to \"280px\".\n     *\n     * ```typescript\n     * // get\n     * let navDrawerWidth = this.navdrawer.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [width]=\"'228px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public width = '280px';\n\n    /**\n     * Width of the drawer in its mini state. Defaults to 60px.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerMiniWidth = this.navdrawer.miniWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [miniWidth]=\"'34px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public miniWidth = '60px';\n\n    /**\n     * Pinned state change output for two-way binding.\n     *\n     * ```html\n     * <igx-nav-drawer [(pin)]='isPinned'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public pinChange = new EventEmitter<boolean>(true);\n    /**\n     * Event fired as the Navigation Drawer is about to open.\n     *\n     * ```html\n     *  <igx-nav-drawer (opening)='onOpening()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opening = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has opened.\n     *\n     * ```html\n     * <igx-nav-drawer (opened)='onOpened()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opened = new EventEmitter();\n    /**\n     * Event fired as the Navigation Drawer is about to close.\n     *\n     * ```html\n     * <igx-nav-drawer (closing)='onClosing()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closing = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has closed.\n     *\n     * ```html\n     * <igx-nav-drawer (closed)='onClosed()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closed = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    get template() {\n        if (this.miniTemplate && !this.isOpen) {\n            return this.miniTemplate.template;\n        } else if (this.contentTemplate) {\n            return this.contentTemplate.template;\n        }\n    }\n\n    private _miniTemplate: IgxNavDrawerMiniTemplateDirective;\n    /**\n     * @hidden\n     */\n    public get miniTemplate(): IgxNavDrawerMiniTemplateDirective {\n        return this._miniTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerMiniTemplateDirective, { read: IgxNavDrawerMiniTemplateDirective })\n    public set miniTemplate(v: IgxNavDrawerMiniTemplateDirective) {\n        if (!this.isOpen) {\n            this.setDrawerWidth(v ? this.miniWidth : '');\n        }\n        this._miniTemplate = v;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerTemplateDirective, { read: IgxNavDrawerTemplateDirective })\n    protected contentTemplate: IgxNavDrawerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flexBasis')\n    get flexWidth() {\n        if (!this.pin) {\n            return '0px';\n        }\n        if (this.isOpen) {\n            return this.width;\n        }\n        if (this.miniTemplate && this.miniWidth) {\n            return this.miniWidth;\n        }\n\n        return '0px';\n    }\n\n    /** @hidden */\n    @HostBinding('style.order')\n    get isPinnedRight() {\n        return this.pin && this.position === 'right' ? '1' : '0';\n    }\n\n    private _gesturesAttached = false;\n    private _widthCache: { width: number, miniWidth: number, windowWidth: number } = { width: null, miniWidth: null, windowWidth: null };\n    private _resizeObserver: Subscription;\n    private css: { [name: string]: string; } = {\n        drawer: 'igx-nav-drawer__aside',\n        mini: 'igx-nav-drawer__aside--mini',\n        overlay: 'igx-nav-drawer__overlay',\n        styleDummy: 'igx-nav-drawer__style-dummy'\n    };\n\n    @ViewChild('aside') private _drawer: ElementRef;\n    @ViewChild('overlay') private _overlay: ElementRef;\n    @ViewChild('dummy') private _styleDummy: ElementRef;\n\n    /**\n      * @hidden\n      */\n    get drawer() {\n        return this._drawer.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get overlay() {\n        return this._overlay.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get styleDummy() {\n        return this._styleDummy.nativeElement;\n    }\n\n    /** Pan animation properties */\n    private _panning = false;\n    private _panStartWidth: number;\n    private _panLimit: number;\n\n    /**\n     * Property to decide whether to change width or translate the drawer from pan gesture.\n     *\n     * @hidden\n     */\n    public get hasAnimateWidth(): boolean {\n        return this.pin || !!this.miniTemplate;\n    }\n\n    private _maxEdgeZone = 50;\n    /**\n     * Used for touch gestures (swipe and pan).\n     * Defaults to 50 (in px) and is extended to at least 110% of the mini template width if available.\n     *\n     * @hidden\n     */\n    public get maxEdgeZone() {\n        return this._maxEdgeZone;\n    }\n\n    /**\n     * Gets the Drawer width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     *\n     * @hidden\n     */\n    public get expectedWidth() {\n        return this.getExpectedWidth(false);\n    }\n\n    /**\n     * Get the Drawer mini width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     */\n    public get expectedMiniWidth() {\n        return this.getExpectedWidth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchManager() {\n        return this._touchManager;\n    }\n\n    /**\n     * Exposes optional navigation service\n     *\n     * @hidden\n     */\n    public get state() {\n        return this._state;\n    }\n\n    constructor(\n        @Inject(ElementRef) private elementRef: ElementRef,\n        @Optional() private _state: IgxNavigationService,\n        // private animate: AnimationBuilder, TODO\n        protected renderer: Renderer,\n        private _touchManager: HammerGesturesManager) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        // DOM and @Input()-s initialized\n        if (this._state) {\n            this._state.add(this.id, this);\n        }\n        if (this.isOpen) {\n            this.setDrawerWidth(this.width);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        // wait for template and ng-content to be ready\n        this.updateEdgeZone();\n        this.checkPinThreshold();\n\n        this.ensureEvents();\n\n        // TODO: apply platform-safe Ruler from http://plnkr.co/edit/81nWDyreYMzkunihfRgX?p=preview\n        // (https://github.com/angular/angular/issues/6515), blocked by https://github.com/angular/angular/issues/6904\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._touchManager.destroy();\n        if (this._state) {\n            this._state.remove(this.id);\n        }\n        if (this._resizeObserver) {\n            this._resizeObserver.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n        // simple settings can come from attribute set (rather than binding), make sure boolean props are converted\n        if (changes.enableGestures && changes.enableGestures.currentValue !== undefined) {\n            this.enableGestures = !!(this.enableGestures && this.enableGestures.toString() === 'true');\n            this.ensureEvents();\n        }\n        if (changes.pin && changes.pin.currentValue !== undefined) {\n            this.pin = !!(this.pin && this.pin.toString() === 'true');\n            if (this.pin) {\n                this._touchManager.destroy();\n                this._gesturesAttached = false;\n            } else {\n                this.ensureEvents();\n            }\n        }\n\n        if (changes.pinThreshold) {\n            if (this.pinThreshold) {\n                this.ensureEvents();\n                this.checkPinThreshold();\n            }\n        }\n\n        if (changes.width && this.isOpen) {\n            this.setDrawerWidth(changes.width.currentValue);\n        }\n\n        if (changes.miniWidth) {\n            if (!this.isOpen) {\n                this.setDrawerWidth(changes.miniWidth.currentValue);\n            }\n            this.updateEdgeZone();\n        }\n    }\n\n    /**\n     * Toggle the open state of the Navigation Drawer.\n     *\n     * ```typescript\n     * this.navdrawer.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Open the Navigation Drawer. Has no effect if already opened.\n     *\n     * ```typescript\n     * this.navdrawer.open();\n     * ```\n     */\n    public open() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (this.isOpen) {\n            return;\n        }\n        this.opening.emit();\n        this.isOpen = true;\n\n        // TODO: Switch to animate API when available\n        // var animationCss = this.animate.css();\n        //     animationCss\n        //         .setStyles({'width':'50px'}, {'width':'400px'})\n        //         .start(this.elementRef.nativeElement)\n        //         .onComplete(() => animationCss.setToStyles({'width':'auto'}).start(this.elementRef.nativeElement));\n\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.setDrawerWidth(this.width);\n    }\n\n    /**\n     * Close the Navigation Drawer. Has no effect if already closed.\n     *\n     * ```typescript\n     * this.navdrawer.close();\n     * ```\n     */\n    public close() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (!this.isOpen) {\n            return;\n        }\n        this.closing.emit();\n\n        this.isOpen = false;\n        this.setDrawerWidth(this.miniTemplate ? this.miniWidth : '');\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleClosedEvent, false);\n    }\n\n    /**\n     * @hidden\n     */\n    protected set_maxEdgeZone(value: number) {\n        this._maxEdgeZone = value;\n    }\n\n    /**\n     * Get the Drawer width for specific state. Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     * @param [mini] - Request mini width instead\n     */\n    protected getExpectedWidth(mini?: boolean): number {\n        if (mini) {\n            if (!this.miniTemplate) {\n                return 0;\n            }\n            if (this.miniWidth) {\n                return parseFloat(this.miniWidth);\n            } else {\n                // if (!this.isOpen) { // This WON'T work due to transition timings...\n                //     return this.elementRef.nativeElement.children[1].offsetWidth;\n                // } else {\n                if (this._widthCache.miniWidth === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, true);\n                    this._widthCache.miniWidth = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, false);\n                }\n                return this._widthCache.miniWidth;\n            }\n        } else {\n            if (this.width) {\n                return parseFloat(this.width);\n            } else {\n                if (this._widthCache.width === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this._widthCache.width = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                }\n                return this._widthCache.width;\n            }\n        }\n    }\n\n    private getWindowWidth() {\n        return (window.innerWidth > 0) ? window.innerWidth : screen.width;\n    }\n\n    /**\n     * Sets the drawer width.\n     */\n    private setDrawerWidth(width: string) {\n        window.requestAnimationFrame(() => {\n            if (this.drawer) {\n                this.renderer.setElementStyle(this.drawer, 'width', width);\n            }\n        });\n    }\n\n    /**\n     * Get current Drawer width.\n     */\n    private getDrawerWidth(): number {\n        return this.drawer.offsetWidth;\n    }\n\n    private ensureEvents() {\n        // set listeners for swipe/pan only if needed, but just once\n        if (this.enableGestures && !this.pin && !this._gesturesAttached) {\n            // Built-in manager handler(L20887) causes endless loop and max stack exception.\n            // https://github.com/angular/angular/issues/6993\n            // Use ours for now (until beta.10):\n            // this.renderer.listen(document, \"swipe\", this.swipe);\n            this._touchManager.addGlobalEventListener('document', 'swipe', this.swipe);\n            this._gesturesAttached = true;\n\n            // this.renderer.listen(document, \"panstart\", this.panstart);\n            // this.renderer.listen(document, \"pan\", this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panstart', this.panstart);\n            this._touchManager.addGlobalEventListener('document', 'panmove', this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panend', this.panEnd);\n        }\n        if (!this._resizeObserver) {\n            this._resizeObserver = fromEvent(window, 'resize').pipe(debounce(() => interval(150)))\n                .subscribe((value) => {\n                    this.checkPinThreshold(value);\n                });\n        }\n    }\n\n    private updateEdgeZone() {\n        let maxValue;\n\n        if (this.miniTemplate) {\n            maxValue = Math.max(this._maxEdgeZone, this.getExpectedWidth(true) * 1.1);\n            this.set_maxEdgeZone(maxValue);\n        }\n    }\n\n    private checkPinThreshold = (evt?: Event) => {\n        let windowWidth;\n        if (this.pinThreshold) {\n            windowWidth = this.getWindowWidth();\n            if (evt && this._widthCache.windowWidth === windowWidth) {\n                return;\n            }\n            this._widthCache.windowWidth = windowWidth;\n            if (!this.pin && windowWidth >= this.pinThreshold) {\n                this.pin = true;\n                this.pinChange.emit(true);\n            } else if (this.pin && windowWidth < this.pinThreshold) {\n                this.pin = false;\n                this.pinChange.emit(false);\n            }\n        }\n    }\n\n    private swipe = (evt: HammerInput) => {\n        // TODO: Could also force input type: http://stackoverflow.com/a/27108052\n        if (!this.enableGestures || evt.pointerType !== 'touch') {\n            return;\n        }\n\n        // HammerJS swipe is horizontal-only by default, don't check deltaY\n        let deltaX;\n        let startPosition;\n        if (this.position === 'right') {\n            // when on the right use inverse of deltaX\n            deltaX = -evt.deltaX;\n            startPosition = this.getWindowWidth() - (evt.center.x + evt.distance);\n        } else {\n            deltaX = evt.deltaX;\n            startPosition = evt.center.x - evt.distance;\n        }\n        // only accept closing swipe (ignoring minEdgeZone) when the drawer is expanded:\n        if ((this.isOpen && deltaX < 0) ||\n            // positive deltaX from the edge:\n            (deltaX > 0 && startPosition < this.maxEdgeZone)) {\n            this.toggle();\n        }\n    }\n\n    private panstart = (evt: HammerInput) => { // TODO: test code\n        if (!this.enableGestures || this.pin || evt.pointerType !== 'touch') {\n            return;\n        }\n        const startPosition = this.position === 'right' ? this.getWindowWidth() - (evt.center.x + evt.distance)\n            : evt.center.x - evt.distance;\n\n        // cache width during animation, flag to allow further handling\n        if (this.isOpen || (startPosition < this.maxEdgeZone)) {\n            this._panning = true;\n            this._panStartWidth = this.getExpectedWidth(!this.isOpen);\n            this._panLimit = this.getExpectedWidth(this.isOpen);\n\n            this.renderer.setElementClass(this.overlay, 'panning', true);\n            this.renderer.setElementClass(this.drawer, 'panning', true);\n        }\n    }\n\n    private pan = (evt: HammerInput) => {\n        // TODO: input.deltaX = prevDelta.x + (center.x - offset.x);\n        // get actual delta (not total session one) from event?\n        // pan WILL also fire after a full swipe, only resize on flag\n        if (!this._panning) {\n            return;\n        }\n        const right: boolean = this.position === 'right';\n        // when on the right use inverse of deltaX\n        const deltaX = right ? -evt.deltaX : evt.deltaX;\n        let visibleWidth;\n        let newX;\n        let percent;\n\n        visibleWidth = this._panStartWidth + deltaX;\n\n        if (this.isOpen && deltaX < 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth <= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panLimit) / (this._panStartWidth - this._panLimit);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panStartWidth;\n                newX = evt.deltaX;\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n\n        } else if (!this.isOpen && deltaX > 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth >= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panStartWidth) / (this._panLimit - this._panStartWidth);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panLimit;\n                newX = (this._panLimit - visibleWidth) * (right ? 1 : -1);\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n        }\n    }\n\n    private panEnd = (evt: HammerInput) => {\n        if (this._panning) {\n            const deltaX = this.position === 'right' ? -evt.deltaX : evt.deltaX;\n            const visibleWidth: number = this._panStartWidth + deltaX;\n            this.resetPan();\n\n            // check if pan brought the drawer to 50%\n            if (this.isOpen && visibleWidth <= this._panStartWidth / 2) {\n                this.close();\n            } else if (!this.isOpen && visibleWidth >= this._panLimit / 2) {\n                this.open();\n            }\n            this._panStartWidth = null;\n        }\n    }\n\n    private resetPan() {\n        this._panning = false;\n        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */\n        this.renderer.setElementClass(this.overlay, 'panning', false);\n        this.renderer.setElementClass(this.drawer, 'panning', false);\n        this.setXSize(0, '');\n    }\n\n    /**\n     * Sets the absolute position or width in case the drawer doesn't change position.\n     * @param x the number pixels to translate on the X axis or the width to set. 0 width will clear the style instead.\n     * @param opacity optional value to apply to the overlay\n     */\n    private setXSize(x: number, opacity?: string) {\n        // Angular polyfills patches window.requestAnimationFrame, but switch to DomAdapter API (TODO)\n        window.requestAnimationFrame(() => {\n            if (this.hasAnimateWidth) {\n                this.renderer.setElementStyle(this.drawer, 'width', x ? Math.abs(x) + 'px' : '');\n            } else {\n                this.renderer.setElementStyle(this.drawer, 'transform', x ? 'translate3d(' + x + 'px,0,0)' : '');\n                this.renderer.setElementStyle(this.drawer, '-webkit-transform',\n                    x ? 'translate3d(' + x + 'px,0,0)' : '');\n            }\n            if (opacity !== undefined) {\n                this.renderer.setElementStyle(this.overlay, 'opacity', opacity);\n            }\n        });\n    }\n\n    private toggleOpenedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.opened.emit();\n    }\n\n    private toggleClosedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleClosedEvent, false);\n        this.closed.emit();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxNavigationDrawerComponent } from './navigation-drawer.component';\nimport {\n    IgxNavDrawerItemDirective,\n    IgxNavDrawerMiniTemplateDirective,\n    IgxNavDrawerTemplateDirective\n} from './navigation-drawer.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    exports: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    imports: [CommonModule]\n})\nexport class IgxNavigationDrawerModule {}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, Component, ElementRef, EventEmitter,\n    forwardRef, HostBinding, Input, NgModule, OnInit, Output, Renderer2,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum SliderType {\n    /**\n     * Slider with single thumb.\n     */\n    SLIDER,\n    /**\n     *  Range slider with multiple thumbs, that can mark the range.\n     */\n    RANGE\n}\n\nenum SliderHandle {\n    FROM,\n    TO\n}\n\nexport interface IRangeSliderValue {\n    lower: number;\n    upper: number;\n}\n\nexport interface ISliderValueChangeEventArgs {\n    oldValue: number | IRangeSliderValue;\n    value: number | IRangeSliderValue;\n}\n\nconst noop = () => {\n};\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Slider** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/slider.html)\n *\n * The Ignite UI Slider allows selection in a given range by moving the thumb along the track. The track\n * can be defined as continuous or stepped, and you can choose between single and range slider types.\n *\n * Example:\n * ```html\n * <igx-slider id=\"slider\"\n *            [minValue]=\"0\" [maxValue]=\"100\"\n *            [isContinuous]=true [(ngModel)]=\"volume\">\n * </igx-slider>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSliderComponent, multi: true }],\n    selector: 'igx-slider',\n    templateUrl: 'slider.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSliderComponent implements ControlValueAccessor, EditorProvider, OnInit, AfterViewInit {\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * If not provided it will be automatically generated.\n     * ```html\n     * <igx-slider [id]=\"'igx-slider-32'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-slider-${NEXT_ID++}`;\n    /**\n     *An @Input property that disables or enables UI interaction.\n     *```html\n     *<igx-slider #slider [disabled]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     *```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     * An @Input property that marks the `IgxSliderComponent` as continuous.\n     * By default is considered that the `IgxSliderComponent` is discrete.\n     * Discrete `IgxSliderComponent` does not have ticks and does not shows bubble labels for values.\n     * ```html\n     * <igx-slider #slider [isContinuous]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public isContinuous = false;\n\n    /**\n     * An @Input property that sets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * sliderType: SliderType = SliderType.RANGE;\n     * //...\n     * ```\n     * ```html\n     * <igx-slider #slider2 [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"0\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public type: SliderType = SliderType.SLIDER;\n\n    /**\n     *An @Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.\n     *```html\n     *<igx-slider #slider [thumbLabelVisibilityDuration]=\"3000\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     *```\n     */\n    @Input()\n    public thumbLabelVisibilityDuration = 750;\n\n    /**\n     * An @Input property that sets the incremental/decremental step of the value when dragging the thumb.\n     * The default step is 1, and step should not be less or equal than 0.\n     * ```html\n     * <igx-slider #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Input()\n    public step = 1;\n\n    /**\n     * This event is emitted when user has stopped interacting the thumb and value is changed.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     *}\n     * ```\n     * ```html\n     * <igx-slider (onValueChange)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<ISliderValueChangeEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public isActiveLabel = false;\n\n    private activeHandle: SliderHandle = SliderHandle.TO;\n\n    @ViewChild('slider')\n    private slider: ElementRef;\n\n    @ViewChild('track')\n    private track: ElementRef;\n\n    @ViewChild('ticks')\n    private ticks: ElementRef;\n\n    @ViewChild('thumbFrom')\n    private thumbFrom: ElementRef;\n\n    @ViewChild('thumbTo')\n    private thumbTo: ElementRef;\n\n\n    // Measures & Coordinates\n    private width = 0;\n    private xOffset = 0;\n    private xPointer = 0;\n    private pPointer = 0;\n\n    // Limit handle travel zone\n    private pMin = 0;\n    private pMax = 1;\n\n    // From/upperValue in percent values\n    private hasViewInit = false;\n    private timer;\n    private _minValue = 0;\n    private _maxValue = 100;\n    private _lowerBound?: number;\n    private _upperBound?: number;\n    private _lowerValue: number;\n    private _upperValue: number;\n    private _trackUpperBound: boolean;\n    private _trackLowerBound: boolean;\n\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    constructor(private renderer: Renderer2) {\n    }\n\n    /**\n     *Returns whether the `IgxSliderComponent` type is RANGE.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderRange = this.slider.isRange;\n     *}\n     * ```\n     */\n    public get isRange(): boolean {\n        const isRange: boolean = this.type === SliderType.RANGE;\n\n        return isRange;\n    }\n\n\n    /**\n     * Returns the maximum value for the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMax = this.slider.maxValue;\n     *}\n     * ```\n     */\n    public get maxValue(): number {\n        return this._maxValue;\n    }\n\n    /**\n     * Sets the maximal value for the `IgxSliderComponent`.\n     * The default maximum value is 100.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set maxValue(value: number) {\n        if (value <= this._minValue) {\n            this._maxValue = this._minValue + 1;\n        } else {\n            this._maxValue = value;\n        }\n\n        if (this._trackUpperBound) {\n            this._upperBound = this._maxValue;\n        }\n        this.invalidateValue();\n    }\n\n    /**\n     *Returns the minimal value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMin = this.slider.minValue;\n     *}\n     *```\n     */\n    public get minValue(): number {\n        return this._minValue;\n    }\n\n    /**\n     * Sets the minimal value for the `IgxSliderComponent`.\n     * The default minimal value is 0.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public set minValue(value: number) {\n        if (value >= this.maxValue) {\n            this._minValue = this.maxValue - 1;\n        } else {\n            this._minValue = value;\n        }\n\n        if (this._trackLowerBound) {\n            this._lowerBound = this._minValue;\n        }\n        this.invalidateValue();\n    }\n\n    /**\n     * Returns the lower boundary of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderLowBound = this.slider.lowerBound;\n     *}\n     *```\n     */\n    public get lowerBound(): number {\n        return this._lowerBound;\n    }\n\n    /**\n     * Sets the lower boundary of the `IgxSliderComponent`.\n     * If not set is the same as min value.\n     * ```html\n     * <igx-slider [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set lowerBound(value: number) {\n        if (this._trackLowerBound) {\n            this._trackLowerBound = false;\n        }\n\n        if (value >= this.upperBound) {\n            this._lowerBound = this.minValue;\n            return;\n        }\n\n        this._lowerBound = this.valueInRange(value, this.minValue, this.maxValue);\n    }\n\n    /**\n     * Returns the upper boundary of the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderUpBound = this.slider.upperBound;\n     *}\n     * ```\n     */\n    public get upperBound(): number {\n        return this._upperBound;\n    }\n\n    /**\n     * Sets the upper boundary of the `IgxSliderComponent`.\n     * If not set is the same as max value.\n     * ```html\n     * <igx-slider [step]=\"5\" [upperBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set upperBound(value: number) {\n        if (this._trackUpperBound) {\n            this._trackUpperBound = false;\n        }\n\n        if (value <= this.lowerBound) {\n            this._upperBound = this.maxValue;\n\n            return;\n        }\n\n        this._upperBound = this.valueInRange(value, this.minValue, this.maxValue);\n    }\n\n    /**\n     * Returns the lower value of the `IgxSliderComponent`.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * public lowValue(event){\n     *    let sliderLowValue = this.slider.lowerValue;\n     *}\n     *```\n     */\n    public get lowerValue(): number {\n        return this._lowerValue;\n    }\n\n    /**\n     *Sets the lower value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public lowValue(event){\n     *    this.slider.lowerValue = 120;\n     *}\n     *```\n     */\n    public set lowerValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n\n        if (this.isRange && value > this.upperValue) {\n            return;\n        }\n\n        this._lowerValue = value;\n    }\n\n    /**\n     *Returns the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    let upperValue = this.slider.upperValue;\n     *}\n     *```\n     */\n    public get upperValue() {\n        return this._upperValue;\n    }\n\n    /**\n     *Sets the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    this.slider.upperValue = 120;\n     *}\n     *```\n     */\n    public set upperValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n\n        if (this.isRange && value < this.lowerValue) {\n            return;\n        }\n\n        this._upperValue = value;\n    }\n\n    /**\n     * Returns the slider value. If the slider is of type SLIDER the returned value is number.\n     * If the slider type is RANGE the returned value is object containing lower and upper properties for the values.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public sliderValue(event){\n     *    let sliderVal = this.slider.value;\n     *}\n     *```\n     */\n    public get value(): number | IRangeSliderValue {\n        if (this.isRange) {\n            return {\n                lower: this.snapValueToStep(this.lowerValue),\n                upper: this.snapValueToStep(this.upperValue)\n            };\n        } else {\n            const val = this.snapValueToStep(this.upperValue);\n            return val;\n        }\n    }\n\n    /**\n     * Sets the slider value.\n     * If the slider is of type SLIDER the argument is number. By default if no value is set the default value is\n     * same as lower upper bound.\n     * If the slider type is RANGE the the argument is object containing lower and upper properties for the values.\n     * By default if no value is set the default value is for lower value it is the same as lower bound and if no\n     * value is set for the upper value it is the same as the upper bound.\n     * ```typescript\n     *rangeValue = {\n     *   lower: 30,\n     *   upper: 60\n     *};\n     * ```\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set value(value: number | IRangeSliderValue) {\n        if (!this.isRange) {\n            this.upperValue = this.snapValueToStep(value as number);\n        } else {\n            this.upperValue =\n                this.snapValueToStep((value as IRangeSliderValue) == null ? null : (value as IRangeSliderValue).upper);\n            this.lowerValue =\n                this.snapValueToStep((value as IRangeSliderValue) == null ? null : (value as IRangeSliderValue).lower);\n        }\n\n        this._onChangeCallback(this.value);\n\n        if (this.hasViewInit) {\n            this.positionHandlesAndUpdateTrack();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.lowerBound === undefined) {\n            this.lowerBound = this.minValue;\n            this._trackLowerBound = true;\n        }\n\n        if (this.upperBound === undefined) {\n            this.upperBound = this.maxValue;\n            this._trackUpperBound = true;\n        }\n\n        if (this.isRange) {\n            if (Number.isNaN((this.value as IRangeSliderValue).lower)) {\n                this.value = {\n                    lower: this.lowerBound,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            }\n\n            if (Number.isNaN((this.value as IRangeSliderValue).upper)) {\n                this.value = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: this.upperBound\n                };\n            }\n        } else {\n            if (Number.isNaN(this.value as number)) {\n                this.value = this.lowerBound;\n            }\n        }\n\n        this.pMin = this.valueToFraction(this.lowerBound) || 0;\n        this.pMax = this.valueToFraction(this.upperBound) || 1;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.hasViewInit = true;\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval();\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: any): void {\n        this.value = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden */\n    getEditElement() {\n        return this.isRange ? this.thumbFrom.nativeElement : this.thumbTo.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public showThumbsLabels() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.isContinuous) {\n            return;\n        }\n\n        if (this.timer !== null) {\n            clearInterval(this.timer);\n        }\n\n        this.isActiveLabel = true;\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public onFocus($event: FocusEvent) {\n        if (this.isRange && $event.target === this.thumbFrom.nativeElement) {\n            this.activeHandle = SliderHandle.FROM;\n        }\n\n        if ($event.target === this.thumbTo.nativeElement) {\n            this.activeHandle = SliderHandle.TO;\n        }\n\n        this.toggleThumbLabel();\n    }\n    /**\n     *\n     * @hidden\n     */\n    public onPanEnd($event) {\n        this.hideThumbsLabels();\n        this.emitValueChanged(null);\n    }\n    /**\n     *\n     * @hidden\n     */\n    public hideThumbLabelsOnBlur() {\n        if (this.timer !== null) {\n            clearInterval(this.timer);\n        }\n\n        this.isActiveLabel = false;\n    }\n    /**\n     *\n     * @hidden\n     */\n    public onKeyDown($event: KeyboardEvent) {\n        if (this.disabled) {\n            return true;\n        }\n\n        let incrementSign;\n\n        if ($event.key.endsWith('Left')) {\n            incrementSign = -1;\n        } else if ($event.key.endsWith('Right')) {\n            incrementSign = 1;\n        } else {\n            return;\n        }\n\n        const value = this.value;\n\n        if (this.isRange) {\n            if (this.activeHandle === SliderHandle.FROM) {\n                const newLower = (this.value as IRangeSliderValue).lower + incrementSign * this.step;\n\n                if (newLower >= (this.value as IRangeSliderValue).upper) {\n                    this.thumbTo.nativeElement.focus();\n                    return;\n                }\n\n                this.value = {\n                    lower: newLower,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            } else {\n                const newUpper = (this.value as IRangeSliderValue).upper + incrementSign * this.step;\n\n                if (newUpper <= (this.value as IRangeSliderValue).lower) {\n                    this.thumbFrom.nativeElement.focus();\n                    return;\n                }\n\n                this.value = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: (this.value as IRangeSliderValue).upper + incrementSign * this.step\n                };\n            }\n        } else {\n            this.value = this.value as number + incrementSign * this.step;\n        }\n\n        if (this.hasValueChanged(value)) {\n            this.emitValueChanged(value);\n        }\n\n        this.showThumbsLabels();\n    }\n    /**\n     *\n     * @hidden\n     */\n    public onTap($event) {\n        const value = this.value;\n        this.update($event);\n\n        if (this.hasValueChanged(value)) {\n            this.emitValueChanged(value);\n        }\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public update($event) {\n        if (this.disabled) {\n            return;\n        }\n\n        if ($event.type === 'tap') {\n            this.toggleThumbLabel();\n        }\n\n        // Set width and offset first\n        this.setSliderWidth();\n        this.setSliderOffset();\n\n        // Then get pointer coordinates\n        this.setPointerPosition($event);\n        this.setPointerPercent();\n\n        // Find the closest handle if dual slider\n        if (this.isRange) {\n            this.closestHandle();\n        }\n\n        // Update To/From Values\n        this.setValues();\n        // this.printInfo();\n\n        // Finally do positionHandlesAndUpdateTrack the DOM\n        // based on data values\n        this.positionHandlesAndUpdateTrack();\n        this._onTouchedCallback();\n    }\n\n    /**\n     * @hidden\n     */\n    public hideThumbsLabels() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.isContinuous) {\n            return;\n        }\n\n        this.timer = setTimeout(\n            () => this.isActiveLabel = false,\n            this.thumbLabelVisibilityDuration\n        );\n    }\n\n    private valueInRange(value, min = 0, max = 100) {\n        return Math.max(Math.min(value, max), min);\n    }\n\n    private invalidateValue() {\n        if (!this.isRange) {\n            if (this.value >= this._lowerBound && this.value <= this._upperBound) {\n                this.positionHandlesAndUpdateTrack();\n            } else if (this.value < this._lowerBound) {\n                this.value = this._lowerBound;\n            } else if (this.value > this._upperBound) {\n                this.value = this._upperBound;\n            }\n        } else {\n            const value = this.value as IRangeSliderValue;\n\n            if (value.lower >= this._lowerBound && value.lower <= this._upperBound) {\n                this.positionHandlesAndUpdateTrack();\n            } else if (value.lower < this._lowerBound) {\n                this.value = {\n                    lower: this._lowerBound,\n                    upper: value.upper\n                };\n            } else if (value.lower > this._upperBound) {\n                this.value = {\n                    lower: value.lower,\n                    upper: this._upperBound\n                };\n            }\n\n            if (value.upper >= this._lowerBound && value.upper <= this._upperBound) {\n                this.positionHandlesAndUpdateTrack();\n            } else if (value.upper < this._lowerBound) {\n                this.value = {\n                    lower: this._lowerBound,\n                    upper: value.upper\n                };\n            } else if (value.upper > this._upperBound) {\n                this.value = {\n                    lower: value.lower,\n                    upper: this._upperBound\n                };\n            }\n        }\n    }\n\n    private generateTickMarks(color: string, interval: number) {\n        return `repeating-linear-gradient(\n            ${'to left'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        ), repeating-linear-gradient(\n            ${'to right'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        )`;\n    }\n\n    private toggleThumbLabel() {\n        this.showThumbsLabels();\n        this.hideThumbsLabels();\n    }\n\n    private getSliderOffset(): number {\n        return this.xOffset;\n    }\n\n    private toFixed(num: number): number {\n        num = parseFloat(num.toFixed(20));\n        return num;\n    }\n\n    private positionHandle(handle: ElementRef, position: number) {\n        handle.nativeElement.style.left = `${this.valueToFraction(position) * 100}%`;\n    }\n\n    private positionHandlesAndUpdateTrack() {\n        if (!this.isRange) {\n            this.positionHandle(this.thumbTo, this.value as number);\n        } else {\n            this.positionHandle(this.thumbTo, (this.value as IRangeSliderValue).upper);\n            this.positionHandle(this.thumbFrom, (this.value as IRangeSliderValue).lower);\n        }\n\n        this.updateTrack();\n    }\n\n    private closestHandle() {\n        const fromOffset = this.thumbFrom.nativeElement.offsetLeft + this.thumbFrom.nativeElement.offsetWidth / 2;\n        const toOffset = this.thumbTo.nativeElement.offsetLeft + this.thumbTo.nativeElement.offsetWidth / 2;\n        const match = this.closestTo(this.xPointer, [fromOffset, toOffset]);\n\n        if (match === toOffset) {\n            this.thumbTo.nativeElement.focus();\n        } else if (match === fromOffset) {\n            this.thumbFrom.nativeElement.focus();\n        }\n    }\n\n    private setTickInterval() {\n        if (this.isContinuous) {\n            return;\n        }\n\n        const interval = this.step > 1 ? this.step : null;\n        this.renderer.setStyle(this.ticks.nativeElement, 'background', this.generateTickMarks('white', interval));\n    }\n\n    private snapValueToStep(value: number): number {\n        const valueModStep = (value - this.minValue) % this.step;\n        let snapValue = value - valueModStep;\n\n        if (Math.abs(valueModStep) * 2 >= this.step) {\n            snapValue += (valueModStep > 0) ? this.step : (-this.step);\n        }\n\n        return parseFloat(snapValue.toFixed(20));\n    }\n\n    private closestTo(goal: number, positions: number[]): number {\n        return positions.reduce((previous, current) => {\n            return (Math.abs(goal - current) < Math.abs(goal - previous) ? current : previous);\n        });\n    }\n\n    // Set Values for To/From based on active handle\n    private setValues() {\n        if (this.activeHandle === SliderHandle.TO) {\n            if (this.isRange) {\n                this.value = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: this.fractionToValue(this.pPointer)\n                };\n            } else {\n                this.value = this.fractionToValue(this.pPointer);\n            }\n        }\n\n        if (this.activeHandle === SliderHandle.FROM) {\n            this.value = {\n                lower: this.fractionToValue(this.pPointer),\n                upper: (this.value as IRangeSliderValue).upper\n            };\n        }\n    }\n\n    private setSliderWidth(): void {\n        this.width = this.slider.nativeElement.offsetWidth;\n    }\n\n    private setPointerPosition(e) {\n        this.xPointer = e.center.x - this.getSliderOffset();\n    }\n\n    private setSliderOffset() {\n        const rect = this.slider.nativeElement.getBoundingClientRect();\n        this.xOffset = rect.left;\n    }\n\n    private setPointerPercent() {\n        this.pPointer = this.valueInRange(this.toFixed(this.xPointer / this.width), this.pMin, this.pMax);\n    }\n\n    private valueToFraction(value: number) {\n        return this.valueInRange((value - this.minValue) / (this.maxValue - this.minValue), this.pMin, this.pMax);\n    }\n\n    private fractionToValue(fraction: number): number {\n        const max: number = this.maxValue;\n        const min: number = this.minValue;\n\n        return (max - min) * fraction + min;\n    }\n\n    private updateTrack() {\n        const fromPosition = this.valueToFraction(this.lowerValue);\n        const toPosition = this.valueToFraction(this.upperValue);\n        const positionGap = (this.valueToFraction(this.upperValue) - this.valueToFraction(this.lowerValue));\n\n        if (!this.isRange) {\n            this.track.nativeElement.style.transform = `scaleX(${toPosition})`;\n        }\n\n        if (this.isRange) {\n            this.track.nativeElement.style.transform = `scaleX(${1})`;\n            this.track.nativeElement.style.left = `${fromPosition * 100}%`;\n            this.track.nativeElement.style.width = `${positionGap * 100}%`;\n        }\n    }\n    private hasValueChanged(oldValue) {\n        const isSliderWithDifferentValue: boolean = !this.isRange && oldValue !== this.value;\n        const isRangeWithOneDifferentValue: boolean = this.isRange &&\n            ((oldValue as IRangeSliderValue).lower !== (this.value as IRangeSliderValue).lower ||\n                (oldValue as IRangeSliderValue).upper !== (this.value as IRangeSliderValue).upper);\n\n        return isSliderWithDifferentValue || isRangeWithOneDifferentValue;\n    }\n\n    private emitValueChanged(oldValue: number | IRangeSliderValue) {\n        this.onValueChange.emit({ oldValue, value: this.value });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSliderComponent],\n    exports: [IgxSliderComponent],\n    imports: [CommonModule]\n})\nexport class IgxSliderModule {\n}\n","import {\n    animate,\n    AnimationEvent,\n    state,\n    style,\n    transition,\n    trigger,\n    useAnimation\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    NgZone,\n    Output\n} from '@angular/core';\nimport { fadeIn, fadeOut, slideInBottom, slideOutBottom } from '../animations/main';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Snackbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)\n *\n * The Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can\n * include a link to an action such as Undo.\n *\n * Example:\n * ```html\n * <button (click)=\"snackbar.show()\">Send message</button>\n * <div>\n *   <igx-snackbar #snackbar message=\"Message sent\">\n *   </igx-snackbar>\n * </div>\n * ```\n */\n@Component({\n    animations: [\n        trigger('slideInOut', [\n            transition('void => *', [\n                useAnimation(slideInBottom, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n                        fromPosition: 'translateY(100%)',\n                        toPosition: 'translateY(0)'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(slideOutBottom, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'cubic-bezier(0.4, 0.0, 1, 1)',\n                        fromPosition: 'translateY(0)',\n                        toOpacity: 1,\n                        toPosition: 'translateY(100%)'\n                    }\n                })\n            ])\n        ]),\n        trigger('fadeInOut', [\n            transition('void => *', [\n                useAnimation(fadeIn, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'ease-out'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(fadeOut, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'ease-out'\n                    }\n                })\n            ])\n        ])\n    ],\n    selector: 'igx-snackbar',\n    templateUrl: 'snackbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSnackbarComponent {\n\n    /**\n     * Sets/gets the `id` of the snackbar.\n     * If not set, the `id` of the first snackbar component  will be `\"igx-snackbar-0\"`;\n     * ```html\n     * <igx-snackbar id = \"Snackbar1\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let snackbarId = this.snackbar.id;\n     * ```\n     * @memberof IgxSnackbarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-snackbar-${NEXT_ID++}`;\n    /**\n     * Sets/gets the `message` attribute.\n     * ```html\n     * <igx-snackbar [message] = \"'Snackbar Component'\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let message =  this.snackbar.message;\n     * ```\n     */\n    @Input() public message: string;\n\n    /**\n     * Enables/Disables the visibility of the snackbar.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-snackbar [isVisible] = \"true\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let isVisible =  this.snackbar.isVisible;\n     * ```\n     */\n    @Input() public isVisible = false;\n\n    /**\n     * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-snackbar [autoHide] = \"false\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let autoHide =  this.snackbar.autoHide;\n     * ```\n     */\n    @Input() public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.\n     * Default value is 4000.\n     * ```html\n     * <igx-snackbar [displayTime] = \"2000\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let displayTime = this.snackbar.displayTime;\n     * ```\n     */\n    @Input() public displayTime = 4000;\n\n    /**\n     * Sets/gets the `actionText` attribute.\n     * ```html\n     * <igx-snackbar [actionText] = \"'Action Text'\"></igx-snackbar>\n     * ```\n     */\n    @Input() public actionText?: string;\n\n    /**\n     * An event that will be emitted when the action is executed.\n     * Provides reference to the `IgxSnackbarComponent` as an argument.\n     * ```html\n     * <igx-snackbar (onAction) = \"onAction($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public onAction = new EventEmitter<IgxSnackbarComponent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation starts.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationStarted) = \"animationStarted($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationStarted = new EventEmitter<AnimationEvent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation ends.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationDone) = \"animationDone($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationDone = new EventEmitter<AnimationEvent>();\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.\n     * ```typescript\n     * this.snackbar.show();\n     * ```\n     */\n    public show(): void {\n        clearTimeout(this.timeoutId);\n        setTimeout(this.timeoutId);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n    }\n\n    /**\n     * Hides the snackbar.\n     * ```typescript\n     * this.snackbar.hide();\n     * ```\n     */\n    public hide(): void {\n        this.isVisible = false;\n        clearTimeout(this.timeoutId);\n    }\n    /**\n     *@hidden\n     */\n    public triggerAction(): void {\n        this.onAction.emit(this);\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationStarted(evt: AnimationEvent): void {\n        if (evt.fromState === 'void') {\n            this.animationStarted.emit(evt);\n        }\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationDone(evt: AnimationEvent): void {\n        if (evt.fromState === 'show') {\n            this.animationDone.emit(evt);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSnackbarComponent],\n    exports: [IgxSnackbarComponent],\n    imports: [CommonModule]\n})\nexport class IgxSnackbarModule { }\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum SwitchLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeSwitchEventArgs {\n    checked: boolean;\n    switch: IgxSwitchComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Switch** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/switch.html)\n *\n * The Ignite UI Switch lets the user toggle between on/off or true/false states.\n *\n * Example:\n * ```html\n * <igx-switch [checked]=\"true\">\n *   Simple switch\n * </igx-switch>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSwitchComponent, multi: true }],\n    selector: 'igx-switch',\n    templateUrl: 'switch.component.html'\n})\nexport class IgxSwitchComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.switch.nativeCheckbox;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox') public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.switch.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.switch.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the switch component.\n     * If not set, the `id` of the first switch component will be `\"igx-switch-0\"`.\n     * ```html\n     * <igx-switch id=\"my-first-switch\"></igx-switch>\n     * ```\n     * ```typescript\n     * let switchId =  this.switch.id;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-switch-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the switch component.\n     * If not set, the label of the first switch component will have value `\"igx-switch-0-label\"`.\n     * ```html\n     * <igx-switch labelId=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelId =  this.switch.labelId;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute of the switch component.\n     * ```html\n     * <igx-switch [value] = \"switchValue\"></igx-switch>\n     * ```\n     * ```typescript\n     * let value =  this.switch.value;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the switch component.\n     * ```html\n     * <igx-switch name = \"Switch1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let name =  this.switch.name;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-switch [tabindex]=\"1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.switch.tabindex;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Sets/gets the position of the `label` in the switch component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-switch labelPosition=\"before\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.switch.labelPosition;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelPosition: SwitchLabelPosition | string = 'after';\n    /**\n     * Enables/Disables the ripple effect\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-switch [disableRipple]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.switch.disableRipple;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether switch is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-switch [required]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRequired = this.switch.required;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledBy` attribute.\n     * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-switch aria-labelledby = \"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.switch.ariaLabelledBy;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-switch aria-label=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.switch.ariaLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the switch state is changed.\n     * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.\n     * @memberof IgxSwitchComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeSwitchEventArgs> = new EventEmitter<IChangeSwitchEventArgs>();\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * Returns the class of the switch component.\n     * ```typescript\n     * let switchClass = this.switch.cssClass;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch')\n    public cssClass = 'igx-switch';\n    /**\n     * Sets/gets whether the switch is on or off.\n     * Default value is 'false'.\n     * ```html\n     *  <igx-switch [checked] = \"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isChecked =  this.switch.checked;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-switch [disabled] = \"true\"><igx-switch>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.switch.disabled;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the switch component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.switch.focused = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.switch.focused;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     * Toggles the checked state of the switch.\n     * ```typescript\n     * this.switch.toggle();\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = !this.checked;\n        this.focused = false;\n        this.change.emit({ checked: this.checked, switch: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchClick(event) {\n        event.stopPropagation();\n        this.toggle();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case SwitchLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case SwitchLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\nexport const IGX_SWITCH_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxSwitchRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-switch[required][formControlName],\n    igx-switch[required][formControl],\n    igx-switch[required][ngModel]`,\n    providers: [IGX_SWITCH_REQUIRED_VALIDATOR]\n})\nexport class IgxSwitchRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    exports: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxSwitchModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxIconModule } from '../icon/index';\n\nexport interface ISelectTabEventArgs {\n    tab: IgxTabComponent;\n    panel: IgxTabPanelComponent;\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n/**\n * **Ignite UI for Angular Tab Bar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tabbar.html)\n *\n * The Ignite UI Tab Bar enables the user to navigate among a number of content panels displayed in a single view.\n *\n * Example:\n * ```html\n * <igx-bottom-nav>\n *   <igx-tab-panel label=\"Tab 1\">Tab 1 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 2\">Tab 2 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 3\">Tab 3 Content</igx-tab-panel>\n * </igx-bottom-nav>\n * ```\n */\n@Component({\n    selector: 'igx-bottom-nav',\n    templateUrl: 'tab-bar-content.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxBottomNavComponent implements AfterViewInit {\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.tabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ViewChildren(forwardRef(() => IgxTabComponent)) public tabs: QueryList<IgxTabComponent>;\n    /**\n     * Gets the `IgxTabPanelComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabPanels: QueryList<IgxTabPanelComponent> = this.tabBar.panels;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabPanelComponent)) public panels: QueryList<IgxTabPanelComponent>;\n\n    /**\n     * Sets/gets the `id` of the tab bar.\n     * If not set, the `id` of the first tab bar component will be `\"igx-bottom-nav-0\"`.\n     * ```html\n     * <igx-bottom-nav id = \"my-first-tab-bar\"></igx-bottom-nav>\n     * ```\n     * ```typescript\n     * let tabBarId =  this.tabBar.id;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-bottom-nav-${NEXT_ID++}`;\n    /**\n     * Emits an event when a new tab is selected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTableSelected) = \"onTabSelected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabSelected = new EventEmitter<ISelectTabEventArgs>();\n    /**\n     * Emits an event when a tab is deselected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTabDeselected) = \"onTabDeselected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabDeselected = new EventEmitter<ISelectTabEventArgs>();\n    /**\n     * Gets the `index` of selected tab/panel in the respective collection.\n     * ```typescript\n     * let index =  this.tabBar.selectedIndex;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public selectedIndex = -1;\n    /**\n     * Gets the `itemStyle` of the tab bar.\n     * ```typescript\n     * let itemStyle =  this.tabBar.itemStyle;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-bottom-nav';\n    /**\n     * Gets the selected tab in the tab bar.\n     * ```typescript\n     * let tab =  this.tabBar.selectedTab;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    get selectedTab(): IgxTabComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        // initial selection\n        setTimeout(() => {\n            if (this.selectedIndex === -1) {\n                const selectablePanels = this.panels.filter((p) => !p.disabled);\n                const panel = selectablePanels[0];\n\n                if (panel) {\n                    panel.select();\n                }\n            }\n        }, 0);\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('onTabSelected', ['$event'])\n    public _selectedPanelHandler(args) {\n        this.selectedIndex = args.panel.index;\n\n        this.panels.forEach((p) => {\n            if (p.index !== this.selectedIndex) {\n                this._deselectPanel(p);\n            }\n        });\n    }\n    /**\n     *@hidden\n     */\n    private _deselectPanel(panel: IgxTabPanelComponent) {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (panel.disabled || this.selectedTab.index === panel.index) {\n            return;\n        }\n\n        panel.isSelected = false;\n        this.onTabDeselected.emit({ tab: this.tabs[panel.index], panel });\n    }\n}\n\n// ================================= IgxTabPanelComponent ======================================\n\n@Component({\n    selector: 'igx-tab-panel',\n    templateUrl: 'tab-panel.component.html'\n})\n\nexport class IgxTabPanelComponent implements AfterContentInit, AfterViewChecked {\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-tab-panel';\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab-panel [label] = \"'Tab panel label'\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelLabel = this.tabPanel.label;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public label: string;\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab-panel [icon] = \"panel_icon\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelIcon =  this.tabPanel.icon;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public icon: string;\n    /**\n     * Sets/gets whether the tab panel is disabled.\n     * ```html\n     * <igx-tab-panel [disabled] = \"true\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let isDisabled = this.tabPanel.disabled;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public disabled: boolean;\n    /**\n     * Gets the role of the tab panel.\n     * ```typescript\n     * let tabPanelRole = this.tabPanel.role;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('attr.role') public role = 'tabpanel';\n    /**\n     * Gets whether a tab panel will have `igx-bottom-nav__panel` class.\n     * ```typescript\n     * let styleClass = this.tabPanel.styleClass;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel')\n    get styleClass(): boolean {\n        return (!this.isSelected);\n    }\n    /**\n     * Sets/gets whether a tab panel is selected.\n     * ```typescript\n     * this.tabPanel.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected =  this.tabPanelIsSelected;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel--selected')\n    public isSelected = false;\n    /**\n     * Gets the `itemStyle` of the tab panel.\n     * ```typescript\n     * let itemStyle = this.tabPanel.itemStyle;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n    /**\n     * Gets the tab associated with the panel.\n     * ```typescript\n     * let tab = this.tabPanel.relatedTab;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get relatedTab(): IgxTabComponent {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray()[this.index];\n        }\n    }\n    /**\n     * Gets the index of a panel in the panels collection.\n     * ```typescript\n     * let panelIndex =  this.tabPanel.index\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get index() {\n        if (this._tabBar.panels) {\n            return this._tabBar.panels.toArray().indexOf(this);\n        }\n    }\n    /**\n     * Gets the tab template.\n     * ```typescript\n     * let tabTemplate = this.tabPanel.customTabTemplate\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n    /**\n     * Sets the tab template.\n     * ```typescript\n     * this.tabPanel.customTabTemplate(tabTemplate);\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n    /**\n     *@hidden\n     */\n    private _tabTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective })\n    protected tabTemplate: IgxTabTemplateDirective;\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-bottom-nav__panel-${this.index}`);\n    }\n    /**\n     * Selects the current tab and the tab panel.\n     * ```typescript\n     * this.tabPanel.select();\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public select() {\n        if (this.disabled || this._tabBar.selectedIndex === this.index) {\n            return;\n        }\n\n        this.isSelected = true;\n        this._tabBar.onTabSelected.emit({ tab: this._tabBar.tabs.toArray()[this.index], panel: this });\n    }\n}\n\n// ======================================= IgxTabComponent ==========================================\n\n@Component({\n    selector: 'igx-tab',\n    templateUrl: 'tab.component.html'\n})\n\nexport class IgxTabComponent {\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let tabRole = this.tab.role;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @HostBinding('attr.role') public role = 'tab';\n    /**\n     * Gets the panel associated with the tab.\n     * ```typescript\n     * let tabPanel =  this.tab.relatedPanel;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input() public relatedPanel: IgxTabPanelComponent;\n    /**\n     *@hidden\n     */\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n    /**\n     * Gets the changes and updates accordingly applied to the tab.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n    /**\n     * Gets whether the tab is disabled.\n     * ```typescript\n     * let isDisabled = this.tab.disabled;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get disabled(): boolean {\n        const panel = this.relatedPanel;\n\n        if (panel) {\n            return panel.disabled;\n        }\n    }\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * let isSelected  = this.tab.isSelected;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get isSelected(): boolean {\n        const panel = this.relatedPanel;\n\n        if (panel) {\n            return panel.isSelected;\n        }\n    }\n    /**\n     * Gets the `index` of the tab.\n     * ```typescript\n     * let tabIndex = this.tab.index;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get index(): number {\n        return this._tabBar.tabs.toArray().indexOf(this);\n    }\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n    /**\n     * Selects the current tab and the associated panel.\n     * ```typescript\n     * this.tab.select();\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public select() {\n        this.relatedPanel.select();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    exports: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule]\n})\nexport class IgxBottomNavModule {\n}\n","import { ElementRef, QueryList, EventEmitter } from '@angular/core';\n\n/** @hidden */\nexport abstract class IgxTabsBase {\n    selectedIndicator: ElementRef<any>;\n    tabs: QueryList<IgxTabItemBase>;\n    groups: QueryList<IgxTabsGroupBase>;\n    offset: number;\n    selectedIndex: number;\n    viewPort: ElementRef;\n    contentsContainer: ElementRef;\n    tabsContainer: ElementRef;\n    itemsContainer: ElementRef;\n    headerContainer: ElementRef;\n    onTabItemSelected: EventEmitter<{}>; // TODO: Define event arg interface!\n    scrollElement(element: any, scrollRight: boolean) {}\n}\n\n/** @hidden */\nexport interface IgxTabItemBase {\n    nativeTabItem: ElementRef;\n    select(focusDelay?: number);\n}\n\n/** @hidden */\nexport interface IgxTabsGroupBase {\n    select(focusDelay?: number);\n}\n","import {\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input\n} from '@angular/core';\n\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxTabItemBase, IgxTabsBase } from './tabs.common';\n\n@Component({\n    selector: 'igx-tab-item',\n    templateUrl: 'tab-item.component.html'\n})\n\nexport class IgxTabItemComponent implements IgxTabItemBase {\n\n    /**\n    * Gets the group associated with the tab.\n    * ```html\n    * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;\n    * ```\n    */\n    @Input()\n    public relatedGroup: IgxTabsGroupComponent;\n\n    private _nativeTabItem: ElementRef;\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef) {\n        this._nativeTabItem = _element;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex;\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        this.select();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('window:resize', ['$event'])\n    public onResize(event) {\n        if (this.isSelected) {\n            this._tabs.selectedIndicator.nativeElement.style.width = `${this.nativeTabItem.nativeElement.offsetWidth}px`;\n            this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${this.nativeTabItem.nativeElement.offsetLeft}px)`;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        this.onKeyDown(false);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        this.onKeyDown(true);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        this.onKeyDown(false, 0);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        this.onKeyDown(false, this._tabs.tabs.toArray().length - 1);\n    }\n\n    /**\n     * @hidden\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    /**\n     * @hidden\n     */\n    get nativeTabItem(): ElementRef {\n        return this._nativeTabItem;\n    }\n\n    /**\n    * \tGets whether the tab is disabled.\n    * ```\n    * const disabledItem = this.myTabComponent.tabs.first.disabled;\n    * ```\n    */\n    get disabled(): boolean {\n        const group = this.relatedGroup;\n\n        if (group) {\n            return group.disabled;\n        }\n    }\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * const selectedItem = this.myTabComponent.tabs.first.isSelected;\n     * ```\n     */\n    get isSelected(): boolean {\n        const group = this.relatedGroup;\n\n        if (group) {\n            return group.isSelected;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get index(): number {\n        return this._tabs.tabs.toArray().indexOf(this);\n    }\n\n    /**\n     * @hidden\n     */\n    public select(focusDelay = 200): void {\n        this.relatedGroup.select(focusDelay);\n    }\n\n    private onKeyDown(isLeftArrow: boolean, index = null): void {\n        const tabsArray = this._tabs.tabs.toArray();\n        if (index === null) {\n            index = (isLeftArrow)\n                ? (this._tabs.selectedIndex === 0) ? tabsArray.length - 1 : this._tabs.selectedIndex - 1\n                : (this._tabs.selectedIndex === tabsArray.length - 1) ? 0 : this._tabs.selectedIndex + 1;\n        }\n        const tab = tabsArray[index];\n        tab.select(200);\n    }\n}\n","import {\n    Directive,\n    HostBinding,\n    TemplateRef\n} from '@angular/core';\nimport { IgxTabsBase } from './tabs.common';\n\nenum ButtonStyle {\n    VISIBLE = 'visible',\n    HIDDEN = 'hidden',\n    NOT_DISPLAYED = 'not_displayed'\n}\n\n@Directive({\n    selector: '[igxRightButtonStyle]'\n})\n\nexport class IgxRightButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getRightButtonStyle(): string {\n        const viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;\n\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        const total = offset + viewPortWidth;\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations.\n        if (itemsContainerWidth - headerContainerWidth <= 1 && offset === 0) {\n            return ButtonStyle.NOT_DISPLAYED;\n        }\n\n        if (itemsContainerWidth > total) {\n            return ButtonStyle.VISIBLE;\n        } else {\n            return ButtonStyle.HIDDEN;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxLeftButtonStyle]'\n})\n\nexport class IgxLeftButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getLeftButtonStyle(): string {\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n\n        if (offset === 0) {\n            // Fix for IE 11, a difference is accumulated from the widths calculations.\n            if (itemsContainerWidth - headerContainerWidth <= 1) {\n                return ButtonStyle.NOT_DISPLAYED;\n            }\n            return ButtonStyle.HIDDEN;\n        } else {\n            return ButtonStyle.VISIBLE;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabItemTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    Input,\n    TemplateRef,\n    HostListener\n} from '@angular/core';\n\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabsGroupBase } from './tabs.common';\n\n@Component({\n    selector: 'igx-tabs-group',\n    templateUrl: 'tabs-group.component.html'\n})\n\nexport class IgxTabsGroupComponent implements IgxTabsGroupBase, AfterContentInit, AfterViewChecked {\n\n    /**\n    * An @Input property that allows you to enable/disable the `IgxTabGroupComponent`.\n    *```html\n    *<igx-tabs-group label=\"Tab 2  Lorem ipsum dolor sit\" icon=\"home\" [disabled]=\"true\">\n    *```\n    */\n    @Input()\n    public disabled = false;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public icon: string;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public label: string;\n\n    public isSelected = false;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective })\n    protected tabTemplate: IgxTabItemTemplateDirective;\n\n    private _tabTemplate: TemplateRef<any>;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tabpanel';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tabs__group')\n    public styleClass = true;\n\n    @HostListener('window:resize', ['$event'])\n    public onResize(event) {\n        if (this.isSelected) {\n            this.transformContentAnimation(0);\n        }\n    }\n\n    /**\n     * An accessor that returns the `IgxTabItemComponent` component.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabComponent = this.tab.relatedTab;\n     * }\n     * ```\n     */\n    get relatedTab(): IgxTabItemComponent {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray()[this.index] as IgxTabItemComponent;\n        }\n    }\n\n    /**\n     * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabIndex = this.tab.index;\n     * }\n     * ```\n     */\n    get index(): number {\n        if (this._tabs.groups) {\n            return this._tabs.groups.toArray().indexOf(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     *@hidden\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-item-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-tabs__group-${this.index}`);\n\n        if (this.isSelected) {\n            const tabItem = this.relatedTab.nativeTabItem.nativeElement;\n            this.transformContentAnimation(0);\n            this.transformIndicatorAnimation(tabItem);\n        }\n    }\n\n    /**\n     * A method that sets the focus on a tab.\n     * @memberof {@link IgxTabsGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public tab : IgxTabsGroupComponent;\n     *ngAfterViewInit(){\n     *    this.tab.select();\n     *}\n     *```\n     * @param focusDelay A number representing the expected delay.\n     */\n    public select(focusDelay = 200): void {\n        if (this.disabled || this.isSelected) {\n            return;\n        }\n\n        this.isSelected = true;\n        this.relatedTab.tabindex = 0;\n\n        if (focusDelay !== 0) {\n            setTimeout(() => {\n                this.relatedTab.nativeTabItem.nativeElement.focus();\n            }, focusDelay);\n        }\n        this.handleSelection();\n        this._tabs.onTabItemSelected.emit({ tab: this._tabs.tabs.toArray()[this.index], group: this });\n    }\n\n    private handleSelection(): void {\n        const tabElement = this.relatedTab.nativeTabItem.nativeElement;\n\n        // Scroll to the left\n        if (tabElement.offsetLeft < this._tabs.offset) {\n            this._tabs.scrollElement(tabElement, false);\n        }\n\n        // Scroll to the right\n        const viewPortOffsetWidth = this._tabs.viewPort.nativeElement.offsetWidth;\n        const delta = (tabElement.offsetLeft + tabElement.offsetWidth) - (viewPortOffsetWidth + this._tabs.offset);\n        // Fix for IE 11, a difference is accumulated from the widths calculations\n        if (delta > 1) {\n            this._tabs.scrollElement(tabElement, true);\n        }\n\n        this.transformContentAnimation(0.2);\n        this.transformIndicatorAnimation(tabElement);\n    }\n\n    private transformContentAnimation(duration: number): void {\n        const contentOffset = this._tabs.tabsContainer.nativeElement.offsetWidth * this.index;\n        this._tabs.contentsContainer.nativeElement.style.transitionDuration = `${duration}s`;\n        this._tabs.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;\n    }\n\n    private transformIndicatorAnimation(element: HTMLElement): void {\n        this._tabs.selectedIndicator.nativeElement.style.width = `${element.offsetWidth}px`;\n        this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${element.offsetLeft}px)`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxLeftButtonStyleDirective, IgxRightButtonStyleDirective, IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase } from './tabs.common';\n\nexport enum TabsType {\n    FIXED = 'fixed',\n    CONTENTFIT = 'contentfit'\n}\n\n@Component({\n    selector: 'igx-tabs',\n    templateUrl: 'tabs.component.html',\n    providers: [{ provide: IgxTabsBase, useExisting: IgxTabsComponent }]\n})\n\nexport class IgxTabsComponent implements IgxTabsBase, AfterViewInit, OnDestroy {\n\n    /**\n    * Provides an observable collection of all `IgxTabsGroupComponent`s.\n    * ```typescript\n    * const groupItems = this.myTabComponent.tabs;\n    * ```\n    */\n    @ContentChildren(forwardRef(() => IgxTabsGroupComponent))\n    public groups: QueryList<IgxTabsGroupComponent>;\n\n    /**\n    * An @Input property that sets the value of the `selectedIndex`.\n    * Default value is 0.\n    * ```html\n    * <igx-tabs selectedIndex=\"1\">\n    * ```\n    */\n    @Input()\n    public get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n\n    public set selectedIndex(index: number) {\n        this._selectedIndex = index;\n        this.setSelectedGroup();\n    }\n\n    /**\n     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.\n     * By default the header sizing mode is `contentfit`.\n     * ```html\n     * <igx-tabs tabsType=\"fixed\">\n     *     <igx-tabs-group label=\"HOME\">Home</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     */\n    @Input('tabsType')\n    public tabsType: string | TabsType = 'contentfit';\n\n    /**\n    * @hidden\n    */\n    @Input()\n    public class = '';\n\n    /**\n     * Emitted when a tab item is deselected.\n     * ```html\n     * <igx-tabs (onTabItemDeselected)=\"itemDeselected($event)\">\n     *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n     *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     * ```typescript\n     * itemDeselected(e){\n     *      const tabGroup = e.group;\n     *      const tabItem = e.tab;\n     * }\n     * ```\n     */\n    @Output() public onTabItemDeselected = new EventEmitter();\n\n    /**\n    * Emitted when a tab item is selected.\n    * ```html\n    * <igx-tabs (onTabItemSelected)=\"itemSelected($event)\">\n    *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n    *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n    * </igx-tabs>\n    * ```\n    * ```typescript\n    * itemSelected(e){\n    *      const tabGroup = e.group;\n    *      const tabItem = e.tab;\n    * }\n    * ```\n    */\n    @Output() public onTabItemSelected = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('contentsContainer')\n    public contentsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer')\n    public headerContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('itemsContainer')\n    public itemsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('selectedIndicator')\n    public selectedIndicator: ElementRef;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('tabsContainer')\n    public tabsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('viewPort')\n    public viewPort: ElementRef;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * ```typescript\n     * const tabItems = this.myTabComponent.tabs;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxTabItemComponent))\n    public tabs: QueryList<IgxTabItemComponent>;\n\n    /**\n     * @hidden\n     */\n    public calculatedWidth: number;\n\n    /**\n     * @hidden\n     */\n    public visibleItemsWidth: number;\n\n    /**\n     * @hidden\n     */\n    public offset = 0;\n\n    private _groupChanges$: Subscription;\n    private _selectedIndex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    public get cssClass() {\n        const defaultStyle = `igx-tabs`;\n        const fixedStyle = `igx-tabs--fixed`;\n        const iconStyle = `igx-tabs--icons`;\n        const iconLabelFound = this.groups.find((group) => group.icon != null && group.label != null);\n        let css;\n        switch (TabsType[this.tabsType.toUpperCase()]) {\n            case TabsType.FIXED: {\n                css = fixedStyle;\n                break;\n            }\n            default: {\n                css = defaultStyle;\n                break;\n            }\n        }\n\n        // Layout fix for items with icons\n        if (iconLabelFound !== undefined) {\n            css = `${css} ${iconStyle}`;\n        }\n\n        return `${css} ${this.class}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('onTabItemSelected', ['$event'])\n    public selectedGroupHandler(args) {\n        const prevSelectedIndex = this.selectedIndex;\n        if (prevSelectedIndex !== -1 && this.groups.toArray()[prevSelectedIndex] !== undefined) {\n            this.onTabItemDeselected.emit(\n                {\n                    tab: this.groups.toArray()[prevSelectedIndex].relatedTab,\n                    group: this.groups.toArray()[prevSelectedIndex]\n                });\n        }\n\n        this.selectedIndex = args.group.index;\n        this.groups.forEach((p) => {\n            if (p.index !== this.selectedIndex) {\n                this.deselectGroup(p);\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollLeft(event): void {\n        this.scroll(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollRight(event): void {\n        this.scroll(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollElement(element: any, scrollRight: boolean): void {\n        const viewPortWidth = this.viewPort.nativeElement.offsetWidth;\n\n        this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;\n        this.itemsContainer.nativeElement.style.transform = `translate(${-this.offset}px)`;\n    }\n\n    /**\n     * Gets the selected `IgxTabItemComponent`.\n     * ```\n     * const selectedItem = this.myTabComponent.selectedTabItem;\n     * ```\n     */\n    get selectedTabItem(): IgxTabItemComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        requestAnimationFrame(() => {\n            this.setSelectedGroup();\n        });\n\n        this._groupChanges$ = this.groups.changes.subscribe(() => {\n            this.resetSelectionOnCollectionChanged();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._groupChanges$) {\n            this._groupChanges$.unsubscribe();\n        }\n    }\n\n    private setSelectedGroup(): void {\n        requestAnimationFrame(() => {\n            if (this.selectedIndex <= 0 || this.selectedIndex >= this.groups.length) {\n                // if nothing is selected - select the first tabs group\n                this.selectGroupByIndex(0);\n            } else {\n                this.selectGroupByIndex(this.selectedIndex);\n            }\n        });\n    }\n\n    private resetSelectionOnCollectionChanged(): void {\n        setTimeout(() => {\n            if (this.groups.toArray()[this.selectedIndex] !== undefined) {\n                // persist the selected index and applied it to the new collection\n                this.selectGroupByIndex(this.selectedIndex);\n            } else {\n                if (this.selectedIndex >= this.groups.length) {\n                    // in case the selected index is no longer valid, select the last group in the new collection\n                    this.selectGroupByIndex(this.groups.length - 1);\n                }\n            }\n        }, 0);\n    }\n\n    private selectGroupByIndex(selectedIndex: number): void {\n        const selectableGroups = this.groups.filter((selectableGroup) => !selectableGroup.disabled);\n        const group = selectableGroups[selectedIndex];\n\n        if (group) {\n            group.select(0);\n        }\n    }\n\n    private deselectGroup(group: IgxTabsGroupComponent): void {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (group.disabled || this.selectedTabItem.index === group.index) {\n            return;\n        }\n\n        group.isSelected = false;\n        group.relatedTab.tabindex = -1;\n    }\n\n    private scroll(scrollRight: boolean): void {\n        const tabsArray = this.tabs.toArray();\n        for (const tab of tabsArray) {\n            const element = tab.nativeTabItem.nativeElement;\n            if (scrollRight) {\n                if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            } else {\n                if (element.offsetWidth + element.offsetLeft >= this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            }\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    exports: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule, IgxRippleModule]\n})\n\nexport class IgxTabsModule {\n}\n","import { ElementRef } from '@angular/core';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\nexport const IGX_TIME_PICKER_COMPONENT = 'IgxTimePickerComponentToken';\n\n/** @hidden */\nexport interface IgxTimePickerBase {\n    _ampmItems: any[];\n    hourList: ElementRef;\n    minuteList: ElementRef;\n    ampmList: ElementRef;\n    selectedHour: string;\n    selectedMinute: string;\n    selectedAmPm: string;\n    format: string;\n    promptChar: string;\n    cleared: boolean;\n    mode: InteractionMode;\n    nextHour();\n    prevHour();\n    nextMinute();\n    prevMinute();\n    nextAmPm();\n    prevAmPm();\n    okButtonClick(): boolean;\n    cancelButtonClick(): void;\n    scrollHourIntoView(item: string): void;\n    scrollMinuteIntoView(item: string): void;\n    scrollAmPmIntoView(item: string): void;\n    hideOverlay(): void;\n    parseMask(preserveAmPm?: boolean): string;\n}\n\n","/**\n * This file contains all the directives used by the @link IgxTimePickerComponent.\n * You should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    TemplateRef\n} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\n@Directive({\n    selector: '[igxItemList]'\n})\nexport class IgxItemListDirective {\n\n    @Input('igxItemList')\n    public type: string;\n\n    public isActive: boolean;\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private elementRef: ElementRef) { }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-time-picker__column')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__hourList')\n    get hourCSS(): boolean {\n        return this.type === 'hourList';\n    }\n\n    @HostBinding('class.igx-time-picker__minuteList')\n    get minuteCSS(): boolean {\n        return this.type === 'minuteList';\n    }\n\n    @HostBinding('class.igx-time-picker__ampmList')\n    get ampmCSS(): boolean {\n        return this.type === 'ampmList';\n    }\n\n    @HostListener('focus')\n    public onFocus() {\n        this.isActive = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n    }\n\n    private nextItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.nextHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.nextMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.nextAmPm();\n                break;\n            }\n        }\n    }\n\n    private prevItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.prevHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.prevMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.prevAmPm();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.prevItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('hourList') !== -1) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if (listName.indexOf('minuteList') !== -1 && this.timePicker._ampmItems.length !== 0) {\n            this.timePicker.ampmList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('minuteList') !== -1) {\n            this.timePicker.hourList.nativeElement.focus();\n        } else if (listName.indexOf('ampmList') !== -1) {\n            this.timePicker.minuteList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.timePicker.mode === InteractionMode.DropDown) {\n            this.timePicker.hideOverlay();\n            return;\n        }\n        this.timePicker.okButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.escape', ['$event'])\n    public onKeydownEscape(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.timePicker.cancelButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onHover() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('wheel', ['$event'])\n    public onScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.deltaY > 0) {\n            this.nextItem();\n        } else if (event.deltaY < 0) {\n            this.prevItem();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panmove', ['$event'])\n    public onPanMove(event) {\n        if (event.deltaY < 0) {\n            this.nextItem();\n        } else if (event.deltaY > 0) {\n            this.prevItem();\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHourItem]'\n})\nexport class IgxHourItemDirective {\n\n    @Input('igxHourItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedHour;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedHour && this.itemList.isActive;\n    }\n\n    get isSelectedHour(): boolean {\n        return this.timePicker.selectedHour === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollHourIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxMinuteItem]'\n})\nexport class IgxMinuteItemDirective {\n\n    @Input('igxMinuteItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedMinute;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedMinute && this.itemList.isActive;\n    }\n\n    get isSelectedMinute(): boolean {\n        return this.timePicker.selectedMinute === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollMinuteIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxAmPmItem]'\n})\nexport class IgxAmPmItemDirective {\n\n    @Input('igxAmPmItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedAmPm;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedAmPm && this.itemList.isActive;\n    }\n\n    get isSelectedAmPm(): boolean {\n        return this.timePicker.selectedAmPm === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollAmPmIntoView(item);\n        }\n    }\n}\n\n/**\n * This directive should be used to mark which ng-template will be used from IgxTimePicker when re-templating its input group.\n */\n@Directive({\n    selector: '[igxTimePickerTemplate]'\n})\nexport class IgxTimePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n","import { Pipe, PipeTransform, Inject} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\n\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element loses focus.\n **/\n@Pipe({ name: 'displayFormat'})\nexport class TimeDisplayFormatPipe implements PipeTransform {\n\n     constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n     transform(value: any): string {\n\n        const maskAmPM = this.timePicker.parseMask();\n        const mask = this.timePicker.parseMask(false);\n        if (!value || value === mask || value === maskAmPM) {\n            return '';\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        let hour = sections[0];\n        let minutes = sections[1];\n        let amPM = sections[2];\n\n        const format = this.timePicker.format;\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(this.timePicker.promptChar, 'g');\n\n        if (format.indexOf('hh') !== -1 || format.indexOf('HH') !== -1 && hour.indexOf(prompt) !== -1) {\n           hour = hour === prompt + prompt ? '00' : hour.replace(regExp, '0');\n        }\n\n        if (format.indexOf('mm') !== -1 && minutes.indexOf(prompt) !== -1) {\n           minutes = minutes === prompt + prompt ? '00' : minutes.replace(regExp, '0');\n        }\n\n        if (format.indexOf('hh') === -1 && format.indexOf('HH') === -1) {\n            hour = hour.indexOf(prompt) !== -1 ? hour.replace(regExp, '') : hour;\n            const hourVal = parseInt(hour, 10);\n            hour = !hourVal ? '0' : hourVal < 10 && hourVal !== 0 ? hour.replace('0', '') : hour;\n        }\n\n        if (format.indexOf('mm') === -1) {\n            minutes = minutes.indexOf(prompt) !== -1 ? minutes.replace(regExp, '') : minutes;\n            const minutesVal = parseInt(minutes, 10);\n            minutes = !minutesVal ? '0' : minutesVal < 10 && minutesVal !== 0 ? minutes.replace('0', '') : minutes;\n        }\n\n        if (format.indexOf('tt') !== -1 && (amPM !== 'AM' || amPM !== 'PM')) {\n           amPM = amPM.indexOf('p') !== -1 || amPM.indexOf('P') !== -1 ? 'PM' : 'AM';\n        }\n\n        return amPM ? `${hour}:${minutes} ${amPM}` : `${hour}:${minutes}`;\n    }\n}\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element gets focus.\n **/\n@Pipe({ name: 'inputFormat' })\nexport class TimeInputFormatPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n    transform(value: any): string {\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(prompt, 'g');\n\n        let mask: string;\n        if (this.timePicker.cleared) {\n            this.timePicker.cleared = false;\n            mask = this.timePicker.parseMask(false);\n        } else {\n            mask = this.timePicker.parseMask();\n        }\n\n        if (!value || value === mask) {\n            return mask;\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        let hour = sections[0].replace(regExp, '');\n        let minutes = sections[1].replace(regExp, '');\n        const amPM = sections[2];\n\n        const leadZeroHour = (parseInt(hour, 10) < 10 && !hour.startsWith('0')) || hour === '0';\n        const leadZeroMinutes = (parseInt(minutes, 10) < 10 && !minutes.startsWith('0')) || minutes === '0';\n\n        hour = leadZeroHour ? '0' + hour : hour;\n        minutes = leadZeroMinutes ? '0' + minutes : minutes;\n\n        return amPM ? `${hour}:${minutes} ${amPM}` : `${hour}:${minutes}`;\n    }\n}\n","import {\n    CommonModule\n} from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ContentChild,\n    Injectable,\n    AfterViewInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxInputDirective } from '../directives/input/input.directive';\nimport {\n    IgxAmPmItemDirective,\n    IgxHourItemDirective,\n    IgxItemListDirective,\n    IgxMinuteItemDirective,\n    IgxTimePickerTemplateDirective\n} from './time-picker.directives';\nimport { Subject, fromEvent, interval, animationFrameScheduler } from 'rxjs';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxTimePickerBase, IGX_TIME_PICKER_COMPONENT } from './time-picker.common';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll';\nimport { AutoPositionStrategy } from '../services/overlay/position';\nimport { OverlaySettings } from '../services/overlay/utilities';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport { IgxOverlayOutletDirective, IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { TimeDisplayFormatPipe, TimeInputFormatPipe } from './time-picker.pipes';\nimport { ITimePickerResourceStrings, TimePickerResourceStringsEN } from '../core/i18n/time-picker-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { KEYS } from '../core/utils';\nimport { InteractionMode } from '../core/enums';\n\nlet NEXT_ID = 0;\n\nconst HOURS_POS = [0, 1, 2];\nconst MINUTES_POS = [3, 4, 5];\nconst AMPM_POS = [6, 7, 8];\n\nconst ITEMS_COUNT = 7;\n\n@Injectable()\nexport class TimePickerHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\nexport interface IgxTimePickerValueChangedEventArgs {\n    oldValue: Date;\n    newValue: Date;\n}\n\nexport interface IgxTimePickerValidationFailedEventArgs {\n    timePicker: IgxTimePickerComponent;\n    currentValue: Date;\n    setThroughUI: boolean;\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxTimePickerComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: TimePickerHammerConfig\n        },\n        {\n            provide: IGX_TIME_PICKER_COMPONENT,\n            useExisting: IgxTimePickerComponent\n        }\n    ],\n    selector: 'igx-time-picker',\n    templateUrl: 'time-picker.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ]\n})\nexport class IgxTimePickerComponent implements\n    IgxTimePickerBase,\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    OnDestroy,\n    AfterViewInit {\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * ```html\n     * <igx-time-picker [id]=\"'igx-time-picker-5'\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-time-picker-${NEXT_ID++}`;\n\n    /**\n     * An accessor that allows you to set a time using the `value` input.\n     * ```html\n     *public date: Date = new Date(Date.now());\n     *  //...\n     *<igx-time-picker [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set value(value: Date) {\n        if (this._isValueValid(value)) {\n            const oldVal = this._value;\n\n            this._value = value;\n            this._onChangeCallback(value);\n\n            const dispVal = this._formatTime(this.value, this.format);\n            if (this.mode === InteractionMode.DropDown && this._displayValue !== dispVal) {\n                this.displayValue = dispVal;\n            }\n\n            const args: IgxTimePickerValueChangedEventArgs = {\n                oldValue: oldVal,\n                newValue: value\n            };\n            this.onValueChanged.emit(args);\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: value,\n                setThroughUI: false\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * An accessor that returns the value of `igx-time-picker` component.\n     * ```html\n     *@ViewChild(\"MyPick\")\n     *public pick: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let pickSelect = this.pick.value;\n     * }\n     * ```\n     */\n    get value(): Date {\n        return this._value;\n    }\n\n    /**\n     * An @Input property that allows you to disable the `igx-time-picker` component. By default `disabled` is set to false.\n     * ```html\n     * <igx-time-picker [disabled]=\"'true'\" [vertical]=\"true\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: ITimePickerResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): ITimePickerResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.\n     * ```html\n     * <igx-time-picker okButtonLabel='SET' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set okButtonLabel(value: string) {\n        this._okButtonLabel = value;\n    }\n\n    /**\n     * An accessor that returns the label of ok button.\n    */\n    get okButtonLabel(): string {\n        return this._okButtonLabel || this.resourceStrings.igx_time_picker_ok;\n    }\n\n    /**\n     * An @Input property that renders cancel button with custom text.\n     * By default `cancelButtonLabel` is set to Cancel.\n     * ```html\n     * <igx-time-picker cancelButtonLabel='Exit' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set cancelButtonLabel(value: string) {\n        this._cancelButtonLabel = value;\n    }\n\n    /**\n    * An accessor that returns the label of cancel button.\n    */\n    get cancelButtonLabel(): string {\n        return this._cancelButtonLabel || this.resourceStrings.igx_time_picker_cancel;\n    }\n\n    /**\n     * An @Input property that gets/sets the delta by which hour and minute items would be changed <br>\n     * when the user presses the Up/Down keys.\n     * By default `itemsDelta` is set to `{hours: 1, minutes:1}`\n     * ```html\n     *<igx-time-picker [itemsDelta]=\"{hours:3, minutes:5}\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public itemsDelta = { hours: 1, minutes: 1 };\n\n    /**\n     * An @Input property that allows you to set the `minValue` to limit the user input.\n     *```html\n     *public min: string = \"09:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [minValue]=\"min\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public minValue: string;\n\n    /**\n     * An @Input property that allows you to set the `maxValue` to limit the user input.\n     *```html\n     *public max: string = \"18:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [maxValue]=\"max\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public maxValue: string;\n\n    /**\n     * An @Input property that determines the spin behavior. By default `isSpinLoop` is set to true.\n     *The minutes and hour spinning will wrap around by default.\n     *```html\n     *<igx-time-picker [isSpinLoop]=\"false\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * An @Input property that Gets/Sets the orientation of the `igxTimePicker`. By default `vertical` is set to false.\n     * ```html\n     *<igx-time-picker [vertical]=\"true\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>\n     * By default `format` is set to hh:mm tt. <br>\n     * List of time-flags: <br>\n     * `h` : hours field in 12-hours format without leading zero <br>\n     * `hh` : hours field in 12-hours format with leading zero <br>\n     * `H` : hours field in 24-hours format without leading zero <br>\n     * `HH` : hours field in 24-hours format with leading zero <br>\n     * `m` : minutes field without leading zero <br>\n     * `mm` : minutes field with leading zero <br>\n     * `tt` : 2 character string which represents AM/PM field <br>\n     * ```html\n     *<igx-time-picker format=\"HH:m\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    get format() {\n        return this._format || 'hh:mm tt';\n    }\n\n    set format(formatValue: string) {\n        this._format = formatValue;\n        this.mask = this._format.indexOf('tt') !== -1 ? '00:00 LL' : '00:00';\n\n        if (this.displayValue) {\n            this.displayValue = this._formatTime(this.value, this._format);\n        }\n    }\n\n    /**\n     * Sets the character used to prompt the user for input.\n     * Default value is \"'-'\".\n     * ```html\n     * <igx-time-picker [promptChar] = \"'_'\">\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public promptChar = '-';\n\n    /**\n     * An @Input property that allows you to switch the interaction mode between\n     * a dialog picker or dropdown with editable masked input.\n     * Deafult is dialog picker.\n     *```html\n     *public mode = InteractionMode.DROPDOWN;\n     *  //..\n     *<igx-time-picker [mode]=\"mode\"></igx-time-picker>\n     *```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     *@hidden\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n    * An @Input property that allows you to modify overlay positioning, interaction and scroll behavior.\n    * ```typescript\n    * const settings: OverlaySettings = {\n    *      closeOnOutsideClick: true,\n    *      modal: false\n    *  }\n    * ```\n    * ---\n    * ```html\n    * <igx-time-picker [overlaySettings]=\"settings\"></igx-time-picker>\n    * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    /**\n     * Emitted when selection is made. The event contains the selected value. Returns {`oldValue`: `Date`, `newValue`: `Date`}.\n     *```typescript\n     * @ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValueChanged(timepicker){\n     *    this.toast.show()\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker (onValueChanged)=\"onValueChanged($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The value has been changed!\"></igx-toast>\n     *```\n     */\n    @Output()\n    public onValueChanged = new EventEmitter<IgxTimePickerValueChangedEventArgs>();\n\n    /**\n     * Emitted when an invalid value is being set. Returns {`timePicker`: `any`, `currentValue`: `Date`, `setThroughUI`: `boolean`}\n     * ```typescript\n     *public min: string = \"09:00\";\n     *public max: string = \"18:00\";\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValidationFailed(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onValidationFailed)=\"onValidationFailed($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"Value must be between 09:00 and 18:00!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onValidationFailed = new EventEmitter<IgxTimePickerValidationFailedEventArgs>();\n\n    /**\n     * Emitted when a timePicker is being opened.\n     * ```html\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onOpen(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onOpen)=\"onOpen($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The time picker has been opened!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * Emitted when a timePicker is being closed.\n     */\n    @Output()\n    public onClose = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hourList')\n    public hourList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('minuteList')\n    public minuteList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ampmList')\n    public ampmList: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('defaultTimePickerTemplate', { read: TemplateRef })\n    protected defaultTimePickerTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerTemplateDirective, { read: IgxTimePickerTemplateDirective })\n    protected timePickerTemplateDirective: IgxTimePickerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxInputDirective, { read: ElementRef })\n    private _input: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('container')\n    public container: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective)\n    public toggleRef: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('input', { read: ElementRef })\n    private input: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('group', { read: IgxInputGroupComponent })\n    private group: IgxInputGroupComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('dropdownInputTemplate', { read: TemplateRef })\n    private dropdownInputTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ContentChild('dropDownTarget', { read: ElementRef })\n    protected templateDropDownTarget: ElementRef;\n\n    /**\n     * @hidden\n     */\n    public _hourItems = [];\n    /**\n     * @hidden\n     */\n    public _minuteItems = [];\n    /**\n     * @hidden\n     */\n    public _ampmItems = [];\n\n    /**\n     * @hidden\n    */\n    public mask: string;\n    /**\n     * @hidden\n    */\n    public cleared = false;\n    /**\n     * @hidden\n    */\n    public isNotEmpty = false;\n    /**\n     * @hidden\n    */\n    public displayFormat = new TimeDisplayFormatPipe(this);\n    /**\n     * @hidden\n    */\n    public inputFormat = new TimeInputFormatPipe(this);\n\n    /**\n     * @hidden\n     */\n    public selectedHour: string;\n    /**\n     * @hidden\n     */\n    public selectedMinute: string;\n    /**\n     * @hidden\n     */\n    public selectedAmPm: string;\n\n    private _value: Date;\n    private _resourceStrings = CurrentResourceStrings.TimePickerResStrings;\n    private _okButtonLabel = null;\n    private _cancelButtonLabel = null;\n    private _format: string;\n    private _displayValue: string;\n\n    private _isHourListLoop = this.isSpinLoop;\n    private _isMinuteListLoop = this.isSpinLoop;\n\n    private _hourView = [];\n    private _minuteView = [];\n    private _ampmView = [];\n\n    private _dateFromModel: Date;\n    private _destroy$ = new Subject<boolean>();\n    private _dropDownOverlaySettings: OverlaySettings;\n\n    private _prevSelectedHour: string;\n    private _prevSelectedMinute: string;\n    private _prevSelectedAmPm: string;\n\n    private _onTouchedCallback: () => void = () => { };\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n     */\n    get displayValue(): string {\n        if (this._displayValue === undefined) {\n            return this._formatTime(this.value, this.format);\n        }\n        return this._displayValue;\n    }\n\n    set displayValue(value: string) {\n        this._displayValue = value;\n    }\n\n    /**\n     * Returns the current time formatted as string using the `format` option.\n     * If there is no set time the return is an empty string.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let time = this.picker.displayTime;\n     *}\n     *```\n     */\n    public get displayTime(): string {\n        if (this.value) {\n            return this._formatTime(this.value, this.format);\n        }\n        return '';\n    }\n\n    /**\n     * @hidden\n     */\n    get hourView(): string[] {\n        return this._hourView;\n    }\n\n    /**\n     * @hidden\n     */\n    get minuteView(): string[] {\n        return this._minuteView;\n    }\n\n    /**\n     * @hidden\n     */\n    get ampmView(): string[] {\n        return this._ampmView;\n    }\n\n    /**\n     * @hidden\n     */\n    get showClearButton(): boolean {\n        return (this.displayValue && this.displayValue !== this.parseMask(false)) || this.isNotEmpty;\n    }\n\n    /**\n     * @hidden\n     */\n    get validMinuteEntries(): any[] {\n        const minuteEntries = [];\n        for (let i = 0; i < 60; i++) {\n            minuteEntries.push(i);\n        }\n        return minuteEntries;\n    }\n\n    /**\n     * @hidden\n     */\n    get validHourEntries(): any[] {\n        const hourEntries = [];\n        const index = this.format.indexOf('h') !== -1 ? 13 : 24;\n        for (let i = 0; i < index; i++) {\n            hourEntries.push(i);\n        }\n        return hourEntries;\n    }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.timePickerTemplateDirective) {\n            return this.timePickerTemplateDirective.template;\n        }\n        return this.mode === InteractionMode.Dialog ? this.defaultTimePickerTemplate : this.dropdownInputTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxTimePickerComponent\n     */\n    get context() {\n        return {\n            value: this.value,\n            displayTime: this.displayTime,\n            displayValue: this.displayValue,\n            openDialog: () => { this.openDialog(); }\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this._generateHours();\n        this._generateMinutes();\n        if (this.format.indexOf('tt') !== -1) {\n            this._generateAmPm();\n        }\n\n        this._dropDownOverlaySettings = {\n            modal: false,\n            closeOnOutsideClick: true,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy()\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        if (this.mode === InteractionMode.DropDown && this.input) {\n            fromEvent(this.input.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.UP_ARROW || event.key === KEYS.UP_ARROW_IE ||\n                    event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE) {\n                    this.spinOnEdit(event);\n                }\n            });\n        }\n\n        if (this.container && this.group) {\n            this.container.nativeElement.style.width = this.group.element.nativeElement.getBoundingClientRect().width + 'px';\n        }\n\n        if (this.toggleRef) {\n            this.toggleRef.onClosed.pipe(takeUntil(this._destroy$)).subscribe(() => {\n\n                if (this._input) {\n                    this._input.nativeElement.focus();\n                }\n\n                if (this.mode === InteractionMode.DropDown) {\n                    this._onDropDownClosed();\n                }\n\n                this.onClose.emit(this);\n            });\n\n            this.toggleRef.onOpened.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                this.onOpen.emit(this);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onKeydownSpace(event) {\n        this.openDialog();\n        event.preventDefault();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.Alt.ArrowDown')\n    public onAltArrowDown() {\n        this.openDialog();\n    }\n\n    private _scrollItemIntoView(item: string, items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        let itemIntoView;\n        if (items) {\n            const index = (item === 'AM' || item === 'PM') ? items.indexOf(item) : items.indexOf(parseInt(item, 10));\n            let view;\n\n            if (index !== -1) {\n                if (isListLoop) {\n                    if (index > 0) {\n                        selectedItem = this._itemToString(items[index - 1], viewType);\n                        itemIntoView = this._nextItem(items, selectedItem, isListLoop, viewType);\n                    } else {\n                        selectedItem = this._itemToString(items[1], viewType);\n                        itemIntoView = this._prevItem(items, selectedItem, isListLoop, viewType);\n                    }\n                } else {\n                    view = items.slice(index - 3, index + 4);\n                    selectedItem = this._itemToString(items[index], viewType);\n                    itemIntoView = { selectedItem, view };\n                }\n                itemIntoView.view = this._viewToString(itemIntoView.view, viewType);\n            }\n        }\n        return itemIntoView;\n    }\n\n    private _viewToString(view: any, viewType: string): any {\n        for (let i = 0; i < view.length; i++) {\n            if (typeof (view[i]) !== 'string') {\n                view[i] = this._itemToString(view[i], viewType);\n            }\n        }\n        return view;\n    }\n\n    private _itemToString(item: any, viewType: string): string {\n        if (item === null) {\n            item = '';\n        } else if (viewType && typeof (item) !== 'string') {\n            const leadZeroHour = (item < 10 && (this.format.indexOf('hh') !== -1 || this.format.indexOf('HH') !== -1));\n            const leadZeroMinute = (item < 10 && this.format.indexOf('mm') !== -1);\n\n            const leadZero = (viewType === 'hour') ? leadZeroHour : leadZeroMinute;\n            item = (leadZero) ? '0' + item : `${item}`;\n        }\n        return item;\n    }\n\n    private _prevItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex - 4 < 0) {\n                view = items.slice(itemsCount - (4 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3));\n            } else if (selectedIndex + 4 > itemsCount) {\n                view = items.slice(selectedIndex - 4, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            }\n\n            selectedItem = (selectedIndex === 0) ? items[itemsCount - 1] : items[selectedIndex - 1];\n        } else if (selectedIndex > 3) {\n            view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            selectedItem = items[selectedIndex - 1];\n        } else if (selectedIndex === 3) {\n            view = items.slice(0, 7);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _nextItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex < 2) {\n                view = items.slice(itemsCount - (2 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5));\n            } else if (selectedIndex + 4 >= itemsCount) {\n                view = items.slice(selectedIndex - 2, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            }\n\n            selectedItem = (selectedIndex === itemsCount - 1) ? items[0] : items[selectedIndex + 1];\n        } else if (selectedIndex + 1 < itemsCount - 3) {\n            view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            selectedItem = items[selectedIndex + 1];\n        } else if (selectedIndex === itemsCount - 4) {\n            view = items.slice(selectedIndex - 3, itemsCount);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _formatTime(value: Date, format: string): string {\n        if (!value) {\n            return '';\n        } else {\n            let hour = value.getHours();\n            const minute = value.getMinutes();\n            let formattedMinute;\n            let formattedHour;\n            let amPM;\n\n            if (format.indexOf('h') !== -1) {\n                amPM = (hour > 11) ? 'PM' : 'AM';\n\n                if (hour > 12) {\n                    hour -= 12;\n                    formattedHour = hour < 10 && format.indexOf('hh') !== -1 ? '0' + hour : `${hour}`;\n                } else if (hour === 0) {\n                    formattedHour = '12';\n                } else if (hour < 10 && format.indexOf('hh') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            } else {\n                if (hour < 10 && format.indexOf('HH') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            }\n\n            formattedMinute = minute < 10 && format.indexOf('mm') !== -1 ? '0' + minute : `${minute}`;\n\n            return format.replace('hh', formattedHour).replace('h', formattedHour)\n                .replace('HH', formattedHour).replace('H', formattedHour)\n                .replace('mm', formattedMinute).replace('m', formattedMinute)\n                .replace('tt', amPM);\n        }\n    }\n\n    private _updateHourView(start: any, end: any): void {\n        this._hourView = this._viewToString(this._hourItems.slice(start, end), 'hour');\n    }\n\n    private _updateMinuteView(start: any, end: any): void {\n        this._minuteView = this._viewToString(this._minuteItems.slice(start, end), 'minute');\n    }\n\n    private _updateAmPmView(start: any, end: any): void {\n        this._ampmView = this._ampmItems.slice(start, end);\n    }\n\n    private _addEmptyItems(items: string[]): void {\n        for (let i = 0; i < 3; i++) {\n            items.push(null);\n        }\n    }\n\n    private _generateHours(): void {\n        let hourItemsCount = 24;\n        if (this.format.indexOf('h') !== -1) {\n            hourItemsCount = 13;\n        }\n\n        hourItemsCount /= this.itemsDelta.hours;\n\n        let i = this.format.indexOf('H') !== -1 ? 0 : 1;\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n            this._isHourListLoop = false;\n        }\n\n        if (hourItemsCount > 1) {\n            for (i; i < hourItemsCount; i++) {\n                this._hourItems.push(i * this.itemsDelta.hours);\n            }\n        } else {\n            this._hourItems.push(0);\n        }\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n        }\n    }\n\n    private _generateMinutes(): void {\n        const minuteItemsCount = 60 / this.itemsDelta.minutes;\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n            this._isMinuteListLoop = false;\n        }\n\n        for (let i = 0; i < minuteItemsCount; i++) {\n            this._minuteItems.push(i * this.itemsDelta.minutes);\n        }\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n        }\n    }\n\n    private _generateAmPm(): void {\n\n        this._addEmptyItems(this._ampmItems);\n\n        this._ampmItems.push('AM');\n        this._ampmItems.push('PM');\n\n        this._addEmptyItems(this._ampmItems);\n    }\n\n    private _getSelectedTime(): Date {\n        const date = this.value ? new Date(this.value) : new Date();\n        date.setHours(parseInt(this.selectedHour, 10));\n        date.setMinutes(parseInt(this.selectedMinute, 10));\n        date.setSeconds(0);\n        if (this.selectedAmPm === 'PM' && this.selectedHour !== '12') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (this.selectedAmPm === 'AM' && this.selectedHour === '12') {\n            date.setHours(0);\n        }\n        return date;\n    }\n\n    private _convertMinMaxValue(value: string): Date {\n        const date = this.value ? new Date(this.value) : this._dateFromModel ? new Date(this._dateFromModel) : new Date();\n        const sections = value.split(/[\\s:]+/);\n\n        date.setHours(parseInt(sections[0], 10));\n        date.setMinutes(parseInt(sections[1], 10));\n        date.setSeconds(0);\n        if (sections[2] && sections[2] === 'PM' && sections[0] !== '12') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (sections[0] === '12' && sections[2] && sections[2] === 'AM') {\n            date.setHours(0);\n        }\n\n        return date;\n    }\n\n    private _isValueValid(value: Date): boolean {\n        if (this.maxValue && value > this._convertMinMaxValue(this.maxValue)) {\n            return false;\n        } else if (this.minValue && value < this._convertMinMaxValue(this.minValue)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _isEntryValid(val: string): boolean {\n        const sections = val.split(/[\\s:]+/);\n        const re = new RegExp(this.promptChar, 'g');\n\n        const hour = parseInt(sections[0].replace(re, ''), 10);\n        const minutes = parseInt(sections[1].replace(re, ''), 10);\n\n        return this.validHourEntries.indexOf(hour) !== -1 && this.validMinuteEntries.indexOf(minutes) !== -1;\n    }\n\n    private _getCursorPosition(): number {\n        return this.input.nativeElement.selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        this.input.nativeElement.setSelectionRange(start, end);\n    }\n\n    private _updateEditableInput(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this._getSelectedTime(), this.format);\n        }\n    }\n\n    private _spinHours(currentVal: Date, minVal: Date, maxVal: Date, hDelta: number, sign: number): Date {\n        const oldVal = new Date(currentVal);\n\n        currentVal.setMinutes(sign * hDelta);\n        if (currentVal.getDate() !== oldVal.getDate() && this.isSpinLoop) {\n            currentVal.setDate(oldVal.getDate());\n        }\n\n        let minutes = currentVal.getMinutes();\n        if (currentVal.getTime() > maxVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes < minVal.getMinutes() ? 60 + minutes : minutes;\n                minVal.setMinutes(sign * minutes);\n                return minVal;\n            } else {\n                return oldVal;\n            }\n        } else if (currentVal.getTime() < minVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes <= maxVal.getMinutes() ? minutes : minutes - 60;\n                maxVal.setMinutes(minutes);\n                return maxVal;\n            } else {\n                return oldVal;\n            }\n        } else {\n            return currentVal;\n        }\n    }\n\n    private _spinMinutes(currentVal: Date, mDelta: number, sign: number) {\n        let minutes = currentVal.getMinutes() + (sign * mDelta);\n\n        if (minutes < 0 || minutes >= 60) {\n            minutes = this.isSpinLoop ? minutes - (sign * 60) : currentVal.getMinutes();\n        }\n\n        currentVal.setMinutes(minutes);\n        return currentVal;\n    }\n\n    private _initializeContainer() {\n        if (this.value) {\n            const formttedTime = this._formatTime(this.value, this.format);\n            const sections = formttedTime.split(/[\\s:]+/);\n\n            this.selectedHour = sections[0];\n            this.selectedMinute = sections[1];\n\n            if (this._ampmItems !== null) {\n                this.selectedAmPm = sections[2];\n            }\n        }\n\n        if (this.selectedHour === undefined) {\n            this.selectedHour = `${this._hourItems[3]}`;\n        }\n        if (this.selectedMinute === undefined) {\n            this.selectedMinute = '0';\n        }\n        if (this.selectedAmPm === undefined && this._ampmItems !== null) {\n            this.selectedAmPm = this._ampmItems[3];\n        }\n\n        this._prevSelectedHour = this.selectedHour;\n        this._prevSelectedMinute = this.selectedMinute;\n        this._prevSelectedAmPm = this.selectedAmPm;\n\n        this._onTouchedCallback();\n\n        this._updateHourView(0, ITEMS_COUNT);\n        this._updateMinuteView(0, ITEMS_COUNT);\n        this._updateAmPmView(0, ITEMS_COUNT);\n\n        if (this.selectedHour) {\n            this.scrollHourIntoView(this.selectedHour);\n        }\n        if (this.selectedMinute) {\n            this.scrollMinuteIntoView(this.selectedMinute);\n        }\n        if (this.selectedAmPm) {\n            this.scrollAmPmIntoView(this.selectedAmPm);\n        }\n\n        requestAnimationFrame(() => {\n            this.hourList.nativeElement.focus();\n        });\n    }\n\n    private _closeDropDown() {\n        this.toggleRef.close();\n        this._onDropDownClosed();\n    }\n\n    private _onDropDownClosed(): void {\n        const oldValue = this.value;\n        const newVal = this._convertMinMaxValue(this.displayValue);\n\n        if (this._isValueValid(newVal)) {\n            if (!this.value || oldValue.getTime() !== newVal.getTime()) {\n                this.value = newVal;\n            }\n        } else {\n            this.displayValue = this.inputFormat.transform(this._formatTime(oldValue, this.format));\n\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: newVal,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getEditElement() {\n        return this._input.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        // use this flag to make sure that min/maxValue are checked (in _convertMinMaxValue() method)\n        // against the real value when initializing the component and value is bound via ngModel\n        this._dateFromModel = value;\n\n        this.value = value;\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this.value, this.format);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /**\n     * opens the dialog.\n     * ```html\n     *<igx-time-picker #timePicker></igx-time-picker>\n     * ```\n     * ```typescript\n     * @ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;\n     * picker.openDialog();\n     * ```\n     */\n    public openDialog(timePicker: IgxTimePickerComponent = this): void {\n        if (this.toggleRef.collapsed) {\n            let settings;\n            if (this.mode === InteractionMode.Dialog && this.overlaySettings ) {\n                settings = this.overlaySettings;\n            }\n\n            if (this.mode === InteractionMode.DropDown) {\n                settings = this.overlaySettings || this._dropDownOverlaySettings;\n                const posStrategy = settings.positionStrategy;\n\n                if (this.group && posStrategy) {\n                    posStrategy.settings.target = this.group.element.nativeElement;\n                } else if (this.templateDropDownTarget && posStrategy) {\n                    posStrategy.settings.target = this.templateDropDownTarget.nativeElement;\n                } else if (!posStrategy || (posStrategy && !posStrategy.settings.target)) {\n                    throw new Error('There is no target element for the dropdown to attach.' +\n                        'Mark a DOM element with #dropDownTarget ref variable or provide correct overlay positionStrategy.');\n                }\n            }\n\n            if (this.outlet) {\n                settings.outlet = this.outlet;\n            }\n\n            this.toggleRef.open(settings);\n            this._initializeContainer();\n\n        } else if (this.mode === InteractionMode.DropDown) {\n            this._closeDropDown();\n        }\n    }\n\n    /**\n     * Scrolls a hour item into view.\n     * ```typescript\n     *scrhintoView(picker) {\n     *picker.scrollHourIntoView('2');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrhintoView(picker)\"></igx-time-picker>\n     *```\n     *@param item to be scrolled in view.\n     */\n    public scrollHourIntoView(item: string): void {\n        const hourIntoView = this._scrollItemIntoView(item, this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        if (hourIntoView) {\n            this._hourView = hourIntoView.view;\n            this.selectedHour = hourIntoView.selectedItem;\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * Scrolls a minute item into view.\n     * ```typescript\n     *scrMintoView(picker) {\n     *picker.scrollMinuteIntoView('3');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrMintoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollMinuteIntoView(item: string): void {\n        const minuteIntoView = this._scrollItemIntoView(item, this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        if (minuteIntoView) {\n            this._minuteView = minuteIntoView.view;\n            this.selectedMinute = minuteIntoView.selectedItem;\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * Scrolls an ampm item into view.\n     * ```typescript\n     *scrAmPmIntoView(picker) {\n     *picker.scrollAmPmIntoView('PM');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrAmPmIntoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollAmPmIntoView(item: string): void {\n        const ampmIntoView = this._scrollItemIntoView(item, this._ampmItems, this.selectedAmPm, false, null);\n        if (ampmIntoView) {\n            this._ampmView = ampmIntoView.view;\n            this.selectedAmPm = ampmIntoView.selectedItem;\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextHour() {\n        const nextHour = this._nextItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = nextHour.view;\n        this.selectedHour = nextHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevHour() {\n        const prevHour = this._prevItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = prevHour.view;\n        this.selectedHour = prevHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMinute() {\n        const nextMinute = this._nextItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = nextMinute.view;\n        this.selectedMinute = nextMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevMinute() {\n        const prevMinute = this._prevItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = prevMinute.view;\n        this.selectedMinute = prevMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex + 1 < this._ampmItems.length - 3) {\n            this._updateAmPmView(selectedIndex - 2, selectedIndex + 5);\n            this.selectedAmPm = this._ampmItems[selectedIndex + 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public prevAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex > 3) {\n            this._updateAmPmView(selectedIndex - 4, selectedIndex + 3);\n            this.selectedAmPm = this._ampmItems[selectedIndex - 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * If current value is valid selects it, closes the dialog and returns true, otherwise returns false.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\n     * //..\n     * </igx-dialog>\n     * ```\n     */\n    public okButtonClick(): boolean {\n        const time = this._getSelectedTime();\n        if (this._isValueValid(time)) {\n            this.hideOverlay();\n            this.value = time;\n            return true;\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: time,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n            return false;\n        }\n    }\n\n    /**\n     * Closes the dialog without selecting the current value.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\">\n     * //...\n     * </igx-dialog>\n     * ```\n     */\n    public cancelButtonClick(): void {\n        this.hideOverlay();\n\n        this.selectedHour = this._prevSelectedHour;\n        this.selectedMinute = this._prevSelectedMinute;\n        this.selectedAmPm = this._prevSelectedAmPm;\n    }\n\n    /**\n     * Returns an array of the hours currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let hInView = this.picker.hoursInView;\n     *}\n     *```\n     */\n    public hoursInView(): string[] {\n        return this._hourView.filter((hour) => hour !== '');\n    }\n\n    /**\n     * Returns an array of the minutes currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let minInView = this.picker.minutesInView;\n     *}\n     *```\n     */\n    public minutesInView(): string[] {\n        return this._minuteView.filter((minute) => minute !== '');\n    }\n\n    /**\n     * Returns an array of the AM/PM currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let ApInView = this.picker.ampmInView;\n     *}\n     *```\n     */\n    public ampmInView(): string[] {\n        return this._ampmView.filter((ampm) => ampm !== '');\n    }\n\n    /**\n     * @hidden\n     */\n    public hideOverlay(): void {\n        this.toggleRef.close();\n    }\n\n    /**\n     * @hidden\n     */\n    public parseMask(preserveAmPm = true): string {\n        const prompts = this.promptChar + this.promptChar;\n        const amPm = preserveAmPm ? 'AM' : prompts;\n\n        return this.format.indexOf('tt') !== -1 ? `${prompts}:${prompts} ${amPm}` : `${prompts}:${prompts}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public clear(): void {\n        if (this.toggleRef.collapsed) {\n            this.cleared = true;\n            this.isNotEmpty = false;\n\n            const oldVal = new Date(this.value);\n\n            this.displayValue = '';\n            this.value.setHours(0, 0);\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        } else {\n            this.hideOverlay();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInput(event): void {\n        const val = event.target.value;\n        const oldVal = new Date(this.value);\n\n        this.isNotEmpty = val !== this.parseMask(false);\n\n        // handle cases where all empty positions (promts) are filled and we want to update\n        // timepicker own value property if it is a valid Date\n        if (val.indexOf(this.promptChar) === -1) {\n            if (this._isEntryValid(val)) {\n                const newVal = this._convertMinMaxValue(val);\n                if (oldVal.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: val,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n            // handle cases where the user deletes the display value (when pressing backspace or delete)\n        } else if (!this.value || !val || val === this.parseMask(false)) {\n            this.isNotEmpty = false;\n\n            this.value.setHours(0, 0);\n            this.displayValue = val;\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onFocus(event): void {\n        this.isNotEmpty = event.target.value !== this.parseMask(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public onBlur(event): void {\n        const value = event.target.value;\n\n        this.isNotEmpty = value !== '';\n        this.displayValue = value;\n\n        if (value && value !== this.parseMask()) {\n            if (this._isEntryValid(value)) {\n                const newVal = this._convertMinMaxValue(value);\n                if (!this.value || this.value.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: value,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public spinOnEdit(event): void {\n        event.preventDefault();\n\n        let sign: number;\n        let displayVal: string;\n        const currentVal = new Date(this.value);\n        const min = this.minValue ? this._convertMinMaxValue(this.minValue) : this._convertMinMaxValue('00:00');\n        const max = this.maxValue ? this._convertMinMaxValue(this.maxValue) : this._convertMinMaxValue('24:00');\n\n        const cursor = this._getCursorPosition();\n\n        if (event.key) {\n            const key = event.key;\n            sign = key === KEYS.DOWN_ARROW || key === KEYS.DOWN_ARROW_IE ? -1 : 1;\n        }\n\n        if (event.deltaY) {\n            sign = event.deltaY < 0 ? 1 : -1;\n        }\n\n        if (!this.displayValue) {\n            this.value = min;\n            displayVal = this._formatTime(this.value, this.format);\n        } else {\n            const hDelta = this.itemsDelta.hours * 60 + (sign * this.value.getMinutes());\n            const mDelta = this.itemsDelta.minutes;\n            const sections = this.displayValue.split(/[\\s:]+/);\n\n            if (HOURS_POS.indexOf(cursor) !== -1) {\n                this.value = this._spinHours(currentVal, min, max, hDelta, sign);\n            }\n\n            if (MINUTES_POS.indexOf(cursor) !== -1) {\n                this.value = this._spinMinutes(currentVal, mDelta, sign);\n            }\n\n            if (AMPM_POS.indexOf(cursor) !== -1 && this.format.indexOf('tt') !== -1) {\n                sign = sections[2] && sections[2] === 'AM' ? 1 : -1;\n                currentVal.setHours(currentVal.getHours() + (sign * 12));\n\n                this.value = currentVal;\n            }\n\n            displayVal = this._formatTime(this.value, this.format);\n        }\n\n        // minor hack for preventing cursor jumping in IE\n        this._displayValue = this.inputFormat.transform(displayVal);\n        this.input.nativeElement.value = this._displayValue;\n        this._setCursorPosition(cursor);\n\n        requestAnimationFrame(() => {\n            this._setCursorPosition(cursor);\n        });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxTimePickerComponent,\n        IgxHourItemDirective,\n        IgxItemListDirective,\n        IgxMinuteItemDirective,\n        IgxAmPmItemDirective,\n        IgxTimePickerTemplateDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    exports: [\n        IgxTimePickerComponent,\n        IgxTimePickerTemplateDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    imports: [\n        CommonModule,\n        IgxInputGroupModule,\n        IgxIconModule,\n        IgxButtonModule,\n        IgxMaskModule,\n        IgxToggleModule\n    ],\n    providers: []\n})\nexport class IgxTimePickerModule { }\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Toast** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast.html)\n *\n * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot\n * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.\n *\n * Example:\n * ```html\n * <button (click)=\"toast.show()\">Show notification</button>\n * <igx-toast #toast\n *           message=\"Notification displayed\"\n *           displayTime=\"1000\">\n * </igx-toast>\n * ```\n */\n@Component({\n    animations: [\n        trigger('animate', [\n            state('show', style({\n                opacity: 1\n            })),\n            transition('* => show', animate('.20s ease')),\n            transition('show => *', animate('.40s ease-out'))\n        ])\n    ],\n    selector: 'igx-toast',\n    templateUrl: 'toast.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxToastComponent implements IToggleView, OnInit, OnDestroy {\n    /**\n     * Returns a list of available CSS classes.\n     * ```typescript\n     * let toastClasses =  this.toast.CSS_CLASSES;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public readonly CSS_CLASSES = {\n        IGX_TOAST_BOTTOM: 'igx-toast--bottom',\n        IGX_TOAST_MIDDLE: 'igx-toast--middle',\n        IGX_TOAST_TOP: 'igx-toast--top'\n    };\n\n    /**\n     * Sets/gets the `id` of the toast.\n     * If not set, the `id` will have value `\"igx-toast-0\"`.\n     * ```html\n     * <igx-toast id = \"my-first-toast\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastId = this.toast.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-toast-${NEXT_ID++}`;\n\n    /**\n     * Emits an event prior the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShowing) = \"onShowing($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShowing = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event when the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShown) = \"onShown($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShown = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event prior the toast is hidden.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHiding) = \"onHiding($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHiding = new EventEmitter<IgxToastComponent>();\n\n    /**\n     *  Emits an event when the toast is hidden.\n     *  Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHidden) = \"onHidden($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHidden = new EventEmitter<IgxToastComponent>();\n    /**\n     * Sets/gets the `role` attribute.\n     * If not set, `role` will have value `\"alert\"`.\n     * ```html\n     * <igx-toast [role] = \"'notify'\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastRole = this.toast.role;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public role = 'alert';\n    /**\n     * Sets/gets whether the toast will be hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-toast [autoHide] = \"false\"></igx-toast>\n     * ```\n     * ```typescript\n     * let autoHide = this.toast.autoHide;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time span(in milliseconds) which the toast will be visible\n     * after it is being shown.\n     * Default value is `4000`.\n     * ```html\n     * <igx-toast [displayTime] = \"2500\"></igx-toast>\n     * ```\n     * ```typescript\n     * let displayTime = this.toast.displayTime;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public displayTime = 4000;\n\n    /**\n     * Enables/Disables the visibility of the toast.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-toast [isVisible] = \"true\"></igx-toast>\n     * ```\n     * ```typescript\n     * let isVisible = this.toast.isVisible;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public isVisible = false;\n\n    /**\n     * Sets/gets the message that will be shown by the toast.\n     * ```html\n     * <igx-toast [message] = \"Notification\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastMessage = this.toast.message;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public message: string;\n\n    /**\n     * Sets/gets the position of the toast.\n     * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.\n     * ```html\n     * <igx-toast [position] = \"top\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastPosition = this.toast.position;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public position: IgxToastPosition = IgxToastPosition.Bottom;\n\n    /**\n     * Gets the nativeElement of the toast.\n     * ```typescript\n     * let nativeElement = this.toast.element;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService) { }\n\n    /**\n     * Shows the toast.\n     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.\n     * ```typescript\n     * this.toast.show();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public show(): void {\n        clearInterval(this.timeoutId);\n        this.onShowing.emit(this);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n\n        this.onShown.emit(this);\n    }\n\n    /**\n     * Hides the toast.\n     * ```typescript\n     * this.toast.hide();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public hide(): void {\n        this.onHiding.emit(this);\n        this.isVisible = false;\n        this.onHidden.emit(this);\n\n        clearInterval(this.timeoutId);\n    }\n\n    /**\n     * Wraps @show() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public open() {\n        this.show();\n    }\n\n    /**\n     * Wraps @hide() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public close() {\n        this.hide();\n    }\n\n    /**\n     * Toggles the visible state of the toast.\n     * ```typescript\n     * this.toast.toggle();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public toggle() {\n        this.isVisible ? this.close() : this.open();\n    }\n    /**\n     * Sets/gets the class name of the toast based on the `position` value.\n     * ```typescript\n     * let className =  this.toast.mapPositionToClassName();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public mapPositionToClassName(): any {\n        if (this.position === IgxToastPosition.Top) {\n            return this.CSS_CLASSES.IGX_TOAST_TOP;\n        }\n\n        if (this.position === IgxToastPosition.Middle) {\n            return this.CSS_CLASSES.IGX_TOAST_MIDDLE;\n        }\n\n        if (this.position === IgxToastPosition.Bottom) {\n            return this.CSS_CLASSES.IGX_TOAST_BOTTOM;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n    }\n}\n\n/**\n * Enumeration for toast position\n * Can be:\n * Bottom\n * Middle\n * Top\n */\nexport enum IgxToastPosition {\n    Bottom,\n    Middle,\n    Top\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToastComponent],\n    exports: [IgxToastComponent],\n    imports: [CommonModule]\n})\nexport class IgxToastModule { }\n","import { Component } from '@angular/core';\nimport { IgxDropDownGroupComponent } from '../drop-down/index';\n\n/**\n * The `<igx-select-item>` is a container intended for row items in\n * a `<igx-select>` container.\n */\n@Component({\n    selector: 'igx-select-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-select-item\"></ng-content>\n    `\n})\nexport class IgxSelectGroupComponent extends IgxDropDownGroupComponent {\n}\n","import { IgxDropDownItemComponent } from './../drop-down/drop-down-item.component';\nimport { Component, HostBinding, Input, DoCheck } from '@angular/core';\n\n@Component({\n    selector: 'igx-select-item',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxSelectItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    /** @hidden @internal */\n    public get itemText() {\n        return this.elementRef.nativeElement.innerText.trim();\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the select\n     *\n     * ```typescript\n     *  let mySelectedItem = this.select.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     */\n    public get selected() {\n        return !this.isHeader && !this.disabled && this.selection.is_item_selected(this.dropDown.id, this);\n    }\n\n    public set selected(value: any) {\n        if (value && !this.isHeader && !this.disabled) {\n            this.dropDown.selectItem(this);\n        }\n    }\n\n    /** @hidden @internal */\n    public isHeader: boolean;\n\n    ngDoCheck(): void {\n    }\n}\n","import { VerticalAlignment, HorizontalAlignment, PositionSettings, Size, Point, getViewportRect } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position/connected-positioning-strategy';\nimport { IPositionStrategy } from '../services/overlay/position';\nimport { fadeOut, fadeIn } from '../animations/main';\nimport { IgxSelectComponent } from './select.component';\nimport { isIE } from '../core/utils';\n\n/** @hidden */\nenum Direction {\n    Top = -1,\n    Bottom = 1,\n    None = 0\n}\n\n/** @hidden @internal */\nexport class SelectPositioningStrategy extends ConnectedPositioningStrategy implements IPositionStrategy {\n\n    private _selectDefaultSettings = {\n        target: null,\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Top,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut\n    };\n    public settings: PositionSettings;\n\n    constructor(public select: IgxSelectComponent, settings?: PositionSettings) {\n        super();\n        this.settings = Object.assign({}, this._selectDefaultSettings, settings);\n    }\n\n    private defaultWindowToListOffset = 5;\n    private viewPort = getViewportRect(document);\n    private deltaY: number;\n    private deltaX: number;\n    private itemTextPadding: number;\n    private itemTextIndent: number;\n    private inputBorderTop: number;\n    private listContainerBoundRect: DOMRect;\n\n    private positionAndScrollBottom(contentElement: HTMLElement, outBoundsAmount: number) {\n        contentElement.style.top = `${this.viewPort.bottom - this.listContainerBoundRect.height - this.defaultWindowToListOffset}px`;\n        contentElement.firstElementChild.scrollTop -= outBoundsAmount - (this.inputBorderTop - this.defaultWindowToListOffset);\n        this.deltaY = this.viewPort.bottom - this.listContainerBoundRect.height -\n            this.defaultWindowToListOffset - (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private positionNoScroll(contentElement: HTMLElement, CURRENT_POSITION_Y: number) {\n        contentElement.style.top = `${CURRENT_POSITION_Y - this.inputBorderTop}px`;\n        this.deltaY = CURRENT_POSITION_Y - this.inputBorderTop -\n            (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private positionAndScrollTop(contentElement: HTMLElement, outBoundsAmount: number) {\n        contentElement.style.top = `${this.viewPort.top + this.defaultWindowToListOffset}px`;\n        contentElement.firstElementChild.scrollTop += outBoundsAmount + this.inputBorderTop + this.defaultWindowToListOffset;\n        this.deltaY = this.viewPort.top + this.defaultWindowToListOffset -\n            (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private getItemsOutOfView(contentElement: HTMLElement, itemHeight: number): {\n        'currentScroll': number,\n        'remainingScroll': number\n    } {\n        if (contentElement.firstElementChild.scrollHeight <= contentElement.firstElementChild.clientHeight) {\n            return {\n                'currentScroll': 0,\n                'remainingScroll': 0\n            };\n        }\n        const currentScroll = contentElement.firstElementChild.scrollTop;\n        const remainingScroll = this.select.items.length * itemHeight - currentScroll - this.listContainerBoundRect.height;\n        return {\n            'currentScroll': currentScroll,\n            'remainingScroll': remainingScroll\n        };\n    }\n\n    private listOutOfBounds(elementContainer: { top: number, bottom: number }, document: Document): {\n        Direction: Direction,\n        Amount: number\n    } {\n        const container = {\n            TOP: elementContainer.top,\n            BOTTOM: elementContainer.bottom,\n        };\n        const viewPort = getViewportRect(document);\n        const documentElement = {\n            TOP: viewPort.top,\n            BOTTOM: viewPort.bottom\n        };\n        const returnVals = {\n            Direction: Direction.None,\n            Amount: 0\n        };\n        if (documentElement.TOP + this.defaultWindowToListOffset > container.TOP) {\n            returnVals.Direction = Direction.Top;\n            returnVals.Amount = documentElement.TOP - container.TOP;\n        } else if (documentElement.BOTTOM - this.defaultWindowToListOffset < container.BOTTOM) {\n            returnVals.Direction = Direction.Bottom;\n            returnVals.Amount = container.BOTTOM - documentElement.BOTTOM;\n        } else {\n            return null;\n        }\n        return returnVals;\n    }\n\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const inputElement = this.select.input.nativeElement;\n        const inputRect = inputElement.getBoundingClientRect() as DOMRect;\n        this.listContainerBoundRect = contentElement.getBoundingClientRect() as DOMRect;\n        const LIST_HEIGHT = this.listContainerBoundRect.height;\n        if (!initialCall) {\n            this.deltaX = inputRect.left - this.itemTextPadding - this.itemTextIndent;\n            const point = new Point(this.deltaX, inputRect.top + this.deltaY);\n            this.settings.target = point;\n            super.position(contentElement, size);\n            return;\n        }\n\n        const START = {\n            X: inputRect.left,\n            Y: inputRect.top\n        };\n\n        let itemElement;\n        if (this.select.selectedItem) {\n            itemElement = this.select.selectedItem.element.nativeElement;\n            // D.P. Feb 22 2019, #3921 Force item scroll before measuring in IE11, due to base scrollToItem delay\n            if (isIE()) {\n                contentElement.firstElementChild.scrollTop = this.select.calculateScrollPosition(this.select.selectedItem);\n            }\n        } else {\n            itemElement = this.select.getFirstItemElement();\n        }\n        const inputHeight = inputRect.height;\n        const itemBoundRect = itemElement.getBoundingClientRect() as DOMRect;\n        const itemTopListOffset = itemBoundRect.top - this.listContainerBoundRect.top;\n        const itemHeight = itemBoundRect.height;\n\n        let CURRENT_POSITION_Y = START.Y - itemTopListOffset;\n        const CURRENT_BOTTOM_Y = CURRENT_POSITION_Y + this.listContainerBoundRect.height;\n\n        const OUT_OF_BOUNDS: {\n            Direction: Direction,\n            Amount: number\n        } = this.listOutOfBounds({ top: CURRENT_POSITION_Y, bottom: CURRENT_BOTTOM_Y }, document);\n        if (OUT_OF_BOUNDS) {\n            if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                CURRENT_POSITION_Y = START.Y;\n            } else {\n                CURRENT_POSITION_Y = -1 * (LIST_HEIGHT - (itemHeight - (itemHeight - inputHeight) / 2));\n                CURRENT_POSITION_Y += START.Y;\n            }\n        }\n        const inputBorderTop = window.getComputedStyle(inputElement).borderTopWidth;\n        this.inputBorderTop = parseInt(inputBorderTop.slice(0, inputBorderTop.indexOf('p')), 10) || 0;\n        const itemLeftPadding = window.getComputedStyle(itemElement).paddingLeft;\n        const itemTextIndent = window.getComputedStyle(itemElement).textIndent;\n        const numericPadding = parseInt(itemLeftPadding.slice(0, itemLeftPadding.indexOf('p')), 10) || 0;\n        const numericTextIndent = parseInt(itemTextIndent.slice(0, itemTextIndent.indexOf('r')), 10) || 0;\n        this.itemTextPadding = numericPadding;\n        this.itemTextIndent = numericTextIndent;\n        contentElement.style.left += `${START.X - numericPadding - numericTextIndent}px`;\n        contentElement.style.width = inputRect.width + 24 + 32 + 'px';\n        this.deltaX = START.X - numericPadding - numericTextIndent;\n        const currentScroll = this.getItemsOutOfView(contentElement, itemHeight)['currentScroll'];\n        const remainingScroll = this.getItemsOutOfView(contentElement, itemHeight)['remainingScroll'];\n\n        // (5 items or less) no scroll and respectively no remaining scroll\n        if (remainingScroll === 0 && currentScroll === 0) {\n            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n        }\n        // (more than 5 items) there is scroll OR remaining scroll\n        if (remainingScroll !== 0 || currentScroll !== 0) {\n            if (remainingScroll !== 0 && !OUT_OF_BOUNDS) {\n                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n            }\n            // (more than 5 items) and container getting out of the visible port\n            if (remainingScroll !== 0 && OUT_OF_BOUNDS) {\n                // if there is enough remaining scroll to scroll the item\n                if (remainingScroll > itemHeight) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                        this.positionAndScrollTop(contentElement, OUT_OF_BOUNDS.Amount);\n                        return;\n                    }\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        // (more than 5 items) and no current scroll\n                        if (currentScroll === 0) {\n                            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n                            return;\n                        // (more than 5 items) and current scroll\n                        } else {\n                            this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                            return;\n                        }\n                    }\n                }\n                // if there is no enough remaining scroll to scroll the item\n                if (remainingScroll < itemHeight) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                        this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n\n                    }\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                    }\n                }\n            }\n            // (more than 5 items) and no remaining scroll\n            if (remainingScroll === 0 && currentScroll !== 0) {\n                if (OUT_OF_BOUNDS) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                        return;\n                    }\n                }\n                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n            }\n        }\n    }\n}\n","import { IgxInputDirective } from './../directives/input/input.directive';\nimport {\n    Component, ContentChildren, forwardRef, QueryList, ViewChild, Input, ContentChild,\n    AfterContentInit, HostBinding, Directive, TemplateRef, ElementRef, ChangeDetectorRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { IgxDropDownItemBase } from '../drop-down/index';\nimport { IgxInputGroupComponent } from '../input-group/input-group.component';\n\nimport { IgxDropDownComponent } from './../drop-down/drop-down.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { SelectPositioningStrategy } from './select-positioning-strategy';\n\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services/index';\nimport { IGX_DROPDOWN_BASE, ISelectionEventArgs, Navigate } from '../drop-down/drop-down.common';\nimport { CancelableEventArgs } from '../core/utils';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxSelectBase } from './select.common';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxSelectionAPIService } from '../core/selection';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectToggleIcon]'\n})\nexport class IgxSelectToggleIconDirective {\n}\n\nconst noop = () => { };\n\n/**\n * **Ignite UI for Angular Select** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/select.html)\n *\n * The `igxSelect` provides an input with dropdown list allowing selection of a single item.\n *\n * Example:\n * ```html\n * <igx-select #select1 [placeholder]=\"'Pick One'\">\n *   <label igxLabel>Select Label</label>\n *   <igx-select-item *ngFor=\"let item of items\" [value]=\"item.field\">\n *     {{ item.field }}\n *   </igx-select-item>\n * </igx-select>\n * ```\n */\n@Component({\n    selector: 'igx-select',\n    templateUrl: './select.component.html',\n    providers: [\n        { provide: NG_VALUE_ACCESSOR, useExisting: IgxSelectComponent, multi: true },\n        { provide: IGX_DROPDOWN_BASE, useExisting: IgxSelectComponent }],\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSelectComponent extends IgxDropDownComponent implements IgxSelectBase, ControlValueAccessor, AfterContentInit,\n    EditorProvider {\n\n    /** @hidden @internal do not use the drop-down container class */\n    public cssClass = false;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('input', { read: IgxInputDirective }) public input: IgxInputDirective;\n\n    /** @hidden @internal */\n    @ContentChildren(forwardRef(() => IgxSelectItemComponent), { descendants: true })\n    public children: QueryList<IgxSelectItemComponent>;\n\n    /** @hidden @internal */\n    @ContentChild(forwardRef(() => IgxLabelDirective)) label: IgxLabelDirective;\n\n    /** @hidden @internal */\n    public allowItemsFocus = false;\n\n    /** @hidden @internal */\n    public height: string;\n\n    private _overlayDefaults: OverlaySettings;\n\n    private _value: any;\n\n    /**\n     * An @Input property that gets/sets the component value.\n     *\n     * ```typescript\n     * // get\n     * let selectValue = this.select.value;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.select.value = 'London';\n     * ```\n     * ```html\n     * <igx-select [value]=\"value\"></igx-select>\n     * ```\n     */\n    @Input()\n    public get value(): any {\n        return this._value;\n    }\n    public set value(v: any) {\n        if (this._value === v) {\n            return;\n        }\n        this._value = v;\n        this.setSelection(this.items.find(x => x.value === this.value));\n        this.cdr.detectChanges();\n    }\n    /**\n     * An @Input property that sets input placeholder.\n     *\n     */\n    @Input() public placeholder = '';\n    /**\n     * An @Input property that disables the `IgxSelectComponent`.\n     * ```html\n     * <igx-select [disabled]=\"'true'\"></igx-select>\n     * ```\n     */\n    @Input() public disabled = false;\n\n    /**\n     * An @Input property that sets custom OverlaySettings `IgxSelectComponent`.\n     * ```html\n     * <igx-select [overlaySettings] = \"customOverlaySettings\"></igx-select>\n     * ```\n     */\n    @Input()\n    overlaySettings: OverlaySettings;\n\n    /** @hidden @internal */\n    @HostBinding('style.maxHeight')\n    public maxHeight = '256px';\n\n    /** @hidden @internal */\n    public width: string;\n\n    /**\n     * An @Input property that sets how the select will be styled.\n     * The allowed values are `line`, `box` and `border`. The default is `line`.\n     * ```html\n     *<igx-select [type]=\"'box'\"></igx-select>\n     * ```\n     */\n    @Input()\n    public type = 'line';\n\n    /**\n     * An @Input property that sets what display density to be used for the input group.\n     * The allowed values are `compact`, `cosy` and `comfortable`. The default is `comfortable`.\n     * ```html\n     *<igx-select [displayDensity]=\"'compact'\"></igx-select>\n     * ```\n     */\n    @Input()\n    public displayDensity = 'comfortable';\n\n    /**\n     * The custom template, if any, that should be used when rendering the select TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectToggleIconDirective, { read: TemplateRef })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /** @hidden @internal */\n    public get selectionValue() {\n        const selectedItem = this.selectedItem;\n        return selectedItem ? selectedItem.itemText : '';\n    }\n\n    /** @hidden @internal */\n    public get selectedItem(): IgxSelectItemComponent {\n        return this.selection.first_item(this.id);\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService) {\n        super(elementRef, cdr, selection);\n    }\n\n    /** @hidden @internal */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    /** @hidden @internal */\n    public writeValue = (value: any) => {\n        this.value = value;\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: any): void { }\n\n    /** @hidden @internal */\n    public getEditElement(): HTMLElement {\n        return this.input.nativeElement;\n    }\n\n    /** @hidden @internal */\n    public selectItem(newSelection: IgxDropDownItemBase, event?) {\n        const oldSelection = this.selectedItem;\n\n        if (event) {\n            this.toggleDirective.close();\n        }\n        if (newSelection === null || newSelection === oldSelection || newSelection.disabled || newSelection.isHeader) {\n            return;\n        }\n\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        this.setSelection(newSelection);\n        this._value = newSelection.value;\n        this.cdr.detectChanges();\n        this._onChangeCallback(this.value);\n    }\n\n    /** @hidden @internal */\n    public getFirstItemElement(): HTMLElement {\n        return this.children.first.element.nativeElement;\n    }\n\n    /**\n     * Opens the select\n     *\n     * ```typescript\n     * this.select.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        if (this.disabled || this.items.length === 0) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.navigateFirst();\n        }\n\n        super.open(Object.assign({}, this._overlayDefaults, this.overlaySettings, overlaySettings));\n    }\n\n    /** @hidden @internal */\n    ngAfterContentInit() {\n        this._overlayDefaults = {\n            modal: false,\n            closeOnOutsideClick: false,\n            positionStrategy: new SelectPositioningStrategy(this, { target: this.inputGroup.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            excludePositionTarget: true\n        };\n        this.children.changes.subscribe(() => {\n            this.setSelection(this.items.find(x => x.value === this.value));\n            this.cdr.detectChanges();\n        });\n        Promise.resolve().then(() => this.children.notifyOnChanges());\n    }\n\n    /** @hidden @internal */\n    public onToggleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.scrollToItem(this.selectedItem);\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        if (this.collapsed && this.selectedItem) {\n            this.navigateItem(this.selectedItem.itemIndex);\n        }\n        super.navigate(direction, currentIndex);\n    }\n\n    private setSelection(item: IgxDropDownItemBase) {\n        if (item && item.value !== undefined && item.value !== null) {\n            this.selection.set(this.id, new Set([item]));\n        } else {\n            this.selection.clear(this.id);\n        }\n    }\n\n    /** @hidden @internal */\n    public onBlur(): void {\n        if (!this.collapsed) {\n            this.toggleDirective.close();\n        }\n    }\n}\n\n","import { IgxDropDownItemNavigationDirective } from '../drop-down/drop-down-navigation.directive';\nimport { Directive, Input, HostListener, OnDestroy } from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectBase } from './select.common';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectItemNavigation]'\n})\nexport class IgxSelectItemNavigationDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    @Input('igxSelectItemNavigation')\n    public target: IgxSelectBase;\n\n    constructor() { super(null); }\n\n    /** Captures keydown events and calls the appropriate handlers on the target component */\n    handleKeyDown(event: KeyboardEvent) {\n        if (!event || event.shiftKey) {\n            return;\n        }\n\n        const key = event.key.toLowerCase();\n        if (event.altKey && (key === 'arrowdown' || key === 'arrowup' || key === 'down' || key === 'up')) {\n            this.target.toggle();\n            return;\n        }\n\n        if (this.target.collapsed) {\n            switch (key) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'enter':\n                    event.preventDefault();\n                    this.target.open();\n                    return;\n                case 'arrowdown':\n                case 'down':\n                    this.target.navigateNext();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                case 'arrowup':\n                case 'up':\n                    this.target.navigatePrev();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                default:\n                    break;\n            }\n        }\n\n        super.handleKeyDown(event);\n    }\n\n    // tslint:disable:member-ordering\n    private inputStream = '';\n    private clearStream$ = Subscription.EMPTY;\n\n    /** Handle continuous letter typing navigation */\n    @HostListener('keyup', ['$event'])\n    public captureKey(event: KeyboardEvent) {\n        // relying only on key, available on all major browsers:\n        // https://caniuse.com/#feat=keyboardevent-key (IE/Edge quirk doesn't affect letter typing)\n        if (!event || !event.key || event.key.length > 1) {\n            // ignore longer keys ('Alt', 'ArrowDown', etc)\n            return;\n        }\n\n        this.clearStream$.unsubscribe();\n        this.clearStream$ = timer(500).subscribe(() => {\n            this.inputStream = '';\n        });\n        this.inputStream += event.key;\n        const focusedItem = this.target.focusedItem as IgxSelectItemComponent;\n\n        // select the item\n        if (focusedItem && this.inputStream.length > 1 && focusedItem.itemText.toLowerCase().startsWith(this.inputStream.toLowerCase())) {\n            return;\n        }\n        this.activateItemByText(this.inputStream);\n    }\n\n    public activateItemByText(text: string) {\n        const items = this.target.items as IgxSelectItemComponent[];\n        const activeItemIndex = items.indexOf(this.target.focusedItem as IgxSelectItemComponent) || 0;\n        // ^ this is focused OR selected if the dd is closed\n        let nextItem = items.slice(activeItemIndex + 1).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n\n        if (!nextItem) {\n            nextItem = items.slice(0, activeItemIndex).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n        }\n\n        if (!nextItem) {\n            return;\n        }\n\n        if (this.target.collapsed) {\n            this.target.selectItem(nextItem);\n        }\n        this.target.navigateItem(items.indexOf(nextItem));\n    }\n\n    ngOnDestroy(): void {\n        this.clearStream$.unsubscribe();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxDropDownModule } from './../drop-down/index';\nimport { IgxToggleModule } from './../directives/toggle/toggle.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nimport { IgxSelectComponent, IgxSelectToggleIconDirective } from './select.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectItemNavigationDirective } from './select-navigation.directive';\nimport { IgxSelectGroupComponent } from './select-group.component';\n\n/** @hidden */\n@NgModule({\n    declarations: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n        IgxSelectToggleIconDirective, IgxSelectGroupComponent],\n    exports: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n         IgxSelectToggleIconDirective, IgxSelectGroupComponent],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxToggleModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: []\n})\nexport class IgxSelectModule { }\n"],"names":["style","animate","animation","keyframes","baseParams","baseRecipe","base","baseInParams","baseOutParams","Directive","Input","HostListener","NgModule","tslib_1.__values","tslib_1.__extends","Injectable","Pipe","EventEmitter","Output","isDevMode","Subject","ElementRef","fromEvent","filter","takeUntil","ComponentFactoryResolver","ApplicationRef","Injector","AnimationBuilder","Inject","DOCUMENT","NgZone","ChangeDetectorRef","Optional","HostBinding","tslib_1.__decorate","Component","NEXT_ID","warningShown","ViewContainerRef","ViewChild","CommonModule","TemplateRef","IterableDiffers","take","ContentChild","ContentChildren","forwardRef","Self","NgModel","FormControlName","InjectionToken","first","Renderer2","throttle","interval","animationFrameScheduler","NG_VALUE_ACCESSOR","KEYS","noop","nextId","useAnimation","SecurityContext","DomSanitizer","HttpClient","HttpClientModule","Host","ViewChildren","debounce","tap","HammerGestureConfig","HAMMER_GESTURE_CONFIG","trigger","transition","switchMap","skipLast","range","FormsModule","NG_VALIDATORS","CheckboxRequiredValidator","NgControl","ReactiveFormsModule","formatDate","NgModuleRef","ChangeDetectionStrategy","debounceTime","map","LOCALE_ID","DatePipe","DecimalPipe","isIE","QueryList","tslib_1.__spread","SimpleChange","Subscription","getDOM","flatten","Renderer","state","Direction","timer"],"mappings":"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}
