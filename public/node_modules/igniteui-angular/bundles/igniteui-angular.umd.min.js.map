{"version":3,"sources":["ng://igniteui-angular/lib/animations/easings.ts","ng://igniteui-angular/lib/animations/fade/index.ts","node_modules/tslib/tslib.es6.js","ng://igniteui-angular/lib/animations/flip/index.ts","ng://igniteui-angular/lib/animations/rotate/index.ts","ng://igniteui-angular/lib/animations/misc/shake.ts","ng://igniteui-angular/lib/animations/misc/pulsate.ts","ng://igniteui-angular/lib/animations/scale/index.ts","ng://igniteui-angular/lib/animations/slide/index.ts","ng://igniteui-angular/lib/animations/swing/index.ts","ng://igniteui-angular/lib/animations/grow/index.ts","ng://igniteui-angular/lib/core/navigation/nav.service.ts","ng://igniteui-angular/lib/core/navigation/directives.ts","ng://igniteui-angular/lib/core/utils.ts","ng://igniteui-angular/lib/data-operations/sorting-expression.interface.ts","ng://igniteui-angular/lib/data-operations/sorting-strategy.ts","ng://igniteui-angular/lib/data-operations/grouping-strategy.ts","ng://igniteui-angular/lib/data-operations/paging-state.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-expressions-tree.ts","ng://igniteui-angular/lib/services/transaction/transaction.ts","ng://igniteui-angular/lib/grids/api.service.ts","ng://igniteui-angular/lib/data-operations/filtering-expression.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-strategy.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.filtering.pipe.ts","ng://igniteui-angular/lib/data-operations/data-util.ts","ng://igniteui-angular/lib/services/exporter-common/export-utilities.ts","ng://igniteui-angular/lib/services/exporter-common/base-export-service.ts","ng://igniteui-angular/lib/services/csv/char-separated-value-data.ts","ng://igniteui-angular/lib/services/exporter-common/exporter-options-base.ts","ng://igniteui-angular/lib/services/csv/csv-exporter-options.ts","ng://igniteui-angular/lib/services/csv/csv-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-enums.ts","ng://igniteui-angular/lib/services/excel/excel-strings.ts","ng://igniteui-angular/lib/services/excel/excel-files.ts","ng://igniteui-angular/lib/services/excel/excel-folders.ts","ng://igniteui-angular/lib/services/excel/excel-elements-factory.ts","ng://igniteui-angular/lib/services/excel/worksheet-data-dictionary.ts","ng://igniteui-angular/lib/services/excel/worksheet-data.ts","ng://igniteui-angular/lib/services/excel/excel-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-exporter-options.ts","ng://igniteui-angular/lib/services/overlay/utilities.ts","ng://igniteui-angular/lib/services/overlay/position/global-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/NoOpScrollStrategy.ts","ng://igniteui-angular/lib/core/deprecateDecorators.ts","ng://igniteui-angular/lib/services/overlay/overlay.ts","ng://igniteui-angular/lib/services/overlay/position/connected-positioning-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/base-fit-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/auto-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/elastic-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/absolute-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/block-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/close-scroll-strategy.ts","ng://igniteui-angular/lib/services/transaction/base-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-hierarchical-transaction.ts","ng://igniteui-angular/lib/directives/toggle/toggle.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.common.ts","ng://igniteui-angular/lib/core/selection.ts","ng://igniteui-angular/lib/drop-down/drop-down-group.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.base.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.component.ts","ng://igniteui-angular/lib/drop-down/drop-down.base.ts","ng://igniteui-angular/lib/directives/for-of/display.container.ts","ng://igniteui-angular/lib/directives/for-of/horizontal.virtual.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/virtual.helper.component.ts","ng://igniteui-angular/lib/directives/scroll-inertia/scroll_inertia.directive.ts","ng://igniteui-angular/lib/directives/for-of/for_of.sync.service.ts","ng://igniteui-angular/lib/directives/for-of/for_of.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-navigation.directive.ts","ng://igniteui-angular/lib/drop-down/index.ts","ng://igniteui-angular/lib/directives/hint/hint.directive.ts","ng://igniteui-angular/lib/input-group/input-group.common.ts","ng://igniteui-angular/lib/directives/input/input.directive.ts","ng://igniteui-angular/lib/directives/label/label.directive.ts","ng://igniteui-angular/lib/directives/prefix/prefix.directive.ts","ng://igniteui-angular/lib/directives/suffix/suffix.directive.ts","ng://igniteui-angular/lib/core/displayDensity.ts","ng://igniteui-angular/lib/input-group/input-group.component.ts","ng://igniteui-angular/lib/directives/autocomplete/autocomplete.directive.ts","ng://igniteui-angular/lib/directives/button/button.directive.ts","ng://igniteui-angular/lib/directives/divider/divider.directive.ts","ng://igniteui-angular/lib/directives/dragdrop/dragdrop.directive.ts","ng://igniteui-angular/lib/directives/filter/filter.directive.ts","ng://igniteui-angular/lib/directives/focus/focus.directive.ts","ng://igniteui-angular/lib/directives/layout/layout.directive.ts","ng://igniteui-angular/lib/directives/mask/mask-helper.ts","ng://igniteui-angular/lib/directives/mask/mask.directive.ts","ng://igniteui-angular/lib/radio/radio.component.ts","ng://igniteui-angular/lib/directives/ripple/ripple.directive.ts","ng://igniteui-angular/lib/directives/radio/radio-group.directive.ts","ng://igniteui-angular/lib/directives/text-highlight/text-highlight.directive.ts","ng://igniteui-angular/lib/directives/text-selection/text-selection.directive.ts","ng://igniteui-angular/lib/directives/tooltip/tooltip.directive.ts","ng://igniteui-angular/lib/data-operations/filtering-condition.ts","ng://igniteui-angular/lib/data-operations/filtering-state.interface.ts","ng://igniteui-angular/lib/data-operations/groupby-record.interface.ts","ng://igniteui-angular/lib/icon/icon.service.ts","ng://igniteui-angular/lib/icon/icon.component.ts","ng://igniteui-angular/lib/icon/index.ts","ng://igniteui-angular/lib/avatar/avatar.component.ts","ng://igniteui-angular/lib/badge/badge.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.common.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-body.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.directives.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-header.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.module.ts","ng://igniteui-angular/lib/banner/banner.directives.ts","ng://igniteui-angular/lib/banner/banner.component.ts","ng://igniteui-angular/lib/buttonGroup/buttonGroup.component.ts","ng://igniteui-angular/lib/core/dates/dateRange.ts","ng://igniteui-angular/lib/calendar/calendar.ts","ng://igniteui-angular/lib/calendar/calendar.directives.ts","ng://igniteui-angular/lib/calendar/calendar-base.ts","ng://igniteui-angular/lib/calendar/month-picker-base.ts","ng://igniteui-angular/lib/calendar/months-view/months-view.component.ts","ng://igniteui-angular/lib/calendar/years-view/years-view.component.ts","ng://igniteui-angular/lib/calendar/days-view/day-item.component.ts","ng://igniteui-angular/lib/calendar/days-view/days-view.component.ts","ng://igniteui-angular/lib/calendar/calendar.component.ts","ng://igniteui-angular/lib/calendar/month-picker/month-picker.component.ts","ng://igniteui-angular/lib/calendar/calendar.module.ts","ng://igniteui-angular/lib/card/card.component.ts","ng://igniteui-angular/lib/carousel/carousel.component.ts","ng://igniteui-angular/lib/checkbox/checkbox.component.ts","ng://igniteui-angular/lib/chips/chip.component.ts","ng://igniteui-angular/lib/chips/chips-area.component.ts","ng://igniteui-angular/lib/chips/chips.module.ts","ng://igniteui-angular/lib/combo/combo.directives.ts","ng://igniteui-angular/lib/combo/combo.api.ts","ng://igniteui-angular/lib/combo/combo-item.component.ts","ng://igniteui-angular/lib/combo/combo.common.ts","ng://igniteui-angular/lib/combo/combo-add-item.component.ts","ng://igniteui-angular/lib/combo/combo-dropdown.component.ts","ng://igniteui-angular/lib/combo/combo.pipes.ts","ng://igniteui-angular/lib/combo/combo.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.utils.ts","ng://igniteui-angular/lib/date-picker/date-picker.common.ts","ng://igniteui-angular/lib/date-picker/date-picker.pipes.ts","ng://igniteui-angular/lib/date-picker/date-picker.directives.ts","ng://igniteui-angular/lib/core/enums.ts","ng://igniteui-angular/lib/date-picker/calendar-container.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.component.ts","ng://igniteui-angular/lib/dialog/dialog.directives.ts","ng://igniteui-angular/lib/dialog/dialog.component.ts","ng://igniteui-angular/lib/core/grid-selection.ts","ng://igniteui-angular/lib/grids/cell.component.ts","ng://igniteui-angular/lib/grids/row.component.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.ts","ng://igniteui-angular/lib/grids/grid-column-resizing.service.ts","ng://igniteui-angular/lib/grids/grid.common.ts","ng://igniteui-angular/lib/grids/column.component.ts","ng://igniteui-angular/lib/grids/column-chooser-item-base.ts","ng://igniteui-angular/lib/grids/column-hiding-item.directive.ts","ng://igniteui-angular/lib/grids/column-chooser-base.ts","ng://igniteui-angular/lib/grids/column-hiding.component.ts","ng://igniteui-angular/lib/grids/column-pinning.component.ts","ng://igniteui-angular/lib/grids/grid-toolbar.component.ts","ng://igniteui-angular/lib/grids/grid/groupby-row.component.ts","ng://igniteui-angular/lib/grids/grid-navigation.service.ts","ng://igniteui-angular/lib/grids/grid.rowEdit.directive.ts","ng://igniteui-angular/lib/grids/filtering/svgIcons.ts","ng://igniteui-angular/lib/grids/grid/grid.pipes.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering.service.ts","ng://igniteui-angular/lib/grids/watch-changes.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-default-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-date-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-custom-dialog.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-sorting.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.component.ts","ng://igniteui-angular/lib/grids/grid-header.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-cell.component.ts","ng://igniteui-angular/lib/grids/grid-header-group.component.ts","ng://igniteui-angular/lib/core/i18n/resources.ts","ng://igniteui-angular/lib/core/i18n/grid-resources.ts","ng://igniteui-angular/lib/core/i18n/time-picker-resources.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.service.ts","ng://igniteui-angular/lib/grids/summaries/summary-cell.component.ts","ng://igniteui-angular/lib/grids/summaries/summary-row.component.ts","ng://igniteui-angular/lib/grids/drag-select.directive.ts","ng://igniteui-angular/lib/grids/grid-column-resizer.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-row.component.ts","ng://igniteui-angular/lib/grids/grid-base.component.ts","ng://igniteui-angular/lib/directives/template-outlet/template_outlet.directive.ts","ng://igniteui-angular/lib/grids/summaries/grid-root-summary.pipe.ts","ng://igniteui-angular/lib/progressbar/progressbar.common.ts","ng://igniteui-angular/lib/progressbar/progressbar.component.ts","ng://igniteui-angular/lib/grids/grid-common.pipes.ts","ng://igniteui-angular/lib/grids/grid-pipes.module.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-column-moving.component.ts","ng://igniteui-angular/lib/list/list.common.ts","ng://igniteui-angular/lib/core/touch.ts","ng://igniteui-angular/lib/list/list-item.component.ts","ng://igniteui-angular/lib/list/list.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.pipe.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.module.ts","ng://igniteui-angular/lib/grids/row-drag.directive.ts","ng://igniteui-angular/lib/grids/grid-common.module.ts","ng://igniteui-angular/lib/grids/grid/grid-api.service.ts","ng://igniteui-angular/lib/grids/grid/grid.directives.ts","ng://igniteui-angular/lib/grids/grid/grid.component.ts","ng://igniteui-angular/lib/grids/grid/grid-row.component.ts","ng://igniteui-angular/lib/grids/grid/grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/grid/grid.module.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.directives.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-row.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.pipes.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-cell.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.module.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/selection.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-base.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-api.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island-api.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/child-grid-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-cell.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.pipes.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.module.ts","ng://igniteui-angular/lib/navbar/navbar.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.directives.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.module.ts","ng://igniteui-angular/lib/slider/slider.component.ts","ng://igniteui-angular/lib/snackbar/snackbar.component.ts","ng://igniteui-angular/lib/switch/switch.component.ts","ng://igniteui-angular/lib/tabbar/tabbar.component.ts","ng://igniteui-angular/lib/tabs/tabs.common.ts","ng://igniteui-angular/lib/tabs/tab-item.component.ts","ng://igniteui-angular/lib/tabs/tabs.directives.ts","ng://igniteui-angular/lib/tabs/tabs-group.component.ts","ng://igniteui-angular/lib/tabs/tabs.component.ts","ng://igniteui-angular/lib/time-picker/time-picker.common.ts","ng://igniteui-angular/lib/time-picker/time-picker.directives.ts","ng://igniteui-angular/lib/time-picker/time-picker.pipes.ts","ng://igniteui-angular/lib/time-picker/time-picker.component.ts","ng://igniteui-angular/lib/toast/toast.component.ts","ng://igniteui-angular/lib/select/select-group.component.ts","ng://igniteui-angular/lib/select/select-item.component.ts","ng://igniteui-angular/lib/select/select-positioning-strategy.ts","ng://igniteui-angular/lib/select/select.component.ts","ng://igniteui-angular/lib/select/select-navigation.directive.ts","ng://igniteui-angular/lib/select/select.module.ts"],"names":["quad","cubic","quart","quint","sine","expo","circ","back","base","style","opacity","animate","baseParams","delay","duration","easing","EaseOut","endOpacity","startOpacity","fadeIn","animation","params","fadeOut","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","baseRecipe","backfaceVisibility","transformStyle","keyframes","offset","transform","endAngle","endDistance","rotateX","rotateY","rotateZ","startAngle","startDistance","flipTop","flipBottom","flipLeft","flipRight","flipHorFwd","flipHorBck","flipVerFwd","flipVerBck","transformOrigin","baseInParams","xPos","yPos","baseOutParams","EaseIn","rotateInCenter","rotateOutCenter","rotateInTop","rotateOutTop","rotateInRight","rotateOutRight","rotateInBottom","rotateOutBottom","rotateInLeft","rotateOutLeft","rotateInTr","rotateOutTr","rotateInBr","rotateOutBr","rotateInBl","rotateOutBl","rotateInTl","rotateOutTl","rotateInDiagonal1","rotateOutDiagonal1","rotateInDiagonal2","rotateOutDiagonal2","rotateInHor","rotateOutHor","rotateInVer","rotateOutVer","direction","shakeHor","shakeVer","shakeTop","shakeBottom","shakeRight","shakeLeft","shakeCenter","shakeTr","shakeBr","shakeBl","shakeTl","heartbeatBase","animationTimingFunction","pulsateBase","pulsateParams","fromScale","toScale","blinkBase","pulsateFwd","pulsateBck","heartbeat","blink","midScale","scaleInCenter","scaleInBl","scaleInVerCenter","scaleInTop","scaleInLeft","scaleInVerTop","scaleInTr","scaleInTl","scaleInVerBottom","scaleInRight","scaleInHorCenter","scaleInBr","scaleInHorLeft","scaleInBottom","scaleInHorRight","scaleOutCenter","scaleOutBl","scaleOutBr","scaleOutVerCenter","scaleOutVerTop","scaleOutVerBottom","scaleOutTop","scaleOutLeft","scaleOutTr","scaleOutTl","scaleOutRight","scaleOutBottom","scaleOutHorCenter","scaleOutHorLeft","scaleOutHorRight","fromPosition","toPosition","slideInTop","slideInLeft","slideInRight","slideInBottom","slideInTr","slideInTl","slideInBr","slideInBl","slideOutTop","slideOutRight","slideOutBottom","slideOutLeft","slideOutTr","slideOutBr","slideOutBl","slideOutTl","swingBase","swingParams","swingOutParams","swingInTopFwd","swingInRightFwd","swingInBottomFwd","swingInLeftFwd","swingInTopBck","swingInRightBck","swingInBottomBck","swingInLeftBck","swingOutTopFwd","swingOutRightFwd","swingOutBottomFwd","swingOutLefttFwd","swingOutTopBck","swingOutRightBck","swingOutBottomBck","swingOutLeftBck","height","startHeight","endHeight","growVerIn","growVerOut","IgxNavigationService","navs","add","id","navItem","remove","get","toggle","args","_i","_a","open","close","IgxNavigationToggleDirective","nav","state","toggleNavigationDrawer","Directive","selector","Input","HostListener","IgxNavigationCloseDirective","closeNavigationDrawer","IgxNavigationModule","NgModule","declarations","exports","providers","cloneArray","array","deep","arr","cloneValue","mergeObjects","obj1","obj2","isObject","Error","_b","tslib_1.__values","keys","_c","isDate","Date","getTime","isArray","Map","Set","result","toString","getNodeSizeViaRange","range","node","overflow","isIE","isEdge","selectNodeContents","width","getBoundingClientRect","navigator","appVersion","indexOf","test","userAgent","flatten","forEach","el","children","toArray","NAVIGATION_KEYS","ROW_EXPAND_KEYS","split","ROW_COLLAPSE_KEYS","SUPPORTED_KEYS","from","None","Asc","Desc","DefaultSortingStrategy","instance","_instance","sort","data","fieldName","dir","ignoreCase","valueResolver","_this","reverse","SortingDirection","arraySort","compareObjects","compareValues","a","an","undefined","bn","toLowerCase","compareFn","IgxSorting","expressions","sortDataRecursive","groupedRecordsByExpression","index","expression","groupval","res","len","getFieldValue","comparer","groupingComparer","expressionIndex","j","expr","gbData","gbDataLen","exprsLen","dataLen","strategy","groupDataRecursive","level","parent","grid","groupsRecords","group","groupRow","records","groupParent","groups","rowHeight","group_1","group_1_1","groupItem","obj","IgxDataRecordSorting","tslib_1.__extends","IgxGrouping","groupBy","IncorrectPageIndex","IncorrectRecordsPerPage","FilteringExpressionsTree","operator","filteringOperands","find","findIndex","isFilteringExpressionsTreeForColumn","expressionsTree","ADD","DELETE","UPDATE","GridBaseAPIService","editCellState","editRowState","destroyMap","get_column_by_name","name","columnList","col","field","get_summary_data","filteredData","transactions","enabled","DataUtil","mergeTransactions","getAggregatedChanges","primaryKey","getTransactionLog","filter","type","TransactionType","map","rowID","rec","splice","getRowData","get_all_data","get_row_index_in_data","escape_editMode","crudService","end","refreshSearch","get_cell_inEditMode","cell","record","get_row_by_key","rowSelector","dataRowList","row","rowData","get_row_by_index","rowIndex","rowList","get_cell_by_key","cells","column","get_cell_by_index","columnIndex","get_cell_by_visible_index","visibleColumnIndex","submit_value","update_cell","editValue","cancel","valueInTransactions","getAggregatedValue","createEditEventArgs","onCellEdit","emit","newValue","castToNumber","isEqual","oldValue","summaryService","clearSummaryCache","updateData","selection","is_item_selected","deselect_item","select_item","hasSummarizedColumns","removeSummaries","rowEditable","_pipeTrigger","rowValueInDataSource","rowCurrentValue","rowNewValue","transaction","_update_row","rowInEditMode","newData","transactionState","lastCommitedValue","getState","update_row","selected","hasSummarized","onRowEdit","endPending","newId","update_row_in_array","remove_grouping_expression","sortingState","sortingExpressions","prepare_sorting_expression","sort_multiple","expressions_1","expressions_1_1","each","term","conditionOrExpressionsTree","filteringTree","filteringExpressionsTree","endEdit","paging","page","fieldFilterIndex","prepare_filtering_expression","filter_global","condition","columns","filteringIgnoreCase","clear_filter","filteringState","clear_sort","searchVal","insertAtIndex","newExpressionsTree","oldExpressionsTreeIndex","newExpression","stateCollections","maxCollection","maxExpr","collection","myExpr","should_apply_number_style","dataType","DataType","Number","get_data","includeTransactions","dataWithAddedInTransactionRows","get_filtered_data","getSortStrategyPerColumn","sortStrategy","addRowToData","deleteRowFromData","recordRef","deleteRowById","rowId","hasRowInNonDeletedState","onRowDeleted","rowSelectable","deselectRows","checkHeaderCheckboxStatus","cdr","markForCheck","dataAfterDelete","perPage","get_row_id","row_deleted_transaction","atInexistingPage","isLastPage","Injectable","And","Or","BaseFilteringStrategy","findMatchByExpression","cond","val","logic","matchRecord","matchOperand","operand","FilteringLogic","FilteringStrategy","TreeGridFilteringStrategy","filterImpl","cloneTreeGridRecord","filteredChildren","isFilteredOutParent","IgxTreeGridFilteringPipe","gridAPI","hierarchyData","pipeTrigger","resetFilteredOutProperty","expandAllRecursive","expansionStates","expandedStates","updateNonProcessedRecord","set","Pipe","pure","String","Boolean","sorting","treeGridSort","hierarchicalData","hr","hierarchicalRecord","expanded","grouping","restoreGroups","groupData","restoreGroupsIterative","chain","pointer","added","shift","unshift","hierarchy","this_1","getHierarchy","expandState","expansion","isHierarchyMatch","defaultExpanded","Math","max","start","min","slice","recordsPerPage","countPages","countRecords","PagingError","isNaN","ceil","treeGridFilter","gRow","h1","h2","every","deleteRows","item","mergeHierarchicalTransactions","childDataKey","path","parent_1","this_2","findParentFromPath","updateIndex","x","deleteIndex","transactions_1","transactions_1_1","path_1","path_1_1","ExportUtilities","getKeysFromData","dataEntry","dataEntryMiddle","floor","dataEntryLast","keys1","keys2","keys3","isSpecialData","saveBlobToFile","blob","fileName","document","createElement","window","msSaveOrOpenBlob","url","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","stringToArrayBuffer","buf","ArrayBuffer","view","Uint8Array","charCodeAt","hasValue","isNullOrWhitespaces","trim","IgxBaseExporter","flatRecords","_isTreeGrid","_indexOfLastPinnedColumn","_sort","onRowExport","EventEmitter","onColumnExport","export","options","_columnList","hiddenColumns","lastVisbleColumnIndex","columnHeader","header","exportColumn","hidden","ignoreColumnsVisibility","ignoreColumnsOrder","visibleIndex","columnInfo","skip","formatter","skipFormatter","pinned","hiddenColumn","prepareData","exportData","k","skippedPinnedColumnsCount","columnsWithoutHeaderCount","columnExportArgs","dataToExport","exportRow","exportDataImplementation","resetDefaults","rowArgs","reduce","rawValue","originalRowData","rootRecords","prepareHierarchicalData","ignoreFiltering","filteringLogic","ignoreSorting","Output","CharSeparatedValueData","_data","valueDelimiter","_isTreeGridData","_headerRecord","_dataRecords","_eor","_escapeCharacters","_delimiterLength","_isSpecialData","setDelimiter","_delimiter","processHeaderRecord","processDataRecords","processField","escapeChars","safeValue","some","v","includes","recordData","keys_1","keys_1_1","keyName","processRecord","keys_2","keys_2_1","currentData","dataRecords","currentData_1","currentData_1_1","IgxExporterOptionsBase","_fileExtension","setFileName","_fileName","endsWith","IgxCsvExporterOptions","fileType","_super","getExtensionFromFileType","setFileType","fType","extension","CsvFileTypes","CSV","TSV","TAB","_valueDelimiter","_fileType","oldExt","pop","newName","replace","IgxCsvExporterService","onExportEnded","csvData","_stringData","saveFile","exportFile","Blob","RootExcelFolder","RootRelsExcelFolder","DocPropsExcelFolder","XLExcelFolder","XLRelsExcelFolder","ThemeExcelFolder","WorksheetsExcelFolder","WorksheetsRelsExcelFolder","TablesExcelFolder","RootRelsFile","AppFile","CoreFile","WorkbookRelsFile","ThemeFile","WorksheetFile","StyleFile","WorkbookFile","ContentTypesFile","SharedStringsFile","WorksheetRelsFile","TablesFile","ExcelStrings","getRels","XML_STRING","getApp","getCore","getTheme","getStyles","hasNonStringValues","getWorkbook","getWorksheetRels","getWorkbookRels","hasSharedStrings","retVal","SHARED_STRING_RELATIONSHIP","getSheetXML","dimension","freezePane","cols","sheetData","hasTable","hasGroupedRows","outlineLevel","getSharedStringXML","count","uniqueCount","table","getContentTypesXML","contentTypes","getTablesXML","tableColumns","getExcelColumn","returnString","char","fromCharCode","writeElement","folder","worksheetData","file","isEmpty","dictionary","dataDictionary","maxOutlineLevel","columnCount","saveValue","rowCount","isTreeGridData","sCollapsed","sHidden","hasCollapsedParent","rowOutlineLevel","sOutlineLevel","cellData","getCellData","columnWidths","widthInTwips","columnWidth","MIN_WIDTH","indexOfLastPinnedColumn","ignorePinning","frozenColumnCount","exportAsTable","join","columnName","cellValue","savedValue","isSavedAsString","dict","sortedValues","getKeys","sharedStrings","sortedValues_1","sortedValues_1_1","getSanitizedValue","stringsCount","lastColumn","values","sortString","sortingExpression","sc","childFiles","ExcelFileTypes","childFolders","ExcelFolderTypes","ExcelElementsFactory","getExcelFolder","getExcelFile","WorksheetDataDictionary","_dictionary","_widthsDictionary","_counter","dirtyKeyCollections","_calculateColumnWidth","_columnWidths","_columnTypeInfo","fill","isHeader","sanitizedValue","sanitizeValue","getTextWidth","maxWidth","getValue","_keysAreValid","_keys","metrics","getContext","measureText","TEXT_PADDING","_context","canvas","font","DEFAULT_FONT","WorksheetData","initializeData","_columnCount","_rowCount","_dataDictionary","actualData","IgxExcelExporterService","populateFolder","zip","_d","childFolder","folderIntance","zipFolder","folderName","_e","_f","childFile","maxLevel_1","_xlsx","JSZip","rootFolder","generateAsync","ZIP_OPTIONS","then","xlsx","atob","compression","IgxExcelExporterOptions","_columnWidth","_rowHeight","Left","Center","Right","Top","Middle","Bottom","Point","y","getTargetRect","settings","targetRect","bottom","left","right","top","HTMLElement","targetPoint","getViewportRect","documentElement","clientWidth","clientHeight","scrollPosition","getViewportScrollPosition","documentRect","horizontalScrollPosition","scrollLeft","scrollX","verticalScrollPosition","scrollTop","scrollY","cloneInstance","object","clonedObj","getPrototypeOf","GlobalPositionStrategy","_defaultSettings","horizontalDirection","HorizontalAlignment","verticalDirection","VerticalAlignment","horizontalStartPoint","verticalStartPoint","openAnimation","closeAnimation","minSize","position","contentElement","size","initialCall","classList","parentElement","justifyContent","alignItems","clone","ScrollStrategy","scrollContainer","NoOpScrollStrategy","initialize","overlayService","attach","detach","DeprecateMethod","message","isMessageShown","descriptor","originalMethod_1","targetName","showMessage","DeprecateProperty","getter_1","setter_1","messageToDisplay","originalDescriptor","newKey","generateUniqueKey","configurable","enumerable","isDevMode","console","warn","warningShown","IgxOverlayService","_factoryResolver","_appRef","_injector","builder","_zone","_componentId","_overlayInfos","destroy$","Subject","positionStrategy","scrollStrategy","modal","closeOnOutsideClick","onOpening","onOpened","onClosing","onClosed","onAnimation","documentClicked","ev","info","elementRef","nativeElement","contains","positionTarget","clickOnPositionTarget","positionTargetRect","clientX","clientY","excludePositionTarget","closeAnimationPlayer","hasStarted","_hide","repositionAll","reposition","_document","component","moduleRef","getOverlayInfo","show","compOrId","getOverlayById","_show","hide","hideAll","overlayInfo","contentElementRect","eventArgs","componentRef","detachView","hostView","destroy","elementRect","initialSize","hook","placeElementHook","moveElementToOverlay","changeDetectorRef","detectChanges","updateSize","addOutsideClickListener","addResizeHandler","setupModalWrapper","playOpenAnimation","visibility","event","removeOutsideClickListener","removeResizeHandler","child","parentNode","applyAnimationParams","playCloseAnimation","onCloseDone","ngZone","ElementRef","dynamicFactory","factoryResolver","componentFactoryResolver","resolveComponentFactory","injector","dynamicComponent","attachView","element","location","insertBefore","wrapperElement","getWrapperElement","getContentElement","getOverlayElement","elementScrollTop","wrapper","content","addEventListener","stopPropagation","outlet","_overlayElement","fromEvent","pipe","takeUntil","subscribe","cleanUp","openAnimationPlayer","animationBuilder","build","innerRenderer","_renderer","openAnimationInnerPlayer","engine","players","onDone","reset","closeAnimationInnerPlayer","getPosition","init","setPosition","animationPlayer","animationType","play","animationOptions","transitionDuration","transitionTimingFunction","shouldRemoveClickEventListener_1","removeEventListener","closingOverlaysCount","defaultView","ngOnDestroy","complete","providedIn","ComponentFactoryResolver","ApplicationRef","Injector","AnimationBuilder","Inject","DOCUMENT","NgZone","ConnectedPositioningStrategy","setStyle","startPoint","wrapperRect","round","BaseFitPositionStrategy","connectedFit","_initialSettings","viewPortRect","updateViewPortFit","fitHorizontal","fitVertical","fitInViewport","calculateLeft","calculateTop","AutoPositionStrategy","transformString","canFlipHorizontal","flipHorizontal","horizontalPush","canFlipVertical","flipVertical","verticalPush","flippedStartPoint","flippedDirection","leftBorder","rightBorder","topBorder","bottomBorder","leftExtend","rightExtend","abs","topExtend","bottomExtend","ElasticPositionStrategy","maxReduction","reduction","translation","AbsoluteScrollStrategy","_initialized","onScroll","_overlayService","_scrollContainer","_id","runOutsideAngular","addScrollEventListener","BlockScrollStrategy","preventDefault","_sourceElement","srcElement","_initialScrollTop","_initialScrollLeft","onWheel","stopImmediatePropagation","CloseScrollStrategy","cumulativeScrollTop","cumulativeScrollLeft","initialScrollTop","_threshold","initialScrollLeft","scrollHeight","IgxBaseTransactionService","_isPending","_pendingTransactions","_pendingStates","onStateUpdate","updateState","undo","redo","mergeChanges","updateValue","commit","clear","startPending","states","mergeValues","first","second","IgxTransactionService","_transactions","_redoStack","_undoStack","_states","verifyAddedTransaction","addTransaction","pendingState","pendingChange","change","aggregatedValue","originalValue","actions","JSON","stringify","lastActions","currentActions","currentActions_1","currentActions_1_1","actions_1","actions_1_1","action","delete","cleanState","IgxHierarchicalTransactionService","clearArraysFromObject","currentState","prop","IgxToggleDirective","navigationService","_overlaySubFilter","_overlayId","_collapsed","overlayClosed","unsubscribe","collapsed","overlaySettings","hasOpenAnimation","hasCloseAnimation","openEventArgs","_overlayOpenedSub","_overlayClosingSub","clearSubscription","_overlayClosedSub","isClosing","ngOnInit","subscription","closed","exportAs","ChangeDetectorRef","Optional","HostBinding","IgxToggleActionDirective","_closeOnOutsideClick","_target","_overlayDefaults","onClick","clonedSettings","updateOverlaySettings","positionStrategyClone","tslib_1.__decorate","IgxOverlayOutletDirective","IgxToggleModule","Up","Down","IGX_DROPDOWN_BASE","IgxSelectionAPIService","componentID","newSelection","get_empty","sel","add_item","itemID","add_items","itemIDs","clearSelection","select_items","delete_item","delete_items","deselectedItem","deselect_items","has","first_item","are_all_selected","dataCount","are_none_selected","get_all_ids","NEXT_ID","IgxDropDownGroupComponent","role","groupClass","disabled","labelId","Component","template","IgxDropDownItemBase","dropDown","_focused","_selected","_index","_disabled","itemIndex","focused","items","clicked","ngDoCheck","dropDownSelectedItem","selectedItem","hasIndex","selectItem","IgxDropDownItemComponent","focusedState","focusedItem","focusedIndex","allowItemsFocus","focus","preventScroll","mousedownHandler","IgxDropDownBase","_focusedItem","onSelection","maxHeight","cssClass","headers","onItemActionKey","DropDownActionKey","oldSelection","navigate","currentIndex","newIndex","getNearestSiblingFocusableItemIndex","navigateItem","startIndex","oldItem","newItem","scrollToHiddenItem","navigateFirst","Navigate","navigateLast","navigateNext","navigatePrev","parentRect","DisplayContainerComponent","_viewContainer","notVirtual","ViewContainerRef","ViewChild","read","HVirtualHelperComponent","cssClasses","VirtualHelperComponent","_height","destroyed","IgxScrollInertiaDirective","wheelStep","inertiaStep","swipeToleranceX","inertiaDeltaY","inertiaDeltaX","inertiaDuration","_savedSpeedsX","setPointerCaptureFName","Element","releasePointerCaptureFName","targetElem","evt","onTouchStart","onTouchMove","onTouchEnd","onPointerDown","onPointerUp","onMSGestureStart","onMSGestureChange","IgxScrollInertiaScrollContainer","scrollDeltaX","scrollDeltaY","scrollStep","minWheelStep","_startX","_startY","wheelDeltaX","sign","deltaX","calcAxisCoords","wheelDeltaY","deltaY","IgxScrollInertiaDirection","_scrollToX","curScrollLeft","maxScrollLeft","parseInt","_scrollToY","preventParentScroll","curScrollTop","maxScrollTop","offsetHeight","MSGesture","cancelAnimationFrame","_touchInertiaAnimID","touch","touches","_touchStartX","pageX","_touchStartY","pageY","_lastTouchEnd","_lastTouchX","_lastTouchY","_savedSpeedsY","_totalMovedX","_offsetRecorded","_offsetDirection","_touchPrevented","scrolledXY","destX","destY","timeFromLastTouch","speedX","speedY","_lastMovedX","_lastMovedY","_scrollTo","_inertiaInit","pointerType","_pointer","pointerId","_gestureObject","addPointer","screenX","screenY","touchPos","dest","stepModifer","_nextX","_nextY","requestAnimationFrame","IgxScrollInertiaModule","imports","CommonModule","IgxForOfSyncService","_master","isMaster","directive","igxForScrollOrientation","setMaster","forced","orientation","resetMaster","sizesCache","chunkSize","IgxForOfDirective","_template","_differs","resolver","totalItemCount","onChunkLoad","onDataChanged","onBeforeViewDestroyed","onChunkPreload","_sizesCache","_differ","heightCache","MAX_PERF_SCROLL_DIFF","_virtHeight","_virtHeightRatio","_virtScrollTop","_bScrollInternal","_embeddedViews","getVerticalScroll","igxForContainerSize","igxForOf","removeScrollEventListeners","getHorizontalScroll","func","vertical_1","verticalScrollHandler","isScrollable","vh","totalSize","vc","igxForScrollContainer","igxForSizePropName","dcFactory","dc","createComponent","scrollDirection","touchAction","initSizesCache","hScroll","getElement","getIndexAt","_calculateChunkSize","input","embeddedView","_vcr","createEmbeddedView","$implicit","factory","_maxHeight","_calcMaxBrowserHeight","_calcHeight","bind","onHScroll","hvFactory","hvh","scrollOffset","ngOnChanges","changes","forOf","currentValue","igxForTrackBy","getTypeNameForDebugging","defaultItemSize","firstChange","containerSize","_recalcOnContainerChange","diff","_updateSizeCache","run","_applyChanges","_updateScrollOffset","addScrollTop","addTop","originalVirtScrollTop","maxVirtScrollTop","fixedUpdateAllElements","maxRealScrollTop","scrollTo","isRemote","scr","isPrevItem","nextScroll","_adjustToIndex","scrollNext","endIndex","scrollPrev","scrollNextPage","scrollPrevPage","getColumnScrollLeft","colIndex","getItemCountInView","getSizeAt","getScrollForIndex","realPercentScrolled","prevStartIndex","recalcUpdateSizes","diffs","totalDiff","rNode","rootNodes","nodeType","Node","ELEMENT_NODE","h","igxForItemSize","oldVal","newVal","currDiff","totalWidth","reducer","acc","scrToBottom","_isScrolledToBottom","hSum","_isAtBottomIndex","updatesToIndex","sumDiffs","currOffset","inScrollTop","newStart","prevStart","moveApplyScrollNext","moveApplyScrollPrev","fixedApplyScroll","prevIndex","embView","cntx","context","getContextIndex","insert","_trackByFn","fn","prevChunkSize","applyChunkSizeChange","_recalcScrollBarSize","embeddedViewCopy","div","_calcMaxChunkSize","viewref","nodeName","elem","getElementsByTagName","_getItemSize","maxLength","sum","availableSize","accumulator","currentItem","curItem","prevItem","prevSize","midIdx","cmp","removeLastElem","oldElem","addLastElem","elemIndex","_updateHScrollOffset","_updateVScrollOffset","vScroll","TemplateRef","IterableDiffers","IgxGridForOfDirective","syncService","getItemSize","summaries","masterSizesCache","itemsDimension","oldHeight","handleCacheChanges","identityChanges","newHeightCache","newSizesCache","newHeight","numRemovedItems","forEachRemovedItem","forEachIdentityChange","previousIndex","forEachItem","assumeMaster","scrollAmount","_updateViews","IgxForOfModule","entryComponents","IgxDropDownComponent","virtDir","toggleDirective","updateScrollPosition","setSelectedItem","collectionLength","direction_1","subRequired","isIndexOutOfBounds","take","skipHeader","virtState","currentPosition","itemPosition","indexOutOfChunk","scrollNeeded","targetScroll","onToggleOpening","scrollToItem","_scrollPosition","onToggleOpened","onToggleClosing","onToggleClosed","calculateScrollPosition","setTimeout","scrollDelta","elementHeight","ngAfterViewInit","provide","useExisting","ContentChild","ContentChildren","forwardRef","descendants","IgxDropDownItemNavigationDirective","dropdown","handleKeyDown","onArrowUpKeyDown","onArrowDownKeyDown","onHomeKeyDown","onEndKeyDown","Self","IgxDropDownModule","START","END","IgxHintDirective","_element","_position","IgxHintPosition","isPositionStart","isPositionEnd","toUpperCase","_applyPosition","IgxInputGroupBase","nativeValidationAttributes","INITIAL","VALID","INVALID","IgxInputDirective","inputGroup","ngModel","formControl","_valid","IgxInputState","isInput","isTextArea","checkValidity","hasAttribute","required","isRequired","onFocus","isFocused","onBlur","ngControl","valid","_hasValidators","onInput","hasPlaceholder","control","validator","validation","tagName","_statusChanges$","statusChanges","onStatusChanged","asyncValidator","touched","dirty","invalid","placeholder","nativeValidationAttributes_1","nativeValidationAttributes_1_1","nativeValidationAttribute","NgModel","FormControlName","IgxLabelDirective","defaultClass","IgxPrefixDirective","IgxPrefixModule","IgxSuffixDirective","IgxSuffixModule","comfortable","cosy","compact","DisplayDensityToken","InjectionToken","DisplayDensityBase","displayDensityOptions","onDensityChanged","oldDisplayDensityOptions","displayDensity","DisplayDensity","_displayDensity","currentDisplayDensity","densityChangedArgs","oldDensity","newDensity","initialDensity","getComponentDensityClass","baseStyleClass","LINE","BOX","BORDER","SEARCH","IgxInputGroupComponent","_displayDensityOptions","_type","IgxInputGroupType","_filled","_supressInputAutofocus","isBox","isBorder","isSearch","hasWarning","hints","IgxInputGroupModule","IgxAutocompleteDirective","defaultSettings","dropDownOpened$","onItemSelected","autofill","select","model","setValue","highlightFirstItem","autocompleteSettings","listId","onArrowDown","onTab","IgxAutocompleteModule","IgxButtonDirective","_cssClass","buttonClick","addClass","_color","color","_backgroundColor","_label","setAttribute","removeClass","Renderer2","IgxButtonModule","DEFAULT","DASHED","IgxDividerDirective","_inset","IgxDividerType","middle","vertical","baseMargin","IgxDividerModule","VERTICALLY","HORIZONTALLY","NONE","IgxDragDirective","zone","renderer","dragTolerance","ghostImageClass","hideBaseOnDrag","animateOnRelease","dragGhostHost","dragStart","dragEnd","returnMoveEnd","dragClicked","transitionProperty","_visibility","defaultReturnDuration","_dragStarted","_pointerDownId","_clicked","_lastDropArea","_destroy","_removeOnDestroy","bVisible","dragGhost","PointerEvent","pointerEventsEnabled","throttle","interval","animationFrameScheduler","onPointerMove","touchEventsEnabled","marginTop","getComputedStyle","marginLeft","_dragOffsetX","getWindowScrollLeft","_dragOffsetY","getWindowScrollTop","_dragStartX","_dragStartY","setPointerCapture","dragStartArgs_1","originalEvent","owner","totalMovedX","totalMovedY","createDragGhost","dispatchDragEvents","onTransitionEnd","dispatchDropEvent","cloneNode","hostLeft","hostTop","visible","topDropArea","startX","startY","elementsFromPoint","getElementsAtPoint","getAttribute","dispatchEvent","updateDragRelativePos","totalDraggedX","totalDraggedY","newPosX","newPosY","diffStartX","diffStartY","dropFinished","viewPortX","pageXOffset","viewPortY","pageYOffset","eventName","dragLeaveEvent","createEvent","initCustomEvent","IgxDropDirective","onEnter","onLeave","onDrop","droppable","dragover","onDragEnter","onDragLeave","onDragOver","elementPosX","elementPosY","offsetX","detail","offsetY","drag","dragData","onDragDrop","IgxDragDropModule","IgxFilterOptions","inputValue","get_value","textContent","valueToTest","matchFn","metConditionFn","overdueConditionFn","IgxFilterDirective","filtering","filtered","filterOptions","previousValue","IgxFilterPipe","filteredItems","match","IgxFilterModule","IgxFocusDirective","comp","focusState","trigger","getEditElement","NG_VALUE_ACCESSOR","IgxFocusModule","IgxLayoutDirective","wrap","justify","itemAlign","display","IgxFlexDirective","grow","shrink","flex","order","basis","IgxLayoutModule","MASK_FLAGS","KEYS","MaskHelper","_cursor","parseValueByMask","maskOptions","cursor","mask","format","literals","getMaskLiterals","literalKeys","nonLiteralIndeces","getNonLiteralIndeces","parseValueByMaskOnInit","insertCharAt","promptChar","isCharValid","validateCharOnPostion","replaceCharAt","parseMask","outputVal","mask_1","mask_1_1","inputVal","literalValues","mask_2","mask_2_1","nonLiteralValues","getNonLiteralValues","pos","nonLiteralValues_1","nonLiteralValues_1_1","restoreValueFromMask","value_1","value_1_1","parseValueByMaskUponSelection","isMarked","parseValueByMaskUponCopyPaste","clipboardData","selectionEnd","clipboardData_1","clipboardData_1_1","inputChar","isValid","charAt","RegExp","strValue","substring","nonLiteralsIndeces","value_2","value_2_1","noop","IgxMaskDirective","onValueChange","_maskOptions","_onTouchedCallback","_onChangeCallback","maskHelper","selectionStart","onKeydown","keyCode","charCode","_stopPropagation","_ctrlDown","_key","_selection","onKeyup","onPaste","_paste","_valOnPaste","_cursorOnPaste","getCursorPosition","onInputChanged","setCursorPosition","currentCursorPos","rawVal","dataValue","includeLiterals","formattedValue","focusedValuePipe","displayValuePipe","setSelectionRange","writeValue","registerOnChange","registerOnTouched","multi","IgxMaskModule","BEFORE","AFTER","nextId","IgxRadioComponent","labelPosition","tabindex","disableRipple","ariaLabelledBy","ariaLabel","checked","inputId","_value","_onRadioChange","_onRadioClick","nativeRadio","blur","_onLabelClick","radio","RadioLabelPosition","IgxRippleDirective","rippleTarget","rippleDuration","rippleDisabled","rippleElementClass","rippleHostClass","_centered","animationQueue","centered","onMouseDown","_ripple","setStyles","rippleElement","styleParams","radius","rippleColor","querySelector","rectBounds","dimensions","IgxRippleModule","IgxRadioGroupDirective","_name","_isInitialized","_labelPosition","_required","_selectRadioButton","_setRadioButtonNames","_setRadioButtonsRequired","_disableRadioButtons","_setRadioButtonLabelPosition","ngAfterContentInit","_initRadioButtons","radioButtons","button","_selectedRadioButtonChanged","IgxRadioModule","IgxTextHighlightDirective","_div","_observer","_nodeWasRemoved","_forceEvaluation","_activeElementIndex","groupName","onActiveElementChanged","deactivate","activateIfNecessary","_lastSearchInfo","setActiveHighlight","highlight","highlightGroupsMap","clearActiveHighlight","clearHighlight","disconnect","_valueChanged","searchedText","matchCount","caseSensitive","exactMatch","_container","firstElementChild","ngAfterViewChecked","text","caseSensitiveResolved","exactMatchResolved","searchNeedsEvaluation","clearChildElements","getHighlightedText","activate","observe","MutationObserver","mutationList","mutation","removedNodes","addedNodes","childList","spans","querySelectorAll","elementToActivate","activeCssClass","elementToDeactivate","originalContentHidden","setProperty","searchText","appendDiv","stringValue","contentStringResolved","searchTextResolved","appendSpan","appendText","foundIndex","previousMatchEnd","textElement","createText","outerHTML","span","containerClass","IgxTextHighlightModule","IgxTextSelectionDirective","selectionState","IgxTextSelectionModule","IgxTooltipTargetDirective","_navigationService","showDelay","hideDelay","tooltipDisabled","onTooltipShow","onTooltipHide","positionSettings","useAnimation","checkOutletAndOutsideClick","preMouseEnterCheck","toBeShown","clearTimeout","timeoutId","toBeHidden","hidingArgs","tooltip","forceClose","mergedOverlaySettings","preMouseLeaveCheck","onKeydownEscape","onMouseEnter","showingArgs","onMouseLeave","showTooltip","onDocumentTouchStart","hideTooltip","IgxTooltipDirective","forceOpen","finish","IgxTooltipModule","IgxFilteringOperand","operations","isUnary","iconName","conditionList","append","operation","IgxBooleanFilteringOperand","IgxDateFilteringOperand","validateInputData","targetp","getDateParts","searchp","year","month","day","now","td","setDate","getDate","yesterday","date","dateFormat","hours","milliseconds","minutes","seconds","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds","IgxNumberFilteringOperand","IgxStringFilteringOperand","search","applyIgnoreCase","startsWith","InFilteringOperation","InDateFilteringOperation","toISOString","filteringStateDefaults","GroupedRecords","IgxIconService","_sanitizer","_httpClient","_fontSet","_fontSetAliases","_cachedSvgIcons","className","registerFontSetAlias","alias","fontSetClassName","addSvgIcon","fontSet","safeUrl","bypassSecurityTrustResourceUrl","sanitize","SecurityContext","RESOURCE_URL","fetchSvg","addSvgIconFromText","iconText","cacheSvgIcon","isSvgIconCached","iconKey","getSvgIconKey","responseType","ensureSvgContainerCreated","innerHTML","svg","oldChild","_svgContainer","DomSanitizer","HttpClient","IgxIconComponent","_el","iconService","ariaHidden","active","defaultFontSet","updateIconClass","iconColor","svgImage","noLigature","explicitLigature","IgxIconModule","forRoot","ngModule","HttpClientModule","INITIALS","IMAGE","ICON","IgxAvatarComponent","_size","roundShape","src","AvatarType","icon","initials","imageTemplate","initialsTemplate","iconTemplate","defaultTemplate","roleDescription","getRole","getSrcUrl","IgxAvatarModule","INFO","SUCCESS","WARNING","ERROR","IgxBadgeComponent","label","setClasses","classes","Type","IgxBadgeModule","IGX_EXPANSION_PANEL_COMPONENT","IgxExpansionPanelBodyComponent","panel","_labelledBy","labelledBy","headerId","IgxExpansionPanelTitleDirective","IgxExpansionPanelDescriptionDirective","IgxExpansionPanelIconDirective","IgxExpansionPanelHeaderComponent","_iconTemplate","lv","iconPosition","ICON_POSITION","onInteraction","onAction","openPanel","altKey","expand","closePanel","collapse","Host","IgxExpansionPanelComponent","animationSettings","onCollapsed","onExpanded","cb","IgxExpansionPanelModule","IgxBannerActionsDirective","IgxBannerComponent","_bannerActionTemplate","_animationSettings","_expansionPanel","_bannerEvent","banner","openingArgs","closingArgs","onExpansionPanelOpen","onExpansionPanelClose","IgxBannerModule","horizontal","IgxButtonGroupComponent","_cdr","buttonClickNotifier$","queryListNotifier$","multiSelection","selectedIndexes","onSelect","onUnselect","viewButtons","templateButtons","_itemContentCssClass","buttons","_isVertical","ButtonGroupAlignment","selectButton","buttonElement","indexInViewButtons","deselectButton","initButtons","_clickHandler","ViewChildren","IgxButtonGroupModule","After","Before","Between","Specific","Weekdays","Weekends","MDAYS","stop","step","cur","isLeap","weekDay","getDay","monthRange","nDays","isDateInRanges","ranges","dateInMs","ranges_1","ranges_1_1","dRanges","dateRange","DateRangeType","dRange","datesInMs","datesInMs_1","datesInMs_1_1","SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","Calendar","firstWeekDay","WEEKDAYS","_firstWeekDay","weekdays","monthdates","extraWeek","days","timedelta","generateICalendarDate","monthdatescalendar","dates","units","ret","checkRollover","setFullYear","setMonth","setTime","formatToParts","locale","parts","Intl","DateTimeFormat","full","formattedParts_1","toType","partType","literal","combined","parts_1","parts_1_1","parts_2","parts_2_1","isCurrentMonth","isNextMonth","isPrevMonth","isPreviousMonth","IgxCalendarYearDirective","onYearSelection","isCurrentYear","IgxCalendarMonthDirective","onMonthSelection","IgxCalendarHeaderTemplateDirective","IgxCalendarSubheaderTemplateDirective","IgxCalendarScrollMonthDirective","debounce","stopScroll","tap","startScroll","onMouseUp","IgxCalendarBase","CalendarSelection","rangeStarted","_locale","_disabledDates","_specialDates","_formatOptions","weekday","_formatViews","monthScrollDirection","ScrollMonth","scrollMonth$","stopMonthScroll$","startMonthScroll$","calendarModel","viewDate","weekStart","initFormatters","formatOptions","formatViews","selectedDates","selectDate","_viewDate","getDateOnly","getDateOnlyInMs","generateDateRange","selectSingle","selectMultiple","valueDateOnly_1","selectRange","excludeDisabledDates","valueOf","isDateDisabled","deselectSingle","deselectMultiple","selectedDatesCount","datesInMsToDeselect","deselectRange","valueStart","valueEnd","selectedDatesStart","selectedDatesEnd","formatterDay","formatterWeekday","formatterMonth","formatterYear","formatterMonthday","disabledDates","deselectDate","selectDateFromClient","YEAR","DECADE","IgxMonthPickerBase","_activeView","CalendarView","changeYear","yearsBtn","activeViewDecade","activeViewDecadeKB","formattedYear","IgxMonthsViewComponent","formatView","styleClass","_monthFormat","initMonthFormatter","_calendarModel","formattedMonth","_formatterMonth","selectMonth","monthTracker","monthFormat","onKeydownArrowUp","months","nodeRect","nextNodeRect","onKeydownArrowDown","onKeydownArrowRight","onKeydownArrowLeft","onKeydownHome","onKeydownEnd","onKeydownEnter","CalendarHammerConfig","overrides","pan","Hammer","DIRECTION_VERTICAL","threshold","HammerGestureConfig","IgxYearsViewComponent","_yearFormat","initYearFormatter","_formatterYear","selectYear","scroll","delta","generateYearRange","yearTracker","yearFormat","currentYear","HAMMER_GESTURE_CONFIG","useClass","IgxDayItemComponent","onDateSelection","today","outOfRangeDates","specialDates","isWeekend","isInactive","isToday","isDisabled","isOutOfRange","isSpecial","IgxDaysViewComponent","animationAction","changeDaysView","onViewChanged","isKeydownTrigger","disableOutOfRangeDates","formattedDate","generateWeekHeader","dayNames","rv","rv_1","rv_1_1","rowTracker","dateTracker","focusActiveDate","selectDay","animationDone","isLast","date_1","callback","toState","nextDate","focusPreviousUpDate","prevView","dayItem","focusNextDownDate","nextView","focusPreviousDate","focusNextDate","animations","transition","IgxCalendarComponent","hasHeader","_monthAction","startPrevMonthScroll","daysView","previousMonth","startNextMonthScroll","nextMonth","stopMonthScroll","prevMonthBtn","nextMonthBtn","activeView","headerTemplateDirective","subheaderTemplateDirective","headerDate","generateContext","switchMap","skipLast","dacadeView","getFormattedDate","monthday","childClicked","viewChanged","changeMonth","monthsBtn","activeViewYear","monthsView","activeViewYearKB","onKeydownPageUp","activeDate","activeElement","onKeydownPageDown","onKeydownShiftPageUp","onKeydownShiftPageDown","monthView","yearView","IgxMonthPickerComponent","yearAction","nextYear","previousYear","nextYearKB","previousYearKB","IgxCalendarModule","FormsModule","IgxCardMediaDirective","IgxCardHeaderComponent","IgxCardThumbnailDirective","IgxCardHeaderTitleDirective","IgxCardHeaderSubtitleDirective","IgxCardContentDirective","IgxCardFooterDirective","OUTLINED","IgxCardComponent","IgxCardType","JUSTIFY","IgxCardActionsComponent","card","isVerticalSet","layout","IgxCardActionsLayout","IgxCardModule","NEXT","PREV","IgxCarouselComponent","loop","pause","navigation","onSlideChanged","onSlideAdded","onSlideRemoved","onCarouselPaused","onCarouselPlaying","slides","_total","_interval","_restartInterval","_destroyed","_lastInterval","clearInterval","setAriaLabel","slide","total","_currentSlide","_playing","carousel","current","Direction","_moveTo","prev","_resetInterval","setInterval","tick","IgxSlideComponent","IgxCarouselModule","IgxCheckboxComponent","LabelPosition","indeterminate","disableTransitions","checkbox","_onCheckboxChange","_onCheckboxClick","nativeCheckbox","preserveWhitespaces","IGX_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","IgxCheckboxRequiredDirective","CheckboxRequiredValidator","IgxCheckboxModule","CHIP_ID","IgxChipComponent","draggable","removable","selectable","class","onMoveStart","onMoveEnd","onRemove","onKeyDown","_selectedItemClass","_movedWhileRemoving","changeSelection","chipArea","backgroundColor","newColor","removeIcon","defaultRemoveIcon","selectIcon","defaultSelectIcon","selectClass","SELECT_CLASS","srcEvent","onSelectArgs","onChipKeyDown","keyDownArgs","onRemoveBtnKeyDown","onRemoveMouseDown","onRemoveClick","onRemoveTouchMove","onRemoveTouchEnd","onChipDragStart","onChipDragEnd","dragDir","onChipMoveEnd","onChipDragClicked","clickEventArgs","onChipDragEnterHandler","chip","dragChip","onChipDrop","IgxChipsAreaComponent","_iterableDiffers","onReorder","selectedChips","chipsList","forEachAddedItem","addedChip","onChipMoveStart","onChipDragEnter","onChipSelectionChange","modifiedChipsArray","chipsArray","dragChipIndex","shiftKey","positionChipAtIndex","dropChipIndex","chipIndex","targetIndex","shiftRestLeft","eventData","IgxChipsModule","IgxComboHeaderDirective","IgxComboFooterDirective","IgxComboItemDirective","IgxComboEmptyDirective","IgxComboHeaderItemDirective","IgxComboAddItemDirective","IgxComboToggleIconDirective","IgxComboClearIconDirective","IgxComboAPIService","register","combo","add_custom_item","addItemToCollection","set_selected_item","isItemSelected","deselectItems","selectItems","IgxComboItemComponent","comboAPI","itemHeight","comboID","isVisible","rect","parentDiv","IGX_COMBO_COMPONENT","IgxComboAddItemComponent","IgxComboDropDownComponent","scrollHandler","itemsMaxHeight","focusSearchInput","lastIndex","focusAddItemButton","isAddButtonVisible","sortedChildren","sortedChildren_1","sortedChildren_1_1","handleEnter","handleSpace","isAddItemFocused","IgxComboFilteringPipe","SimpleFilteringStrategy","filteringExpressions","IgxComboSortingPipe","IgxComboGroupingPipe","groupKey","inserts","currentHeader","insertFlag","valueKey","IgxComboFilterConditionPipe","ComboConnectedPositionStrategy","_callback","IgxComboComponent","customValueFlag","defaultFallbackGroup","stringFilters","booleanFilters","_filteringLogic","_filteringExpressions","_sortingExpressions","_groupKey","_prevInputValue","_dataType","_filteredData","searchInput","comboInput","itemTemplate","headerTemplate","footerTemplate","headerItemTemplate","addItemTemplate","emptyTemplate","toggleIconTemplate","clearIconTemplate","dropdownContainer","onSelectionChange","onAddition","onSearchInput","onDataPreLoad","allowCustomValues","searchPlaceholder","filterable","IgxComboState","searchValue","_displayKey","clearSorting","onInputClick","checkMatch","handleKeyUp","displayKey","itemMatch","handleInputChange","cdrFlag","vContainer","getValueByValueKey","DataTypes","_stringifyItemID","_parseItemID","parse","triggerCheck","handleSelectAll","selectAllItems","deselectAllItems","addedItem","oldCollection","newCollection","opening","displaySearchInput","newArray","expression2","headerExpression","searchVale","NgControl","_positionCallback","dataLoading","setDisabledState","complexTemplate","primitiveTemplate","handleClearItems","selectedItems","newItems","clearCurrentSelection","setSelection","ignoreFilter","allVisible","itemValue","oldSelectionEmit","handleOpening","handleOpened","handleClosing","handleClosed","IgxComboModule","ReactiveFormsModule","DatePickerUtil","parseDateFormat","maskValue","DEFAULT_LOCALE","dateStruct","SHORT_DATE_MASK","maskArray","monthInitPosition","dayInitPosition","yearInitPosition","initialPosition","formatType","getYearFormatType","getMonthFormatType","getDayFormatType","isDateChar","SEPARATOR","fillDatePartsPositions","getDefaultLocaleMask","getInputMask","inputMask","getMask","parseDateArray","dateFormatParts","prevDateValue","yearPrefix","dayStr","getDayValueFromInput","monthStr","getMonthValueFromInput","yearStr","getYearValueFromInput","getDateFormatPart","originalYear","fullYear","NaN","daysInMonth","maskToPromptChars","PROMPT_CHAR","trimUnderlines","getModifiedDateInput","isSpinLoop","maxValue","minValue","datePart","getDatePartOnPosition","datePartType","datePartFormatType","datePartValue","getDateValueFromInput","minMax","getMinMaxValue","tempValue","startIdx","endIdx","prefix","getNumericFormatPrefix","addPromptCharsEditMode","dateArray","checkForCompleteDateInput","dayValue","monthValue","yearValue","isFullInput","isFullYearInput","formatterOptions","resolvedOptions","NUMBER_OF_MONTHS","getFullYearFromString","partPosition","yearPart","currentPos","IGX_DATE_PICKER_COMPONENT","DatePickerDisplayValuePipe","_datePicker","rawDateString","DatePickerInputValuePipe","invalidDate","IgxDatePickerTemplateDirective","DropDown","Dialog","IgxCalendarContainerComponent","mode","InteractionMode","onClose","onTodaySelection","onEscape","closeCalendar","triggerTodaySelection","ShortDate","MediumDate","LongDate","FullDate","IgxDatePickerComponent","_moduleRef","labelVisibility","onOpen","onDisabledDate","onValidationFailed","inputValuePipe","spinDelta","defaultLocale","calendarHeight","_destroy$","_format","PredefinedFormatOptions","_modalOverlay","_dropDownOverlay","_customFormatChecker","_transformedDate","_getEditorDate","_getDisplayDate","datePickerTemplateDirective","readOnlyDatePickerTemplate","editableDatePickerTemplate","displayData","openDialog","onSpaceClick","inputElement","editableInput","readonlyInput","_positionSettings","outletDirective","_dropDownOverlaySettings","_modalOverlaySettings","overlay","_componentID","_onOpening","_onOpened","_onClosed","handleSelection","calendar","modalOverlay","modalOverlaySettings","dropDownOverlay","dropDownOverlaySettings","dropDownTarget","editableInputGroup","templateDropDownTarget","_setCursorPosition","setHours","setMinutes","setSeconds","setMilliseconds","_isInEditMode","calculateDate","spinValue","targetValue","cursorPosition","_getCursorPosition","checkInput","inputType","dateString","invokedByEvent","newDateArray","datePicker","prevValue","eventType","modifiedInputValue","_initializeCalendarContainer","_focusCalendarDate","componentInstance","isVertical","subheaderTemplate","cancelButtonLabel","todayButtonLabel","_setLocaleToDate","toLocaleDateString","formatDate","changedValue","NgModuleRef","IgxDatePickerModule","IgxDialogTitleDirective","defaultStyle","IgxDialogActionsDirective","DIALOG_ID","IgxDialogComponent","navService","title","leftButtonLabel","leftButtonType","leftButtonColor","leftButtonBackgroundColor","leftButtonRipple","rightButtonLabel","rightButtonType","rightButtonColor","rightButtonBackgroundColor","rightButtonRipple","onLeftButtonSelect","onRightButtonSelect","_animaitonSettings","_closeOnOutsideSelect","_isModal","_titleId","_overlayDefaultSettings","isModal","closeOnOutsideSelect","isOpen","toggleRef","emitCloseFromDialog","dialog","onDialogSelected","DIALOG_CLASS","onInternalLeftButtonSelect","onInternalRightButtonSelect","IgxDialogModule","IgxRow","IgxCell","inlineEditorTemplate","parseFloat","isFinite","cellID","IgxGridCRUDService","createCell","createRow","sameRow","sameCell","columnID","beginRowEdit","onRowEditEnter","endRowEdit","openRowOverlay","begin","onCellEditEnter","rowEditing","isInEditMode","IgxGridSelectionService","dragMode","keyboardState","pointerState","temp","_ranges","initPointerState","initKeyboardState","generateRange","ctrl","isActiveNode","isInMap","addRangeMeta","removeRangeMeta","rowStart","rowEnd","columnStart","columnEnd","keyboardStateOnKeydown","shiftTab","keyboardStateOnFocus","emitter","kbState","dragSelect","pointerDown","pointerDownShiftKey","clearTextSelection","mergeMap","source","entries","pair","newValue_1","pointerEnter","dragEnabled","blah","pointerUp","runTask","getSelection","removeAllRanges","IgxGridCellComponent","selectionService","highlightClass","activeHighlightClass","lastPinned","editMode","isInCompositionMode","pointerdown","selectionNode","ctrlKey","pointerenter","pointerup","onRangeSelection","cellTemplate","defaultCellTemplate","gridID","setEditMode","editable","gridRowSpan","gridColumnSpan","colEnd","colStart","isCellSelected","rowTransaction","rowCurrentState","inEditMode","_highlight","lastSearchInfo","compositionStartHandler","compositionEndHandler","focusHandlerIE","focusOut","_updateCRUDStatus","deleted","_updateCellSelectionStatus","update","onDoubleClick","onCellClick","onContextMenu","handleAlt","isToggleKey","trigger_row_expansion_toggle","treeRow","handleTab","performShiftTabKey","performTab","handleEnd","goToLastCell","handleHome","goToFirstCell","keydownArgs","targetType","onGridKeydown","onFocusChange","navigateTop","navigateUp","navigateBottom","navigateDown","onKeydownEnterEditMode","onKeydownExitEditMode","checkboxElement","onCellEditCancel","highlightText","searchable","calculateSizeToFit","changeDetection","ChangeDetectionStrategy","OnPush","IgxRowComponent","dragging","defaultCssClass","_rowSelection","_rowData","resolveClasses","visibleColumns","pinnedColumns","unpinnedColumns","showRowCheckboxes","rowDraggable","onCheckboxClick","triggerRowSelectionChange","isSelected","allRowsSelected","indexClass","evenRowCSS","oddRowCSS","selectedClass","editClass","dirtyClass","deletedClass","mrlClass","hasColumnLayouts","dragClass","defaultDragIndicatorCssClass","rowDragging","IgxSummaryOperand","operate","summaryResult","IgxNumberSummaryOperand","average","IgxDateSummaryOperand","latest","earliest","IgxColumnResizingService","resizeCursor","showResizer","getVisibleContentHeight","columnHeightMultiplier","columnLayout","multiRowLayoutRowSize","topLevelParent","headerGroup","columnLayoutMultiplier","actualMinWidth","minWidth","defaultMinWidth","headerCell","actualWidth","pinnedMaxWidth","calcPinnedContainerMaxWidth","getPinnedWidth","MAX_SAFE_INTEGER","autosizeColumnOnDblClick","currentColWidth","getLargestCellWidth","reflow","onColumnResized","prevWidth","newWidth","resizeColumn","startResizePos","colMinWidth","getColMinWidth","colMaxWidth","getColMaxWidth","resizeColumnLayoutFor","isColumnResizing","relativeColumns","getResizableColUnderEnd","combinedSpan","spanUsed","pinnedWidth","maxPinnedWidth","columnsToResize","updatedDiff","updatedCombinedSpan","setMinMaxCols","newCombinedSpan","newColsToResize","currentResizeWidth","calcWidth","resizeScaled","IgxResizeHandleDirective","colResizingService","_dblClick","columnGroup","resizable","debounceTime","_onResizeAreaMouseDown","resizeLine","resizer","onMousedown","onMouseOver","IgxColumnResizerDirective","restrictHResizeMin","MIN_SAFE_INTEGER","restrictHResizeMax","resizeEnd","resizeStart","resize","_left","onMousemove","onMouseup","IgxFilterCellTemplateDirective","IgxCellTemplateDirective","IgxCellHeaderTemplateDirective","IgxCellFooterTemplateDirective","IgxCellEditorTemplateDirective","IgxColumnMovingService","_column","_icon","BeforeDropTarget","AfterDropTarget","IgxColumnMovingDragDirective","cms","_ghostImageClass","dragGhostImgIconClass","dragGhostImgIconGroupClass","movable","groupable","_unsubscribe","cancelDrop","isColumnMoving","onColumnMovingStart","subscription$","draggedColumn","onColumnMoving","flexBasis","createTextNode","hostElemLeft","hostElemTop","childNodes","paddingLeft","IgxColumnMovingDropDirective","_dropIndicator","_lastDropIndicator","_dragLeave","_dropIndicatorClass","IgxColumnComponent","_hVirtDir","hasMovableColumns","disablePinning","isDropTarget","clientRect","_dropPos","DropPosition","lastElementChild","innerText","horizontalScroll","wheelHandler","nextPinnedWidth","onColumnMovingEnd","moveColumn","IgxGridBodyDirective","IgxDatePipeComponent","LOCALE_ID","DatePipe","IgxDecimalPipeComponent","DecimalPipe","ContainerPositioningStrategy","isTop","isTopInitialPosition","container","sortable","headerClasses","headerGroupClasses","sortingIgnoreCase","_pinned","_summaries","_filters","_sortStrategy","_hidden","_disableHiding","_disablePinning","_defaultMinWidth","_hasSummary","_vIndex","recalculateSummaries","resetCaches","check","resetSummaryHeight","filteringService","refreshExpressions","widthSetByUser","_width","defaultWidth","colWidth","featureColumnsWidth","getPossibleColumnWidth","pin","unpin","classRef","removeSummariesCachePerColumn","_summaryPipeTrigger","_groupingComparer","funcRef","_bodyTemplate","_headerTemplate","_inlineEditorTemplate","_filterCellTemplate","vIndex","allChildren","indexInCollection","ptr","lvl","resetVisibleIndex","headTemplate","editorTemplate","filterCellTemplateDirective","filters","getGridTemplate","isRow","templateItems","generatedSizes","getColumnSizesString","getInitialChildColumnSizes","columnSizes","newWidthSet","newSpanSmaller","colSpan","bothWidthsSet","bothWidthsNotSet","ref","columnWidthSetByUser","getFilledChildColumnSizes","columnSized","targets","targetsSquashed","getUnpinnedWidth","unpinnedAreaMinWidth","_unpinnedIndex","_unpinnedColumns","_pinnedColumns","targetColumn","isPinned","onColumnPinning","_moveColumns","reinitPinStates","headerCellList","filterCellList","filterCell","headerGroupsList","autosize","createRange","largest","cellsContentWidths_1","cellStyle","cellPadding","paddingRight","borderRightWidth","headerStyle","headerPadding","largestCell","getCellWidth","isPercentageWidth","cellWidth","IgxColumnGroupComponent","QueryList","isChildrenWidthInPercent","IgxColumnLayoutComponent","disableHiding","isLastPinned","ItemPropertyValueChanged","propName","valueChanged","_propName","_object","onValueChanged","ColumnChooserItemBase","indentation","IgxColumnHidingItemDirective","Alphabetical","DisplayOrder","CustomFilteringStrategy","ColumnChooserBase","disableFilter","columnsAreaMaxHeight","_currentColumns","_gridColumns","_rawColumns","_columnDisplayOrder","ColumnDisplayOrder","_filterCriteria","_filterColumnsPrompt","_title","createColumnItems","filterCriteria","clearFiltering","orderColumns","createColumnItem","localeCompare","createFilteringExpression","IgxColumnHidingComponent","showAllText","hideAllText","onColumnVisibilityChanged","columnItems","hiddenColumnsCount","hidableColumns","onVisibilityChanged","showAllColumns","hideAllColumns","IgxColumnHidingModule","IgxColumnPinningItemDirective","IgxColumnPinningComponent","checkboxValueChange","columnItem","pinnable","IgxColumnPinningModule","IgxGridToolbarComponent","excelExporter","csvExporter","_overlaySettings","gridHeight","calcHeight","exportExcel","exportCsv","getTitle","toolbarTitle","getExportText","exportText","getExportExcelText","exportExcelText","getExportCsvText","exportCsvText","exportClicked","exportButton","exportDropdown","exportToExcelClicked","performExport","exportToCsvClicked","exp","exportType","exporter","onToolbarExporting","toggleColumnHidingUI","columnHidingButton","columnHidingDropdown","toggleColumnPinningUI","columnPinningButton","columnPinningDropdown","toolbar","toolbarCustomContentTemplate","IgxGridToolbarCustomContentDirective","IgxGridGroupByRowComponent","gridSelection","paddingIndentationCssClass","isExpandedGroup","grRowExpr","isVirtualized","verticalScrollContainer","groupRowIndex","toggleGroup","isKeySupportedInGroupRow","handleTabKey","getColumnByName","rootSummariesEnabled","alt","IgxGridNavigationService","parentVirtDir","offsetWidth","rowComp","summariesRowList","virtDirRow","getColumnUnpinnedIndex","isColumnFullyVisible","forOfDir","headerContainer","displayContainerWidth","displayContainerScrollLeft","isColumnLeftFullyVisible","tslib_1.__spread","isRowInEditMode","isColumnEditable","gridOrderedColumns","findNextEditable","gridColumns","MoveDirection","getCellElementByVisibleIndex","isSummary","cellSelector","getCellSelector","nextElementSibling","performHorizontalScrollToCell","previousElementSibling","movePreviousEditable","addedIndex","editableIndex","rowEditTabs","last","moveNextEditable","rowElement","firstCell","allCells","verticalScroll","currentRowIndex","containerTopOffset","verticalDisplayContainerElement","offsetTop","tag","getRowSelector","getRowByIndex","focusPreviousElement","currentRowEl","focusElem","containerHeight","targetEndTopOffset","nextIndex_1","getNextRowByIndex","focusNextElement","isSummaryRow","rows","getAllRows","goToLastBodyElement","rowEl","moveFocusToFilterCell","toStart","isFilterRowVisible","focusFilterRowCloseButton","unpinnedFilterableColumns","focusFilterCellChip","scrollToFilterCell","navigatePrevFilterCell","prevFilterableIndex","firstFiltarableCol","getFirstPinnedFilterableColumn","prevColumn","prevVisibleIndex","navigateFirstCellIfPossible","navigateNextFilterCell","nextFilterableIndex","nextColumn","nextVisibleIndex","getLastPinnedFilterableColumn","pinnedFilterableColums","allowFiltering","filterMode","FilterMode","quickFilter","shouldPerformVerticalScroll","targetRowIndex","targetRow","unpinnedIndex","nextIndex","tbody","IgxRowEditTemplateDirective","IgxRowEditTextDirective","IgxRowEditActionsDirective","IgxRowEditTabStopDirective","allTabs","move","focusNextCell","cellIndex","lastEditableColumnIndex","firstEditableColumnIndex","targetCell","IgxGridBaseComponent","icons","IgxGridSortingPipe","filteredSortedData","IgxGridPreGroupingPipe","groupingExpressions","groupingExpansionState","groupsExpanded","IgxGridPostGroupingPipe","IgxGridPagingPipe","pagingState","IgxGridFilteringPipe","FILTERING_ICONS_FONT_SET","ExpressionUI","IgxFilteringService","columnsWithComplexFilter","areEventsSubscribed","isFiltering","columnToExpressionsMap","columnStartIndex","filteredColumn","selectedExpression","columnToFocus","shouldFocusNext","columnToMoreIconHidden","_datePipe","subscribeToEvents","updateFilteringCell","updateFilterCellArea","filterInternal","createSimpleFilteringTree","clearFilter","conditionOrExpressionTree","expressionsTreeForColumn","expressionForColumn","onFilteringDone","getExpressions","filterGlobal","registerSVGIcons","icons_1","icons_1_1","columnId","expressionUIs","generateExpressionsList","isFilteringTreeComplex","removeExpression","indexToRemove","expressionsList","beforeOperator","afterOperator","expressionUIList","currAndBranch","currExpressionUI","isFilterComplex","isComplex","getOperatorAsString","resourceStrings","igx_grid_filter_operator_and","igx_grid_filter_operator_or","getChipLabel","datePipe","focusFirst","focusChip","filteringRow","closeButton","gridId","currentColumnRight","currentColumnLeft","getChildAndOperatorsCount","expressionsUIs","generateExpressionsListRecursive","exprUI","prevExprUI","isFilteringExpressionsTreeEmpty","expressionTree","exprTree","WatchChanges","propDesc","privateKey","originalSetter","SimpleChange","IgxExcelStyleSearchComponent","clearInput","onCheckboxChange","itemSize","IgxExcelStyleDefaultExpressionComponent","onExpressionRemoved","onLogicOperatorChanged","inputValuesDirective","expressionUI","inputGroupConditions","inputValuesElement","isConditionSelected","conditionName","getConditionName","translateCondition","getInputWidth","getCondition","getIconName","conditions","toggleCustomDialogDropDown","dropdownConditions","onConditionsChanged","isValueSelected","onValuesInput","transformValue","onLogicOperatorButtonClicked","buttonIndex","logicOperatorButtonGroup","selectedButtons","onLogicOperatorKeyDown","onRemoveButtonClick","onInputConditionsKeyDown","IgxExcelStyleDateExpressionComponent","openDatePicker","IgxExcelStyleCustomDialogComponent","_customDialogPositionSettings","_customDialogOverlaySettings","dateExpressionTemplate","defaultExpressionTemplate","onCustomDialogOpening","selectedOperator","createInitialExpressionUIElement","onCustomDialogOpened","expressionComponents","rootGrid","onClearButtonClick","closeDialog","overlayComponentId","onApplyButtonClick","onAddButtonClick","markChildrenForCheck","scrollToBottom","onApplyButtonKeyDown","createCondition","expressionDateComponents","firstExprUI","secondExprUI","expressionsContainer","IgxExcelStyleSortingComponent","onSortButtonClicked","sortDirection","sortButtonGroup","isColumnGrouped","clearSort","FilterListItem","IgxExcelStyleSortingTemplateDirective","IgxExcelStyleMovingTemplateDirective","IgxExcelStyleHidingTemplateDirective","IgxExcelStylePinningTemplateDirective","IgxGridExcelStyleFilteringComponent","shouldOpenSubMenu","containsNullOrEmpty","selectAllSelected","selectAllIndeterminate","filterValues","columnMoving","Subscription","listData","uniqueValues","_subMenuPositionSettings","_subMenuOverlaySettings","igx_grid_excel_boolean_filter","igx_grid_excel_number_filter","igx_grid_excel_date_filter","igx_grid_excel_text_filter","customDialog","populateColumnData","excelStyleSorting","se","excelStyleSearch","clearFilterClass","closeDropdown","onPin","onHide","onTextFilterClick","currentTarget","gridRect","dropdownRect","mainDropdown","x1","subMenu","onTextFilterKeyDown","onSubMenuClosed","onSubMenuSelection","areExpressionsSelectable","areExpressionsValuesInTheList","firstValue","gridExpressionsTree","toDateString","shouldUpdateSelection","addBooleanItems","addItems","sortData","addBlanksItem","addSelectAllItem","filterListItem","selectAll","igx_grid_excel_select_all","blanks","igx_grid_excel_blanks","valueA","valueB","excelStyleSortingTemplateDirective","defaultExcelStyleSortingTemplate","excelStyleMovingTemplateDirective","defaultExcelStyleMovingTemplate","excelStylePinningTemplateDirective","defaultExcelStylePinningTemplate","excelStyleHidingTemplateDirective","defaultExcelStyleHidingTemplate","applyFilter","filterTree","filterOptimizationThreshold","blanksItemIndex","blanksItem","onClearFilterKeyDown","showCustomFilterItem","IgxGridHeaderComponent","_filteringService","hostRole","defaultClasses","igx-grid__th","asc","ascending","descending","igx-grid__th--number","igx-grid__th--sortable","igx-grid__th--filtrable","igx-grid__th--sorted","sorted","klass","hasColumnGroups","maxLevelHeaderDepth","defaultRowHeight","initFilteringSettings","getSortDirection","_componentOverlayId","triggerSort","onFilteringIconClick","toggleFilterDropdown","onSortingIconClick","sortDir","filterIconTarget","filterIconClassName","_filterMenuOverlaySettings","_filterMenuPositionSettings","onOverlayOpening","onOverlayClosed","IgxGridFilteringCellComponent","baseClass","currentTemplate","moreFiltersCount","onTabKeyDown","isLastElementFocused","onShiftTabKeyDown","isFirstElementFocused","isChipVisible","updateVisibleFilters","filterCellTemplate","complexFilter","defaultFilter","emptyFilter","onChipClicked","isColumnRightVisible","isColumnLeftVisible","onChipRemoved","filteringIndicatorClass","isMoreIconHidden","focusFirstElement","focusElement","ghostChip","complexChip","ex","moreIcon","chipsArea","areaWidth","viewWidth","chipsAreaElements","visibleChipsCount","moreIconWidth","areAllColumnsInView","IgxGridHeaderGroupComponent","getHeaderGroupWidth","igx-grid__th--pinned","igx-grid__th--pinned-last","igx-grid__drag-col-header","isHeaderDragged","igx-grid__th--filtering","isFiltered","CurrentResourceStrings","GridResStrings","igx_grid_groupByArea_message","igx_grid_emptyFilteredGrid_message","igx_grid_emptyGrid_message","igx_grid_filter","igx_grid_filter_row_close","igx_grid_filter_row_reset","igx_grid_filter_row_placeholder","igx_grid_filter_row_boolean_placeholder","igx_grid_filter_row_date_placeholder","igx_grid_complex_filter","igx_grid_filter_contains","igx_grid_filter_doesNotContain","igx_grid_filter_startsWith","igx_grid_filter_endsWith","igx_grid_filter_equals","igx_grid_filter_doesNotEqual","igx_grid_filter_empty","igx_grid_filter_notEmpty","igx_grid_filter_null","igx_grid_filter_notNull","igx_grid_filter_before","igx_grid_filter_after","igx_grid_filter_today","igx_grid_filter_yesterday","igx_grid_filter_thisMonth","igx_grid_filter_lastMonth","igx_grid_filter_nextMonth","igx_grid_filter_thisYear","igx_grid_filter_lastYear","igx_grid_filter_nextYear","igx_grid_filter_greaterThan","igx_grid_filter_lessThan","igx_grid_filter_greaterThanOrEqualTo","igx_grid_filter_lessThanOrEqualTo","igx_grid_filter_true","igx_grid_filter_false","igx_grid_filter_all","igx_grid_filter_condition_placeholder","igx_grid_summary_count","igx_grid_summary_min","igx_grid_summary_max","igx_grid_summary_sum","igx_grid_summary_average","igx_grid_summary_earliest","igx_grid_summary_latest","igx_grid_excel_filter_moving_left","igx_grid_excel_filter_moving_left_short","igx_grid_excel_filter_moving_right","igx_grid_excel_filter_moving_right_short","igx_grid_excel_filter_moving_header","igx_grid_excel_filter_sorting_asc","igx_grid_excel_filter_sorting_asc_short","igx_grid_excel_filter_sorting_desc","igx_grid_excel_filter_sorting_desc_short","igx_grid_excel_filter_sorting_header","igx_grid_excel_custom_dialog_add","igx_grid_excel_custom_dialog_clear","igx_grid_excel_custom_dialog_header","igx_grid_excel_cancel","igx_grid_excel_apply","igx_grid_excel_search_placeholder","igx_grid_excel_hide","igx_grid_excel_pin","igx_grid_excel_unpin","igx_grid_excel_custom_filter","TimePickerResStrings","igx_time_picker_ok","igx_time_picker_cancel","updateResourceStrings","currentStrings","newStrings","IgxGridSummaryService","summaryCacheMap","rootSummaryID","summaryHeight","maxSummariesLenght","retriggerRootPipe","deleteOperation","calculateGridHeight","isGroupedColumn","deleteSummaryCache","isTreeGrid","removeAllTreeGridSummaries","isHierarchicalGrid","getSummaryID","cache","calcMaxSummaryHeight","maxSummaryLength","hasSummary","getCurrentSummaryColumn","defaultSummaryHeight","calculateSummaries","rowSummaries","columnValues","updateSummaryCache","groupingArgs","compareGroupingExpressions","filteringApplied","summaryIDs","removeChildRowSummaries","newExpressions","removedCols","ungroupedColumns","newExpr","colName","IgxSummaryCellComponent","firstCellIndentation","isKeySupportedInCell","getRowElementByIndex","sr","dataRowIndex","translateSummary","summary","IgxSummaryRowComponent","getColumnSummaries","LEFT","TOP","RIGHT","BOTTOM","TOPLEFT","TOPRIGHT","BOTTOMLEFT","BOTTOMRIGHT","IgxGridDragSelectDirective","onDragStop","onDragScroll","end$","lastDirection","DragScrollDirection","startDragSelection","activeDrag","_measureDimensions","_sub","_interval$","stopDragSelection","_activeDrag","trunc","IgxGridColumnResizerComponent","IgxGridFilteringRowComponent","_conditionsOverlaySettings","_operatorsOverlaySettings","chipAreaScrollOffset","isKeyPressed","isComposing","resetExpression","addExpression","showHideArrowButtons","onTabKeydown","onEscKeydown","defaultDateUI","defaultFilterUI","onPrefixKeyDown","dropDownConditions","toggleConditionsDropDown","inputGroupPrefix","onInputKeyDown","commitInput","onInputKeyUp","onCompositionStart","onCompositionEnd","datePickerClose","indexToDeselect","scrollChipsWhenAddingExpression","onClearKeyDown","onClearClick","onCommitKeyDown","onCommitClick","onInputGroupFocusout","focusedElement","onDateSelected","toggleOperatorsDropDown","dropDownOperators","unaryConditionChangedCallback","conditionChangedCallback","onChipSelected","onLeftArrowKeyDown","scrollChipsOnRemove","scrollChipsOnArrowPress","arrowPosition","chipAraeChildren","containerRect","containerWidth","chipsAreaWidth","showArrows","isColumnFiltered","containerRectRight","lastChipRectRight","dif","IgxGridTransaction","rootLevelOnly","childLevelsOnly","rootAndChildLevels","excelStyleFilter","dataCell","summaryCell","hierarchicalRow","differs","viewRef","_resourceStrings","_emptyGridMessage","_emptyFilteredGridMessage","_isLoading","overlayIDs","autoGenerate","columnHidingTitle","columnPinningTitle","onRowSelectionChange","onRowEditCancel","onColumnInit","onSortingDone","onPagingDone","onRowAdded","onRowDragStart","onRowDragEnd","columnsWithNoSetWidths","_showToolbar","_exportExcel","_exportCsv","_toolbarTitle","_exportText","_exportExcelText","_exportCsvText","_rowEditable","_filteredSortedData","toolbarHtml","chipsGoupingExpressions","activeMatchIndex","matchInfoCache","_perPage","_page","_paging","_rowDrag","_columns","_filteringExpressionsTree","_maxLevelHeaderDepth","_columnHiding","_columnPinning","_keydownListener","_vScrollListener","_hScrollListener","_wheelListener","_allowFiltering","_filterMode","_hiddenColumnsText","_pinnedColumnsText","_ngAfterViewInitPassed","_multiRowLayoutRowSize","_totalWidth","_pinnedVisible","_unpinnedVisible","_pinnedWidth","_unpinnedWidth","_visibleColumns","_columnGroups","_defaultTargetRecordNumber","_summaryPosition","GridSummaryPosition","_summaryCalculationMode","GridSummaryCalculationMode","rowEditPositioningStrategy","rowEditSettings","rowOutletDirective","resizeHandler","calculateGridSizes","_scrollWidth","filteringExpressionTreeClone","totalPages","previous","deselectAllRows","refreshGridState","theadRow","headerGroups","_summaryRowList","sumList","_rowList","rList","_dataRowList","toolbarCustomContentTemplates","_outletDirective","rowEditingOutletDirective","rowEditCustom","defaultRowEditTemplate","orderedColumns","rowEditTabsCUSTOM","rowEditTabsDEFAULT","_currentRowState","getExportExcel","getExportCsv","onStable","changeRowEditingOverlayStateOnScroll","hideOverlays","horizontalScrollHandler","_horizontalForOfs","vfor","overlayID","keydownHandler","isNavigationKey","_setupServices","_setupListeners","destructor","ind","columnListDiffer","shouldGenerate","getScrollWidth","setupColumns","autogenerateColumns","initColumns","_derivePossibleHeight","onColumnsChanged","resetColumnsVisibleIndexCache","resetForOfCache","firstVirtRow","resetColumnCollections","resetCachedWidths","initPinning","isAttachedToDom","mutationsList","subtree","list","combineForOfCollections","summaryList","vertScrDC","dataList","toggleColumnVisibility","getFeatureColumnsWidth","defaultHeaderGroupMinWidth","getRowByKey","keyValue","getCellByColumn","columnField","getCellByKey","to","fromIndex","toIndex","newList","_resetColumnList","notifyOnChanges","_reorderPinnedColumns","dropIndex","_moveChildColumns","buffer","dropTarget","fi","ti","nextPage","previousPage","isFirstPage","paginate","addRow","deleteRow","updateCell","isDefined","updateRow","editableCell","enableSummaries","rest","_multipleSummaries","disableSummaries","_disableMultipleSummaries","pinColumn","unpinColumn","findNext","findPrev","updateActiveInfo","rebuildMatchCache","activeInfo_1","clearSearch","summaryCalculationMode","dataLength","isPercentHeight","rowBasedHeight","parentHeight","viewPortHeight","_derivePossibleWidth","columnWidthCombined","allItems","summariesHeight","_calculateGridBodyHeight","getGroupAreaHeight","getToolbarHeight","toolbarHeight","showToolbar","getPagingHeight","pagingHeight","paginator","footerBordersAndScrollbars","tfoot","computed","groupAreaHeight","getPropertyValue","defaultTargetBodyHeight","bodyHeight","hasVerticalSroll","scrollWidth","baseWidth","computedWidth","headerCheckboxContainer","visibleChildColumns","visibleCols","colsPerBlock","block","combinedBlocksSize","blockCols","columnsWithSetWidths","columnsToSize","sumExistingWidths","curr","widthValue","calculateGridWidth","getElementById","isPercentWidth","added_1","removed_1","hasScroll","repositionRowEditingOverlay","headerDragContainer","takeHidden","fc","fc_1","fc_1_1","summaryOperand","customSummary","resolveDataTypes","fields","generateDataFields","onlyTopLevel","layoutSize","columnLayoutColumns","setColumnEditState","onHeaderCheckboxClick","headerCheckbox","headerStatus","filteredItemsStatus","currSelection","atLeastOneSelected","notAllSelected","dataItem","updateHeaderCheckboxStatusOnFilter","selectedRows","selectRows","rowIDs","selectableRows","selectAllRows","clearCellSelection","dragScroll","arg","columnToVisibleIndex","startNode","endNode","getSelectedRanges","extractDataFromSelection","selectedData","selectionMap","tuple","selectionMap_1","selectionMap_1_1","temp_1","temp_1_1","getSelectedData","newSelectionAsSet","oldSelectionAsSet","navigateTo","visibleColIndex","childGridsData","executeCallback","getNextCell","currRowIndex","curVisibleColIndex","isValidPosition","colIndexes","editCol","nextCellIndex","getNextDataRowIndex","getPreviousCell","prevCellIndex","getPrevDataRowIndex","GridKeydownTargetType","summaryCells","prevRow","nextRow","isScroll","compareDocumentPosition","DOCUMENT_POSITION_CONTAINS","trackColumnChanges","increment","rebuildCache","matchInfo","currentPinnedWidth","newUnpinnedCols","delayScrolling","scrollDirective","scrollToHorizontally","scrollRow","goal","c1","c2","numberPipe","dataRow","occurenceIndex","searchIndex","_group","getGroupByRecords","rowEditingOverlay","toggleRowEditingOverlay","configureRowEditingOverlay","rowEditingWheelHandler","closeRowEditingOverlay","rowStyle","useOuter","parentRowOutletDirective","rowChanges","writeToData","endRowTransaction","columnindex","ri","currentCell","hasHorizontalScroll","unpinnedWidth","_restoreVirtState","rowForOf","gridScrLeft","cachedViewLoaded","oldContext","tmplId","templateID","index_1","summaryRow","IgxTemplateOutletDirective","_viewContainerRef","_embeddedViewsMap","onViewCreated","onViewMoved","onCachedViewLoaded","_getActionType","TemplateOutletAction","CreateView","_recreateView","MoveView","_moveView","UseCachedView","_useCachedView","UpdateViewContext","_updateExistingContext","igxTemplateOutletContext","_viewRef","igxTemplateOutlet","tmplID","cachedView","_cloneContext","_shouldRecreateView","ctxChange","_hasContextShapeChanged","prevCtxKeys","currCtxKeys","currCtxKeys_1","currCtxKeys_1_1","ctx","movedView","shouldRecreate","IgxTemplateOutletModule","IgxSummaryDataPipe","IgxProcessBarTextTemplateDirective","CENTER","DANGER","BaseProgress","requestAnimationId","_valueInPercent","_max","_animate","runAnimation","updateProgressSmoothly","passedValue","convertInPercentage","progressValue","valueInPercent","updateProgress","isInLimitRange","updateProgressDirectly","directionFlow","comparator","isExceedingUpperLimit","isExceedingLowerLimit","NEXT_LINEAR_ID","NEXT_CIRCULAR_ID","IgxLinearProgressBarComponent","valueMin","striped","textAlign","IgxTextAlign","textVisibility","textTop","onProgressChanged","maxNum","_step","valueInRange","getValueInProperRange","changedValues","IgxProgressType","IgxCircularProgressBarComponent","STROKE_OPACITY_DVIDER","STROKE_OPACITY_ADDITION","_circleRadius","_circumference","PI","valueInProperRange","FRAMES","strokeDashoffset","getProgress","strokeOpacity","_svgCircle","percentage","IgxProgressBarModule","IgxGridCellStylesPipe","callbackOrValue","IgxGridNotGroupedPipe","IgxGridTopLevelColumns","IgxGridFilterConditionPipe","IgxGridTransactionPipe","IgxGridPipesModule","IgxExcelStyleColumnMovingComponent","findColumn","onMoveButtonClicked","moveDirection","IgxListBase","IgxEmptyListTemplateDirective","IgxDataLoadingTemplateDirective","IgxListItemLeftPanningTemplateDirective","IgxListItemRightPanningTemplateDirective","HammerGesturesManager","doc","hammerOptions","inputClass","TouchInput","recognizers","Pan","Pinch","enable","Rotate","Swipe","DIRECTION_HORIZONTAL","_hammerManagers","supports","eventHandler","mc","getManagerForElement","addManagerForElement","handler","eventObj","on","off","addGlobalEventListener","getGlobalEventTarget","getDOM","setManagerOption","manager","removeManagerForElement","IgxListItemComponent","_panState","IgxListPanState","panOffset","lastPanDir","onItemClicked","panStart","isTrue","allowLeftPanning","allowRightPanning","panMove","isPanningToLeft","showLeftPanTemplate","setContentElementLeft","maxLeft","showRightPanTemplate","maxRight","panEnd","relativeOffset","widthTriggeringGrip","panEndTriggeringThreshold","oldPanState","hideLeftAndRightPanTemplates","keepItem","onLeftPan","onRightPan","args2","oldState","newState","onPanStateChange","setLeftAndRightTemplatesVisibility","leftVisibility","rightVisibility","leftPanningTemplateElement","rightPanningTemplateElement","candidates","getElementsByClassName","IgxListComponent","isLoading","isListEmpty","dataLoadingTemplate","defaultDataLoadingTemplate","emptyListTemplate","defaultEmptyListTemplate","IgxListModule","IgxExcelStyleSearchFilterPipe","it","IgxGridExcelStyleFilteringModule","IgxRowDragDirective","_rowDragStarted","transitionEndEvent","endDragging","dropArea","ghost","rowRect","ghostCells","IgxDragIndicatorIconDirective","IgxRowDragModule","IgxGridCommonModule","IgxGridAPIService","groupingState","arrange_sorting_expressions","groupBy_multiple","clear_groupby","names_1","groupedCols","newSortingExpr","grExprIndex","grpExpandState","grExpr","sortExprIndex","groupingState_1","groupingState_1_1","groupBy_get_expanded_for_group","grState","groupBy_is_row_in_group","rowInGroup","groupBy_toggle_group","expansionState","isEditRowInGroup","rowState","groupExprA","groupExprB","get_groupBy_record_id","recordId","hierrarchy","groupByKey","IgxGroupByRowTemplateDirective","IgxGroupAreaDropDirective","hovered","columnBelongsToGrid","isGrouped","column_1","closestParentByAttr","attr","closestGridID","IgxGridComponent","_groupingExpressions","_groupingExpandState","_hideGroupedColumns","_dropAreaMessage","onGroupingDone","dragIndicatorIconTemplate","_gridAPI","oldExpressions","_applyGrouping","groupedCols_1","ungroupedCols_1","groupingDoneArgs","groupedColumns","groupingDiffer","_setGroupColsVisibility","_groupsRowList","_groupRowTemplate","_groupAreaTemplate","clearGrouping","_getStateForGroupRow","_toggleGroup","isGroupByRecord","toggleAllGroupRows","emptyGridTemplate","emptyFilteredGridTemplate","emptyGridDefaultTemplate","loadingGridTemplate","loadingGridDefaultTemplate","chipsOrderChanged","newGrouping","KeyboardEvent","chipsMovingEnded","columnExpr","groupArea","headerGroupContainer","groupByRecord","dropAreaTemplate","defaultDropAreaTemplate","getGroupByChipTitle","groupTemplate","hideGroupedColumns","source_1","IgxGridRowComponent","IgxGridSummaryPipe","flatData","summaryPosition","summaryPipeTrigger","addSummaryRows","recordsWithSummary","lastChildMap","maxSummaryHeight","groupRecords","groupRecord","groupRecordId","removeDeletedRecord","summaryRecord","lastChild","lastChildId","IgxGridModule","IgxTreeGridAPIService","processedRootRecords","expand_row","collapse_row","toggle_row_expansion","treeRecord","isExpanded","get_row_expansion_state","loadChildrenOnDemand","hasChildrenKey","onRowToggle","expand_path_to_record","expansionDepth","foreignKey","childData","treeGrid","flatDataWithCascadeOnDeleteAndTransactions","cascadeOnDelete","selectedChildren","get_selected_children","generateRowPath","selectedRowIDs","row_deleted_parent","IgxTreeGridNavigationService","IgxRowLoadingIndicatorTemplateDirective","IgxTreeGridComponent","processedRecords","_expansionDepth","Infinity","_expansionStates","loadingRows","cloneMap","_rowLoadingIndicatorTemplate","loadChildrenOnRowExpansion","rowLoadingTemplate","parentID_1","addChildRows","parentID","children_1","children_1_1","parentData","pid","mapIn","mapCloned","mapObj","expandRow","collapseRow","toggleRow","expandAll","collapseAll","parentRowID","parentRecord","childKey","processedExpandedFlatData","nonColumnLayoutColumns","IgxTreeGridRowComponent","_treeRow","IgxTreeGridHierarchizingPipe","hierarchicalRecords","treeGridRecordsMap","hierarchizeFlatData","hierarchizeRecursive","getRowID","missingParentRecords","setIndentationLevels","indentationLevel","IgxTreeGridFlatteningPipe","expandedLevels","getFlatDataRecursive","parentExpanded","updateNonProcessedRecordExpansion","IgxTreeGridSortingPipe","flattenTreeGridRecords","records_1","records_1_1","IgxTreeGridPagingPipe","IgxTreeGridTransactionPipe","aggregatedChanges","flatDataClone","hierarchicalDataClone","cloneHierarchicalArray","array_1","array_1_1","clonedItem","IgxTreeGridCellComponent","showIndicator","treeGridAPI","onIndicatorFocus","onLoadingDblClick","indicatorWidth","indicator","indicatorStyle","indicatorMargin","marginRight","leftPadding","indentationDiv","indentationStyle","IgxTreeGridSummaryPipe","cellIndentation","childRecord","deletedRows","lenght","IgxTreeGridModule","IgxHierarchicalSelectionAPIService","hSelection","add_sub_item","rootID","selItem","get_sub_item","clear_sub_item","IgxHierarchicalGridNavigationService","parentGrid","getClosestElemByTag","getChildContainer","getChildGridRowContainer","getChildGrid","childGridID","hgridAPI","getChildGrids","g","getIsChildAtIndex","isChildGridRecord","prevElem","focusPrevChild","_navigateUpInChild","scrollGrid","focusPrev","nextElem","focusNextChild","_navigateDownInChild","focusNext","cellSelector_1","_focusScrollCellInView","targetIndex_1","scrTopPosition","cellSelector_2","targetIndex_2","diffBottom","rowIsVisible","gridTop","_getMaxTop","diffTop","scrGrid","getNextScrollable","topGrid","summaryRows","hasSummaries","isLastDataRow","nextIsDataRow","isLastColumn","isLastSummaryRow","virt","isNextChild","parentHasSummary","parentRowIndex","isLastRowInParent","nextIsSiblingChild","parentSummary","focusNextRow","childContainer","focusNextChildDOMElem","childGrid","targetGrid","prevSiblingChild","gridElem","dataRows","hasRows","performShiftTabIntoChild","getLastGridElem","lastRowIndex_1","closestChild","trContainer","focusPrevRow","scrTop","scrWith","lastCellIndex","grids","gridElems","childLevel","childLayoutList","hg","parentRow","isScrolledToBottom","lastRowInChild","currGrid","parentContainer","childRowContainer","prevIsSiblingChild","getNextParentInfo","nextElement","nonScrollable","parentInfo","nextParentGrid","nextParentElem","getNextScrollableDown","_getMinBottom","cell_1","closestScrollableGrid","gridBottom","inView","canScroll","cellElem","inChild","cellSelector_3","cell_2","rIndex_1","horizontalScrollGridToIndex","callBackFunc","scrollable","containerTop","endIsVisible","sourceElem","targetTag","IgxHierarchicalTransactionServiceFactory","useFactory","hierarchicalTransactionServiceFactory","IgxHierarchicalGridBaseComponent","transactionFactory","_expandChildren","createColumnsList","_createColumn","_createColGroupComponent","_createColComponent","factoryGroup","inputs","newChildren_1","newCol","factoryColumn","getGridsForIsland","rowIslandID","getChildGridsForRowIsland","IgxHierarchicalGridAPIService","childRowIslands","childGrids","registerChildRowIsland","rowIsland","getChildRowIsland","currPath","pathElem","childrenForLayout","rowIslandKey","inDepth","layoutMap","getParentRowId","registerChildGrid","getChildGridByID","IgxRowIslandAPIService","unset","oldId","unsetChildRowIsland","rowIslandAPI","IgxRowIslandComponent","childColumns","onLayoutChange","onGridCreated","initialChanges","layout_id","isInit","expandChildren","updateOnRender","pId","parentId","parentIsland","nestedColumns","colsArray","topCols","updateColumnList","IgxChildGridRowComponent","selectionAPI","hGrid","ch","_handleLayoutChanges","childRow","l","IgxHierarchicalGridComponent","childLayoutKeys","highlightedRowID","_hierarchicalState","h_id","childGridTemplates","updateParentSizes","hierarchicalState","hg_verticalScrollHandler","hg_horizontalScrollHandler","cachedData","recalcColSizes","allLayoutList","colLength","hasExpandableChildren","headerHierarchyExpander","getDefaultExpanderWidth","isRowHighlighted","isHierarchicalRecord","trackChanges","moveView","rootHeight","topDiff","collapseAllRows","viewCreatedHandler","viewMovedHandler","relatedGrid","vScr","hScr","inDeph","onContainerScroll","hadScrollbar","IgxHierarchicalGridCellComponent","helement","_rootGrid","_getRootGrid","_clearAllHighlights","currentElement","persistFocusedCell","IgxHierarchicalRowComponent","hselection","IgxGridHierarchicalPipe","childKeys","addHierarchy","IgxGridHierarchicalPagingPipe","IgxHierarchicalGridModule","IgxActionIconDirective","IgxNavbarComponent","titleId","actionIconTemplate","actionButtonIcon","_triggerAction","IgxNavbarModule","IgxNavDrawerItemDirective","activeClass","IgxNavDrawerTemplateDirective","IgxNavDrawerMiniTemplateDirective","IgxNavigationDrawerComponent","_state","_touchManager","enableGestures","pinThreshold","miniWidth","pinChange","opened","closing","_gesturesAttached","_widthCache","windowWidth","css","drawer","mini","styleDummy","_panning","_maxEdgeZone","checkPinThreshold","getWindowWidth","swipe","startPosition","center","distance","maxEdgeZone","panstart","_panStartWidth","getExpectedWidth","_panLimit","setElementClass","visibleWidth","newX","percent","hasAnimateWidth","setXSize","toPrecision","resetPan","toggleOpenedEvent","toggleClosedEvent","miniTemplate","contentTemplate","_miniTemplate","setDrawerWidth","_drawer","_overlay","_styleDummy","updateEdgeZone","ensureEvents","_resizeObserver","set_maxEdgeZone","innerWidth","screen","setElementStyle","getDrawerWidth","Renderer","IgxNavigationDrawerModule","SLIDER","RANGE","FROM","TO","IgxSliderComponent","isContinuous","SliderType","thumbLabelVisibilityDuration","isActiveLabel","activeHandle","SliderHandle","xOffset","xPointer","pPointer","pMin","pMax","hasViewInit","_minValue","_maxValue","_trackUpperBound","_upperBound","invalidateValue","_trackLowerBound","_lowerBound","upperBound","lowerBound","_lowerValue","isRange","upperValue","_upperValue","lowerValue","lower","snapValueToStep","upper","positionHandlesAndUpdateTrack","valueToFraction","setTickInterval","thumbFrom","thumbTo","showThumbsLabels","timer","$event","toggleThumbLabel","onPanEnd","hideThumbsLabels","emitValueChanged","hideThumbLabelsOnBlur","incrementSign","newLower","hasValueChanged","onTap","setSliderWidth","setSliderOffset","setPointerPosition","setPointerPercent","closestHandle","setValues","generateTickMarks","getSliderOffset","toFixed","num","positionHandle","handle","updateTrack","fromOffset","offsetLeft","toOffset","closestTo","ticks","valueModStep","snapValue","positions","fractionToValue","slider","fraction","positionGap","track","isSliderWithDifferentValue","isRangeWithOneDifferentValue","IgxSliderModule","IgxSnackbarComponent","autoHide","displayTime","animationStarted","triggerAction","snackbarAnimationStarted","fromState","snackbarAnimationDone","toOpacity","IgxSnackbarModule","IgxSwitchComponent","switch","_onSwitchChange","_onSwitchClick","SwitchLabelPosition","IGX_SWITCH_REQUIRED_VALIDATOR","IgxSwitchRequiredDirective","IgxSwitchModule","IgxTabTemplateDirective","IgxBottomNavComponent","onTabSelected","onTabDeselected","selectedIndex","_itemStyle","tabs","panels","_selectedPanelHandler","_deselectPanel","selectedTab","tab","IgxTabComponent","IgxTabPanelComponent","_tabBar","_tabTemplate","tabTemplate","_changesCount","relatedPanel","IgxBottomNavModule","IgxTabsBase","scrollElement","scrollRight","IgxTabItemComponent","_tabs","_nativeTabItem","onResize","selectedIndicator","nativeTabItem","relatedGroup","focusDelay","isLeftArrow","tabsArray","IgxRightButtonStyleDirective","getRightButtonStyle","ButtonStyle","viewPortWidth","viewPort","itemsContainerChildrenCount","itemsContainer","itemsContainerWidth","lastTab","headerContainerWidth","IgxLeftButtonStyleDirective","getLeftButtonStyle","IgxTabItemTemplateDirective","IgxTabsGroupComponent","transformContentAnimation","tabItem","relatedTab","transformIndicatorAnimation","onTabItemSelected","tabElement","viewPortOffsetWidth","contentOffset","tabsContainer","contentsContainer","FIXED","CONTENTFIT","IgxTabsComponent","tabsType","onTabItemDeselected","_selectedIndex","setSelectedGroup","iconLabelFound","TabsType","selectedGroupHandler","prevSelectedIndex","deselectGroup","_groupChanges$","resetSelectionOnCollectionChanged","selectGroupByIndex","selectableGroup","selectedTabItem","tabsArray_1","tabsArray_1_1","IgxTabsModule","IGX_TIME_PICKER_COMPONENT","IgxItemListDirective","timePicker","isActive","nextItem","nextHour","nextMinute","nextAmPm","prevHour","prevMinute","prevAmPm","listName","minuteList","_ampmItems","ampmList","hourList","okButtonClick","hideOverlay","cancelButtonClick","onHover","onPanMove","IgxHourItemDirective","itemList","isSelectedHour","selectedHour","scrollHourIntoView","IgxMinuteItemDirective","isSelectedMinute","selectedMinute","scrollMinuteIntoView","IgxAmPmItemDirective","isSelectedAmPm","selectedAmPm","scrollAmPmIntoView","IgxTimePickerTemplateDirective","TimeDisplayFormatPipe","maskAmPM","sections","hour","amPM","prompt","regExp","hourVal","minutesVal","TimeInputFormatPipe","cleared","HOURS_POS","MINUTES_POS","AMPM_POS","TimePickerHammerConfig","IgxTimePickerComponent","itemsDelta","_hourItems","_minuteItems","isNotEmpty","displayFormat","inputFormat","_okButtonLabel","_cancelButtonLabel","_isHourListLoop","_isMinuteListLoop","_hourView","_minuteView","_ampmView","_isValueValid","dispVal","_formatTime","_displayValue","displayValue","setThroughUI","formatValue","minuteEntries","hourEntries","timePickerTemplateDirective","defaultTimePickerTemplate","dropdownInputTemplate","_generateHours","_generateMinutes","_generateAmPm","spinOnEdit","_input","_onDropDownClosed","onKeydownSpace","onAltArrowDown","_scrollItemIntoView","isListLoop","viewType","itemIntoView","_itemToString","_nextItem","_prevItem","_viewToString","leadZeroHour","leadZeroMinute","itemsCount","formattedMinute","minute","formattedHour","_updateHourView","_updateMinuteView","_updateAmPmView","_addEmptyItems","hourItemsCount","minuteItemsCount","_getSelectedTime","_convertMinMaxValue","_dateFromModel","_isEntryValid","re","validHourEntries","validMinuteEntries","_updateEditableInput","_spinHours","currentVal","minVal","maxVal","hDelta","_spinMinutes","mDelta","_initializeContainer","_prevSelectedHour","_prevSelectedMinute","_prevSelectedAmPm","_closeDropDown","posStrategy","hourIntoView","minuteIntoView","ampmIntoView","time","hoursInView","minutesInView","ampmInView","ampm","preserveAmPm","prompts","amPm","displayVal","IgxTimePickerModule","IgxToastComponent","CSS_CLASSES","IGX_TOAST_BOTTOM","IGX_TOAST_MIDDLE","IGX_TOAST_TOP","onShowing","onShown","onHiding","onHidden","IgxToastPosition","mapPositionToClassName","IgxToastModule","IgxSelectGroupComponent","IgxSelectItemComponent","SelectPositioningStrategy","_selectDefaultSettings","defaultWindowToListOffset","positionAndScrollBottom","outBoundsAmount","listContainerBoundRect","inputBorderTop","positionNoScroll","CURRENT_POSITION_Y","positionAndScrollTop","getItemsOutOfView","currentScroll","remainingScroll","listOutOfBounds","elementContainer","returnVals","Amount","inputRect","LIST_HEIGHT","itemTextPadding","itemTextIndent","point","itemElement","X","Y","getFirstItemElement","inputHeight","itemBoundRect","itemTopListOffset","CURRENT_BOTTOM_Y","OUT_OF_BOUNDS","borderTopWidth","itemLeftPadding","textIndent","numericPadding","numericTextIndent","IgxSelectToggleIconDirective","IgxSelectComponent","itemText","Promise","resolve","IgxSelectItemNavigationDirective","inputStream","clearStream$","EMPTY","captureKey","activateItemByText","activeItemIndex","IgxSelectModule","changei18n","getCurrentResourceStrings","SMALL","MEDIUM","LARGE"],"mappings":"81BACIA,KAAA,2CACAC,MAAA,2CACAC,MAAA,2CACAC,MAAA,2CACAC,KAAA,2CACAC,KAAA,2CACAC,KAAA,2CACAC,KAAA,gDAIAP,KAAA,2CACAC,MAAA,2CACAC,MAAA,2CACAC,MAAA,2CACAC,KAAA,2CACAC,KAAA,2CACAC,KAAA,2CACAC,KAAA,4CCfEC,EAA4B,CAC9BC,EAAAA,MAAM,CACFC,QAAS,qBAEbC,EAAAA,QACI,oCACAF,EAAAA,MAAM,CACFC,QAAS,qBAKfE,EAA+B,CACjCC,MAAO,KACPC,SAAU,QACVC,OAAQC,EAAQZ,KAChBa,WAAY,EACZC,aAAc,GAGZC,EAAqCC,EAAAA,UAAUZ,EAAM,CACvDa,OAAQT,IAGNU,EAAsCF,EAAAA,UAAUZ,EAAM,CACxDa,OAAQ,CACJR,MAAO,KACPC,SAAU,QACVC,OAAQC,EAAQZ,KAChBa,WAAY,EACZC,aAAc,KClBlBK,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAG5B,SAAgBO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,IAEKO,MAAMb,KAAMU,YAGhC,SAUgBI,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2H5B,EAAvH6B,EAAIT,UAAUC,OAAQS,EAAID,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAO1B,OAAO6B,yBAAyBL,EAAQC,GAAOC,EACrH,GAAuB,iBAAZI,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASR,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIV,EAAIO,EAAWJ,OAAS,EAAQ,GAALH,EAAQA,KAASlB,EAAIyB,EAAWP,MAAIY,GAAKD,EAAI,EAAI7B,EAAE8B,GAAS,EAAJD,EAAQ7B,EAAE0B,EAAQC,EAAKG,GAAK9B,EAAE0B,EAAQC,KAASG,GAChJ,OAAW,EAAJD,GAASC,GAAK5B,OAAOgC,eAAeR,EAAQC,EAAKG,GAAIA,EAGhE,SAIgBK,EAAWC,EAAaC,GACpC,GAAuB,iBAAZL,SAAoD,mBAArBA,QAAQM,SAAyB,OAAON,QAAQM,SAASF,EAAaC,GAGpH,SAyCgBE,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWzB,EAAI,EAChE,OAAIuB,EAAUA,EAAEnB,KAAKkB,GACd,CACHI,KAAM,WAEF,OADIJ,GAAKtB,GAAKsB,EAAEnB,SAAQmB,OAAI,GACrB,CAAEK,MAAOL,GAAKA,EAAEtB,KAAM4B,MAAON,KAKhD,SAAgBO,EAAOP,EAAGrB,GACtB,IAAIsB,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBV,EAAYkB,EAA3B9B,EAAIuB,EAAEnB,KAAKkB,GAAOS,EAAK,GAC3B,IACI,WAAc,IAAN9B,GAAsB,EAANA,QAAcW,EAAIZ,EAAE0B,QAAQE,MAAMG,EAAGC,KAAKpB,EAAEe,OAExE,MAAOM,GAASH,EAAI,CAAEG,MAAOA,WAEzB,IACQrB,IAAMA,EAAEgB,OAASL,EAAIvB,EAAU,YAAIuB,EAAEnB,KAAKJ,WAExC,GAAI8B,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,EAGX,SAAgBG,IACZ,IAAK,IAAIH,EAAK,GAAI/B,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3C+B,EAAKA,EAAGI,OAAON,EAAO3B,UAAUF,KACpC,OAAO+B,MC9HLK,EAAkC,CACpCrE,EAAAA,MAAM,CACFsE,mBAAoB,SACpBC,eAAgB,gBAEpBrE,EAAAA,QACI,oCACAsE,EAAAA,UAAU,CACNxE,EAAAA,MAAM,CACFyE,OAAQ,EACRC,UAAW,sHAGf1E,EAAAA,MAAM,CACFyE,OAAQ,EACRC,UAAW,sHAOrBvE,EAA+B,CACjCC,MAAO,KACPC,SAAU,QACVC,OAAQC,EAAQhB,KAChBoF,SAAU,IACVC,YAAa,MACbC,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,WAAY,EACZC,cAAe,OAGbC,EAAsCvE,EAAAA,UAAU0D,EAAY,CAC9DzD,OAAMiB,EAAA,GACC1B,KAILgF,EAAyCxE,EAAAA,UAAU0D,EAAY,CACjEzD,OAAMiB,EAAA,GACC1B,EAAU,CACbwE,UAAW,QAIbS,EAAuCzE,EAAAA,UAAU0D,EAAY,CAC/DzD,OAAMiB,EAAA,GACC1B,EAAU,CACb0E,QAAS,EACTC,QAAS,MAIXO,EAAwC1E,EAAAA,UAAU0D,EAAY,CAChEzD,OAAMiB,EAAA,GACC1B,EAAU,CACbwE,UAAW,IACXE,QAAS,EACTC,QAAS,MAIXQ,EAAyC3E,EAAAA,UAAU0D,EAAY,CACjEzD,OAAMiB,EAAA,GACC1B,EAAU,CACbyE,YAAa,YAIfW,EAAyC5E,EAAAA,UAAU0D,EAAY,CACjEzD,OAAMiB,EAAA,GACC1B,EAAU,CACbyE,YAAa,aAIfY,EAAyC7E,EAAAA,UAAU0D,EAAY,CACjEzD,OAAMiB,EAAA,GACC1B,EAAU,CACbyE,YAAa,QACbC,QAAS,EACTC,QAAS,MAIXW,EAAyC9E,EAAAA,UAAU0D,EAAY,CACjEzD,OAAMiB,EAAA,GACC1B,EAAU,CACbyE,YAAa,SACbC,QAAS,EACTC,QAAS,MCpGXT,EAAkC,CACpCrE,EAAAA,MAAM,CACFC,QAAS,mBACTyE,UAAW,kEACXgB,gBAAiB,sBAErBxF,EAAAA,QACI,oCACAF,EAAAA,MAAM,CACFyE,OAAQ,EACRxE,QAAS,iBACTyE,UAAW,gEACXgB,gBAAiB,wBAKvBC,EAAiC,CACnCvF,MAAO,KACPC,SAAU,QACVC,OAAQC,EAAQhB,KAChBoF,SAAU,EACVnE,WAAY,EACZqE,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,YAAa,IACbvE,aAAc,EACdmF,KAAM,SACNC,KAAM,UAGJC,EAAajE,EAAA,GACZ8D,EAAY,CACfrF,OAAQyF,EAAOxG,KACfiB,WAAY,EACZC,aAAc,IAGZuF,EAA6CrF,EAAAA,UAAU0D,EAAY,CACrEzD,OAAMiB,EAAA,GAAO8D,KAGXM,EAA8CtF,EAAAA,UAAU0D,EAAY,CACtEzD,OAAMiB,EAAA,GAAOiE,KAGXI,EAA0CvF,EAAAA,UAAU0D,EAAY,CAClEzD,OAAMiB,EAAA,GACC8D,EAAY,CACfC,KAAM,UAIRO,EAA2CxF,EAAAA,UAAU0D,EAAY,CACnEzD,OAAMiB,EAAA,GACCiE,EAAa,CAChBF,KAAM,UAIRQ,EAA4CzF,EAAAA,UAAU0D,EAAY,CACpEzD,OAAMiB,EAAA,GACC8D,EAAY,CACfC,KAAM,YAIRS,EAA6C1F,EAAAA,UAAU0D,EAAY,CACrEzD,OAAMiB,EAAA,GACCiE,EAAa,CAChBF,KAAM,YAIRU,EAA6C3F,EAAAA,UAAU0D,EAAY,CACrEzD,OAAMiB,EAAA,GACC8D,EAAY,CACfC,KAAM,aAIRW,EAA8C5F,EAAAA,UAAU0D,EAAY,CACtEzD,OAAMiB,EAAA,GACCiE,EAAa,CAChBF,KAAM,aAIRY,EAA2C7F,EAAAA,UAAU0D,EAAY,CACnEzD,OAAMiB,EAAA,GACC8D,EAAY,CACfC,KAAM,WAIRa,EAA4C9F,EAAAA,UAAU0D,EAAY,CACpEzD,OAAMiB,EAAA,GACCiE,EAAa,CAChBF,KAAM,WAIRc,EAAyC/F,EAAAA,UAAU0D,EAAY,CACjEzD,OAAMiB,EAAA,GACC8D,EAAY,CACfC,KAAM,QACNC,KAAM,UAIRc,EAA0ChG,EAAAA,UAAU0D,EAAY,CAClEzD,OAAMiB,EAAA,GACCiE,EAAa,CAChBF,KAAM,QACNC,KAAM,UAIRe,EAAyCjG,EAAAA,UAAU0D,EAAY,CACjEzD,OAAMiB,EAAA,GACC8D,EAAY,CACfC,KAAM,QACNC,KAAM,aAIRgB,EAA0ClG,EAAAA,UAAU0D,EAAY,CAClEzD,OAAMiB,EAAA,GACCiE,EAAa,CAChBF,KAAM,QACNC,KAAM,aAIRiB,EAAyCnG,EAAAA,UAAU0D,EAAY,CACjEzD,OAAMiB,EAAA,GACC8D,EAAY,CACfC,KAAM,OACNC,KAAM,aAIRkB,EAA0CpG,EAAAA,UAAU0D,EAAY,CAClEzD,OAAMiB,EAAA,GACCiE,EAAa,CAChBF,KAAM,OACNC,KAAM,aAIRmB,GAAyCrG,EAAAA,UAAU0D,EAAY,CACjEzD,OAAMiB,EAAA,GACC8D,EAAY,CACfC,KAAM,OACNC,KAAM,UAIRoB,GAA0CtG,EAAAA,UAAU0D,EAAY,CAClEzD,OAAMiB,EAAA,GACCiE,EAAa,CAChBF,KAAM,OACNC,KAAM,UAIRqB,GAAgDvG,EAAAA,UAAU0D,EAAY,CACxEzD,OAAMiB,EAAA,GACC8D,EAAY,CACfd,QAAS,EACTC,QAAS,EACTC,QAAS,MAIXoC,GAAiDxG,EAAAA,UAAU0D,EAAY,CACzEzD,OAAMiB,EAAA,GACCiE,EAAa,CAChBjB,QAAS,EACTC,QAAS,EACTC,QAAS,MAIXqC,GAAgDzG,EAAAA,UAAU0D,EAAY,CACxEzD,OAAMiB,EAAA,GACC8D,EAAY,CACfd,SAAU,EACVC,QAAS,EACTC,QAAS,MAIXsC,GAAiD1G,EAAAA,UAAU0D,EAAY,CACzEzD,OAAMiB,EAAA,GACCiE,EAAa,CAChBjB,SAAU,EACVC,QAAS,EACTC,QAAS,MAIXuC,GAA0C3G,EAAAA,UAAU0D,EAAY,CAClEzD,OAAMiB,EAAA,GACC8D,EAAY,CACfd,QAAS,EACTC,QAAS,EACTC,QAAS,MAIXwC,GAA2C5G,EAAAA,UAAU0D,EAAY,CACnEzD,OAAMiB,EAAA,GACCiE,EAAa,CAChBjB,QAAS,EACTC,QAAS,EACTC,QAAS,MAIXyC,GAA0C7G,EAAAA,UAAU0D,EAAY,CAClEzD,OAAMiB,EAAA,GACC8D,EAAY,CACfd,QAAS,EACTC,QAAS,EACTC,QAAS,MAIX0C,GAA2C9G,EAAAA,UAAU0D,EAAY,CACnEzD,OAAMiB,EAAA,GACCiE,EAAa,CAChBjB,QAAS,EACTC,QAAS,EACTC,QAAS,MCpOXV,GAAkC,CACpCnE,EAAAA,QACI,oCACAsE,EAAAA,UAAU,CACNxE,EAAAA,MAAM,CACFyE,OAAQ,EACRC,UAAW,yCACXgB,gBAAiB,sBAErB1F,EAAAA,MAAM,CACFyE,OAAQ,GACRC,UAAW,uEAEf1E,EAAAA,MAAM,CACFyE,OAAQ,GACRC,UAAW,yEAEf1E,EAAAA,MAAM,CACFyE,OAAQ,GACRC,UAAW,yEAEf1E,EAAAA,MAAM,CACFyE,OAAQ,GACRC,UAAW,yEAGf1E,EAAAA,MAAM,CACFyE,OAAQ,GACRC,UAAW,yEAEf1E,EAAAA,MAAM,CACFyE,OAAQ,GACRC,UAAW,yEAGf1E,EAAAA,MAAM,CACFyE,OAAQ,GACRC,UAAW,yEAEf1E,EAAAA,MAAM,CACFyE,OAAQ,GACRC,UAAW,qEAGf1E,EAAAA,MAAM,CACFyE,OAAQ,GACRC,UAAW,qEAGf1E,EAAAA,MAAM,CACFyE,OAAQ,EACRC,UAAW,yCACXgB,gBAAiB,0BAM3BvF,GAA+B,CACjCC,MAAO,KACPsH,UAAW,IACXrH,SAAU,QACVC,OLlDA,2CKmDAqE,SAAU,EACVC,YAAa,MACbI,WAAY,EACZC,cAAe,OACfW,KAAM,SACNC,KAAM,UAGJ8B,GAAuChH,EAAAA,UAAU0D,GAAY,CAC/DzD,OAAMiB,EAAA,GACC1B,GAAU,CACbuH,UAAW,QAIbE,GAAuCjH,EAAAA,UAAU0D,GAAY,CAC/DzD,OAAMiB,EAAA,GACC1B,GAAU,CACbuH,UAAW,QAIbG,GAAuClH,EAAAA,UAAU0D,GAAY,CAC/DzD,OAAMiB,EAAA,GACC1B,GAAU,CACbwE,SAAU,EACVC,YAAa,IACbI,WAAY,EACZC,cAAe,IACfY,KAAM,UAIRiC,GAA0CnH,EAAAA,UAAU0D,GAAY,CAClEzD,OAAMiB,EAAA,GACC1B,GAAU,CACbuH,UAAW,IACX/C,SAAU,EACVC,YAAa,IACbI,WAAY,EACZC,cAAe,IACfY,KAAM,aAIRkC,GAAyCpH,EAAAA,UAAU0D,GAAY,CACjEzD,OAAMiB,EAAA,GACC1B,GAAU,CACbuH,UAAW,IACX/C,SAAU,EACVC,YAAa,IACbI,WAAY,EACZC,cAAe,IACfW,KAAM,QACNC,KAAM,aAIRmC,GAAwCrH,EAAAA,UAAU0D,GAAY,CAChEzD,OAAMiB,EAAA,GACC1B,GAAU,CACbuH,UAAW,IACX/C,SAAU,EACVC,YAAa,IACbI,WAAY,EACZC,cAAe,IACfW,KAAM,OACNC,KAAM,aAIRoC,GAA0CtH,EAAAA,UAAU0D,GAAY,CAClEzD,OAAMiB,EAAA,GACC1B,GAAU,CACbuH,UAAW,IACX/C,SAAU,EACVC,YAAa,IACbI,WAAY,GACZC,cAAe,IACfW,KAAM,SACNC,KAAM,aAIRqC,GAAsCvH,EAAAA,UAAU0D,GAAY,CAC9DzD,OAAMiB,EAAA,GACC1B,GAAU,CACbuH,UAAW,IACX/C,SAAU,EACVC,YAAa,IACbI,WAAY,EACZC,cAAe,IACfW,KAAM,QACNC,KAAM,UAIRsC,GAAsCxH,EAAAA,UAAU0D,GAAY,CAC9DzD,OAAMiB,EAAA,GACC1B,GAAU,CACbuH,UAAW,IACX/C,SAAU,EACVC,YAAa,IACbI,WAAY,EACZC,cAAe,IACfW,KAAM,QACNC,KAAM,aAIRuC,GAAsCzH,EAAAA,UAAU0D,GAAY,CAC9DzD,OAAMiB,EAAA,GACC1B,GAAU,CACbuH,UAAW,IACX/C,SAAU,EACVC,YAAa,IACbI,WAAY,EACZC,cAAe,IACfW,KAAM,OACNC,KAAM,aAIRwC,GAAsC1H,EAAAA,UAAU0D,GAAY,CAC9DzD,OAAMiB,EAAA,GACC1B,GAAU,CACbuH,UAAW,IACX/C,SAAU,EACVC,YAAa,IACbI,WAAY,EACZC,cAAe,IACfW,KAAM,OACNC,KAAM,UCpMRyC,GAAqC,CACvCtI,EAAAA,MAAM,CACFuI,wBAAyB,WACzB7D,UAAW,WACXgB,gBAAiB,kBAErBxF,EAAAA,QACI,oCACAsE,EAAAA,UAAU,CACNxE,EAAAA,MAAM,CACFuI,wBAAyB,UACzB9D,OAAQ,GACRC,UAAW,gBAEf1E,EAAAA,MAAM,CACFuI,wBAAyB,WACzB9D,OAAQ,IACRC,UAAW,gBAEf1E,EAAAA,MAAM,CACFuI,wBAAyB,UACzB9D,OAAQ,IACRC,UAAW,gBAEf1E,EAAAA,MAAM,CACFuI,wBAAyB,WACzB9D,OAAQ,IACRC,UAAW,iBAYrB8D,GAAmC,CACrCtI,EAAAA,QACI,oCACAsE,EAAAA,UAAU,CACNxE,EAAAA,MAAM,CACFyE,OAAQ,EACRC,UAAW,yBAEf1E,EAAAA,MAAM,CACFyE,OAAQ,GACRC,UAAW,uBAEf1E,EAAAA,MAAM,CACFyE,OAAQ,EACRC,UAAW,6BAMrB+D,GAAkC,CACpCrI,MAAO,KACPC,SAAU,MACVC,OAAQ,cACRoI,UAAW,EACXC,QAAS,KAGPC,GAAiC,CACnC1I,EAAAA,QACI,oCACAsE,EAAAA,UAAU,CACNxE,EAAAA,MAAM,CACFyE,OAAQ,EACRxE,QAAS,GACTyE,UAAW,yBAEf1E,EAAAA,MAAM,CACFyE,OAAQ,GACRxE,QAAS,EACTyE,UAAW,wBAEf1E,EAAAA,MAAM,CACFyE,OAAQ,EACRxE,QAAS,EACTyE,UAAW,2BAerBmE,GAAalI,EAAAA,UAAU6H,GAAa,CACtC5H,OAAMiB,EAAA,GACC4G,MAILK,GAAanI,EAAAA,UAAU6H,GAAa,CACtC5H,OAAMiB,EAAA,GACC4G,GAAa,CAChBE,QAAS,OAIXI,GAAYpI,EAAAA,UAAU2H,GAAe,CACvC1H,OAAMiB,EAAA,GAhFgC,CACtCzB,MAAO,KACPC,SAAU,OACVC,OAAQ,kBAkFN0I,GAAQrI,EAAAA,UAAUiI,GAAW,CAC/BhI,OAAMiB,EAAA,GA7B4B,CAClCzB,MAAO,KACPC,SAAU,MACVC,OAAQ,cACRoI,UAAW,GACXO,SAAU,IACVN,QAAS,QCtGP5I,GAA4B,CAC9BC,EAAAA,MAAM,CACFC,QAAS,mBACTyE,UAAW,oCACXgB,gBAAiB,sBAErBxF,EAAAA,QACI,oCACAF,EAAAA,MAAM,CACFC,QAAS,iBACTyE,UAAW,kCACXgB,gBAAiB,wBAKvBC,GAAiC,CACnCvF,MAAO,KACPsH,UAAW,GACXrH,SAAU,QACVC,OAAQC,EAAQhB,KAChBiB,WAAY,EACZkI,UAAW,GACXjI,aAAc,EACdkI,QAAS,EACT/C,KAAM,MACNC,KAAM,OAGJC,GAAajE,EAAA,GACZ8D,GAAY,CACfrF,OAAQC,EAAQZ,KAChBa,WAAY,EACZkI,UAAW,EACXjI,aAAc,EACdkI,QAAS,KAGPO,GAA4CvI,EAAAA,UAAUZ,GAAM,CAAEa,OAAQ+E,KAEtEwD,GAAwCxI,EAAAA,UAAUZ,GACpD,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACfC,KAAM,IACNC,KAAM,WAKZuD,GAA+CzI,EAAAA,UAAUZ,GAC3D,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACf+B,UAAW,IACXgB,UAAW,OAKjBW,GAAyC1I,EAAAA,UAAUZ,GACrD,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACfC,KAAM,MACNC,KAAM,QAKZyD,GAA0C3I,EAAAA,UAAUZ,GACtD,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACfC,KAAM,IACNC,KAAM,UAKZ0D,GAA4C5I,EAAAA,UAAUZ,GACxD,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACf+B,UAAW,IACXgB,UAAW,GACX9C,KAAM,OACNC,KAAM,QAKZ2D,GAAY7I,EAAAA,UAAUZ,GACxB,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACfC,KAAM,OACNC,KAAM,QAKZ4D,GAAwC9I,EAAAA,UAAUZ,GACpD,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACfC,KAAM,IACNC,KAAM,QAKZ6D,GAA+C/I,EAAAA,UAAUZ,GAC3D,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACf+B,UAAW,IACXgB,UAAW,GACX9C,KAAM,IACNC,KAAM,WAKZ8D,GAA2ChJ,EAAAA,UAAUZ,GACvD,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACfC,KAAM,OACNC,KAAM,UAKZ+D,GAA+CjJ,EAAAA,UAAUZ,GAC3D,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACf+B,UAAW,IACXgB,UAAW,OAKjBmB,GAAwClJ,EAAAA,UAAUZ,GACpD,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACfC,KAAM,OACNC,KAAM,WAKZiE,GAA6CnJ,EAAAA,UAAUZ,GACzD,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACf+B,UAAW,IACXgB,UAAW,GACX9C,KAAM,IACNC,KAAM,QAKZkE,GAA4CpJ,EAAAA,UAAUZ,GACxD,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACfC,KAAM,MACNC,KAAM,WAKZmE,GAA8CrJ,EAAAA,UAAUZ,GAC1D,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACf+B,UAAW,IACXgB,UAAW,GACX9C,KAAM,OACNC,KAAM,WAKZoE,GAA6CtJ,EAAAA,UAAUZ,GAAM,CAAEa,OAAQkF,KAEvEoE,GAAyCvJ,EAAAA,UAAUZ,GACrD,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChBF,KAAM,IACNC,KAAM,WAKZsE,GAAyCxJ,EAAAA,UAAUZ,GACrD,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChBF,KAAM,OACNC,KAAM,WAKZuE,GAAgDzJ,EAAAA,UAAUZ,GAC5D,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChB4B,UAAW,IACXiB,QAAS,OAKf0B,GAA6C1J,EAAAA,UAAUZ,GACzD,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChB4B,UAAW,IACXiB,QAAS,GACT/C,KAAM,OACNC,KAAM,QAKZyE,GAAgD3J,EAAAA,UAAUZ,GAC5D,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChB4B,UAAW,IACXiB,QAAS,GACT/C,KAAM,IACNC,KAAM,WAKZ0E,GAA0C5J,EAAAA,UAAUZ,GACtD,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChBF,KAAM,MACNC,KAAM,QAKZ2E,GAA2C7J,EAAAA,UAAUZ,GACvD,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChBF,KAAM,IACNC,KAAM,UAKZ4E,GAAyC9J,EAAAA,UAAUZ,GACrD,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChBF,KAAM,OACNC,KAAM,QAKZ6E,GAAyC/J,EAAAA,UAAUZ,GACrD,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChBF,KAAM,IACNC,KAAM,QAKZ8E,GAA4ChK,EAAAA,UAAUZ,GACxD,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChBF,KAAM,OACNC,KAAM,UAKZ+E,GAA6CjK,EAAAA,UAAUZ,GACzD,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChBF,KAAM,MACNC,KAAM,WAKZgF,GAAgDlK,EAAAA,UAAUZ,GAC5D,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChB4B,UAAW,IACXiB,QAAS,OAKfmC,GAA8CnK,EAAAA,UAAUZ,GAC1D,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChB4B,UAAW,IACXiB,QAAS,GACT/C,KAAM,IACNC,KAAM,QAKZkF,GAA+CpK,EAAAA,UAAUZ,GAC3D,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChB4B,UAAW,IACXiB,QAAS,GACT/C,KAAM,OACNC,KAAM,WC7UZ9F,GAA4B,CAC9BC,EAAAA,MAAM,CACFC,QAAS,mBACTyE,UAAW,qBAEfxE,EAAAA,QACI,oCACAF,EAAAA,MAAM,CACFC,QAAS,iBACTyE,UAAW,qBAKjBiB,GAAiC,CACnCvF,MAAO,KACPC,SAAU,QACVC,OAAQC,EAAQhB,KAChBiB,WAAY,EACZwK,aAAc,qBACdvK,aAAc,EACdwK,WAAY,iBAGVnF,GAAkC,CACpC1F,MAAO,KACPC,SAAU,QACVC,OAAQyF,EAAOxG,KACfiB,WAAY,EACZwK,aAAc,gBACdvK,aAAc,EACdwK,WAAY,sBAGVC,GAAyCvK,EAAAA,UAAUZ,GAAM,CAAEa,OAAQ+E,KAEnEwF,GAA0CxK,EAAAA,UAAUZ,GACtD,CACIa,OAAQ,CACJR,MAAO,KACPC,SAAU,QACVC,OAAQC,EAAQhB,KAChBiB,WAAY,EACZwK,aAAc,qBACdvK,aAAc,EACdwK,WAAY,mBAKlBG,GAA2CzK,EAAAA,UAAUZ,GACvD,CACIa,OAAQ,CACJR,MAAO,KACPC,SAAU,QACVC,OAAQC,EAAQhB,KAChBiB,WAAY,EACZwK,aAAc,oBACdvK,aAAc,EACdwK,WAAY,mBAKlBI,GAA4C1K,EAAAA,UAAUZ,GACxD,CACIa,OAAQ,CACJR,MAAO,KACPC,SAAU,QACVC,OAAQC,EAAQhB,KAChBiB,WAAY,EACZwK,aAAc,oBACdvK,aAAc,EACdwK,WAAY,mBAKlBK,GAAwC3K,EAAAA,UAAUZ,GACpD,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACfqF,aAAc,uCACdC,WAAY,kCAKlBM,GAAwC5K,EAAAA,UAAUZ,GACpD,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACfqF,aAAc,wCACdC,WAAY,kCAKlBO,GAAwC7K,EAAAA,UAAUZ,GACpD,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACfqF,aAAc,sCACdC,WAAY,kCAKlBQ,GAAwC9K,EAAAA,UAAUZ,GACpD,CACIa,OAAMiB,EAAA,GACC8D,GAAY,CACfqF,aAAc,uCACdC,WAAY,kCAKlBS,GAA0C/K,EAAAA,UAAUZ,GAAM,CAAEa,OAAQkF,KAEpE6F,GAA4ChL,EAAAA,UAAUZ,GACxD,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChBmF,WAAY,wBAKlBW,GAA6CjL,EAAAA,UAAUZ,GACzD,CACIa,OAAQ,CACJR,MAAO,KACPC,SAAU,QACVC,OAAQyF,EAAOxG,KACfiB,WAAY,EACZwK,aAAc,gBACdvK,aAAc,EACdwK,WAAY,uBAKlBY,GAA2ClL,EAAAA,UAAUZ,GACvD,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChBmF,WAAY,yBAKlBa,GAAyCnL,EAAAA,UAAUZ,GACrD,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChBkF,aAAc,8BACdC,WAAY,2CAKlBc,GAAyCpL,EAAAA,UAAUZ,GACrD,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChBkF,aAAc,8BACdC,WAAY,0CAKlBe,GAAyCrL,EAAAA,UAAUZ,GACrD,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChBkF,aAAc,8BACdC,WAAY,2CAKlBgB,GAAyCtL,EAAAA,UAAUZ,GACrD,CACIa,OAAMiB,EAAA,GACCiE,GAAa,CAChBkF,aAAc,8BACdC,WAAY,4CC3LlBiB,GAAiC,CACnClM,EAAAA,MAAM,CACFC,QAAS,mBACTyE,UAAW,yCACXgB,gBAAiB,sBAErBxF,EAAAA,QACI,oCACAF,EAAAA,MAAM,CACFC,QAAS,iBACTyE,UAAW,uCACXgB,gBAAiB,wBAKvByG,GAAgC,CAClC/L,MAAO,KACPsH,UAAW,IACXrH,SAAU,MACVC,OAAQC,EAAQT,KAChB6E,SAAU,EACVnE,WAAY,EACZwE,YAAa,IACbvE,aAAc,EACdmF,KAAM,MACNC,KAAM,UAGJuG,GAAcvK,EAAA,GACbsK,GAAW,CACd9L,SAAU,OACVC,OAAQyF,EAAOjG,KACf6E,SAAU,GACVnE,WAAY,EACZwE,WAAY,EACZvE,aAAc,IAGZ4L,GAA4C1L,EAAAA,UAAUuL,GAAW,CACnEtL,OAAMiB,EAAA,GACCsK,MAILG,GAA8C3L,EAAAA,UAAUuL,GAAW,CACrEtL,OAAMiB,EAAA,GACCsK,GAAW,CACdzE,UAAW,IACX9B,KAAM,SACNC,KAAM,YAIR0G,GAA+C5L,EAAAA,UAAUuL,GAAW,CACtEtL,OAAMiB,EAAA,GACCsK,GAAW,CACdnH,WAAY,IACZY,KAAM,aAIR4G,GAA6C7L,EAAAA,UAAUuL,GAAW,CACpEtL,OAAMiB,EAAA,GACCsK,GAAW,CACdzE,UAAW,IACX1C,WAAY,IACZY,KAAM,SACNC,KAAM,WAIR4G,GAA4C9L,EAAAA,UAAUuL,GAAW,CACnEtL,OAAMiB,EAAA,GACCsK,GAAW,CACd9L,SAAU,MACV2E,WAAY,OAId0H,GAA8C/L,EAAAA,UAAUuL,GAAW,CACrEtL,OAAMiB,EAAA,GACCsK,GAAW,CACdzE,UAAW,IACXrH,SAAU,MACV2E,WAAY,GACZY,KAAM,SACNC,KAAM,YAIR8G,GAA+ChM,EAAAA,UAAUuL,GAAW,CACtEtL,OAAMiB,EAAA,GACCsK,GAAW,CACd9L,SAAU,MACV2E,YAAa,GACbY,KAAM,aAIRgH,GAA6CjM,EAAAA,UAAUuL,GAAW,CACpEtL,OAAMiB,EAAA,GACCsK,GAAW,CACdzE,UAAW,IACXrH,SAAU,MACV2E,YAAa,GACbY,KAAM,SACNC,KAAM,WAIRgH,GAA6ClM,EAAAA,UAAUuL,GAAW,CACpEtL,OAAMiB,EAAA,GACCuK,MAILU,GAA+CnM,EAAAA,UAAUuL,GAAW,CACtEtL,OAAMiB,EAAA,GACCuK,GAAc,CACjB1E,UAAW,IACX9B,KAAM,SACNC,KAAM,YAIRkH,GAAgDpM,EAAAA,UAAUuL,GAAW,CACvEtL,OAAMiB,EAAA,GACCuK,GAAc,CACjBzH,UAAW,GACXiB,KAAM,aAIRoH,GAA+CrM,EAAAA,UAAUuL,GAAW,CACtEtL,OAAMiB,EAAA,GACCuK,GAAc,CACjB1E,UAAW,IACX/C,UAAW,GACXiB,KAAM,SACNC,KAAM,WAIRoH,GAA6CtM,EAAAA,UAAUuL,GAAW,CACpEtL,OAAMiB,EAAA,GACCuK,GAAc,CACjB/L,SAAU,OACVsE,UAAW,QAIbuI,GAA+CvM,EAAAA,UAAUuL,GAAW,CACtEtL,OAAMiB,EAAA,GACCuK,GAAc,CACjB1E,UAAW,IACXrH,SAAU,OACVsE,UAAW,IACXiB,KAAM,SACNC,KAAM,YAIRsH,GAAgDxM,EAAAA,UAAUuL,GAAW,CACvEtL,OAAMiB,EAAA,GACCuK,GAAc,CACjB/L,SAAU,OACVsE,SAAU,IACViB,KAAM,aAIRwH,GAA8CzM,EAAAA,UAAUuL,GAAW,CACrEtL,OAAMiB,EAAA,GACCuK,GAAc,CACjB1E,UAAW,IACXrH,SAAU,OACVsE,SAAU,IACViB,KAAM,SACNC,KAAM,WCnLR9F,GAA4B,CAC9BC,EAAAA,MAAM,CACFC,QAAS,qBACToN,OAAQ,sBAEZnN,EAAAA,QACI,oCACAF,EAAAA,MAAM,CACFC,QAAS,mBACToN,OAAQ,sBAKdlN,GAA+B,CACjCC,MAAO,KACPC,SAAU,QACVC,OAAQyF,EAAOxG,KACfkB,aAAc,EACdD,WAAY,EACZ8M,YAAa,GACbC,UAAW,IAGTC,GAAwC7M,EAAAA,UAAUZ,GAAM,CAC1Da,OAAMiB,EAAA,GACC1B,GAAU,CACbG,OAAQC,EAAQhB,KAChBkB,aAAc,EACdD,WAAY,EACZ8M,YAAa,MACbC,UAAW,QAIbE,GAAyC9M,EAAAA,UAAUZ,GAAM,CAC3Da,OAAMiB,EAAA,GACC1B,GAAU,CACbG,OAAQC,EAAQhB,KAChBkB,aAAc,EACdD,WAAY,EACZ8M,YAAa,IACbC,UAAW,wBCpCf,SAAAG,IACIjM,KAAKkM,KAAO,GAgCpB,OA7BWD,EAAA/L,UAAAiM,IAAP,SAAWC,EAAYC,GACnBrM,KAAKkM,KAAKE,GAAMC,GAGbJ,EAAA/L,UAAAoM,OAAP,SAAcF,UACHpM,KAAKkM,KAAKE,IAGdH,EAAA/L,UAAAqM,IAAP,SAAWH,GACP,GAAIA,EACA,OAAOpM,KAAKkM,KAAKE,IAIlBH,EAAA/L,UAAAsM,OAAP,SAAcJ,OAAY,MAAAK,EAAA,GAAAC,EAAA,EAAAA,EAAAhM,UAAAC,OAAA+L,IAAAD,EAAAC,EAAA,GAAAhM,UAAAgM,GACtB,GAAI1M,KAAKkM,KAAKE,GACV,OAAOO,EAAA3M,KAAKkM,KAAKE,IAAII,OAAM3L,MAAA8L,EAAAjK,EAAI+J,KAGhCR,EAAA/L,UAAA0M,KAAP,SAAYR,OAAY,MAAAK,EAAA,GAAAC,EAAA,EAAAA,EAAAhM,UAAAC,OAAA+L,IAAAD,EAAAC,EAAA,GAAAhM,UAAAgM,GACpB,GAAI1M,KAAKkM,KAAKE,GACV,OAAOO,EAAA3M,KAAKkM,KAAKE,IAAIQ,KAAI/L,MAAA8L,EAAAjK,EAAI+J,KAG9BR,EAAA/L,UAAA2M,MAAP,SAAaT,OAAY,MAAAK,EAAA,GAAAC,EAAA,EAAAA,EAAAhM,UAAAC,OAAA+L,IAAAD,EAAAC,EAAA,GAAAhM,UAAAgM,GACrB,GAAI1M,KAAKkM,KAAKE,GACV,OAAOO,EAAA3M,KAAKkM,KAAKE,IAAIS,MAAKhM,MAAA8L,EAAAjK,EAAI+J,KAG1CR,KC/BAa,GAAA,WAMI,SAAAA,EAAYC,GACR/M,KAAKgN,MAAQD,EAOrB,OAHWD,EAAA5M,UAAA+M,uBADP,WAEIjN,KAAKgN,MAAMR,OAAOxM,KAAKgB,QAAQ,wBAZtCkM,EAAAA,UAAST,KAAA,CAAC,CAAEU,SAAU,8DAXflB,sCAeHmB,EAAAA,MAAKX,KAAA,CAAC,gDAMNY,EAAAA,aAAYZ,KAAA,CAAC,YAIlBK,EAdA,GAyBAQ,GAAA,WAMI,SAAAA,EAAYP,GACR/M,KAAKgN,MAAQD,EAOrB,OAHWO,EAAApN,UAAAqN,sBADP,WAEIvN,KAAKgN,MAAMH,MAAM7M,KAAKgB,QAAQ,wBAZrCkM,EAAAA,UAAST,KAAA,CAAC,CAAEU,SAAU,6DApCflB,sCAwCHmB,EAAAA,MAAKX,KAAA,CAAC,8CAMNY,EAAAA,aAAYZ,KAAA,CAAC,YAIlBa,EAdA,GAmBAE,GAAA,WAAA,SAAAA,KAKkC,2BALjCC,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACJ,GAA6BR,IAC5Ca,QAAS,CAACL,GAA6BR,IACvCc,UAAW,CAAC3B,QAEkBuB,EALlC,GCrDA,SAAgBK,GAAWC,EAAOC,OACxBC,EAAM,GACZ,IAAKF,EACD,OAAOE,EAGX,QADIxN,EAAIsN,EAAMnN,OACPH,KACHwN,EAAIxN,GAAKuN,EAAOE,GAAWH,EAAMtN,IAAMsN,EAAMtN,GAEjD,OAAOwN,EA8BX,SAAgBE,GAAaC,EAAUC,WACnC,IAAKC,GAASF,GACV,MAAM,IAAIG,MAAM,qBAAqBH,EAAI,oCAG7C,IAAKE,GAASD,GACV,OAAOD,MAGX,IAAkB,IAAAI,EAAAC,EAAAhP,OAAOiP,KAAKL,IAAKM,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAAhC,IAAMjB,EAAGyN,EAAAvM,MACVgM,EAAKlN,GAAOgN,GAAWG,EAAKnN,yGAGhC,OAAOkN,EAWX,SAAgBF,GAAW9L,WACvB,GAAIwM,GAAOxM,GACP,OAAO,IAAIyM,KAAKzM,EAAM0M,WAE1B,GAAIlP,MAAMmP,QAAQ3M,GACd,OAAAO,EAAWP,GAGf,GAAIA,aAAiB4M,KAAO5M,aAAiB6M,IACzC,OAAO7M,EAGX,GAAIkM,GAASlM,GAAQ,KACX8M,EAAS,OAEf,IAAkB,IAAAV,EAAAC,EAAAhP,OAAOiP,KAAKtM,IAAMuM,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAAjC,IAAMjB,EAAGyN,EAAAvM,MACV8M,EAAOhO,GAAOgN,GAAW9L,EAAMlB,yGAEnC,OAAOgO,EAEX,OAAO9M,EASX,SAAgBkM,GAASlM,GACrB,OAAOA,GAA8B,oBAArBA,EAAM+M,WAS1B,SAAgBP,GAAOxM,GACnB,MAAiD,kBAA1C3C,OAAOU,UAAUgP,SAAStO,KAAKuB,GAgE1C,SAAgBgN,GAAoBC,EAAcC,OAC1CC,EAAW,MACXC,MAAUC,QACVF,EAAWD,EAAK9Q,MAAM+Q,SAEtBD,EAAK9Q,MAAM+Q,SAAW,WAG1BF,EAAMK,mBAAmBJ,OACnBK,EAAQN,EAAMO,wBAAwBD,MAO5C,OALIH,MAAUC,QAEVH,EAAK9Q,MAAM+Q,SAAWA,GAGnBI,EAuBX,SAAgBH,KACZ,OAAkD,EAA3CK,UAAUC,WAAWC,QAAQ,YAKxC,SAAgBN,KAEZ,MADoB,uBAAuBO,KAAKH,UAAUI,WAqB9D,SAAgBC,GAAQjC,OAChBiB,EAAS,GASb,OAPAjB,EAAIkC,QAAQ,SAAAC,GAER,GADAlB,EAAOzM,KAAK2N,GACRA,EAAGC,SAAU,KACPA,EAAWzQ,MAAMmP,QAAQqB,EAAGC,UAAYD,EAAGC,SAAWD,EAAGC,SAASC,UACxEpB,EAASA,EAAOtM,OAAOsN,GAAQG,OAGhCnB,EAeX,IAAaqB,GAAkB,IAAItB,IAAI,CAAC,OAAQ,KAAM,OAAQ,QAAS,YAAa,UAAW,YAAa,aAC5E,OAAQ,MAAO,QAAS,WAAY,MACvDuB,GAAkB,IAAIvB,IAAI,kCAAkCwB,MAAM,MAClEC,GAAoB,IAAIzB,IAAI,4BAA4BwB,MAAM,MAC9DE,GAAiB,IAAI1B,IAAGtM,EAAK/C,MAAMgR,KAAKL,IAAgB,CAAE,MAAO,QAAS,KAAM,SAAU,aCpQnGM,KAAA,EACAC,IAAA,EACAC,KAAA,4ECQA,SAAAC,KAmDJ,OAjDkBA,EAAAC,SAAd,WACI,OAAOhR,KAAKiR,YAAcjR,KAAKiR,UAAY,IAAIjR,OAG5C+Q,EAAA7Q,UAAAgR,KAAP,SAAYC,EACAC,EACAC,EACAC,EACAC,GAJZ,IAAAC,EAAAxR,KAKUiB,EAAMmQ,EACNK,EAAWJ,IAAQK,GAAiBZ,MAAQ,EAAI,EAItD,OAAO9Q,KAAK2R,UAAUR,EAHN,SAAChD,EAAMC,GACnB,OAAOoD,EAAKI,eAAezD,EAAMC,EAAMnN,EAAKwQ,EAASH,EAAYC,MAKlER,EAAA7Q,UAAA2R,cAAP,SAAqBC,EAAQvS,OACnBwS,EAAY,OAAND,GAAcA,IAAME,UAC1BC,EAAY,OAAN1S,GAAcA,IAAMyS,UAChC,OAAID,EACIE,EACO,GAEH,EACDA,EACA,EAEA1S,EAAJuS,EAAQ,EAAIA,EAAIvS,GAAK,EAAI,GAG1BwR,EAAA7Q,UAAA0R,eAAV,SAAyBzD,EACAC,EACAnN,EACAwQ,EACAH,EACAC,OACjBO,EAAIP,EAAcpD,EAAMlN,GACxB1B,EAAIgS,EAAcnD,EAAMnN,GAK5B,OAJIqQ,IACAQ,EAAIA,GAAKA,EAAEI,YAAcJ,EAAEI,cAAgBJ,EAC3CvS,EAAIA,GAAKA,EAAE2S,YAAc3S,EAAE2S,cAAgB3S,GAExCkS,EAAUzR,KAAK6R,cAAcC,EAAGvS,IAGjCwR,EAAA7Q,UAAAyR,UAAV,SAAoBR,EAAagB,GAC7B,OAAOhB,EAAKD,KAAKiB,IAnDNpB,EAAAE,UAAoC,KAqDvDF,mBAEA,SAAAqB,KAiGA,OAhGWA,EAAAlS,UAAAgR,KAAP,SAAYC,EAAakB,GACrB,OAAOrS,KAAKsS,kBAAkBnB,EAAMkB,IAGhCD,EAAAlS,UAAAqS,2BAAR,SAAmCpB,EAC3BqB,EACAC,OACAjS,EACAkS,EACEC,EAAM,GACN1R,EAAMwR,EAAWrB,UACjBwB,EAAMzB,EAAKxQ,OACjBgS,EAAInQ,KAAK2O,EAAKqB,IACdE,EAAW1S,KAAK6S,cAAc1B,EAAKqB,GAAQvR,GAC3CuR,QACMM,EAAWL,EAAWM,kBAAoBhC,GAAuBC,WAAWa,cAClF,IAAKrR,EAAIgS,EAAOhS,EAAIoS,GAC6C,IAAzDE,EAAS9S,KAAK6S,cAAc1B,EAAK3Q,GAAIS,GAAMyR,GAD1BlS,IAEjBmS,EAAInQ,KAAK2O,EAAK3Q,IAKtB,OAAOmS,GAEHP,EAAAlS,UAAAoS,kBAAR,SAA6BnB,EACAkB,EACAW,OACrBxS,EACAyS,EACAC,EACAC,EACAC,OALqB,IAAAJ,IAAAA,EAAA,OAMnBK,EAAWhB,EAAY1R,OACvB2S,EAAUnC,EAAKxQ,OAErB,GAAuB0S,IADvBL,EAAkBA,GAAmB,IACFM,GAAW,EAC1C,OAAOnC,EAOX,IALA+B,EAAOb,EAAYW,IACTO,WACNL,EAAKK,SAAWxC,GAAuBC,YAE3CG,EAAO+B,EAAKK,SAASrC,KAAKC,EAAM+B,EAAK9B,UAAW8B,EAAK7B,IAAK6B,EAAK5B,WAAYtR,KAAK6S,eAC5EG,IAAoBK,EAAW,EAC/B,OAAOlC,EAGX,IAAK3Q,EAAI,EAAGA,EAAI8S,EAAS9S,IAAK,CAM1B,IAHgB,GADhB4S,GADAD,EAASnT,KAAKuS,2BAA2BpB,EAAM3Q,EAAG0S,IAC/BvS,UAEfwS,EAASnT,KAAKsS,kBAAkBa,EAAQd,EAAaW,EAAkB,IAEtEC,EAAI,EAAGA,EAAIG,EAAWH,IACvB9B,EAAK3Q,EAAIyS,GAAKE,EAAOF,GAEzBzS,GAAK4S,EAAY,EAErB,OAAOjC,GAEDiB,EAAAlS,UAAAsT,mBAAV,SAAgCrC,EAAWkB,EAAmCoB,EAC1EC,EAAwB9R,EAA4B+R,EAAkBC,gBAAlB,IAAAD,IAAAA,EAAA,WAAkB,IAAAC,IAAAA,EAAA,IAGtE,QAFIpT,EAAI,EACJyO,EAAS,GACNzO,EAAI2Q,EAAKxQ,QAAQ,KACdkT,EAAQ7T,KAAKuS,2BAA2BpB,EAAM3Q,EAAG6R,EAAYoB,IAC7DK,EAA2B,CAC7BrB,WAAYJ,EAAYoB,GACxBA,MAAKA,EACLM,QAASlG,GAAWgG,GACpB1R,MAAO0R,EAAM,GAAGxB,EAAYoB,GAAOrC,WACnC4C,YAAaN,EACbO,OAAQ,GACRrI,OAAQ+H,EAAOA,EAAKO,UAAY,MAOpC,GALIR,EACAA,EAAOO,OAAOzR,KAAKsR,GAEnBF,EAAcpR,KAAKsR,GAEnBL,EAAQpB,EAAY1R,OAAS,EAC7BsO,EAASA,EAAOtM,OAAO3C,KAAKwT,mBAAmBK,EAAOxB,EAAaoB,EAAQ,EAAGK,EAAUlS,EAAU+R,EAAMC,aAExG,IAAwB,IAAAO,EAAA3F,EAAAqF,GAAKO,EAAAD,EAAAjS,QAAAkS,EAAAhS,KAAAgS,EAAAD,EAAAjS,OAAE,CAA1B,IAAMmS,EAASD,EAAAjS,MAChBP,EAASY,KAAKsR,GACd7E,EAAOzM,KAAK6R,wGAGpB7T,GAAKqT,EAAMlT,OAEf,OAAOsO,GAEDmD,EAAAlS,UAAA2S,cAAV,SAAwByB,EAAUrT,GAC9B,OAAOqT,EAAIrT,IAEnBmR,oBAEA,SAAAmC,mDAIA,OAJ0CC,EAAAA,EAAAA,GAC5BD,EAAArU,UAAA2S,cAAV,SAAwByB,EAAUrT,GAC9B,OAAOqT,EAAInD,KAAKlQ,IAExBsT,GAJ0CnC,mBC/J1C,SAAAqC,mDASA,OATiCD,EAAAA,EAAAA,GACtBC,EAAAvU,UAAAwU,QAAP,SAAevD,EAAakB,EAAmCsB,EAAYC,OACjEhS,EAA6B,GAEnC,MAAO,CACHuP,KAFanR,KAAKwT,mBAAmBrC,EAAMkB,EAAa,EAAG,KAAMzQ,EAAU+R,EAAMC,GAGjFhS,SAAUA,IAGtB6S,GATiCrC,QCR7BxB,KAAA,EACA+D,mBAAA,EACAC,wBAAA,8HCQJ,IAAAC,GAAA,WA+CI,SAAAA,EAAYC,EAA0B1D,GA1BtCpR,KAAA+U,kBAA0E,GA2BtE/U,KAAK8U,SAAWA,EAChB9U,KAAKoR,UAAYA,EA8DzB,OApDWyD,EAAA3U,UAAA8U,KAAP,SAAY5D,OACFoB,EAAQxS,KAAKiV,UAAU7D,GAE7B,OAAa,EAAToB,EACOxS,KAAK+U,kBAAkBvC,GAG3B,MAUJqC,EAAA3U,UAAA+U,UAAP,SAAiB7D,GAEb,QADI8B,EACK1S,EAAI,EAAGA,EAAIR,KAAK+U,kBAAkBpU,OAAQH,IAE/C,IADA0S,EAAOlT,KAAK+U,kBAAkBvU,cACVqU,GAChB,GAAI7U,KAAKkV,oCAAoChC,EAAM9B,GAC/C,OAAO5Q,OAGX,GAAI,EAA+B4Q,YAAcA,EAC7C,OAAO5Q,EAKnB,OAAQ,GAGFqU,EAAA3U,UAAAgV,oCAAV,SAA8CC,EAA4C/D,GACtF,GAAI+D,EAAgB/D,YAAcA,EAC9B,OAAO,EAIX,QADI8B,EACK1S,EAAI,EAAGA,EAAI2U,EAAgBJ,kBAAkBpU,OAAQH,IAE1D,OADA0S,EAAOiC,EAAgBJ,kBAAkBvU,cACpBqU,EACV7U,KAAKkV,oCAAoChC,EAAM9B,GAE/C,EAA+BA,YAAcA,EAI5D,OAAO,GAEfyD,EA/GA,OCRIO,IAAM,MACNC,OAAS,SACTC,OAAS,UCYbC,GAAA,WAAA,SAAAA,IAIcvV,KAAAwV,cAAkC,IAAIzG,IACtC/O,KAAAyV,aAA8D,IAAI1G,IAClE/O,KAAA0V,WAA4C,IAAI3G,IAmhB9D,OAjhBWwG,EAAArV,UAAAyV,mBAAP,SAA0BC,GACtB,OAAO5V,KAAK2T,KAAKkC,WAAWb,KAAK,SAACc,GAAQ,OAAAA,EAAIC,QAAUH,KAGrDL,EAAArV,UAAA8V,iBAAP,eACUrC,EAAO3T,KAAK2T,KACdxC,EAAOwC,EAAKsC,aACX9E,IACGwC,EAAKuC,aAAaC,SAClBhF,EAAOiF,GAASC,kBACZxI,GAAW8F,EAAKxC,MAChBwC,EAAKuC,aAAaI,sBAAqB,GACvC3C,EAAK4C,YAEW5C,EAAKuC,aAAaM,oBAAoBC,OAAO,SAAAnW,GAAK,OAAAA,EAAEoW,OAASC,GAAgBtB,SAAQuB,IAAI,SAAAtW,GAAK,OAAAA,EAAE8L,KACxG8D,QAAQ,SAAA2G,OAEVrE,GADWmB,EAAK4C,WAAapF,EAAKyF,IAAI,SAAAE,GAAO,OAAAA,EAAInD,EAAK4C,cAAepF,GACpDrB,QAAQ+G,IAChB,IAAXrE,GACDrB,EAAK4F,OAAOvE,EAAO,MAI1BrB,EAAOwC,EAAKxC,MAGpB,OAAOA,GAOJoE,EAAArV,UAAA8W,WAAP,SAAkBH,GAGd,OAFa7W,KAAKiX,aAAajX,KAAK2T,KAAKuC,aAAaC,SACxCnW,KAAKkX,sBAAsBL,KAKtCtB,EAAArV,UAAAiX,gBAAP,WACInX,KAAK2T,KAAKyD,YAAYC,MACtBrX,KAAK2T,KAAK2D,iBAIP/B,EAAArV,UAAAqX,oBAAP,WACI,OAAOvX,KAAK2T,KAAKyD,YAAYI,MAG1BjC,EAAArV,UAAAgX,sBAAP,SAA6BL,OACnBlD,EAAO3T,KAAS,KACtB,IAAK2T,EACD,OAAQ,MAENxC,EAAOnR,KAAKiX,aAAatD,EAAKuC,aAAaC,SACjD,OAAOxC,EAAK4C,WAAapF,EAAK8D,UAAU,SAAAwC,GAAU,OAAAA,EAAO9D,EAAK4C,cAAgBM,IAAS1F,EAAKrB,QAAQ+G,IAGjGtB,EAAArV,UAAAwX,eAAP,SAAsBC,OACZpB,EAAavW,KAAK2T,KAAK4C,WAC7B,OAAIA,IAAevE,WAA4B,OAAfuE,EACrBvW,KAAK2T,KAAKiE,YAAY5C,KAAK,SAAC6C,GAAQ,OAAAA,EAAIC,QAAQvB,KAAgBoB,IAEhE3X,KAAK2T,KAAKiE,YAAY5C,KAAK,SAAC6C,GAAQ,OAAAA,EAAIC,UAAYH,KAI5DpC,EAAArV,UAAA6X,iBAAP,SAAwBC,GACpB,OAAOhY,KAAK2T,KAAKsE,QAAQjD,KAAK,SAAC6C,GAAQ,OAAAA,EAAIrF,QAAUwF,KAGlDzC,EAAArV,UAAAgY,gBAAP,SAAuBP,EAAkB5B,OAC/B8B,EAAM7X,KAAK0X,eAAeC,GAChC,GAAIE,GAAOA,EAAIM,MACX,OAAON,EAAIM,MAAMnD,KAAK,SAACwC,GAAS,OAAAA,EAAKY,OAAOrC,QAAUA,KAIvDR,EAAArV,UAAAmY,kBAAP,SAAyBL,EAAkBM,OACjCT,EAAM7X,KAAK+X,iBAAiBC,GAClC,GAAIH,GAAOA,EAAIM,MACX,OAAON,EAAIM,MAAMnD,KAAK,SAACwC,GAAS,OAAAA,EAAKc,cAAgBA,KAItD/C,EAAArV,UAAAqY,0BAAP,SAAiCP,EAAkBM,OACzCT,EAAM7X,KAAK+X,iBAAiBC,GAClC,GAAIH,GAAOA,EAAIM,MACX,OAAON,EAAIM,MAAMnD,KAAK,SAACwC,GAAS,OAAAA,EAAKgB,qBAAuBF,KAI7D/C,EAAArV,UAAAuY,aAAP,eACUjB,EAAOxX,KAAK2T,KAAKyD,YAAYI,KACnC,GAAIA,EAAM,CAEN,GADaxX,KAAK0Y,YAAYlB,EAAMA,EAAKmB,WAChCC,OACL,OAEJ5Y,KAAKmX,oBAIb5B,EAAArV,UAAAwY,YAAA,SAAYlB,EAAerV,SACjBgP,EAAOnR,KAAKiX,aAAajX,KAAK2T,KAAKuC,aAAaC,SAChD3D,EAAQxS,KAAKkX,sBAAsBM,EAAKpL,GAAGyK,OAEjDW,EAAKmB,UAAYxW,MAEX0W,EAAsB7Y,KAAK2T,KAAKuC,aAAa4C,mBAAmBtB,EAAKpL,GAAGyK,OAAO,GACjFgC,IACArB,EAAKrV,MAAQ0W,EAAoBrB,EAAKY,OAAOrC,OAC7CyB,EAAKM,QAAUe,OAGbpM,EAAO+K,EAAKuB,sBAIlB,OADA/Y,KAAK2T,KAAKqF,WAAWC,KAAKxM,GACtBA,EAAKmM,OACEnM,GAKXA,EAAKyM,SAAW1B,EAAK2B,aAAa1M,EAAKyM,UPlC/C,SAAgBE,EAAQjL,EAAMC,GAC1B,OAAIO,GAAOR,IAASQ,GAAOP,GAChBD,EAAKU,YAAcT,EAAKS,UAE5BV,IAASC,EOgCRgL,CAAQ3M,EAAK4M,SAAU5M,EAAKyM,YAGhClZ,KAAK2T,KAAK2F,eAAeC,kBAAkB9M,GAC3CzM,KAAKwZ,WAAWxZ,KAAK2T,KAAM6D,EAAKpL,GAAGyK,MAAO1F,EAAKqB,GAAQgF,EAAKM,UAAOnL,EAAA,IAAK6K,EAAKY,OAAOrC,OAAStJ,EAAKyM,SAAQvM,IACtG3M,KAAK2T,KAAK4C,aAAeiB,EAAKY,OAAOrC,QACjC/V,KAAK2T,KAAK8F,UAAUC,iBAAiB1Z,KAAK2T,KAAKvH,GAAIoL,EAAKpL,GAAGyK,SAC3D7W,KAAK2T,KAAK8F,UAAUE,cAAc3Z,KAAK2T,KAAKvH,GAAIoL,EAAKpL,GAAGyK,OACxD7W,KAAK2T,KAAK8F,UAAUG,YAAY5Z,KAAK2T,KAAKvH,GAAIK,EAAKyM,WAEnDlZ,KAAK2T,KAAKkG,sBACV7Z,KAAK2T,KAAK2F,eAAeQ,gBAAgBtC,EAAKpL,GAAGyK,QAGpD7W,KAAK2T,KAAKoG,aAAgB/Z,KAAK2T,KAAKyD,YAAYS,KAC7C7X,KAAK2T,KAAKyD,YAAYS,IAAIzL,KAAOoL,EAAKpL,GAAGyK,OAAU7W,KAAK2T,KAAKuC,aAAaC,UAC9EnW,KAAK2T,KAAK2F,eAAeC,kBAAkB9M,GAC1CzM,KAAS,KAASga,iBAhBZvN,IA8BL8I,EAAArV,UAAAsZ,WAAV,SAAqB7F,EAAMkD,EAAOoD,EAA2BC,EAAsBC,GAC/E,GAAIxG,EAAKuC,aAAaC,QAAS,KACrBiE,EAA2B,CAC7BhO,GAAIyK,EACJH,KAAMC,GAAgBrB,OACtB4D,SAAUiB,GAEdxG,EAAKuC,aAAa/J,IAAIiO,EAAaF,QAEnChM,GAAa+L,EAAsBE,IAI3C5E,EAAArV,UAAAma,YAAA,SAAYxC,EAAa1V,OACfwR,EAAO3T,KAAK2T,KAEZ2G,EAAgB3G,EAAKyD,YAAYS,IAIvC,GAHAA,EAAI0C,QAAUpY,GAAgBwR,EAAKuC,aAAa4C,mBAAmBjB,EAAIzL,IAAI,GAGvEkO,GAAiBzC,EAAIzL,KAAOkO,EAAclO,GAC1CyL,EAAI1G,KAAI/Q,EAAA,GAAQyX,EAAI1G,KAASmJ,EAAcE,uBAExC,GAAIxa,KAAK2T,KAAKuC,aAAaC,QAAS,KACjCsE,EAAoB9G,EAAKuC,aAAawE,SAAS7C,EAAIzL,IACrDuH,EAAKuC,aAAawE,SAAS7C,EAAIzL,IAAIjK,MAAQ,KAC/C0V,EAAI1G,KAAOsJ,EAAoBjb,OAAOa,OAAOwX,EAAI1G,KAAMsJ,GAAqB5C,EAAI1G,OAIxFoE,EAAArV,UAAAya,WAAA,SAAW9C,EAAa1V,OACdwR,EAAO3T,KAAK2T,KACZiH,EAAWjH,EAAK8F,UAAUC,iBAAiB/F,EAAKvH,GAAIyL,EAAIzL,IACxDkO,EAAgB3G,EAAKyD,YAAYS,IACjC1G,EAAOnR,KAAKiX,aAAatD,EAAKuC,aAAaC,SAC3C3D,EAAQxS,KAAKkX,sBAAsBW,EAAIzL,IACvCyO,EAAgBlH,EAAKkG,qBAE3B7Z,KAAKqa,YAAYxC,EAAK1V,OAEhBsK,EAAOoL,EAAIkB,sBAGjB,IAAe,IAAXvG,EACA,OAAO/F,EAKX,GAFAkH,EAAKmH,UAAU7B,KAAKxM,GAEhBA,EAAKmM,OACL,OAAOnM,EAOX,GAJI6N,GACA3G,EAAKuC,aAAa6E,YAAW,IAG5BtO,EAAKyM,SACN,OAAOzM,EAGPoO,GACAlH,EAAK2F,eAAeQ,gBAAgBrN,EAAKoK,OAG7C7W,KAAKwZ,WAAW7F,EAAMkE,EAAIzL,GAAI+E,EAAKqB,GAAQ/F,EAAK4M,SAAU5M,EAAKyM,cACzD8B,EAAQrH,EAAK4C,WAAa9J,EAAKyM,SAASvF,EAAK4C,YAAc9J,EAAKyM,SAUtE,OATI0B,IACAjH,EAAK8F,UAAUE,cAAchG,EAAKvH,GAAIyL,EAAIzL,IAC1CuH,EAAK8F,UAAUG,YAAYjG,EAAKvH,GAAI4O,IAEpCH,GACAlH,EAAK2F,eAAeQ,gBAAgBkB,GAExC,EAAchB,eAEPvN,GAKD8I,EAAArV,UAAA+a,oBAAV,SAA8B9Y,EAAY0U,EAAYrE,GACrCxS,KAAK2T,KACbxC,KAAKqB,GAASrQ,GAGhBoT,EAAArV,UAAAgR,KAAP,SAAYuB,GACJA,EAAWpB,MAAQK,GAAiBd,MACpC5Q,KAAKkb,2BAA2BzI,EAAWrB,eAEzC+J,EAAetN,GAAW7N,KAAK2T,KAAKyH,oBAC1Cpb,KAAKqb,2BAA2B,CAACF,GAAe1I,GAChDzS,KAAK2T,KAAKyH,mBAAqBD,GAG5B5F,EAAArV,UAAAob,cAAP,SAAqBjJ,WACX8I,EAAetN,GAAW7N,KAAK2T,KAAKyH,wBAE1C,IAAmB,IAAAG,EAAA/M,EAAA6D,GAAWmJ,EAAAD,EAAArZ,QAAAsZ,EAAApZ,KAAAoZ,EAAAD,EAAArZ,OAAE,CAA3B,IAAMuZ,EAAID,EAAArZ,MACPsZ,EAAKpK,MAAQK,GAAiBd,MAC9B5Q,KAAKkb,2BAA2BO,EAAKrK,WAEzCpR,KAAKqb,2BAA2B,CAACF,GAAeM,wGAGpDzb,KAAK2T,KAAKyH,mBAAqBD,GAG5B5F,EAAArV,UAAAuW,OAAP,SAAcrF,EAAmBsK,EAAMC,EACnCrK,OACMqC,EAAO3T,KAAK2T,KACZiI,EAAgBjI,EAAKkI,yBAC3BlI,EAAKmI,SAAQ,GAETnI,EAAKoI,SACLpI,EAAKqI,KAAO,OAGVC,EAAmBL,EAAc3G,UAAU7D,IACzB,EAApB6K,GACAL,EAAc7G,kBAAkBgC,OAAOkF,EAAkB,GAG7Djc,KAAKkc,6BAA6BN,EAAexK,EAAWsK,EAAMC,EAA4BrK,EAAY2K,GAC1GtI,EAAKkI,yBAA2BD,GAG7BrG,EAAArV,UAAAic,cAAP,SAAqBT,EAAMU,EAAW9K,WAC5BqC,EAAO3T,KAAK2T,KACZiI,EAAgBjI,EAAKkI,yBAO3B,GANAlI,EAAKmI,SAAQ,GACTnI,EAAKoI,SACLpI,EAAKqI,KAAO,GAGhBJ,EAAc7G,kBAAoB,GAC9BqH,MACA,IAAqB,IAAA7N,EAAAC,EAAAmF,EAAK0I,SAAO3N,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAA9B,IAAMkW,EAAM1J,EAAAvM,MACbnC,KAAKkc,6BAA6BN,EAAexD,EAAOrC,MAAO2F,EAC3DU,EAAW9K,GAAc8G,EAAOkE,0HAI5C3I,EAAKkI,yBAA2BD,GAG7BrG,EAAArV,UAAAqc,aAAP,SAAoBnL,GAChB,GAAIA,IACepR,KAAK2V,mBAAmBvE,GAEnC,WAIFuC,EAAO3T,KAAK2T,KAClBA,EAAKmI,SAAQ,OACPU,EAAiB7I,EAAKkI,yBACtBrJ,EAAQgK,EAAevH,UAAU7D,IAE1B,EAAToB,EACAgK,EAAezH,kBAAkBgC,OAAOvE,EAAO,GACvCpB,IACRoL,EAAezH,kBAAoB,IAGvCpB,EAAKkI,yBAA2BW,GAG7BjH,EAAArV,UAAAuc,WAAP,SAAkBrL,OACR+J,EAAenb,KAAK2T,KAAKyH,mBACzB5I,EAAQ2I,EAAalG,UAAU,SAAC/B,GAAS,OAAAA,EAAK9B,YAAcA,KACrD,EAAToB,IACA2I,EAAapE,OAAOvE,EAAO,GAC3BxS,KAAK2T,KAAKyH,mBAAqBD,IAI7B5F,EAAArV,UAAAgc,6BAAV,SAAuCM,EAA2CpL,EAAmBsL,EACjGf,EAA6ErK,EAAqBqL,OAE9FC,OAF8F,IAAAD,IAAAA,GAAiB,OAG7GE,EAA0BL,EAAevH,UAAU7D,GACnD+D,EAAkBwG,aAAsC9G,KACA,KACxDuH,EAAYT,aAAsC9G,GACpD,KAAI,EACFiI,EAAsC,CAAE1L,UAASA,EAAEsL,UAASA,EAAEN,UAASA,EAAE9K,WAAUA,IAExD,IAA7BuL,IAEI1H,GACqB,EAAjBwH,EACAH,EAAezH,kBAAkBgC,OAAO4F,EAAe,EAAGxH,GAE1DqH,EAAezH,kBAAkBvS,KAAK2S,GAEnCiH,KAEPQ,EAAqB,IAAI/H,GAAyB2H,EAAe1H,SAAU1D,IACxD2D,kBAAkBvS,KAAKsa,GAC1CN,EAAezH,kBAAkBvS,KAAKoa,MAKxCrH,EAAArV,UAAAmb,2BAAV,SAAqC0B,EAAqCtK,GACtE,GAAIA,EAAWpB,MAAQK,GAAiBd,KAAxC,CAaA,QADIoM,EAAgBD,EAAiB,GAC5Bvc,EAAI,EAAGA,EAAIuc,EAAiBpc,OAAQH,IACrCwc,EAAcrc,OAASoc,EAAiBvc,GAAGG,SAC3Cqc,EAAgBD,EAAiBvc,QAGnCyc,EAAUD,EAAchI,KAAK,SAAC9B,GAAS,OAAAA,EAAK9B,YAAcqB,EAAWrB,YAE3E2L,EAAiB7M,QAAQ,SAAAgN,OACfC,EAASD,EAAWlI,KAAK,SAAC9B,GAAS,OAAAA,EAAK9B,YAAcqB,EAAWrB,YAClE+L,GAAWF,GAGJE,GAAUF,GAElBC,EAAW1a,KAAKya,GAChBzd,OAAOa,OAAO4c,EAASxK,IAGvBjT,OAAOa,OAAO8c,EAAQ1K,GAPtByK,EAAW1a,KAAKiQ,UAvBpBsK,EAAiB7M,QAAQ,SAAAlD,GACrBA,EAAM+J,OAAO/J,EAAMiI,UAAU,SAAC/B,GAAS,OAAAA,EAAK9B,YAAcqB,EAAWrB,YAAY,MAkCnFmE,EAAArV,UAAAgb,2BAAV,SAAqC9J,KAG9BmE,EAAArV,UAAAkd,0BAAP,SAAiChF,GAC7B,OAAOA,EAAOiF,WAAaC,GAASC,QAGjChI,EAAArV,UAAAsd,SAAP,eACU7J,EAAO3T,KAAK2T,KAElB,OADaA,EAAKxC,KAAOwC,EAAKxC,KAAO,IAIlCoE,EAAArV,UAAA+W,aAAP,SAAoBwG,QAAA,IAAAA,IAAAA,GAAA,OACV9J,EAAO3T,KAAK2T,KACdxC,EAAOwC,EAAKxC,KAAOwC,EAAKxC,KAAO,GAEnC,OADAA,EAAOsM,EAAsB9J,EAAK+J,+BAAiCvM,GAIhEoE,EAAArV,UAAAyd,kBAAP,WACI,OAAO3d,KAAK2T,KAAKsC,cAGXV,EAAArV,UAAA0d,yBAAV,SAAmCxM,GAC/B,OAAOpR,KAAK2V,mBAAmBvE,GAC3BpR,KAAK2V,mBAAmBvE,GAAWyM,aAAe7L,WAGnDuD,EAAArV,UAAA4d,aAAP,SAAoBhG,OAGVnE,EAAO3T,KAAK2T,KAClB,GAAIA,EAAKuC,aAAaC,QAAS,KAErBiE,EAA2B,CAAEhO,GADbuH,EAAK4C,WAAauB,EAAQnE,EAAK4C,YAAcuB,EACbpB,KAAMC,GAAgBvB,IAAK8D,SAAUpB,GAC3FnE,EAAKuC,aAAa/J,IAAIiO,QAEtBzG,EAAKxC,KAAK3O,KAAKsV,IAIhBvC,EAAArV,UAAA6d,kBAAP,SAAyBlH,EAAYrE,OAG3BmB,EAAO3T,KAAK2T,KAClB,IAAe,IAAXnB,EACA,GAAImB,EAAKuC,aAAaC,QAAS,KACrBiE,EAA2B,CAAEhO,GAAIyK,EAAOH,KAAMC,GAAgBtB,OAAQ6D,SAAU,MACtFvF,EAAKuC,aAAa/J,IAAIiO,EAAazG,EAAKxC,KAAKqB,SAE7CmB,EAAKxC,KAAK4F,OAAOvE,EAAO,OAEzB,KACGxF,EAAe2G,EAAKuC,aAAawE,SAAS7D,GAChDlD,EAAKuC,aAAa/J,IAAI,CAAEC,GAAIyK,EAAOH,KAAMC,GAAgBtB,OAAQ6D,SAAU,MAAQlM,GAASA,EAAMgR,aAInGzI,EAAArV,UAAA+d,cAAP,SAAqBC,OACb1L,EACEmB,EAAO3T,KAAK2T,KACZxC,EAAOnR,KAAKiX,eAEdzE,EADAmB,EAAK4C,WACGpF,EAAKyF,IAAI,SAACa,GAAW,OAAAA,EAAO9D,EAAK4C,cAAazG,QAAQoO,GAEtD/M,EAAKrB,QAAQoO,OAEnBlR,EAAe2G,EAAKuC,aAAawE,SAASwD,GAC1CC,EAA0BnR,GAASA,EAAM0J,OAASC,GAAgBtB,OAKxE,IAAe,IAAX7C,GAAgB2L,EAApB,CAEIxK,EAAKmI,SAAQ,GAMjBnI,EAAKyK,aAAanF,KAAK,CAAE9H,KAAMA,EAAKqB,KAGhCmB,EAAK0K,eAAiB1K,EAAK8F,UAAUC,iBAAiB/F,EAAKvH,GAAI8R,GAC/DvK,EAAK2K,aAAa,CAACJ,IAEnBvK,EAAK4K,4BAGTve,KAAK+d,kBAAkBG,EAAO1L,GAC9B,EAAcwH,eACdrG,EAAK6K,IAAIC,mBAGHC,EAAkB/K,EAAKuC,aAAaC,QAAUxC,EAAK+J,+BAAiCvM,EAC1FwC,EAAK2D,gBACDoH,EAAgB/d,OAASgT,EAAKgL,SAAY,GAAKD,EAAgB/d,OAASgT,EAAKgL,QAAU,EAAIhL,EAAKqI,MAAsB,IAAdrI,EAAKqI,MAC7GrI,EAAKqI,SAINzG,EAAArV,UAAA0e,WAAP,SAAkB9G,OACRnE,EAAO3T,KAAK2T,KAClB,OAAOA,EAAK4C,WAAauB,EAAQnE,EAAK4C,YAAcuB,GAGjDvC,EAAArV,UAAA2e,wBAAP,SAA+BhI,OACrBlD,EAAO3T,KAAK2T,KAClB,IAAKA,EACD,OAAO,EAEX,IAAKA,EAAKuC,aAAaC,QACnB,OAAO,MAELnJ,EAAQ2G,EAAKuC,aAAawE,SAAS7D,GACzC,QAAI7J,GACOA,EAAM0J,OAASC,GAAgBtB,QAMvCE,EAAArV,UAAA4e,iBAAP,eACUnL,EAAO3T,KAAK2T,KAClB,OAAOA,EAAKxC,KAAKxQ,OAASgT,EAAKgL,SAAY,GAAKhL,EAAKoL,YAA4B,IAAdpL,EAAKqI,0BAvhB/EgD,EAAAA,aAyhBDzJ,EAzhBA,OCdI0J,IAAA,EACAC,GAAA,mCCGJ,kBAAA,SAAAC,KA8CA,OAzCWA,EAAAjf,UAAAkf,sBAAP,SAA6BtI,EAAa5D,OAChCmM,EAAOnM,EAAKkJ,UACZkD,EAAMtf,KAAK6S,cAAciE,EAAK5D,EAAK9B,WACzC,OAAOiO,EAAKE,MAAMD,EAAKpM,EAAKwJ,UAAWxJ,EAAK5B,aAGzC6N,EAAAjf,UAAAsf,YAAP,SAAmB1I,EAAazE,GAC5B,GAAIA,EAAa,CACb,GAAIA,aAAuBwC,GAA0B,KAC3CM,EAAe,EACfL,EAAWK,EAAwB,SACrCsK,OAAY,EAAEC,OAAO,EAEzB,GAAIvK,EAAgBJ,mBAAqBI,EAAgBJ,kBAAkBpU,OAAQ,CAC/E,IAAK,IAAIH,EAAI,EAAGA,EAAI2U,EAAgBJ,kBAAkBpU,OAAQH,IAAK,CAK/D,GAJAkf,EAAUvK,EAAgBJ,kBAAkBvU,KAC5Cif,EAAezf,KAAKwf,YAAY1I,EAAK4I,KAGhB5K,IAAa6K,GAAeV,IAC7C,OAAO,EAIX,GAAIQ,GAAgB3K,IAAa6K,GAAeT,GAC5C,OAAO,EAIf,OAAOO,EAGX,OAAO,MAEDhN,EAAU,EAChB,OAAOzS,KAAKof,sBAAsBtI,EAAKrE,GAI/C,OAAO,GAEf0M,oBAEA,SAAAS,mDAqBA,OArBuCpL,EAAAA,EAAAA,GAC5BoL,EAAA1f,UAAAuW,OAAP,SAAiBtF,EAAWgE,OACpB3U,EACAsW,EACElE,EAAMzB,EAAKxQ,OACXgS,EAAW,GACjB,IAAKwC,IAAoBA,EAAgBJ,mBAAkE,IAA7CI,EAAgBJ,kBAAkBpU,SAAiBiS,EAC7G,OAAOzB,EAEX,IAAK3Q,EAAI,EAAGA,EAAIoS,EAAKpS,IACjBsW,EAAM3F,EAAK3Q,GACPR,KAAKwf,YAAY1I,EAAK3B,IACtBxC,EAAInQ,KAAKsU,GAGjB,OAAOnE,GAGDiN,EAAA1f,UAAA2S,cAAV,SAAwBiE,EAAa1F,GACjC,OAAO0F,EAAI1F,IAEnBwO,GArBuCT,mBC3CvC,SAAAU,mDAmCA,OAnC+CrL,EAAAA,EAAAA,GACpCqL,EAAA3f,UAAAuW,OAAP,SAActF,EAAyBgE,GACnC,OAAOnV,KAAK8f,WAAW3O,EAAMgE,EAAiBnD,YAG1C6N,EAAA3f,UAAA4f,WAAR,SAAmB3O,EAAyBgE,EAA4CzB,OAChFlT,EACAsW,EACElE,EAAMzB,EAAKxQ,OACXgS,EAAyB,GAC/B,IAAKwC,IAAoBA,EAAgBJ,mBAAkE,IAA7CI,EAAgBJ,kBAAkBpU,SAAiBiS,EAC7G,OAAOzB,EAEX,IAAK3Q,EAAI,EAAGA,EAAIoS,EAAKpS,IAAK,CAGtB,IAFAsW,EAAMV,GAAS2J,oBAAoB5O,EAAK3Q,KACpCkT,OAASA,EACToD,EAAI1G,SAAU,KACR4P,EAAmBhgB,KAAK8f,WAAWhJ,EAAI1G,SAAU+E,EAAiB2B,GACxEA,EAAI1G,SAAqC,EAA1B4P,EAAiBrf,OAAaqf,EAAmB,KAGhEhgB,KAAKwf,YAAY1I,EAAK3B,GACtBxC,EAAInQ,KAAKsU,GACFA,EAAI1G,UAAkC,EAAtB0G,EAAI1G,SAASzP,SACpCmW,EAAImJ,qBAAsB,EAC1BtN,EAAInQ,KAAKsU,IAGjB,OAAOnE,GAGDkN,EAAA3f,UAAA2S,cAAV,SAAwBiE,EAAa1F,GAEjC,OADwB,EACED,KAAKC,IAEvCyO,GAnC+CV,IAsC/Ce,GAAA,WAOI,SAAAA,EAAYC,GACRngB,KAAKmgB,QAAO,EAyDpB,OAtDWD,EAAAhgB,UAAA+C,UAAP,SAAiBmd,EAAkCjL,EAC/C/I,EAAYiU,OACN1M,EAA6B3T,KAAKmgB,QAAQxM,KAC1C3G,EAAQ,CACVmI,gBAAiBA,EACjB5B,SAAU,IAAIsM,IAKlB,GAFA7f,KAAKsgB,yBAAyB3M,EAAKI,UAE9B/G,EAAMmI,kBACNnI,EAAMmI,gBAAgBJ,mBAC4B,IAAnD/H,EAAMmI,gBAAgBJ,kBAAkBpU,OAExC,OADAgT,EAAKsC,aAAe,KACbmK,MAGLnR,EAASjP,KAAKyW,OAAO2J,EAAepT,GACpCiJ,EAAsB,GAI5B,OAHAjW,KAAKugB,mBAAmB5M,EAAM1E,EAAQ0E,EAAK6M,gBAAiBvK,GAC5DtC,EAAKsC,aAAeA,EAEbhH,GAGHiR,EAAAhgB,UAAAogB,yBAAR,SAAiC1J,GAE7B,QADMnI,EAAO9O,MAAMgR,KAAKiG,EAAInI,QACnBjO,EAAI,EAAGA,EAAIiO,EAAK9N,OAAQH,IAC7BoW,EAAIrK,IAAIkC,EAAKjO,IAAIyf,oBAAsBjO,WAIvCkO,EAAAhgB,UAAAqgB,mBAAR,SAA2B5M,EAA4BxC,EACnDsP,EAAmCxK,GACnC,IAAK,IAAIzV,EAAI,EAAGA,EAAI2Q,EAAKxQ,OAAQH,IAAK,KAC5BsW,EAAM3F,EAAK3Q,GACjByV,EAAazT,KAAKsU,EAAI3F,MACtBnR,KAAK0gB,yBAAyB/M,EAAMmD,GAEhCA,EAAI1G,UAAkC,EAAtB0G,EAAI1G,SAASzP,SAC7B8f,EAAeE,IAAI7J,EAAID,OAAO,GAC9B7W,KAAKugB,mBAAmB5M,EAAMmD,EAAI1G,SAAUqQ,EAAgBxK,MAKhEiK,EAAAhgB,UAAAwgB,yBAAR,SAAiC/M,EAA4B8D,GAC7C9D,EAAKI,QAAQxH,IAAIkL,EAAOZ,OAChCoJ,oBAAsBxI,EAAOwI,qBAG7BC,EAAAhgB,UAAAuW,OAAR,SAAetF,EAAyBnE,GACpC,OAAOA,EAAMuG,SAASkD,OAAOtF,EAAMnE,EAAMmI,sCA/DhDyL,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,oBACNiL,MAAM,+CAlDDtL,MAiHT2K,EAjEA,OC7BIY,OAAS,SACTvD,OAAS,SACTwD,QAAU,UACVnS,KAAO,sBAMX,SAAAwH,KA6PA,OA5PkBA,EAAAlF,KAAd,SAAsBC,EAAWkB,EAAmC2O,GAChE,YADgE,IAAAA,IAAAA,EAAA,IAA0B5O,IACnF4O,EAAQ9P,KAAKC,EAAMkB,IAGhB+D,EAAA6K,aAAd,SAA2BC,EACvB7O,EACAqB,OACIf,EAAyB,GAY7B,OAXAuO,EAAiBhR,QAAQ,SAACiR,OAChBrK,EAAuBV,EAAS2J,oBAAoBoB,GAC1DrK,EAAIpD,OAASA,EACToD,EAAI1G,WACJ0G,EAAI1G,SAAWgG,EAAS6K,aAAanK,EAAI1G,SAAUiC,EAAayE,IAEpEnE,EAAInQ,KAAKsU,KAGbnE,EAAMyD,EAASlF,KAAKyB,EAAKN,EAAa,IAAIkC,KAKhC6B,EAAA2J,oBAAd,SAAkCqB,GAS9B,MAR6B,CACzBvK,MAAOuK,EAAmBvK,MAC1B1F,KAAMiQ,EAAmBjQ,KACzBf,SAAUgR,EAAmBhR,SAC7B6P,oBAAqBmB,EAAmBnB,oBACxCxM,MAAO2N,EAAmB3N,MAC1B4N,SAAUD,EAAmBC,WAKvBjL,EAAAvC,MAAd,SAAuB1C,EAAWnE,EAAuB2G,EAAkBC,QAAlB,IAAAD,IAAAA,EAAA,WAAkB,IAAAC,IAAAA,EAAA,QACjE0N,EAAW,IAAI7M,GAErB,OADAb,EAAcmD,OAAO,EAAGnD,EAAcjT,QAC/B2gB,EAAS5M,QAAQvD,EAAMnE,EAAMqF,YAAasB,EAAMC,IAE7CwC,EAAAmL,cAAd,SAA4BC,EAA2BxU,GACnD,OAAiC,IAA7BA,EAAMqF,YAAY1R,OACX6gB,EAAUrQ,KAEdnR,KAAKyhB,uBAAuBD,EAAWxU,IAEnCoJ,EAAAqL,uBAAf,SAAsCD,EAA2BxU,GAAjE,IAGQ0U,EACOzO,EACP0O,EACAN,EANR7P,EAAAxR,KACU4B,EAAW4f,EAAU5f,SACrBqN,EAAS,GAAI2S,EAAQ,GAEvBphB,EAAI,EAGR,IAAKA,EAAI,EAAGA,EAAIoB,EAASjB,QAAS,CAI9B,IAHA+gB,EAAQ,CAAC9f,EAASpB,IAClBmhB,EAAU/f,EAASpB,GAAGwT,YAEf2N,GAAWC,EAAM,KAAOD,GAC3BD,EAAMlf,KAAKmf,GACPC,EAAM,IAAMA,EAAM,GAAGnO,QAAUkO,EAAQlO,OACvCmO,EAAMC,QAEVF,EAAUA,EAAQ3N,6BAGlB/E,EAAOzM,KAAKkf,EAAMzO,IAClB2O,EAAME,QAAQJ,EAAMzO,QACd8O,EAAYC,EAAKC,aAAaP,EAAMzO,IACpCiP,EAAmClV,EAAMmV,UAAUnN,KAAK,SAACzU,GAC3D,OAAAiR,EAAK4Q,iBAAiB7hB,EAAEwhB,WAAa,CAAC,CAAE3Q,UAAWsQ,EAAMzO,GAAGR,WAAWrB,UAAWjP,MAAOuf,EAAMzO,GAAG9Q,QAAU4f,KAEhH,KADAV,EAAWa,EAAcA,EAAYb,SAAWrU,EAAMqV,uCAN1D,IAAKpP,EAAIyO,EAAM/gB,OAAS,EAAQ,GAALsS,EAAQA,IAAG,wBAWtC2O,EAAMC,QACN5O,EAAIqP,KAAKC,IAAItP,EAAG,OACVuP,EAAQd,EAAMzO,GAAGc,QAAQkB,UAAU,SAAA7T,GAAK,OAAAA,IAAMogB,EAAUrQ,KAAK3Q,KAC7D6W,EAAMiL,KAAKG,IAAI7gB,EAASjB,OAASH,EAAIgiB,EAAOd,EAAMzO,GAAGc,QAAQpT,QAC/D0gB,GACApS,EAAOzM,KAAI3B,MAAXoO,EAAMvM,EAASgf,EAAMzO,GAAGc,QAAQ2O,MAAMF,EAAOnL,KAEjD7W,GAAK6W,EAAMmL,EAEf,OAAOvT,GAEGmH,EAAA4F,KAAd,SAAsB7K,EAAWnE,GAC7B,IAAKA,EACD,OAAOmE,MAELyB,EAAMzB,EAAKxQ,OACX6R,EAAQxF,EAAMwF,MACdG,EAAM,GACNgQ,EAAiB3V,EAAM2V,eAM7B,OALA3V,EAAMpL,SAAW,CACbghB,WAAY,EACZC,aAAc1R,EAAKxQ,OACnB8B,MAAOqgB,GAAYlS,MAEnB4B,EAAQ,GAAKuQ,MAAMvQ,IACnBxF,EAAMpL,SAASa,MAAQqgB,GAAYnO,mBAC5BhC,GAEPgQ,GAAkB,GAAKI,MAAMJ,IAC7B3V,EAAMpL,SAASa,MAAQqgB,GAAYlO,wBAC5BjC,IAEX3F,EAAMpL,SAASghB,WAAaN,KAAKU,KAAKpQ,EAAM+P,GACvC/P,EAGDJ,GAASxF,EAAMpL,SAASghB,YACxB5V,EAAMpL,SAASa,MAAQqgB,GAAYnO,mBAC5BhC,GAEJxB,EAAKuR,MAAMlQ,EAAQmQ,GAAiBnQ,EAAQ,GAAKmQ,GAN7CxR,IAQDiF,EAAAK,OAAd,SAAwBtF,EAAWnE,GAI/B,OAHKA,EAAMuG,WACPvG,EAAMuG,SAAW,IAAIqM,IAElB5S,EAAMuG,SAASkD,OAAOtF,EAAMnE,EAAMmI,kBAG/BiB,EAAA6M,eAAd,SAA6B9R,EAAyBnE,GAIlD,OAHKA,EAAMuG,WACPvG,EAAMuG,SAAW,IAAIsM,IAElB7S,EAAMuG,SAASkD,OAAOtF,EAAMnE,EAAMmI,kBAG/BiB,EAAA6L,aAAd,SAA2BiB,OACjBnB,EAAgC,GACtC,GAAImB,IAASlR,WAAakR,EAAKzQ,WAE3B,IADAsP,EAAUvf,KAAK,CAAE4O,UAAW8R,EAAKzQ,WAAWrB,UAAWjP,MAAO+gB,EAAK/gB,QAC5D+gB,EAAKlP,aACRkP,EAAOA,EAAKlP,YACZ+N,EAAUD,QAAQ,CAAE1Q,UAAW8R,EAAKzQ,WAAWrB,UAAWjP,MAAO+gB,EAAK/gB,QAG9E,OAAO4f,GAGG3L,EAAAgM,iBAAd,SAA+Be,EAAwBC,GACnD,OAAID,EAAGxiB,SAAWyiB,EAAGziB,QAGdwiB,EAAGE,MAAM,SAAC5P,EAAOjB,GACpB,OAAOiB,EAAMrC,YAAcgS,EAAG5Q,GAAOpB,WAAaqC,EAAMtR,QAAUihB,EAAG5Q,GAAOrQ,SAYtEiU,EAAAC,kBAAd,SAAmClF,EAAW+E,EAA6BK,EAAkB+M,GAwBzF,YAxByF,IAAAA,IAAAA,GAAA,GACzFnS,EAAKjB,QAAQ,SAACqT,EAAW/Q,OACf0L,EAAQ3H,EAAagN,EAAKhN,GAAcgN,EACxCnJ,EAAclE,EAAalB,KAAK,SAAA1U,GAAK,OAAAA,EAAE8L,KAAO8R,IAChD9D,GAAeA,EAAY1D,OAASC,GAAgBrB,SACpDnE,EAAKqB,GAAS4H,EAAYlB,YAI9BoK,GACApN,EACKO,OAAO,SAAAnW,GAAK,OAAAA,EAAEoW,OAASC,GAAgBtB,SACvCnF,QAAQ,SAAA5P,OACCkS,EAAQ+D,EAAapF,EAAK8D,UAAU,SAAA3V,GAAK,OAAAA,EAAEiX,KAAgBjW,EAAE8L,KAAM+E,EAAK8D,UAAU,SAAA3V,GAAK,OAAAA,IAAMgB,EAAE8L,KACjG,GAAKoG,GAASA,EAAQrB,EAAKxQ,QAC3BwQ,EAAK4F,OAAOvE,EAAO,KAKnCrB,EAAK3O,KAAI3B,MAATsQ,EAAIzO,EAASwT,EACRO,OAAO,SAAAnW,GAAK,OAAAA,EAAEoW,OAASC,GAAgBvB,MACvCwB,IAAI,SAAAtW,GAAK,OAAAA,EAAE4Y,aAET/H,GAYGiF,EAAAoN,8BAAd,SACIrS,EACA+E,EACAuN,EACAlN,EACA+M,gBAAA,IAAAA,IAAAA,GAAA,kBAEWlJ,GACP,GAAIA,EAAYsJ,KAAM,KACZC,EAASC,EAAKC,mBAAmB1S,EAAMoF,EAAYkN,EAAcrJ,EAAYsJ,MAC/ExG,EAAoByG,EAASA,EAAOF,GAAgBtS,EACxD,OAAQiJ,EAAY1D,MAChB,KAAKC,GAAgBvB,IAEbuO,IAAWA,EAAOF,KAClBE,EAAOF,GAAgBvG,EAAa,IAExCA,EAAW1a,KAAK4X,EAAYlB,UAC5B,MACJ,KAAKvC,GAAgBrB,WACXwO,EAAc5G,EAAWjI,UAAU,SAAA8O,GAAK,OAAAA,EAAExN,KAAgB6D,EAAYhO,MACvD,IAAjB0X,IACA5G,EAAW4G,GAAe5V,GAAaD,GAAWiP,EAAW4G,IAAe1J,EAAYlB,WAE5F,MACJ,KAAKvC,GAAgBtB,OACjB,GAAIiO,EAAY,KACNU,EAAc9G,EAAWjI,UAAU,SAAA7T,GAAK,OAAAA,EAAEmV,KAAgB6D,EAAYhO,MACvD,IAAjB4X,GACA9G,EAAWnG,OAAOiN,EAAa,UAO/C7S,EAAK3O,KAAK4X,EAAYlB,sBA7B9B,IAA0B,IAAA+K,EAAAzV,EAAA0H,GAAYgO,EAAAD,EAAA/hB,QAAAgiB,EAAA9hB,KAAA8hB,EAAAD,EAAA/hB,OAAA,GAAhBgiB,EAAA/hB,4GAgCtB,OAAOgP,GAGIiF,EAAAyN,mBAAf,SAAkC1S,EAAaoF,EAAiBkN,EAAmBC,WAE3EzU,EADAiO,EAAoB/L,aAGb/E,GAEP,KADA6C,EAASiO,GAAcA,EAAWlI,KAAK,SAAA+O,GAAK,OAAAA,EAAExN,KAAgBnK,mBAK9D8Q,EAAajO,EAAOwU,QANxB,IAAiB,IAAAU,EAAA3V,EAAAkV,GAAIU,EAAAD,EAAAjiB,QAAAkiB,EAAAhiB,KAAAgiB,EAAAD,EAAAjiB,OAAA,gBAARkiB,EAAAjiB,kHASb,OAAO8M,GAEfmH,mBCvRA,SAAAiO,KA6DA,OA5DkBA,EAAAC,gBAAd,SAA8BnT,OACpBxQ,EAASwQ,EAAKxQ,OACpB,GAAe,IAAXA,EACA,MAAO,OAGL4jB,EAAYpT,EAAK,GACjBqT,EAAkBrT,EAAKmR,KAAKmC,MAAM9jB,EAAS,IAC3C+jB,EAAgBvT,EAAKxQ,EAAS,GAE9BgkB,EAAQnlB,OAAOiP,KAAK8V,GACpBK,EAAQplB,OAAOiP,KAAK+V,GACpBK,EAAQrlB,OAAOiP,KAAKiW,GAEpBjW,EAAO,IAAIO,IAAI2V,EAAMhiB,OAAOiiB,GAAOjiB,OAAOkiB,IAEhD,OAAQR,EAAgBS,cAAc3T,GAA2B,CAAE,YAArBxR,MAAMgR,KAAKlC,IAG/C4V,EAAAU,eAAd,SAA6BC,EAAYC,OAC/BnT,EAAIoT,SAASC,cAAc,KACjC,GAAIC,OAAOxV,WAAawV,OAAOxV,UAAUyV,iBACrCD,OAAOxV,UAAUyV,iBAAiBL,EAAMC,OACrC,KACGK,EAAMF,OAAOG,IAAIC,gBAAgBR,GACvClT,EAAE2T,SAAWR,EAEbnT,EAAE4T,KAAOJ,EACTJ,SAASS,KAAKC,YAAY9T,GAC1BA,EAAE+T,QACFX,SAASS,KAAKG,YAAYhU,GAC1BsT,OAAOG,IAAIQ,gBAAgBT,KAIrBjB,EAAA2B,oBAAd,SAAkCzlB,GAG9B,QAFM0lB,EAAM,IAAIC,YAAY3lB,EAAEI,QACxBwlB,EAAO,IAAIC,WAAWH,GACnBzlB,EAAI,EAAGA,IAAMD,EAAEI,SAAUH,EAE9B2lB,EAAK3lB,GAAuB,IAAlBD,EAAE8lB,WAAW7lB,GAG3B,OAAOylB,GAGG5B,EAAAS,cAAd,SAA4B3T,OAClBoT,EAAYpT,EAAK,GACvB,MAA6B,iBAAdoT,GACc,iBAAdA,GACPA,aAAqB3V,MAGnByV,EAAAiC,SAAd,SAAuBnkB,GACnB,OAAOA,IAAU6P,WAAuB,OAAV7P,GAGpBkiB,EAAAkC,oBAAd,SAAkCpkB,GAC9B,OAAOA,IAAU6P,WAAuB,OAAV7P,IAAmBA,EAAMqkB,QAE/DnC,KCKAoC,GAAA,WAAA,SAAAA,IAEYzmB,KAAA0mB,YAAc,GAEZ1mB,KAAA2mB,aAAc,EACd3mB,KAAA4mB,0BAA4B,EAC5B5mB,KAAA6mB,MAAQ,KAYX7mB,KAAA8mB,YAAc,IAAIC,EAAAA,aAYlB/mB,KAAAgnB,eAAiB,IAAID,EAAAA,aAkNhC,OAzMWN,EAAAvmB,UAAA+mB,UAAP,SAActT,EAAWuT,GAAzB,IAAA1V,EAAAxR,KACI,GAAIknB,IAAYlV,WAAyB,OAAZkV,EACzB,MAAM5Y,MAAM,4BAGV+N,EAAU1I,EAAKkC,WAAWxF,UAChCrQ,KAAKmnB,YAAc,IAAIxnB,MAAW0c,EAAQ1b,YAEpCymB,EAAgB,GAClBC,GAAyB,EAE7BhL,EAAQnM,QAAQ,SAACkI,OACPkP,EAAiC,KAAlBlP,EAAOmP,OAAgBnP,EAAOmP,OAASnP,EAAOrC,MAC7DyR,GAAgBpP,EAAOqP,QAAUP,EAAQQ,wBACzClV,EAAQ0U,EAAQS,mBAAqBvP,EAAO5F,MAAQ4F,EAAOwP,aAE3DC,EAAa,CACfN,OAAQD,EACRvR,MAAOqC,EAAOrC,MACd+R,MAAON,EACPO,UAAW3P,EAAO2P,UAClBC,eAAe,IAGJ,IAAXxV,GACAhB,EAAK2V,YAAY3U,GAASqV,EAC1BR,EAAwB/E,KAAKC,IAAI8E,EAAuB7U,IAExD4U,EAAc5kB,KAAKqlB,GAGnBzP,EAAO6P,QAAUT,IACjBhW,EAAKoV,yBAA2BpU,KAKxC4U,EAAclX,QAAQ,SAACgY,GACnB1W,EAAK2V,cAAcE,GAAyBa,QAG1C/W,EAAOnR,KAAKmoB,YAAYxU,EAAMuT,GACpClnB,KAAKooB,WAAWjX,EAAM+V,IAUnBT,EAAAvmB,UAAAkoB,WAAP,SAAkBjX,EAAa+V,GAA/B,IAAA1V,EAAAxR,KACI,GAAIknB,IAAYlV,WAAyB,OAAZkV,EACzB,MAAM5Y,MAAM,wBAGhB,IAAKtO,KAAKmnB,aAA2C,IAA5BnnB,KAAKmnB,YAAYxmB,OAAc,KAC9C8N,EAAO4V,GAAgBC,gBAAgBnT,GAC7CnR,KAAKmnB,YAAc1Y,EAAKmI,IAAI,SAACyR,GAAM,MAAA,CAAGd,OAAQc,EAAGtS,MAAOsS,EAAGP,MAAM,SAGjEQ,EAA4B,EAC5BC,EAA4B,EAChCvoB,KAAKmnB,YAAYjX,QAAQ,SAACkI,EAAQ5F,GAC9B,IAAK4F,EAAO0P,KAAM,KACRU,EAAmB,CACrBjB,OAAQlD,GAAgBkC,oBAAoBnO,EAAOmP,QAC/C,SAAWgB,IAA8BnQ,EAAOmP,OACpDxR,MAAOqC,EAAOrC,MACduC,YAAa9F,EACboG,QAAQ,EACRoP,eAAe,GAEnBxW,EAAKwV,eAAe/N,KAAKuP,GAEzBpQ,EAAOmP,OAASiB,EAAiBjB,OACjCnP,EAAO0P,KAAOU,EAAiB5P,OAC/BR,EAAO4P,cAAgBQ,EAAiBR,cAEpC5P,EAAO0P,MAAQtV,GAAShB,EAAKoV,0BAC7B0B,IAGA9W,EAAKqV,OAASrV,EAAKqV,MAAMzV,YAAcgH,EAAOrC,QAC1CqC,EAAO0P,KACPtW,EAAKqV,MAAQ,KAEbrV,EAAKqV,MAAMzV,UAAYgH,EAAOmP,WAM9CvnB,KAAK4mB,0BAA4B0B,MAE3BG,EAAe,IAAI9oB,MACnBmlB,EAAgBT,GAAgBS,cAAc3T,GAEpDA,EAAKjB,QAAQ,SAAC2H,EAAKrF,GACfhB,EAAKkX,UAAUD,EAAc5Q,EAAKrF,EAAOsS,KAG7C9kB,KAAK2oB,yBAAyBF,EAAcvB,GAC5ClnB,KAAK4oB,iBAKDnC,EAAAvmB,UAAAwoB,UAAR,SAAkBvX,EAAa2G,EAActF,EAAesS,GAA5D,IAAAtT,EAAAxR,KAeU6oB,EAAU,CACZ/Q,QAbCgN,EASK9kB,KAAK2mB,YAAc7O,EAAQ3G,KAAO2G,EARlC9X,KAAKmnB,YAAY2B,OAAO,SAAChX,EAAGxP,GAC9B,IAAKA,EAAEwlB,KAAM,KACHiB,EAAWvX,EAAKmV,YAAc7O,EAAQ3G,KAAK7O,EAAEyT,OAAS+B,EAAQxV,EAAEyT,OACtEjE,EAAExP,EAAEilB,QAAUjlB,EAAEylB,YAAczlB,EAAE0lB,cAAgB1lB,EAAEylB,UAAUgB,GAAYA,EAE5E,OAAOjX,GACR,IAOHkG,SAAUxF,EACVoG,QAAQ,GAEZ5Y,KAAK8mB,YAAY7N,KAAK4P,GAEjBA,EAAQjQ,QACTzH,EAAK3O,KAAK,CAAEsV,QAAS+Q,EAAQ/Q,QAASkR,gBAAiBlR,KAIvD2O,EAAAvmB,UAAAioB,YAAR,SAAoBxU,EAAWuT,GAC3BlnB,KAAK0mB,YAAc,OACfuC,EAActV,EAAKsV,YACvBjpB,KAAK2mB,YAAcsC,IAAgBjX,UAE/BhS,KAAK2mB,aACL3mB,KAAKkpB,wBAAwBD,OAG7B9X,EAAOnR,KAAK2mB,YAAc3mB,KAAK0mB,YAAc/S,EAAKxC,KAEtD,GAAIwC,EAAKkI,0BACoD,EAAzDlI,EAAKkI,yBAAyB9G,kBAAkBpU,SAC/CumB,EAAQiC,gBAAiB,KACpB3M,EAAiB,CACnBrH,gBAAiBxB,EAAKkI,yBACtB0D,MAAO5L,EAAKyV,gBAOZjY,EAJAnR,KAAK2mB,aACL3mB,KAAK0mB,YAAc,GACnBuC,EAAc7S,GAAS6M,eAAegG,EAAazM,GACnDxc,KAAKkpB,wBAAwBD,GACtBjpB,KAAK0mB,aAELtQ,GAASK,OAAOtF,EAAMqL,GAmBrC,OAfI7I,EAAKyH,oBAC4B,EAAjCzH,EAAKyH,mBAAmBza,SACvBumB,EAAQmC,gBACTrpB,KAAK6mB,MAAQ5Y,GAAW0F,EAAKyH,mBAAmB,IAM5CjK,EAJAnR,KAAK2mB,aACL3mB,KAAK0mB,YAAc,GACnBuC,EAAc7S,GAAS6K,aAAagI,EAAatV,EAAKyH,oBACtDpb,KAAKkpB,wBAAwBD,GACtBjpB,KAAK0mB,aAELtQ,GAASlF,KAAKC,EAAMwC,EAAKyH,qBAIjCjK,GAGHsV,EAAAvmB,UAAAgpB,wBAAR,SAAgCnV,GAC5B,GAAKA,EAGL,IAAK,IAAIvT,EAAI,EAAGA,EAAIuT,EAAQpT,OAAQH,IAAK,KAC/B4gB,EAAqBrN,EAAQvT,GAEnCR,KAAK0mB,YAAYlkB,KAAK4e,GACtBphB,KAAKkpB,wBAAwB9H,EAAmBhR,YAIhDqW,EAAAvmB,UAAA0oB,cAAR,WACI5oB,KAAKmnB,YAAc,GACnBnnB,KAAK4mB,0BAA4B,EACjC5mB,KAAK6mB,MAAQ,KACb7mB,KAAK0mB,YAAc,yCA7NtB4C,EAAAA,+BAYAA,EAAAA,UAmNL7C,EAhPA,iBCxDI,SAAA8C,EAAoBC,EAAcC,EAAgCC,QAAA,IAAAA,IAAAA,GAAA,GAA9C1pB,KAAAwpB,MAAAA,EAA8CxpB,KAAA0pB,gBAAAA,EAR1D1pB,KAAA2pB,cAAgB,GAChB3pB,KAAA4pB,aAAe,GACf5pB,KAAA6pB,KAAO,OAEP7pB,KAAA8pB,kBAAoB,CAAC,KAAM,KAAM,QACjC9pB,KAAA+pB,iBAAmB,EACnB/pB,KAAAgqB,gBAAiB,EAGrBhqB,KAAKiqB,aAAaR,GAkE1B,OA/DWF,EAAArpB,UAAAioB,YAAP,WACI,IAAKnoB,KAAKwpB,OAA+B,IAAtBxpB,KAAKwpB,MAAM7oB,OAC1B,MAAO,GAGXX,KAAKwpB,MAAQxpB,KAAKwpB,MAAM5S,IAAI,SAAC2M,GAAS,OAAAA,EAAKzL,cAErCrJ,EAAO4V,GAAgBC,gBAAgBtkB,KAAKwpB,OAElD,OAAoB,IAAhB/a,EAAK9N,OACE,IAGXX,KAAKgqB,eAAiB3F,GAAgBS,cAAc9kB,KAAKwpB,OACzDxpB,KAAK8pB,kBAAkBtnB,KAAKxC,KAAKkqB,YAEjClqB,KAAK2pB,cAAgB3pB,KAAKmqB,oBAAoB1b,EAAMzO,KAAK8pB,mBACzD9pB,KAAK4pB,aAAe5pB,KAAKoqB,mBAAmBpqB,KAAKwpB,MAAO/a,EAAMzO,KAAK8pB,mBAE5D9pB,KAAK2pB,cAAgB3pB,KAAK4pB,eAG7BL,EAAArpB,UAAAmqB,aAAR,SAAqBloB,EAAOmoB,OACpBC,EAAYlG,GAAgBiC,SAASnkB,GAAS2e,OAAO3e,GAAS,GAIlE,OAHImoB,EAAYE,KAAK,SAACC,GAAM,OAAAF,EAAUG,SAASD,OAC3CF,EAAY,IAAIA,EAAS,KAEtBA,EAAYvqB,KAAKkqB,YAGpBX,EAAArpB,UAAAiqB,oBAAR,SAA4B1b,EAAM6b,WAC1BK,EAAa,OACjB,IAAsB,IAAAC,EAAApc,EAAAC,GAAIoc,EAAAD,EAAA1oB,QAAA2oB,EAAAzoB,KAAAyoB,EAAAD,EAAA1oB,OAAE,CAAvB,IAAM4oB,EAAOD,EAAA1oB,MACdwoB,GAAc3qB,KAAKqqB,aAAaS,EAAS9qB,KAAK8pB,wHAGlD,OAAOa,EAAWjI,MAAM,GAAI1iB,KAAK+pB,kBAAoB/pB,KAAK6pB,MAGtDN,EAAArpB,UAAA6qB,cAAR,SAAsBtT,EAAQhJ,EAAM6b,WAC5BK,EAAa,OACjB,IAAsB,IAAAK,EAAAxc,EAAAC,GAAIwc,EAAAD,EAAA9oB,QAAA+oB,EAAA7oB,KAAA6oB,EAAAD,EAAA9oB,OAAE,CAAvB,IAAM4oB,EAAOG,EAAA9oB,MAERA,EAASsV,EAAOqT,KAAa9Y,UAAayF,EAAOqT,GAAW9qB,KAAKgqB,eAAiBvS,EAAS,GACjGkT,GAAc3qB,KAAKqqB,aAAaloB,EAAOnC,KAAK8pB,wHAGhD,OAAOa,EAAWjI,MAAM,GAAI1iB,KAAK+pB,kBAAoB/pB,KAAK6pB,MAGtDN,EAAArpB,UAAAkqB,mBAAR,SAA2Bc,EAAazc,EAAM6b,WACtCa,EAAc,OAClB,IAAkB,IAAAC,EAAA5c,EAAA0c,GAAWG,EAAAD,EAAAlpB,QAAAmpB,EAAAjpB,KAAAipB,EAAAD,EAAAlpB,OAAE,CAA1B,IAAM2V,EAAGwT,EAAAlpB,MACVgpB,GAAenrB,KAAK+qB,cAAclT,EAAKpJ,EAAM6b,wGAGjD,OAAOa,GAGH5B,EAAArpB,UAAA+pB,aAAR,SAAqB9nB,GACjBnC,KAAKkqB,WAAa/nB,EAClBnC,KAAK+pB,iBAAmB5nB,EAAMxB,QAEtC4oB,mBCtCI,SAAA+B,EAAYrG,EAA4BsG,GAAAvrB,KAAAurB,eAAAA,EAhCjCvrB,KAAA0nB,yBAA0B,EAU1B1nB,KAAAmpB,iBAAkB,EAUlBnpB,KAAA2nB,oBAAqB,EAUrB3nB,KAAAqpB,eAAgB,EAGnBrpB,KAAKwrB,YAAYvG,GA6BzB,OA1BYqG,EAAAprB,UAAAsrB,YAAR,SAAoBvG,GAChBjlB,KAAKyrB,UAAYxG,IAAuD,IAA3CA,EAASyG,SAAS1rB,KAAKurB,gBAA4BvrB,KAAKurB,eAAiB,KAU1G/rB,OAAAgC,eAAI8pB,EAAAprB,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAKyrB,eAUhB,SAAatpB,GACTnC,KAAKwrB,YAAYrpB,oCAGzBmpB,oBC/DI,SAAAK,EAAY1G,EAAkB2G,GAA9B,IAAApa,EACIqa,EAAAjrB,KAAAZ,KAAMilB,EAAU0G,EAAsBG,yBAAyBF,KAAU5rB,YACzEwR,EAAKua,YAAYH,GACjBpa,EAAKyY,iBA6Fb,OArG2CzV,EAAAA,EAAAA,GAWxBmX,EAAAG,yBAAf,SAAwCE,OAChCC,EAAY,GAChB,OAAQD,GACJ,KAAKE,GAAaC,IACdF,EAAY,OACZ,MACJ,KAAKC,GAAaE,IACdH,EAAY,OACZ,MACJ,KAAKC,GAAaG,IACdJ,EAAY,OACZ,MACJ,QACI,MAAM3d,MAAM,8BAEpB,OAAO2d,GAUXzsB,OAAAgC,eAAImqB,EAAAzrB,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAKssB,qBAUhB,SAAmBnqB,GACfnC,KAAKiqB,aAAa9nB,oCAUtB3C,OAAAgC,eAAImqB,EAAAzrB,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAKusB,eAUhB,SAAapqB,GACTnC,KAAK+rB,YAAY5pB,oCAGbwpB,EAAAzrB,UAAA6rB,YAAR,SAAoB5pB,GAChB,GAAIA,IAAU6P,WAAuB,OAAV7P,GAAkBA,IAAUnC,KAAKusB,UAAW,CACnEvsB,KAAKusB,UAAYpqB,MACX8pB,EAAYN,EAAsBG,yBAAyB3pB,GACjE,IAAKnC,KAAKilB,SAASyG,SAASO,GAAY,KAC9BO,EAAS,IAAMxsB,KAAKilB,SAASzU,MAAM,KAAKic,MACxCC,EAAU1sB,KAAKilB,SAAS0H,QAAQH,EAAQP,GAC9CjsB,KAAKurB,eAAiBU,EACtBjsB,KAAKilB,SAAWyH,KAKpBf,EAAAzrB,UAAA+pB,aAAR,SAAqB9nB,GACjB,GAAIA,IAAU6P,WAAuB,KAAV7P,GAA0B,OAAVA,EACvCnC,KAAKssB,gBAAkBnqB,OAEvB,OAAQnC,KAAK4rB,UACT,KAAKM,GAAaC,IACdnsB,KAAKssB,gBAAkB,IACvB,MACJ,KAAKJ,GAAaE,IAClB,KAAKF,GAAaG,IACdrsB,KAAKssB,gBAAkB,OAK3CX,GArG2CL,QA+GvCa,IAAA,EAIAC,IAAA,EAIAC,IAAA,sDC5FJ,IAAAO,GAAA,SAAAf,GAAA,SAAAe,IAAA,IAAApb,EAAA,OAAAqa,GAAAA,EAAAhrB,MAAAb,KAAAU,YAAAV,YAcWwR,EAAAqb,cAAgB,IAAI9F,EAAAA,eA0B/B,OAvC2CvS,EAAAA,EAAAA,GAe7BoY,EAAA1sB,UAAAyoB,yBAAV,SAAmCxX,EAAa+V,OACtC4F,EAAU,IAAIvD,GAAuBpY,EAAM+V,EAAQuC,gBACzDzpB,KAAK+sB,YAAcD,EAAQ3E,cAE3BnoB,KAAKgtB,SAAS9F,GACdlnB,KAAK6sB,cAAc5T,KAAK,CAAE6T,QAAS9sB,KAAK+sB,eAGpCH,EAAA1sB,UAAA8sB,SAAR,SAAiB9F,GACb,OAAQA,EAAQ0E,UACZ,KAAKM,GAAaC,IACdnsB,KAAKitB,WAAWjtB,KAAK+sB,YAAa7F,EAAQjC,SAAU,2BACpD,MACJ,KAAKiH,GAAaE,IAClB,KAAKF,GAAaG,IACdrsB,KAAKitB,WAAWjtB,KAAK+sB,YAAa7F,EAAQjC,SAAU,8CAKxD2H,EAAA1sB,UAAA+sB,WAAR,SAAmB9b,EAAc8T,EAAkB2G,OACzC5G,EAAO,IAAIkI,KAAK,CAAC,SAAU/b,GAAO,CAAEuF,KAAMkV,IAChDvH,GAAgBU,eAAeC,EAAMC,wBAtC5CjG,EAAAA,oDAaIsK,EAAAA,UA2BLsD,EAxCA,CAC2CnG,QC7BvC0G,gBAAA,EACAC,oBAAA,EACAC,oBAAA,EACAC,cAAA,EACAC,kBAAA,EACAC,iBAAA,EACAC,sBAAA,EACAC,0BAAA,EACAC,kBAAA,kbAMAC,aAAA,EACAC,QAAA,EACAC,SAAA,EACAC,iBAAA,EACAC,UAAA,EACAC,cAAA,EACAC,UAAA,EACAC,aAAA,EACAC,iBAAA,EACAC,kBAAA,EACAC,kBAAA,GACAC,WAAA,4aC5BJ,IAAAC,GAAA,WAAA,SAAAA,KA+GA,OA1GkBA,EAAAC,QAAd,WACI,OAAOD,EAAaE,WAAa,uhBAGvBF,EAAAG,OAAd,WACI,OAAOH,EAAaE,WAAa,4tBAGvBF,EAAAI,QAAd,WACI,OAAOJ,EAAaE,WAAa,4hBAGvBF,EAAAK,SAAd,WACI,OAAOL,EAAaE,WAAa,2hNAGvBF,EAAAM,UAAd,SAAwBC,GAGpB,OAAOP,EAAaE,WAAa,4xBADbK,EAAqB,EAAI,GAC+xB,0wBAGl0BP,EAAAQ,YAAd,WACI,OAAOR,EAAaE,WAAa,m1BAGvBF,EAAAS,iBAAd,WACI,OAAOT,EAAaE,WAAa,gPAGvBF,EAAAU,gBAAd,SAA8BC,OACtBC,EAASZ,EAAaE,WAAa,ueAQvC,OANIS,IACAC,GAAUZ,EAAaa,4BAG3BD,GAAU,oBAKAZ,EAAAc,YAAd,SAA0BC,EAAmBC,EAAoBC,EAAcC,EAAmBC,EAAmBC,EAAwBC,GAOzI,YAPiH,IAAAD,IAAAA,GAAA,QAAwB,IAAAC,IAAAA,EAAA,GAO/HrB,EAAaE,WAAU,yUALRkB,EAAiB,mDAAqD,IAOrF,qBACAL,EAAS,kEACiCC,EAAU,oEARzB,EAAfK,EAAmB,oBAAoBA,EAAY,IAAM,IASnC,8BAClDJ,EAAI,KACJC,EAAS,gGAbgBC,EAAW,8DAAgE,IAe1F,gBAIMnB,EAAAsB,mBAAd,SAAiCC,EAAeC,EAAqBC,GACjE,OAAOzB,EAAaE,WAAa,iFAAmFqB,EAAQ,kBAAoBC,EAAc,KAAOC,EAAQ,UAGnKzB,EAAA0B,mBAAd,SAAiCf,EAA2BQ,OACpDQ,EAAe3B,EAAaE,WAChC,0jCAiBA,OAPAyB,GAAgBhB,EAChB,6IAA8I,GAE9IgB,GAAgBR,EACZ,mIAAqI,GACzIQ,GAAgB,YAKN3B,EAAA4B,aAAd,SAA2Bb,EAAmBc,EAAsBnf,GAChE,OAAUsd,EAAaE,WAAU,2HAA2Ha,EAAS,+CACtJA,EAAS,MAAMre,EAAOmf,EAAY,wIAKvC7B,EAAA8B,eAAd,SAA6B9d,GAIzB,QADI+d,EAAe,GACH,GAAT/d,GAAY,KACTge,EAAOhe,EAAQ,GACrB+d,EAAezP,OAAO2P,aAAa,GAAKD,GAAQD,EAChD/d,EAAQ8P,KAAKmC,MAAMjS,EAAQ,IAAM,EAErC,OAAO+d,GA3GI/B,EAAAE,WAAa,6CACbF,EAAAa,2BAA6B,iJA4GhDb,EA/GA,iBCQA,SAAAZ,KAIA,OAHWA,EAAA1tB,UAAAwwB,aAAP,SAAoBC,EAAeC,GAC/BD,EAAOE,KAAK,QAASrC,GAAaC,YAE1Cb,mBAKA,SAAAC,KAIA,OAHWA,EAAA3tB,UAAAwwB,aAAP,SAAoBC,EAAeC,GAC/BD,EAAOE,KAAK,UAAWrC,GAAaG,WAE5Cd,mBAKA,SAAAC,KAIA,OAHWA,EAAA5tB,UAAAwwB,aAAP,SAAoBC,EAAeC,GAC/BD,EAAOE,KAAK,WAAYrC,GAAaI,YAE7Cd,mBAKA,SAAAC,KAKA,OAJWA,EAAA7tB,UAAAwwB,aAAP,SAAoBC,EAAeC,OACzBzB,GAA6C,IAA1ByB,EAAcE,QACvCH,EAAOE,KAAK,oBAAqBrC,GAAaU,gBAAgBC,KAEtEpB,mBAKA,SAAAC,KAIA,OAHWA,EAAA9tB,UAAAwwB,aAAP,SAAoBC,EAAeC,GAC/BD,EAAOE,KAAK,aAAcrC,GAAaK,aAE/Cb,KAKAC,GAAA,WAAA,SAAAA,KA+GA,OA5GWA,EAAA/tB,UAAAwwB,aAAP,SAAoBC,EAAeC,OAG3BrB,EAFEG,EAAY,GACZD,EAAO,GAEPsB,EAAaH,EAAcI,eAC7BxB,EAAa,GACbyB,EAAkB,EAEtB,GAAIL,EAAcE,QACdpB,EAAUltB,KAAK,gBACf+sB,EAAY,SACT,CACHG,EAAUltB,KAAK,mBACToJ,EAAUglB,EAAc1J,QAAQhT,UAChCA,EAAYtI,EAAS,QAAUA,EAAS,qBAAuB,GAErE8jB,EAAUltB,KAAK,aAAa0R,EAAS,KACrC,IAAK,IAAI1T,EAAI,EAAGA,EAAIowB,EAAcM,YAAa1wB,IAAK,KAC1C4X,EAASoW,GAAa8B,eAAe9vB,GAAK,EAC1C2B,EAAQ4uB,EAAWI,UAAUP,EAAcniB,KAAKjO,GAAIA,GAAG,GAC7DkvB,EAAUltB,KAAK,SAAS4V,EAAM,cAAcjW,EAAK,YAErDutB,EAAUltB,KAAK,UAEf,IAAShC,EAAI,EAAGA,EAAIowB,EAAcQ,SAAU5wB,IAAK,CAC7C,GAAKowB,EAAcS,eAEZ,KACGvZ,EAAU8Y,EAAczf,KAAK3Q,EAAI,GAAGwoB,gBACpCsI,EAAexZ,EAAQuJ,UAAuC,IAArBvJ,EAAQuJ,SAAqB,GAAK,iBAAxC,GACnCkQ,EAAWzZ,EAAQpE,QAAU1T,KAAKwxB,mBAAmB1Z,GAAY,cAAgB,GACjF2Z,EAAkB3Z,EAAQrE,MAAQqE,EAAQrE,MAAQ,EAClDie,EAAkC,EAAlBD,EAAsB,kBAAkBA,EAAe,IAAM,GACnFR,EAAkBA,EAAkBQ,EAAkBA,EAAkBR,EAExEvB,EAAUltB,KAAK,YAAYhC,EAAI,GAAE,IAAI0T,EAAYwd,EAAgBJ,EAAaC,EAAO,UATrF7B,EAAUltB,KAAK,YAAYhC,EAAI,GAAE,IAAI0T,EAAS,KAWlD,IAAK,IAAIjB,EAAI,EAAGA,EAAI2d,EAAcM,YAAaje,IAAK,KAC1C0e,EAAW1D,EAAc2D,YAAYhB,EAAepwB,EAAGyS,GAC7Dyc,EAAUltB,KAAKmvB,GAEnBjC,EAAUltB,KAAK,UAEnBktB,EAAUltB,KAAK,gBACf+sB,EAAY,MAAQf,GAAa8B,eAAeM,EAAcM,YAAc,GAAKN,EAAcQ,SAE/F3B,EAAKjtB,KAAK,UAEV,IAAShC,EAAI,EAAGA,EAAIowB,EAAcM,YAAa1wB,IAAK,KAC1CkP,EAAQqhB,EAAWc,aAAarxB,GAEhCsxB,EAAelB,EAAc1J,QAAQ6K,YACvBnB,EAAc1J,QAAQ6K,YACtBzP,KAAKC,IAAM7S,EAAQ,GAAM,KAAOue,EAAc+D,WAElEvC,EAAKjtB,KAAK,cAAchC,EAAI,GAAE,WAAWA,EAAI,GAAE,YAAYsxB,EAAY,uBAK3E,GAFArC,EAAKjtB,KAAK,YAEqC,IAA3CouB,EAAcqB,0BACbrB,EAAc1J,QAAQgL,gBACtBtB,EAAc1J,QAAQS,mBAAoB,KACrCwK,EAAoBvB,EAAcqB,wBAA0B,EAElEzC,EAAa,iBAAiB2C,EAAiB,mBAD7B3D,GAAa8B,eAAe6B,GAAqB,KACO,gDAG5ExC,GAAYiB,EAAcE,SAAWF,EAAc1J,QAAQkL,cAEjEzB,EAAOE,KAAK,aACArC,GAAac,YAAYC,EAAWC,EAAYC,EAAK4C,KAAK,IAAK3C,EAAU2C,KAAK,IAAK1C,EACnFiB,EAAcS,eAAgBJ,KAGtChD,EAAA/tB,UAAAsxB,mBAAR,SAA2B1Z,GAEvB,QADI7I,GAAU6I,EAAQpE,OAAO2N,SACtBvJ,EAAQpE,QACXzE,EAASA,IAAW6I,EAAQpE,OAAO2N,SACnCvJ,EAAUA,EAAQpE,OAGtB,OAAOzE,GAGIgf,EAAA2D,YAAf,SAA2BhB,EAA8B/Y,EAAaO,OAC5D2Y,EAAaH,EAAcI,eAC3BsB,EAAa9D,GAAa8B,eAAelY,IAAWP,EAAM,GAC1DyP,EAAesJ,EAAcniB,KAAK2J,GAElCN,EAAU8Y,EAAczf,KAAK0G,EAAM,GAAGC,QAEtCya,EAAY3B,EAAc9L,cAAgBhN,EAAUA,EAAQwP,GAElE,GAAIiL,IAAcvgB,WAA2B,OAAdugB,EAC3B,MAAO,SAASD,EAAU,gBAEpBE,EAAazB,EAAWI,UAAUoB,EAAWna,GAAQ,GACrDqa,GAAkC,IAAhBD,EAMxB,MAAO,SAASF,EAAU,KAHbG,EAAkB,SAAW,KAC3BA,EAAkB,GAAK,UAEK,QAJ7BA,EAAkBD,EAAaD,GAIU,YA1GhDtE,EAAA+D,UAAY,KA8G/B/D,EA/GA,iBAoHA,SAAAC,KAIA,OAHWA,EAAAhuB,UAAAwwB,aAAP,SAAoBC,EAAeC,GAC/BD,EAAOE,KAAK,aAAcrC,GAAaM,UAAU8B,EAAcI,gBAAkBJ,EAAcI,eAAejC,sBAEtHb,mBAKA,SAAAC,KAIA,OAHWA,EAAAjuB,UAAAwwB,aAAP,SAAoBC,EAAeC,GAC/BD,EAAOE,KAAK,eAAgBrC,GAAaQ,gBAEjDb,mBAKA,SAAAC,KAIA,OAHWA,EAAAluB,UAAAwwB,aAAP,SAAoBC,EAAeC,GAC/BD,EAAOE,KAAK,sBAAuBrC,GAAa0B,oBAAoBU,EAAcE,QAASF,EAAc1J,QAAQkL,iBAEzHhE,mBAKA,SAAAC,KAgBA,OAfWA,EAAAnuB,UAAAwwB,aAAP,SAAoBC,EAAeC,WACzB8B,EAAO9B,EAAcI,eACrB2B,EAAeD,EAAKE,UACpBC,EAAgB,IAAIlzB,MAAcgzB,EAAahyB,YAErD,IAAoB,IAAAmyB,EAAAtkB,EAAAmkB,GAAYI,EAAAD,EAAA5wB,QAAA6wB,EAAA3wB,KAAA2wB,EAAAD,EAAA5wB,OAAE,CAA7B,IAAMC,EAAK4wB,EAAA5wB,MACZ0wB,EAAcH,EAAKM,kBAAkB7wB,IAAU,UAAYA,EAAQ,iHAGvEwuB,EAAOE,KAAK,oBAAqBrC,GAAasB,mBAC9B4C,EAAKO,aACLN,EAAahyB,OACbkyB,EAAcR,KAAK,OAG3ChE,mBAKA,SAAAE,KAyBA,OAxBWA,EAAAruB,UAAAwwB,aAAP,SAAoBC,EAAeC,GAQ/B,QAPMM,EAAcN,EAAcM,YAC5BgC,EAAa1E,GAAa8B,eAAeY,EAAc,GAAKN,EAAcQ,SAC1E7B,EAAY,MAAQ2D,EACpBC,EAASvC,EAAcniB,KACzB2kB,EAAa,GAEb/C,EAAe,wBAA0Ba,EAAc,KAClD1wB,EAAI,EAAGA,EAAI0wB,EAAa1wB,IAAK,CAElC6vB,GAAgB,qBAAuB7vB,EAAI,GAAK,WADjC2yB,EAAO3yB,GAC+C,MAKzE,GAFA6vB,GAAgB,kBAEZO,EAAc1f,KAAM,KACdmiB,EAAoBzC,EAAc1f,KAClCoiB,EAAK9E,GAAa8B,eAAe6C,EAAOrjB,QAAQujB,EAAkBjiB,YAExEgiB,EAAa,sBAAsBF,EAAU,iCADjCG,EAAkBhiB,IAAM,GAC4C,UAAUiiB,EAAE,KAAKA,EAAE,oBAGvG3C,EAAOE,KAAK,aAAcrC,GAAa4B,aAAab,EAAWc,EAAc+C,KAErF7E,mBAKA,SAAAD,KAIA,OAHWA,EAAApuB,UAAAwwB,aAAP,SAAoBC,EAAeC,GAC/BD,EAAOE,KAAK,kBAAmBrC,GAAaS,qBAEpDX,mBCpPA,SAAAnB,KAgBA,OAfI3tB,OAAAgC,eAAW2rB,EAAAjtB,UAAA,aAAU,KAArB,WACI,MAAQ,oCAGZitB,EAAAjtB,UAAAqzB,WAAA,SAAWpiB,GACP,MAAO,CAACqiB,GAAepF,mBAG3BjB,EAAAjtB,UAAAuzB,aAAA,SAAatiB,GACT,MAAO,CACHuiB,GAAiBtG,oBACjBsG,GAAiBrG,oBACjBqG,GAAiBpG,gBAG7BH,mBAGA,SAAAC,KAYA,OAXI5tB,OAAAgC,eAAW4rB,EAAAltB,UAAA,aAAU,KAArB,WACI,MAAQ,yCAGZktB,EAAAltB,UAAAqzB,WAAA,SAAWpiB,GACP,MAAO,CAACqiB,GAAe5F,eAG3BR,EAAAltB,UAAAuzB,aAAA,SAAatiB,GACT,MAAO,IAEfic,mBAGA,SAAAC,KAeA,OAdI7tB,OAAAgC,eAAW6rB,EAAAntB,UAAA,aAAU,KAArB,WACI,MAAQ,4CAGZmtB,EAAAntB,UAAAqzB,WAAA,SAAWpiB,GACP,MAAO,CACHqiB,GAAe3F,QACf2F,GAAe1F,WAIvBT,EAAAntB,UAAAuzB,aAAA,SAAatiB,GACT,MAAO,IAEfkc,mBAGA,SAAAC,KA+BA,OA9BI9tB,OAAAgC,eAAW8rB,EAAAptB,UAAA,aAAU,KAArB,WACI,MAAQ,sCAGZotB,EAAAptB,UAAAqzB,WAAA,SAAWpiB,OACDie,EAAS,CACXoE,GAAetF,UACfsF,GAAerF,cAOnB,OAJKhd,EAAK2f,SACN1B,EAAO5sB,KAAKgxB,GAAenF,mBAGxBe,GAGX9B,EAAAptB,UAAAuzB,aAAA,SAAatiB,OACHie,EAAS,CACXsE,GAAiBnG,kBACjBmG,GAAiBlG,iBACjBkG,GAAiBjG,uBAOrB,OAJKtc,EAAK2f,SAAW3f,EAAK+V,QAAQkL,eAC9BhD,EAAO5sB,KAAKkxB,GAAiB/F,mBAG1ByB,GAEf9B,mBAGA,SAAAC,KAYA,OAXI/tB,OAAAgC,eAAW+rB,EAAArtB,UAAA,aAAU,KAArB,WACI,MAAQ,yCAGZqtB,EAAArtB,UAAAqzB,WAAA,SAAWpiB,GACP,MAAO,CAACqiB,GAAezF,mBAG3BR,EAAArtB,UAAAuzB,aAAA,SAAatiB,GACT,MAAO,IAEfoc,mBAGA,SAAAC,KAYA,OAXIhuB,OAAAgC,eAAWgsB,EAAAttB,UAAA,aAAU,KAArB,WACI,MAAQ,yCAGZstB,EAAAttB,UAAAqzB,WAAA,SAAWpiB,GACP,MAAO,CAACqiB,GAAexF,YAG3BR,EAAAttB,UAAAuzB,aAAA,SAAatiB,GACT,MAAO,IAEfqc,mBAGA,SAAAC,KAYA,OAXIjuB,OAAAgC,eAAWisB,EAAAvtB,UAAA,aAAU,KAArB,WACI,MAAQ,8CAGZutB,EAAAvtB,UAAAqzB,WAAA,SAAWpiB,GACP,MAAO,CAACqiB,GAAevF,gBAG3BR,EAAAvtB,UAAAuzB,aAAA,SAAatiB,GACT,OAAOA,EAAK2f,UAAY3f,EAAK+V,QAAQkL,cAAgB,GAAK,CAACsB,GAAiBhG,4BAEpFD,mBAGA,SAAAE,KAYA,OAXInuB,OAAAgC,eAAWmsB,EAAAztB,UAAA,aAAU,KAArB,WACI,MAAO,0CAGXytB,EAAAztB,UAAAqzB,WAAA,SAAWpiB,GACP,MAAO,CAACqiB,GAAejF,aAG3BZ,EAAAztB,UAAAuzB,aAAA,SAAatiB,GACT,MAAO,IAEfwc,mBAGA,SAAAD,KAYA,OAXIluB,OAAAgC,eAAWksB,EAAAxtB,UAAA,aAAU,KAArB,WACI,MAAO,yCAGXwtB,EAAAxtB,UAAAqzB,WAAA,SAAWpiB,GACP,MAAO,CAACqiB,GAAelF,oBAG3BZ,EAAAxtB,UAAAuzB,aAAA,SAAatiB,GACT,MAAO,IAEfuc,mBCjIA,SAAAiG,KAyDA,OAvDkBA,EAAAC,eAAd,SAA6Bld,GACzB,OAAQA,GACJ,KAAKgd,GAAiBvG,gBAClB,OAAO,IAAIA,GACf,KAAKuG,GAAiBtG,oBAClB,OAAO,IAAIA,GACf,KAAKsG,GAAiBrG,oBAClB,OAAO,IAAIA,GACf,KAAKqG,GAAiBpG,cAClB,OAAO,IAAIA,GACf,KAAKoG,GAAiBnG,kBAClB,OAAO,IAAIA,GACf,KAAKmG,GAAiBlG,iBAClB,OAAO,IAAIA,GACf,KAAKkG,GAAiBjG,sBAClB,OAAQ,IAAIA,GAChB,KAAKiG,GAAiBhG,0BAClB,OAAO,IAAIA,GACf,KAAKgG,GAAiB/F,kBAClB,OAAO,IAAIA,GACf,QACI,MAAM,IAAIrf,MAAM,gCAIdqlB,EAAAE,aAAd,SAA2Bnd,GACvB,OAAQA,GACJ,KAAK8c,GAAe5F,aAChB,OAAQ,IAAIA,GAChB,KAAK4F,GAAe3F,QAChB,OAAQ,IAAIA,GAChB,KAAK2F,GAAe1F,SAChB,OAAO,IAAIA,GACf,KAAK0F,GAAezF,iBAChB,OAAO,IAAIA,GACf,KAAKyF,GAAexF,UAChB,OAAO,IAAIA,GACf,KAAKwF,GAAevF,cAChB,OAAO,IAAIA,GACf,KAAKuF,GAAetF,UAChB,OAAO,IAAIA,GACf,KAAKsF,GAAerF,aAChB,OAAO,IAAIA,GACf,KAAKqF,GAAepF,iBAChB,OAAO,IAAIA,GACf,KAAKoF,GAAenF,kBAChB,OAAO,IAAIA,GACf,KAAKmF,GAAelF,kBAChB,OAAO,IAAIA,GACf,KAAKkF,GAAejF,WAChB,OAAO,IAAIA,GACf,QACI,MAAMjgB,MAAM,8BAG5BqlB,KC5FAG,GAAA,WAuBI,SAAAA,EAAY5C,EAAqBa,GAJ1B/xB,KAAA+uB,oBAAqB,EAKxB/uB,KAAK+zB,YAAc,GACnB/zB,KAAKg0B,kBAAoB,GACzBh0B,KAAKi0B,SAAW,EAChBj0B,KAAKk0B,sBAELl0B,KAAKm0B,uBAAyBpC,EAC9B/xB,KAAKo0B,cAAgB,IAAIz0B,MAAcuxB,GACvClxB,KAAKq0B,gBAAkB,IAAI10B,MAAeuxB,GAErClxB,KAAKm0B,uBACNn0B,KAAKo0B,cAAcE,KAAKvC,GAG5B/xB,KAAKizB,aAAe,EA4F5B,OAzFIzzB,OAAAgC,eAAWsyB,EAAA5zB,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAKo0B,+CAGTN,EAAA5zB,UAAAixB,UAAP,SAAiBhvB,EAAYiW,EAAgBmc,GACrCv0B,KAAKq0B,gBAAgBjc,KAAYpG,YAA0B,IAAbuiB,IAC9Cv0B,KAAKq0B,gBAAgBjc,GAA2B,iBAAVjW,GACW,kBAAVA,GACPA,aAAiByM,UAGjD4lB,EAAiB,GACf/B,EAAkBzyB,KAAKq0B,gBAAgBjc,IAAWmc,EAexD,GAbI9B,GACA+B,EAAiBx0B,KAAKy0B,cAActyB,GAEhCnC,KAAK+zB,YAAYS,KAAoBxiB,YACrChS,KAAK+zB,YAAYS,GAAkBx0B,KAAKi0B,WACxCj0B,KAAKk0B,uBAGTl0B,KAAKizB,gBAELjzB,KAAK+uB,oBAAqB,EAG1B/uB,KAAKm0B,sBAAuB,KACtBzkB,EAAQ1P,KAAK00B,aAAavyB,GAC1BwyB,EAAWrS,KAAKC,IAAIviB,KAAKo0B,cAAchc,IAAW,EAAG1I,GAC3D1P,KAAKo0B,cAAchc,GAAUuc,EAGjC,OAAOlC,EAAkBzyB,KAAKgzB,kBAAkBwB,IAAmB,GAGhEV,EAAA5zB,UAAA00B,SAAP,SAAgBzyB,GACZ,OAAOnC,KAAKgzB,kBAAkBhzB,KAAKy0B,cAActyB,KAG9C2xB,EAAA5zB,UAAA8yB,kBAAP,SAAyBwB,GACrB,OAAOx0B,KAAK+zB,YAAYS,IAGrBV,EAAA5zB,UAAA0yB,QAAP,WAMI,OALK5yB,KAAK60B,gBACN70B,KAAK80B,MAAQt1B,OAAOiP,KAAKzO,KAAK+zB,aAC9B/zB,KAAK60B,eAAgB,GAGlB70B,KAAK80B,OAGRhB,EAAA5zB,UAAAw0B,aAAR,SAAqBvyB,GACjB,GAAInC,KAAKg0B,kBAAkB7xB,KAAW6P,UAAW,KAEvC+iB,EADU/0B,KAAKg1B,aACGC,YAAY9yB,GACpCnC,KAAKg0B,kBAAkB7xB,GAAS4yB,EAAQrlB,MAAQokB,EAAwBoB,aAG5E,OAAOl1B,KAAKg0B,kBAAkB7xB,IAG1B2xB,EAAA5zB,UAAA80B,WAAR,WACI,IAAKh1B,KAAKm1B,SAAU,KACVC,EAASlQ,SAASC,cAAc,UACtCnlB,KAAKm1B,SAAWC,EAAOJ,WAAW,MAClCh1B,KAAKm1B,SAASE,KAAOvB,EAAwBwB,aAGjD,OAAOt1B,KAAKm1B,UAGRrB,EAAA5zB,UAAAu0B,cAAR,SAAsBtyB,GAClB,OAAwC,IAApCkiB,GAAgBiC,SAASnkB,GAClB,GAEa2e,OAAO3e,GACRwqB,QAAQ,KAAM,SAChBA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,UACdA,QAAQ,KAAM,WAI/BmH,EAAA5zB,UAAAg0B,oBAAR,WACIl0B,KAAK60B,eAAgB,GA9HVf,EAAAwB,aAAe,eACfxB,EAAAoB,aAAe,EA+HlCpB,EAjIA,iBCSI,SAAAyB,EAAoB/L,EAAqBtC,EAAyC+K,EAC/D/gB,EAAkBmgB,QAAA,IAAAA,IAAAA,GAAA,GADjBrxB,KAAAwpB,MAAAA,EAAqBxpB,KAAAknB,QAAAA,EAAyClnB,KAAAiyB,wBAAAA,EAC/DjyB,KAAAkR,KAAAA,EAAkBlR,KAAAqxB,eAAAA,EACjCrxB,KAAKw1B,iBAkDb,OA/CIh2B,OAAAgC,eAAW+zB,EAAAr1B,UAAA,OAAI,KAAf,WACI,OAAOF,KAAKwpB,uCAGhBhqB,OAAAgC,eAAW+zB,EAAAr1B,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKy1B,8CAGhBj2B,OAAAgC,eAAW+zB,EAAAr1B,UAAA,WAAQ,KAAnB,WACI,OAAOF,KAAK01B,2CAGhBl2B,OAAAgC,eAAW+zB,EAAAr1B,UAAA,UAAO,KAAlB,WACI,OAAQF,KAAKoxB,WAAapxB,KAAKy1B,8CAGnCj2B,OAAAgC,eAAW+zB,EAAAr1B,UAAA,OAAI,KAAf,WACI,OAAOF,KAAK80B,uCAGhBt1B,OAAAgC,eAAW+zB,EAAAr1B,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKgqB,gDAGhBxqB,OAAAgC,eAAW+zB,EAAAr1B,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAK21B,iDAGRJ,EAAAr1B,UAAAs1B,eAAR,WACI,GAAKx1B,KAAKwpB,OAA+B,IAAtBxpB,KAAKwpB,MAAM7oB,OAA9B,KAIMi1B,EAAa51B,KAAKwpB,MAAM5S,IAAI,SAAC2M,GAAS,OAAAA,EAAKzL,UAEjD9X,KAAK80B,MAAQzQ,GAAgBC,gBAAgBsR,GACnB,IAAtB51B,KAAK80B,MAAMn0B,SAIfX,KAAKgqB,eAAiB3F,GAAgBS,cAAc8Q,GAEpD51B,KAAKy1B,aAAez1B,KAAK80B,MAAMn0B,OAC/BX,KAAK01B,UAAY11B,KAAKwpB,MAAM7oB,OAAS,EAErCX,KAAK21B,gBAAkB,IAAI7B,GAAwB9zB,KAAKy1B,aAAcz1B,KAAKknB,QAAQ6K,gBAE3FwD,KC5BAM,GAAA,SAAAhK,GAAA,SAAAgK,IAAA,IAAArkB,EAAA,OAAAqa,GAAAA,EAAAhrB,MAAAb,KAAAU,YAAAV,YAgBWwR,EAAAqb,cAAgB,IAAI9F,EAAAA,eA8C/B,OA7D6CvS,EAAAA,EAAAA,GAiB1BqhB,EAAAC,eAAf,SAA8BnF,EAAsBoF,EAAYnF,mBAC5D,IAA0B,IAAAliB,EAAAF,EAAAmiB,EAAO8C,aAAa7C,IAAcoF,EAAAtnB,EAAAxM,QAAA8zB,EAAA5zB,KAAA4zB,EAAAtnB,EAAAxM,OAAE,CAAzD,IAAM+zB,EAAWD,EAAA7zB,MACZ+zB,EAAgBvC,GAAqBC,eAAeqC,GACpDE,EAAYJ,EAAIpF,OAAOuF,EAAcE,YAC3CP,EAAwBC,eAAeI,EAAeC,EAAWvF,4GAGrE,IAAwB,IAAAyF,EAAA7nB,EAAAmiB,EAAO4C,WAAW3C,IAAc0F,EAAAD,EAAAn0B,QAAAo0B,EAAAl0B,KAAAk0B,EAAAD,EAAAn0B,OAAE,CAArD,IAAMq0B,EAASD,EAAAn0B,MACKwxB,GAAqBE,aAAa0C,GAC1C7F,aAAaqF,EAAKnF,0GAI7BiF,EAAA31B,UAAAyoB,yBAAV,SAAmCxX,EAAa+V,GAAhD,IAAA1V,EAAAxR,KACI,GAAIA,KAAK2mB,YAAa,KACd6P,EAAW,EAIf,GAHArlB,EAAKjB,QAAQ,SAAC9O,GACVo1B,EAAWlU,KAAKC,IAAIiU,EAAUp1B,EAAE4nB,gBAAgBvV,SAErC,EAAX+iB,EACA,MAAMloB,MAAM,oDAIdsiB,EAAgB,IAAI2E,GAAcpkB,EAAM+V,EAASlnB,KAAK4mB,yBAA0B5mB,KAAK6mB,MAAO7mB,KAAK2mB,aACvG3mB,KAAKy2B,MAAQ,IAAIC,MAEXC,EAAahD,GAAqBC,eAAeF,GAAiBvG,iBACxE0I,EAAwBC,eAAea,EAAY32B,KAAKy2B,MAAO7F,GAE/D5wB,KAAKy2B,MAAMG,cAAcf,EAAwBgB,aAAaC,KAAK,SAAC7nB,GAChEuC,EAAKwb,SAAS/d,EAAQiY,EAAQjC,UAE9BzT,EAAKqb,cAAc5T,KAAK,CAAE8d,KAAMvlB,EAAKilB,WAIrCZ,EAAA31B,UAAA8sB,SAAR,SAAiB7b,EAAc8T,OACrBD,EAAO,IAAIkI,KAAK,CAAC7I,GAAgB2B,oBAAoBgR,KAAK7lB,KAAS,CACrEuF,KAAM,KAGV2N,GAAgBU,eAAeC,EAAMC,IAzD1B4Q,EAAAgB,YAAc,CAAEI,YAAa,UAAWvgB,KAAM,8BAHhEsI,EAAAA,oDAeIsK,EAAAA,UA+CLuM,EA9DA,CAC6CpP,mBCPzC,SAAAyQ,EAAYjS,GAAZ,IAAAzT,EACIqa,EAAAjrB,KAAAZ,KAAMilB,EAAU,UAAQjlB,YAbrBwR,EAAA0gB,eAAgB,EAUhB1gB,EAAA4gB,eAAgB,IA2D3B,OAlF6C5d,EAAAA,EAAAA,GAoCzChV,OAAAgC,eAAW01B,EAAAh3B,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKm3B,kBAWhB,SAAuBh1B,GACnB,GAAIA,EAAQ,EACR,MAAMmM,MAAM,mCAGhBtO,KAAKm3B,aAAeh1B,mCAUxB3C,OAAAgC,eAAW01B,EAAAh3B,UAAA,YAAS,KAApB,WACI,OAAOF,KAAKo3B,gBAWhB,SAAqBj1B,GACjB,GAAIA,EAAQ,EACR,MAAMmM,MAAM,iCAGhBtO,KAAKo3B,WAAaj1B,mCAE1B+0B,GAlF6C5L,QCIzC+L,MAAA,EACAC,QAAA,GACAC,MAAA,0EAIAC,KAAA,EACAC,QAAA,GACAC,OAAA,kEAGJ,IAAAC,GACI,SAAAA,GAAmB5T,EAAkB6T,GAAlB53B,KAAA+jB,EAAAA,EAAkB/jB,KAAA43B,EAAAA,GA4EzC,SAAgBC,GAAcC,OACtBC,EAAyB,CACzBC,OAAQ,EACRpsB,OAAQ,EACRqsB,KAAM,EACNC,MAAO,EACPC,IAAK,EACLzoB,MAAO,GAGX,GAAIooB,EAAS92B,kBAAkBo3B,YAC3BL,EAAcD,EAAe,OAAiBnoB,6BAC3C,GAAImoB,EAAS92B,kBAAkB22B,GAAO,KACnCU,EAAcP,EAAe,OACnCC,EAAa,CACTC,OAAQK,EAAYT,EACpBhsB,OAAQ,EACRqsB,KAAMI,EAAYtU,EAClBmU,MAAOG,EAAYtU,EACnBoU,IAAKE,EAAYT,EACjBloB,MAAO,GAIf,OAAOqoB,EAmBX,SAAgBO,GAAgBpT,OACtBxV,EAAQwV,EAASqT,gBAAgBC,YACjC5sB,EAASsZ,EAASqT,gBAAgBE,aAClCC,EAaV,SAAgBC,QACNJ,EAAkBrT,SAASqT,gBAC3BK,EAAeL,EAAgB5oB,wBAE/BkpB,GAA4BD,EAAaX,MAAQ/S,SAASS,KAAKmT,YAAc1T,OAAO2T,SAAWR,EAAgBO,YAAc,EAC7HE,GAA0BJ,EAAaT,KAAOjT,SAASS,KAAKsT,WAAa7T,OAAO8T,SAAWX,EAAgBU,WAAa,EAE9H,OAAO,IAAItB,GAAMkB,EAA0BG,GApBpBL,GAEvB,MAAO,CACHR,IAAKO,EAAed,EACpBK,KAAMS,EAAe3U,EACrBmU,MAAOQ,EAAe3U,EAAIrU,EAC1BsoB,OAAQU,EAAed,EAAIhsB,EAC3B8D,MAAOA,EACP9D,OAAQA,GAgBhB,SAAgButB,GAAcC,OACpBC,EAAY75B,OAAOa,OAAOb,OAAOW,OAAOX,OAAO85B,eAAeF,IAAUA,GAE9E,OADAC,EAAUvB,SAAW7pB,GAAWorB,EAAUvB,UACnCuB,EClKX,kBAcI,SAAAE,EAAYzB,GAbJ93B,KAAAw5B,iBAAqC,CACzCC,oBAAqBC,GAAoBpC,OACzCqC,kBAAmBC,GAAkBnC,OACrCoC,qBAAsBH,GAAoBpC,OAC1CwC,mBAAoBF,GAAkBnC,OACtCsC,cAAe96B,EACf+6B,eAAgB56B,EAChB66B,QAAS,CAAEvqB,MAAO,EAAG9D,OAAQ,IAO7B5L,KAAK83B,SAAWt4B,OAAOa,OAAO,GAAIL,KAAKw5B,iBAAkB1B,GAuCjE,OApCIyB,EAAAr5B,UAAAg6B,SAAA,SAASC,EAA6BC,EAAalV,EAAqBmV,GAGpE,OAFAF,EAAeG,UAAUnuB,IAAI,kCAC7BguB,EAAeI,cAAcD,UAAUnuB,IAAI,8BACnCnM,KAAK83B,SAAS2B,qBAClB,KAAKC,GAAoBrC,KACrB8C,EAAeI,cAAch8B,MAAMi8B,eAAiB,aACpD,MACJ,KAAKd,GAAoBpC,OACrB6C,EAAeI,cAAch8B,MAAMi8B,eAAiB,SACpD,MACJ,KAAKd,GAAoBnC,MACrB4C,EAAeI,cAAch8B,MAAMi8B,eAAiB,WAM5D,OAAQx6B,KAAK83B,SAAS6B,mBAClB,KAAKC,GAAkBpC,IACnB2C,EAAeI,cAAch8B,MAAMk8B,WAAa,aAChD,MACJ,KAAKb,GAAkBnC,OACnB0C,EAAeI,cAAch8B,MAAMk8B,WAAa,SAChD,MACJ,KAAKb,GAAkBlC,OACnByC,EAAeI,cAAch8B,MAAMk8B,WAAa,aAQ5DlB,EAAAr5B,UAAAw6B,MAAA,WACI,OAAOvB,GAAcn5B,OAE7Bu5B,QC1DI,SAAAoB,GAAYC,oBCGZ,SAAAC,EAAYD,UACR/O,EAAAjrB,KAAAZ,KAAM46B,IAAgB56B,KAU9B,OAZwCwU,EAAAA,EAAAA,GAK7BqmB,EAAA36B,UAAA46B,WAAP,SAAkB5V,EAAoB6V,EAAmC3uB,KAGzEyuB,EAAA36B,UAAA86B,OAAA,aAGAH,EAAA36B,UAAA+6B,OAAA,aACJJ,GAZwCF,ICDxC,SAAgBO,GAAgBC,OACxBC,GAAiB,EAErB,OAAO,SAAUp6B,EAAaC,EAAao6B,GACvC,GAAIA,GAAcA,EAAWl5B,MAAO,KAC1Bm5B,EAAiBD,EAAWl5B,MASlC,OAPAk5B,EAAWl5B,MAAQ,eACTo5B,EAA+B,mBAAXv6B,EAAwBA,EAAO4U,KAAO5U,EAAOf,YAAY2V,KAGnF,OAFAwlB,EAAiBI,GAAeD,EAAU,IAAIt6B,EAAG,KAAKk6B,EAAWC,GAE1DE,EAAe16B,KAAKZ,KAAMU,YAG9B26B,IAQnB,SAAgBI,GAAkBN,GAC9B,OAAO,SAASn6B,EAAaC,OAOjBy6B,EAAQC,EANZP,GAAiB,EACfQ,EAAsB56B,EAAOf,YAAY2V,KAAI,IAAI3U,EAAG,KAAKk6B,EAGzDU,EAAqBr8B,OAAO6B,yBAAyBL,EAAQC,GACnE,GAAI46B,EAmBA,OAjBAH,EAASG,EAAmBtvB,IAC5BovB,EAASE,EAAmBlb,IAExB+a,IACAG,EAAmBtvB,IAAM,WAErB,OADA6uB,EAAiBI,GAAYI,EAAkBR,GACxCM,EAAO96B,KAAKZ,QAIvB27B,IACAE,EAAmBlb,IAAM,SAAUxe,GAC/Bi5B,EAAiBI,GAAYI,EAAkBR,GAC/CO,EAAO/6B,KAAKZ,KAAMmC,KAInB05B,MAKLC,EAmBd,SAASC,EAAkB/6B,EAAaC,OAChC66B,EAAS,IAAM76B,EACnB,KAAOD,EAAOnB,eAAei8B,IACzBA,EAAS,IAAMA,EAGnB,OAAOA,EAzBYC,CAAkB/6B,EAAQC,GACzCzB,OAAOgC,eAAeR,EAAQC,EAAK,CAC/B+6B,cAAc,EACdC,YAAY,EACZtb,IAAK,SAASxe,GACVi5B,EAAiBI,GAAYI,EAAkBR,GAC/Cp7B,KAAK87B,GAAU35B,GAEnBoK,IAAK,WAED,OADA6uB,EAAiBI,GAAYI,EAAkBR,GACxCp7B,KAAK87B,OAqB5B,SAAgBN,GAAYL,EAAiBC,GAKzC,OAJKA,GAAkBc,EAAAA,aACnBC,QAAQC,KAAKjB,IAGV,MC7DPkB,IAAe,EAMnBC,GAAA,WAiEI,SAAAA,EACYC,EACAC,EACAC,EACAC,EACkBxX,EAClByX,GANZ,IAAAnrB,EAAAxR,KACYA,KAAAu8B,iBAAAA,EACAv8B,KAAAw8B,QAAAA,EACAx8B,KAAAy8B,UAAAA,EACAz8B,KAAA08B,QAAAA,EACkB18B,KAAAklB,SAAAA,EAClBllB,KAAA28B,MAAAA,EArEJ38B,KAAA48B,aAAe,EACf58B,KAAA68B,cAA+B,GAG/B78B,KAAA88B,SAAW,IAAIC,EAAAA,QAEf/8B,KAAAw5B,iBAAoC,CACxCwD,iBAAkB,IAAIzD,GACtB0D,eAAgB,IAAIpC,GACpBqC,OAAO,EACPC,qBAAqB,GAWlBn9B,KAAAo9B,UAAY,IAAIrW,EAAAA,aAUhB/mB,KAAAq9B,SAAW,IAAItW,EAAAA,aAUf/mB,KAAAs9B,UAAY,IAAIvW,EAAAA,aAUhB/mB,KAAAu9B,SAAW,IAAIxW,EAAAA,aAUf/mB,KAAAw9B,YAAc,IAAIzW,EAAAA,aA2fjB/mB,KAAAy9B,gBAAkB,SAACC,GAOvB,IAAK,IAAIl9B,EAAIgR,EAAKqrB,cAAcl8B,OAAQH,KAAM,KACpCm9B,EAAOnsB,EAAKqrB,cAAcr8B,GAChC,GAAIm9B,EAAK7F,SAASoF,MACd,OAEJ,GAAIS,EAAK7F,SAASqF,oBAAqB,CAEnC,GAAKQ,EAAKC,WAAWC,cAAcC,SAASJ,EAAG18B,QAkB3C,WAhBM+8B,EAAiBJ,EAAK7F,SAASkF,iBAAiBlF,SAAe,OACjEkG,GAAwB,EAC5B,GAAID,EAAgB,KACVE,EAAqBF,EAAepuB,wBAC1CquB,EAAwBN,EAAGQ,SAAWD,EAAmBhG,MAAQyF,EAAGQ,SAAWD,EAAmB/F,OAC1EwF,EAAGS,SAAWF,EAAmB9F,KAAOuF,EAAGS,SAAWF,EAAmBjG,OAG/F2F,EAAK7F,SAASsG,uBAAyBJ,GAEnCL,EAAKU,sBAAwBV,EAAKU,qBAAqBC,cACzD9sB,EAAK+sB,MAAMZ,EAAKvxB,GAAIsxB,MAgErC19B,KAAAw+B,cAAgB,WACnB,IAAK,IAAIh+B,EAAIgR,EAAKqrB,cAAcl8B,OAAQH,KACpCgR,EAAKitB,WAAWjtB,EAAKqrB,cAAcr8B,GAAG4L,KA/kB1CpM,KAAK0+B,UAAsB1+B,KAAa,gBAkB5Cs8B,EAAAp8B,UAAA86B,OAAA,SAAO2D,EAAmC7G,EAA4B8G,OAC9DjB,EAIJ,OAHAA,EAAO39B,KAAK6+B,eAAeF,EAAWC,KAOtCjB,EAAKvxB,IAAMpM,KAAK48B,gBAAgB1tB,WAChC4oB,EAAWt4B,OAAOa,OAAO,GAAIL,KAAKw5B,iBAAkB1B,GACpD6F,EAAK7F,SAAWA,EAChB93B,KAAK68B,cAAcr6B,KAAKm7B,GACjBA,EAAKvxB,IAPD,MA4BfkwB,EAAAp8B,UAAA4+B,KAAA,SAAKC,EAA2CjH,OACxC6F,EACAvxB,EACJ,GAAwB,iBAAb2yB,GAGP,GAFA3yB,EAAK2yB,IACLpB,EAAO39B,KAAKg/B,eAAeD,IAGvB,OADA5C,QAAQC,KAAK,6CAA+C2C,GACrD,SAER,CASH,GARA1C,GAAeb,GACX,4IAEAa,IACJjwB,GAAMpM,KAAK48B,gBAAgB1tB,aAC3ByuB,EAAO39B,KAAK6+B,eAAeE,IAIvB,OAGJpB,EAAKvxB,GAAKA,EAOd,OAJA0rB,EAAWt4B,OAAOa,OAAO,GAAIL,KAAKw5B,iBAAkBmE,EAAK7F,SAAUA,GACnE6F,EAAK7F,SAAWA,EAEhB93B,KAAKi/B,MAAMtB,GACJvxB,GASXkwB,EAAAp8B,UAAAg/B,KAAA,SAAK9yB,GACDpM,KAAKu+B,MAAMnyB,IASfkwB,EAAAp8B,UAAAi/B,QAAA,WAEI,IAAK,IAAI3+B,EAAIR,KAAK68B,cAAcl8B,OAAQH,KACpCR,KAAKk/B,KAAKl/B,KAAK68B,cAAcr8B,GAAG4L,KAUxCkwB,EAAAp8B,UAAAu+B,WAAA,SAAWryB,OACDgzB,EAAcp/B,KAAKg/B,eAAe5yB,GACxC,GAAKgzB,GAAgBA,EAAYtH,SAAjC,KAKMqC,EAAiBiF,EAAYxB,WAAWC,cAActD,cACtD8E,EAAqBlF,EAAexqB,wBAC1CyvB,EAAYtH,SAASkF,iBAAiB9C,SAClCC,EACA,CACIzqB,MAAO2vB,EAAmB3vB,MAC1B9D,OAAQyzB,EAAmBzzB,QAE/B5L,KAAK0+B,WACL,QAbAvC,QAAQ15B,MAAM,uDAAyD2J,IAgBvEkwB,EAAAp8B,UAAA++B,MAAR,SAActB,OACJ2B,EAAwC,CAAElzB,GAAIuxB,EAAKvxB,GAAImzB,aAAc5B,EAAK4B,aAAc3mB,QAAQ,GAEtG,GADA5Y,KAAKo9B,UAAUnkB,KAAKqmB,GAChBA,EAAU1mB,OACN+kB,EAAK4B,eACLv/B,KAAKw8B,QAAQgD,WAAW7B,EAAK4B,aAAaE,UAC1C9B,EAAK4B,aAAaG,eAH1B,CAYA,IAAK/B,EAAKU,sBAAyBV,EAAKU,uBAAyBV,EAAKU,qBAAqBC,aAAe,KAChGqB,EAAchC,EAAKC,WAAWC,cAAcluB,wBAClDguB,EAAKiC,YAAc,CAAElwB,MAAOiwB,EAAYjwB,MAAO9D,OAAQ+zB,EAAY/zB,QACnE+xB,EAAKkC,KAAO7/B,KAAK8/B,iBAAiBnC,EAAKC,WAAWC,eAElD79B,KAAK+/B,qBAAqBpC,GACtBA,EAAK4B,cACL5B,EAAK4B,aAAaS,kBAAkBC,gBAExCjgC,KAAKkgC,WAAWvC,IAC0B,IAAtC39B,KAAK68B,cAAc/sB,QAAQ6tB,IAC3B39B,KAAK68B,cAAcr6B,KAAKm7B,GAG5BA,EAAK7F,SAASkF,iBAAiB9C,SAC3ByD,EAAKC,WAAWC,cAActD,cAC9B,CAAE7qB,MAAOiuB,EAAKiC,YAAYlwB,MAAO9D,OAAQ+xB,EAAKiC,YAAYh0B,QAC1DsZ,UACA,GACJyY,EAAK7F,SAASmF,eAAenC,WAAW96B,KAAK0+B,UAAW1+B,KAAM29B,EAAKvxB,IACnEuxB,EAAK7F,SAASmF,eAAejC,SAGjCh7B,KAAKmgC,wBAAwBxC,GAC7B39B,KAAKogC,iBAAiBzC,EAAKvxB,IAEvBuxB,EAAK7F,SAASoF,OACdl9B,KAAKqgC,kBAAkB1C,GAGvBA,EAAK7F,SAASkF,iBAAiBlF,SAASiC,cACxC/5B,KAAKsgC,kBAAkB3C,IAGvBA,EAAKC,WAAWC,cAActD,cAAch8B,MAAMgiC,WAAa,GAC/DvgC,KAAKq9B,SAASpkB,KAAK,CAAE7M,GAAIuxB,EAAKvxB,GAAImzB,aAAc5B,EAAK4B,kBAIrDjD,EAAAp8B,UAAAq+B,MAAR,SAAcnyB,EAAYo0B,OAChB7C,EAAoB39B,KAAKg/B,eAAe5yB,GAE9C,GAAKuxB,EAAL,KAKM2B,EAAY,CAAElzB,GAAEA,EAAEmzB,aAAc5B,EAAK4B,aAAc3mB,QAAQ,EAAO4nB,MAAKA,GAE7E,GADAxgC,KAAKs9B,UAAUrkB,KAAKqmB,IAChBA,EAAU1mB,OAAd,CAKA+kB,EAAK7F,SAASmF,eAAehC,SAC7Bj7B,KAAKygC,2BAA2B9C,GAChC39B,KAAK0gC,oBAAoB/C,EAAKvxB,QAExBu0B,EAAqBhD,EAAKC,WAAWC,cAC3C,GAAIF,EAAK7F,SAASoF,MAAO,KACfvZ,EAASgd,EAAMC,WAAqB,WAC1C5gC,KAAK6gC,qBAAqBld,EAAQga,EAAK7F,SAASkF,iBAAiBlF,SAASkC,gBAC1ErW,EAAO2W,UAAUhuB,OAAO,+BACxBqX,EAAO2W,UAAUnuB,IAAI,wBAGrBwxB,EAAK7F,SAASkF,iBAAiBlF,SAASkC,eACxCh6B,KAAK8gC,mBAAmBnD,GAExB39B,KAAK+gC,YAAYpD,SA1BjBxB,QAAQC,KAAK,6CAA+ChwB,IA8B5DkwB,EAAAp8B,UAAA2+B,eAAR,SAAuBF,EAAgBC,OAC7BjB,EAAoB,CAAEqD,OAAQhhC,KAAK28B,OACzC,GAAIgC,aAAqBsC,EAAAA,WACrBtD,EAAKC,WAAU,MACZ,KACCsD,OAAc,EACZC,EAAkBvC,EAAYA,EAAUwC,yBAA2BphC,KAAKu8B,iBAC9E,IACI2E,EAAiBC,EAAgBE,wBAAwB1C,GAC3D,MAAOl8B,GAEL,OADA05B,QAAQ15B,MAAMA,GACP,SAGL6+B,EAAW1C,EAAYA,EAAU0C,SAAWthC,KAAKy8B,UACjD8E,EAAqCL,EAAe/gC,OAAOmhC,GACjEthC,KAAKw8B,QAAQgF,WAAWD,EAAiB9B,cAGnCgC,EAAUF,EAAiBG,SAAS7D,cAC1CF,EAAKC,WAAU,CAAiBC,cAAe4D,GAC/C9D,EAAK4B,aAAegC,EAGxB,OAAO5D,GAGHrB,EAAAp8B,UAAA4/B,iBAAR,SAAyB2B,GACrB,IAAKA,EAAQlH,cACT,OAAO,SAGLsF,EAAO7/B,KAAK0+B,UAAUvZ,cAAc,OAE1C,OADAsc,EAAQlH,cAAcoH,aAAa9B,EAAM4B,GAClC5B,GAGHvD,EAAAp8B,UAAA6/B,qBAAR,SAA6BpC,OACnBiE,EAAiB5hC,KAAK6hC,oBACtB1H,EAAiBn6B,KAAK8hC,kBAAkBF,EAAgBjE,EAAK7F,SAASoF,OAC5El9B,KAAK+hC,kBAAkBpE,GAAM/X,YAAYgc,OACnCI,EAAmBrE,EAAKC,WAAWC,cAAc5E,UACvDkB,EAAevU,YAAY+X,EAAKC,WAAWC,eAEvCmE,IACArE,EAAKC,WAAWC,cAAc5E,UAAY+I,IAI1C1F,EAAAp8B,UAAA2hC,kBAAR,eACUI,EAAuBjiC,KAAK0+B,UAAUvZ,cAAc,OAE1D,OADA8c,EAAQ3H,UAAUnuB,IAAI,wBACf81B,GAGH3F,EAAAp8B,UAAA4hC,kBAAR,SAA0BF,EAA6B1E,OAC7CgF,EAAuBliC,KAAK0+B,UAAUvZ,cAAc,OAkB1D,OAjBI+X,GACAgF,EAAQ5H,UAAUnuB,IAAI,+BACtB+1B,EAAQC,iBAAiB,QAAS,SAACzE,GAC/BA,EAAG0E,qBAGPF,EAAQ5H,UAAUnuB,IAAI,wBAG1B+1B,EAAQC,iBAAiB,SAAU,SAACzE,GAChCA,EAAG0E,oBAIPF,EAAQ3jC,MAAMgiC,WAAa,SAE3BqB,EAAehc,YAAYsc,GACpBA,GAGH5F,EAAAp8B,UAAA6hC,kBAAR,SAA0BpE,GACtB,OAAIA,EAAK7F,SAASuK,OACP1E,EAAK7F,SAASuK,OAAOxE,eAE3B79B,KAAKsiC,kBACNtiC,KAAKsiC,gBAAkBtiC,KAAK0+B,UAAUvZ,cAAc,OACpDnlB,KAAKsiC,gBAAgBhI,UAAUnuB,IAAI,eACnCnM,KAAK0+B,UAAU/Y,KAAKC,YAAY5lB,KAAKsiC,kBAGlCtiC,KAAKsiC,kBAGRhG,EAAAp8B,UAAAggC,WAAR,SAAmBvC,GACXA,EAAK4B,eAGL5B,EAAKiC,YAAcjC,EAAKC,WAAWC,cAAcluB,yBAItB,IAA3BguB,EAAKiC,YAAYlwB,QACjBiuB,EAAKC,WAAWC,cAActD,cAAch8B,MAAMmR,MAAQiuB,EAAKiC,YAAYlwB,MAAQ,OAInF4sB,EAAAp8B,UAAAmgC,kBAAR,SAA0B1C,GAA1B,IAAAnsB,EAAAxR,KACU4hC,EAAiBjE,EAAKC,WAAWC,cAActD,cAAcA,cACnEgI,EAAAA,UAAUX,EAAgB,WAAWY,KACjC/rB,EAAAA,OAAO,SAACinB,GAAsB,MAAW,WAAXA,EAAGz8B,KAA+B,QAAXy8B,EAAGz8B,MACxDwhC,EAAAA,UAAUziC,KAAK88B,WACjB4F,UAAU,WAAM,OAAAlxB,EAAK0tB,KAAKvB,EAAKvxB,MACjCw1B,EAAetH,UAAUhuB,OAAO,wBAChCtM,KAAK6gC,qBAAqBe,EAAgBjE,EAAK7F,SAASkF,iBAAiBlF,SAASiC,eAClF6H,EAAetH,UAAUnuB,IAAI,gCAGzBmwB,EAAAp8B,UAAA6gC,YAAR,SAAoBpD,GAChB39B,KAAK2iC,QAAQhF,GACb39B,KAAKu9B,SAAStkB,KAAK,CAAE7M,GAAIuxB,EAAKvxB,GAAImzB,aAAc5B,EAAK4B,gBAGjDjD,EAAAp8B,UAAAyiC,QAAR,SAAgBhF,OACNgD,EAAqBhD,EAAKC,WAAWC,cACrCwE,EAASriC,KAAK+hC,kBAAkBpE,GACtC,GAAK0E,EAAOvE,SAAS6C,GAArB,CAKA0B,EAAOvc,YAAY6a,EAAMC,WAAWA,YAChCjD,EAAK4B,eACLv/B,KAAKw8B,QAAQgD,WAAW7B,EAAK4B,aAAaE,UAC1C9B,EAAK4B,aAAaG,WAGlB/B,EAAKkC,OACLlC,EAAKkC,KAAKtF,cAAcoH,aAAahE,EAAKC,WAAWC,cAAeF,EAAKkC,MACzElC,EAAKkC,KAAKtF,cAAczU,YAAY6X,EAAKkC,WAGvCrtB,EAAQxS,KAAK68B,cAAc/sB,QAAQ6tB,GACzC39B,KAAK68B,cAAc9lB,OAAOvE,EAAO,GAGC,IAA9BxS,KAAK68B,cAAcl8B,QAAgBX,KAAKsiC,iBAAmBtiC,KAAKsiC,gBAAgB/H,gBAChFv6B,KAAKsiC,gBAAgB/H,cAAczU,YAAY9lB,KAAKsiC,iBACpDtiC,KAAKsiC,gBAAkB,WArBvBnG,QAAQC,KAAK,qBAAuBuB,EAAKvxB,GAAK,yBAyB9CkwB,EAAAp8B,UAAAogC,kBAAR,SAA0B3C,GAA1B,IAAAnsB,EAAAxR,KACI,IAAK29B,EAAKiF,oBAAqB,KACrBC,EAAmB7iC,KAAK08B,QAAQoG,MAAMnF,EAAK7F,SAASkF,iBAAiBlF,SAASiC,eACpF4D,EAAKiF,oBAAsBC,EAAiB1iC,OAAOw9B,EAAKC,WAAWC,mBAM7DkF,EAAsBpF,EAAwB,oBAAEqF,UACtDrF,EAAKsF,yBAA2BF,EAAcG,OAAOC,QAAQJ,EAAcG,OAAOC,QAAQxiC,OAAS,GACnGg9B,EAAKiF,oBAAoBQ,OAAO,WAC5B5xB,EAAK6rB,SAASpkB,KAAK,CAAE7M,GAAIuxB,EAAKvxB,GAAImzB,aAAc5B,EAAK4B,eACjD5B,EAAKiF,sBACLjF,EAAKiF,oBAAoBS,QACzB1F,EAAKiF,oBAAsB,MAG3BjF,EAAKU,sBAAwBV,EAAKU,qBAAqBC,cACvDX,EAAKU,qBAAqBgF,UAMtC,IAAI1F,EAAKiF,oBAAoBtE,aAA7B,CAMA,GAAIX,EAAKU,sBAAwBV,EAAKU,qBAAqBC,aAAc,KAK/DpE,EAAW,EAAIyD,EAAK2F,0BAA0BC,cACpD5F,EAAKU,qBAAqBgF,QAC1B1F,EAAKU,qBAAuB,KAC5BV,EAAKiF,oBAAoBY,OACzB7F,EAAKiF,oBAAoBa,YAAYvJ,GAGzCl6B,KAAKw9B,YAAYvkB,KAAK,CAAE7M,GAAIuxB,EAAKvxB,GAAIs3B,gBAAiB/F,EAAKiF,oBAAqBe,cAAe,SAG/FhG,EAAKC,WAAWC,cAActD,cAAch8B,MAAMgiC,WAAa,GAC/D5C,EAAKiF,oBAAoBgB,SAGrBtH,EAAAp8B,UAAA4gC,mBAAR,SAA2BnD,GAA3B,IAAAnsB,EAAAxR,KACI,IAAK29B,EAAKU,qBAAsB,KACtBwE,EAAmB7iC,KAAK08B,QAAQoG,MAAMnF,EAAK7F,SAASkF,iBAAiBlF,SAASkC,gBACpF2D,EAAKU,qBAAuBwE,EAAiB1iC,OAAOw9B,EAAKC,WAAWC,mBAM9DkF,EAAsBpF,EAAyB,qBAAEqF,UACvDrF,EAAK2F,0BAA4BP,EAAcG,OAAOC,QAAQJ,EAAcG,OAAOC,QAAQxiC,OAAS,GAEpGg9B,EAAKU,qBAAqB+E,OAAO,WACzBzF,EAAKU,uBACLV,EAAKU,qBAAqBgF,QAC1B1F,EAAKU,qBAAuB,MAG5BV,EAAKiF,qBAAuBjF,EAAKiF,oBAAoBtE,cACrDX,EAAKiF,oBAAoBS,QAE7B7xB,EAAKuvB,YAAYpD,KAKzB,IAAIA,EAAKU,qBAAqBC,aAA9B,CAMA,GAAIX,EAAKiF,qBAAuBjF,EAAKiF,oBAAoBtE,aAAc,KAK7DpE,EAAW,EAAIyD,EAAKsF,yBAAyBM,cACnD5F,EAAKiF,oBAAoBS,QACzB1F,EAAKiF,oBAAsB,KAC3BjF,EAAKU,qBAAqBmF,OAC1B7F,EAAKU,qBAAqBoF,YAAYvJ,GAG1Cl6B,KAAKw9B,YAAYvkB,KAAK,CAAE7M,GAAIuxB,EAAKvxB,GAAIs3B,gBAAiB/F,EAAKU,qBAAsBsF,cAAe,UAChGhG,EAAKU,qBAAqBuF,SAItBtH,EAAAp8B,UAAA2gC,qBAAR,SAA6Be,EAA6BiC,GACtD,GAAKA,GAOL,GAHyB,KAArBA,EAAiBntB,OACjBmtB,EAAmB,EAAkD3kC,WAEpE2kC,EAAiB3c,SAAY2c,EAAiB3c,QAAQ/nB,OAA3D,KAGMA,EAAS0kC,EAAiB3c,QAAc,OAC1C/nB,EAAOP,WACPgjC,EAAerjC,MAAMulC,mBAAqB3kC,EAAOP,UAEjDO,EAAON,SACP+iC,EAAerjC,MAAMwlC,yBAA2B5kC,EAAON,cAdvD+iC,EAAerjC,MAAMulC,mBAAqB,OAmB3CxH,EAAAp8B,UAAA8+B,eAAP,SAAsB5yB,GAClB,OAAKA,EAIQpM,KAAK68B,cAAc7nB,KAAK,SAAA1S,GAAK,OAAAA,EAAE8J,KAAOA,IAHxC,MA6CPkwB,EAAAp8B,UAAAigC,wBAAR,SAAgCxC,GAAhC,IAAAnsB,EAAAxR,KACQ29B,EAAK7F,SAASqF,sBACVQ,EAAK7F,SAASoF,MACdqF,EAAAA,UAAU5E,EAAKC,WAAWC,cAActD,cAAcA,cAAe,SAChEiI,KAAKC,EAAAA,UAAUziC,KAAK88B,WACpB4F,UAAU,WAAM,OAAAlxB,EAAK0tB,KAAKvB,EAAKvxB,MAGpCpM,KAAK68B,cAAcpmB,OAAO,SAAAsN,GAAK,OAAAA,EAAE+T,SAASqF,sBAAwBpZ,EAAE+T,SAASoF,QAAOv8B,OACpFX,KAAK68B,cAAcpmB,OAAO,SAAAsN,GAAK,OAAAA,EAAE+T,SAASqF,sBAAwBpZ,EAAE+T,SAASoF,OACzEnZ,EAAEsa,sBACFta,EAAEsa,qBAAqBC,eAAc39B,QAAW,GACpDX,KAAK0+B,UAAUyD,iBAAiB,QAASniC,KAAKy9B,iBAAiB,KAKnEnB,EAAAp8B,UAAAugC,2BAAR,SAAmC9C,GAC/B,IAA4B,IAAxBA,EAAK7F,SAASoF,MAAiB,KAC3B8G,GAAiC,EACrChkC,KAAK68B,cAAc3sB,QAAQ,SAAApO,IACE,IAArBA,EAAEg2B,SAASoF,OAAmBp7B,EAAEsK,KAAOuxB,EAAKvxB,KAC5C43B,GAAiC,KAIrCA,GACAhkC,KAAK0+B,UAAUuF,oBAAoB,QAASjkC,KAAKy9B,iBAAiB,KAKtEnB,EAAAp8B,UAAAkgC,iBAAR,SAAyBh0B,OACf83B,EACFlkC,KAAK68B,cACApmB,OAAO,SAAA3U,GAAK,OAAAA,EAAEu8B,sBAAwBv8B,EAAEu8B,qBAAqBC,eAC7D39B,OACLX,KAAK68B,cAAcl8B,OAASujC,GAAyB,GACrDlkC,KAAK0+B,UAAUyF,YAAYhC,iBAAiB,SAAUniC,KAAKw+B,gBAI3DlC,EAAAp8B,UAAAwgC,oBAAR,SAA4Bt0B,OAClB83B,EACFlkC,KAAK68B,cACApmB,OAAO,SAAA3U,GAAK,OAAAA,EAAEu8B,sBAAwBv8B,EAAEu8B,qBAAqBC,eAC7D39B,OACLX,KAAK68B,cAAcl8B,OAASujC,GAAyB,GACrDlkC,KAAK0+B,UAAUyF,YAAYF,oBAAoB,SAAUjkC,KAAKw+B,gBAc/DlC,EAAAp8B,UAAAkkC,YAAP,WACIpkC,KAAK88B,SAAS56B,MAAK,GACnBlC,KAAK88B,SAASuH,gCAhqBrBrlB,EAAAA,WAAUvS,KAAA,CAAC,CAAE63B,WAAY,oDAxBtBC,EAAAA,gCAFAC,EAAAA,sBAQAC,EAAAA,gBAMKC,EAAAA,oDAkFAC,EAAAA,OAAMl4B,KAAA,CAACm4B,EAAAA,mBApFZC,EAAAA,0QAcJ,iBCPE,SAAAC,EAAYhN,GAfJ93B,KAAAw5B,iBAAqC,CAE3Cx4B,OAAQ,KACRy4B,oBAAqBC,GAAoBnC,MACzCoC,kBAAmBC,GAAkBlC,OACrCmC,qBAAsBH,GAAoBrC,KAC1CyC,mBAAoBF,GAAkBlC,OACtCqC,cAAejyB,GACfkyB,eAAgBpxB,GAChBqxB,QAAS,CAAEvqB,MAAO,EAAG9D,OAAQ,IAO7B5L,KAAK83B,SAAWt4B,OAAOa,OAAO,GAAIL,KAAKw5B,iBAAkB1B,GA+D7D,OA3DEgN,EAAA5kC,UAAAg6B,SAAA,SAASC,EAA6BC,EAAYlV,EAAqBmV,OAC/DtC,EAAaF,GAAc73B,KAAK83B,UAChCuH,EAAqBlF,EAAexqB,wBAC1C3P,KAAK+kC,SAAS5K,EAAgBpC,EAAYsH,IAQ5CyF,EAAA5kC,UAAAw6B,MAAA,WACE,OAAOvB,GAAcn5B,OAUb8kC,EAAA5kC,UAAA6kC,SAAV,SAAmBtD,EAAsB1J,EAAwB4H,OACzDqF,EACDjN,EAAWG,MAAQH,EAAWroB,MAAQ1P,KAAK83B,SAAS+B,qBADnDmL,EAEDjN,EAAWC,OAASD,EAAWnsB,OAAS5L,KAAK83B,SAASgC,mBAErDmL,EAA0BxD,EAAQlH,cAAc5qB,wBAQtD,OALA8xB,EAAQljC,MAAM25B,MAAQ,GACtBuJ,EAAQljC,MAAM05B,KAAO,GACrBwJ,EAAQljC,MAAMy5B,OAAS,GACvByJ,EAAQljC,MAAM45B,IAAM,GAEZn4B,KAAK83B,SAAS2B,qBACpB,KAAKC,GAAoBrC,KACvBoK,EAAQljC,MAAM25B,MAAW5V,KAAK4iB,MAAMD,EAAY/M,MAAQ8M,GAAa,KACrE,MACF,KAAKtL,GAAoBpC,OACvBmK,EAAQljC,MAAM05B,KAAU3V,KAAK4iB,MAAMF,EAAeC,EAAYhN,KAAO0H,EAAYjwB,MAAQ,GAAE,KAC3F,MACF,KAAKgqB,GAAoBnC,MACvBkK,EAAQljC,MAAM05B,KAAU3V,KAAK4iB,MAAMF,EAAeC,EAAYhN,MAAK,KAIvE,OAAQj4B,KAAK83B,SAAS6B,mBACpB,KAAKC,GAAkBpC,IACrBiK,EAAQljC,MAAMy5B,OAAY1V,KAAK4iB,MAAMD,EAAYjN,OAASgN,GAAa,KACvE,MACF,KAAKpL,GAAkBnC,OACrBgK,EAAQljC,MAAM45B,IAAS7V,KAAK4iB,MAAMF,EAAeC,EAAY9M,IAAMwH,EAAY/zB,OAAS,GAAE,KAC1F,MACF,KAAKguB,GAAkBlC,OACrB+J,EAAQljC,MAAM45B,IAAS7V,KAAK4iB,MAAMF,EAAeC,EAAY9M,KAAI,OAIzE2M,oBC7FA,SAAAK,mDAkFA,OAlFsD3wB,EAAAA,EAAAA,GAKlD2wB,EAAAjlC,UAAAg6B,SAAA,SAASC,EAA6BC,EAAYlV,EAAqBmV,OAC7DtC,EAAaF,GAAc73B,KAAK83B,UAChCuH,EAAqBlF,EAAexqB,wBAC1C,GAAI0qB,EAAa,KACP+K,EAA6B,GACnCA,EAAarN,WAAaA,EAC1BqN,EAAa/F,mBAAqBA,EAClCr/B,KAAKqlC,iBAAmBrlC,KAAKqlC,kBAAoB7lC,OAAOa,OAAO,GAAIL,KAAK83B,UACxE93B,KAAK83B,SAAWt4B,OAAOa,OAAO,GAAIL,KAAKqlC,kBACvCD,EAAaE,aAAehN,GAAgBpT,GAC5CllB,KAAKulC,kBAAkBH,GAClBA,EAAaI,eAAkBJ,EAAaK,aAC7CzlC,KAAK0lC,cAAcvL,EAAgBiL,GAG3CplC,KAAK+kC,SAAS5K,EAAgBpC,EAAYsH,IAQpC8F,EAAAjlC,UAAAqlC,kBAAV,SAA4BH,GACxBA,EAAanN,KAAOj4B,KAAK2lC,cACrBP,EAAarN,WACbqN,EAAa/F,mBACbr/B,KAAK83B,SAAS+B,qBACd75B,KAAK83B,SAAS2B,qBAClB2L,EAAalN,MAAQkN,EAAanN,KAAOmN,EAAa/F,mBAAmB3vB,MACzE01B,EAAaI,cACTJ,EAAaE,aAAarN,KAAOmN,EAAanN,MAAQmN,EAAalN,MAAQkN,EAAaE,aAAapN,MAEzGkN,EAAajN,IAAMn4B,KAAK4lC,aACpBR,EAAarN,WACbqN,EAAa/F,mBACbr/B,KAAK83B,SAASgC,mBACd95B,KAAK83B,SAAS6B,mBAClByL,EAAapN,OAASoN,EAAajN,IAAMiN,EAAa/F,mBAAmBzzB,OACzEw5B,EAAaK,YACTL,EAAaE,aAAanN,IAAMiN,EAAajN,KAAOiN,EAAapN,OAASoN,EAAaE,aAAatN,QAWlGmN,EAAAjlC,UAAAylC,cAAV,SACI5N,EAAwB4H,EAAyBqF,EAAiC/+B,GAClF,OAAO8xB,EAAWG,MAAQH,EAAWroB,MAAQs1B,EAAarF,EAAYjwB,MAAQzJ,GAWxEk/B,EAAAjlC,UAAA0lC,aAAV,SACI7N,EAAwB4H,EAAyBqF,EAA+B/+B,GAChF,OAAO8xB,EAAWC,OAASD,EAAWnsB,OAASo5B,EAAarF,EAAY/zB,OAAS3F,GAWzFk/B,GAlFsDL,mBCItD,SAAAe,mDAiJA,OAjJ0CrxB,EAAAA,EAAAA,GAG5BqxB,EAAA3lC,UAAAwlC,cAAV,SAAwBjE,EAAsB2D,OACpCU,EAA4B,GAClC,IAAKV,EAAaI,cACd,GAAIxlC,KAAK+lC,kBAAkBX,GACvBplC,KAAKgmC,qBACF,KACGC,EAAiBjmC,KAAKimC,eAAeb,GAC3CU,EAAgBtjC,KAAK,cAAcyjC,EAAc,OAIzD,IAAKb,EAAaK,YACd,GAAIzlC,KAAKkmC,gBAAgBd,GACrBplC,KAAKmmC,mBACF,KACGC,EAAepmC,KAAKomC,aAAahB,GACvCU,EAAgBtjC,KAAK,cAAc4jC,EAAY,OAIvD3E,EAAQljC,MAAM0E,UAAY6iC,EAAgBzT,KAAK,KAAK7L,QAQhDqf,EAAA3lC,UAAA6lC,kBAAR,SAA0BX,OAQhBiB,GAAsB,GAAMrmC,KAAK83B,SAAS+B,qBAAuB,GACjEyM,GAAqB,GAAMtmC,KAAK83B,SAAS2B,oBAAsB,GAE/D8M,EAAavmC,KAAK2lC,cACpBP,EAAarN,WAAYqN,EAAa/F,mBAAoBgH,EAAmBC,GAC3EE,EAAcD,EAAanB,EAAa/F,mBAAmB3vB,MACjE,OAAO01B,EAAaE,aAAarN,KAAOsO,GAAcC,EAAcpB,EAAaE,aAAapN,OAQ1F2N,EAAA3lC,UAAAgmC,gBAAR,SAAwBd,OACdiB,GAAsB,GAAMrmC,KAAK83B,SAASgC,mBAAqB,GAC/DwM,GAAqB,GAAMtmC,KAAK83B,SAAS6B,kBAAoB,GAE7D8M,EAAYzmC,KAAK4lC,aACnBR,EAAarN,WAAYqN,EAAa/F,mBAAoBgH,EAAmBC,GAC3EI,EAAeD,EAAYrB,EAAa/F,mBAAmBzzB,OACjE,OAAOw5B,EAAaE,aAAanN,IAAMsO,GAAaC,EAAetB,EAAaE,aAAatN,QAMzF6N,EAAA3lC,UAAA8lC,eAAR,WACI,OAAQhmC,KAAK83B,SAAS2B,qBAClB,KAAKC,GAAoBrC,KACrBr3B,KAAK83B,SAAS2B,oBAAsBC,GAAoBnC,MACxD,MACJ,KAAKmC,GAAoBnC,MACrBv3B,KAAK83B,SAAS2B,oBAAsBC,GAAoBrC,KAGhE,OAAQr3B,KAAK83B,SAAS+B,sBAClB,KAAKH,GAAoBrC,KACrBr3B,KAAK83B,SAAS+B,qBAAuBH,GAAoBnC,MACzD,MACJ,KAAKmC,GAAoBnC,MACrBv3B,KAAK83B,SAAS+B,qBAAuBH,GAAoBrC,OAQ7DwO,EAAA3lC,UAAAimC,aAAR,WACI,OAAQnmC,KAAK83B,SAAS6B,mBAClB,KAAKC,GAAkBpC,IACnBx3B,KAAK83B,SAAS6B,kBAAoBC,GAAkBlC,OACpD,MACJ,KAAKkC,GAAkBlC,OACnB13B,KAAK83B,SAAS6B,kBAAoBC,GAAkBpC,IAG5D,OAAQx3B,KAAK83B,SAASgC,oBAClB,KAAKF,GAAkBpC,IACnBx3B,KAAK83B,SAASgC,mBAAqBF,GAAkBlC,OACrD,MACJ,KAAKkC,GAAkBlC,OACnB13B,KAAK83B,SAASgC,mBAAqBF,GAAkBpC,MAUzDqO,EAAA3lC,UAAA+lC,eAAR,SAAuBb,OACbuB,EAAavB,EAAanN,KAC1B2O,EAAcxB,EAAalN,MAAQkN,EAAaE,aAAapN,MAMnE,OAAIyO,EAAa,EACNrkB,KAAKukB,IAAIF,GACK,EAAdC,GACEtkB,KAAKG,IAAImkB,EAAaD,GAExB,GASPd,EAAA3lC,UAAAkmC,aAAR,SAAqBhB,OACX0B,EAAY1B,EAAajN,IACzB4O,EAAe3B,EAAapN,OAASoN,EAAaE,aAAatN,OACrE,OAAI8O,EAAY,EACLxkB,KAAKukB,IAAIC,GACM,EAAfC,GACEzkB,KAAKG,IAAIskB,EAAcD,GAEzB,GAGnBjB,GAjJ0CV,mBCA1C,SAAA6B,mDAgDA,OAhD6CxyB,EAAAA,EAAAA,GAE/BwyB,EAAA9mC,UAAAwlC,cAAV,SAAwBjE,EAAsB2D,GAC1C3D,EAAQnH,UAAUnuB,IAAI,qCAChB25B,EAA4B,GAClC,IAAKV,EAAaI,cAAe,KACvByB,EAAe3kB,KAAKC,IAAI,EAAG6iB,EAAa/F,mBAAmB3vB,MAAQ1P,KAAK83B,SAASmC,QAAQvqB,OACzFi3B,EAAarkB,KAAKC,IAAI,EAAG6iB,EAAaE,aAAarN,KAAOmN,EAAanN,MACvE2O,EAActkB,KAAKC,IAAI,EAAG6iB,EAAalN,MAAQkN,EAAaE,aAAapN,OACzEgP,EAAY5kB,KAAKG,IAAIwkB,EAAcN,EAAaC,GAKtD,GAJAnF,EAAQljC,MAAMmR,MAAW01B,EAAa/F,mBAAmB3vB,MAAQw3B,EAAS,KAItElnC,KAAK83B,SAAS2B,sBAAwBC,GAAoBpC,OAMxC,GADZ6P,EAAcR,EAAaO,GAAaP,EAAaC,KAEvDd,EAAgBtjC,KAAK,cAAc2kC,EAAW,OAK1D,IAAK/B,EAAaK,YAAa,CACrBwB,EAAe3kB,KAAKC,IAAI,EAAG6iB,EAAa/F,mBAAmBzzB,OAAS5L,KAAK83B,SAASmC,QAAQruB,YAatFu7B,EAZJL,EAAYxkB,KAAKC,IAAI,EAAG6iB,EAAaE,aAAanN,IAAMiN,EAAajN,KACrE4O,EAAezkB,KAAKC,IAAI,EAAG6iB,EAAapN,OAASoN,EAAaE,aAAatN,QAC3EkP,EAAY5kB,KAAKG,IAAIwkB,EAAcH,EAAYC,GAKrD,GAJAtF,EAAQljC,MAAMqN,OAAYw5B,EAAa/F,mBAAmBzzB,OAASs7B,EAAS,KAIxElnC,KAAK83B,SAAS6B,oBAAsBC,GAAkBnC,OAMpC,GADZ0P,EAAcL,EAAYI,GAAaJ,EAAYC,KAErDjB,EAAgBtjC,KAAK,cAAc2kC,EAAW,OAI1D1F,EAAQljC,MAAM0E,UAAY6iC,EAAgBzT,KAAK,KAAK7L,QAE5DwgB,GAhD6C7B,mBCQzC,SAAAiC,EAAYxM,GAAZ,IAAAppB,EACIqa,EAAAjrB,KAAAZ,KAAM46B,IAAgB56B,YARlBwR,EAAA61B,cAAe,EAsDf71B,EAAA81B,SAAW,WACf91B,EAAK+1B,gBAAgB/I,iBA9CrBhtB,EAAKg2B,iBAAmB5M,IAgDhC,OA1D4CpmB,EAAAA,EAAAA,GAcjC4yB,EAAAlnC,UAAA46B,WAAP,SAAkB5V,EAAoB6V,EAAmC3uB,GACjEpM,KAAKqnC,eAGTrnC,KAAKunC,gBAAkBxM,EACvB/6B,KAAKynC,IAAMr7B,EACXpM,KAAK0+B,UAAYxZ,EACjBllB,KAAK28B,MAAQ5B,EAAeiE,eAAe5yB,GAAI40B,OAC/ChhC,KAAKqnC,cAAe,IAIjBD,EAAAlnC,UAAA86B,OAAP,WAAA,IAAAxpB,EAAAxR,KACQA,KAAK28B,MACL38B,KAAK28B,MAAM+K,kBAAkB,WACzBl2B,EAAKm2B,2BAGT3nC,KAAK2nC,0BAKNP,EAAAlnC,UAAA+6B,OAAP,WACQj7B,KAAKwnC,iBACLxnC,KAAKwnC,iBAAiBvD,oBAAoB,SAAUjkC,KAAKsnC,UAAU,GAEnEtnC,KAAK0+B,UAAUuF,oBAAoB,SAAUjkC,KAAKsnC,UAAU,GAGhEtnC,KAAKqnC,cAAe,GAGhBD,EAAAlnC,UAAAynC,uBAAR,WACQ3nC,KAAKwnC,iBACLxnC,KAAKwnC,iBAAiBrF,iBAAiB,SAAUniC,KAAKsnC,UAAU,GAEhEtnC,KAAK0+B,UAAUyD,iBAAiB,SAAUniC,KAAKsnC,UAAU,IAOrEF,GA1D4CzM,mBCMxC,SAAAiN,EAAYhN,GAAZ,IAAAppB,EACIqa,EAAAjrB,KAAAZ,KAAM46B,IAAgB56B,YAPlBwR,EAAA61B,cAAe,EAoCf71B,EAAA81B,SAAW,SAAC5J,GAChBA,EAAGmK,iBACEr2B,EAAKs2B,gBAAkBt2B,EAAKs2B,iBAAmBpK,EAAGqK,aACnDv2B,EAAKs2B,eAAiBpK,EAAGqK,WACzBv2B,EAAKw2B,kBAAoBx2B,EAAKs2B,eAAe7O,UAC7CznB,EAAKy2B,mBAAqBz2B,EAAKs2B,eAAehP,YAGlDtnB,EAAKs2B,eAAe7O,UAAYznB,EAAKw2B,kBACrCx2B,EAAKs2B,eAAehP,WAAatnB,EAAKy2B,sBAO9C,OArDyCzzB,EAAAA,EAAAA,GAY9BozB,EAAA1nC,UAAA46B,WAAP,SAAkB5V,EAAoB6V,EAAmC3uB,GACjEpM,KAAKqnC,eAITrnC,KAAK0+B,UAAYxZ,EACjBllB,KAAKqnC,cAAe,IAIjBO,EAAA1nC,UAAA86B,OAAP,WACIh7B,KAAK0+B,UAAUyD,iBAAiB,SAAUniC,KAAKsnC,UAAU,GACzDtnC,KAAK0+B,UAAUyD,iBAAiB,QAASniC,KAAKkoC,SAAS,IAIpDN,EAAA1nC,UAAA+6B,OAAP,WACIj7B,KAAK0+B,UAAUuF,oBAAoB,SAAUjkC,KAAKsnC,UAAU,GAC5DtnC,KAAK0+B,UAAUuF,oBAAoB,QAASjkC,KAAKkoC,SAAS,GAC1DloC,KAAK8nC,eAAiB,KACtB9nC,KAAKgoC,kBAAoB,EACzBhoC,KAAKioC,mBAAqB,EAC1BjoC,KAAKqnC,cAAe,GAehBO,EAAA1nC,UAAAgoC,QAAR,SAAgBxK,GACZA,EAAGyK,2BACHzK,EAAGmK,kBAEXD,GArDyCjN,mBCarC,SAAAyN,EAAYxN,GAAZ,IAAAppB,EACIqa,EAAAjrB,KAAAZ,KAAM46B,IAAgB56B,YALlBwR,EAAA61B,cAAe,EA+Df71B,EAAA81B,SAAW,SAAC5J,GACXlsB,EAAKs2B,iBAIVt2B,EAAK62B,qBAAuB72B,EAAKs2B,eAAe7O,UAChDznB,EAAK82B,sBAAwB92B,EAAKs2B,eAAehP,YAE7CxW,KAAKukB,IAAIr1B,EAAK62B,oBAAsB72B,EAAK+2B,kBAAoB/2B,EAAKg3B,YAClElmB,KAAKukB,IAAIr1B,EAAK82B,qBAAuB92B,EAAKi3B,mBAAqBj3B,EAAKg3B,cACpEh3B,EAAKktB,UAAUuF,oBAAoB,SAAUzyB,EAAK81B,UAAU,GAC5D91B,EAAK+1B,gBAAgBrI,KAAK1tB,EAAKi2B,QApEnCj2B,EAAKg2B,iBAAmB5M,EACxBppB,EAAKg3B,WAAa,GAClBh3B,EAAK62B,oBAAsB,EAC3B72B,EAAK82B,qBAAuB,IAoEpC,OAtFyC9zB,EAAAA,EAAAA,GAsB9B4zB,EAAAloC,UAAA46B,WAAP,SAAkB5V,EAAoB6V,EAAmC3uB,GACjEpM,KAAKqnC,eAGTrnC,KAAKunC,gBAAkBxM,EACvB/6B,KAAKynC,IAAMr7B,EACXpM,KAAK0+B,UAAYxZ,EACjBllB,KAAKqnC,cAAe,IAIjBe,EAAAloC,UAAA86B,OAAP,WACQh7B,KAAKwnC,kBACLxnC,KAAKwnC,iBAAiBrF,iBAAiB,SAAUniC,KAAKsnC,UACtDtnC,KAAK8nC,eAAiB9nC,KAAKwnC,mBAE3BxnC,KAAK0+B,UAAUyD,iBAAiB,SAAUniC,KAAKsnC,UAC3CpiB,SAASqT,gBAAgBmQ,aAAexjB,SAASqT,gBAAgBE,aACjEz4B,KAAK8nC,eAAiB5iB,SAAwB,gBACvCA,SAASS,KAAK+iB,aAAexjB,SAASS,KAAK8S,eAClDz4B,KAAK8nC,eAAiB5iB,SAAa,OAItCllB,KAAK8nC,iBAIV9nC,KAAKqoC,oBAAsB,EAC3BroC,KAAKsoC,qBAAuB,EAC5BtoC,KAAKuoC,iBAAmBvoC,KAAK8nC,eAAe7O,UAC5Cj5B,KAAKyoC,kBAAoBzoC,KAAK8nC,eAAehP,aAI1CsP,EAAAloC,UAAA+6B,OAAP,WAEQj7B,KAAKwnC,iBACLxnC,KAAKwnC,iBAAiBvD,oBAAoB,SAAUjkC,KAAKsnC,UAEzDtnC,KAAK0+B,UAAUuF,oBAAoB,SAAUjkC,KAAKsnC,UAEtDtnC,KAAK8nC,eAAiB,KACtB9nC,KAAKqoC,oBAAsB,EAC3BroC,KAAKsoC,qBAAuB,EAC5BtoC,KAAKuoC,iBAAmB,EACxBvoC,KAAKyoC,kBAAoB,EACzBzoC,KAAKqnC,cAAe,GAiB5Be,GAtFyCzN,ICFzCgO,GAAA,WAAA,SAAAA,IAEc3oC,KAAA4oC,YAAa,EACb5oC,KAAA6oC,qBAA4B,GAC5B7oC,KAAA8oC,eAA8B,IAAI/5B,IA0BrC/O,KAAA+oC,cAAgB,IAAIhiB,EAAAA,aAsI/B,OA3JIvnB,OAAAgC,eAAWmnC,EAAAzoC,UAAA,UAAO,KAAlB,WACI,OAAO,mCAMXV,OAAAgC,eAAWmnC,EAAAzoC,UAAA,UAAO,KAAlB,WACI,OAAO,mCAMXV,OAAAgC,eAAWmnC,EAAAzoC,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAK4oC,4CAWTD,EAAAzoC,UAAAiM,IAAP,SAAWiO,EAAgB4D,GACnBhe,KAAK4oC,aACL5oC,KAAKgpC,YAAYhpC,KAAK8oC,eAAgB1uB,EAAa4D,GACnDhe,KAAK6oC,qBAAqBrmC,KAAK4X,KAOvCuuB,EAAAzoC,UAAAsW,kBAAA,SAAkBpK,GAAiB,MAAO,IAK1Cu8B,EAAAzoC,UAAA+oC,KAAA,aAKAN,EAAAzoC,UAAAgpC,KAAA,aAKAP,EAAAzoC,UAAAoW,qBAAA,SAAqB6yB,GAArB,IAAA33B,EAAAxR,KACUiP,EAAc,GAKpB,OAJAjP,KAAK8oC,eAAe54B,QAAQ,SAAClD,EAAU/L,OAC7BkB,EAAQgnC,EAAe33B,EAAKsH,mBAAmB7X,EAAKkoC,GAAgBn8B,EAAM7K,MAChF8M,EAAOzM,KAAI,CAAG4J,GAAInL,EAAKiY,SAAU/W,EAAOuU,KAAM1J,EAAM0J,SAEjDzH,GAMJ05B,EAAAzoC,UAAAwa,SAAP,SAAgBtO,GACZ,OAAOpM,KAAK8oC,eAAev8B,IAAIH,IAM5Bu8B,EAAAzoC,UAAA4Y,mBAAP,SAA0B1M,EAAS+8B,OACzBn8B,EAAQhN,KAAK8oC,eAAev8B,IAAIH,GACtC,OAAKY,EAGDm8B,EACOnpC,KAAKopC,YAAYp8B,GAErBA,EAAM7K,MALF,MAWfwmC,EAAAzoC,UAAAmpC,OAAA,SAAOl4B,KAKPw3B,EAAAzoC,UAAAopC,MAAA,WACItpC,KAAK8oC,eAAeQ,QACpBtpC,KAAK6oC,qBAAuB,IAMzBF,EAAAzoC,UAAAqpC,aAAP,WACIvpC,KAAK4oC,YAAa,GAMfD,EAAAzoC,UAAA6a,WAAP,SAAkBsuB,GACdrpC,KAAK4oC,YAAa,EAClB5oC,KAAK8oC,eAAeQ,QACpBtpC,KAAK6oC,qBAAuB,IAUtBF,EAAAzoC,UAAA8oC,YAAV,SAAsBQ,EAAqBpvB,EAAgB4D,OACnDhR,EAAQw8B,EAAOj9B,IAAI6N,EAAYhO,IAC/BY,EACIqB,GAASrB,EAAM7K,OACf+L,GAAalB,EAAM7K,MAAOiY,EAAYlB,UAEtClM,EAAM7K,MAAQiY,EAAYlB,UAG9BlM,EAAK,CAAK7K,MAAO8L,GAAWmM,EAAYlB,UAAW8E,UAAWA,EAAWtH,KAAM0D,EAAY1D,MAC3F8yB,EAAO7oB,IAAIvG,EAAYhO,GAAIY,KASzB27B,EAAAzoC,UAAAkpC,YAAV,SAAsBp8B,GAClB,OAAOhN,KAAKypC,YAAYz8B,EAAMgR,UAAWhR,EAAM7K,QASzCwmC,EAAAzoC,UAAAupC,YAAV,SAAyBC,EAAUC,GAO/B,OALIt7B,GAASq7B,IAAUr7B,GAASs7B,GACnBz7B,GAAaA,GAAa,GAAIw7B,GAAQC,GAEtCA,GAAkBD,uBAhKtC1qB,EAAAA,aAoKD2pB,EApKA,GCCAiB,GAAA,SAAA/d,GAAA,SAAA+d,IAAA,IAAAp4B,EAAA,OAAAqa,GAAAA,EAAAhrB,MAAAb,KAAAU,YAAAV,YAEcwR,EAAAq4B,cAAqB,GACrBr4B,EAAAs4B,WAAqD,GACrDt4B,EAAAu4B,WAAqD,GACrDv4B,EAAAw4B,QAAuB,IAAIj7B,IAmB9ByC,EAAAu3B,cAAgB,IAAIhiB,EAAAA,eAqS/B,OA5TmFvS,EAAAA,EAAAA,GAS/EhV,OAAAgC,eAAIooC,EAAA1pC,UAAA,UAAO,KAAX,WACI,OAAgC,EAAzBF,KAAK+pC,WAAWppC,wCAM3BnB,OAAAgC,eAAIooC,EAAA1pC,UAAA,UAAO,KAAX,WACI,OAAgC,EAAzBF,KAAK8pC,WAAWnpC,wCAWpBipC,EAAA1pC,UAAAiM,IAAP,SAAWiO,EAAgB4D,OACjBwrB,EAASxpC,KAAK4oC,WAAa5oC,KAAK8oC,eAAiB9oC,KAAKgqC,QAC5DhqC,KAAKiqC,uBAAuBT,EAAQpvB,EAAa4D,GACjDhe,KAAKkqC,eAAe9vB,EAAaovB,EAAQxrB,IAGnC4rB,EAAA1pC,UAAAgqC,eAAV,SAAyB9vB,EAAgBovB,EAAqBxrB,GAC1Dhe,KAAKgpC,YAAYQ,EAAQpvB,EAAa4D,IAEjBhe,KAAK4oC,WAAa5oC,KAAK6oC,qBAAuB7oC,KAAK6pC,eAC3DrnC,KAAK4X,GAEbpa,KAAK4oC,aACN5oC,KAAK+pC,WAAWvnC,KAAK,CAAC,CAAE4X,YAAWA,EAAE4D,UAASA,KAC9Che,KAAK8pC,WAAa,GAClB9pC,KAAK+oC,cAAc9vB,SAOpB2wB,EAAA1pC,UAAAsW,kBAAP,SAAyBpK,GACrB,OAAIA,EACOpM,KAAK6pC,cAAcpzB,OAAO,SAAAnW,GAAK,OAAAA,EAAE8L,KAAOA,IAEnD1J,EAAW1C,KAAK6pC,gBAMbD,EAAA1pC,UAAAoW,qBAAP,SAA4B6yB,GAA5B,IAAA33B,EAAAxR,KACUiP,EAAc,GAKpB,OAJAjP,KAAKgqC,QAAQ95B,QAAQ,SAAClD,EAAU/L,OACtBkB,EAAQgnC,EAAe33B,EAAKi4B,YAAYz8B,EAAMgR,UAAWhR,EAAM7K,OAAS6K,EAAM7K,MACpF8M,EAAOzM,KAAI,CAAG4J,GAAInL,EAAKiY,SAAU/W,EAAOuU,KAAM1J,EAAM0J,SAEjDzH,GAMJ26B,EAAA1pC,UAAAwa,SAAP,SAAgBtO,GACZ,OAAOpM,KAAKgqC,QAAQz9B,IAAIH,IAM5B5M,OAAAgC,eAAWooC,EAAA1pC,UAAA,UAAO,KAAlB,WACI,OAAO,mCAMJ0pC,EAAA1pC,UAAA4Y,mBAAP,SAA0B1M,EAAS+8B,OACzBn8B,EAAQhN,KAAKgqC,QAAQz9B,IAAIH,GACzB+9B,EAAete,EAAA3rB,UAAMwa,SAAQ9Z,KAAAZ,KAACoM,GAGpC,IAAKY,IAAUm9B,EACX,OAAO,SAGLC,EAAgBve,EAAA3rB,UAAM4Y,mBAAkBlY,KAAAZ,KAACoM,GAAI,GAC7Ci+B,EAASr9B,GAASA,EAAM7K,MAC1BmoC,EAAkBtqC,KAAKypC,YAAYY,EAAQD,GAC/C,GAAIjB,EAAc,KACRoB,EAAgBv9B,EAAQA,EAAMgR,UAAYmsB,EAAansB,UAC7DssB,EAAkBtqC,KAAKypC,YAAYc,EAAeD,GAEtD,OAAOA,GAMJV,EAAA1pC,UAAA6a,WAAP,SAAkBsuB,WAEd,GADArpC,KAAK4oC,YAAa,EACdS,EAAQ,KACFmB,EAAgD,OAEtD,IAA0B,IAAAj8B,EAAAC,EAAAxO,KAAK6oC,sBAAoBn6B,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAAhD,IAAMkY,EAAW1L,EAAAvM,MACZgoC,EAAenqC,KAAK8oC,eAAev8B,IAAI6N,EAAYhO,IACzDpM,KAAK6pC,cAAcrnC,KAAK4X,GACxBpa,KAAKgpC,YAAYhpC,KAAKgqC,QAAS5vB,EAAa+vB,EAAansB,WACzDwsB,EAAQhoC,KAAK,CAAE4X,YAAWA,EAAE4D,UAAWmsB,EAAansB,iHAGxDhe,KAAK+pC,WAAWvnC,KAAKgoC,GACrBxqC,KAAK8pC,WAAa,GAElB9pC,KAAK+oC,cAAc9vB,OAEvB4S,EAAA3rB,UAAM6a,WAAUna,KAAAZ,KAACqpC,IAMdO,EAAA1pC,UAAAmpC,OAAP,SAAcl4B,GAAd,IAAAK,EAAAxR,KACIA,KAAKgqC,QAAQ95B,QAAQ,SAAC3P,OACZiS,EAAQrB,EAAK8D,UAAU,SAAAzU,GAAK,OAAAiqC,KAAKC,UAAUlqC,KAAOiqC,KAAKC,UAAUnqC,EAAEyd,aACzE,OAAQzd,EAAEmW,MACN,KAAKC,GAAgBvB,IACjBjE,EAAK3O,KAAKjC,EAAE4B,OACZ,MACJ,KAAKwU,GAAgBtB,OACb,GAAK7C,GAASA,EAAQrB,EAAKxQ,QAC3BwQ,EAAK4F,OAAOvE,EAAO,GAEvB,MACJ,KAAKmE,GAAgBrB,OACb,GAAK9C,GAASA,EAAQrB,EAAKxQ,SAC3BwQ,EAAKqB,GAAShB,EAAK43B,YAAY7oC,OAK/CP,KAAKspC,SAMFM,EAAA1pC,UAAAopC,MAAP,WACItpC,KAAK6pC,cAAgB,GACrB7pC,KAAKgqC,QAAQV,QACbtpC,KAAK8pC,WAAa,GAClB9pC,KAAK+pC,WAAa,GAClB/pC,KAAK+oC,cAAc9vB,QAMhB2wB,EAAA1pC,UAAA+oC,KAAP,uBACI,KAAIjpC,KAAK+pC,WAAWppC,QAAU,GAA9B,KAIMgqC,EAAoD3qC,KAAK+pC,WAAWtd,MAC1EzsB,KAAK6pC,cAAc9yB,OAAO/W,KAAK6pC,cAAclpC,OAASgqC,EAAYhqC,QAClEX,KAAK8pC,WAAWtnC,KAAKmoC,GAErB3qC,KAAKgqC,QAAQV,YACb,IAA6B,IAAA56B,EAAAF,EAAAxO,KAAK+pC,YAAU/T,EAAAtnB,EAAAxM,QAAA8zB,EAAA5zB,KAAA4zB,EAAAtnB,EAAAxM,OAAE,CAAzC,IAAM0oC,EAAc5U,EAAA7zB,UACrB,IAA0B,IAAA0oC,EAAAr8B,EAAAo8B,GAAcE,EAAAD,EAAA3oC,QAAA4oC,EAAA1oC,KAAA0oC,EAAAD,EAAA3oC,OAAE,CAArC,IAAMkY,EAAW0wB,EAAA3oC,MAClBnC,KAAKgpC,YAAYhpC,KAAKgqC,QAAS5vB,EAAYA,YAAaA,EAAY4D,sNAI5Ehe,KAAK+oC,cAAc9vB,SAMhB2wB,EAAA1pC,UAAAgpC,KAAP,mBACI,GAA6B,EAAzBlpC,KAAK8pC,WAAWnpC,OAAY,KACxB6pC,EACJA,EAAUxqC,KAAK8pC,WAAWrd,UAC1B,IAAqB,IAAAse,EAAAv8B,EAAAg8B,GAAOQ,EAAAD,EAAA7oC,QAAA8oC,EAAA5oC,KAAA4oC,EAAAD,EAAA7oC,OAAE,CAAzB,IAAM+oC,EAAMD,EAAA7oC,MACbnC,KAAKgpC,YAAYhpC,KAAKgqC,QAASiB,EAAO7wB,YAAa6wB,EAAOjtB,WAC1Dhe,KAAK6pC,cAAcrnC,KAAKyoC,EAAO7wB,kHAGnCpa,KAAK+pC,WAAWvnC,KAAKgoC,GACrBxqC,KAAK+oC,cAAc9vB,SAQjB2wB,EAAA1pC,UAAA+pC,uBAAV,SAAiCT,EAAqBpvB,EAAgB4D,OAC5DhR,EAAQw8B,EAAOj9B,IAAI6N,EAAYhO,IACrC,OAAQgO,EAAY1D,MAChB,KAAKC,GAAgBvB,IACjB,GAAIpI,EAEA,MAAM,IAAIsB,MAAM,qDAAqD8L,EAAYhO,GAAE,4BAEvF,MACJ,KAAKuK,GAAgBtB,OACrB,KAAKsB,GAAgBrB,OACjB,GAAItI,GAASA,EAAM0J,OAASC,GAAgBtB,OAExC,MAAM,IAAI/G,MAAM,qDAAqD8L,EAAYhO,GAAE,8BAEvF,IAAKY,IAAUgR,IAAche,KAAK4oC,WAE9B,MAAM,IAAIt6B,MAAM,kEAAkE8L,EAAY1D,KAAI,WACpF0D,EAAYhO,GAAE,kEAYlCw9B,EAAA1pC,UAAA8oC,YAAV,SAAsBQ,EAAqBpvB,EAAgB4D,OACnDhR,EAAQw8B,EAAOj9B,IAAI6N,EAAYhO,IAWnC,GAAIY,EACA,OAAQoN,EAAY1D,MAChB,KAAKC,GAAgBtB,OACbrI,EAAM0J,OAASC,GAAgBvB,IAC/Bo0B,EAAO0B,UAAO9wB,EAAYhO,IACnBY,EAAM0J,OAASC,GAAgBrB,SACtCtI,EAAM7K,MAAQiY,EAAYlB,SAC1BlM,EAAM0J,KAAOC,GAAgBtB,QAEjC,MACJ,KAAKsB,GAAgBrB,OACbjH,GAASrB,EAAM7K,QACX6K,EAAM0J,OAASC,GAAgBvB,MAC/BpI,EAAM7K,MAAQnC,KAAKypC,YAAYz8B,EAAM7K,MAAOiY,EAAYlB,WAExDlM,EAAM0J,OAASC,GAAgBrB,QAC/BpH,GAAalB,EAAM7K,MAAOiY,EAAYlB,WAG1ClM,EAAM7K,MAAQiY,EAAYlB,cAItClM,EAAK,CAAK7K,MAAO8L,GAAWmM,EAAYlB,UAAW8E,UAAWA,EAAWtH,KAAM0D,EAAY1D,MAC3F8yB,EAAO7oB,IAAIvG,EAAYhO,GAAIY,GAI1BhN,KAAK4oC,YACN5oC,KAAKmrC,WAAW/wB,EAAYhO,GAAIo9B,IAS9BI,EAAA1pC,UAAAirC,WAAV,SAAqB/+B,EAASo9B,WACpBx8B,EAAQw8B,EAAOj9B,IAAIH,GAKzB,GAAIY,GAASA,EAAM7K,OAAS6K,EAAMgR,UAK9B,GAAI3P,GAASrB,EAAMgR,WAAY,KAC3B,IAAkB,IAAAzP,EAAAC,EAAAhP,OAAOiP,KAAKzB,EAAM7K,QAAMuM,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAAvC,IAAMjB,EAAGyN,EAAAvM,MACNsoC,KAAKC,UAAU19B,EAAMgR,UAAU/c,MAAUwpC,KAAKC,UAAU19B,EAAM7K,MAAMlB,YAC7D+L,EAAM7K,MAAMlB,wGAKvB+L,EAAM0J,OAASC,GAAgBtB,QAA8C,IAApC7V,OAAOiP,KAAKzB,EAAM7K,OAAOxB,QAClE6oC,EAAO0B,UAAO9+B,QAGdY,EAAMgR,YAAchR,EAAM7K,OAC1BqnC,EAAO0B,UAAO9+B,wBAxTjC4S,EAAAA,aA6TD4qB,EA7TA,CACmFjB,ICCnFyC,GAAA,SAAAvf,GAAA,SAAAuf,mDAiEA,OA/DY52B,EAAAA,EAAAA,GAED42B,EAAAlrC,UAAAoW,qBAAP,SAA4B6yB,GAA5B,IAAA33B,EAAAxR,KACUiP,EAAc,GAMpB,OALAjP,KAAKgqC,QAAQ95B,QAAQ,SAAClD,EAAU/L,OACtBkB,EAAQgnC,EAAe33B,EAAKi4B,YAAYz8B,EAAMgR,UAAWhR,EAAM7K,OAAS8L,GAAWjB,EAAM7K,OAC/FqP,EAAK65B,sBAAsBlpC,GAC3B8M,EAAOzM,KAAI,CAAG4J,GAAInL,EAAKyiB,KAAM1W,EAAM0W,KAAMxK,SAAU/W,EAAOuU,KAAM1J,EAAM0J,SAEnEzH,GAGDm8B,EAAAlrC,UAAA8oC,YAAV,SAAsBQ,EAAqBpvB,EAAgB4D,GAIvD,GAHA6N,EAAA3rB,UAAM8oC,YAAWpoC,KAAAZ,KAACwpC,EAAQpvB,EAAa4D,GAGlC5D,EAAYsJ,KAAjB,KAIM4nB,EAAe9B,EAAOj9B,IAAI6N,EAAYhO,IACxCk/B,IACAA,EAAa5nB,KAAOtJ,EAAYsJ,MAMhCtJ,EAAY1D,OAASC,GAAgBtB,QACrCm0B,EAAOt5B,QAAQ,SAACua,EAAMpC,GAClB,GAAIoC,EAAE/G,OAA4C,IAApC+G,EAAE/G,KAAK5T,QAAQsK,EAAYhO,IACrC,OAAQqe,EAAE/T,MACN,KAAKC,GAAgBvB,IACjBo0B,EAAO0B,UAAO7iB,GACd,MACJ,KAAK1R,GAAgBrB,OACjBk0B,EAAOj9B,IAAI8b,GAAG3R,KAAOC,GAAgBtB,OACrCm0B,EAAOj9B,IAAI8b,GAAGlmB,MAAQ,UAOvCipC,EAAAlrC,UAAAmpC,OAAP,SAAcl4B,EAAaoF,EAAkBkN,GACrCA,EACArN,GAASoN,8BAA8BrS,EAAMnR,KAAKsW,sBAAqB,GAAOmN,EAAclN,GAAY,GAExGsV,EAAA3rB,UAAMmpC,OAAMzoC,KAAAZ,KAACmR,GAEjBnR,KAAKspC,SAID8B,EAAAlrC,UAAAmrC,sBAAR,SAA8B/2B,WAC1B,GAAIA,MACA,IAAmB,IAAA/F,EAAAC,EAAAhP,OAAOiP,KAAK6F,IAAI5F,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAAhC,IAAMqpC,EAAI78B,EAAAvM,MACPxC,MAAMmP,QAAQwF,EAAIi3B,YACXj3B,EAAIi3B,8HA5D9BvsB,EAAAA,aAiEDosB,EAjEA,CAEYxB,kBCuJR,SAAA4B,EACY5N,EACApf,EAC6Buc,EACjB0Q,GAJxB,IAAAj6B,EAAAxR,KACYA,KAAA49B,WAAAA,EACA59B,KAAAwe,IAAAA,EAC6Bxe,KAAA+6B,eAAAA,EACjB/6B,KAAAyrC,kBAAAA,EAtIhBzrC,KAAA88B,SAAW,IAAIC,EAAAA,QACf/8B,KAAA0rC,kBAA8G,CAClHj1B,EAAAA,OAAO,SAAAsN,GAAK,OAAAA,EAAE3X,KAAOoF,EAAKm6B,aAC1BlJ,EAAAA,UAAUziC,KAAK88B,WAuBZ98B,KAAAq9B,SAAW,IAAItW,EAAAA,aAmBf/mB,KAAAo9B,UAAY,IAAIrW,EAAAA,aAmBhB/mB,KAAAu9B,SAAW,IAAIxW,EAAAA,aAmBf/mB,KAAAs9B,UAAY,IAAIvW,EAAAA,aAEf/mB,KAAA4rC,YAAa,EA4Lb5rC,KAAA6rC,cAAgB,WACpBr6B,EAAKo6B,YAAa,EAClBp6B,EAAKgN,IAAIyhB,uBACFzuB,EAAKm6B,WACZn6B,EAAKs6B,cACLt6B,EAAK+rB,SAAStkB,QActB,OA3MIzZ,OAAAgC,eAAWgqC,EAAAtrC,UAAA,YAAS,KAApB,WACI,OAAOF,KAAK4rC,4CAgBhBpsC,OAAAgC,eAAWgqC,EAAAtrC,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAK49B,WAAWC,+CAM3Br+B,OAAAgC,eAEWgqC,EAAAtrC,UAAA,cAAW,KAFtB,WAGI,OAAOF,KAAK+rC,2CAMhBvsC,OAAAgC,eACWgqC,EAAAtrC,UAAA,eAAY,KADvB,WAEI,OAAQF,KAAK+rC,2CAoBVP,EAAAtrC,UAAA0M,KAAP,SAAYo/B,GAAZ,UAAAx6B,EAAAxR,KAGU29B,EAAO39B,KAAK+6B,eAAeiE,eAAeh/B,KAAK2rC,YAC/CM,IAAmBtO,GAAOA,EAAKiF,oBAC/BsJ,IAAoBvO,GAAOA,EAAKU,qBACtC,IAAI4N,IAAsBjsC,KAAK4rC,YAAcM,GAA7C,CAIKvO,IACD39B,KAAK2rC,WAAa3rC,KAAK+6B,eAAeC,OAAOh7B,KAAK49B,WAAYoO,IAGlEhsC,KAAK4rC,YAAa,EAClB5rC,KAAKwe,IAAIyhB,oBAEHkM,EAAqC,CAAEvzB,QAAQ,GAErD,GADA5Y,KAAKo9B,UAAUnkB,KAAKkzB,GAChBA,EAAcvzB,OAGd,OAFA5Y,KAAK4rC,YAAa,OAClB5rC,KAAKwe,IAAIyhB,gBAIbjgC,KAAK+6B,eAAe+D,KAAK9+B,KAAK2rC,WAAYK,GAE1ChsC,KAAK8rC,cACL9rC,KAAKosC,mBAAoBz/B,EAAA3M,KAAK+6B,eAAesC,UAASmF,KAAI3hC,MAAA8L,EAAAjK,EAAI1C,KAAK0rC,oBAAmBhJ,UAAU,WAC5FlxB,EAAK6rB,SAASpkB,SAGlBjZ,KAAKqsC,oBAAqB99B,EAAAvO,KAAK+6B,eAC1BuC,WACAkF,KAAI3hC,MAAA0N,EAAA7L,EAAI1C,KAAK0rC,oBACbhJ,UAAU,SAACpgC,OACFg9B,EAAwC,CAAE1mB,QAAQ,EAAO4nB,MAAOl+B,EAAEk+B,OACxEhvB,EAAK8rB,UAAUrkB,KAAKqmB,GACpBh9B,EAAEsW,OAAS0mB,EAAU1mB,OAKhBtW,EAAEsW,QACHpH,EAAK86B,kBAAkB96B,EAAK66B,sBAIxCrsC,KAAKusC,mBAAoB79B,EAAA1O,KAAK+6B,eAAewC,UACxCiF,KAAI3hC,MAAA6N,EAAAhM,EAAI1C,KAAK0rC,oBACbhJ,UAAU1iC,KAAK6rC,iBAUjBL,EAAAtrC,UAAA2M,MAAP,eAGU8wB,EAAO39B,KAAK+6B,eAAeiE,eAAeh/B,KAAK2rC,YAC/CO,IAAoBvO,GAAOA,EAAKU,qBAClCr+B,KAAK4rC,YAAcM,GAIvBlsC,KAAK+6B,eAAemE,KAAKl/B,KAAK2rC,aAU3BH,EAAAtrC,UAAAsM,OAAP,SAAcw/B,GAGNhsC,KAAK+rC,WAAa/rC,KAAKwsC,UACvBxsC,KAAK4M,KAAKo/B,GAEVhsC,KAAK6M,SAKbrN,OAAAgC,eAAWgqC,EAAAtrC,UAAA,YAAS,KAApB,eACUy9B,EAAO39B,KAAK+6B,eAAeiE,eAAeh/B,KAAK2rC,YACrD,QAAOhO,GAAOA,EAAKU,sDAShBmN,EAAAtrC,UAAAu+B,WAAP,WACIz+B,KAAK+6B,eAAe0D,WAAWz+B,KAAK2rC,aAMjCH,EAAAtrC,UAAAusC,SAAP,WACQzsC,KAAKyrC,mBAAqBzrC,KAAKoM,IAC/BpM,KAAKyrC,kBAAkBt/B,IAAInM,KAAKoM,GAAIpM,OAOrCwrC,EAAAtrC,UAAAkkC,YAAP,WACQpkC,KAAKyrC,mBAAqBzrC,KAAKoM,IAC/BpM,KAAKyrC,kBAAkBn/B,OAAOtM,KAAKoM,KAElCpM,KAAK+rC,WAAa/rC,KAAK2rC,YACxB3rC,KAAK+6B,eAAemE,KAAKl/B,KAAK2rC,YAElC3rC,KAAK8rC,cACL9rC,KAAK88B,SAAS56B,MAAK,GACnBlC,KAAK88B,SAASuH,YAWVmH,EAAAtrC,UAAA4rC,YAAR,WACI9rC,KAAKssC,kBAAkBtsC,KAAKosC,mBAC5BpsC,KAAKssC,kBAAkBtsC,KAAKqsC,oBAC5BrsC,KAAKssC,kBAAkBtsC,KAAKusC,oBAGxBf,EAAAtrC,UAAAosC,kBAAR,SAA0BI,GAClBA,IAAiBA,EAAaC,QAC9BD,EAAaZ,mCAvSxB5+B,EAAAA,UAAST,KAAA,CAAC,CACPmgC,SAAU,SACVz/B,SAAU,2DAvBV8zB,EAAAA,kBAFA4L,EAAAA,yBAeKvQ,GAAiBv7B,WAAA,CAAA,CAAA2V,KAmJjBiuB,EAAAA,OAAMl4B,KAAA,CAAC6vB,aApJPrwB,GAAoBlL,WAAA,CAAA,CAAA2V,KAqJpBo2B,EAAAA,gDA7GJxjB,EAAAA,0BAmBAA,EAAAA,yBAmBAA,EAAAA,0BAmBAA,EAAAA,mBAkBAlc,EAAAA,2BAaA2/B,EAAAA,YAAWtgC,KAAA,CAAC,6BAA0B,CAAAiK,KACtCq2B,EAAAA,YAAWtgC,KAAA,CAAC,0CAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,uBA0KjB++B,mBAoFI,SAAAwB,EAAoBvL,EAAyCgK,GAAzCzrC,KAAAyhC,QAAAA,EAAyCzhC,KAAAyrC,kBAAAA,EA8CjE,OA7FIjsC,OAAAgC,eAAWwrC,EAAA9sC,UAAA,sBAAmB,KAA9B,WACI,OAAOF,KAAKitC,0BAQhB,SAA+BxiB,GAC3BzqB,KAAKitC,qBAAuBxiB,mCAkBhCjrB,OAAAgC,eACIwrC,EAAA9sC,UAAA,SAAM,KASV,WACI,MAA4B,iBAAjBF,KAAKktC,QACLltC,KAAKyrC,kBAAkBl/B,IAAIvM,KAAKktC,SAEpCltC,KAAKktC,aAdhB,SACWlsC,GACQ,OAAXA,GAA8B,KAAXA,IACnBhB,KAAKktC,QAAUlsC,oCAqBhBgsC,EAAA9sC,UAAAusC,SAAP,WACIzsC,KAAKmtC,iBAAmB,CACpBnQ,iBAAkB,IAAI8H,GAA6B,CAAE9jC,OAAQhB,KAAKyhC,QAAQ5D,gBAC1EZ,eAAgB,IAAImK,GACpBjK,qBAAqB,EACrBD,OAAO,EACPkB,uBAAuB,IAQxB4O,EAAA9sC,UAAAktC,QADP,WAEQptC,KAAKitC,uBAAyBj7B,YAC9BhS,KAAKmtC,iBAAiBhQ,oBAAsBn9B,KAAKitC,sBAEjDjtC,KAAKqiC,SACLriC,KAAKmtC,iBAAiB9K,OAASriC,KAAKqiC,YAGlCgL,EAAiB7tC,OAAOa,OAAO,GAAIL,KAAKmtC,iBAAkBntC,KAAKgsC,iBACrEhsC,KAAKstC,sBAAsBD,GAC3BrtC,KAAKgB,OAAOwL,OAAO6gC,IAQbL,EAAA9sC,UAAAotC,sBAAV,SAAgCxV,GAC5B,GAAIA,GAAYA,EAASkF,iBAAkB,KACjCuQ,EAA2CzV,EAASkF,iBAAiBtC,QAC3E6S,EAAsBzV,SAAS92B,OAAShB,KAAKyhC,QAAQ5D,cACrD/F,EAASkF,iBAAmBuQ,EAGhC,OAAOzV,uBA9Hd5qB,EAAAA,UAAST,KAAA,CAAC,CACPmgC,SAAU,gBACVz/B,SAAU,iEAnUV8zB,EAAAA,kBAYKh1B,GAAoBlL,WAAA,CAAA,CAAA2V,KAuYiBo2B,EAAAA,uDA7DzC1/B,EAAAA,mCAYAA,EAAAA,sBAwBAA,EAAAA,MAAKX,KAAA,CAAC,mCAMNW,EAAAA,MAAKX,KAAA,CAAC,oCAqCNY,EAAAA,aAAYZ,KAAA,CAAC,YAjEd+gC,EAAAA,CADC/R,GAAkB,6MA8FvBuR,KASAS,GAAA,WAKI,SAAAA,EAAmBhM,GAAAzhC,KAAAyhC,QAAAA,EAMvB,OAHIjiC,OAAAgC,eAAWisC,EAAAvtC,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKyhC,QAAQ5D,mEAT3B3wB,EAAAA,UAAST,KAAA,CAAC,CACPmgC,SAAU,iBACVz/B,SAAU,kEA5cV8zB,EAAAA,cAqdJwM,EAXA,GAgBAC,GAAA,WAAA,SAAAA,KAK+B,2BAL9BjgC,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC89B,GAAoBwB,GAA0BS,IAC7D9/B,QAAS,CAAC69B,GAAoBwB,GAA0BS,IACxD7/B,UAAW,CAAC3B,QAEeyhC,EAL/B,OCtdIC,IAAA,EACAC,KAAA,4CAKS,YACD,WACA,QAyBCC,GAAoB,uBCrCjCC,GAAA,WAAA,SAAAA,IAQc9tC,KAAAyZ,UAAoC,IAAI1K,WAM3C++B,EAAA5tC,UAAAqM,IAAP,SAAWwhC,GACP,OAAO/tC,KAAKyZ,UAAUlN,IAAIwhC,IAQvBD,EAAA5tC,UAAAygB,IAAP,SAAWotB,EAAqBC,GAC5B,IAAKD,EACD,MAAMz/B,MAAM,mCAEhBtO,KAAKyZ,UAAUkH,IAAIotB,EAAaC,IAO7BF,EAAA5tC,UAAAopC,MAAP,SAAayE,GACT/tC,KAAKyZ,UAAUkH,IAAIotB,EAAa/tC,KAAKiuC,cAOlCH,EAAA5tC,UAAAk6B,KAAP,SAAY2T,OACFG,EAAMluC,KAAKuM,IAAIwhC,GACrB,OAAOG,EAAMA,EAAI9T,KAAO,GAcrB0T,EAAA5tC,UAAAiuC,SAAP,SAAgBJ,EAAqBK,EAAQF,GAOzC,GANKA,IACDA,EAAM,IAAIl/B,IAAIhP,KAAKuM,IAAIwhC,KAEvBG,IAAQl8B,YACRk8B,EAAMluC,KAAKiuC,cAEVG,GAAqB,IAAXA,EACX,MAAM9/B,MAAM,8BAGhB,OADA4/B,EAAI/hC,IAAIiiC,GACDF,GAcJJ,EAAA5tC,UAAAmuC,UAAP,SAAiBN,EAAqBO,EAAgBC,GAAtD,IACQ90B,EADRjI,EAAAxR,KAQI,OANIuuC,EACA90B,EAAYzZ,KAAKiuC,YACVK,GAA8B,IAAnBA,EAAQ3tC,SAC1B8Y,EAAY,IAAIzK,IAAIhP,KAAKuM,IAAIwhC,KAEjCO,EAAQp+B,QAAQ,SAACqT,GAAS,OAAA9J,EAAYjI,EAAK28B,SAASJ,EAAaxqB,EAAM9J,KAChEA,GASJq0B,EAAA5tC,UAAA0Z,YAAP,SAAmBm0B,EAAqBK,EAAQF,GAC5CluC,KAAK2gB,IAAIotB,EAAa/tC,KAAKmuC,SAASJ,EAAaK,EAAQF,KAStDJ,EAAA5tC,UAAAsuC,aAAP,SAAoBT,EAAqBK,EAAeG,GACpDvuC,KAAK2gB,IAAIotB,EAAa/tC,KAAKquC,UAAUN,EAAaK,EAAQG,KAcvDT,EAAA5tC,UAAAuuC,YAAP,SAAmBV,EAAqBK,EAAQF,GAI5C,GAHKA,IACDA,EAAM,IAAIl/B,IAAIhP,KAAKuM,IAAIwhC,KAEvBG,IAAQl8B,UAIZ,OADAk8B,EAAIhD,UAAOkD,GACJF,GAaJJ,EAAA5tC,UAAAwuC,aAAP,SAAoBX,EAAqBO,GAAzC,IACQ70B,EADRjI,EAAAxR,KAGI,OADAsuC,EAAQp+B,QAAQ,SAACy+B,GAAmB,OAAAl1B,EAAYjI,EAAKi9B,YAAYV,EAAaY,EAAgBl1B,KACvFA,GASJq0B,EAAA5tC,UAAAyZ,cAAP,SAAqBo0B,EAAqBK,EAAQF,GAC9CluC,KAAK2gB,IAAIotB,EAAa/tC,KAAKyuC,YAAYV,EAAaK,EAAQF,KAQzDJ,EAAA5tC,UAAA0uC,eAAP,SAAsBb,EAAqBK,EAAeG,GACtDvuC,KAAK2gB,IAAIotB,EAAa/tC,KAAK0uC,aAAaX,EAAaK,KAUlDN,EAAA5tC,UAAAwZ,iBAAP,SAAwBq0B,EAAqBK,OACnCF,EAAMluC,KAAKuM,IAAIwhC,GACrB,QAAKG,GAGEA,EAAIW,IAAIT,IAWZN,EAAA5tC,UAAA4uC,WAAP,SAAkBf,OACRG,EAAMluC,KAAKuM,IAAIwhC,GACrB,GAAIG,GAAkB,EAAXA,EAAI9T,KACX,OAAO8T,EAAI/a,SAASjxB,OAAOC,OAW5B2rC,EAAA5tC,UAAA6uC,iBAAP,SAAwBhB,EAAqBiB,GACzC,OAAmB,EAAZA,GAAiBA,IAAchvC,KAAKo6B,KAAK2T,IAU7CD,EAAA5tC,UAAA+uC,kBAAP,SAAyBlB,GACrB,OAAkC,IAA3B/tC,KAAKo6B,KAAK2T,IAUdD,EAAA5tC,UAAAgvC,YAAP,SAAmB/9B,EAAMoF,GACrB,OAAOA,EAAapF,EAAKyF,IAAI,SAACmN,GAAM,OAAAA,EAAExN,KAAepF,GAOlD28B,EAAA5tC,UAAA+tC,UAAP,WACI,OAAO,IAAIj/B,yBA/OlBgQ,EAAAA,WAAUvS,KAAA,CAAC,CACR63B,WAAY,gHADhB,GCDI6K,GAAU,EAKdC,GAAA,WAAA,SAAAA,IAQYpvC,KAAAynC,IAAM0H,KAkBPnvC,KAAAqvC,KAAO,QAIPrvC,KAAAsvC,YAAa,EA6BbtvC,KAAAuvC,UAAW,EAyBtB,OAvEI/vC,OAAAgC,eAAW4tC,EAAAlvC,UAAA,UAAO,KAAlB,WACI,MAAO,wBAAwBF,KAAKynC,qCAGxCjoC,OAAAgC,eACW4tC,EAAAlvC,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAKwvC,6DAnBnBC,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,2BACVuiC,SAAU,qKAeT3C,EAAAA,YAAWtgC,KAAA,CAAC,sCAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,iCAIZsgC,EAAAA,YAAWtgC,KAAA,CAAC,gDA2BZW,EAAAA,OAAK,CAAAsJ,KACLq2B,EAAAA,YAAWtgC,KAAA,CAAC,uBAAoB,CAAAiK,KAChCq2B,EAAAA,YAAWtgC,KAAA,CAAC,uDAwBZW,EAAAA,SAELgiC,EApFA,GCDID,GAAU,EACV9S,IAAe,EASnBsT,GAAA,WAyPI,SAAAA,EACyCC,EAC3BhS,EACY/pB,EACgC4F,GAHjBzZ,KAAA4vC,SAAAA,EAC3B5vC,KAAA49B,WAAAA,EACY59B,KAAA6T,MAAAA,EACgC7T,KAAAyZ,UAAAA,EAzPhDzZ,KAAA6vC,UAAW,EACX7vC,KAAA8vC,WAAY,EACZ9vC,KAAA+vC,OAAS,KACT/vC,KAAAgwC,WAAY,EAiBfhwC,KAAAoM,GAAK,sBAAsB+iC,KAuM3BnvC,KAAAqvC,KAAO,SAoDlB,OA3QI7vC,OAAAgC,eAAcmuC,EAAAzvC,UAAA,WAAQ,KAAtB,WACI,OAAuB,OAAhBF,KAAK+vC,QAAmB/vC,KAAK+vC,SAAW/9B,2CAoBnDxS,OAAAgC,eAAWmuC,EAAAzvC,UAAA,SAAM,KAAjB,WACI,OAAA,sCAWJV,OAAAgC,eACWmuC,EAAAzvC,UAAA,QAAK,KADhB,WAEI,OAAoB,OAAhBF,KAAK+vC,QACL1T,GAAeb,GACX,oIAEAa,IACGr8B,KAAKiwC,WAETjwC,KAAK+vC,YAGhB,SAAiB5tC,GACbnC,KAAK+vC,OAAS5tC,mCA0BlB3C,OAAAgC,eACImuC,EAAAzvC,UAAA,YAAS,KADb,WAEI,OAAQF,KAAKu0B,0CAWjB/0B,OAAAgC,eAGImuC,EAAAzvC,UAAA,WAAQ,KAHZ,WAII,OAAOF,KAAK8vC,eAGhB,SAAa3tC,GACLnC,KAAKu0B,WAGTv0B,KAAK8vC,UAAY3tC,oCASrB3C,OAAAgC,eAAImuC,EAAAzvC,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK4a,cAMhB,SAAezY,GACXnC,KAAK4a,SAAWzY,mCAUpB3C,OAAAgC,eACImuC,EAAAzvC,UAAA,UAAO,KADX,WAEI,OAASF,KAAKu0B,WAAav0B,KAAKuvC,UAAavvC,KAAK6vC,cAYtD,SAAY1tC,GACRnC,KAAK6vC,SAAW1tC,mCAQpB3C,OAAAgC,eAAImuC,EAAAzvC,UAAA,YAAS,KAAb,WACI,OAAOF,KAAKkwC,aAKhB,SAAc/tC,GACVnC,KAAKkwC,QAAU/tC,mCA0CnB3C,OAAAgC,eAGWmuC,EAAAzvC,UAAA,WAAQ,KAHnB,WAII,OAAOF,KAAK6T,OAAQ7T,KAAK6T,MAAM07B,UAA6BvvC,KAAKgwC,eAGrE,SAAoB7tC,GAChBnC,KAAKgwC,UAAY7tC,mCAkBrB3C,OAAAgC,eAAWmuC,EAAAzvC,UAAA,YAAS,KAApB,WACI,OAAOF,KAAK4vC,SAASO,MAAMrgC,QAAQ9P,uCAOvCR,OAAAgC,eAAWmuC,EAAAzvC,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK49B,WAAWC,cAAcpF,8CAOzCj5B,OAAAgC,eAAWmuC,EAAAzvC,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAK49B,4CAchB+R,EAAAzvC,UAAAkwC,QADA,SACQ5P,KAGRmP,EAAAzvC,UAAAmwC,UAAA,WACI,GAAIrwC,KAAK8vC,UAAW,KACVQ,EAAuBtwC,KAAK4vC,SAASW,aACtCD,GAEMtwC,KAAKwwC,SACVxwC,KAAK+vC,SAAWO,EAAqB99B,OAASxS,KAAKmC,QAAUmuC,EAAqBnuC,MACpFnC,OAASswC,IACTtwC,KAAK4vC,SAASa,WAAWzwC,MAJzBA,KAAK4vC,SAASa,WAAWzwC,6EAjBhC2kC,EAAAA,OAAMl4B,KAAA,CAACohC,aAzQ2B5M,EAAAA,kBAGlCmO,GAAyBruC,WAAA,CAAA,CAAA2V,KAwQzBo2B,EAAAA,kBA1QAgB,GAAsB/sC,WAAA,CAAA,CAAA2V,KA2QtBo2B,EAAAA,UAAQ,CAAAp2B,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAACqhC,qCAvOvBf,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,qBAkBAA,EAAAA,qBAiCAA,EAAAA,yBAMA2/B,EAAAA,YAAWtgC,KAAA,CAAC,+CAaZW,EAAAA,OAAK,CAAAsJ,KACLq2B,EAAAA,YAAWtgC,KAAA,CAAC,uBAAoB,CAAAiK,KAChCq2B,EAAAA,YAAWtgC,KAAA,CAAC,2DAeZW,EAAAA,uBAqBA2/B,EAAAA,YAAWtgC,KAAA,CAAC,wDAkDZW,EAAAA,OAAK,CAAAsJ,KACLq2B,EAAAA,YAAWtgC,KAAA,CAAC,iDAqBZW,EAAAA,OAAK,CAAAsJ,KACLq2B,EAAAA,YAAWtgC,KAAA,CAAC,uBAAoB,CAAAiK,KAChCq2B,EAAAA,YAAWtgC,KAAA,CAAC,qDAgBZW,EAAAA,OAAK,CAAAsJ,KACLq2B,EAAAA,YAAWtgC,KAAA,CAAC,8BAqCZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,cAlJxB+gC,EAAAA,CAFC/R,GAAkB,+KA2CnB+R,EAAAA,CAFC/R,GAAkB,4KA2HvBkU,EAnRA,GCJAe,GAAA,SAAA7kB,GAAA,SAAA6kB,mDAiFA,OA7E8Cl8B,EAAAA,EAAAA,GAI1ChV,OAAAgC,eAAIkvC,EAAAxwC,UAAA,UAAO,KAAX,eACQywC,EAAe3wC,KAAK6vC,SACxB,GAAI7vC,KAAKwwC,SAAU,KACTI,EAAc5wC,KAAKyZ,UAAUq1B,WAAc9uC,KAAK4vC,SAASxjC,GAAE,WAC3DykC,EAAeD,EAAcA,EAAYp+B,OAAS,EACxDm+B,EAAe3wC,KAAK+vC,SAAWc,EAEnC,OAAQ7wC,KAAKu0B,WAAav0B,KAAKuvC,UAAYoB,OAM/C,SAAYxuC,GACRnC,KAAK6vC,SAAW1tC,mCAKpB3C,OAAAgC,eAAIkvC,EAAAxwC,UAAA,WAAQ,KAAZ,WACI,GAAIF,KAAKwwC,SAAU,KACTjtB,EAAOvjB,KAAKyZ,UAAUq1B,WAAW,GAAG9uC,KAAK4vC,SAASxjC,IACxD,QAAOmX,IAAOA,EAAK/Q,QAAUxS,KAAK+vC,QAAUxsB,EAAKphB,QAAUnC,KAAKmC,OAEpE,OAAOnC,KAAK8vC,eAMhB,SAAa3tC,GACLnC,KAAKu0B,WAGTv0B,KAAK8vC,UAAY3tC,oCAKrB3C,OAAAgC,eACIkvC,EAAAxwC,UAAA,cAAW,KADf,WAGI,OAD0BF,KAAK4vC,SAASkB,mBAAqB9wC,KAAKuvC,UAAYvvC,KAAKu0B,UAExE,EAEA,sCAQfmc,EAAAxwC,UAAAkwC,QADA,SACQ5P,GACJ,GAAIxgC,KAAKuvC,UAAYvvC,KAAKu0B,SAA1B,KACUqc,EAAc5wC,KAAK4vC,SAASO,MAAMn7B,KAAK,SAACuO,GAAS,OAAAA,EAAK2sB,UACxDlwC,KAAK4vC,SAASkB,iBAAmBF,GACjCA,EAAYnP,QAAQ5D,cAAckT,MAAM,CAAEC,eAAe,SAI7DhxC,KAAKyZ,WACLzZ,KAAK4vC,SAASa,WAAWzwC,KAAMwgC,IAQvCkQ,EAAAxwC,UAAA+wC,iBADA,SACiBzQ,GACbA,EAAMqH,sCA/Eb4H,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,qBACVuiC,SAAA,qEA6CC3C,EAAAA,YAAWtgC,KAAA,CAAC,kCAaZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,qCAiBvBY,EAAAA,aAAYZ,KAAA,CAAC,YAAa,CAAC,cAIhCikC,EAjFA,CAI8Cf,ICP1CR,GAAU,EASd+B,GAAA,WAwJI,SAAAA,EACctT,EACApf,GADAxe,KAAA49B,WAAAA,EACA59B,KAAAwe,IAAAA,EAvJJxe,KAAAmxC,aAAoB,KACpBnxC,KAAAynC,IAAM,iBAAiB0H,KAuB1BnvC,KAAAoxC,YAAc,IAAIrqB,EAAAA,aA6DlB/mB,KAAAqxC,UAAY,KAMZrxC,KAAAsxC,UAAW,EAqLtB,OA1QI9xC,OAAAgC,eAAc0vC,EAAAhxC,UAAA,kBAAe,KAA7B,WACI,OAAOF,KAAKyhC,yCA6FhBjiC,OAAAgC,eAAW0vC,EAAAhxC,UAAA,QAAK,KAAhB,mBACUiwC,EAA+B,GACrC,GAAInwC,KAAKoQ,WAAa4B,cAClB,IAAoB,IAAAzD,EAAAC,EAAAxO,KAAKoQ,SAASC,WAAS3B,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAAxC,IAAMy+B,EAAKjyB,EAAAvM,MACPw+B,EAAMpM,UACP4b,EAAM3tC,KAAKm+B,wGAKvB,OAAOwP,mCAUX3wC,OAAAgC,eAAW0vC,EAAAhxC,UAAA,UAAO,KAAlB,mBACUqxC,EAAiC,GACvC,GAAIvxC,KAAKoQ,WAAa4B,cAClB,IAAoB,IAAAzD,EAAAC,EAAAxO,KAAKoQ,SAASC,WAAS3B,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAAxC,IAAMy+B,EAAKjyB,EAAAvM,MACRw+B,EAAMpM,UACNgd,EAAQ/uC,KAAKm+B,wGAKzB,OAAO4Q,mCAUX/xC,OAAAgC,eAAW0vC,EAAAhxC,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAK49B,WAAWC,+CAapBqT,EAAAhxC,UAAAsxC,gBAAP,SAAuBvwC,EAAwBu/B,GAC3C,OAAQv/B,GACJ,KAAKwwC,GACL,KAAKA,GACDzxC,KAAKywC,WAAWzwC,KAAK4wC,YAAapQ,KAYvC0Q,EAAAhxC,UAAAuwC,WAAP,SAAkBzC,EAAoCxN,GAClDxgC,KAAKoxC,YAAYn4B,KAAK,CAClB+0B,aAAYA,EACZ0D,aAAc,KACd94B,QAAQ,KAOhBpZ,OAAAgC,eAAW0vC,EAAAhxC,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKmxC,kBAMhB,SAAuB5tB,GACnBvjB,KAAKmxC,aAAe5tB,mCAGd2tB,EAAAhxC,UAAAyxC,SAAV,SAAmB1rC,EAAqB2rC,OAChCp/B,GAAS,EACTxS,KAAKmxC,eACL3+B,EAAQo/B,GAA8B5xC,KAAK4wC,YAAYX,eAErD4B,EAAW7xC,KAAK8xC,oCAAoCt/B,EAAOvM,GACjEjG,KAAK+xC,aAAaF,IAGZX,EAAAhxC,UAAA4xC,oCAAV,SAA8CE,EAAoB/rC,GAG9D,QAFIuM,EAAQw/B,EACN7B,EAAQnwC,KAAKmwC,MACZA,EAAM39B,EAAQvM,IAAckqC,EAAM39B,EAAQvM,GAAWspC,UACxD/8B,GAASvM,EAIb,OAAa,IADbuM,GAASvM,IACSuM,EAAQ29B,EAAMxvC,OACrB6R,GAEC,GAQT0+B,EAAAhxC,UAAA6xC,aAAP,SAAoBF,GAChB,IAAkB,IAAdA,EAAiB,KACXI,EAAUjyC,KAAKmxC,aACfe,EAAUlyC,KAAKmwC,MAAM0B,GACvBI,IACAA,EAAQ/B,SAAU,GAEtBlwC,KAAK4wC,YAAcsB,EACnBlyC,KAAKmyC,mBAAmBD,GACxBlyC,KAAK4wC,YAAYV,SAAU,IAO5BgB,EAAAhxC,UAAAkyC,cAAP,WACIpyC,KAAK2xC,SAASU,GAASzE,MAAO,IAM3BsD,EAAAhxC,UAAAoyC,aAAP,WACItyC,KAAK2xC,SAASU,GAAS1E,GAAI3tC,KAAKmwC,MAAMxvC,SAMnCuwC,EAAAhxC,UAAAqyC,aAAP,WACIvyC,KAAK2xC,SAASU,GAASzE,OAMpBsD,EAAAhxC,UAAAsyC,aAAP,WACIxyC,KAAK2xC,SAASU,GAAS1E,KAGjBuD,EAAAhxC,UAAAiyC,mBAAV,SAA6BD,OACnBvS,EAAcuS,EAAQzQ,QAAQ5D,cAAcluB,wBAC5C8iC,EAAazyC,KAAK46B,gBAAgBjrB,wBACpC8iC,EAAWta,IAAMwH,EAAYxH,MAC7Bn4B,KAAK46B,gBAAgB3B,WAAcwZ,EAAWta,IAAMwH,EAAYxH,KAGhEsa,EAAWza,OAAS2H,EAAY3H,SAChCh4B,KAAK46B,gBAAgB3B,WAAc0G,EAAY3H,OAASya,EAAWza,8CAtP1E1O,EAAAA,sBAeAlc,EAAAA,sBAeAA,EAAAA,kBAeAA,EAAAA,yBAeAA,EAAAA,OAAK,CAAAsJ,KACLq2B,EAAAA,YAAWtgC,KAAA,CAAC,qCAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,0BAsLjBykC,EAnRA,GClBAwB,GAAA,WAiCI,SAAAA,EAAmBl0B,EAA+Bm0B,GAA/B3yC,KAAAwe,IAAAA,EAA+Bxe,KAAA2yC,eAAAA,EAP3C3yC,KAAAsxC,SAAW,wBAGXtxC,KAAA4yC,YAAa,EAKxB,2BA1BCnD,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,wBACVuiC,SAAU,+RATV7C,EAAAA,yBAIAgG,EAAAA,kDAeCC,EAAAA,UAASrmC,KAAA,CAAC,oBAAqB,CAAEsmC,KAAMF,EAAAA,qCAKvC9F,EAAAA,YAAWtgC,KAAA,CAAC,6BAGZsgC,EAAAA,YAAWtgC,KAAA,CAAC,4CAMjBimC,EAlCA,GCKAM,GAAA,WAUI,SAAAA,EAAmBpV,GAAA59B,KAAA49B,WAAAA,EAFZ59B,KAAAizC,WAAa,0BAGxB,2BAXCxD,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,gCACVuiC,SAAU,mJAPMzO,EAAAA,4CAUf6R,EAAAA,UAASrmC,KAAA,CAAC,uBAAwB,CAAEsmC,KAAMF,EAAAA,kCAC1CzlC,EAAAA,0BACA2/B,EAAAA,YAAWtgC,KAAA,CAAC,YAIjBumC,EAXA,GCLAE,GAAA,WA+BI,SAAAA,EAAmBtV,EAA+Bpf,GAA/Bxe,KAAA49B,WAAAA,EAA+B59B,KAAAwe,IAAAA,EAL3Cxe,KAAAizC,WAAa,wBAWxB,OAxBIzzC,OAAAgC,eAAW0xC,EAAAhzC,UAAA,SAAM,KAQjB,WACI,OAAOF,KAAKmzC,aAThB,SAAkBhxC,GACVnC,KAAKozC,YAGTpzC,KAAKmzC,QAAUhxC,EACfnC,KAAKwe,IAAIyhB,kDAeNiT,EAAAhzC,UAAAkkC,YAAP,WACIpkC,KAAKozC,WAAY,uBAhCxB3D,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,qBACVuiC,SAAU,0IAJMzO,EAAAA,kBAA6D4L,EAAAA,wDAO5EE,EAAAA,YAAWtgC,KAAA,CAAC,2BAGZqmC,EAAAA,UAASrmC,KAAA,CAAC,YAAa,CAAEsmC,KAAMF,EAAAA,wCAC/BzlC,EAAAA,0BAcA2/B,EAAAA,YAAWtgC,KAAA,CAAC,YAYjBymC,EArCA,GCMAG,GAAA,WAGI,SAAAA,EAAoB5R,EAA6B9E,GAA7B38B,KAAAyhC,QAAAA,EAA6BzhC,KAAA28B,MAAAA,EAW1C38B,KAAAszC,UAAY,GAGZtzC,KAAAuzC,YAAc,IAGdvzC,KAAAwzC,gBAAkB,GAGlBxzC,KAAAyzC,cAAgB,EAGhBzzC,KAAA0zC,cAAgB,EAGhB1zC,KAAA2zC,gBAAkB,GAUjB3zC,KAAA4zC,cAAgB,GAShB5zC,KAAA6zC,uBAA6E,mBAA7CC,QAAQ5zC,UAA+B,oBAC/E,sBACA,oBACQF,KAAA+zC,2BAAqF,mBAAjDD,QAAQ5zC,UAAmC,wBACvF,0BACA,wBAgbJ,OA3aImzC,EAAAnzC,UAAAusC,SAAA,WAAA,IAAAj7B,EAAAxR,KACIA,KAAK28B,MAAM+K,kBAAkB,eACnBsM,EAAaxiC,EAAKiwB,QAAQ5D,cAActD,eAAiB/oB,EAAKiwB,QAAQ5D,cAAc+C,WAC1FoT,EAAW7R,iBAAiB,QACpB,SAAC8R,GAAUziC,EAAK02B,QAAQ+L,KAChCD,EAAW7R,iBAAiB,aACpB,SAAC8R,GAAUziC,EAAK0iC,aAAaD,KACrCD,EAAW7R,iBAAiB,YACpB,SAAC8R,GAAUziC,EAAK2iC,YAAYF,KACpCD,EAAW7R,iBAAiB,WACpB,SAAC8R,GAAUziC,EAAK4iC,WAAWH,KACnCD,EAAW7R,iBAAiB,cACpB,SAAC8R,GAAUziC,EAAK6iC,cAAcJ,KACtCD,EAAW7R,iBAAiB,YACnB,SAAC8R,GAAUziC,EAAK8iC,YAAYL,KACrCD,EAAW7R,iBAAiB,iBACpB,SAAC8R,GAAUziC,EAAK+iC,iBAAiBN,KACzCD,EAAW7R,iBAAiB,kBACpB,SAAC8R,GAAUziC,EAAKgjC,kBAAkBP,QAQxCZ,EAAAnzC,UAAAgoC,QAAV,SAAkB+L,GAEd,GAAKj0C,KAAKy0C,gCAAV,KAGIC,EACAC,EACEC,EAAa50C,KAAKszC,UAClBuB,EAAe,EAAI70C,KAAKszC,UA+B9B,GA7BAtzC,KAAK80C,QAAU90C,KAAKy0C,gCAAgC3b,WACpD94B,KAAK+0C,QAAU/0C,KAAKy0C,gCAAgCxb,UAEhDgb,EAAIe,aAKCH,GAFLH,GAAgBT,EAAIe,YAAc,MAEEN,EAAeG,IAC/CH,EAAepyB,KAAK2yB,KAAKP,GAAgBG,GAEtCZ,EAAIiB,SAEXR,EAAe10C,KAAKm1C,eAAelB,EAAIiB,QAAS,EAAG,IAInDjB,EAAImB,aAKCP,GAFLF,GAAgBV,EAAImB,YAAc,MAEET,EAAeE,IAC/CF,EAAeryB,KAAK2yB,KAAKN,GAAgBE,GAEtCZ,EAAIoB,SAEXV,EAAe30C,KAAKm1C,eAAelB,EAAIoB,QAAS,EAAG,IAEnDX,GAAmD,eAAnC10C,KAAKs1C,0BAA4C,CACjEt1C,KAAKu1C,WACDv1C,KAAK80C,QAAUJ,EAAeE,OAE5BY,EAAgBx1C,KAAKy0C,gCAAgC3b,WACrD2c,EAAgBC,SAAS11C,KAAKy0C,gCAAgCrkC,SAAS,GAAG7R,MAAMmR,MAAO,IACzF,EAAI8lC,GAAiBA,EAAgBC,GAErCxB,EAAIpM,sBAED8M,GAAmD,aAAnC30C,KAAKs1C,4BAC5Bt1C,KAAK21C,WACD31C,KAAK+0C,QAAUJ,EAAeC,GAElC50C,KAAK41C,oBAAoB3B,MAQvBZ,EAAAnzC,UAAA01C,oBAAV,SAA8B3B,OACpB4B,EAAe71C,KAAKy0C,gCAAgCxb,UACpD6c,EAAe91C,KAAKy0C,gCAAgCrkC,SAAS,GAAGs4B,aAClE1oC,KAAKy0C,gCAAgCsB,aACrC,EAAIF,GAAgBA,EAAeC,IACnC7B,EAAIpM,iBACAoM,EAAI7R,iBACJ6R,EAAI7R,oBASNiR,EAAAnzC,UAAAg0C,aAAV,SAAuB1T,GACnB,GAAyB,mBAAdwV,YAA6Bh2C,KAAKy0C,gCACzC,OAAO,EAIXwB,qBAAqBj2C,KAAKk2C,yBAEpBC,EAAQ3V,EAAM4V,QAAS,GAE7Bp2C,KAAK80C,QAAU90C,KAAKy0C,gCAAgC3b,WAEpD94B,KAAK+0C,QAAU/0C,KAAKy0C,gCAAgCxb,UAEpDj5B,KAAKq2C,aAAeF,EAAMG,MAC1Bt2C,KAAKu2C,aAAeJ,EAAMK,MAE1Bx2C,KAAKy2C,eAAgB,IAAI7nC,MAAOC,UAChC7O,KAAK02C,YAAcP,EAAMG,MACzBt2C,KAAK22C,YAAcR,EAAMK,MACzBx2C,KAAK4zC,cAAgB,GACrB5zC,KAAK42C,cAAgB,GAGrB52C,KAAK62C,aAAe,EACpB72C,KAAK82C,iBAAkB,EACvB92C,KAAK+2C,iBAAmB,EAExB/2C,KAAKg3C,iBAAkB,EACgB,aAAnCh3C,KAAKs1C,2BACLt1C,KAAK41C,oBAAoBpV,IAQvB6S,EAAAnzC,UAAAi0C,YAAV,SAAsB3T,GAClB,GAAyB,mBAAdwV,UAEP,OADAh2C,KAAKg3C,iBAAkB,EAG3B,GAAKh3C,KAAKy0C,gCAAV,KAyCIwC,EArCEd,EAAQ3V,EAAM4V,QAAS,GACvBc,EAAQl3C,KAAK80C,SAAW90C,KAAKq2C,aAAeF,EAAMG,OAASh0B,KAAK2yB,KAAKj1C,KAAKuzC,aAC1E4D,EAAQn3C,KAAK+0C,SAAW/0C,KAAKu2C,aAAeJ,EAAMK,OAASl0B,KAAK2yB,KAAKj1C,KAAKuzC,aAM1E6D,GAAqB,IAAIxoC,MAAOC,UAAa7O,KAAKy2C,cACxD,GAA0B,IAAtBW,GAA2BA,EAAoB,IAAK,KAC9CC,GAAUr3C,KAAK02C,YAAcP,EAAMG,OAASc,EAC5CE,GAAUt3C,KAAK22C,YAAcR,EAAMK,OAASY,EAG9Cp3C,KAAK4zC,cAAcjzC,OAAS,GAG5BX,KAAK4zC,cAAc/xB,QAFnB7hB,KAAK4zC,cAAcpxC,KAAK60C,GAOxBr3C,KAAK42C,cAAcj2C,OAAS,GAG5BX,KAAK42C,cAAc/0B,QAFnB7hB,KAAK42C,cAAcp0C,KAAK80C,GAMhCt3C,KAAKy2C,eAAgB,IAAI7nC,MAAOC,UAChC7O,KAAKu3C,YAAcv3C,KAAK02C,YAAcP,EAAMG,MAC5Ct2C,KAAKw3C,YAAcx3C,KAAK22C,YAAcR,EAAMK,MAC5Cx2C,KAAK02C,YAAcP,EAAMG,MACzBt2C,KAAK22C,YAAcR,EAAMK,MAEzBx2C,KAAK62C,cAAgB72C,KAAKu3C,YAoBL,KAfjBN,EADA30B,KAAKukB,IAAI7mC,KAAK62C,cAAgB72C,KAAKwzC,kBAAoBxzC,KAAK82C,gBAC/C92C,KAAKy3C,UAAUz3C,KAAK80C,QAASqC,IAIrCn3C,KAAK82C,kBACN92C,KAAK+2C,iBAAmBz0B,KAAK2yB,KAAKiC,EAAQl3C,KAAK80C,SAC/C90C,KAAK82C,iBAAkB,GAKd92C,KAAKy3C,UAAUP,EAAQl3C,KAAK+2C,iBAAmB/2C,KAAKwzC,gBAC7D2D,KAGOpzB,GAA4B,IAAjBkzB,EAAWrf,IACjC53B,KAAKg3C,iBAAkB,GAIY,aAAnCh3C,KAAKs1C,2BACLt1C,KAAK41C,oBAAoBpV,KAIvB6S,EAAAnzC,UAAAk0C,WAAV,SAAqB5T,GACjB,GAAyB,mBAAdwV,UAAX,CAOA,QAJIqB,EAAS,EACTC,EAAS,EAGJ92C,EAAI,EAAGA,EAAIR,KAAK4zC,cAAcjzC,OAAQH,IAC3C62C,GAAUr3C,KAAK4zC,cAAepzC,GAC9B82C,GAAUt3C,KAAK42C,cAAep2C,GAElC62C,EAASr3C,KAAK4zC,cAAcjzC,OAAS02C,EAASr3C,KAAK4zC,cAAcjzC,OAAS,EAC1E22C,EAASt3C,KAAK4zC,cAAcjzC,OAAS22C,EAASt3C,KAAK42C,cAAcj2C,OAAS,GAGlD,GAAnB2hB,KAAKukB,IAAIwQ,IAAoC,GAAnB/0B,KAAKukB,IAAIyQ,MACM,EAA7Bh1B,KAAKukB,IAAI7mC,KAAKu3C,cAAiD,EAA7Bj1B,KAAKukB,IAAI7mC,KAAKw3C,eACrDx3C,KAAK03C,aAAaL,EAAQC,GAEC,aAAnCt3C,KAAKs1C,2BACLt1C,KAAK41C,oBAAoBpV,KAQvB6S,EAAAnzC,UAAAm0C,cAAV,SAAwB7T,GACpB,IAAKA,GAAgC,IAAtBA,EAAMmX,aAA2C,UAAtBnX,EAAMmX,aACvB,mBAAd3B,UACP,OAAO,EAENh2C,KAAKy0C,kCAIVjU,EAAMx/B,OAAOhB,KAAK6zC,wBAAwB7zC,KAAK43C,SAAWpX,EAAMqX,WAG3D73C,KAAK83C,iBACN93C,KAAK83C,eAAiB,IAAI9B,UAC1Bh2C,KAAK83C,eAAe92C,OAAShB,KAAKyhC,QAAQ5D,cAActD,eAAiBv6B,KAAKyhC,QAAQ5D,cAAc+C,YAExG5gC,KAAK83C,eAAeC,WAAW/3C,KAAK43C,YAO9BvE,EAAAnzC,UAAAo0C,YAAV,SAAsB9T,GAClB,IAAKxgC,KAAK43C,SACN,OAAO,EAEN53C,KAAKy0C,kCAIVjU,EAAMx/B,OAAQhB,KAAK+zC,4BAA6B/zC,KAAK43C,iBAE9C53C,KAAK43C,WAONvE,EAAAnzC,UAAAq0C,iBAAV,SAA2B/T,GACvB,GAAKxgC,KAAKy0C,gCAcV,OAXAz0C,KAAK80C,QAAU90C,KAAKy0C,gCAAgC3b,WACpD94B,KAAK+0C,QAAU/0C,KAAKy0C,gCAAgCxb,UAGpDj5B,KAAKq2C,aAAe7V,EAAMwX,QAC1Bh4C,KAAKu2C,aAAe/V,EAAMyX,QAG1Bj4C,KAAK62C,aAAe,EACpB72C,KAAK82C,iBAAkB,EACvB92C,KAAK+2C,iBAAmB,GACjB,GAOD1D,EAAAnzC,UAAAs0C,kBAAV,SAA4BhU,GACxB,GAAKxgC,KAAKy0C,gCAAV,KAGMyD,EAAW1X,EACb0W,EAAQl3C,KAAK80C,QAAU90C,KAAKq2C,aAAe6B,EAASF,QACpDb,EAAQn3C,KAAK+0C,QAAU/0C,KAAKu2C,aAAe2B,EAASD,QAexD,OAbAj4C,KAAK62C,aAAe72C,KAAKq2C,aAAe6B,EAASF,QAC7C11B,KAAKukB,IAAI7mC,KAAK62C,cAAgB72C,KAAKwzC,kBAAoBxzC,KAAK82C,gBAE5D92C,KAAK21C,WAAWwB,IAEXn3C,KAAK82C,kBACN92C,KAAK+2C,iBAAmBz0B,KAAK2yB,KAAKiC,EAAQl3C,KAAK80C,SAC/C90C,KAAK82C,iBAAkB,GAG3B92C,KAAKy3C,UAAUP,EAAQl3C,KAAK+2C,iBAAmB/2C,KAAKwzC,gBAAiB2D,KAGlE,IAGH9D,EAAAnzC,UAAAi1C,eAAR,SAAuBn0C,EAAQyhB,EAAKF,GAOhC,OANIvhB,IAAWgR,WAAahR,EAASyhB,EACjCzhB,EAASyhB,EACOF,EAATvhB,IACPA,EAASuhB,GAGNvhB,GAGHqyC,EAAAnzC,UAAAu3C,UAAR,SAAkBP,EAAOC,GACLn3C,KAAKy0C,gCAAgC3b,WACrC94B,KAAKy0C,gCAAgCxb,UAMrD,MAAO,CAAElV,EAHS/jB,KAAKu1C,WAAW2B,GAGXtf,EAFL53B,KAAK21C,WAAWwB,KAI9B9D,EAAAnzC,UAAAq1C,WAAR,SAAmB4C,GACfn4C,KAAKy0C,gCAAgC3b,WAAaqf,GAE9C9E,EAAAnzC,UAAAy1C,WAAR,SAAmBwC,GACfn4C,KAAKy0C,gCAAgCxb,UAAYkf,GAG5C9E,EAAAnzC,UAAAw3C,aAAV,SAAuBL,EAAQC,GAA/B,IAAA9lC,EAAAxR,KACOo4C,EAAcp4C,KAAKuzC,YACrBI,EAAkB3zC,KAAK2zC,gBACvB5vB,EAAI,EACR/jB,KAAKq4C,OAASr4C,KAAKy0C,gCAAgC3b,WACnD94B,KAAKs4C,OAASt4C,KAAKy0C,gCAAgCxb,cAG7Csa,EAAc,WACR,EAAJxvB,EACAkyB,qBAAqBzkC,EAAK0kC,sBAI1B5zB,KAAKukB,IAAIwQ,GAAU/0B,KAAKukB,IAAIyQ,IAC5BvzB,GAAK,KAAQ,EAAI4vB,KAKZ,GAEDrxB,KAAKukB,IAAIyQ,IAAWh1B,KAAKukB,IAAIwQ,GAAU7lC,EAAKiiC,gBAC5CjiC,EAAK6mC,QAAU,EAAIhB,EAAS,GAAKe,GAEjC91B,KAAKukB,IAAIyQ,IAAWh1B,KAAKukB,IAAIwQ,GAAU7lC,EAAKkiC,gBAC5CliC,EAAK8mC,QAAU,EAAIhB,EAAS,GAAKc,KAIjC91B,KAAKukB,IAAIyQ,IAAWh1B,KAAKukB,IAAIwQ,GAAU7lC,EAAKiiC,gBAC5CjiC,EAAK6mC,QAAU/1B,KAAKukB,IAAI,GAAK9iB,EAAI,KAAQ,IAAOszB,EAAS,GAAKe,GAE9D91B,KAAKukB,IAAIyQ,IAAWh1B,KAAKukB,IAAIwQ,GAAU7lC,EAAKkiC,gBAC5CliC,EAAK8mC,QAAUh2B,KAAKukB,IAAI,GAAK9iB,EAAI,KAAQ,IAAOuzB,EAAS,GAAKc,IAKtE5mC,EAAKimC,UAAUjmC,EAAK6mC,OAAQ7mC,EAAK8mC,QAEjC9mC,EAAK0kC,oBAAsBqC,sBAAsBhF,KAIrDvzC,KAAKk2C,oBAAsBqC,sBAAsBhF,IAGjDF,EAAAnzC,UAAAkkC,YAAA,WAAA,IAAA5yB,EAAAxR,KACIA,KAAK28B,MAAM+K,kBAAkB,eACnBsM,EAAaxiC,EAAKiwB,QAAQ5D,cAActD,eAAiB/oB,EAAKiwB,QAAQ5D,cAAc+C,WAC1FoT,EAAW/P,oBAAoB,QAC3B,SAACgQ,GAAUziC,EAAK02B,QAAQ+L,KAC5BD,EAAW/P,oBAAoB,aAC3B,SAACgQ,GAAUziC,EAAK0iC,aAAaD,KACjCD,EAAW/P,oBAAoB,YAC3B,SAACgQ,GAAUziC,EAAK2iC,YAAYF,KAChCD,EAAW/P,oBAAoB,WAC3B,SAACgQ,GAAUziC,EAAK4iC,WAAWH,KAC/BD,EAAW/P,oBAAoB,cAC3B,SAACgQ,GAAUziC,EAAK6iC,cAAcJ,KAClCD,EAAW/P,oBAAoB,YAC3B,SAACgQ,GAAUziC,EAAK8iC,YAAYL,KAChCD,EAAW/P,oBAAoB,iBAC3B,SAACgQ,GAAUziC,EAAK+iC,iBAAiBN,KACrCD,EAAW/P,oBAAoB,kBAC3B,SAACgQ,GAAUziC,EAAKgjC,kBAAkBP,4BAjejD/mC,EAAAA,UAAST,KAAA,CAAC,CAAEU,SAAU,kEANI8zB,EAAAA,kBAAY4D,EAAAA,6DAalCz3B,EAAAA,+CAGAA,EAAAA,yBAGAA,EAAAA,2BAGAA,EAAAA,+BAGAA,EAAAA,6BAGAA,EAAAA,6BAGAA,EAAAA,+BAGAA,EAAAA,SAycLimC,EAreA,GA0eAmF,GAAA,WAAA,SAAAA,KAOA,2BAPC/qC,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC2lC,IACf1lC,QAAS,CAAC0lC,IACVoF,QAAS,CAACC,EAAAA,kBAIdF,EAPA,GChfAG,GAAA,WAGA,SAAAA,IAKY34C,KAAA44C,QAAmD,IAAI7pC,WAKxD4pC,EAAAz4C,UAAA24C,SAAP,SAAgBC,GACZ,OAAO94C,KAAK44C,QAAQrsC,IAAIusC,EAAUC,2BAA6BD,GAM5DH,EAAAz4C,UAAA84C,UAAP,SAAiBF,EAAuCG,QAAA,IAAAA,IAAAA,GAAA,OAC9CC,EAAcJ,EAAUC,yBAC1BG,IAAgBD,GAAWj5C,KAAK44C,QAAQ/J,IAAIqK,IAC5Cl5C,KAAK44C,QAAQj4B,IAAIu4B,EAAaJ,IAO/BH,EAAAz4C,UAAAi5C,YAAP,WACIn5C,KAAK44C,QAAQtP,SAMVqP,EAAAz4C,UAAAk5C,WAAP,SAAkB/nC,GACd,OAAOrR,KAAK44C,QAAQrsC,IAAI8E,GAAK+nC,YAM1BT,EAAAz4C,UAAAm5C,UAAP,SAAiBhoC,GACb,OAAOrR,KAAK44C,QAAQrsC,IAAI8E,GAAKrE,MAAMqsC,+BA1C1Cr6B,EAAAA,WAAUvS,KAAA,CAAC,CACR63B,WAAY,gHAJhB,GCiCAgV,GAAA,WAuMI,SAAAA,EACY3G,EACE4G,EACAC,EACFC,EACDj7B,EACGme,GALF38B,KAAA2yC,eAAAA,EACE3yC,KAAAu5C,UAAAA,EACAv5C,KAAAw5C,SAAAA,EACFx5C,KAAAy5C,SAAAA,EACDz5C,KAAAwe,IAAAA,EACGxe,KAAA28B,MAAAA,EAvHP38B,KAAAgN,MAAqB,CACxBglC,WAAY,EACZqH,UAAW,GAQRr5C,KAAA05C,eAAyB,KAczB15C,KAAA25C,YAAc,IAAI5yB,EAAAA,aAclB/mB,KAAA45C,cAAgB,IAAI7yB,EAAAA,aAGpB/mB,KAAA65C,sBAAwB,IAAI9yB,EAAAA,aAe5B/mB,KAAA85C,eAAiB,IAAI/yB,EAAAA,aAIlB/mB,KAAA+5C,YAAwB,GAGxB/5C,KAAAg6C,QAAoC,KAEpCh6C,KAAAi6C,YAAc,GAEhBj6C,KAAAk6C,qBAAuB,EA6BrBl6C,KAAAm6C,YAAc,EAMhBn6C,KAAAo6C,iBAAmB,EAGjBp6C,KAAAq6C,eAAiB,EAGjBr6C,KAAAs6C,kBAAmB,EAGnBt6C,KAAAu6C,eAA8C,GA08B5D,OAp/BI/6C,OAAAgC,eAAc83C,EAAAp5C,UAAA,aAAU,KAAxB,WACI,OAAOF,KAAK+5C,iBAEhB,SAAyB53C,GACrBnC,KAAK+5C,YAAc53C,mCAGvB3C,OAAAgC,eAAY83C,EAAAp5C,UAAA,sBAAmB,KAA/B,WACI,IAAKF,KAAKw6C,oBACN,OAAO,MAELvhB,EAAYj5B,KAAKw6C,oBAAoBvhB,UACrCyP,EAAe1oC,KAAKw6C,oBAAoB9R,aAG9C,OAAOpmB,KAAK4iB,MAAMjM,EAAYj5B,KAAKy6C,uBAAyB/R,mCAGhElpC,OAAAgC,eAAY83C,EAAAp5C,UAAA,mBAAgB,KAA5B,WACI,OAAOF,KAAK06C,UAAY16C,KAAKgN,MAAMglC,WAAahyC,KAAKgN,MAAMqsC,UAAYr5C,KAAK06C,SAAS/5C,wCAoCzFnB,OAAAgC,eAAc83C,EAAAp5C,UAAA,WAAQ,KAAtB,WACI,OAA+B,OAAxBF,KAAK05C,gDAMNJ,EAAAp5C,UAAAy6C,2BAAV,WAAA,IAAAnpC,EAAAxR,KACI,GAAqC,eAAjCA,KAAK+4C,wBACL/4C,KAAK28B,MAAM+K,kBAAkB,WACzB,OAAAl2B,EAAKopC,sBAAsB3W,oBAAoB,SAAUzyB,EAAKqpC,YAE/D,KACGC,EAAW96C,KAAKw6C,oBAClBM,GACA96C,KAAK28B,MAAM+K,kBAAkB,WACzB,OAAAoT,EAAS7W,oBAAoB,SAAUzyB,EAAKupC,2BAMrDzB,EAAAp5C,UAAA66C,sBAAP,SAA6Bva,GACzBxgC,KAAKsnC,SAAS9G,IAGX8Y,EAAAp5C,UAAA86C,aAAP,WACI,OAAOh7C,KAAKi7C,GAAGjqC,SAASpF,OAAS8pC,SAAS11C,KAAKy6C,oBAAqB,KAMjEnB,EAAAp5C,UAAAusC,SAAP,WAAA,IAAAj7B,EAAAxR,KACQk7C,EAAY,EACVC,EAAKn7C,KAAKo7C,sBAAwBp7C,KAAKo7C,sBAAsBzI,eAAiB3yC,KAAK2yC,eACzF3yC,KAAKq7C,mBAAqBr7C,KAAKq7C,oBAAsB,YAE/CC,EAAyDt7C,KAAKy5C,SAASpY,wBAAwBqR,IAOrG,GANA1yC,KAAKu7C,GAAKv7C,KAAK2yC,eAAe6I,gBAAgBF,EAAW,GACzDt7C,KAAKu7C,GAAGvqC,SAASyqC,gBAAkBz7C,KAAK+4C,wBACf,mBAAd/C,YAEPh2C,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAMm9C,YAAc,QAE1E17C,KAAK06C,UAAY16C,KAAK06C,SAAS/5C,OAAQ,CACvCX,KAAKu7C,GAAGvqC,SAAS4hC,aAAe5yC,KAAKy6C,qBAAuBz6C,KAAKgN,MAAMqsC,UAAYr5C,KAAK06C,SAAS/5C,QACjGu6C,EAAYl7C,KAAK27C,eAAe37C,KAAK06C,UACrC16C,KAAK47C,QAAU57C,KAAK67C,WAAWV,EAAI,iCAC/Bn7C,KAAK47C,UACL57C,KAAKgN,MAAMglC,WAAahyC,KAAK87C,WAAW97C,KAAK47C,QAAQ9iB,WAAY94B,KAAKo5C,WAAY,IAEtFp5C,KAAKgN,MAAMqsC,UAAYr5C,KAAK+7C,sBAC5B,IAAK,IAAIv7C,EAAI,EAAGA,EAAIR,KAAKgN,MAAMqsC,WAAar5C,KAAK06C,SAASl6C,KAAOwR,UAAWxR,IAAK,KACvEw7C,EAAQh8C,KAAK06C,SAASl6C,GACtBy7C,EAAej8C,KAAKu7C,GAAGvqC,SAASkrC,KAAKC,mBACvCn8C,KAAKu5C,UACL,CAAE6C,UAAWJ,EAAOxpC,MAAOxS,KAAK06C,SAAS5qC,QAAQksC,KAErDh8C,KAAKu6C,eAAe/3C,KAAKy5C,IAIjC,GAAqC,aAAjCj8C,KAAK+4C,wBAAwC,CAC7C/4C,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM45B,IAAM,UAC5DkkB,EAAoDr8C,KAAKy5C,SAASpY,wBAAwB6R,IAChGlzC,KAAKi7C,GAAKE,EAAGK,gBAAgBa,GAE7Br8C,KAAKs8C,WAAat8C,KAAKu8C,wBACvBv8C,KAAKi7C,GAAGjqC,SAASpF,OAAS5L,KAAK06C,SAAW16C,KAAKw8C,cAAgB,EAC/Dx8C,KAAK28B,MAAM+K,kBAAkB,WACzBl2B,EAAKupC,sBAAwBvpC,EAAKupC,sBAAsB0B,KAAKjrC,GAC7DA,EAAKypC,GAAGjqC,SAAS4sB,WAAWC,cAAcsE,iBAAiB,SAAU3wB,EAAKupC,uBAC1EvpC,EAAK+pC,GAAGvqC,SAAS4pB,gBAAkBppB,EAAKypC,GAAGjqC,SAAS4sB,WAAWC,gBAIvE,GAAqC,eAAjC79B,KAAK+4C,wBAA0C,CAG/C,GAFA/4C,KAAK66C,KAAO,SAAC5G,GAAUziC,EAAKkrC,UAAUzI,IACtCj0C,KAAK47C,QAAU57C,KAAK67C,WAAWV,EAAI,iCAC9Bn7C,KAAK47C,QAWN57C,KAAK28B,MAAM+K,kBAAkB,WACzBl2B,EAAKoqC,QAAQzZ,iBAAiB,SAAU3wB,EAAKqpC,MAC7CrpC,EAAK+pC,GAAGvqC,SAAS4pB,gBAAkBppB,EAAKoqC,cAb7B,KACTe,EACF38C,KAAKy5C,SAASpY,wBAAwB2R,IAC1ChzC,KAAK48C,IAAMzB,EAAGK,gBAAgBmB,GAC9B38C,KAAK48C,IAAI5rC,SAAStB,MAAQwrC,EAC1Bl7C,KAAK47C,QAAU57C,KAAK48C,IAAI5rC,SAAS4sB,WAAWC,cAC5C79B,KAAK28B,MAAM+K,kBAAkB,WACzBl2B,EAAKorC,IAAI5rC,SAAS4sB,WAAWC,cAAcsE,iBAAiB,SAAU3wB,EAAKqpC,MAC3ErpC,EAAK+pC,GAAGvqC,SAAS4pB,gBAAkBppB,EAAKoqC,cAS1CiB,EAAe78C,KAAK47C,QAAQ9iB,YAC7B94B,KAAKo5C,YAAcp5C,KAAKo5C,WAAWz4C,OAASX,KAAKo5C,WAAWp5C,KAAKgN,MAAMglC,YAAc,GAC1FhyC,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM05B,MAAQ4kB,EAAe,OAOpFvD,EAAAp5C,UAAAkkC,YAAP,WACIpkC,KAAK26C,8BAMFrB,EAAAp5C,UAAA48C,YAAP,SAAmBC,OACTC,EAAQ,WACd,GAAIA,KAASD,EAAS,KACZ56C,EAAQ46C,EAAQC,GAAOC,aAC7B,IAAKj9C,KAAKg6C,SAAW73C,EACjB,IACInC,KAAKg6C,QAAUh6C,KAAKw5C,SAASxkC,KAAK7S,GAAOhC,OAAOH,KAAKk9C,eACvD,MAAO56C,GACL,MAAM,IAAIgM,MACN,2CAA2CnM,EAAK,cAAcg7C,GAAwBh7C,GAAM,0FAKtGi7C,EAAkB,iBACpBA,KAAmBL,IAAYA,EAAQK,GAAiBC,aAAgD,aAAjCr9C,KAAK+4C,yBAE5E/4C,KAAK27C,eAAe37C,KAAK06C,cAEvB4C,EAAgB,sBAClBA,KAAiBP,IAAYA,EAAQO,GAAeD,aAAer9C,KAAK06C,UACxE16C,KAAKu9C,yBAAyBR,IAO/BzD,EAAAp5C,UAAAmwC,UAAP,WAAA,IAAA7+B,EAAAxR,KACI,GAAIA,KAAKg6C,SACWh6C,KAAKg6C,QAAQwD,KAAKx9C,KAAK06C,UAC1B,CAET,IAAK16C,KAAK06C,SACN,OAEJ16C,KAAKy9C,mBACLz9C,KAAK28B,MAAM+gB,IAAI,WACXlsC,EAAKmsC,gBACLnsC,EAAKgN,IAAIC,eACTjN,EAAKosC,sBACLpsC,EAAKooC,cAAc3gC,WAa5BqgC,EAAAp5C,UAAA29C,aAAP,SAAoBC,GAChB,GAAe,IAAXA,GAAiD,eAAjC99C,KAAK+4C,wBACrB,OAAO,MAELgF,EAAwB/9C,KAAKq6C,eAC7BiD,EAAgB5H,SAAS11C,KAAKy6C,oBAAqB,IACnDuD,EAAmBh+C,KAAKm6C,YAAcmD,EAS5C,GAPAt9C,KAAKs6C,kBAAmB,EACxBt6C,KAAKq6C,gBAAkByD,EACvB99C,KAAKq6C,eAAuC,EAAtBr6C,KAAKq6C,eACtBr6C,KAAKq6C,eAAiB2D,EAAmBh+C,KAAKq6C,eAAiB2D,EAChE,EAEJh+C,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAAc5E,WAAa6kB,EAAS99C,KAAKo6C,iBACjE93B,KAAKukB,IAAIiX,EAAS99C,KAAKo6C,kBAAoB,EAAG,KAExCyC,EAAe78C,KAAKi+C,uBAAuBj+C,KAAKq6C,gBAEtDr6C,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM45B,KAAM,EAAkB,SAGlF0d,EAAe71C,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAAc5E,UACzDilB,EAAmBl+C,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAAc6K,aAAe4U,EAalF,OAZ2B,EAAtBt9C,KAAKq6C,gBAAuC,IAAjBxE,GAC3B71C,KAAKq6C,eAAiB2D,GAAoBnI,IAAiBqI,EAG5Dl+C,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAAc5E,UAAYj5B,KAAKq6C,eAAiBr6C,KAAKo6C,iBAClD,IAAxBp6C,KAAKq6C,gBAAuC,EAAfxE,EAEpC71C,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAAc5E,UAAY,EAC/Cj5B,KAAKq6C,iBAAmB2D,GAAoBnI,EAAeqI,IAElEl+C,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAAc5E,UAAYilB,GAEnDl+C,KAAKq6C,iBAAmB0D,GAU5BzE,EAAAp5C,UAAAi+C,SAAP,SAAgB3rC,GACZ,KAAIA,EAAQ,GAAKA,GAASxS,KAAKo+C,SAAWp+C,KAAK05C,eAAiB15C,KAAK06C,SAAS/5C,QAAU,GAAxF,KAGM28C,EAAgB5H,SAAS11C,KAAKy6C,oBAAqB,IACnD4D,EAAuC,eAAjCr+C,KAAK+4C,wBACb/4C,KAAK47C,QAAQ9iB,WAAa94B,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAAc5E,UAClEqlB,EAAa9rC,EAAQxS,KAAKgN,MAAMglC,YAAcqM,EAAMr+C,KAAKo5C,WAAW5mC,GACtE+rC,EAAaD,EAAat+C,KAAKo5C,WAAW5mC,GAASxS,KAAKo5C,WAAW5mC,EAAQ,GAAK8qC,EACpF,KAAIiB,EAAa,GAGjB,GAAqC,eAAjCv+C,KAAK+4C,wBACL/4C,KAAK47C,QAAQ9iB,WAAaylB,MACvB,KACGP,EAAmBh+C,KAAKm6C,YAAcmD,EAC3BU,EAAbO,IACAA,EAAaP,GAEjBh+C,KAAKs6C,kBAAmB,EACxBt6C,KAAKq6C,eAAiBkE,EACtBv+C,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAAc5E,UAAYj5B,KAAKq6C,eAAiBr6C,KAAKo6C,iBACjFp6C,KAAKw+C,eAAkBF,EAAqB,KAAR9rC,KAWrC8mC,EAAAp5C,UAAAu+C,WAAP,eACUJ,EAAM/7B,KAAKU,KAAsC,eAAjChjB,KAAK+4C,wBACvB/4C,KAAK47C,QAAQ9iB,WACb94B,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAAc5E,WACxCylB,EAAW1+C,KAAK87C,WAClBuC,EAAM3I,SAAS11C,KAAKy6C,oBAAqB,IACzCz6C,KAAKo5C,WACL,GAEJp5C,KAAKm+C,SAASO,IAUXpF,EAAAp5C,UAAAy+C,WAAP,WACI3+C,KAAKm+C,SAASn+C,KAAKgN,MAAMglC,WAAa,IAUnCsH,EAAAp5C,UAAA0+C,eAAP,WACyC,eAAjC5+C,KAAK+4C,wBACL/4C,KAAK48C,IAAI5rC,SAAS4sB,WAAWC,cAAc/E,YAAc4c,SAAS11C,KAAKy6C,oBAAqB,IAE5Fz6C,KAAK69C,aAAanI,SAAS11C,KAAKy6C,oBAAqB,MAWtDnB,EAAAp5C,UAAA2+C,eAAP,WACI,GAAqC,eAAjC7+C,KAAK+4C,wBACL/4C,KAAK48C,IAAI5rC,SAAS4sB,WAAWC,cAAc/E,YAAc4c,SAAS11C,KAAKy6C,oBAAqB,QACzF,KACG6C,EAAiB5H,SAAS11C,KAAKy6C,oBAAqB,IAC1Dz6C,KAAK69C,cAAcP,KAOpBhE,EAAAp5C,UAAA4+C,oBAAP,SAA2BC,GACvB,OAAO/+C,KAAKo5C,WAAW2F,IASpBzF,EAAAp5C,UAAAs6C,kBAAP,WACI,OAAIx6C,KAAKi7C,GACEj7C,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAEhC,MASJyb,EAAAp5C,UAAA8+C,mBAAP,eACU9kB,EAA4C,eAAjCl6B,KAAK+4C,wBAClB/4C,KAAK47C,QAAQ9iB,WACb94B,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAAc5E,UAC1C+Y,EAAahyC,KAAK87C,WAClB5hB,EACAl6B,KAAKo5C,WACL,GAWJ,OAT6C,EAAzClf,EAAWl6B,KAAKo5C,WAAWpH,IAE3BA,IAEahyC,KAAK87C,WAClB5hB,EAAWwb,SAAS11C,KAAKy6C,oBAAqB,IAC9Cz6C,KAAKo5C,WACL,GAEcpH,GASfsH,EAAAp5C,UAAA06C,oBAAP,WACI,OAAO56C,KAAK67C,WAAW77C,KAAK2yC,eAAgB,kCAAoC3yC,KAAK47C,SASlFtC,EAAAp5C,UAAA++C,UAAP,SAAiBzsC,GACb,OAAOxS,KAAKo5C,WAAW5mC,EAAQ,GAAKxS,KAAKo5C,WAAW5mC,IASjD8mC,EAAAp5C,UAAAg/C,kBAAP,SAAyB1sC,EAAewlB,OAC9BslB,EAAgB5H,SAAS11C,KAAKy6C,oBAAqB,IAEzD,OADeziB,EAASh4B,KAAKo5C,WAAW5mC,EAAQ,GAAK8qC,EAAgBt9C,KAAKo5C,WAAW5mC,IAQ/E8mC,EAAAp5C,UAAAonC,SAAV,SAAmB9G,GAAnB,IAAAhvB,EAAAxR,KAEI,GAAK01C,SAAS11C,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAAct/B,MAAMqN,OAAQ,IAAtE,KAIM0xC,EAAgB5H,SAAS11C,KAAKy6C,oBAAqB,IACnDyD,EAAmB1d,EAAMx/B,OAAOoP,SAAS,GAAGs4B,aAAe4U,EAC3D6B,EAAsB3e,EAAMx/B,OAAOi4B,UAAYilB,EACrD,GAAKl+C,KAAKs6C,iBAINt6C,KAAKs6C,kBAAmB,MAJA,KAClB0D,EAAmBh+C,KAAKm6C,YAAcmD,EAC5Ct9C,KAAKq6C,eAAiB8E,EAAsBnB,MAI1CoB,EAAiBp/C,KAAKgN,MAAMglC,WAC5B6K,EAAe78C,KAAKi+C,uBAAuBj+C,KAAKq6C,gBAEtDr6C,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM45B,KAAM,EAAkB,KAEpFogB,sBAAsB,WAElB/mC,EAAK6tC,sBAETr/C,KAAKu7C,GAAGvb,kBAAkBC,gBACtBmf,IAAmBp/C,KAAKgN,MAAMglC,YAC9BhyC,KAAK25C,YAAY1gC,KAAKjZ,KAAKgN,SAQ5BssC,EAAAp5C,UAAAm/C,kBAAP,WAKI,QAJM9vB,EAA6C,eAAjCvvB,KAAK+4C,wBACvB/4C,KAAKq7C,mBAAqB,SACpBiE,EAAQ,GACVC,EAAY,EACP/+C,EAAI,EAAGA,EAAIR,KAAKu6C,eAAe55C,OAAQH,IAAK,KAE3Cg/C,EADOx/C,KAAKu6C,eAAe/5C,GACdi/C,UAAUzqC,KAAK,SAAC3F,GAAS,OAAAA,EAAKqwC,WAAaC,KAAKC,eACnE,GAAIJ,EAAO,KACDK,EAAIL,EAAMzJ,aAAeyJ,EAAMzJ,aAAeL,SAAS11C,KAAK8/C,eAAgB,IAC5EttC,EAAQxS,KAAKgN,MAAMglC,WAAaxxC,EACtC,IAAKR,KAAKo+C,WAAap+C,KAAK06C,SAASloC,GACjC,aAEEutC,EAAuB,WAAdxwB,EAAyBvvB,KAAKi6C,YAAYznC,GAASxS,KAAK06C,SAASloC,GAAO+c,GACjFywB,EAAuB,WAAdzwB,EAAyBswB,EAAIL,EAAMhnB,YAChC,WAAdjJ,EACAvvB,KAAKi6C,YAAYznC,GAASwtC,EAE1BhgD,KAAK06C,SAASloC,GAAO+c,GAAaywB,MAEhCC,EAAWD,EAASD,EAC1BT,EAAM98C,KAAKy9C,GACXV,GAAaU,EACbjgD,KAAKo5C,WAAW5mC,EAAQ,IAAM+sC,GAItC,GAA0B,EAAtBj9B,KAAKukB,IAAI0Y,GAAgB,CACzB,IAAK,IAAItsC,EAAIjT,KAAKgN,MAAMglC,WAAahyC,KAAKgN,MAAMqsC,UAAY,EAAGpmC,EAAIjT,KAAKo5C,WAAWz4C,OAAQsS,IACvFjT,KAAKo5C,WAAWnmC,IAAMssC,EAI1B,GAAqC,eAAjCv/C,KAAK+4C,wBAA0C,KACzCmH,EAAaxK,SAAS11C,KAAK47C,QAAQxrC,SAAS,GAAG7R,MAAMmR,MAAO,IAAM6vC,EACxEv/C,KAAK47C,QAAQxrC,SAAS,GAAG7R,MAAMmR,MAAQwwC,EAAa,SAElDC,EAAU,SAACC,EAAK9gC,GAAQ,OAAA8gC,EAAM9gC,GACpC,GAAqC,aAAjCtf,KAAK+4C,wBAAwC,KACvCsH,EAAcrgD,KAAKsgD,sBAAwBtgD,KAAKu7C,GAAGvqC,SAAS4hC,WAC5D2N,EAAOvgD,KAAKi6C,YAAYnxB,OAAOq3B,GASrC,GARII,EAAOvgD,KAAKs8C,aACZt8C,KAAKo6C,iBAAmBmG,EAAOvgD,KAAKs8C,YAExCt8C,KAAKi7C,GAAGjqC,SAASpF,OAAS0W,KAAKG,IAAIziB,KAAKi7C,GAAGjqC,SAASpF,OAAS2zC,EAAWv/C,KAAKs8C,YAC7Et8C,KAAKm6C,YAAcoG,EACdvgD,KAAKi7C,GAAGjqC,SAASoiC,WAClBpzC,KAAKi7C,GAAGjqC,SAASwN,IAAIyhB,gBAErBogB,IAAgBrgD,KAAKwgD,iBAAkB,KACjClD,EAAgB5H,SAAS11C,KAAKy6C,oBAAqB,IACnDoC,EAAe78C,KAAKi+C,uBAAuBj+C,KAAKm6C,YAAcmD,GAEpE,YADAt9C,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM45B,KAAM,EAAkB,MAGxF,GAAIn4B,KAAKw+C,eAAgB,KAGfiC,EAAiBzgD,KAAKw+C,eAAiBx+C,KAAKgN,MAAMglC,WAAa,EAC/D0O,EAAWpB,EAAM58B,MAAM,EAAG+9B,GAAgB33B,OAAOq3B,GACjDQ,EAAajL,SAAS11C,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM45B,IAAK,IAC7Fn4B,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM45B,IAAOwoB,EAAaD,EAAY,KAC5F1gD,KAAKw+C,eAAiB,SAS5BlF,EAAAp5C,UAAA+9C,uBAAV,SAAiC2C,OACvB7wB,EAAQ/vB,KAAKo+C,SAAWp+C,KAAK05C,eAAiB15C,KAAK06C,SAAS/5C,OAC9DkgD,EAAW7gD,KAAK87C,WAChB8E,EACA5gD,KAAKo5C,WACL,GAEAyH,EAAW7gD,KAAKgN,MAAMqsC,UAAYtpB,IAClC8wB,EAAW9wB,EAAQ/vB,KAAKgN,MAAMqsC,eAE5ByH,EAAY9gD,KAAKgN,MAAMglC,WACvBwL,EAAOqD,EAAW7gD,KAAKgN,MAAMglC,WAenC,OAdAhyC,KAAKgN,MAAMglC,WAAa6O,EACpBrD,IACAx9C,KAAK85C,eAAe7gC,KAAKjZ,KAAKgN,OACzBhN,KAAKo+C,WAEK,EAAPZ,GAAYA,GAAQx9C,KAAKk6C,qBACzBl6C,KAAK+gD,oBAAoBD,GAClBtD,EAAO,GAAKl7B,KAAKukB,IAAI2W,IAASx9C,KAAKk6C,qBAC1Cl6C,KAAKghD,oBAAoBF,GAEzB9gD,KAAKihD,qBAIVL,EAAc5gD,KAAKo5C,WAAWp5C,KAAKgN,MAAMglC,aAO1CsH,EAAAp5C,UAAA6gD,oBAAV,SAA8BG,GAE1B,QADM1+B,EAAQ0+B,EAAYlhD,KAAKgN,MAAMqsC,UAC5B74C,EAAIgiB,EAAOhiB,EAAIgiB,EAAQxiB,KAAKgN,MAAMglC,WAAakP,GAAalhD,KAAK06C,SAASl6C,KAAOwR,UAAWxR,IAAK,KAChGw7C,EAAQh8C,KAAK06C,SAASl6C,GACtB2gD,EAAUnhD,KAAKu6C,eAAe14B,QAC9Bu/B,EAAOD,EAAQE,QACrBD,EAAKhF,UAAYJ,EACjBoF,EAAK5uC,MAAQxS,KAAKshD,gBAAgBtF,OAC5B71B,EAAgBnmB,KAAKu7C,GAAGvqC,SAASkrC,KAAKjhB,OAAO,GACnDj7B,KAAKu7C,GAAGvqC,SAASkrC,KAAKqF,OAAOp7B,GAC7BnmB,KAAKu6C,eAAe/3C,KAAK2+C,KAQvB7H,EAAAp5C,UAAA8gD,oBAAV,SAA8BE,GAC1B,IAAK,IAAI1gD,EAAI0gD,EAAY,EAAG1gD,GAAKR,KAAKgN,MAAMglC,YAAehyC,KAAK06C,SAASl6C,KAAOwR,UAAWxR,IAAK,KACtFw7C,EAAQh8C,KAAK06C,SAASl6C,GACtB2gD,EAAUnhD,KAAKu6C,eAAe9tB,MAC9B20B,EAAOD,EAAQE,QACrBD,EAAKhF,UAAYJ,EACjBoF,EAAK5uC,MAAQxS,KAAKshD,gBAAgBtF,OAC5B71B,EAAgBnmB,KAAKu7C,GAAGvqC,SAASkrC,KAAKjhB,OAAOj7B,KAAKu7C,GAAGvqC,SAASkrC,KAAKv7C,OAAS,GAClFX,KAAKu7C,GAAGvqC,SAASkrC,KAAKqF,OAAOp7B,EAAM,GACnCnmB,KAAKu6C,eAAez4B,QAAQq/B,KAO1B7H,EAAAp5C,UAAAohD,gBAAV,SAA0BtF,GACtB,OAAOh8C,KAAKo+C,SAAWp+C,KAAKgN,MAAMglC,WAAahyC,KAAK06C,SAAS5qC,QAAQksC,GAASh8C,KAAK06C,SAAS5qC,QAAQksC,IAO9F1C,EAAAp5C,UAAA+gD,iBAAV,WAGI,QAFIhuC,EAAI,EACFyrC,EAAW1+C,KAAKgN,MAAMglC,WAAahyC,KAAKgN,MAAMqsC,UAC3C74C,EAAIR,KAAKgN,MAAMglC,WAAYxxC,EAAIk+C,GAAY1+C,KAAK06C,SAASl6C,KAAOwR,UAAWxR,IAAK,KAC/Ew7C,EAAQh8C,KAAK06C,SAASl6C,GAEtB4gD,EADUphD,KAAKu6C,eAAetnC,KACWouC,QAC/CD,EAAKhF,UAAYJ,EACjBoF,EAAK5uC,MAAQxS,KAAKshD,gBAAgBtF,KAQhC1C,EAAAp5C,UAAAw8C,UAAV,SAAoBlc,GAEhB,GAAKkV,SAAS11C,KAAK47C,QAAQxrC,SAAS,GAAG7R,MAAMmR,MAAO,IAApD,KAGM8lC,EAAgBhV,EAAMx/B,OAAO83B,WAC7BsmB,EAAiBp/C,KAAKgN,MAAMglC,WAE5B6K,EAAe78C,KAAKi+C,uBAAuBzI,GACjDx1C,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM05B,MAAQ4kB,EAAe,KAEnF78C,KAAKu7C,GAAGvb,kBAAkBC,gBACtBmf,IAAmBp/C,KAAKgN,MAAMglC,YAC9BhyC,KAAK25C,YAAY1gC,KAAKjZ,KAAKgN,SAcnCxN,OAAAgC,eACI83C,EAAAp5C,UAAA,gBAAa,KADjB,WAC0C,OAAOF,KAAKwhD,gBAatD,SAAkBC,GAA0BzhD,KAAKwhD,WAAaC,mCAKpDnI,EAAAp5C,UAAAy9C,cAAV,eACU+D,EAAgB1hD,KAAKgN,MAAMqsC,UAGjC,GAFAr5C,KAAK2hD,uBACL3hD,KAAK4hD,uBACD5hD,KAAK06C,UAAY16C,KAAK06C,SAAS/5C,QAAUX,KAAKu7C,GAAI,KAC5CsG,EAAmBriD,OAAOa,OAAO,GAAIL,KAAKu6C,gBAC5CvI,EAAahyC,KAAKgN,MAAMglC,WACxB0M,EAAW1+C,KAAKgN,MAAMqsC,UAAYr5C,KAAKgN,MAAMglC,WAC7ChyC,KAAKo+C,WACLpM,EAAa,EACb0M,EAAW1+C,KAAK06C,SAAS/5C,QAE7B,IAAK,IAAIH,EAAIwxC,EAAYxxC,EAAIk+C,GAAY1+C,KAAK06C,SAASl6C,KAAOwR,UAAWxR,IAAK,KACpEw7C,EAAQh8C,KAAK06C,SAASl6C,GAEtB4gD,EADUS,EAAiBhgC,QACcw/B,QAC/CD,EAAKhF,UAAYJ,EACjBoF,EAAK5uC,MAAQxS,KAAKshD,gBAAgBtF,GAEtCh8C,KAAKu7C,GAAGvb,kBAAkBC,gBACtByhB,IAAkB1hD,KAAKgN,MAAMqsC,WAC7Br5C,KAAK25C,YAAY1gC,KAAKjZ,KAAKgN,OAEM,aAAjChN,KAAK+4C,yBACL/4C,KAAKq/C,sBAQP/F,EAAAp5C,UAAAq8C,sBAAV,eACUuF,EAAM58B,SAASC,cAAc,OAC7B5mB,EAAQujD,EAAIvjD,MAClBA,EAAM27B,SAAW,WACjB37B,EAAM45B,IAAM,qBACZjT,SAASS,KAAKC,YAAYk8B,OACpB1nB,EAAO9X,KAAKukB,IAAIib,EAAInyC,wBAA6B,KAEvD,OADAuV,SAASS,KAAKG,YAAYg8B,GACnB1nB,GAQDkf,EAAAp5C,UAAA67C,oBAAV,eACQ1C,EAAY,EAchB,OAbiC,OAA7Br5C,KAAKy6C,qBAAgCz6C,KAAKy6C,sBAAwBzoC,WAC7DhS,KAAKo5C,YACNp5C,KAAK27C,eAAe37C,KAAK06C,UAE7BrB,EAAYr5C,KAAK+hD,oBACb/hD,KAAK06C,UAAYrB,EAAYr5C,KAAK06C,SAAS/5C,SAC3C04C,EAAYr5C,KAAK06C,SAAS/5C,SAG1BX,KAAK06C,WACLrB,EAAYr5C,KAAK06C,SAAS/5C,QAG3B04C,GAMDC,EAAAp5C,UAAA27C,WAAV,SAAqBmG,EAASC,OACpBC,EAAOF,EAAQvgB,QAAQ5D,cAAc+C,WAAWuhB,qBAAqBF,GAC3E,OAAqB,EAAdC,EAAKvhD,OAAauhD,EAAK,GAAK,MAM7B5I,EAAAp5C,UAAAy7C,eAAV,SAAyBxL,OACjB+K,EAAY,EACZ9gB,EAAO,EACL7K,EAA6C,eAAjCvvB,KAAK+4C,wBACnB/4C,KAAKq7C,mBAAqB,SAC1B76C,EAAI,EACRR,KAAKo5C,WAAa,GAClBp5C,KAAKi6C,YAAc,GACnBj6C,KAAKo5C,WAAW52C,KAAK,GAErB,QADMutB,EAAQ/vB,KAAKo+C,SAAWp+C,KAAK05C,eAAiBvJ,EAAMxvC,OAClDH,EAAIuvB,EAAOvvB,IACG,WAAd+uB,GAEA6K,EAAOsb,SAAS11C,KAAK8/C,eAAgB,KAAO,EAC5C9/C,KAAKi6C,YAAYz3C,KAAK43B,IAEtBA,EAAOp6B,KAAKoiD,aAAajS,EAAM3vC,GAAI+uB,GAEvC2rB,GAAa9gB,EACbp6B,KAAKo5C,WAAW52C,KAAK04C,GAEzB,OAAOA,GAGD5B,EAAAp5C,UAAAu9C,iBAAV,WACI,GAAqC,eAAjCz9C,KAAK+4C,wBAAT,KAIMsF,EAAMr+C,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAKlC2f,GAHsC,EAA1Bx9C,KAAKi6C,YAAYt5C,OAAaX,KAAKi6C,YAAYnxB,OAAO,SAACs3B,EAAK9gC,GAAQ,OAAA8gC,EAAM9gC,IAAO,GAChFtf,KAAK27C,eAAe37C,KAAK06C,UAM5C,GAAqB,EAAjBp4B,KAAKukB,IAAI2W,IAA6B,EAAhBa,EAAIplB,UAAe,CACzCj5B,KAAKq/C,wBACCr8C,EAAS0yC,SAAS11C,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM45B,IAAK,IACzFkmB,EAAIplB,UAAYj5B,KAAKo5C,WAAWp5C,KAAKgN,MAAMglC,YAAchvC,QAfzDhD,KAAK27C,eAAe37C,KAAK06C,WAsBvBpB,EAAAp5C,UAAA6hD,kBAAV,WAAA,IAAAvwC,EAAAxR,KACQQ,EAAI,EACJG,EAAS,EACT0hD,EAAY,EACVr0C,EAAM,GACRs0C,EAAM,EACJC,EAAgB7M,SAAS11C,KAAKy6C,oBAAqB,IACzD,IAAK8H,EACD,OAAO,EAKX,QAHMhzB,EAA6C,eAAjCvvB,KAAK+4C,wBACvB/4C,KAAKq7C,mBAAqB,SACpB8E,EAAU,SAACqC,EAAaC,GAAgB,OAAAD,EAAchxC,EAAK4wC,aAAaK,EAAalzB,IACnF/uB,EAAIR,KAAK06C,SAAS/5C,OAAQH,IAAK,KAC/B+iB,EAAOvjB,KAAK06C,SAASl6C,GACP,WAAd+uB,IACAhM,EAAO,CAAEphB,MAAOnC,KAAK06C,SAASl6C,GAAIoL,OAAQ5L,KAAKi6C,YAAYz5C,SAEzD45B,EAAqB,WAAd7K,EACTvvB,KAAKi6C,YAAYz5C,GACjBR,KAAKoiD,aAAa7+B,EAAMgM,GAE5B,IADA+yB,EAAMt0C,EAAI8a,OAAOq3B,EAAS/lB,IAChBmoB,GAGN,GAFAv0C,EAAIxL,KAAK+gB,GACT5iB,EAASqN,EAAIrN,OACTH,IAAMR,KAAK06C,SAAS/5C,OAAS,EAK7B,QAFI+hD,EAAwB,WAAdnzB,EAAyBvhB,EAAI,GAAG7L,MAAQ6L,EAAI,GACtDkzC,EAAYlhD,KAAK06C,SAAS5qC,QAAQ4yC,GAAW,EAC7B,GAAbxB,GAAkBoB,GAAOC,GAAe,CAC3CG,EAAwB,WAAdnzB,EAAyBvhB,EAAI,GAAG7L,MAAQ6L,EAAI,GACtDkzC,EAAYlhD,KAAK06C,SAAS5qC,QAAQ4yC,GAAW,MACvCC,EAAW3iD,KAAK06C,SAASwG,GACzB0B,EAAyB,WAAdrzB,EACbvvB,KAAKi6C,YAAYiH,GACjBxL,SAASiN,EAASpzB,GAAY,IAClC+yB,EAAMt0C,EAAI8a,OAAOq3B,EAASyC,GAC1B50C,EAAI8T,QAAQ6gC,GACZhiD,EAASqN,EAAIrN,aAIrBqN,EAAIxL,KAAK+gB,GACT5iB,EAASqN,EAAIrN,OAAS,EACtBqN,EAAI6T,QAEKwgC,EAAT1hD,IACA0hD,EAAY1hD,GAGpB,OAAO0hD,GAMD/I,EAAAp5C,UAAA47C,WAAV,SAAqB7jB,EAAMtX,EAAKnO,OACxBgQ,EAAQ,EACRnL,EAAMsJ,EAAIhgB,OAAS,EACvB,GAAa,IAATs3B,EACA,OAAO,EAEX,KAAOzV,GAASnL,GAAK,KACXwrC,EAASvgC,KAAKmC,OAAOjC,EAAQnL,GAAO,GAEpCyrC,EAAM7qB,EADItX,EAAIkiC,GAEpB,GAAU,EAANC,EACAtgC,EAAQqgC,EAAS,MACd,CAAA,KAAIC,EAAM,GAGb,OAAOD,EAFPxrC,EAAMwrC,EAAS,GAKvB,OAAOxrC,GAGDiiC,EAAAp5C,UAAA0hD,qBAAV,eACU7xB,EAAQ/vB,KAAKo+C,SAAWp+C,KAAK05C,eAAkB15C,KAAK06C,SAAW16C,KAAK06C,SAAS/5C,OAAS,EAE5F,GADAX,KAAKu7C,GAAGvqC,SAAS4hC,aAAe5yC,KAAKy6C,qBAAuBz6C,KAAKu7C,IAAMv7C,KAAKgN,MAAMqsC,UAAYtpB,GACzD,eAAjC/vB,KAAK+4C,wBAA0C,KACzCmH,EAAalgD,KAAKy6C,oBAAsBz6C,KAAK27C,eAAe37C,KAAK06C,UAAY,EACnF16C,KAAK47C,QAAQr9C,MAAMmR,MAAQ1P,KAAKy6C,oBAAsB,KACtDz6C,KAAK47C,QAAQxrC,SAAS,GAAG7R,MAAMmR,MAAQwwC,EAAa,KAEnB,aAAjClgD,KAAK+4C,0BACL/4C,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAAct/B,MAAMqN,OAAS8pC,SAAS11C,KAAKy6C,oBAAqB,IAAM,KAClGz6C,KAAKi7C,GAAGjqC,SAASpF,OAAS5L,KAAKw8C,gBAI7BlD,EAAAp5C,UAAAs8C,YAAV,eACQ5wC,EAWJ,OATIA,EADA5L,KAAKi6C,YACIj6C,KAAKi6C,YAAYnxB,OAAO,SAACs3B,EAAK9gC,GAAQ,OAAA8gC,EAAM9gC,GAAK,GAEjDtf,KAAK27C,eAAe37C,KAAK06C,WAEtC16C,KAAKm6C,YAAcvuC,GACN5L,KAAKs8C,aACdt8C,KAAKo6C,iBAAmBxuC,EAAS5L,KAAKs8C,WACtC1wC,EAAS5L,KAAKs8C,YAEX1wC,GAGD0tC,EAAAp5C,UAAAq9C,yBAAV,SAAmCR,GAC/B/8C,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM45B,IAAM,MAClEn4B,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM05B,KAAO,UAC7DypB,EAAgB1hD,KAAKgN,MAAMqsC,UAMjC,GALAr5C,KAAK2hD,uBACL3hD,KAAK4hD,uBACDF,IAAkB1hD,KAAKgN,MAAMqsC,WAC7Br5C,KAAK25C,YAAY1gC,KAAKjZ,KAAKgN,OAE3BhN,KAAKo5C,YAAcp5C,KAAK47C,SAAuC,IAA5B57C,KAAK47C,QAAQ9iB,WAAkB,KAE5D+jB,EAAe78C,KAAKi+C,uBAAuBj+C,KAAK47C,QAAQ9iB,YAC9D94B,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM05B,MAAQ4kB,EAAe,OAQjFvD,EAAAp5C,UAAA6iD,eAAV,eACUC,EAAUhjD,KAAKu6C,eAAe9tB,MACpCzsB,KAAK65C,sBAAsB5gC,KAAK+pC,GAChCA,EAAQtjB,UAER1/B,KAAKgN,MAAMqsC,aAOLC,EAAAp5C,UAAA+iD,YAAV,WAAA,IAAAzxC,EAAAxR,KACQkjD,EAAYljD,KAAKgN,MAAMglC,WAAahyC,KAAKgN,MAAMqsC,UACnD,GAAKr5C,KAAKo+C,UAAap+C,KAAK06C,SAA5B,CAIIwI,GAAaljD,KAAK06C,SAAS/5C,SAC3BuiD,EAAYljD,KAAK06C,SAAS/5C,OAASX,KAAKgN,MAAMqsC,eAE5C2C,EAAQh8C,KAAK06C,SAASwI,GACtBjH,EAAej8C,KAAKu7C,GAAGvqC,SAASkrC,KAAKC,mBACvCn8C,KAAKu5C,UACL,CAAE6C,UAAWJ,EAAOxpC,MAAO0wC,IAG/BljD,KAAKu6C,eAAe/3C,KAAKy5C,GACzBj8C,KAAKgN,MAAMqsC,YAEXr5C,KAAK28B,MAAM+gB,IAAI,WACXlsC,EAAKgN,IAAIC,mBAQP66B,EAAAp5C,UAAAyhD,qBAAV,eACUtI,EAAYr5C,KAAKo+C,SAAYp+C,KAAK06C,SAAW16C,KAAK06C,SAAS/5C,OAAS,EAAKX,KAAK+7C,sBACpF,GAAI1C,EAAYr5C,KAAKgN,MAAMqsC,UAEvB,QADMmE,EAAOnE,EAAYr5C,KAAKgN,MAAMqsC,UAC3B74C,EAAI,EAAGA,EAAIg9C,EAAMh9C,IACtBR,KAAKijD,mBAEN,GAAI5J,EAAYr5C,KAAKgN,MAAMqsC,UAE9B,IADMmE,EAAOx9C,KAAKgN,MAAMqsC,UAAYA,EAC3B74C,EAAI,EAAGA,EAAIg9C,EAAMh9C,IACtBR,KAAK+iD,kBAKPzJ,EAAAp5C,UAAA09C,oBAAV,WACyC,eAAjC59C,KAAK+4C,wBACL/4C,KAAKmjD,uBAELnjD,KAAKojD,wBAGL9J,EAAAp5C,UAAAkjD,qBAAR,eACQvG,EACEwG,EAAUrjD,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAC5Cgf,EAAewG,GAAW3N,SAAS2N,EAAQ9kD,MAAMqN,OAAQ,IACrDy3C,EAAQpqB,UAAYj5B,KAAKo5C,WAAWp5C,KAAKgN,MAAMglC,YAAc,EACjEhyC,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM45B,KAAM,EAAkB,MAEhFmhB,EAAAp5C,UAAAijD,qBAAR,eACQtG,EACJA,EAAe78C,KAAK47C,SAAWlG,SAAS11C,KAAK47C,QAAQxrC,SAAS,GAAG7R,MAAMmR,MAAO,IAC1E1P,KAAK47C,QAAQ9iB,WAAa94B,KAAKo5C,WAAWp5C,KAAKgN,MAAMglC,YAAc,EACvEhyC,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM05B,MAAQ4kB,EAAe,MAG/EvD,EAAAp5C,UAAAkiD,aAAR,SAAqB7+B,EAAMgM,GAEvB,OAD0C,OAApBhM,EAAKgM,IAAuBhM,EAAKgM,KAAevd,UAChD0jC,SAASnyB,EAAKgM,GAAY,IAAMvvB,KAAK8/C,oCA7oClE5yC,EAAAA,UAAST,KAAA,CAAC,CAAEU,SAAU,kEAVnB0lC,EAAAA,wBAFAyQ,EAAAA,mBARAC,EAAAA,uBATAhf,EAAAA,gCAFAsI,EAAAA,yBAaAhI,EAAAA,4CA2BCz3B,EAAAA,kCAMAA,EAAAA,uCAUAA,EAAAA,qCAsBAA,EAAAA,mCAYAA,EAAAA,8BAUAA,EAAAA,2BAwCAkc,EAAAA,8BAcAA,EAAAA,sCAGAA,EAAAA,+BAeAA,EAAAA,8BAoqBAlc,EAAAA,SA8VLksC,EA/oCA,GAipCA,SAAgB6D,GAAwBzmC,GAEpC,OAAOA,EAAS,aAAYA,EAQhC,IAAA8sC,GAAA,SAAA33B,GAKI,SAAA23B,EACI7Q,EACA4G,EACAC,EACAC,EACAj7B,EACAme,EACU8mB,GAPd,IAAAjyC,EAQQqa,EAAAjrB,KAAAZ,KAAM2yC,EAAgB4G,EAAWC,EAAUC,EAAUj7B,EAAKme,IAAM38B,YAD1DwR,EAAAiyC,YAAAA,IAiUlB,OA1U8CjvC,EAAAA,EAAAA,GAa1ChV,OAAAgC,eACIgiD,EAAAtjD,UAAA,eAAY,KAIhB,WACI,OAAOF,KAAK06C,cANhB,SACiBv4C,GACbnC,KAAK06C,SAAWv4C,mCAOpBqhD,EAAAtjD,UAAAusC,SAAA,WACIzsC,KAAKyjD,YAAYzK,UAAUh5C,MAC3B6rB,EAAA3rB,UAAMusC,SAAQ7rC,KAAAZ,MACdA,KAAK26C,8BAGT6I,EAAAtjD,UAAA48C,YAAA,SAAYC,OACFC,EAAQ,eAEd,GADAh9C,KAAKyjD,YAAYzK,UAAUh5C,MACvBg9C,KAASD,EAAS,KACZ56C,EAAQ46C,EAAQC,GAAOC,aAC7B,IAAKj9C,KAAKg6C,SAAW73C,EACjB,IACInC,KAAKg6C,QAAUh6C,KAAKw5C,SAASxkC,KAAK7S,GAAOhC,OAAOH,KAAKk9C,eACvD,MAAO56C,GACL,MAAM,IAAIgM,MACN,2CAA2CnM,EAAK,cAAcg7C,GAAwBh7C,GAAM,0FAKtGi7C,EAAkB,iBACpBA,KAAmBL,IAAYA,EAAQK,GAAiBC,aAAgD,aAAjCr9C,KAAK+4C,yBAE5E/4C,KAAK27C,eAAe37C,KAAK06C,cAEvB4C,EAAgB,sBAClBA,KAAiBP,IAAYA,EAAQO,GAAeD,aAAer9C,KAAK06C,UACxE16C,KAAKu9C,yBAAyBR,IAQtCv9C,OAAAgC,eAAWgiD,EAAAtjD,UAAA,aAAU,KAArB,WACI,OAAIF,KAAKyjD,YAAY5K,SAAS74C,MACnBA,KAAK+5C,YAET/5C,KAAKyjD,YAAYrK,WAAWp5C,KAAK+4C,8BAM5C,SAAsB52C,GAClBnC,KAAK+5C,YAAc53C,mCAGvB3C,OAAAgC,eAAcgiD,EAAAtjD,UAAA,iBAAc,KAA5B,WACI,MAAwC,eAAjCF,KAAK+4C,wBAA2C/4C,KAAKq7C,mBAAqB,0CAG3EmI,EAAAtjD,UAAAwjD,YAAV,SAAsBngC,OACd6W,EAAO,EACL7K,EAA6C,eAAjCvvB,KAAK+4C,wBACnB/4C,KAAKq7C,mBAAqB,SAW9B,MAVkB,WAAd9rB,GACA6K,EAAOsb,SAAS11C,KAAK8/C,eAAgB,KAAO,EACxCv8B,GAAQA,EAAKogC,UACbvpB,EAAO7W,EAAKhB,IACLgB,GAAQA,EAAKtP,QAAUsP,EAAK3X,SACnCwuB,EAAO7W,EAAK3X,SAGhBwuB,EAAOsb,SAASnyB,EAAKgM,GAAY,KAAO,EAErC6K,GAGDopB,EAAAtjD,UAAAy7C,eAAV,SAAyBxL,GACrB,IAAKnwC,KAAKyjD,YAAY5K,SAAS74C,MAAO,KAC5B4jD,EAAmB5jD,KAAKyjD,YAAYrK,WAAWp5C,KAAK+4C,yBAC1D,OAAO6K,EAAiBA,EAAiBjjD,OAAS,OAElDu6C,EAAY,EACZ9gB,EAAO,EACP55B,EAAI,EACRR,KAAKo5C,WAAa,GAClBp5C,KAAKi6C,YAAc,GACnBj6C,KAAKo5C,WAAW52C,KAAK,GAErB,QADMutB,EAAQ/vB,KAAKo+C,SAAWp+C,KAAK05C,eAAiBvJ,EAAMxvC,OAClDH,EAAIuvB,EAAOvvB,IACf45B,EAAOp6B,KAAK0jD,YAAYvT,EAAM3vC,IACF,WAAxBR,KAAK6jD,gBACL7jD,KAAKi6C,YAAYz3C,KAAK43B,GAE1B8gB,GAAa9gB,EACbp6B,KAAKo5C,WAAW52C,KAAK04C,GAEzB,OAAOA,GAGDsI,EAAAtjD,UAAAu9C,iBAAV,SAA2BV,GAA3B,IAAAvrC,EAAAxR,KACI,QADuB,IAAA+8C,IAAAA,EAAA,MACc,eAAjC/8C,KAAK+4C,wBAAT,KAIMsF,EAAMr+C,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAElCimB,EAAsC,EAA1B9jD,KAAKi6C,YAAYt5C,OAAaX,KAAKi6C,YAAYnxB,OAAO,SAACs3B,EAAK9gC,GAAQ,OAAA8gC,EAAM9gC,IAAO,EAQ7Fk+B,EAAOsG,GANT/G,IAAY/8C,KAAKo+C,SACLp+C,KAAK+jD,mBAAmBhH,GAExB/8C,KAAK27C,eAAe37C,KAAK06C,WAOpB,EAAjBp4B,KAAKukB,IAAI2W,IACTjF,sBAAsB,WAClB/mC,EAAK6tC,wBACCr8C,EAAS0yC,SAASlkC,EAAK+pC,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM45B,IAAK,IACnE,IAAlBkmB,EAAIplB,UACJolB,EAAIplB,UAAYznB,EAAK4nC,WAAW5nC,EAAKxE,MAAMglC,YAAchvC,EAEzDwO,EAAKosC,6BAxBb59C,KAAK27C,eAAe37C,KAAK06C,WA8BvB8I,EAAAtjD,UAAA6jD,mBAAV,SAA6BhH,GAA7B,IAAAvrC,EAAAxR,KACUgkD,EAAkB,GAClBC,EAAiB,GACjBC,EAAgB,GACtBA,EAAc1hD,KAAK,OACf2hD,EAAY,EAGZC,EAAkB,EA4BtB,OA3BArH,EAAQsH,mBAAmB,WAAM,OAAAD,MAGjCrH,EAAQuH,sBAAsB,SAAC/gC,GACvBA,EAAKquB,eAAiBruB,EAAKghC,gBAE3BP,EAAgBzgC,EAAKquB,cAAgBruB,KAK7Cw5B,EAAQyH,YAAY,SAACjhC,GACU,OAAvBA,EAAKghC,gBACJH,EAAkB,IAAMJ,EAAgBrjD,QAAUqjD,EAAgBzgC,EAAKquB,eAIxEqS,EAAe1gC,EAAKquB,cAAgBpgC,EAAKyoC,YAAY12B,EAAKghC,eAG1DN,EAAe1gC,EAAKquB,cAAgBpgC,EAAKkyC,YAAYngC,EAAKA,MAE9D2gC,EAAc3gC,EAAKquB,aAAe,GAAKsS,EAAc3gC,EAAKquB,cAAgBqS,EAAe1gC,EAAKquB,cAC9FuS,GAAaF,EAAe1gC,EAAKquB,gBAErC5xC,KAAKi6C,YAAcgK,EACnBjkD,KAAKo5C,WAAa8K,EACXC,GAOJX,EAAAtjD,UAAAukD,aAAP,WACIzkD,KAAK+5C,YAAc/5C,KAAKyjD,YAAYrK,WAAWp5C,KAAK+4C,yBACpD/4C,KAAKyjD,YAAYzK,UAAUh5C,MAAM,IAGrCwjD,EAAAtjD,UAAAmwC,UAAA,WACI,GAAIrwC,KAAKg6C,QAAS,KACR+C,EAAU/8C,KAAKg6C,QAAQwD,KAAKx9C,KAAK06C,UACvC,GAAIqC,EAAS,CAET,IAAK/8C,KAAK06C,SACN,OAKC16C,KAAK06C,SAAS/5C,QACkB,aAAjCX,KAAK+4C,yBACL/4C,KAAKyjD,YAAYtK,cAErBn5C,KAAKyjD,YAAYzK,UAAUh5C,MAC3BA,KAAKy9C,iBAAiBV,GACtB/8C,KAAK29C,gBACL39C,KAAK49C,sBACL59C,KAAK45C,cAAc3gC,UAK/BuqC,EAAAtjD,UAAAonC,SAAA,SAAS9G,GAAT,IAAAhvB,EAAAxR,KACI,GAAK01C,SAAS11C,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAAct/B,MAAMqN,OAAQ,IAAtE,KAIM0xC,EAAgB5H,SAAS11C,KAAKy6C,oBAAqB,IACnDyD,EAAmB1d,EAAMx/B,OAAOoP,SAAS,GAAGs4B,aAAe4U,EAC3D6B,EAAsB3e,EAAMx/B,OAAOi4B,UAAYilB,EACrD,GAAKl+C,KAAKs6C,iBAINt6C,KAAKs6C,kBAAmB,MAJA,KAClB0D,EAAmBh+C,KAAKm6C,YAAcmD,EAC5Ct9C,KAAKq6C,eAAiB8E,EAAsBnB,MAK1CnB,EAAe78C,KAAKi+C,uBAAuBj+C,KAAKq6C,gBAEtDr6C,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM45B,KAAM,EAAkB,KACpFogB,sBAAsB,WAClB/mC,EAAK6tC,wBAIbmE,EAAAtjD,UAAAw8C,UAAA,SAAUgI,GAEN,GAAK1kD,KAAK47C,SAAYlG,SAAS11C,KAAK47C,QAAQxrC,SAAS,GAAG7R,MAAMmR,MAAO,IAArE,KAKMmtC,EAAe78C,KAAKi+C,uBAAuByG,GACjD1kD,KAAKu7C,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM05B,MAAQ4kB,EAAe,OAG7E2G,EAAAtjD,UAAA+iD,YAAV,eACQC,EAAYljD,KAAKgN,MAAMglC,WAAahyC,KAAKgN,MAAMqsC,UACnD,GAAKr5C,KAAKo+C,UAAap+C,KAAK06C,SAA5B,CAIIwI,GAAaljD,KAAK06C,SAAS/5C,SAC3BuiD,EAAYljD,KAAK06C,SAAS/5C,OAASX,KAAKgN,MAAMqsC,eAE5C2C,EAAQh8C,KAAK06C,SAASwI,GACtBjH,EAAej8C,KAAKu7C,GAAGvqC,SAASkrC,KAAKC,mBACvCn8C,KAAKu5C,UACL,CAAE6C,UAAWJ,EAAOxpC,MAAO0wC,IAG/BljD,KAAKu6C,eAAe/3C,KAAKy5C,GACzBj8C,KAAKgN,MAAMqsC,cAGLmK,EAAAtjD,UAAAykD,aAAV,SAAuBjD,GAAvB,IAAAlwC,EAAAxR,KACI,GAAIA,KAAK06C,UAAY16C,KAAK06C,SAAS/5C,QAAUX,KAAKu7C,GAAI,KAC5CsG,EAAmBriD,OAAOa,OAAO,GAAIL,KAAKu6C,gBAC5CvI,OAAU,EACV0M,OAAQ,EACZ,GAAI1+C,KAAKo+C,SACLpM,EAAa,EACb0M,EAAW1+C,KAAK06C,SAAS/5C,WACtB,KACGigD,EAA+C,eAAjC5gD,KAAK+4C,wBACrB/4C,KAAK47C,QAAQ9iB,WACb94B,KAAKi7C,GAAGjqC,SAAS4sB,WAAWC,cAAc5E,WAC9C+Y,EAAahyC,KAAK87C,WACd8E,EACA5gD,KAAKo5C,WACL,IAEap5C,KAAKgN,MAAMqsC,UAAYr5C,KAAK06C,SAAS/5C,SAClDqxC,EAAahyC,KAAK06C,SAAS/5C,OAASX,KAAKgN,MAAMqsC,WAEnDr5C,KAAKgN,MAAMglC,WAAaA,EACxB0M,EAAW1+C,KAAKgN,MAAMqsC,UAAYr5C,KAAKgN,MAAMglC,WAGjD,IAAK,IAAIxxC,EAAIwxC,EAAYxxC,EAAIk+C,GAAY1+C,KAAK06C,SAASl6C,KAAOwR,UAAWxR,IAAK,KACpEw7C,EAAQh8C,KAAK06C,SAASl6C,GAEtB4gD,EADUS,EAAiBhgC,QACcw/B,QAC/CD,EAAKhF,UAAYJ,EACjBoF,EAAK5uC,MAAQxS,KAAKshD,gBAAgBtF,GAElC0F,IAAkB1hD,KAAKgN,MAAMqsC,WAC7Br5C,KAAK25C,YAAY1gC,KAAKjZ,KAAKgN,OAEM,aAAjChN,KAAK+4C,yBACLR,sBAAsB,WAClB/mC,EAAK6tC,wBAKXmE,EAAAtjD,UAAAy9C,cAAV,eACU+D,EAAgB1hD,KAAKgN,MAAMqsC,UACjCr5C,KAAK2hD,uBACL3hD,KAAK4hD,uBACL5hD,KAAK2kD,aAAajD,IAMZ8B,EAAAtjD,UAAA6hD,kBAAV,WACI,OAAI/hD,KAAKyjD,YAAY5K,SAAS74C,MACnB6rB,EAAA3rB,UAAM6hD,kBAAiBnhD,KAAAZ,MAE3BA,KAAKyjD,YAAYpK,UAAUr5C,KAAK+4C,8CA3U9C7rC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,0EAtqCV0lC,EAAAA,wBAFAyQ,EAAAA,mBARAC,EAAAA,uBATAhf,EAAAA,gCAFAsI,EAAAA,yBAaAhI,EAAAA,cAgBK8T,4CA6qCJvrC,EAAAA,SA6TLo2C,EA7UA,CAG8ClK,IA+U9CsL,GAAA,WAAA,SAAAA,KAQA,2BARCn3C,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC4rC,GAAmBkK,GAAuB9Q,GAA2BQ,GAAwBF,IAC5G6R,gBAAiB,CAACnS,GAA2BQ,GAAwBF,IACrErlC,QAAS,CAAC2rC,GAAmBkK,IAC7B/K,QAAS,CAACD,GAAwBE,EAAAA,kBAItCkM,EARA,GC/9CAE,GAAA,SAAAj5B,GAqKI,SAAAi5B,EACclnB,EACApf,EACA/E,GAHd,IAAAjI,EAIIqa,EAAAjrB,KAAAZ,KAAM49B,EAAYpf,IAAIxe,YAHZwR,EAAAosB,WAAAA,EACApsB,EAAAgN,IAAAA,EACAhN,EAAAiI,UAAAA,EAlKJjI,EAAAsrB,SAAW,IAAIC,EAAAA,QAwBlBvrB,EAAA4rB,UAAY,IAAIrW,EAAAA,aAUhBvV,EAAA6rB,SAAW,IAAItW,EAAAA,aAUfvV,EAAA8rB,UAAY,IAAIvW,EAAAA,aAUhBvV,EAAA+rB,SAAW,IAAIxW,EAAAA,aAqBfvV,EAAAs/B,iBAAkB,IAua7B,OAnf0Ct8B,EAAAA,EAAAA,GAiFtChV,OAAAgC,eAAWsjD,EAAA5kD,UAAA,cAAW,KAAtB,WAAA,IAAAsR,EAAAxR,KACI,OAAIA,KAAK+kD,QACE/kD,KAAKmxC,eAA6C,IAA7BnxC,KAAKmxC,aAAa3+B,OAC7CxS,KAAKoQ,SAAS4E,KAAK,SAAA1S,GAAK,OAAAA,EAAEkQ,QAAUhB,EAAK2/B,aAAa3+B,SACvD,KAEGxS,KAAKmxC,kBAGhB,SAAuBhvC,GACnB,IAAKA,EAGD,OAFAnC,KAAKyZ,UAAU6vB,MAAStpC,KAAKoM,GAAE,gBAC/BpM,KAAKmxC,aAAe,MAGxBnxC,KAAKmxC,aAAehvC,EAChBnC,KAAK+kD,UACL/kD,KAAKmxC,aAAY,CACbhvC,MAAOA,EAAMA,MACbqQ,MAAOrQ,EAAMqQ,QAGrBxS,KAAKyZ,UAAUkH,IAAO3gB,KAAKoM,GAAE,UAAW,IAAI4C,IAAI,CAAChP,KAAKmxC,iDAG1D3xC,OAAAgC,eACIsjD,EAAA5kD,UAAA,KAAE,KADN,WAEI,OAAOF,KAAKynC,SAEhB,SAAOtlC,GACHnC,KAAKglD,gBAAgB54C,GAAKjK,EAC1BnC,KAAKyZ,UAAUkH,IAAIxe,EAAOnC,KAAKyZ,UAAUlN,IAAIvM,KAAKoM,KAClDpM,KAAKyZ,UAAU6vB,MAAMtpC,KAAKoM,IAC1BpM,KAAKyZ,UAAUkH,IAAIxe,EAAOnC,KAAKyZ,UAAUlN,IAAOvM,KAAKoM,GAAE,YACvDpM,KAAKyZ,UAAU6vB,MAAStpC,KAAKoM,GAAE,WAC/BpM,KAAKynC,IAAMtlC,mCAIf3C,OAAAgC,eAAWsjD,EAAA5kD,UAAA,SAAM,KAAjB,WACI,OAAOF,KAAKoM,GAAK,yCAUrB5M,OAAAgC,eAAWsjD,EAAA5kD,UAAA,eAAY,KAAvB,eACUqwC,EAAevwC,KAAKyZ,UAAUq1B,WAAW9uC,KAAKoM,IACpD,OAAImkC,GAGG,sCAUX/wC,OAAAgC,eAAWsjD,EAAA5kD,UAAA,YAAS,KAApB,WACI,OAAOF,KAAKglD,gBAAgBjZ,2CAGhCvsC,OAAAgC,eAAcsjD,EAAA5kD,UAAA,kBAAe,KAA7B,WACI,OAAOF,KAAKglD,gBAAgBvjB,yCAGhCjiC,OAAAgC,eAAcsjD,EAAA5kD,UAAA,mBAAgB,KAA9B,WACI,GAAIF,KAAK+kD,QACL,OAAO/kD,KAAK+kD,QAAQrL,gBAAkB15C,KAAK+kD,QAAQrK,SAAS/5C,wCAkB7DmkD,EAAA5kD,UAAA0M,KAAP,SAAYo/B,GACRhsC,KAAKglD,gBAAgBp4C,KAAKo/B,GAC1BhsC,KAAKilD,wBAUFH,EAAA5kD,UAAA2M,MAAP,WACI7M,KAAKglD,gBAAgBn4C,SAUlBi4C,EAAA5kD,UAAAsM,OAAP,SAAcw/B,GACNhsC,KAAK+rC,WAAa/rC,KAAKglD,gBAAgBxY,UACvCxsC,KAAK4M,KAAKo/B,GAEVhsC,KAAK6M,SAQNi4C,EAAA5kD,UAAAglD,gBAAP,SAAuB1yC,OAIfw7B,EAHAx7B,EAAQ,GAAKA,GAASxS,KAAKmwC,MAAMxvC,SAKjCqtC,EADAhuC,KAAK+kD,QACO,CACR5iD,MAAOnC,KAAK+kD,QAAQrK,SAASloC,GAC7BA,MAAKA,GAGMxS,KAAKmwC,MAAM39B,GAE9BxS,KAAKywC,WAAWzC,KAQb8W,EAAA5kD,UAAA6xC,aAAP,SAAoBv/B,GAApB,IAAAhB,EAAAxR,KACI,GAAIA,KAAK+kD,QAAS,CACd,IAAe,IAAXvyC,GAAgBA,GAASxS,KAAKmlD,iBAC9B,WAEEC,EAAY5yC,GAASxS,KAAK4wC,YAAc5wC,KAAK4wC,YAAYp+B,OAAS,GAAK6/B,GAASzE,KAAOyE,GAAS1E,GAChG0X,EAAcrlD,KAAKslD,mBAAmB9yC,EAAO4yC,GACnDplD,KAAK4wC,YAAW,CACZzuC,MAAOnC,KAAK+kD,QAAQrK,SAASloC,GAC7BA,MAAOA,GAEP6yC,GACArlD,KAAK+kD,QAAQ5G,SAAS3rC,GAEtB6yC,EACArlD,KAAK+kD,QAAQpL,YAAYnX,KAAK+iB,EAAAA,KAAK,IAAI7iB,UAAU,WAC7ClxB,EAAKg0C,WAAWJ,KAGpBplD,KAAKwlD,WAAWJ,QAGpBv5B,EAAA3rB,UAAM6xC,aAAYnxC,KAAAZ,KAACwS,GAEnBxS,KAAK8wC,iBAAmB9wC,KAAK4wC,cAC7B5wC,KAAK4wC,YAAYnP,QAAQ5D,cAAckT,QACvC/wC,KAAKwe,IAAIC,iBAITqmC,EAAA5kD,UAAAolD,mBAAR,SAA2B9yC,EAAevM,OAChCw/C,EAAYzlD,KAAK+kD,QAAQ/3C,MACzB04C,EAAkB1lD,KAAK+kD,QAAQvK,oBAAoBvhB,UACnD0sB,EAAe3lD,KAAK+kD,QAAQ7F,kBAAkB1sC,EAAOvM,IAAcosC,GAASzE,MAC5EgY,EAAkBpzC,EAAQizC,EAAUzT,YAAcx/B,EAAQizC,EAAUpM,UAAYoM,EAAUzT,WAC1F6T,EAAe5/C,IAAcosC,GAASzE,KAAO8X,EAAkBC,EAAiCA,EAAlBD,EAEpF,OADoBE,GAAmBC,GAIjCf,EAAA5kD,UAAAslD,WAAV,SAAqBv/C,GACZjG,KAAK4wC,cAGN5wC,KAAK4wC,YAAYrc,UAAYv0B,KAAK4wC,YAAYrB,YAC1CtpC,IAAcosC,GAAS1E,GACvB3tC,KAAKwyC,eAELxyC,KAAKuyC,iBAQjBuS,EAAA5kD,UAAA+kD,qBAAA,WACI,GAAKjlD,KAAK+kD,QAGV,GAAK/kD,KAAKuwC,aAAV,KAIIuV,EAAe9lD,KAAK+kD,QAAQ7F,kBAAkBl/C,KAAKuwC,aAAa/9B,OAEpEszC,IADoB9lD,KAAK+kD,QAAQtK,oBAAsBz6C,KAAK+kD,QAAQjF,eACrC,EAAI,GAAK9/C,KAAK+kD,QAAQjF,eACrD9/C,KAAK+kD,QAAQvK,oBAAoBvhB,UAAY6sB,OANzC9lD,KAAK+kD,QAAQ5G,SAAS,IAYvB2G,EAAA5kD,UAAA6lD,gBAAP,SAAuBzjD,GACnBtC,KAAKo9B,UAAUnkB,KAAK3W,GAChBA,EAAEsW,UAGD5Y,KAAK+kD,SAAW/kD,KAAKuwC,cACtBvwC,KAAKgmD,aAAahmD,KAAKuwC,cAEvBvwC,KAAK+kD,UACL/kD,KAAK+kD,QAAQvK,oBAAoBvhB,UAAYj5B,KAAKimD,mBAOnDnB,EAAA5kD,UAAAgmD,eAAP,WACQlmD,KAAKuwC,cACLvwC,KAAK4wC,YAAc5wC,KAAKuwC,aACxBvwC,KAAKmxC,aAAajB,SAAU,GACrBlwC,KAAK8wC,iBACZ9wC,KAAKoyC,gBAETpyC,KAAKq9B,SAASpkB,QAMX6rC,EAAA5kD,UAAAimD,gBAAP,SAAuB7jD,GACnBtC,KAAKs9B,UAAUrkB,KAAK3W,GAChBtC,KAAK+kD,UACL/kD,KAAKimD,gBAAkBjmD,KAAK+kD,QAAQvK,oBAAoBvhB,YAOzD6rB,EAAA5kD,UAAAkmD,eAAP,WACQpmD,KAAKmxC,eACLnxC,KAAKmxC,aAAajB,SAAU,GAEhClwC,KAAKu9B,SAAStkB,QAMX6rC,EAAA5kD,UAAAkkC,YAAP,WACIpkC,KAAK88B,SAAS56B,MAAK,GACnBlC,KAAK88B,SAASuH,WACdrkC,KAAKyZ,UAAU6vB,MAAMtpC,KAAKoM,IAC1BpM,KAAKyZ,UAAU6vB,MAAStpC,KAAKoM,GAAE,YAGzB04C,EAAA5kD,UAAA8lD,aAAV,SAAuBziC,GAAvB,IAAA/R,EAAAxR,KACU2lD,EAAe3lD,KAAKqmD,wBAAwB9iC,GAM9ChU,KACA+2C,WAAW,WACP90C,EAAKopB,gBAAgB3B,UAAS,GAC/B,GAEHj5B,KAAK46B,gBAAgB3B,UAAS,GAK/B6rB,EAAA5kD,UAAAmmD,wBAAP,SAA+B9iC,GAC3B,IAAKA,EACD,OAAO,MAGLoc,EAAcpc,EAAKke,QAAQ5D,cAAcluB,wBAEzC42C,EADavmD,KAAK46B,gBAAgBjrB,wBACTwoB,IAAMwH,EAAYxH,IAC7CO,EAAiB14B,KAAK46B,gBAAgB3B,UAAYstB,EAMtD,OAHA7tB,GADuB14B,KAAK46B,gBAAgBnC,aACT,EACnCC,GAAkBnV,EAAKijC,cAAgB,EAEhClkC,KAAKmC,MAAMiU,IAMtBosB,EAAA5kD,UAAAusC,SAAA,WACIzsC,KAAKglD,gBAAgB54C,GAAKpM,KAAKoM,IAGnC04C,EAAA5kD,UAAAumD,gBAAA,WACQzmD,KAAK+kD,UACL/kD,KAAK+kD,QAAQjF,eAAiB,KAK/BgF,EAAA5kD,UAAAsxC,gBAAP,SAAuBvwC,EAAwBu/B,GAC3C3U,EAAA3rB,UAAMsxC,gBAAe5wC,KAAAZ,KAACiB,EAAKu/B,GAC3BxgC,KAAK6M,SAOFi4C,EAAA5kD,UAAAkyC,cAAP,WACQpyC,KAAK+kD,QACL/kD,KAAK+xC,aAAa,GAElBlmB,EAAA3rB,UAAMkyC,cAAaxxC,KAAAZ,OAOpB8kD,EAAA5kD,UAAAoyC,aAAP,WACQtyC,KAAK+kD,QACL/kD,KAAK+xC,aAAa/xC,KAAK+kD,QAAQrL,eAAiB15C,KAAK+kD,QAAQrL,eAAiB,EAAI15C,KAAK+kD,QAAQrK,SAAS/5C,OAAS,GAEjHkrB,EAAA3rB,UAAMoyC,aAAY1xC,KAAAZ,OAOnB8kD,EAAA5kD,UAAAqyC,aAAP,WACQvyC,KAAK+kD,QACL/kD,KAAK+xC,aAAa/xC,KAAKmxC,aAAenxC,KAAKmxC,aAAa3+B,MAAQ,EAAI,GAEpEqZ,EAAA3rB,UAAMqyC,aAAY3xC,KAAAZ,OAOnB8kD,EAAA5kD,UAAAsyC,aAAP,WACQxyC,KAAK+kD,QACL/kD,KAAK+xC,aAAa/xC,KAAKmxC,aAAenxC,KAAKmxC,aAAa3+B,MAAQ,EAAI,GAEpEqZ,EAAA3rB,UAAMsyC,aAAY5xC,KAAAZ,OAWnB8kD,EAAA5kD,UAAAuwC,WAAP,SAAkBzC,EAAoCxN,OAC5CkR,EAAe1xC,KAAKuwC,aAI1B,GAHKvC,IACDA,EAAehuC,KAAK4wC,aAEH,OAAjB5C,KAGAA,aAAwB2B,IAAuB3B,EAAazZ,UAAhE,CAGIv0B,KAAK+kD,UACL/W,EAAY,CACR7rC,MAAO6rC,EAAa7rC,MACpBqQ,MAAOw7B,EAAax7B,YAGtB/F,EAA4B,CAAEilC,aAAYA,EAAE1D,aAAYA,EAAEp1B,QAAQ,GACxE5Y,KAAKoxC,YAAYn4B,KAAKxM,GAEjBA,EAAKmM,SACN5Y,KAAKyZ,UAAUkH,IAAI3gB,KAAKoM,GAAI,IAAI4C,IAAI,CAACg/B,KAChChuC,KAAK+kD,UACFrT,IACAA,EAAa92B,UAAW,GAExBozB,IACAA,EAAapzB,UAAW,IAG5B4lB,GACAxgC,KAAKglD,gBAAgBn4C,+BApfpC4iC,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,gBACVuiC,SAAA,6ZACA9hC,UAAW,CAAC,CAAE84C,QAAS7Y,GAAmB8Y,YAAa7B,iDA9CvD7jB,EAAAA,kBAHA4L,EAAAA,yBAsBKiB,uCAiCJ8Y,EAAAA,aAAYn6C,KAAA,CAAC6sC,GAAmB,CAAEvG,KAAMuG,8BAGxCxG,EAAAA,UAASrmC,KAAA,CAAC++B,sBAOVqb,EAAAA,gBAAep6C,KAAA,CAACq6C,EAAAA,WAAW,WAAM,OAAApW,KAA2B,CAAEqW,aAAa,uBAU3Ez9B,EAAAA,yBAUAA,EAAAA,0BAUAA,EAAAA,yBAUAA,EAAAA,gCAqBAlc,EAAAA,kBA+BAA,EAAAA,SAyYL03C,EAxfA,CAK0C5T,IC3C1C8V,GAAA,WAOI,SAAAA,EAAkEC,GAAAjnD,KAAAinD,SAAAA,EAFxDjnD,KAAAktC,QAA2B,KAsHzC,OApGI1tC,OAAAgC,eAAIwlD,EAAA9mD,UAAA,SAAM,KAAV,WACI,OAAOF,KAAKktC,aAgBhB,SACWlsC,GACPhB,KAAKktC,QAAUlsC,GAAkBhB,KAAKinD,0CAO1CD,EAAA9mD,UAAAgnD,cADA,SACc1mB,GACV,GAAIA,EAAO,KACDv/B,EAAMu/B,EAAMv/B,IAAIiR,cACtB,GAAKlS,KAAKgB,OAAO+qC,UASb,OANA,IAA8B,IAFd,CAAC,MAAO,SAAU,QAAS,QAAS,WAAY,IACpE,UAAW,KAAM,YAAa,OAAQ,OAAQ,OAC9Bj8B,QAAQ7O,GAChB,OAOR,OALIu/B,EAAMqH,iBACNrH,EAAM4B,kBAIFnhC,GACJ,IAAK,MACL,IAAK,SACDjB,KAAKgB,OAAOwwC,gBAAgBC,GAA0BjR,GACtD,MACJ,IAAK,QACDxgC,KAAKgB,OAAOwwC,gBAAgBC,GAAyBjR,GACrD,MACJ,IAAK,QACL,IAAK,WACL,IAAK,IACDxgC,KAAKgB,OAAOwwC,gBAAgBC,GAAyBjR,GACrD,MACJ,IAAK,UACL,IAAK,KACDxgC,KAAKmnD,mBACL,MACJ,IAAK,YACL,IAAK,OACDnnD,KAAKonD,qBACL,MACJ,IAAK,OACDpnD,KAAKqnD,gBACL,MACJ,IAAK,MACDrnD,KAAKsnD,eACL,MACJ,QACI,UAQhBN,EAAA9mD,UAAAknD,mBAAA,WACIpnD,KAAKgB,OAAOuxC,gBAMhByU,EAAA9mD,UAAAinD,iBAAA,WACInnD,KAAKgB,OAAOwxC,gBAMhBwU,EAAA9mD,UAAAonD,aAAA,WACItnD,KAAKgB,OAAOsxC,gBAMhB0U,EAAA9mD,UAAAmnD,cAAA,WACIrnD,KAAKgB,OAAOoxC,qCAzHnBllC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2EAPL+jC,GAAenwC,WAAA,CAAA,CAAA2V,KAaP6wC,EAAAA,MAAI,CAAA7wC,KAAIo2B,EAAAA,UAAQ,CAAAp2B,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAACohC,yCAiCvCzgC,EAAAA,MAAKX,KAAA,CAAC,oDAQNY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,cA2E9Bu6C,EA3HA,GCWAQ,GAAA,WAAA,SAAAA,KAQiC,2BARhC/5C,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACo3C,GAAsBpU,GAA0BtB,GAC3D4X,IACJr5C,QAAS,CAACm3C,GAAsBpU,GAA0BtB,GACtD4X,IACJvO,QAAS,CAACC,EAAAA,aAAchL,IACxB9/B,UAAW,CAACkgC,QAEiB0Z,EARjC,OCjBIC,MAAA,EACAC,IAAA,yCAGJ,IAAAC,GAAA,WAoCI,SAAAA,EAAoBC,GAAA5nD,KAAA4nD,SAAAA,EAhCZ5nD,KAAA6nD,UAA6BC,GAAgBL,MAe9CznD,KAAA+nD,iBAAkB,EAelB/nD,KAAAgoD,eAAgB,EAqD3B,OAvCIxoD,OAAAgC,eACImmD,EAAAznD,UAAA,WAAQ,KAgBZ,WACI,OAAOF,KAAK6nD,UAAU34C,gBAlB1B,SACa/M,OACH+3B,EAA4B,GAAyB/3B,EAAM8lD,eAC7D/tB,IAAaloB,YACbhS,KAAK6nD,UAAY3tB,EACjBl6B,KAAKkoD,eAAeloD,KAAK6nD,6CAkBjCF,EAAAznD,UAAAusC,SAAA,WACIzsC,KAAKkoD,eAAeloD,KAAK6nD,YAGrBF,EAAAznD,UAAAgoD,eAAR,SAAuBhuB,GAEnB,OADAl6B,KAAK+nD,gBAAkB/nD,KAAKgoD,eAAgB,EACpC9tB,GACJ,KAAK4tB,GAAgBL,MACjBznD,KAAK+nD,iBAAkB,EACvB,MACJ,KAAKD,GAAgBJ,IACjB1nD,KAAKgoD,eAAgB,wBAlFpC96C,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,kEARM8zB,EAAAA,uDAyBf8L,EAAAA,YAAWtgC,KAAA,CAAC,kEAeZsgC,EAAAA,YAAWtgC,KAAA,CAAC,2DAeZW,EAAAA,MAAKX,KAAA,CAAC,eAuCXk7C,EAvFA,MCNA,SAAAQ,OCgBMC,GAA6B,CAAC,WAAY,UAAW,YAAa,YAAa,MAAO,MAAO,YAG/FC,QAAA,EACAC,MAAA,EACAC,QAAA,0EAGJ,IAAAC,GAAA,WAQI,SAAAA,EACWC,EACwCC,EACQC,EAC7ClnB,EACAjjB,GAJHxe,KAAAyoD,WAAAA,EACwCzoD,KAAA0oD,QAAAA,EACQ1oD,KAAA2oD,YAAAA,EAC7C3oD,KAAAyhC,QAAAA,EACAzhC,KAAAwe,IAAAA,EARNxe,KAAA4oD,OAASC,GAAcR,QA+GxBroD,KAAA8oD,SAAU,EAaV9oD,KAAA+oD,YAAa,EA4LxB,OA9SIvpD,OAAAgC,eAAYgnD,EAAAtoD,UAAA,YAAS,KAArB,WACI,OAAOF,KAAK0oD,QAAU1oD,KAAK0oD,QAAU1oD,KAAK2oD,6CAW9CnpD,OAAAgC,eACIgnD,EAAAtoD,UAAA,QAAK,KAaT,WACI,OAAOF,KAAK69B,cAAc17B,WAf9B,SACUA,GACNnC,KAAK69B,cAAc17B,MAAQA,EAC3BnC,KAAKgpD,iDAuBTxpD,OAAAgC,eACWgnD,EAAAtoD,UAAA,WAAQ,KAanB,WACI,OAAOF,KAAK69B,cAAcorB,aAAa,iBAf3C,SACoB9mD,GAChBnC,KAAK69B,cAAc0R,SAAWptC,EAC9BnC,KAAKyoD,WAAWlZ,SAAWptC,mCAwB/B3C,OAAAgC,eACWgnD,EAAAtoD,UAAA,WAAQ,KAmBnB,WACI,OAAOF,KAAK69B,cAAcorB,aAAa,iBArB3C,SACoB9mD,GACK,kBAAVA,IACPnC,KAAK69B,cAAcqrB,SAAWlpD,KAAKyoD,WAAWU,WAAahnD,EAEvDA,IAAUnC,KAAK69B,cAAcmrB,gBAC7BhpD,KAAK4oD,OAASC,GAAcN,QAE5BvoD,KAAK4oD,OAASC,GAAcR,0CA8CjCG,EAAAtoD,UAAAkpD,QADP,SACe5oB,GACXxgC,KAAKyoD,WAAWY,WAAY,GAMzBb,EAAAtoD,UAAAopD,OADP,SACc9oB,GACVxgC,KAAKyoD,WAAWY,WAAY,EAC5BrpD,KAAK4oD,OAASC,GAAcR,QACxBroD,KAAKupD,UACAvpD,KAAKupD,UAAUC,QAChBxpD,KAAK4oD,OAASC,GAAcN,SAEzBvoD,KAAKypD,mBAAqBzpD,KAAK69B,cAAcmrB,kBACpDhpD,KAAK4oD,OAASC,GAAcN,UAO7BC,EAAAtoD,UAAAwpD,QADP,WAEI1pD,KAAKgpD,iBAKTR,EAAAtoD,UAAAumD,gBAAA,WAUI,GATAzmD,KAAKyoD,WAAWkB,eAAiB3pD,KAAK69B,cAAcorB,aAAa,eACjEjpD,KAAKyoD,WAAWlZ,SAAWvvC,KAAKyoD,WAAWlZ,UAAYvvC,KAAK69B,cAAcorB,aAAa,YACvFjpD,KAAKyoD,WAAWU,WAAanpD,KAAK69B,cAAcorB,aAAa,YAGxDjpD,KAAKupD,YACNvpD,KAAK4oD,OAASC,GAAcR,UAG3BroD,KAAKyoD,WAAWU,YAAcnpD,KAAKupD,WAAavpD,KAAKupD,UAAUK,QAAQC,UAAW,KAC7EC,EAAa9pD,KAAKupD,UAAUK,QAAQC,UAAS,IACnD7pD,KAAKyoD,WAAWU,WAAaW,GAAcA,EAAWZ,SAK5C,aADAlpD,KAAK69B,cAAcksB,QAAQ73C,cAErClS,KAAK+oD,YAAa,EAElB/oD,KAAK8oD,SAAU,EAGf9oD,KAAKupD,YACLvpD,KAAKgqD,gBAAkBhqD,KAAKupD,UAAUU,cAAcvnB,UAAU1iC,KAAKkqD,gBAAgBzN,KAAKz8C,QAG5FA,KAAKwe,IAAIyhB,iBAKbuoB,EAAAtoD,UAAAkkC,YAAA,WACQpkC,KAAKgqD,iBACLhqD,KAAKgqD,gBAAgBle,eAUtB0c,EAAAtoD,UAAA6wC,MAAP,WACI/wC,KAAK69B,cAAckT,SASvBvxC,OAAAgC,eAAWgnD,EAAAtoD,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKyhC,QAAQ5D,+CAKd2qB,EAAAtoD,UAAAgqD,gBAAV,YACQlqD,KAAKupD,UAAUK,QAAQC,WAAa7pD,KAAKupD,UAAUK,QAAQO,kBACvDnqD,KAAKupD,UAAUK,QAAQQ,SAAWpqD,KAAKupD,UAAUK,QAAQS,MACrDrqD,KAAKyoD,WAAWY,UAEhBrpD,KAAK4oD,OAAS5oD,KAAKupD,UAAUC,MAAQX,GAAcP,MAAQO,GAAcN,QAGzEvoD,KAAK4oD,OAAS5oD,KAAKupD,UAAUC,MAAQX,GAAcR,QAAUQ,GAAcN,QAExEvoD,KAAK4oD,SAAWC,GAAcR,QACrCroD,KAAK4oD,OAAS5oD,KAAKupD,UAAUC,MAAQX,GAAcR,QAAUQ,GAAcN,QACpEvoD,KAAK4oD,SAAWC,GAAcR,SAAWroD,KAAKupD,UAAUpnD,QAAU6P,WAAahS,KAAKupD,UAAUe,UACrGtqD,KAAK4oD,OAASC,GAAcN,WAWxC/oD,OAAAgC,eAAWgnD,EAAAtoD,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAK69B,cAAcorB,aAAa,gDAS3CzpD,OAAAgC,eAAWgnD,EAAAtoD,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAK69B,cAAc0sB,6CAGtB/B,EAAAtoD,UAAAupD,eAAR,uBACI,IAAwC,IAAAe,EAAAh8C,EAAA45C,IAA0BqC,EAAAD,EAAAtoD,QAAAuoD,EAAAroD,KAAAqoD,EAAAD,EAAAtoD,OAAE,CAA/D,IAAMwoD,EAAyBD,EAAAtoD,MAChC,GAAInC,KAAK69B,cAAcorB,aAAayB,GAChC,OAAO,uGAIf,SAAS1qD,KAAKupD,YAAgBvpD,KAAKupD,UAAUK,QAAQC,YAAe7pD,KAAKupD,UAAUK,QAAQO,iBAS/F3qD,OAAAgC,eAAWgnD,EAAAtoD,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKyoD,WAAWY,2CAS3B7pD,OAAAgC,eAAWgnD,EAAAtoD,UAAA,QAAK,KAAhB,WACI,OAAOF,KAAK4oD,YAqBhB,SAAiBzmD,GACbnC,KAAK4oD,OAASzmD,mCAZlB3C,OAAAgC,eAAWgnD,EAAAtoD,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKwpD,QAAUX,GAAcN,yCAchCC,EAAAtoD,UAAA8oD,cAAR,YACShpD,KAAKupD,WAAavpD,KAAKypD,mBACxBzpD,KAAK4oD,OAAS5oD,KAAK69B,cAAcmrB,gBAAkBH,GAAcP,MAAQO,GAAcN,8BA1TlGr7C,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,aACVy/B,SAAU,wDAZLub,UAF6CwC,EAAAA,QAAO5pD,WAAA,CAAA,CAAA2V,KAsBpDo2B,EAAAA,UAAQ,CAAAp2B,KAAI6wC,EAAAA,MAAI,CAAA7wC,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAACk+C,EAAAA,kBAtBVC,EAAAA,gBAAe7pD,WAAA,CAAA,CAAA2V,KAuBhCo2B,EAAAA,UAAQ,CAAAp2B,KAAI6wC,EAAAA,MAAI,CAAA7wC,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAACm+C,EAAAA,0BAhChC3pB,EAAAA,kBAFA4L,EAAAA,oDAkDCz/B,EAAAA,MAAKX,KAAA,CAAC,2BA0BNW,EAAAA,wBA2BAA,EAAAA,uBAmCA2/B,EAAAA,YAAWtgC,KAAA,CAAC,oDAaZsgC,EAAAA,YAAWtgC,KAAA,CAAC,oDAKZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,2BAOvBY,EAAAA,aAAYZ,KAAA,CAAC,OAAQ,CAAC,4BAetBY,EAAAA,aAAYZ,KAAA,CAAC,YAkKlB+7C,EA7TA,GCvBIrZ,GAAU,EAEd0b,GAAA,WAAA,SAAAA,IAKW7qD,KAAA8qD,cAAe,EAOf9qD,KAAAoM,GAAK,aAAa+iC,KAC7B,2BAbCjiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,uDAGT4/B,EAAAA,YAAWtgC,KAAA,CAAC,4CAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,SAELy9C,EAbA,GCCAE,GAAA,WAAA,SAAAA,KAGkC,2BAHjC79C,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,6BAEoB49C,EAHlC,GAQAC,GAAA,WAAA,SAAAA,KAI+B,2BAJ9Bv9C,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACq9C,IACfp9C,QAAS,CAACo9C,QAEiBC,EAJ/B,GCRAC,GAAA,WAAA,SAAAA,KAGkC,2BAHjC/9C,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,6BAEoB89C,EAHlC,GAQAC,GAAA,WAAA,SAAAA,KAI+B,2BAJ9Bz9C,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACu9C,IACft9C,QAAS,CAACs9C,QAEiBC,EAJ/B,OCNIC,YAAc,cACdC,KAAO,OACPC,QAAU,WAkBDC,GAAsB,IAAIC,EAAAA,eAAuC,kBAK9EC,GAAA,WA6CI,SAAAA,EAAsBC,GAAAzrD,KAAAyrD,sBAAAA,EALfzrD,KAAA0rD,iBAAmB,IAAI3kC,EAAAA,aAEpB/mB,KAAA2rD,yBAAmD,CAAEC,eAAgBC,GAAeV,aAI1F3rD,OAAOa,OAAOL,KAAK2rD,yBAA0BF,GAqCrD,OAnEIjsD,OAAAgC,eACWgqD,EAAAtrD,UAAA,iBAAc,KADzB,WAEI,OAAOF,KAAK8rD,iBACN9rD,KAAKyrD,uBAAyBzrD,KAAKyrD,sBAAsBG,gBAAmBC,GAAeV,iBAMrG,SAA0B7rC,OAChBysC,EAAwB/rD,KAAK8rD,gBAGnC,GAFA9rD,KAAK8rD,gBAAe,EAEhBC,IAA0B/rD,KAAK8rD,gBAAiB,KAC1CE,EAA+C,CACjDC,WAAYF,EACZG,WAAYlsD,KAAK8rD,iBAGrB9rD,KAAK0rD,iBAAiBzyC,KAAK+yC,qCAiB5BR,EAAAtrD,UAAAusC,SAAP,WACIzsC,KAAKmsD,eAAiBnsD,KAAK8rD,iBAGxBN,EAAAtrD,UAAAmwC,UAAP,WACI,IAAKrwC,KAAK8rD,iBAAmB9rD,KAAKyrD,uBAC1BzrD,KAAK2rD,yBAAyBC,iBAAmB5rD,KAAKyrD,sBAAsBG,eAAgB,KAC1FI,EAA+C,CACjDC,WAAYjsD,KAAK2rD,yBAAyBC,eAC1CM,WAAYlsD,KAAKyrD,sBAAsBG,gBAG3C5rD,KAAK0rD,iBAAiBzyC,KAAK+yC,GAC3BhsD,KAAK2rD,yBAA2BnsD,OAAOa,OAAOL,KAAK2rD,yBAA0B3rD,KAAKyrD,yBAQhFD,EAAAtrD,UAAAksD,yBAAV,SAAmCC,GAC/B,OAAQrsD,KAAK4rD,gBACT,KAAKC,GAAeT,KAChB,OAAUiB,EAAc,KAAKR,GAAeT,KAChD,KAAKS,GAAeR,QAChB,OAAUgB,EAAc,KAAKR,GAAeR,QAChD,QACI,OAAOgB,4CAhElBj/C,EAAAA,gCAuBAkc,EAAAA,UA4CLkiC,EAnFA,GCVIrc,GAAU,MAGVmd,KAAA,EACAC,IAAA,EACAC,OAAA,EACAC,OAAA,qFAGJ,IAAAC,GAAA,SAAA7gC,GAmOI,SAAA6gC,EAAoB9E,EACiC+E,GADrD,IAAAn7C,EAEIqa,EAAAjrB,KAAAZ,KAAM2sD,IAAuB3sD,YAFbwR,EAAAo2C,SAAAA,EACiCp2C,EAAAm7C,uBAAAA,EA9N7Cn7C,EAAAo7C,MAAQC,GAAkBP,KAC1B96C,EAAAs7C,SAAU,EACVt7C,EAAAu7C,wBAAyB,EAe1Bv7C,EAAApF,GAAK,mBAAmB+iC,KAcxB39B,EAAAs5C,cAAe,EAMft5C,EAAAm4C,gBAAiB,EAMjBn4C,EAAA23C,YAAa,EAMb33C,EAAA63C,WAAY,EAOZ73C,EAAAw7C,OAAQ,EAMRx7C,EAAAy7C,UAAW,EAMXz7C,EAAA07C,UAAW,EAUX17C,EAAA+9B,UAAW,EAsBX/9B,EAAA27C,YAAa,EA4HhB37C,EAAKiwB,QAAUmmB,IA+FvB,OAhU4CpzC,EAAAA,EAAAA,GAoFxChV,OAAAgC,eACWkrD,EAAAxsD,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAKg8C,MAAMwN,QAAUX,GAAcP,uCAM9C9oD,OAAAgC,eACWkrD,EAAAxsD,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAKg8C,MAAMwN,QAAUX,GAAcN,yCAyBvCmE,EAAAxsD,UAAAktC,QADP,SACe5M,GACNxgC,KAAK+sD,wBACN/sD,KAAKg8C,MAAMjL,SAWnBvxC,OAAAgC,eACIkrD,EAAAxsD,UAAA,OAAI,KAqFR,WACI,OAAOF,KAAK4sD,MAAM19C,gBAvFtB,SACS/M,OACCuU,EAA0B,GAA2BvU,EAAM8lD,eACjE,GAAIvxC,IAAS1E,UAAW,CAEpB,OADAhS,KAAKgtD,MAAQhtD,KAAKitD,SAAWjtD,KAAKktD,UAAW,EACrCx2C,GACJ,KAAKm2C,GAAkBN,IACnBvsD,KAAKgtD,OAAQ,EACb,MACJ,KAAKH,GAAkBL,OACnBxsD,KAAKitD,UAAW,EAChB,MACJ,KAAKJ,GAAkBJ,OACnBzsD,KAAKktD,UAAW,EAKxBltD,KAAK4sD,MAAQl2C,oCAUrBlX,OAAAgC,eACWkrD,EAAAxsD,UAAA,wBAAqB,KADhC,WAEI,OAAOF,KAAK+sD,4BAShB,SAAiC5qD,GAC7BnC,KAAK+sD,uBAAyB5qD,mCAMlC3C,OAAAgC,eACIkrD,EAAAxsD,UAAA,WAAQ,KADZ,WAEI,OAAOF,KAAK8sD,SAAY9sD,KAAKg8C,OAASh8C,KAAKg8C,MAAM75C,uCAMrD3C,OAAAgC,eACIkrD,EAAAxsD,UAAA,uBAAoB,KADxB,WAEI,OAAOF,KAAK4rD,iBAAmBC,GAAeT,sCAMlD5rD,OAAAgC,eACIkrD,EAAAxsD,UAAA,8BAA2B,KAD/B,WAEI,OAAOF,KAAK4rD,iBAAmBC,GAAeV,6CAMlD3rD,OAAAgC,eACIkrD,EAAAxsD,UAAA,0BAAuB,KAD3B,WAEI,OAAOF,KAAK4rD,iBAAmBC,GAAeR,yCAkClD7rD,OAAAgC,eAAIkrD,EAAAxsD,UAAA,WAAQ,KAAZ,WACI,OAA2B,EAApBF,KAAKotD,MAAMzsD,wCAatBnB,OAAAgC,eAAIkrD,EAAAxsD,UAAA,YAAS,KAAb,WACI,OAAOF,KAAK4sD,QAAUC,GAAkBP,MACpCtsD,KAAK4sD,QAAUC,GAAkBN,qCAazC/sD,OAAAgC,eAAWkrD,EAAAxsD,UAAA,aAAU,KAArB,WACI,OAAQF,KAAK4sD,QAAUC,GAAkBP,sCAa7C9sD,OAAAgC,eAAIkrD,EAAAxsD,UAAA,YAAS,KAAb,WACI,OAAOF,KAAK4sD,QAAUC,GAAkBN,qCAa5C/sD,OAAAgC,eAAIkrD,EAAAxsD,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAK4sD,QAAUC,GAAkBL,wCAa5ChtD,OAAAgC,eAAIkrD,EAAAxsD,UAAA,eAAY,KAAhB,WACI,OAAQF,KAAK4sD,QAAUC,GAAkBJ,wCAG7CjtD,OAAAgC,eAAIkrD,EAAAxsD,UAAA,SAAM,KAAV,WACI,OAAOF,KAAK8sD,aAGhB,SAAWxtC,GACPtf,KAAK8sD,QAAUxtC,uDAnUtBmwB,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,kBACVuiC,SAAA,ytBACA9hC,UAAW,CAAC,CAAE84C,QAASyB,GAAmBxB,YAAa+F,iDA7BvDzrB,EAAAA,8CA8PK6L,EAAAA,UAAQ,CAAAp2B,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAAC6+C,qCA/MvBve,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,4BAcA2/B,EAAAA,YAAWtgC,KAAA,CAAC,iDAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,0DAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,sDAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,iDAOZsgC,EAAAA,YAAWtgC,KAAA,CAAC,gDAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,mDAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,mDASZsgC,EAAAA,YAAWtgC,KAAA,CAAC,oCAAiC,CAAAiK,KAC7CtJ,EAAAA,0BAMA2/B,EAAAA,YAAWtgC,KAAA,CAAC,sDAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,sDAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,iDAMZo6C,EAAAA,gBAAep6C,KAAA,CAACk7C,GAAkB,CAAE5U,KAAM4U,oBAM1Cf,EAAAA,aAAYn6C,KAAA,CAAC+7C,GAAmB,CAAEzV,KAAMyV,sBAMxCn7C,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,yBAcvBW,EAAAA,MAAKX,KAAA,CAAC,uCA4BNW,EAAAA,wBAkBA2/B,EAAAA,YAAWtgC,KAAA,CAAC,+DAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,oEAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,uEAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,qCAsHjBigD,EArUA,CAK4ClB,IAqU5C6B,GAAA,WAAA,SAAAA,KAKmC,2BALlC5/C,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACg/C,GAAwB/E,GAAkBa,GAAmBqC,IAC5El9C,QAAS,CAAC++C,GAAyB/E,GAAkBa,GAAmBqC,GAAmBE,GAAoBE,IAC/GxS,QAAS,CAACC,EAAAA,aAAcsS,GAAiBE,QAEVmC,EALnC,GCvTAC,GAAA,SAAAzhC,GAKI,SAAAyhC,EAA2D5E,EACQC,EACjC90C,EACZ+pB,EACApf,GAJtB,IAAAhN,EAKIqa,EAAAjrB,KAAAZ,KAAM,OAAKA,YAL4CwR,EAAAk3C,QAAAA,EACQl3C,EAAAm3C,YAAAA,EACjCn3C,EAAAqC,MAAAA,EACZrC,EAAAosB,WAAAA,EACApsB,EAAAgN,IAAAA,EAIdhN,EAAA+7C,gBAAmC,CACvCrwB,OAAO,EACPD,eAAgB,IAAImK,GACpBpK,iBAAkB,IAAI6I,GAAqB,CAAE7kC,OAAQwQ,EAAK+oB,gBAC1D6D,uBAAuB,GAIjB5sB,EAAAg8C,gBAAkB,IAAIzwB,EAAAA,QAyDzBvrB,EAAA+9B,UAAW,EAkClB/9B,EAAAi8C,eAAiB,IAAI1mC,EAAAA,aAIdvV,EAAAk8C,SAAW,MAIXl8C,EAAA69B,KAAO,WAwHN79B,EAAAm8C,OAAS,SAACxrD,GACd,GAAKA,EAAM6rC,aAAX,CAGA7rC,EAAMyW,QAAS,MACTM,EAAW/W,EAAM6rC,aAAa7rC,MAC9BsK,EAA2C,CAAEtK,MAAO+W,EAAUN,QAAQ,GAC5EpH,EAAKi8C,eAAex0C,KAAKxM,GACrBA,EAAKmM,SAGTpH,EAAK3E,QACL2E,EAAKqsB,cAAckT,QAInBv/B,EAAKo8C,MAAQp8C,EAAKo8C,MAAMhE,QAAQiE,SAAS30C,GAAY1H,EAAKqsB,cAAc17B,MAAQ+W,KAG5E1H,EAAAs8C,mBAAqB,WACrBt8C,EAAKxQ,OAAO4vC,cACZp/B,EAAKxQ,OAAO4vC,YAAYV,SAAU,EAClC1+B,EAAKxQ,OAAO4vC,YAAc,MAE9Bp/B,EAAKxQ,OAAOoxC,gBACZ5gC,EAAKgN,IAAIyhB,mBAOjB,OA7Q8CzrB,EAAAA,EAAAA,GAmB1ChV,OAAAgC,eAAc8rD,EAAAptD,UAAA,QAAK,KAAnB,WACI,OAAOF,KAAK0oD,SAAW1oD,KAAK2oD,6CAIhCnpD,OAAAgC,eAAI8rD,EAAAptD,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK49B,WAAWC,+CAI3Br+B,OAAAgC,eAAI8rD,EAAAptD,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK6T,MAAQ7T,KAAK6T,MAAM4tB,QAAQ5D,cAAgB79B,KAAK69B,+CAGhEr+B,OAAAgC,eAAY8rD,EAAAptD,UAAA,WAAQ,KAApB,eACU43B,EAAWt4B,OAAOa,OAAO,GAAIL,KAAKutD,gBAAiBvtD,KAAK+tD,sBAC9D,IAAKj2B,EAASkF,iBAAiBlF,SAAS92B,OAAQ,KACtCusC,EAA2CzV,EAASkF,iBAAiBtC,QAC3E6S,EAAsBzV,SAAS92B,OAAShB,KAAKu6B,cAC7CzC,EAASkF,iBAAmBuQ,EAEhC,OAAOzV,mCAgFXt4B,OAAAgC,eACW8rD,EAAAptD,UAAA,eAAY,KADvB,WAEI,OAAQF,KAAK+rC,2CAIjBvsC,OAAAgC,eACW8rD,EAAAptD,UAAA,WAAQ,KADnB,WAEI,MAAO,2CAIXV,OAAAgC,eACW8rD,EAAAptD,UAAA,WAAQ,KADnB,WAEI,OAAOF,KAAKgB,OAAOgtD,wCAIvBxuD,OAAAgC,eACW8rD,EAAAptD,UAAA,uBAAoB,KAD/B,WAEI,OAAQF,KAAKgB,OAAO+qC,WAAa/rC,KAAKgB,OAAO4vC,YAAc5wC,KAAKgB,OAAO4vC,YAAYxkC,GAAK,sCAI5F5M,OAAAgC,eACW8rD,EAAAptD,UAAA,mBAAgB,KAD3B,WAEI,MAAO,wCAKXotD,EAAAptD,UAAAwpD,QADA,WAEI1pD,KAAK4M,QAQT0gD,EAAAptD,UAAA+tD,YAJA,SAIYztB,GACRA,EAAMqH,iBACN7nC,KAAK4M,QAMT0gD,EAAAptD,UAAAguD,MAFA,WAGIluD,KAAK6M,SAITygD,EAAAptD,UAAAgnD,cAAA,SAAc1mB,GACV,IAAKxgC,KAAK+rC,UACN,OAAQvL,EAAMv/B,IAAIiR,eACd,IAAK,QACL,IAAK,WACL,IAAK,IACL,IAAK,OACL,IAAK,MACD,OACJ,QACI2Z,EAAA3rB,UAAMgnD,cAAatmD,KAAAZ,KAACwgC,KAMpC8sB,EAAAptD,UAAAknD,mBAAA,WACIv7B,EAAA3rB,UAAMknD,mBAAkBxmD,KAAAZ,OAI5BstD,EAAAptD,UAAAinD,iBAAA,WACIt7B,EAAA3rB,UAAMinD,iBAAgBvmD,KAAAZ,OAI1BstD,EAAAptD,UAAAonD,aAAA,WACIz7B,EAAA3rB,UAAMonD,aAAY1mD,KAAAZ,OAItBstD,EAAAptD,UAAAmnD,cAAA,WACIx7B,EAAA3rB,UAAMmnD,cAAazmD,KAAAZ,OAMhBstD,EAAAptD,UAAA2M,MAAP,WACQ7M,KAAK+rC,YAGT/rC,KAAKgB,OAAO6L,QACZ7M,KAAKwtD,gBAAgBtrD,SAMlBorD,EAAAptD,UAAA0M,KAAP,YACQ5M,KAAKuvC,UAAavvC,KAAK+rC,YAG3B/rC,KAAKgB,OAAO0O,MAAQ1P,KAAKu6B,cAAc/B,YAAc,KACrDx4B,KAAKgB,OAAO4L,KAAK5M,KAAK83B,UACtB93B,KAAKgB,OAAOowC,YAAY5O,KAAKC,EAAAA,UAAUziC,KAAKwtD,kBAAkB9qB,UAAU1iC,KAAK2tD,QAC7E3tD,KAAKgB,OAAOq8B,SAASmF,KAAKkH,EAAAA,SAAShH,UAAU1iC,KAAK8tD,oBAClD9tD,KAAKgB,OAAOoP,SAAS2sC,QAAQva,KAAKC,EAAAA,UAAUziC,KAAKwtD,kBAAkB9qB,UAAU1iC,KAAK8tD,sBAGtFtuD,OAAAgC,eAAY8rD,EAAAptD,UAAA,YAAS,KAArB,WACI,OAAOF,KAAKgB,QAAShB,KAAKgB,OAAO+qC,2CAgC9BuhB,EAAAptD,UAAAkkC,YAAP,WACIpkC,KAAKwtD,gBAAgBnpB,gCA9Q5Bn3B,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,iEAhDLw9C,EAAAA,QAAO5pD,WAAA,CAAA,CAAA2V,KAoDC6wC,EAAAA,MAAI,CAAA7wC,KAAIo2B,EAAAA,UAAQ,CAAAp2B,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAACk+C,EAAAA,kBApD1BC,EAAAA,gBAAe7pD,WAAA,CAAA,CAAA2V,KAqDhB6wC,EAAAA,MAAI,CAAA7wC,KAAIo2B,EAAAA,UAAQ,CAAAp2B,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAACm+C,EAAAA,0BA9CnC8B,GAAsB3rD,WAAA,CAAA,CAAA2V,KA+Cdo2B,EAAAA,kBAvDH7L,EAAAA,kBAA0B4L,EAAAA,qDA0GnCz/B,EAAAA,MAAKX,KAAA,CAAC,qCAmBNW,EAAAA,MAAKX,KAAA,CAAC,yDAwBNW,EAAAA,MAAKX,KAAA,CAAC,mDAUN6c,EAAAA,yBAIAyjB,EAAAA,YAAWtgC,KAAA,CAAC,mCAIZsgC,EAAAA,YAAWtgC,KAAA,CAAC,mCAIZsgC,EAAAA,YAAWtgC,KAAA,CAAC,wCAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,wCAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,gDAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,wDAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,2CAMZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,gCAMvBY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,YAAS,CAAAiK,KAC5CrJ,EAAAA,aAAYZ,KAAA,CAAC,wBAAyB,CAAC,YAAS,CAAAiK,KAChDrJ,EAAAA,aAAYZ,KAAA,CAAC,kBAAmB,CAAC,YAAS,CAAAiK,KAC1CrJ,EAAAA,aAAYZ,KAAA,CAAC,sBAAuB,CAAC,0BAOrCY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,YAAS,CAAAiK,KACtCrJ,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,cAsGxC6gD,EAhRA,CAG8CtG,IAgR9CmH,GAAA,WAAA,SAAAA,KAKqC,2BALpC1gD,EAAAA,SAAQhB,KAAA,CAAC,CACNgsC,QAAS,CAAC+O,GAAmB9O,EAAAA,cAC7BhrC,aAAc,CAAC4/C,IACf3/C,QAAS,CAAC2/C,QAEuBa,EALrC,kBC7RI,SAAAC,EAAmB3sB,EAA6BuB,EACO2pB,GADvD,IAAAn7C,EAEQqa,EAAAjrB,KAAAZ,KAAM2sD,IAAuB3sD,YAFlBwR,EAAAiwB,QAAAA,EAA6BjwB,EAAAwxB,UAAAA,EACOxxB,EAAAm7C,uBAAAA,EAnB/Cn7C,EAAAo7C,MAAQ,OAIRp7C,EAAA68C,UAAY,aA8Bb78C,EAAA88C,YAAc,IAAIvnC,EAAAA,aAYQvV,EAAA69B,KAAO,SAuGxB79B,EAAAoJ,UAAW,IAS/B,OAlKwCpG,EAAAA,EAAAA,GA8BpChV,OAAAgC,eAAW4sD,EAAAluD,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKyhC,QAAQ5D,+CA2BxBr+B,OAAAgC,eAAwB4sD,EAAAluD,UAAA,OAAI,KAA5B,SAA6BiC,GACzBnC,KAAK4sD,MAAQzqD,GAASnC,KAAK4sD,MAC3B5sD,KAAKgjC,UAAUurB,SAASvuD,KAAK69B,cAAkB79B,KAAKquD,UAAS,KAAKruD,KAAK4sD,wCAS3EptD,OAAAgC,eAA6B4sD,EAAAluD,UAAA,QAAK,KAAlC,SAAmCiC,GAC/BnC,KAAKwuD,OAASrsD,GAASnC,KAAK69B,cAAct/B,MAAMkwD,MAChDzuD,KAAKgjC,UAAU+B,SAAS/kC,KAAK69B,cAAe,QAAS79B,KAAKwuD,yCAS9DhvD,OAAAgC,eAAkC4sD,EAAAluD,UAAA,aAAU,KAA5C,SAA6CiC,GACzCnC,KAAK0uD,iBAAmBvsD,GAASnC,KAAK0uD,iBACtC1uD,KAAKgjC,UAAU+B,SAAS/kC,KAAK69B,cAAe,aAAc79B,KAAK0uD,mDASnElvD,OAAAgC,eAAuB4sD,EAAAluD,UAAA,QAAK,KAA5B,SAA6BiC,GACzBnC,KAAK2uD,OAASxsD,GAASnC,KAAK2uD,OAC5B3uD,KAAKgjC,UAAU4rB,aAAa5uD,KAAK69B,cAAe,aAAc79B,KAAK2uD,yCASvEnvD,OAAAgC,eAAa4sD,EAAAluD,UAAA,WAAQ,KAArB,SAAsBof,IAClBA,IAAQA,GAEJtf,KAAKgjC,UAAUurB,SAASvuD,KAAK69B,cAAkB79B,KAAKquD,UAAS,cAE7DruD,KAAKgjC,UAAU6rB,YAAY7uD,KAAK69B,cAAkB79B,KAAKquD,UAAS,+CAOxE7uD,OAAAgC,eACW4sD,EAAAluD,UAAA,eAAY,KADvB,WAEI,OAAuB,SAAfF,KAAK4sD,OAAmC,WAAf5sD,KAAK4sD,OAAqC,aAAf5sD,KAAK4sD,QAC7D5sD,KAAK4rD,iBAAmBC,GAAeT,sCAM/C5rD,OAAAgC,eACW4sD,EAAAluD,UAAA,kBAAe,KAD1B,WAEI,OAAuB,SAAfF,KAAK4sD,OAAmC,WAAf5sD,KAAK4sD,OAAqC,aAAf5sD,KAAK4sD,QAC7D5sD,KAAK4rD,iBAAmBC,GAAeR,yCAM/C7rD,OAAAgC,eACW4sD,EAAAluD,UAAA,kBAAe,KAD1B,WAEI,MAAsB,QAAfF,KAAK4sD,OAAmB5sD,KAAK4rD,iBAAmBC,GAAeT,sCAM1E5rD,OAAAgC,eACW4sD,EAAAluD,UAAA,qBAAkB,KAD7B,WAEI,MAAsB,QAAfF,KAAK4sD,OAAmB5sD,KAAK4rD,iBAAmBC,GAAeR,yCAiBnE+C,EAAAluD,UAAAktC,QADP,SACe1P,GACX19B,KAAKsuD,YAAYr1C,KAAKykB,wBAnK7BxwB,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2DAdV8zB,EAAAA,kBAMA6tB,EAAAA,6CAiCKhiB,EAAAA,UAAQ,CAAAp2B,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAAC6+C,8CAcvBhiC,EAAAA,qBAaAyjB,EAAAA,YAAWtgC,KAAA,CAAC,2BAQZW,EAAAA,MAAKX,KAAA,CAAC,4BAWNW,EAAAA,MAAKX,KAAA,CAAC,sCAWNW,EAAAA,MAAKX,KAAA,CAAC,sCAWNW,EAAAA,MAAKX,KAAA,CAAC,8BAWNW,EAAAA,4BAYA2/B,EAAAA,YAAWtgC,KAAA,CAAC,mDASZsgC,EAAAA,YAAWtgC,KAAA,CAAC,sDASZsgC,EAAAA,YAAWtgC,KAAA,CAAC,0DAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,mDAaZW,EAAAA,uBAKAC,EAAAA,aAAYZ,KAAA,CAAC,QAAU,CAAC,cAI7B2hD,GAlKwC5C,IAuKxCuD,GAAA,WAAA,SAAAA,KAI+B,2BAJ9BthD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC0gD,IACfzgD,QAAS,CAACygD,QAEiBW,EAJ/B,OCtLIC,QAAU,UACVC,OAAS,UAGT9f,GAAU,EAEd+f,GAAA,WAAA,SAAAA,IAiBWlvD,KAAAoM,GAAK,eAAe+iC,KAWnBnvC,KAAAmvD,OAAS,IAQVnvD,KAAAqvC,KAAO,YAWPrvC,KAAA0W,KAAgC04C,GAAeJ,QAiB/ChvD,KAAAqvD,QAAS,EAoBTrvD,KAAAsvD,UAAW,EAqCtB,OAxEI9vD,OAAAgC,eACI0tD,EAAAhvD,UAAA,WAAQ,KADZ,WAEI,OAAOF,KAAK0W,OAAS04C,GAAeH,wCAqBxCzvD,OAAAgC,eAAI0tD,EAAAhvD,UAAA,YAAS,KAAb,WACI,OAAOF,KAAK0W,OAAS04C,GAAeJ,yCAqBxCxvD,OAAAgC,eACI0tD,EAAAhvD,UAAA,QAAK,KAWT,WAGI,OAAIF,KAAKqvD,OACDrvD,KAAKsvD,SACKtvD,KAAKmvD,OAAM,KAEfI,KAAcvvD,KAAKmvD,OAEzBnvD,KAAKsvD,SACKtvD,KAAKmvD,OAAM,SAEfI,SAA8BvvD,KAAKmvD,YAxBrD,SACUhtD,GACNnC,KAAKmvD,OAAShtD,uDAhGrB+K,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,8CAaT4/B,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,sBAWAA,EAAAA,MAAKX,KAAA,CAAC,uBAONsgC,EAAAA,YAAWtgC,KAAA,CAAC,cAAW,CAAAiK,KACvBtJ,EAAAA,oBAUA2/B,EAAAA,YAAWtgC,KAAA,CAAC,sBAAmB,CAAAiK,KAC/BtJ,EAAAA,wBAGA2/B,EAAAA,YAAWtgC,KAAA,CAAC,6CAaZsgC,EAAAA,YAAWtgC,KAAA,CAAC,6BAA0B,CAAAiK,KACtCtJ,EAAAA,wBAmBA2/B,EAAAA,YAAWtgC,KAAA,CAAC,gCAA6B,CAAAiK,KACzCtJ,EAAAA,qBAWA2/B,EAAAA,YAAWtgC,KAAA,CAAC,mBA2BjByiD,EAzHA,iBA2HA,SAAAM,KAIgC,2BAJ/B/hD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACwhD,IACfvhD,QAAS,CAACuhD,QAEkBM,SCrH5BC,WAAA,EACAC,aAAA,EACAC,KAAA,0GA4bA,SAAAC,EAAmBpxC,EAA+BijB,EAA4BouB,EAAqBC,GAAhF9vD,KAAAwe,IAAAA,EAA+Bxe,KAAAyhC,QAAAA,EAA4BzhC,KAAA6vD,KAAAA,EAAqB7vD,KAAA8vD,SAAAA,EAhS5F9vD,KAAA+vD,cAAgB,EAWhB/vD,KAAAgwD,gBAAkB,GAYlBhwD,KAAAiwD,gBAAiB,EAajBjwD,KAAAkwD,kBAAmB,EAanBlwD,KAAAmwD,cAAgB,KAgBhBnwD,KAAAowD,UAAY,IAAIrpC,EAAAA,aAgBhB/mB,KAAAqwD,QAAU,IAAItpC,EAAAA,aAgBd/mB,KAAAswD,cAAgB,IAAIvpC,EAAAA,aAgBpB/mB,KAAAuwD,YAAc,IAAIxpC,EAAAA,aAMlB/mB,KAAAm2C,MAAQ,OAMRn2C,KAAAwwD,mBAAqB,YAMrBxwD,KAAAywD,YAAc,UAkGdzwD,KAAA0wD,sBAAwB,OAKrB1wD,KAAA80C,QAAU,EAIV90C,KAAA+0C,QAAU,EASV/0C,KAAA2wD,cAAe,EAoBf3wD,KAAA4wD,eAAiB,KAKjB5wD,KAAA6wD,UAAW,EAIX7wD,KAAA8wD,cAAgB,KAKhB9wD,KAAA+wD,SAAW,IAAIh0B,EAAAA,QAKf/8B,KAAAgxD,kBAAmB,EAoajC,OAnjBIxxD,OAAAgC,eAAWouD,EAAA1vD,UAAA,UAAO,KAelB,WACI,MAA4B,YAArBF,KAAKywD,iBAhBhB,SAAmBQ,GACfjxD,KAAKywD,YAAcQ,EAAW,UAAY,SAC1CjxD,KAAKwe,IAAIyhB,iDAoBbzgC,OAAAgC,eAAWouD,EAAA1vD,UAAA,OAAI,KAWf,WACI,OAAOw1C,SAAS11C,KAAKkxD,UAAU3yD,MAAM05B,KAAM,SAZ/C,SAAgB3Y,GAAhB,IAAA9N,EAAAxR,KACIu4C,sBAAsB,WACd/mC,EAAK0/C,YACL1/C,EAAK0/C,UAAU3yD,MAAM05B,KAAO3Y,EAAM,yCAe9C9f,OAAAgC,eAAWouD,EAAA1vD,UAAA,MAAG,KAWd,WACI,OAAOw1C,SAAS11C,KAAKkxD,UAAU3yD,MAAM45B,IAAK,SAZ9C,SAAe7Y,GAAf,IAAA9N,EAAAxR,KACIu4C,sBAAsB,WACd/mC,EAAK0/C,YACL1/C,EAAK0/C,UAAU3yD,MAAM45B,IAAM7Y,EAAM,yCAsB7C9f,OAAAgC,eAAWouD,EAAA1vD,UAAA,uBAAoB,KAA/B,WACI,MAA+B,oBAAjBixD,8CAalB3xD,OAAAgC,eAAWouD,EAAA1vD,UAAA,qBAAkB,KAA7B,WACI,MAAO,iBAAkBklB,wCAuE7BwqC,EAAA1vD,UAAAusC,SAAA,WAAA,IAAAj7B,EAAAxR,KACIA,KAAK6vD,KAAKnoB,kBAAkB,WACpBl2B,EAAK4/C,sBACL7uB,EAAAA,UAAU/wB,EAAKiwB,QAAQ5D,cAAe,eAAe2E,KAAKC,EAAAA,UAAUjxB,EAAKu/C,WACxEruB,UAAU,SAAC/vB,GAAQ,OAAAnB,EAAK6iC,cAAc1hC,KAEvC4vB,EAAAA,UAAU/wB,EAAKiwB,QAAQ5D,cAAe,eAAe2E,KACjD6uB,EAAAA,SAAS,WAAM,OAAAC,EAAAA,SAAS,EAAGC,EAAAA,2BAC3B9uB,EAAAA,UAAUjxB,EAAKu/C,WACjBruB,UAAU,SAAC/vB,GAAQ,OAAAnB,EAAKggD,cAAc7+C,KAExC4vB,EAAAA,UAAU/wB,EAAKiwB,QAAQ5D,cAAe,aAAa2E,KAAKC,EAAAA,UAAUjxB,EAAKu/C,WAClEruB,UAAU,SAAC/vB,GAAQ,OAAAnB,EAAK8iC,YAAY3hC,MAClCnB,EAAKigD,oBACZlvB,EAAAA,UAAU/wB,EAAKiwB,QAAQ5D,cAAe,cAAc2E,KAAKC,EAAAA,UAAUjxB,EAAKu/C,WACvEruB,UAAU,SAAC/vB,GAAQ,OAAAnB,EAAK6iC,cAAc1hC,KAEvC4vB,EAAAA,UAAUrd,SAASif,YAAa,aAAa3B,KACzC6uB,EAAAA,SAAS,WAAM,OAAAC,EAAAA,SAAS,EAAGC,EAAAA,2BAC3B9uB,EAAAA,UAAUjxB,EAAKu/C,WACjBruB,UAAU,SAAC/vB,GAAQ,OAAAnB,EAAKggD,cAAc7+C,KAExC4vB,EAAAA,UAAUrd,SAASif,YAAa,YAAY3B,KAAKC,EAAAA,UAAUjxB,EAAKu/C,WAC3DruB,UAAU,SAAC/vB,GAAQ,OAAAnB,EAAK8iC,YAAY3hC,OAGzC4vB,EAAAA,UAAU/wB,EAAKiwB,QAAQ5D,cAAe,aAAa2E,KAAKC,EAAAA,UAAUjxB,EAAKu/C,WACtEruB,UAAU,SAAC/vB,GAAQ,OAAAnB,EAAK6iC,cAAc1hC,KAEvC4vB,EAAAA,UAAUrd,SAASif,YAAa,aAAa3B,KACzC6uB,EAAAA,SAAS,WAAM,OAAAC,EAAAA,SAAS,EAAGC,EAAAA,2BAC3B9uB,EAAAA,UAAUjxB,EAAKu/C,WACjBruB,UAAU,SAAC/vB,GAAQ,OAAAnB,EAAKggD,cAAc7+C,KAExC4vB,EAAAA,UAAUrd,SAASif,YAAa,WAAW3B,KAAKC,EAAAA,UAAUjxB,EAAKu/C,WAC1DruB,UAAU,SAAC/vB,GAAQ,OAAAnB,EAAK8iC,YAAY3hC,SAQrDi9C,EAAA1vD,UAAAkkC,YAAA,WACIpkC,KAAK+wD,SAAS7uD,MAAK,GACnBlC,KAAK+wD,SAAS1sB,WAEVrkC,KAAKkxD,WAAalxD,KAAKgxD,mBACvBhxD,KAAKkxD,UAAUtwB,WAAW9a,YAAY9lB,KAAKkxD,WAC3ClxD,KAAKkxD,UAAY,OASlBtB,EAAA1vD,UAAAm0C,cAAP,SAAqB7T,GACjBxgC,KAAK6wD,UAAW,EAChB7wD,KAAK4wD,eAAiBpwB,EAAMqX,UAExB73C,KAAKoxD,uBAAyBpxD,KAAKyxD,oBAEnCzxD,KAAK80C,QAAUtU,EAAM8V,MACrBt2C,KAAK+0C,QAAUvU,EAAMgW,OACdx2C,KAAKyxD,qBACZzxD,KAAK80C,QAAUtU,EAAM4V,QAAQ,GAAGE,MAChCt2C,KAAK+0C,QAAUvU,EAAM4V,QAAQ,GAAGI,WAI9Bkb,EAAYhc,SAASxwB,SAASif,YAAYwtB,iBAAiB3xD,KAAKyhC,QAAQ5D,eAAe,cAAe,IACtG+zB,EAAalc,SAASxwB,SAASif,YAAYwtB,iBAAiB3xD,KAAKyhC,QAAQ5D,eAAe,eAAgB,IAE9G79B,KAAK6xD,aACA7xD,KAAK80C,QAAU90C,KAAKyhC,QAAQ5D,cAAcluB,wBAAwBsoB,KAAOj4B,KAAK8xD,sBAAyBF,EAC5G5xD,KAAK+xD,aACA/xD,KAAK+0C,QAAU/0C,KAAKyhC,QAAQ5D,cAAcluB,wBAAwBwoB,IAAMn4B,KAAKgyD,qBAAwBN,EAC1G1xD,KAAKiyD,YAAcjyD,KAAK80C,QAAU90C,KAAK6xD,aACvC7xD,KAAKkyD,YAAclyD,KAAK+0C,QAAU/0C,KAAK+xD,aAGnC/xD,KAAKoxD,qBACLpxD,KAAKyhC,QAAQ5D,cAAcs0B,kBAAkBnyD,KAAK4wD,iBAElD5wD,KAAKyhC,QAAQ5D,cAAckT,QAC3BvQ,EAAMqH,mBAWP+nB,EAAA1vD,UAAAsxD,cAAP,SAAqBhxB,GAArB,IAAAhvB,EAAAxR,KACI,GAAIA,KAAK6wD,SAAU,KACTuB,EAAqC,CACvCC,cAAe7xB,EACf8xB,MAAOtyD,KACP4Y,QAAQ,GAER09B,OAAK,EAAEE,OAAK,EACZx2C,KAAKoxD,uBAAyBpxD,KAAKyxD,oBAEnCnb,EAAQ9V,EAAM8V,MACdE,EAAQhW,EAAMgW,OACPx2C,KAAKyxD,qBACZnb,EAAQ9V,EAAM4V,QAAQ,GAAGE,MACzBE,EAAQhW,EAAM4V,QAAQ,GAAGI,MAGzBhW,EAAMqH,sBAGJ0qB,EAAcjc,EAAQt2C,KAAK80C,QAC3B0d,EAAchc,EAAQx2C,KAAK+0C,QACjC,IAAK/0C,KAAK2wD,eACLruC,KAAKukB,IAAI0rB,GAAevyD,KAAK+vD,eAAiBztC,KAAKukB,IAAI2rB,GAAexyD,KAAK+vD,eAU5E,OATA/vD,KAAK6vD,KAAKnS,IAAI,WACVlsC,EAAK4+C,UAAUn3C,KAAKm5C,UAGnBA,EAAcx5C,SACf5Y,KAAK2wD,cAAe,EAEpB3wD,KAAKyyD,gBAAgBjyB,KAGtB,IAAKxgC,KAAK2wD,aACb,OAGJ3wD,KAAKi4B,KAAOj4B,KAAKiyD,YAAcM,EAC/BvyD,KAAKm4B,IAAMn4B,KAAKkyD,YAAcM,EAE9BxyD,KAAK0yD,mBAAmBpc,EAAOE,EAAOhW,KAWvCovB,EAAA1vD,UAAAo0C,YAAP,SAAmB9T,GAAnB,IAAAhvB,EAAAxR,KACI,GAAKA,KAAK6wD,SAAV,KAIMvxB,EAAY,CACd+yB,cAAe7xB,EACf8xB,MAAOtyD,MAEXA,KAAK6wD,UAAW,EACZ7wD,KAAK2wD,cACD3wD,KAAK8wD,eAAiB9wD,KAAK8wD,gBAAkB9wD,KAAKyhC,QAAQ5D,eACrD79B,KAAKkwD,kBACNlwD,KAAK2yD,gBAAgB,MAIzB3yD,KAAK4yD,kBAAkBpyB,EAAM8V,MAAO9V,EAAMgW,MAAOhW,KAE1CxgC,KAAKkwD,kBACPlwD,KAAKi4B,OAAS3V,KAAKmC,MAAMzkB,KAAKiyD,cAAgBjyD,KAAKm4B,MAAQ7V,KAAKmC,MAAMzkB,KAAKkyD,aAOhFlyD,KAAK2yD,gBAAgB,OAJrB3yD,KAAKkxD,UAAU3yD,MAAMulC,mBAAqB9jC,KAAK0wD,sBAC/C1wD,KAAKi4B,KAAOj4B,KAAKiyD,YACjBjyD,KAAKm4B,IAAMn4B,KAAKkyD,aAKpBlyD,KAAK6vD,KAAKnS,IAAI,WACVlsC,EAAK6+C,QAAQp3C,KAAKqmB,MAGtBt/B,KAAK6vD,KAAKnS,IAAI,WACVlsC,EAAK++C,YAAYt3C,KAAKqmB,OAaxBswB,EAAA1vD,UAAAuyD,gBAAV,SAA0BjyB,EAAOnxB,GAAjC,IAAAmC,EAAAxR,UAAiC,IAAAqP,IAAAA,EAAA,MAC7BrP,KAAKkxD,UAAY7hD,EAAOA,EAAKwjD,WAAU,GAAQ7yD,KAAKyhC,QAAQ5D,cAAcg1B,WAAU,GACpF7yD,KAAKkxD,UAAU3yD,MAAMulC,mBAAqB,OAC1C9jC,KAAKkxD,UAAU3yD,MAAM27B,SAAW,eAC1B44B,EAAW9yD,KAAKmwD,cAAgBnwD,KAAKmwD,cAAcxgD,wBAAwBsoB,KAAO,EAClF86B,EAAU/yD,KAAKmwD,cAAgBnwD,KAAKmwD,cAAcxgD,wBAAwBwoB,IAAM,EACtFn4B,KAAKkxD,UAAU3yD,MAAM45B,IAAMn4B,KAAKkyD,YAAca,EAAU,KACxD/yD,KAAKkxD,UAAU3yD,MAAM05B,KAAOj4B,KAAKiyD,YAAca,EAAW,KAEtD9yD,KAAKgwD,iBACLhwD,KAAK8vD,SAASvB,SAASvuD,KAAKkxD,UAAWlxD,KAAKgwD,iBAG5ChwD,KAAKmwD,cACLnwD,KAAKmwD,cAAcvqC,YAAY5lB,KAAKkxD,WAEpChsC,SAASS,KAAKC,YAAY5lB,KAAKkxD,WAG/BlxD,KAAKoxD,uBAELpxD,KAAKkxD,UAAUiB,kBAAkBnyD,KAAK4wD,gBACtC5wD,KAAKkxD,UAAU/uB,iBAAiB,cAAe,SAAC11B,GAC5C+E,EAAKggD,cAAc/kD,KAEvBzM,KAAKkxD,UAAU/uB,iBAAiB,YAAa,SAAC11B,GAC1C+E,EAAK8iC,YAAY7nC,MAIrBzM,KAAKkwD,kBAELlwD,KAAKkxD,UAAU/uB,iBAAiB,gBAAiB,SAAC11B,GAC9C+E,EAAKmhD,gBAAgBlmD,KAKzBzM,KAAKiwD,iBACLjwD,KAAKgzD,SAAU,IAQbpD,EAAA1vD,UAAAwyD,mBAAV,SAA6Bpc,EAAeE,EAAe6b,GAYvD,QAXIY,EACE3zB,EAAuC,CACzC4zB,OAAQlzD,KAAK80C,QACbqe,OAAQnzD,KAAK+0C,QACbuB,MAAOA,EACPE,MAAOA,EACP8b,MAAOtyD,KACPqyD,cAAeA,GAGbe,EAAoBpzD,KAAKqzD,mBAAmB/c,EAAOE,GAChDh2C,EAAI,EAAGA,EAAI4yD,EAAkBzyD,OAAQH,IAC1C,GAAuD,SAAnD4yD,EAAkB5yD,GAAG8yD,aAAa,cAA2BF,EAAkB5yD,KAAOR,KAAKkxD,UAAW,CACtG+B,EAAcG,EAAkB5yD,GAChC,MAIJyyD,GACAjzD,KAAKuzD,cAAcN,EAAa,cAAe3zB,GAG/C2zB,KACEjzD,KAAK8wD,eAAkB9wD,KAAK8wD,eAAiB9wD,KAAK8wD,gBAAkBmC,IAClEjzD,KAAK8wD,eACL9wD,KAAKuzD,cAAcvzD,KAAK8wD,cAAe,eAAgBxxB,GAG3Dt/B,KAAK8wD,cAAgBmC,EACrBjzD,KAAKuzD,cAAcvzD,KAAK8wD,cAAe,eAAgBxxB,KAC/C2zB,GAAejzD,KAAK8wD,gBAC5B9wD,KAAKuzD,cAAcvzD,KAAK8wD,cAAe,eAAgBxxB,GACvDt/B,KAAK8wD,cAAgB,OASnBlB,EAAA1vD,UAAA0yD,kBAAV,SAA4Btc,EAAeE,EAAe6b,OAChD/yB,EAAuC,CACzC4zB,OAAQlzD,KAAK80C,QACbqe,OAAQnzD,KAAK+0C,QACbuB,MAAOA,EACPE,MAAOA,EACP8b,MAAOtyD,KACPqyD,cAAeA,GAGnBryD,KAAKuzD,cAAcvzD,KAAK8wD,cAAe,UAAWxxB,GAClDt/B,KAAKuzD,cAAcvzD,KAAK8wD,cAAe,eAAgBxxB,GACvDt/B,KAAK8wD,cAAgB,MAOlBlB,EAAA1vD,UAAAszD,sBAAP,WACI,GAAKxzD,KAAKkxD,UAAV,KAKMuC,EAAgBzzD,KAAKi4B,KAAOj4B,KAAKiyD,YACjCyB,EAAgB1zD,KAAKm4B,IAAMn4B,KAAKkyD,YAChCyB,EAAU3zD,KAAKyhC,QAAQ5D,cAAcluB,wBAAwBsoB,KAC7D27B,EAAU5zD,KAAKyhC,QAAQ5D,cAAcluB,wBAAwBwoB,IAC7D07B,EAAa7zD,KAAKiyD,YAAc0B,EAChCG,EAAa9zD,KAAKkyD,YAAc0B,EACtC5zD,KAAKm4B,IAAMw7B,EAAUF,EAAgBI,EACrC7zD,KAAKi4B,KAAO27B,EAAUF,EAAgBI,IAiBnClE,EAAA1vD,UAAA6zD,aAAP,WACI,GAAI/zD,KAAKkwD,kBAAoBlwD,KAAKkxD,UAAW,CACzClxD,KAAKwzD,4BAIC9B,EAAYhc,SAASxwB,SAASif,YAAYwtB,iBAAiB3xD,KAAKyhC,QAAQ5D,eAAe,cAAe,IACtG+zB,EAAalc,SAASxwB,SAASif,YAAYwtB,iBAAiB3xD,KAAKyhC,QAAQ5D,eAAe,eAAgB,IACxG81B,EAAU3zD,KAAKyhC,QAAQ5D,cAAcluB,wBAAwBsoB,KAAOj4B,KAAK8xD,sBACzE8B,EAAU5zD,KAAKyhC,QAAQ5D,cAAcluB,wBAAwBwoB,IAAMn4B,KAAKgyD,qBAE9EhyD,KAAKkxD,UAAU3yD,MAAMulC,mBAAqB9jC,KAAK0wD,sBAC/C1wD,KAAKi4B,KAAO07B,EAAU/B,EACtB5xD,KAAKm4B,IAAMy7B,EAAUlC,IAOtB9B,EAAA1vD,UAAAyyD,gBAAP,SAAuBnyB,GAAvB,IAAAhvB,EAAAxR,KACQA,KAAK2wD,eAAiB3wD,KAAK6wD,WACvB7wD,KAAKiwD,iBACLjwD,KAAKgzD,SAAU,GAEnBhzD,KAAKkxD,UAAUtwB,WAAW9a,YAAY9lB,KAAKkxD,WAC3ClxD,KAAKkxD,UAAY,KAEjBlxD,KAAKyhC,QAAQ5D,cAAct/B,MAAMulC,mBAAqB,OACtD9jC,KAAK2wD,cAAe,EACpB3wD,KAAK6vD,KAAKnS,IAAI,WACVlsC,EAAK8+C,cAAcr3C,KAAK,CACpBo5C,cAAe7xB,EACf8xB,MAAO9gD,QASbo+C,EAAA1vD,UAAAmzD,mBAAV,SAA6B/c,EAAeE,OAKlCwd,EAAY1d,EAAQlxB,OAAO6uC,YAC3BC,EAAY1d,EAAQpxB,OAAO+uC,YACjC,OAAIjvC,SAA8B,oBAEvBA,SAA8B,oBAAE8uC,EAAWE,GAG3ChvC,SAASkuC,kBAAkBY,EAAWE,IAO3CtE,EAAA1vD,UAAAqzD,cAAV,SAAwBvyD,EAAQozD,EAAmB90B,OAEzC+0B,EAAiBnvC,SAASovC,YAAY,eAC5CD,EAAeE,gBAAgBH,GAAW,GAAO,EAAO90B,GACxDt+B,EAAOuyD,cAAcc,IAIfzE,EAAA1vD,UAAA8xD,mBAAV,WACI,OAAO5sC,OAAO8T,QAAU9T,OAAO8T,QAAW9T,OAAO+uC,YAAc/uC,OAAO+uC,YAAc,GAG9EvE,EAAA1vD,UAAA4xD,oBAAV,WACI,OAAO1sC,OAAO2T,QAAU3T,OAAO2T,QAAW3T,OAAO6uC,YAAc7uC,OAAO6uC,YAAc,uBAxtB3F/mD,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,yDA7IV0/B,EAAAA,yBAXA5L,EAAAA,kBAMA4D,EAAAA,cAIAiqB,EAAAA,2CAwJC1hD,EAAAA,MAAKX,KAAA,CAAC,kCAYNW,EAAAA,+BAWAA,EAAAA,8BAYAA,EAAAA,gCAaAA,EAAAA,6BAaAA,EAAAA,yBAgBAkc,EAAAA,wBAgBAA,EAAAA,8BAgBAA,EAAAA,4BAgBAA,EAAAA,sBAMAyjB,EAAAA,YAAWtgC,KAAA,CAAC,iDAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,iDAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,uBAgkBjBmjD,mBA6EI,SAAA4E,EAAmB/yB,EAA6BuB,EAA8BrG,GAA3D38B,KAAAyhC,QAAAA,EAA6BzhC,KAAAgjC,UAAAA,EAA8BhjC,KAAA28B,MAAAA,EAjDvE38B,KAAAy0D,QAAU,IAAI1tC,EAAAA,aAcd/mB,KAAA00D,QAAU,IAAI3tC,EAAAA,aAgBd/mB,KAAA20D,OAAS,IAAI5tC,EAAAA,aAMb/mB,KAAA40D,WAAY,EAMZ50D,KAAA60D,UAAW,EAKR70D,KAAA+wD,SAAW,IAAIh0B,EAAAA,QAqH7B,OAhHIy3B,EAAAt0D,UAAAusC,SAAA,WAAA,IAAAj7B,EAAAxR,KACIA,KAAK28B,MAAM+K,kBAAkB,WACzBnF,EAAAA,UAAU/wB,EAAKiwB,QAAQ5D,cAAe,gBAAgB2E,KAAKC,EAAAA,UAAUjxB,EAAKu/C,WACrEruB,UAAU,SAAC/vB,GAAQ,OAAAnB,EAAKsjD,YAAW,KAExCvyB,EAAAA,UAAU/wB,EAAKiwB,QAAQ5D,cAAe,gBAAgB2E,KAAKC,EAAAA,UAAUjxB,EAAKu/C,WAAWruB,UAAU,SAAC/vB,GAAQ,OAAAnB,EAAKujD,YAAYpiD,KACzH4vB,EAAAA,UAAU/wB,EAAKiwB,QAAQ5D,cAAe,eAAe2E,KAAKC,EAAAA,UAAUjxB,EAAKu/C,WAAWruB,UAAU,SAAC/vB,GAAQ,OAAAnB,EAAKwjD,WAAWriD,QAI/H6hD,EAAAt0D,UAAAkkC,YAAA,WACIpkC,KAAK+wD,SAAS7uD,MAAK,GACnBlC,KAAK+wD,SAAS1sB,YAMXmwB,EAAAt0D,UAAA80D,WAAP,SAAkBx0B,KAKXg0B,EAAAt0D,UAAA40D,YAAP,SAAmBt0B,GAAnB,IAAAhvB,EAAAxR,KACIA,KAAK60D,UAAW,MACVI,EAAcj1D,KAAKyhC,QAAQ5D,cAAcluB,wBAAwBsoB,KAAOj4B,KAAK8xD,sBAC7EoD,EAAcl1D,KAAKyhC,QAAQ5D,cAAcluB,wBAAwBwoB,IAAMn4B,KAAKgyD,qBAC5EmD,EAAU30B,EAAM40B,OAAO9e,MAAQ2e,EAC/BI,EAAU70B,EAAM40B,OAAO5e,MAAQ0e,EAC/B51B,EAAmC,CACrC+yB,cAAe7xB,EAAM40B,OAAO/C,cAC5BC,MAAOtyD,KACPs1D,KAAM90B,EAAM40B,OAAO9C,MACnBiD,SAAU/0B,EAAM40B,OAAO9C,MAAMnhD,KAC7B+hD,OAAQ1yB,EAAM40B,OAAOlC,OACrBC,OAAQ3yB,EAAM40B,OAAOjC,OACrB7c,MAAO9V,EAAM40B,OAAO9e,MACpBE,MAAOhW,EAAM40B,OAAO5e,MACpB2e,QAASA,EACTE,QAASA,GAEbr1D,KAAK28B,MAAM+gB,IAAI,WACXlsC,EAAKijD,QAAQx7C,KAAKqmB,MAOnBk1B,EAAAt0D,UAAA60D,YAAP,SAAmBv0B,GAAnB,IAAAhvB,EAAAxR,KACIA,KAAK60D,UAAW,MACVI,EAAcj1D,KAAKyhC,QAAQ5D,cAAcluB,wBAAwBsoB,KAAOj4B,KAAK8xD,sBAC7EoD,EAAcl1D,KAAKyhC,QAAQ5D,cAAcluB,wBAAwBwoB,IAAMn4B,KAAKgyD,qBAC5EmD,EAAU30B,EAAM40B,OAAO9e,MAAQ2e,EAC/BI,EAAU70B,EAAM40B,OAAO5e,MAAQ0e,EAC/B51B,EAAmC,CACrC+yB,cAAe7xB,EAAM40B,OAAO/C,cAC5BC,MAAOtyD,KACPs1D,KAAM90B,EAAM40B,OAAO9C,MACnBiD,SAAU/0B,EAAM40B,OAAO9C,MAAMnhD,KAC7B+hD,OAAQ1yB,EAAM40B,OAAOlC,OACrBC,OAAQ3yB,EAAM40B,OAAOjC,OACrB7c,MAAO9V,EAAM40B,OAAO9e,MACpBE,MAAOhW,EAAM40B,OAAO5e,MACpB2e,QAASA,EACTE,QAASA,GAEbr1D,KAAK28B,MAAM+gB,IAAI,WACXlsC,EAAKkjD,QAAQz7C,KAAKqmB,MAQnBk1B,EAAAt0D,UAAAs1D,WADP,SACkBh1B,GADlB,IAAAhvB,EAAAxR,KAEUi1D,EAAcj1D,KAAKyhC,QAAQ5D,cAAcluB,wBAAwBsoB,KAAOj4B,KAAK8xD,sBAC7EoD,EAAcl1D,KAAKyhC,QAAQ5D,cAAcluB,wBAAwBwoB,IAAMn4B,KAAKgyD,qBAC5EmD,EAAU30B,EAAM40B,OAAO9e,MAAQ2e,EAC/BI,EAAU70B,EAAM40B,OAAO5e,MAAQ0e,EAC/BzoD,EAAyB,CAC3B6lD,MAAOtyD,KACPqyD,cAAe7xB,EAAM40B,OAAO/C,cAC5BiD,KAAM90B,EAAM40B,OAAO9C,MACnBiD,SAAU/0B,EAAM40B,OAAO9C,MAAMnhD,KAC7BgkD,QAASA,EACTE,QAASA,EACTz8C,QAAQ,GAEZ5Y,KAAK28B,MAAM+gB,IAAI,WACXlsC,EAAKmjD,OAAO17C,KAAKxM,KAGhBA,EAAKmM,SAEN5Y,KAAKgjC,UAAUld,YAAY0a,EAAM40B,OAAO9C,MAAM7wB,QAAQ5D,cAAc+C,WAAYJ,EAAM40B,OAAO9C,MAAM7wB,QAAQ5D,eAC3G79B,KAAKgjC,UAAUpd,YAAY5lB,KAAKyhC,QAAQ5D,cAAe2C,EAAM40B,OAAO9C,MAAM7wB,QAAQ5D,eAElFyoB,WAAW,WACP9lB,EAAM40B,OAAO9C,MAAMyB,gBACpB,KAIDS,EAAAt0D,UAAA8xD,mBAAV,WACI,OAAO5sC,OAAO8T,QAAU9T,OAAO8T,QAAW9T,OAAO+uC,YAAc/uC,OAAO+uC,YAAc,GAG9EK,EAAAt0D,UAAA4xD,oBAAV,WACI,OAAO1sC,OAAO2T,QAAU3T,OAAO2T,QAAW3T,OAAO6uC,YAAc7uC,OAAO6uC,YAAc,uBA5L3F/mD,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,yDAp3BV8zB,EAAAA,kBAUA6tB,EAAAA,iBAJAjqB,EAAAA,wCAw3BCz3B,EAAAA,MAAKX,KAAA,CAAC,4BAcN6c,EAAAA,wBAcAA,EAAAA,uBAgBAA,EAAAA,0BAMAyjB,EAAAA,YAAWtgC,KAAA,CAAC,oCAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,sCAsFZY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,cAqC9B+nD,KAMAiB,GAAA,WAAA,SAAAA,KAIiC,2BAJhChoD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACkiD,GAAkB4E,IACjC7mD,QAAS,CAACiiD,GAAkB4E,QAECiB,EAJjC,GCzjCAC,GAAA,WAeA,SAAAA,IAEW11D,KAAA21D,WAAa,GA2DxB,OA9CWD,EAAAx1D,UAAA01D,UAAP,SAAiBryC,EAAWtiB,OACpBgO,EAAS,GAab,OAXIhO,GAAOsiB,EAAKtiB,GACZgO,EAASsU,EAAKtiB,GAAKiO,WACZqU,EAAKke,UACRle,EAAKke,QAAQ5D,cACb5uB,EAASsU,EAAKke,QAAQ5D,cAAcg4B,YAAYrvC,OAEzCjD,EAAKke,QAAQo0B,cACpB5mD,EAASsU,EAAKke,QAAQo0B,YAAYrvC,SAInCvX,GAKJymD,EAAAx1D,UAAA6nB,UAAP,SAAiB+tC,GACb,OAAOA,EAAY5jD,eAOhBwjD,EAAAx1D,UAAA61D,QAAP,SAAeD,EAAqBH,GAChC,OAA4E,EAArEG,EAAYhmD,QAAQ6lD,GAAcA,EAAWzjD,eAAiB,KAKlEwjD,EAAAx1D,UAAA81D,eAAP,SAAsBzyC,GACdA,EAAK1jB,eAAe,YACpB0jB,EAAKkE,QAAS,IAMfiuC,EAAAx1D,UAAA+1D,mBAAP,SAA0B1yC,GAClBA,EAAK1jB,eAAe,YACpB0jB,EAAKkE,QAAS,IAG1BiuC,EA5EA,iBAwFI,SAAAQ,EAAoBz0B,EAAqBquB,GAArB9vD,KAAAyhC,QAAAA,EALHzhC,KAAAm2D,UAAY,IAAIpvC,EAAAA,cAAa,GAC7B/mB,KAAAo2D,SAAW,IAAIrvC,EAAAA,aAmCpC,OA5BWmvC,EAAAh2D,UAAA48C,YAAP,SAAmBC,GAEXA,EAAQsZ,eACRtZ,EAAQsZ,cAAcpZ,cACtBF,EAAQsZ,cAAcpZ,aAAa0Y,aAAe3jD,WAClD+qC,EAAQsZ,cAAcC,eACtBvZ,EAAQsZ,cAAcpZ,aAAa0Y,aAAe5Y,EAAQsZ,cAAcC,cAAcX,YACtF31D,KAAKyW,UAILy/C,EAAAh2D,UAAAuW,OAAR,WACI,GAAKzW,KAAKq2D,cAAclmB,MAAxB,KAIM1jC,EAAO,CAAEmM,QAAQ,EAAOu3B,MAAOnwC,KAAKq2D,cAAclmB,OAGxD,GAFAnwC,KAAKm2D,UAAUl9C,KAAKxM,IAEhBA,EAAKmM,OAAT,KAMMw9C,GAFO,IAAIG,IAEKtzD,UAAUjD,KAAKq2D,cAAclmB,MAAOnwC,KAAKq2D,eAC/Dr2D,KAAKo2D,SAASn9C,KAAK,CAAEu9C,cAAeJ,2BAtC3ClpD,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2DA7EV8zB,EAAAA,kBAQA6tB,EAAAA,gDAwECxlC,EAAAA,yBACAA,EAAAA,8BAEAlc,EAAAA,MAAKX,KAAA,CAAC,gBAiCXypD,mBAEA,SAAAK,KAsCA,OAhCWA,EAAAr2D,UAAA+C,UAAP,SAAiBktC,EAEAjpB,GAIb,GAAKipB,GAAUA,EAAMxvC,QAAWumB,EAwBhC,OApBIA,EAAQipB,QACRA,EAAQjpB,EAAQipB,OAGXA,EAAM15B,OAAO,SAAC8M,OACbkzC,EAAQvvC,EAAQ6uC,QAAQ7uC,EAAQa,UAAUb,EAAQ0uC,UAAUryC,EAAM2D,EAAQjmB,MAAOimB,EAAQyuC,YAY/F,OAVIc,EACIvvC,EAAQ8uC,gBACR9uC,EAAQ8uC,eAAezyC,GAGvB2D,EAAQ+uC,oBACR/uC,EAAQ+uC,mBAAmB1yC,GAI5BkzC,yBAjClB71C,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,YACNiL,MAAM,MAoCV01C,KAKAG,GAAA,WAAA,SAAAA,KAMA,2BANCjpD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACwoD,GAAoBK,IACnC5oD,QAAS,CAACuoD,GAAoBK,IAC9B9d,QAAS,CAACC,EAAAA,kBAGdge,EANA,GCpKAC,GAAA,WAqDI,SAAAA,EAAoBl1B,EAA4Em1B,GAA5E52D,KAAAyhC,QAAAA,EAA4EzhC,KAAA42D,KAAAA,EA3CxF52D,KAAA62D,YAAa,EA0DzB,OAhDIr3D,OAAAgC,eACIm1D,EAAAz2D,UAAA,UAAO,KADX,WAEI,OAAOF,KAAK62D,gBAWhB,SAAYv3C,GACRtf,KAAK62D,WAAav3C,EAClBtf,KAAK82D,2CAWTt3D,OAAAgC,eAAIm1D,EAAAz2D,UAAA,gBAAa,KAAjB,WACI,OAAIF,KAAK42D,MAAQ52D,KAAK42D,KAAK,IAAM52D,KAAK42D,KAAK,GAAGG,eAClC/2D,KAAK42D,KAAK,GAAsBG,iBAErC/2D,KAAKyhC,QAAQ5D,+CAaxB84B,EAAAz2D,UAAA42D,QAAA,WAAA,IAAAtlD,EAAAxR,KACQA,KAAK62D,YACLte,sBAAsB,WAAM,OAAA/mC,EAAKqsB,cAAckT,+BA7D1D7jC,EAAAA,UAAST,KAAA,CAAC,CACPmgC,SAAU,WACVz/B,SAAU,0DANM8zB,EAAAA,0CAqD0B0D,EAAAA,OAAMl4B,KAAA,CAACuqD,EAAAA,oBAAiB,CAAAtgD,KAAG6wC,EAAAA,MAAI,CAAA7wC,KAAIo2B,EAAAA,+CAjC5E1/B,EAAAA,MAAKX,KAAA,CAAC,eAgDXkqD,EApEA,GAyEAM,GAAA,WAAA,SAAAA,KAI8B,2BAJ7BxpD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACipD,IACfhpD,QAAS,CAACgpD,QAEgBM,EAJ9B,GCzEAC,GAAA,WAEA,SAAAA,IAmBkCl3D,KAAAqR,IAAM,MAiBFrR,KAAAyR,SAAU,EAoBbzR,KAAAm3D,KAAO,SAoBJn3D,KAAAo3D,QAAU,aAoBRp3D,KAAAq3D,UAAY,UAKXr3D,KAAAs3D,QAAU,OA2BnD,OAtBI93D,OAAAgC,eAAoC01D,EAAAh3D,UAAA,WAAQ,KAA5C,WAAiD,OAAOF,KAAKm3D,sCAK7D33D,OAAAgC,eAA0C01D,EAAAh3D,UAAA,iBAAc,KAAxD,WAA6D,OAAOF,KAAKo3D,yCAKzE53D,OAAAgC,eAAsC01D,EAAAh3D,UAAA,QAAK,KAA3C,WAAgD,OAAOF,KAAKq3D,2CAK5D73D,OAAAgC,eACI01D,EAAAh3D,UAAA,YAAS,KADb,WAEI,OAAIF,KAAKyR,QACgB,QAAbzR,KAAKqR,IAAiB,cAAgB,iBAE7B,QAAbrR,KAAKqR,IAAiB,MAAQ,8DA9H7CnE,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,+CAkBTC,EAAAA,MAAKX,KAAA,CAAC,iCAiBNW,EAAAA,MAAKX,KAAA,CAAC,kCAoBNW,EAAAA,MAAKX,KAAA,CAAC,kCAoBNW,EAAAA,MAAKX,KAAA,CAAC,uCAoBNW,EAAAA,MAAKX,KAAA,CAAC,uCAKNsgC,EAAAA,YAAWtgC,KAAA,CAAC,mCAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,2CAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,wCAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,wCAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,2BAOjByqD,EAlIA,iBAoIA,SAAAK,IAkBiCv3D,KAAAw3D,KAAO,EAeLx3D,KAAAy3D,OAAS,EAWfz3D,KAAA03D,KAAO,GAeF13D,KAAA23D,MAAQ,EAaR33D,KAAA43D,MAAQ,OAoB1C,OAfIp4D,OAAAgC,eACI+1D,EAAAr3D,UAAA,QAAK,KADT,WAEI,OAAIF,KAAK03D,KACE,GAAG13D,KAAK03D,KAET13D,KAAKw3D,KAAI,IAAIx3D,KAAKy3D,OAAM,IAAIz3D,KAAK43D,uCAM/Cp4D,OAAAgC,eACI+1D,EAAAr3D,UAAA,YAAS,KADb,WAEI,OAAOF,KAAK23D,OAAS,uDA1F5BzqD,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,8CAiBTC,EAAAA,MAAKX,KAAA,CAAC,+BAeNW,EAAAA,MAAKX,KAAA,CAAC,+BAWNW,EAAAA,MAAKX,KAAA,CAAC,0BAeNW,EAAAA,MAAKX,KAAA,CAAC,+BAaNW,EAAAA,MAAKX,KAAA,CAAC,+BAKNsgC,EAAAA,YAAWtgC,KAAA,CAAC,iCAWZsgC,EAAAA,YAAWtgC,KAAA,CAAC,kBAIjB8qD,KAKAM,GAAA,WAAA,SAAAA,KAI+B,2BAJ9BpqD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC6pD,GAAkBL,IACjCvpD,QAAS,CAAC4pD,GAAkBL,QAEDW,EAJ/B,GClOaC,GAAa,CAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAKvDC,GACF,GADEA,GAEL,GAFKA,GAGL,GAHKA,GAKG,EALHA,GAMA,iBAOb,SAAAC,KA2XA,OAzXIx4D,OAAAgC,eAAWw2D,EAAA93D,UAAA,SAAM,KAAjB,WACI,OAAOF,KAAKi4D,yCAITD,EAAA93D,UAAAg4D,iBAAP,SAAwB/1D,EAAOg2D,EAAaC,OACpCzC,EAAqBxzD,EACnBk2D,EAAeF,EAAYG,OAC3BC,EAAgCv4D,KAAKw4D,gBAAgBH,GACrDI,EAAwB94D,MAAMgR,KAAK4nD,EAAS9pD,QAC5CiqD,EAA8B14D,KAAK24D,qBAAqBN,EAAMI,GAEpE,GAAI9C,EAAWh1D,OAAS03D,EAAK13D,OAAQ,CACjC,GAAmB,KAAfg1D,IAAiC,IAAZyC,EAErB,OADAp4D,KAAKi4D,QAAU,EACRj4D,KAAK44D,uBAAuBz2D,EAAOg2D,GAG9C,IAA+C,IAA3CO,EAAkB5oD,QAAQsoD,EAAS,GACnCzC,EAAa31D,KAAK64D,aAAalD,EAAYyC,EAAS,EAAGD,EAAYW,YACnE94D,KAAKi4D,QAAUG,EAAS,MACrB,CACHzC,EAAa31D,KAAK64D,aAAalD,EAAYyC,EAAS,EAAGC,EAAKD,EAAS,IACrEp4D,KAAKi4D,QAAUG,EAAS,EACxB,IAAK,IAAI53D,EAAIR,KAAKi4D,QAASz3D,EAAI,IACgB,IAAvCi4D,EAAY3oD,QAAQ9P,KAAKi4D,SADCz3D,IAE1BR,KAAKi4D,eAMd,KACGznC,EAAOmlC,EAAWyC,GACpBW,EAAc/4D,KAAKg5D,sBAAsBxoC,EAAM4nC,EAAQC,GAC3D,IAA2C,IAAvCK,EAAkB5oD,QAAQsoD,GAC1BzC,EAAa31D,KAAKi5D,cAActD,EAAYyC,EAAQ,IAGhDp4D,KAAKi4D,QAFLc,GACApD,EAAa31D,KAAKi5D,cAActD,EAAYyC,EAAQ5nC,GACrC4nC,EAAS,GAETA,MAEhB,CACHzC,EAAa31D,KAAKi5D,cAActD,EAAYyC,EAAQ,IACpDp4D,KAAKi4D,UAAYG,EACjB,IAAS53D,EAAI43D,EAAQ53D,EAAI63D,EAAK13D,OAAQH,IAAK,CACvC,IAA2C,IAAvCi4D,EAAY3oD,QAAQ9P,KAAKi4D,SAEtB,CAEH,GADAc,EAAc/4D,KAAKg5D,sBAAsBxoC,EAAM4nC,EAAQC,GACtC,CACb1C,EAAa31D,KAAKi5D,cAActD,EAAYyC,EAAQ5nC,GACpDxwB,KAAKi4D,UAAYG,EACjB,MAEA,MARJp4D,KAAKi4D,UAAYG,IAejC,OAAOzC,GAGJqC,EAAA93D,UAAAg5D,UAAP,SAAiBf,GAAjB,QAAA3mD,EAAAxR,KACQm5D,EAAY,GACVd,EAAeF,EAAYG,OAC3BC,EAAgCv4D,KAAKw4D,gBAAgBH,OAE3D,IAAsB,IAAAe,EAAA5qD,EAAA6pD,GAAIgB,EAAAD,EAAAl3D,QAAAm3D,EAAAj3D,KAAAi3D,EAAAD,EAAAl3D,OAAE,CAAVm3D,EAAAl3D,MACdg3D,GAAahB,EAAYW,gHAO7B,OAJAP,EAASroD,QAAQ,SAACoP,EAAare,GAC3Bk4D,EAAY3nD,EAAKynD,cAAcE,EAAWl4D,EAAKqe,KAG5C65C,GAGJnB,EAAA93D,UAAA04D,uBAAP,SAA8BU,EAAUnB,GAAxC,YAAA3mD,EAAAxR,KACQm5D,EAAY,GACZh3D,EAAQ,GACNk2D,EAAeF,EAAYG,OAC3BC,EAAgCv4D,KAAKw4D,gBAAgBH,GACrDI,EAAwB94D,MAAMgR,KAAK4nD,EAAS9pD,QAC5CiqD,EAA8B14D,KAAK24D,qBAAqBN,EAAMI,GAC9Dc,EAA0B55D,MAAMgR,KAAK4nD,EAASplC,UAEpC,MAAZmmC,IACAn3D,EAAQm3D,EAASpqD,gBAGrB,IAAsB,IAAAsqD,EAAAhrD,EAAA6pD,GAAIoB,EAAAD,EAAAt3D,QAAAu3D,EAAAr3D,KAAAq3D,EAAAD,EAAAt3D,OAAE,CAAVu3D,EAAAt3D,MACdg3D,GAAahB,EAAYW,gHAO7B,GAJAP,EAASroD,QAAQ,SAACoP,EAAare,GAC3Bk4D,EAAY3nD,EAAKynD,cAAcE,EAAWl4D,EAAKqe,MAG9Cnd,EACD,OAAOg3D,EAKX,QAFMO,EAA6B15D,KAAK25D,oBAAoBx3D,EAAOo3D,GAE1D/4D,EAAI,EAAGA,EAAIk5D,EAAiB/4D,OAAQH,IAAK,KACxCgwB,EAAOkpC,EAAiBl5D,GACVR,KAAKg5D,sBAAsBxoC,EAAMkoC,EAAkBl4D,GAAI63D,IAEvD7nC,IAAS2nC,EAAYW,aACrCY,EAAiBl5D,GAAK23D,EAAYW,YAItCY,EAAiB/4D,OAAS+3D,EAAkB/3D,QAC5C+4D,EAAiB3iD,OAAO2hD,EAAkB/3D,YAG1Ci5D,EAAM,MACV,IAA8B,IAAAC,EAAArrD,EAAAkrD,GAAgBI,EAAAD,EAAA33D,QAAA43D,EAAA13D,KAAA03D,EAAAD,EAAA33D,OAAE,CACtCsuB,EADgBspC,EAAA33D,MAEtBg3D,EAAYn5D,KAAKi5D,cAAcE,EAAWT,EAAkBkB,KAAQppC,wGAGxE,OAAO2oC,GAGJnB,EAAA93D,UAAA65D,qBAAP,SAA4B53D,EAAOg2D,WAC3BgB,EAAY,GACVd,EAAeF,EAAYG,OAC3BC,EAAgCv4D,KAAKw4D,gBAAgBH,GACrDkB,EAA0B55D,MAAMgR,KAAK4nD,EAASplC,cAEpD,IAAkB,IAAA6mC,EAAAxrD,EAAArM,GAAK83D,EAAAD,EAAA93D,QAAA+3D,EAAA73D,KAAA63D,EAAAD,EAAA93D,OAAE,CAApB,IAAMod,EAAG26C,EAAA93D,OAC0B,IAAhCo3D,EAAczpD,QAAQwP,IAClBA,IAAQ64C,EAAYW,aACpBK,GAAa75C,wGAKzB,OAAO65C,GAGJnB,EAAA93D,UAAAg6D,8BAAP,SAAqC/3D,EAAOg2D,EAAaC,EAAQ3+C,OAEzDk8C,EAAqBxzD,EACnBquB,EAAemlC,EAAWyC,GAC1BC,EAAeF,EAAYG,OAC3BC,EAAgCv4D,KAAKw4D,gBAAgBH,GACrDI,EAAwB94D,MAAMgR,KAAK4nD,EAAS9pD,QAC5CiqD,EAA8B14D,KAAK24D,qBAAqBN,EAAMI,GAEpE,GAAKz4D,KAAKmR,KA4CH,CACH,GAAmB,KAAfwkD,IAAiC,IAAZyC,EAErB,OADAp4D,KAAKi4D,QAAU,EACRj4D,KAAK44D,uBAAuBz2D,EAAOg2D,GAG1Cn4D,KAAKi4D,QAAU,IACfj4D,KAAKi4D,UACLG,KAEJA,IACAp4D,KAAKi4D,QAAUG,EACf,IAAS53D,EAAI,EAAGA,EAAIiZ,EAAWjZ,IAEvBm1D,GADuC,IAAvC+C,EAAkB5oD,QAAQsoD,GACbp4D,KAAK64D,aAAalD,EAAYyC,EAAQD,EAAYW,YAGlD94D,KAAK64D,aAAalD,EAAYyC,EAAQC,EAAKD,IAFxDA,SAzDR,GADAp4D,KAAKi4D,QAAUG,EAAS,IAAMA,EAASA,GACU,IAA7CM,EAAkB5oD,QAAQ9P,KAAKi4D,UAK/B,GAHAtC,EADc31D,KAAKg5D,sBAAsBxoC,EAAMxwB,KAAKi4D,QAASI,GAClCr4D,KAAKi5D,cAActD,EAAY31D,KAAKi4D,UAAWznC,GACtEmlC,EAAa31D,KAAKi5D,cAActD,EAAY31D,KAAKi4D,UAAWE,EAAYW,YAE5D,IADhBr/C,EAEI,IAAK,IAAIjZ,EAAI,EAAGA,EAAIiZ,EAAWjZ,IAC3B43D,IACAzC,GAAoD,IAAvC+C,EAAkB5oD,QAAQsoD,GACnCp4D,KAAK64D,aAAalD,EAAYyC,EAAQD,EAAYW,YAClD94D,KAAK64D,aAAalD,EAAYyC,EAAQC,EAAKD,QAGpD,CACHzC,EAAa31D,KAAKi5D,cAActD,EAAY31D,KAAKi4D,QAASI,EAAKr4D,KAAKi4D,UACpEj4D,KAAKi4D,cAEDkC,GAAW,EACf,GAAgB,IAFhB1gD,EAEmB,CACf2+C,EAASp4D,KAAKi4D,QACd,IAAK,IAAIz3D,EAAI,EAAGA,EAAIiZ,EAAWjZ,KACgB,IAAvCk4D,EAAkB5oD,QAAQsoD,GACZp4D,KAAKg5D,sBAAsBxoC,EAAM4nC,EAAQC,KACnC8B,GAChBxE,EAAa31D,KAAK64D,aAAalD,EAAYyC,EAAQ5nC,GACnD4nC,IACAp4D,KAAKi4D,UACLkC,GAAW,IAEXxE,EAAa31D,KAAK64D,aAAalD,EAAYyC,EAAQD,EAAYW,YAC/DV,MAGJzC,EAAa31D,KAAK64D,aAAalD,EAAYyC,EAAQC,EAAKD,IACpDA,IAAWp4D,KAAKi4D,SAChBj4D,KAAKi4D,UAETG,MA4BpB,OAAOzC,GAGJqC,EAAA93D,UAAAk6D,8BAAP,SAAqCj4D,EAAOg2D,EAAaC,EAAQiC,EAAe5gD,WACxEk8C,EAAqBxzD,EACnBk2D,EAAeF,EAAYG,OAC3BC,EAAgCv4D,KAAKw4D,gBAAgBH,GACrDI,EAAwB94D,MAAMgR,KAAK4nD,EAAS9pD,QAC5CiqD,EAA8B14D,KAAK24D,qBAAqBN,EAAMI,GAE9D6B,EAAelC,EAAS3+C,EAE9BzZ,KAAKi4D,QAAUG,MACf,IAA2B,IAAAmC,EAAA/rD,EAAA6rD,GAAaG,EAAAD,EAAAr4D,QAAAs4D,EAAAp4D,KAAAo4D,EAAAD,EAAAr4D,OAAE,CAArC,IACKsuB,EADagqC,EAAAr4D,MAGnB,GAAInC,KAAKi4D,QAAUI,EAAK13D,OACpB,OAAOg1D,EAGX,IAAiD,IAA7C+C,EAAkB5oD,QAAQ9P,KAAKi4D,SACXj4D,KAAKg5D,sBAAsBxoC,EAAMxwB,KAAKi4D,QAASI,KAE/D1C,EAAa31D,KAAKi5D,cAActD,EAAY31D,KAAKi4D,UAAWznC,SAGhE,IAAK,IAAIhwB,EAAI43D,EAAQ53D,EAAI63D,EAAK13D,OAAQH,IAAK,CACvC,IAA2C,IAAvCi4D,EAAY3oD,QAAQ9P,KAAKi4D,SAEtB,CACiBj4D,KAAKg5D,sBAAsBxoC,EAAMxwB,KAAKi4D,QAASI,KAE/D1C,EAAa31D,KAAKi5D,cAActD,EAAY31D,KAAKi4D,UAAWznC,IAEhE,MANAxwB,KAAKi4D,UAWjBx+C,yGAGJ,GAAgB,EAAZA,EACA,IAASjZ,EAAIR,KAAKi4D,QAASz3D,EAAI85D,EAAc95D,KACE,IAAvCi4D,EAAY3oD,QAAQ9P,KAAKi4D,SACzBj4D,KAAKi4D,UAELtC,EAAa31D,KAAKi5D,cAActD,EAAY31D,KAAKi4D,UAAWE,EAAYW,YAKpF,OAAOnD,GAGHqC,EAAA93D,UAAA84D,sBAAR,SAA8ByB,EAAmBvgC,EAAkBm+B,OAE3DqC,EASJ,OAAQrC,EAAKsC,OAAOzgC,IAChB,IAAK,IACDwgC,EAAwB,KAAdD,EACV,MACJ,IAAK,IAEDC,GADQ,IAAIE,OAAO,aACF7qD,KAAK0qD,GACtB,MACJ,IAAK,IAEDC,EADQ,IAAIE,OAhBY,oDAiBR7qD,KAAK0qD,GACrB,MACJ,IAAK,IAEDC,EADQ,IAAIE,OArBO,6CAsBH7qD,KAAK0qD,GACrB,MACJ,IAAK,IAEDC,EADQ,IAAIE,OAtBI,iDAuBA7qD,KAAK0qD,GACrB,MACJ,IAAK,IAEDC,EADQ,IAAIE,OA3BA,0CA4BI7qD,KAAK0qD,GACrB,MACJ,IAAK,IAEDC,EADQ,IAAIE,OA7BD,SA8BK7qD,KAAK0qD,GACrB,MACJ,IAAK,IAEDC,EADQ,IAAIE,OAhCI,gBAiCA7qD,KAAK0qD,GACrB,MACJ,IAAK,IAEDC,EADQ,IAAIE,OAnCM,aAoCF7qD,KAAK0qD,GACrB,MACJ,QACIC,EAAU,KAIlB,OAAOA,GAEH1C,EAAA93D,UAAA+4D,cAAR,SAAsB4B,EAAkBroD,EAAege,GACnD,GAAIqqC,IAAa7oD,UACb,OAAO6oD,EAASC,UAAU,EAAGtoD,GAASge,EAAOqqC,EAASC,UAAUtoD,EAAQ,IAGxEwlD,EAAA93D,UAAA24D,aAAR,SAAqBgC,EAAkBroD,EAAege,GAClD,GAAIqqC,IAAa7oD,UACb,OAAO6oD,EAASC,UAAU,EAAGtoD,GAASge,EAAOqqC,EAASC,UAAUtoD,IAGhEwlD,EAAA93D,UAAAs4D,gBAAR,SAAwBH,GAGpB,QAFME,EAAW,IAAIxpD,IAEZvO,EAAI,EAAGA,EAAI63D,EAAK13D,OAAQH,IAAK,KAC5BgwB,EAAO6nC,EAAKsC,OAAOn6D,IACS,IAA9Bs3D,GAAWhoD,QAAQ0gB,IACnB+nC,EAAS53C,IAAIngB,EAAGgwB,GAIxB,OAAO+nC,GAEHP,EAAA93D,UAAAy4D,qBAAR,SAA6BN,EAAcI,GAGvC,QAFMsC,EAA+B,IAAIp7D,MAEhCa,EAAI,EAAGA,EAAI63D,EAAK13D,OAAQH,KACG,IAA5Bi4D,EAAY3oD,QAAQtP,IACpBu6D,EAAmBv4D,KAAKhC,GAIhC,OAAOu6D,GAEH/C,EAAA93D,UAAAy5D,oBAAR,SAA4Bx3D,EAAeo3D,WACjCG,EAA6B,IAAI/5D,UAEvC,IAAkB,IAAAq7D,EAAAxsD,EAAArM,GAAK84D,EAAAD,EAAA94D,QAAA+4D,EAAA74D,KAAA64D,EAAAD,EAAA94D,OAAE,CAApB,IAAMod,EAAG27C,EAAA94D,OAC0B,IAAhCo3D,EAAczpD,QAAQwP,IACtBo6C,EAAiBl3D,KAAK8c,wGAI9B,OAAOo6C,GAEf1B,KChYMkD,GAAO,2BA8KT,SAAAC,EAAoBv9B,GAAA59B,KAAA49B,WAAAA,EA5Fb59B,KAAAo7D,cAAgB,IAAIr0C,EAAAA,aAuDnB/mB,KAAAq7D,aAAe,CACnB/C,OAAQ,GACRQ,WAAY,IA4BR94D,KAAAs7D,mBAAiCJ,GAKjCl7D,KAAAu7D,kBAAsCL,GAG1Cl7D,KAAKw7D,WAAa,IAAIxD,GAyK9B,OAjQIx4D,OAAAgC,eAAY25D,EAAAj7D,UAAA,QAAK,KAAjB,WACI,OAAOF,KAAK69B,cAAc17B,WAM9B,SAAkBmd,GACdtf,KAAK69B,cAAc17B,MAAQmd,mCAM/B9f,OAAAgC,eAAY25D,EAAAj7D,UAAA,gBAAa,KAAzB,WACI,OAAOF,KAAK49B,WAAWC,+CAM3Br+B,OAAAgC,eAAY25D,EAAAj7D,UAAA,iBAAc,KAA1B,WACI,OAAOF,KAAK69B,cAAc49B,gDAM9Bj8D,OAAAgC,eAAY25D,EAAAj7D,UAAA,eAAY,KAAxB,WACI,OAAOF,KAAK69B,cAAcy8B,8CAiEvBa,EAAAj7D,UAAAusC,SAAP,WACQzsC,KAAK84D,YAAuC,EAAzB94D,KAAK84D,WAAWn4D,SACnCX,KAAKq7D,aAAavC,WAAa94D,KAAK84D,WAAa94D,KAAK84D,WAAWgC,UAAU,EAAG,IAGlF96D,KAAKq7D,aAAa/C,OAASt4D,KAAKq4D,KAAOr4D,KAAKq4D,KAAO,aACnDr4D,KAAKq7D,aAAavC,WAAa94D,KAAK84D,WAAa94D,KAAK84D,WAAa,IACnE94D,KAAK69B,cAAc+wB,aAAa,cAAe5uD,KAAKuqD,YAAcvqD,KAAKuqD,YAAcvqD,KAAKq7D,aAAa/C,SAOpG6C,EAAAj7D,UAAAw7D,UADP,SACiBl7B,OACPv/B,EAAMu/B,EAAMm7B,SAAWn7B,EAAMo7B,SAE/BrsD,MAAUvP,KAAK67D,mBACf77D,KAAK67D,kBAAmB,GAGxB56D,IAAQ82D,KACR/3D,KAAK87D,WAAY,IAGhB97D,KAAK87D,WAAa76D,IAAQ82D,IAAY/3D,KAAK87D,WAAa76D,IAAQ82D,KACjEv3B,EAAMqH,iBAGV7nC,KAAK+7D,KAAO96D,EACZjB,KAAKg8D,WAAa15C,KAAKukB,IAAI7mC,KAAKs6D,aAAet6D,KAAKy7D,iBAOjDN,EAAAj7D,UAAA+7D,QADP,SACez7B,IACCA,EAAMm7B,SAAWn7B,EAAMo7B,YAEvB7D,KACR/3D,KAAK87D,WAAY,IAQlBX,EAAAj7D,UAAAg8D,QADP,SACe17B,GACXxgC,KAAKm8D,QAAS,EAEdn8D,KAAKo8D,YAAcp8D,KAAKmC,MACxBnC,KAAKq8D,eAAiBr8D,KAAKs8D,qBAOxBnB,EAAAj7D,UAAAq8D,eADP,SACsB/7B,GAClB,GAAIjxB,MAAUvP,KAAK67D,iBACf77D,KAAK67D,kBAAmB,MAD5B,CAKA,GAAI77D,KAAKm8D,OAAQ,CACbn8D,KAAKm8D,QAAS,MAER9B,EAAgBr6D,KAAKmC,MAAM24D,UAAU96D,KAAKq8D,eAAgBr8D,KAAKs8D,qBACrEt8D,KAAKmC,MAAQnC,KAAKw7D,WAAWpB,8BACzBp6D,KAAKo8D,YAAap8D,KAAKq7D,aAAcr7D,KAAKq8D,eAAgBhC,EAAer6D,KAAKg8D,YAElFh8D,KAAKw8D,kBAAkBx8D,KAAKw7D,WAAWpD,YACpC,KACGqE,EAAmBz8D,KAAKs8D,oBAE9Bt8D,KAAKw7D,WAAWrqD,KAAQnR,KAAK+7D,OAAShE,IAAoB/3D,KAAK+7D,OAAShE,GAExE/3D,KAAKmC,MAAQnC,KAAKg8D,YAAkC,IAApBh8D,KAAKg8D,WACjCh8D,KAAKw7D,WAAWtB,8BAA8Bl6D,KAAKmC,MAAOnC,KAAKq7D,aAAcoB,EAAmB,EAAGz8D,KAAKg8D,YACxGh8D,KAAKw7D,WAAWtD,iBAAiBl4D,KAAKmC,MAAOnC,KAAKq7D,aAAcoB,EAAmB,GAEvFz8D,KAAKw8D,kBAAkBx8D,KAAKw7D,WAAWpD,YAGrCsE,EAAS18D,KAAKw7D,WAAWzB,qBAAqB/5D,KAAKmC,MAAOnC,KAAKq7D,cAErEr7D,KAAK28D,UAAY38D,KAAK48D,gBAAkB58D,KAAKmC,MAAQu6D,EACrD18D,KAAKu7D,kBAAkBv7D,KAAK28D,WAE5B38D,KAAKo7D,cAAcniD,KAAK,CAAE8P,SAAU2zC,EAAQG,eAAgB78D,KAAKmC,UAO9Dg5D,EAAAj7D,UAAAkpD,QADP,SACejnD,GACPnC,KAAK88D,kBACDvtD,OACAvP,KAAK67D,kBAAmB,GAE5B77D,KAAKmC,MAAQnC,KAAK88D,iBAAiB75D,UAAUd,IAE7CnC,KAAKmC,MAAQnC,KAAKw7D,WAAW5C,uBAAuB54D,KAAKmC,MAAOnC,KAAKq7D,eAQtEF,EAAAj7D,UAAAopD,OADP,SACcnnD,GACNnC,KAAK+8D,iBACL/8D,KAAKmC,MAAQnC,KAAK+8D,iBAAiB95D,UAAUd,GACtCA,IAAUnC,KAAKw7D,WAAWtC,UAAUl5D,KAAKq7D,gBAChDr7D,KAAKmC,MAAQ,KAObg5D,EAAAj7D,UAAAo8D,kBAAR,WACI,OAAOt8D,KAAK69B,cAAc49B,gBAMtBN,EAAAj7D,UAAAs8D,kBAAR,SAA0Bh6C,EAAenL,QAAA,IAAAA,IAAAA,EAAAmL,GACrCxiB,KAAK69B,cAAcm/B,kBAAkBx6C,EAAOnL,IAMzC8jD,EAAAj7D,UAAA+8D,WAAP,SAAkB96D,GACVnC,KAAK84D,YAAuC,EAAzB94D,KAAK84D,WAAWn4D,SACnCX,KAAKq7D,aAAavC,WAAa94D,KAAK84D,WAAWgC,UAAU,EAAG,IAGhE96D,KAAKmC,MAAQA,EAAQnC,KAAKw7D,WAAW5C,uBAAuBz2D,EAAOnC,KAAKq7D,cAAgB,GACpFr7D,KAAK+8D,mBACL/8D,KAAKmC,MAAQnC,KAAK+8D,iBAAiB95D,UAAUjD,KAAKmC,QAGtDnC,KAAK28D,UAAY38D,KAAK48D,gBAAkB58D,KAAKmC,MAAQA,EACrDnC,KAAKu7D,kBAAkBv7D,KAAK28D,WAE5B38D,KAAKo7D,cAAcniD,KAAK,CAAE8P,SAAU5mB,EAAO06D,eAAgB78D,KAAKmC,SAM7Dg5D,EAAAj7D,UAAAg9D,iBAAP,SAAwBzb,GAAwBzhD,KAAKu7D,kBAAoB9Z,GAKlE0Z,EAAAj7D,UAAAi9D,kBAAP,SAAyB1b,GAAkBzhD,KAAKs7D,mBAAqB7Z,uBArVxEv0C,EAAAA,UAAST,KAAA,CAAC,CACPmB,UAAW,CAAC,CAAE84C,QAASsQ,EAAAA,kBAAmBrQ,YAAawU,EAAkBiC,OAAO,IAChFjwD,SAAU,yDAjBV8zB,EAAAA,4CA2BC7zB,EAAAA,MAAKX,KAAA,CAAC,+BAWNW,EAAAA,+BAUAA,EAAAA,2BAUAA,EAAAA,gCAUAA,EAAAA,gCAUAA,EAAAA,yBAMAA,EAAAA,6BAUAkc,EAAAA,0BAiHAjc,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,4BAuBzBY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,4BAYvBY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,mCAWvBY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,4BAsCvBY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,wCAevBY,EAAAA,aAAYZ,KAAA,CAAC,OAAQ,CAAC,2BAmD3B0uD,KAaAkC,GAAA,WAAA,SAAAA,KAK6B,2BAL5B5vD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACytD,IACfxtD,QAAS,CAACwtD,IACV1iB,QAAS,CAACC,EAAAA,kBAEe2kB,EAL7B,OClWIC,OAAS,SACTC,MAAQ,SAGRC,GAAS,EACPtC,GAAO,aAcbuC,GAAA,WAuNI,SAAAA,IA3KgBz9D,KAAAoM,GAAK,aAAaoxD,KAYlBx9D,KAAAwvC,QAAaxvC,KAAKoM,GAAE,SAYpBpM,KAAA09D,cAA6C,QAiC7C19D,KAAA29D,SAAmB,KAYnB39D,KAAA49D,eAAgB,EAYhB59D,KAAAkpD,UAAW,EAapBlpD,KAAA69D,eAAiB79D,KAAKwvC,QAYtBxvC,KAAA89D,UAA2B,KAOzB99D,KAAAqqC,OAA8C,IAAItjB,EAAAA,aASpD/mB,KAAAsxC,SAAW,YAaFtxC,KAAA+9D,SAAU,EAaV/9D,KAAAuvC,UAAW,EAapBvvC,KAAAkwC,SAAU,EAIVlwC,KAAAg+D,QAAah+D,KAAKoM,GAAE,SAIjBpM,KAAAi+D,OAAc,KAMhBj+D,KAAAs7D,mBAAiCJ,GAIjCl7D,KAAAu7D,kBAAsCL,GAyFlD,OArFWuC,EAAAv9D,UAAAg+D,eAAP,SAAsB19B,GAClBA,EAAM4B,mBAKHq7B,EAAAv9D,UAAAi+D,cAAP,SAAqB39B,GACjBA,EAAM4B,kBACNpiC,KAAK2tD,SAEDp+C,MACAvP,KAAKo+D,YAAYvgC,cAAcwgC,QAMhCZ,EAAAv9D,UAAAo+D,cAAP,WACIt+D,KAAK2tD,UASF8P,EAAAv9D,UAAAytD,OAAP,WACQ3tD,KAAKuvC,WAITvvC,KAAK+9D,SAAU,EACf/9D,KAAKkwC,SAAU,EACflwC,KAAKqqC,OAAOpxB,KAAK,CAAE9W,MAAOnC,KAAKmC,MAAOo8D,MAAOv+D,OAC7CA,KAAKu7D,kBAAkBv7D,KAAKmC,SASzBs7D,EAAAv9D,UAAA+8D,WAAP,SAAkB96D,GACdnC,KAAKi+D,OAAS97D,EACdnC,KAAK+9D,QAAW/9D,KAAKi+D,SAAWj+D,KAAKmC,OAGzCs7D,EAAAv9D,UAAA62D,eAAA,WACI,OAAO/2D,KAAKo+D,YAAYvgC,eAK5Br+B,OAAAgC,eAAWi8D,EAAAv9D,UAAA,aAAU,KAArB,WACI,OAAQF,KAAK09D,eACT,KAAKc,GAAmBlB,OACpB,OAAUt9D,KAAKsxC,SAAQ,kBAC3B,KAAKktB,GAAmBjB,MACxB,QACI,OAAUv9D,KAAKsxC,SAAQ,4CAM5BmsB,EAAAv9D,UAAAkpD,QAAP,SAAe5oB,GACXxgC,KAAKkwC,SAAU,GAKZutB,EAAAv9D,UAAAopD,OAAP,SAAc9oB,GACVxgC,KAAKkwC,SAAU,EACflwC,KAAKs7D,sBAKFmC,EAAAv9D,UAAAg9D,iBAAP,SAAwBzb,GAAwBzhD,KAAKu7D,kBAAoB9Z,GAIlEgc,EAAAv9D,UAAAi9D,kBAAP,SAAyB1b,GAAkBzhD,KAAKs7D,mBAAqB7Z,uBAvTxEhS,EAAAA,UAAShjC,KAAA,CAAC,CACPmB,UAAW,CAAC,CAAE84C,QAASsQ,EAAAA,kBAAmBrQ,YAAa8W,EAAmBL,OAAO,IACjFjwD,SAAU,YACVuiC,SAAA,o+BAWCoD,EAAAA,UAASrmC,KAAA,CAAC,8BAQVqmC,EAAAA,UAASrmC,KAAA,CAAC,yCAQVqmC,EAAAA,UAASrmC,KAAA,CAAC,gCAaVsgC,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,uBAYAA,EAAAA,6BAYAA,EAAAA,qBAWAA,EAAAA,oBAWAA,EAAAA,wBAWAA,EAAAA,6BAYAA,EAAAA,wBAYAA,EAAAA,8BAYAA,EAAAA,MAAKX,KAAA,CAAC,sCAYNW,EAAAA,MAAKX,KAAA,CAAC,8BAON6c,EAAAA,yBASAyjB,EAAAA,YAAWtgC,KAAA,CAAC,oCAaZsgC,EAAAA,YAAWtgC,KAAA,CAAC,6BAA0B,CAAAiK,KACtCtJ,EAAAA,wBAYA2/B,EAAAA,YAAWtgC,KAAA,CAAC,8BAA2B,CAAAiK,KACvCtJ,EAAAA,uBAYA2/B,EAAAA,YAAWtgC,KAAA,CAAC,+BA4GjBgxD,EAxTA,GCtCAgB,GAAA,WA2FI,SAAAA,EACc/hC,EACAkB,EACAkyB,EACFD,GAHE7vD,KAAA08B,QAAAA,EACA18B,KAAA49B,WAAAA,EACA59B,KAAA8vD,SAAAA,EACF9vD,KAAA6vD,KAAAA,EArEL7vD,KAAA0+D,aAAe,GA6Bf1+D,KAAA2+D,eAAiB,IAyBjB3+D,KAAA4+D,gBAAiB,EAMhB5+D,KAAA6+D,mBAAqB,oBACrB7+D,KAAA8+D,gBAAkB,aAClB9+D,KAAA++D,WAAY,EACZ/+D,KAAAg/D,eAAiB,GAwE7B,OAlGIx/D,OAAAgC,eAAgCi9D,EAAAv+D,UAAA,WAAQ,KAAxC,SAAyCiC,GACrCnC,KAAK++D,UAAY58D,GAASnC,KAAKi/D,0CAkBnCz/D,OAAAgC,eAAci9D,EAAAv+D,UAAA,gBAAa,KAA3B,WACI,OAAOF,KAAK49B,WAAWC,+CAiBpB4gC,EAAAv+D,UAAAg/D,YADP,SACmB1+B,GADnB,IAAAhvB,EAAAxR,KAEIA,KAAK6vD,KAAKnoB,kBAAkB,WAAM,OAAAl2B,EAAK2tD,QAAQ3+B,MAG3Ci+B,EAAAv+D,UAAAk/D,UAAR,SAAkBC,EAA4BC,GAC1Ct/D,KAAK8vD,SAASvB,SAAS8Q,EAAer/D,KAAK6+D,oBAC3C7+D,KAAK8vD,SAAS/qB,SAASs6B,EAAe,QAAYC,EAAYC,OAAM,MACpEv/D,KAAK8vD,SAAS/qB,SAASs6B,EAAe,SAAaC,EAAYC,OAAM,MACrEv/D,KAAK8vD,SAAS/qB,SAASs6B,EAAe,MAAUC,EAAYnnC,IAAG,MAC/Dn4B,KAAK8vD,SAAS/qB,SAASs6B,EAAe,OAAWC,EAAYrnC,KAAI,MAC7Dj4B,KAAKw/D,aACLx/D,KAAK8vD,SAAS/qB,SAASs6B,EAAe,aAAcr/D,KAAKw/D,cAIzDf,EAAAv+D,UAAAi/D,QAAR,SAAgB3+B,GAAhB,IAAAhvB,EAAAxR,KACI,IAAIA,KAAK4+D,eAAT,KAIM59D,EAAUhB,KAAK0+D,cAAe1+D,KAAK69B,cAAc4hC,cAAcz/D,KAAK0+D,eAAsC1+D,KAAK69B,cAE/G6hC,EAAa1+D,EAAO2O,wBACpB4vD,EAASj9C,KAAKC,IAAIm9C,EAAWhwD,MAAOgwD,EAAW9zD,QACjDqsB,EAAOuI,EAAMtC,QAAUwhC,EAAWznC,KAAOsnC,EAAS,EAClDpnC,EAAMqI,EAAMrC,QAAUuhC,EAAWvnC,IAAMonC,EAAS,EAEhDv/D,KAAK++D,YACL9mC,EAAOE,EAAM,OAGXwnC,EAAa,CACfJ,OAAMA,EACNpnC,IAAGA,EACHF,KAAIA,GAGFonC,EAAgBr/D,KAAK8vD,SAAS3qC,cAAc,QAElDnlB,KAAKo/D,UAAUC,EAAeM,GAC9B3/D,KAAK8vD,SAASvB,SAASvtD,EAAQhB,KAAK8+D,iBACpC9+D,KAAK8vD,SAASlqC,YAAY5kB,EAAQq+D,OAE5BngE,EAAYc,KAAK08B,QAAQoG,MAAM,CACjCvkC,EAAAA,MAAM,CAAEC,QAAS,GAAKyE,UAAW,cACjCxE,EAAAA,QAAQuB,KAAK2+D,eAAgBpgE,EAAAA,MAAM,CAAEC,QAAS,EAAGyE,UAAW,gBAC7D9C,OAAOk/D,GAEVr/D,KAAKg/D,eAAex8D,KAAKtD,GAEzBA,EAAUkkC,OAAO,WACb5xB,EAAKwtD,eAAejoD,OAAOvF,EAAKwtD,eAAelvD,QAAQ5Q,GAAY,GACnE8B,EAAO8kB,YAAYu5C,GACf7tD,EAAKwtD,eAAer+D,OAAS,GAC7B6Q,EAAKs+C,SAASjB,YAAY7tD,EAAQwQ,EAAKstD,mBAI/C5/D,EAAU0kC,6BA3JjB12B,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2DAHLu3B,EAAAA,wBADWzD,EAAAA,kBAAmD6tB,EAAAA,iBAARjqB,EAAAA,gDAyB1Dz3B,EAAAA,MAAKX,KAAA,CAAC,wCAcNW,EAAAA,MAAKX,KAAA,CAAC,qCAeNW,EAAAA,MAAKX,KAAA,CAAC,uCASNW,EAAAA,MAAKX,KAAA,CAAC,6CAgBNW,EAAAA,MAAKX,KAAA,CAAC,0CAoBNY,EAAAA,aAAYZ,KAAA,CAAC,YAAa,CAAC,cA8DhCgyD,EAjKA,GAsKAmB,GAAA,WAAA,SAAAA,KAI+B,2BAJ9BnyD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC+wD,IACf9wD,QAAS,CAAC8wD,QAEiBmB,EAJ/B,GCpJM1E,GAAO,aACTsC,GAAS,EAiBbqC,GAAA,WAAA,SAAAA,IAmIa7/D,KAAAqqC,OAA8C,IAAItjB,EAAAA,aAMpD/mB,KAAAsxC,SAAW,kBAKVtxC,KAAAu7D,kBAAsCL,GAItCl7D,KAAA8/D,MAAQ,mBAAmBtC,KAI3Bx9D,KAAAi+D,OAAc,KAIdj+D,KAAA8vC,UAAsC,KAItC9vC,KAAA+/D,gBAAiB,EAIjB//D,KAAAggE,eAA8C,QAI9ChgE,KAAAgwC,WAAY,EAIZhwC,KAAAigE,WAAY,EAIZjgE,KAAA88B,SAAW,IAAIC,EAAAA,QAgK3B,OAtTIv9B,OAAAgC,eACIq+D,EAAA3/D,UAAA,QAAK,KADT,WACmB,OAAOF,KAAKi+D,YAC/B,SAAU/kD,GACFlZ,KAAKi+D,SAAW/kD,IAChBlZ,KAAKi+D,OAAS/kD,EACdlZ,KAAKkgE,uDAcb1gE,OAAAgC,eACIq+D,EAAA3/D,UAAA,OAAI,KADR,WACqB,OAAOF,KAAK8/D,WACjC,SAAS5mD,GACDlZ,KAAK8/D,QAAU5mD,IACflZ,KAAK8/D,MAAQ5mD,EACblZ,KAAKmgE,yDAeb3gE,OAAAgC,eACIq+D,EAAA3/D,UAAA,WAAQ,KADZ,WAC0B,OAAOF,KAAKigE,eACtC,SAAa/mD,GACLlZ,KAAKigE,YAAc/mD,IACnBlZ,KAAKigE,UAAY/mD,EACjBlZ,KAAKogE,6DAWb5gE,OAAAgC,eACIq+D,EAAA3/D,UAAA,WAAQ,KADZ,WAC0B,OAAOF,KAAKgwC,eACtC,SAAa92B,GACLlZ,KAAKgwC,YAAc92B,IACnBlZ,KAAKgwC,UAAY92B,EACjBlZ,KAAKqgE,yDAeb7gE,OAAAgC,eACIq+D,EAAA3/D,UAAA,gBAAa,KADjB,WACmD,OAAOF,KAAKggE,oBAC/D,SAAkB9mD,GACVlZ,KAAKggE,iBAAmB9mD,IACxBlZ,KAAKggE,eAAiB9mD,IAAaslD,GAAmBlB,OAASkB,GAAmBlB,OAASkB,GAAmBjB,MAC9Gv9D,KAAKsgE,iEAYb9gE,OAAAgC,eACIq+D,EAAA3/D,UAAA,WAAQ,KADZ,WACiB,OAAOF,KAAK8vC,eAC7B,SAAal1B,GACL5a,KAAK8vC,YAAcl1B,IACnB5a,KAAK8vC,UAAYl1B,EACjB5a,KAAKmC,MAAQyY,EAAWA,EAASzY,MAAQ,uCAuDjD09D,EAAA3/D,UAAAqgE,mBAAA,WAAA,IAAA/uD,EAAAxR,KAGIA,KAAK+/D,gBAAiB,EAEtBzZ,WAAW,WAAQ90C,EAAKgvD,uBAUrBX,EAAA3/D,UAAA+8D,WAAP,SAAkB96D,GACdnC,KAAKmC,MAAQA,GAMV09D,EAAA3/D,UAAAg9D,iBAAP,SAAwBzb,GAAwBzhD,KAAKu7D,kBAAoB9Z,GAKlEoe,EAAA3/D,UAAAi9D,kBAAP,SAAyB1b,GACjBzhD,KAAKygE,cACLzgE,KAAKygE,aAAavwD,QAAQ,SAACwwD,GACvBA,EAAOvD,kBAAkB1b,MAQ9Boe,EAAA3/D,UAAAkkC,YAAP,WACIpkC,KAAK88B,SAAS56B,MAAK,GACnBlC,KAAK88B,SAASuH,YAMVw7B,EAAA3/D,UAAAsgE,kBAAR,WAAA,IAAAhvD,EAAAxR,KACQA,KAAKygE,cACLzgE,KAAKygE,aAAavwD,QAAQ,SAACwwD,GACvBA,EAAO9qD,KAAOpE,EAAKsuD,MACnBY,EAAOhD,cAAgBlsD,EAAKwuD,eAC5BU,EAAOnxB,SAAW/9B,EAAKw+B,UACvB0wB,EAAOxX,SAAW13C,EAAKyuD,UAEnBzuD,EAAKysD,QAAUyC,EAAOv+D,QAAUqP,EAAKysD,SACrCyC,EAAO3C,SAAU,EACjBvsD,EAAKs+B,UAAY4wB,GAGrBA,EAAOr2B,OAAO7H,KAAKC,EAAAA,UAAUjxB,EAAKsrB,WAAW4F,UAAU,SAAChF,GAAO,OAAAlsB,EAAKmvD,4BAA4BjjC,QAQpGmiC,EAAA3/D,UAAAygE,4BAAR,SAAoCl0D,GAC5BzM,KAAK8vC,YAAcrjC,EAAK8xD,QACpBv+D,KAAK8vC,YACL9vC,KAAK8vC,UAAUiuB,SAAU,GAE7B/9D,KAAK8vC,UAAYrjC,EAAK8xD,OAG1Bv+D,KAAKi+D,OAASxxD,EAAKtK,MAEfnC,KAAK+/D,iBACL//D,KAAKqqC,OAAOpxB,KAAKxM,GACjBzM,KAAKu7D,kBAAkBv7D,KAAKmC,SAO5B09D,EAAA3/D,UAAAigE,qBAAR,WAAA,IAAA3uD,EAAAxR,KACQA,KAAKygE,cACLzgE,KAAKygE,aAAavwD,QAAQ,SAACwwD,GACvBA,EAAO9qD,KAAOpE,EAAKsuD,SAQvBD,EAAA3/D,UAAAggE,mBAAR,WAAA,IAAA1uD,EAAAxR,KACQA,KAAKygE,cACLzgE,KAAKygE,aAAavwD,QAAQ,SAACwwD,GAClBlvD,EAAKysD,QAMFzsD,EAAKysD,SAAWyC,EAAOv+D,OAEnBqP,EAAKs+B,YAAc4wB,IACnBlvD,EAAKs+B,UAAY4wB,GAGhBA,EAAO3C,SACR2C,EAAO/S,UAXX+S,EAAO3C,UACP2C,EAAO3C,SAAU,MA0B7B8B,EAAA3/D,UAAAogE,6BAAR,WAAA,IAAA9uD,EAAAxR,KACQA,KAAKygE,cACLzgE,KAAKygE,aAAavwD,QAAQ,SAACwwD,GACvBA,EAAOhD,cAAgBlsD,EAAKwuD,kBAQhCH,EAAA3/D,UAAAmgE,qBAAR,WAAA,IAAA7uD,EAAAxR,KACQA,KAAKygE,cACLzgE,KAAKygE,aAAavwD,QAAQ,SAACwwD,GACvBA,EAAOnxB,SAAW/9B,EAAKw+B,aAQ3B6vB,EAAA3/D,UAAAkgE,yBAAR,WAAA,IAAA5uD,EAAAxR,KACQA,KAAKygE,cACLzgE,KAAKygE,aAAavwD,QAAQ,SAACwwD,GACvBA,EAAOxX,SAAW13C,EAAKyuD,iCA1UtC/yD,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,mCACVS,UAAW,CAAC,CAAE84C,QAASsQ,EAAAA,kBAAmBrQ,YAAakZ,EAAwBzC,OAAO,8CAUrFvW,EAAAA,gBAAep6C,KAAA,CAACgxD,mBAYhBrwD,EAAAA,oBAmBAA,EAAAA,wBAoBAA,EAAAA,wBAgBAA,EAAAA,6BAoBAA,EAAAA,wBAiBAA,EAAAA,sBAcAkc,EAAAA,yBAMAyjB,EAAAA,YAAWtgC,KAAA,CAAC,4BAsMjBozD,EA9UA,GAmVAe,GAAA,WAAA,SAAAA,KAK8B,2BAL7BnzD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACmyD,GAAwBpC,IACvC9vD,QAAS,CAACkyD,GAAwBpC,IAClChlB,QAAS,CAACmnB,QAEgBgB,EAL9B,iBCjKI,SAAAC,EAAoBp/B,EAA4BquB,GAAhD,IAAAt+C,EAAAxR,KAAoBA,KAAAyhC,QAAAA,EAA4BzhC,KAAA8vD,SAAAA,EAvJxC9vD,KAAA8gE,KAAO,KACP9gE,KAAA+gE,UAA8B,KAC9B/gE,KAAAghE,iBAAkB,EAClBhhE,KAAAihE,kBAAmB,EACnBjhE,KAAAkhE,qBAAuB,EAkDxBlhE,KAAAmhE,UAAY,GAEXnhE,KAAAi+D,OAAS,GA0ETj+D,KAAA88B,SAAW,IAAIC,EAAAA,QAsBnB8jC,EAA0BO,uBAAuB5+B,KAAKC,EAAAA,UAAUziC,KAAK88B,WAAW4F,UAAU,SAACy+B,GACnF3vD,EAAK2vD,YAAcA,KACe,IAA9B3vD,EAAK0vD,qBACL1vD,EAAK6vD,aAET7vD,EAAK8vD,yBAsRrB,OAzWI9hE,OAAAgC,eACWq/D,EAAA3gE,UAAA,QAAK,KADhB,WAEI,OAAOF,KAAKi+D,YAEhB,SAAiB97D,GACTA,IAAU6P,WAAuB,OAAV7P,EACvBnC,KAAKi+D,OAAS,GAEdj+D,KAAKi+D,OAAS97D,mCAqCtB3C,OAAAgC,eAAWq/D,EAAA3gE,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAKuhE,iDAgBFV,EAAAW,mBAAd,SAAiCL,EAAmBM,GAChDZ,EAA0Ba,mBAAmB/gD,IAAIwgD,EAAWM,GAC5DZ,EAA0BO,uBAAuBnoD,KAAKkoD,IAM5CN,EAAAc,qBAAd,SAAmCR,GAC/BN,EAA0Ba,mBAAmB/gD,IAAIwgD,EAAW,CACxD3uD,OAAQ,IAEZquD,EAA0BO,uBAAuBnoD,KAAKkoD,IAiB1DN,EAAA3gE,UAAAkkC,YAAA,WACIpkC,KAAK4hE,iBAEkB,OAAnB5hE,KAAK+gE,WACL/gE,KAAK+gE,UAAUc,aAEnB7hE,KAAK88B,SAAS56B,MAAK,GACnBlC,KAAK88B,SAASuH,YAMlBw8B,EAAA3gE,UAAA48C,YAAA,SAAYC,GACJA,EAAQ56C,QAAU46C,EAAQ56C,MAAMk7C,YAChCr9C,KAAK8hE,eAAgB,GACb/kB,EAAQllC,MAAQ7F,YAAc+qC,EAAQllC,IAAIwlC,aACjDN,EAAQ3kC,SAAWpG,YAAc+qC,EAAQ3kC,OAAOilC,aAChDN,EAAQ/gC,OAAShK,YAAc+qC,EAAQ/gC,KAAKqhC,gBACX,IAA9Br9C,KAAKkhE,qBACLlhE,KAAKqhE,aAETrhE,KAAKshE,wBAObT,EAAA3gE,UAAAumD,gBAAA,WACIzmD,KAAKu6B,cAAgBv6B,KAAK8vD,SAASlvB,WAAW5gC,KAAKyhC,QAAQ5D,gBAEc,IAArEgjC,EAA0Ba,mBAAmB7yB,IAAI7uC,KAAKmhE,YACtDN,EAA0Ba,mBAAmB/gD,IAAI3gB,KAAKmhE,UAAW,CAC7D3uD,OAAQ,IAIhBxS,KAAKuhE,gBAAkB,CACnBQ,aAAc,GACd7/B,QAASliC,KAAKmC,MACd6/D,WAAY,EACZC,eAAe,EACfC,YAAY,GAGhBliE,KAAKmiE,WAAaniE,KAAKu6B,cAAc6nC,mBAMzCvB,EAAA3gE,UAAAmiE,mBAAA,WACQriE,KAAK8hE,gBACL9hE,KAAKyhE,UAAUzhE,KAAKuhE,gBAAgBQ,aAAc/hE,KAAKuhE,gBAAgBU,cAAejiE,KAAKuhE,gBAAgBW,YAC3GliE,KAAKshE,sBACLthE,KAAK8hE,eAAgB,IAQtBjB,EAAA3gE,UAAAuhE,UAAP,SAAiBa,EAAcL,EAAyBC,OAC9CK,IAAwBN,EACxBO,IAAqBN,EAoB3B,OAlBIliE,KAAKyiE,sBAAsBH,EAAMC,EAAuBC,IACxDxiE,KAAKuhE,gBAAgBQ,aAAeO,EACpCtiE,KAAKuhE,gBAAgBU,cAAgBM,EACrCviE,KAAKuhE,gBAAgBW,WAAaM,EAClCxiE,KAAKuhE,gBAAgBr/B,QAAUliC,KAAKmC,MAEvB,KAATmgE,GAAeA,IAAStwD,WAAsB,OAATswD,EACrCtiE,KAAK4hE,kBAEL5hE,KAAK0iE,oBAAmB,GACxB1iE,KAAKuhE,gBAAgBS,WAAahiE,KAAK2iE,mBAAmBL,EAAML,EAAeC,KAE5EliE,KAAKghE,kBACZhhE,KAAKuhE,gBAAgBQ,aAAeO,EACpCtiE,KAAKuhE,gBAAgBU,cAAgBM,EACrCviE,KAAKuhE,gBAAgBW,WAAaM,GAG/BxiE,KAAKuhE,gBAAgBS,YAMzBnB,EAAA3gE,UAAA0hE,eAAP,WACI5hE,KAAK0iE,oBAAmB,GAExB1iE,KAAKuhE,gBAAgBQ,aAAe,GACpC/hE,KAAKuhE,gBAAgBS,WAAa,GAM/BnB,EAAA3gE,UAAAohE,oBAAP,eACUztD,EAAQgtD,EAA0Ba,mBAAmBn1D,IAAIvM,KAAKmhE,WAC9D/oD,EAASvE,EAAMyE,cAAgBtG,UAAY6B,EAAMuE,OAASvE,EAAMyE,YAChET,EAAMhE,EAAMmE,WAAahG,UAAY6B,EAAMgE,IAAMhE,EAAMmE,SAEzDI,IAAWpY,KAAKoY,QAAUP,IAAQ7X,KAAK6X,KAAOhE,EAAMmI,OAAShc,KAAKgc,MAClEhc,KAAK4iE,SAAS/uD,EAAMrB,QAQrBquD,EAAA3gE,UAAA2iE,QAAP,WAAA,IAAArxD,EAAAxR,KACI,GAAuB,OAAnBA,KAAK+gE,UAAoB,CA+BzB/gE,KAAK+gE,UAAY,IAAI+B,iBA9BJ,SAACC,GACdA,EAAa7yD,QAAQ,SAAC8yD,GACGrjE,MAAMgR,KAAKqyD,EAASC,cAC5B/yD,QAAQ,SAACzP,GACdA,IAAM+Q,EAAK2wD,aACX3wD,EAAKwvD,iBAAkB,EACvBxvD,EAAKkxD,oBAAmB,MAIb/iE,MAAMgR,KAAKqyD,EAASE,YAC5BhzD,QAAQ,SAACzP,GACZA,IAAM+Q,EAAK+oB,cAAc6nC,mBAAqB5wD,EAAKwvD,kBACnDxvD,EAAK2wD,WAAa3wD,EAAK+oB,cAAc6nC,kBACrC5wD,EAAKwvD,iBAAkB,EAEvBxvD,EAAKyvD,kBAAmB,EACxBzvD,EAAKiwD,UAAUjwD,EAAK+vD,gBAAgBQ,aAChCvwD,EAAK+vD,gBAAgBU,cACrBzwD,EAAK+vD,gBAAgBW,YACzB1wD,EAAKyvD,kBAAmB,EAExBzvD,EAAK8vD,sBACL9vD,EAAKuvD,UAAUc,aACfrwD,EAAKuvD,UAAY,YAOjC/gE,KAAK+gE,UAAU8B,QAAQ7iE,KAAKu6B,cAAe,CAAC4oC,WAAW,MAIvDtC,EAAA3gE,UAAA0iE,SAAR,SAAiBpwD,GAGb,GAFAxS,KAAKqhE,aAEa,OAAdrhE,KAAK8gE,KAAe,KACdsC,EAAQpjE,KAAK8gE,KAAKuC,iBAAiB,QAGzC,GAFArjE,KAAKkhE,oBAAsB1uD,EAEvB4wD,EAAMziE,QAAU6R,EAChB,WAGE8wD,EAAoBF,EAAM5wD,GAChCxS,KAAK8vD,SAASvB,SAAS+U,EAAmBtjE,KAAKujE,gBAC/CvjE,KAAK8vD,SAASlB,aAAa0U,EAAmB,QAAS,mCAIvDzC,EAAA3gE,UAAAmhE,WAAR,WACI,IAAkC,IAA9BrhE,KAAKkhE,oBAAT,KAIMkC,EAAQpjE,KAAK8gE,KAAKuC,iBAAiB,QAEzC,GAAID,EAAMziE,QAAUX,KAAKkhE,oBACrBlhE,KAAKkhE,qBAAuB,MADhC,KAKMsC,EAAsBJ,EAAMpjE,KAAKkhE,qBACvClhE,KAAK8vD,SAASjB,YAAY2U,EAAqBxjE,KAAKujE,gBACpDvjE,KAAK8vD,SAASlB,aAAa4U,EAAqB,QAAS,iCACzDxjE,KAAKkhE,qBAAuB,KAGxBL,EAAA3gE,UAAAwiE,mBAAR,SAA2Be,GACvBzjE,KAAK8vD,SAAS4T,YAAY1jE,KAAKyhC,QAAQ5D,cAAe,SAAU4lC,GAE9C,OAAdzjE,KAAK8gE,OACL9gE,KAAK8vD,SAAShqC,YAAY9lB,KAAKu6B,cAAev6B,KAAK8gE,MAEnD9gE,KAAK8gE,KAAO,KACZ9gE,KAAKkhE,qBAAuB,IAI5BL,EAAA3gE,UAAAyiE,mBAAR,SAA2BgB,EAAoB1B,EAAwBC,GACnEliE,KAAK4jE,gBAECC,EAAc/iD,OAAO9gB,KAAKmC,OAC1B2hE,EAAyB7B,EAA4C4B,EAA5BA,EAAY3xD,cACrD6xD,EAAsB9B,EAA2C0B,EAA3BA,EAAWzxD,cAEnD8vD,EAAa,EAEjB,GAAIE,EACI4B,IAA0BC,GAE1B/jE,KAAKgkE,WAAW,gBAAgBhkE,KAAKsxC,SAAQ,2CAA2CuyB,EAAW,WACnG7B,KAEAhiE,KAAKikE,WAAWJ,OAEjB,CAIH,QAHIK,EAAaJ,EAAsBh0D,QAAQi0D,EAAoB,GAC/DI,EAAmB,GAEA,IAAhBD,GAAmB,KAChB1hD,EAAQ0hD,EACR7sD,EAAM6sD,EAAaH,EAAmBpjE,OAE5CX,KAAKikE,WAAWJ,EAAY/I,UAAUqJ,EAAkB3hD,IAExDxiB,KAAKgkE,WAAW,gBAAgBhkE,KAAKsxC,SAAQ,2CAA2CuyB,EAAY/I,UAAUt4C,EAAOnL,GAAI,WAEzH8sD,EAAmB9sD,EACnB2qD,IAEAkC,EAAaJ,EAAsBh0D,QAAQi0D,EAAoB1sD,GAGnErX,KAAKikE,WAAWJ,EAAY/I,UAAUqJ,EAAkBN,EAAYljE,SAGxE,OAAOqhE,GAGHnB,EAAA3gE,UAAA+jE,WAAR,SAAmB3B,OACT8B,EAAcpkE,KAAK8vD,SAASuU,WAAW/B,GAC7CtiE,KAAK8vD,SAASlqC,YAAY5lB,KAAK8gE,KAAMsD,IAGjCvD,EAAA3gE,UAAA8jE,WAAR,SAAmBM,OACTC,EAAOvkE,KAAK8vD,SAAS3qC,cAAc,QACzCnlB,KAAK8vD,SAASlqC,YAAY5lB,KAAK8gE,KAAMyD,GACrCvkE,KAAK8vD,SAAS4T,YAAYa,EAAM,YAAaD,IAGzCzD,EAAA3gE,UAAA0jE,UAAR,WACI5jE,KAAK8gE,KAAO9gE,KAAK8vD,SAAS3qC,cAAc,OACnCnlB,KAAKwkE,gBACNxkE,KAAK8vD,SAASvB,SAASvuD,KAAK8gE,KAAM9gE,KAAKwkE,gBAE3CxkE,KAAK8vD,SAASlqC,YAAY5lB,KAAKu6B,cAAev6B,KAAK8gE,OAG/CD,EAAA3gE,UAAAuiE,sBAAR,SAA8BH,EAAcL,EAAwBC,OAC1DH,EAAe/hE,KAAKuhE,gBAAgBQ,aAE1C,OAAQ/hE,KAAKghE,kBACS,OAAjBe,GACGA,IAAiBO,GACjBtiE,KAAKuhE,gBAAgBr/B,UAAYliC,KAAKmC,OACtCnC,KAAKuhE,gBAAgBU,gBAAkBA,GACvCjiE,KAAKuhE,gBAAgBW,aAAeA,GACpCliE,KAAKihE,mBArbFJ,EAAAO,uBAAyB,IAAIr6C,EAAAA,aAC9B85C,EAAAa,mBAAqB,IAAI3yD,wBAL1C7B,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,kEArDV8zB,EAAAA,kBAMA6tB,EAAAA,+CAwEC1hD,EAAAA,MAAKX,KAAA,CAAC,oCAcNW,EAAAA,MAAKX,KAAA,CAAC,0CAMNW,EAAAA,MAAKX,KAAA,CAAC,qCAeNW,EAAAA,MAAKX,KAAA,CAAC,4BAqBNW,EAAAA,MAAKX,KAAA,CAAC,sBAsBNW,EAAAA,MAAKX,KAAA,CAAC,uBAaNW,EAAAA,MAAKX,KAAA,CAAC,wBAGNW,EAAAA,MAAKX,KAAA,CAAC,WAEP+gC,EAAAA,CADC/R,GAAkB,sHAkUvBolC,KAKA4D,GAAA,WAAA,SAAAA,KAIsC,2BAJrCh3D,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACmzD,IACflzD,QAAS,CAACkzD,QAEwB4D,EAJtC,GCvfAC,GAAA,WAqFI,SAAAA,EAAoBjjC,GAAAzhC,KAAAyhC,QAAAA,EA7EZzhC,KAAA2kE,gBAAiB,EAyG7B,OAzFInlE,OAAAgC,eACIkjE,EAAAxkE,UAAA,WAAQ,KADZ,WAEI,OAAOF,KAAK2kE,oBAsBhB,SAAarlD,GACTtf,KAAK2kE,eAAiBrlD,mCAwB1B9f,OAAAgC,eAAIkjE,EAAAxkE,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKyhC,QAAQ5D,+CAOxB6mC,EAAAxkE,UAAAkpD,QADA,WAEIppD,KAAK82D,WA0BT4N,EAAAxkE,UAAA42D,QAAA,WAAA,IAAAtlD,EAAAxR,KACQA,KAAK4a,UAAY5a,KAAK69B,cAAc17B,MAAMxB,QAC1C43C,sBAAsB,WAAM,OAAA/mC,EAAKqsB,cAAcm/B,kBAAkB,EAAGxrD,EAAKqsB,cAAc17B,MAAMxB,+BA5GxGuM,EAAAA,UAAST,KAAA,CAAC,CACPmgC,SAAU,mBACVz/B,SAAU,kEAJM8zB,EAAAA,gDAwBf7zB,EAAAA,MAAKX,KAAA,CAAC,qCAwDNY,EAAAA,aAAYZ,KAAA,CAAC,YAiClBi4D,EAjHA,GAsHAE,GAAA,WAAA,SAAAA,KAIsC,2BAJrCn3D,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACg3D,IACf/2D,QAAS,CAAC+2D,QAEwBE,EAJtC,GC/EAC,GAAA,SAAAh5C,GA0II,SAAAg5C,EAAoBjd,EACIkd,GADxB,IAAAtzD,EAEIqa,EAAAjrB,KAAAZ,KAAM4nD,EAAUkd,IAAmB9kE,YAFnBwR,EAAAo2C,SAAAA,EACIp2C,EAAAszD,mBAAAA,EAvHjBtzD,EAAAuzD,UAAY,IAiBZvzD,EAAAwzD,UAAY,IAmBZxzD,EAAAyzD,iBAAkB,EA6DlBzzD,EAAA0zD,cAAgB,IAAIn+C,EAAAA,aAmBpBvV,EAAA2zD,cAAgB,IAAIp+C,EAAAA,eAyQ/B,OA7Y+CvS,EAAAA,EAAAA,GAyD3ChV,OAAAgC,eACIqjE,EAAA3kE,UAAA,SAAM,KASV,WACI,MAA4B,iBAAjBF,KAAKktC,QACLltC,KAAK8kE,mBAAmBv4D,IAAIvM,KAAKktC,SAErCltC,KAAKktC,aAdhB,SACWlsC,GACQ,OAAXA,GAA8B,KAAXA,IACnBhB,KAAKktC,QAAUlsC,oCAqBvBxB,OAAAgC,eAAWqjE,EAAA3kE,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK4nD,SAAS/pB,+CAUzBr+B,OAAAgC,eAAWqjE,EAAA3kE,UAAA,gBAAa,KAAxB,WACI,OAAQF,KAAKgB,QAAUhB,KAAKgB,OAAO+qC,2CAiDhC84B,EAAA3kE,UAAAusC,SAAP,WACI5gB,EAAA3rB,UAAMusC,SAAQ7rC,KAAAZ,UAERolE,EAAqC,CACvCpkE,OAAQhB,KAAK69B,cACbpE,oBAAqBC,GAAoBpC,OACzCuC,qBAAsBH,GAAoBpC,OAC1CyC,cAAesrC,EAAAA,aAAa59D,GAAe,CAAEtI,OAAQ,CAAEP,SAAU,WACjEo7B,eAAgBqrC,EAAAA,aAAajmE,EAAS,CAAED,OAAQ,CAAEP,SAAU,WAGhEoB,KAAKmtC,iBAAiBnQ,iBAAmB,IAAI6I,GAAqBu/B,GAClEplE,KAAKmtC,iBAAiBhQ,qBAAsB,GAGxC0nC,EAAA3kE,UAAAolE,2BAAR,WACQtlE,KAAKm9B,sBAAwBnrB,YAC7BhS,KAAKmtC,iBAAiBhQ,oBAAsBn9B,KAAKm9B,qBAEjDn9B,KAAKqiC,SACLriC,KAAKmtC,iBAAiB9K,OAASriC,KAAKqiC,SAI5C7iC,OAAAgC,eAAYqjE,EAAA3kE,UAAA,wBAAqB,KAAjC,WACI,OAAOV,OAAOa,OAAO,GAAIL,KAAKmtC,iBAAkBntC,KAAKgsC,kDAIjD64B,EAAA3kE,UAAAqlE,mBAAR,WAQI,GANIvlE,KAAKgB,OAAOwkE,YACZC,aAAazlE,KAAKgB,OAAO0kE,WACzB1lE,KAAKgB,OAAOwkE,WAAY,IAIvBxlE,KAAKgB,OAAO+qC,WAAa/rC,KAAKgB,OAAO2kE,WAAY,CAClDF,aAAazlE,KAAKgB,OAAO0kE,eAEnBE,EAAa,CAAE5kE,OAAQhB,KAAM6lE,QAAS7lE,KAAKgB,OAAQ4X,QAAQ,GAGjE,GAFA5Y,KAAKmlE,cAAclsD,KAAK2sD,GAEpBA,EAAWhtD,OACX,OAAO,EAIX5Y,KAAKgB,OAAO8kE,WAAW9lE,KAAK+lE,uBAC5B/lE,KAAKgB,OAAO2kE,YAAa,EAG7B,OAAO,GAIHd,EAAA3kE,UAAA8lE,mBAAR,WAII,OAHAP,aAAazlE,KAAKgB,OAAO0kE,aAGrB1lE,KAAKgB,OAAOwkE,YACZxlE,KAAKgB,OAAOwkE,WAAY,IACxBxlE,KAAKgB,OAAO2kE,YAAa,KAW1Bd,EAAA3kE,UAAA+lE,gBADP,eAEUL,EAAa,CAAE5kE,OAAQhB,KAAM6lE,QAAS7lE,KAAKgB,OAAQ4X,QAAQ,GACjE5Y,KAAKmlE,cAAclsD,KAAK2sD,GAEpBA,EAAWhtD,SAIf5Y,KAAKgB,OAAO2kE,YAAa,EACzB3lE,KAAKgB,OAAO6L,QACZ7M,KAAKgB,OAAO2kE,YAAa,IAOtBd,EAAA3kE,UAAAktC,QADP,WAEI,IAAKptC,KAAKgB,OAAO+qC,UAAW,KAClB65B,EAAa,CAAE5kE,OAAQhB,KAAM6lE,QAAS7lE,KAAKgB,OAAQ4X,QAAQ,GAGjE,GAFA5Y,KAAKmlE,cAAclsD,KAAK2sD,GAEpBA,EAAWhtD,OACX,OAGJ5Y,KAAKgB,OAAO8kE,WAAW9lE,KAAK+lE,yBAQ7BlB,EAAA3kE,UAAAgmE,aADP,WAAA,IAAA10D,EAAAxR,KAEI,IAAIA,KAAKilE,kBAITjlE,KAAKslE,8BACgBtlE,KAAKulE,sBAC1B,KAIMY,EAAc,CAAEnlE,OAAQhB,KAAM6lE,QAAS7lE,KAAKgB,OAAQ4X,QAAQ,GAClE5Y,KAAKklE,cAAcjsD,KAAKktD,GAEpBA,EAAYvtD,SAIhB5Y,KAAKgB,OAAOwkE,WAAY,EACxBxlE,KAAKgB,OAAO0kE,UAAYpf,WAAW,WAC/B90C,EAAKxQ,OAAO4L,KAAK4E,EAAKu0D,uBACtBv0D,EAAKxQ,OAAOwkE,WAAY,GACzBxlE,KAAK+kE,cAOLF,EAAA3kE,UAAAkmE,aADP,WAAA,IAAA50D,EAAAxR,KAEI,IAAIA,KAAKilE,kBAITjlE,KAAKslE,8BACgBtlE,KAAKgmE,uBACNhmE,KAAKgB,OAAO+qC,WAAhC,KAIM65B,EAAa,CAAE5kE,OAAQhB,KAAM6lE,QAAS7lE,KAAKgB,OAAQ4X,QAAQ,GACjE5Y,KAAKmlE,cAAclsD,KAAK2sD,GAEpBA,EAAWhtD,SAIf5Y,KAAKgB,OAAO2kE,YAAa,EACzB3lE,KAAKgB,OAAO0kE,UAAYpf,WAAW,WAC/B90C,EAAKxQ,OAAO6L,QACZ2E,EAAKxQ,OAAO2kE,YAAa,GAC1B3lE,KAAKglE,cAOLH,EAAA3kE,UAAAg0C,aADP,SACoB1T,GACZxgC,KAAKilE,kBAITzkC,EAAMqH,iBACN7nC,KAAKqmE,gBAOFxB,EAAA3kE,UAAAomE,qBADP,SAC4B9lC,GACpBxgC,KAAKilE,iBAILjlE,KAAK69B,gBAAkB2C,EAAMx/B,QAC5BhB,KAAK69B,cAAcC,SAAS0C,EAAMx/B,SAEnChB,KAAKumE,eAWN1B,EAAA3kE,UAAAmmE,YAAP,WAAA,IAAA70D,EAAAxR,KAGI,GAFAylE,aAAazlE,KAAKgB,OAAO0kE,YAEpB1lE,KAAKgB,OAAO+qC,UAAW,KAClB65B,EAAa,CAAE5kE,OAAQhB,KAAM6lE,QAAS7lE,KAAKgB,OAAQ4X,QAAQ,GAGjE,GAFA5Y,KAAKmlE,cAAclsD,KAAK2sD,GAEpBA,EAAWhtD,OACX,OAGJ5Y,KAAKgB,OAAO8kE,WAAW9lE,KAAK+lE,uBAC5B/lE,KAAKgB,OAAO2kE,YAAa,MAGvBQ,EAAc,CAAEnlE,OAAQhB,KAAM6lE,QAAS7lE,KAAKgB,OAAQ4X,QAAQ,GAClE5Y,KAAKklE,cAAcjsD,KAAKktD,GAEpBA,EAAYvtD,SAIhB5Y,KAAKgB,OAAOwkE,WAAY,EACxBxlE,KAAKgB,OAAO0kE,UAAYpf,WAAW,WAC/B90C,EAAKxQ,OAAO4L,KAAK4E,EAAKu0D,uBACtBv0D,EAAKxQ,OAAOwkE,WAAY,GACzBxlE,KAAK+kE,aAULF,EAAA3kE,UAAAqmE,YAAP,WAAA,IAAA/0D,EAAAxR,KAKI,GAJIA,KAAKgB,OAAO+qC,WAAa/rC,KAAKgB,OAAOwkE,WACrCC,aAAazlE,KAAKgB,OAAO0kE,YAGzB1lE,KAAKgB,OAAO+qC,YAAa/rC,KAAKgB,OAAO2kE,WAAzC,KAIMC,EAAa,CAAE5kE,OAAQhB,KAAM6lE,QAAS7lE,KAAKgB,OAAQ4X,QAAQ,GACjE5Y,KAAKmlE,cAAclsD,KAAK2sD,GAEpBA,EAAWhtD,SAIf5Y,KAAKgB,OAAO2kE,YAAa,EACzB3lE,KAAKgB,OAAO0kE,UAAYpf,WAAW,WAC/B90C,EAAKxQ,OAAO6L,QACZ2E,EAAKxQ,OAAO2kE,YAAa,GAC1B3lE,KAAKglE,kCA/Yf93D,EAAAA,UAAST,KAAA,CAAC,CACPmgC,SAAU,gBACVz/B,SAAU,kEAxCC8zB,EAAAA,kBASNh1B,GAAoBlL,WAAA,CAAA,CAAA2V,KAwKpBo2B,EAAAA,iDAxHJ1/B,EAAAA,MAAKX,KAAA,CAAC,gCAiBNW,EAAAA,MAAKX,KAAA,CAAC,sCAmBNW,EAAAA,MAAKX,KAAA,CAAC,mCAMNW,EAAAA,MAAKX,KAAA,CAAC,2CAuDN6c,EAAAA,8BAmBAA,EAAAA,gCAmFAjc,EAAAA,aAAYZ,KAAA,CAAC,0BAA2B,CAAC,4BAiBzCY,EAAAA,aAAYZ,KAAA,CAAC,+BAiBbY,EAAAA,aAAYZ,KAAA,CAAC,oCA6BbY,EAAAA,aAAYZ,KAAA,CAAC,oCA6BbY,EAAAA,aAAYZ,KAAA,CAAC,aAAc,CAAC,yCAa5BY,EAAAA,aAAYZ,KAAA,CAAC,sBAAuB,CAAC,cA8E1Co4D,EAjZA,CAI+C73B,IA+Y3CmC,GAAU,EAedq3B,GAAA,SAAA36C,GAkFI,SAAA26C,EACI5oC,EACApf,EAC2Buc,EACf0Q,GAJhB,IAAAj6B,EAMIqa,EAAAjrB,KAAAZ,KAAM49B,EAAYpf,EAAKuc,EAAgB0Q,IAAkBzrC,YAzEtDwR,EAAAm0D,YAAa,EAMbn0D,EAAAg0D,WAAY,EA8CZh0D,EAAApF,GAAK,eAAe+iC,OAgE/B,OA/HyC36B,EAAAA,EAAAA,GAsBrChV,OAAAgC,eACWglE,EAAAtmE,UAAA,cAAW,KADtB,WAEI,OAAOF,KAAK+rC,2CAMhBvsC,OAAAgC,eACWglE,EAAAtmE,UAAA,eAAY,KADvB,WAEI,OAAQF,KAAK+rC,2CAwCjBvsC,OAAAgC,eACWglE,EAAAtmE,UAAA,OAAI,KADf,WAEI,MAAO,2CAkBDsmE,EAAAtmE,UAAAumE,UAAV,SAAoBz6B,OACVrO,EAAO39B,KAAK+6B,eAAeiE,eAAeh/B,KAAK2rC,YAErD,KADyBhO,GAAOA,EAAKiF,oBAEjCjF,EAAKiF,oBAAoB8jC,SACzB/oC,EAAKiF,oBAAoBS,QACzB1F,EAAKiF,oBAAsB,UACxB,GAAI5iC,KAAK+rC,UAAW,KACjB7sC,EAAY8sC,EAAgBhP,iBAAiBlF,SAASiC,cAC5DiS,EAAgBhP,iBAAiBlF,SAASiC,cAAgB,KAC1D/5B,KAAK4M,KAAKo/B,GACVA,EAAgBhP,iBAAiBlF,SAASiC,cAAgB76B,IASxDsnE,EAAAtmE,UAAA4lE,WAAV,SAAqB95B,OACXrO,EAAO39B,KAAK+6B,eAAeiE,eAAeh/B,KAAK2rC,YAGrD,KAF0BhO,GAAOA,EAAKU,qBAGlCV,EAAKU,qBAAqBqoC,SAC1B/oC,EAAKU,qBAAqBgF,QAC1B1F,EAAKU,qBAAuB,UACzB,IAAKr+B,KAAK+rC,UAAW,KAClB7sC,EAAY8sC,EAAgBhP,iBAAiBlF,SAASkC,eAC5DgS,EAAgBhP,iBAAiBlF,SAASkC,eAAiB,KAC3Dh6B,KAAK6M,QACLm/B,EAAgBhP,iBAAiBlF,SAASkC,eAAiB96B,wBAhItEgO,EAAAA,UAAST,KAAA,CAAC,CACPmgC,SAAU,UACVz/B,SAAU,4DA1cC8zB,EAAAA,kBAA2C4L,EAAAA,yBAMjDvQ,GAAiBv7B,WAAA,CAAA,CAAA2V,KAuhBjBiuB,EAAAA,OAAMl4B,KAAA,CAAC6vB,aAphBPrwB,GAAoBlL,WAAA,CAAA,CAAA2V,KAqhBpBo2B,EAAAA,mDA5DJC,EAAAA,YAAWtgC,KAAA,CAAC,mDAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,+CAoBZW,EAAAA,MAAKX,KAAA,CAAC,uBAWNsgC,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,oBAUA2/B,EAAAA,YAAWtgC,KAAA,CAAC,gBAuDjB+5D,EAnIA,CAIyCh7B,IAoIzCm7B,GAAA,WAAA,SAAAA,KAMgC,2BAN/Bl5D,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC84D,GAAqB3B,IACpCl3D,QAAS,CAAC64D,GAAqB3B,IAC/BpsB,QAAS,CAACC,EAAAA,cACV9qC,UAAW,CAAC0uB,QAEgBqqC,EANhC,iBCxkBI,SAAAC,IACI5mE,KAAK6mE,WAAa,CAAC,CACfjxD,KAAM,OACNkxD,SAAS,EACTC,SAAU,UACVxnD,MAAO,SAACve,GACJ,OAAkB,OAAXA,IAEZ,CACC4U,KAAM,UACNkxD,SAAS,EACTC,SAAU,cACVxnD,MAAO,SAACve,GACJ,OAAkB,OAAXA,KAgBvB,OAXW4lE,EAAA1mE,UAAA8mE,cAAP,WACI,OAAOhnE,KAAK6mE,WAAWjwD,IAAI,SAAC6qB,GAAY,OAAAA,EAAQ7rB,QAG7CgxD,EAAA1mE,UAAAkc,UAAP,SAAiBxG,GACb,OAAO5V,KAAK6mE,WAAW7xD,KAAK,SAACysB,GAAY,OAAAA,EAAQ7rB,OAASA,KAGvDgxD,EAAA1mE,UAAA+mE,OAAP,SAAcC,GACVlnE,KAAK6mE,WAAWrkE,KAAK0kE,IAE7BN,KAOAO,GAAA,SAAAt7C,GAGI,SAAAs7C,IAAA,IAAA31D,EACIqa,EAAAjrB,KAAAZ,OAAOA,YACPwR,EAAKq1D,WAAa,CAAC,CACfjxD,KAAM,MACNkxD,SAAS,EACTC,SAAU,MACVxnD,MAAO,SAACve,GACJ,OAAO,IAEZ,CACC4U,KAAM,OACNkxD,SAAS,EACTC,SAAU,UACVxnD,MAAO,SAACve,GACJ,SAAUA,GAAqB,OAAXA,GAAmBA,IAAWgR,aAEvD,CACC4D,KAAM,QACNkxD,SAAS,EACTC,SAAU,WACVxnD,MAAO,SAACve,GACJ,OAAQA,GAAqB,OAAXA,GAAmBA,IAAWgR,YAErD,CACC4D,KAAM,QACNkxD,SAAS,EACTC,SAAU,QACVxnD,MAAO,SAACve,GACJ,OAAkB,OAAXA,GAAmBA,IAAWgR,YAE1C,CACC4D,KAAM,WACNkxD,SAAS,EACTC,SAAU,YACVxnD,MAAO,SAACve,GACJ,OAAkB,OAAXA,GAAmBA,IAAWgR,aAE1CrP,OAAO6O,EAAKq1D,cAMvB,OA9CgDryD,EAAAA,EAAAA,GA2C9B2yD,EAAAn2D,SAAd,WACI,OAAOhR,KAAKiR,YAAcjR,KAAKiR,UAAY,IAAIjR,OA3CpCmnE,EAAAl2D,UAAwC,KA6C3Dk2D,EA9CA,CAAgDP,IAqDhDQ,GAAA,SAAAv7C,GAGI,SAAAu7C,IAAA,IAAA51D,EACIqa,EAAAjrB,KAAAZ,OAAOA,YACPwR,EAAKq1D,WAAa,CAAC,CACfjxD,KAAM,SACNkxD,SAAS,EACTC,SAAU,SACVxnD,MAAO,SAACve,EAAc0b,GAClB,IAAK1b,EACD,OAAO,EAGXwQ,EAAK61D,kBAAkBrmE,OAEjBsmE,EAAUF,EAAwBG,aAAavmE,EAAQ,OACvDwmE,EAAUJ,EAAwBG,aAAa7qD,EAAW,OAChE,OAAO4qD,EAAQG,OAASD,EAAQC,MAC5BH,EAAQI,QAAUF,EAAQE,OAC1BJ,EAAQK,MAAQH,EAAQG,MAEjC,CACC/xD,KAAM,eACNkxD,SAAS,EACTC,SAAU,YACVxnD,MAAO,SAACve,EAAc0b,GAClB,IAAK1b,EACD,OAAO,EAGXwQ,EAAK61D,kBAAkBrmE,OAEjBsmE,EAAUF,EAAwBG,aAAavmE,EAAQ,OACvDwmE,EAAUJ,EAAwBG,aAAa7qD,EAAW,OAChE,OAAO4qD,EAAQG,OAASD,EAAQC,MAC5BH,EAAQI,QAAUF,EAAQE,OAC1BJ,EAAQK,MAAQH,EAAQG,MAEjC,CACC/xD,KAAM,SACNkxD,SAAS,EACTC,SAAU,YACVxnD,MAAO,SAACve,EAAc0b,GAClB,QAAK1b,IAILwQ,EAAK61D,kBAAkBrmE,GAEhBA,EAAS0b,KAErB,CACC9G,KAAM,QACNkxD,SAAS,EACTC,SAAU,WACVxnD,MAAO,SAACve,EAAc0b,GAClB,QAAK1b,IAILwQ,EAAK61D,kBAAkBrmE,GAEP0b,EAAT1b,KAEZ,CACC4U,KAAM,QACNkxD,SAAS,EACTC,SAAU,QACVxnD,MAAO,SAACve,GACJ,IAAKA,EACD,OAAO,EAGXwQ,EAAK61D,kBAAkBrmE,OAEjB1B,EAAI8nE,EAAwBG,aAAavmE,EAAQ,OACjD4mE,EAAMR,EAAwBG,aAAa,IAAI34D,KAAQ,OAC7D,OAAOtP,EAAEmoE,OAASG,EAAIH,MAClBnoE,EAAEooE,QAAUE,EAAIF,OAChBpoE,EAAEqoE,MAAQC,EAAID,MAEvB,CACC/xD,KAAM,YACNkxD,SAAS,EACTC,SAAU,YACVxnD,MAAO,SAACve,GACJ,IAAKA,EACD,OAAO,EAGXwQ,EAAK61D,kBAAkBrmE,OAGX1B,EADNuoE,EAAKT,EAAwBG,aAAavmE,EAAQ,OAClD42B,GAAMt4B,EAA4C,IAAIsP,KAA1C,IAAIA,KAAKtP,EAAEwoE,QAAQxoE,EAAEyoE,UAAY,KAC7CC,EAAYZ,EAAwBG,aAAa3vC,EAAG,OAC1D,OAAOiwC,EAAGJ,OAASO,EAAUP,MACzBI,EAAGH,QAAUM,EAAUN,OACvBG,EAAGF,MAAQK,EAAUL,MAE9B,CACC/xD,KAAM,YACNkxD,SAAS,EACTC,SAAU,aACVxnD,MAAO,SAACve,GACJ,IAAKA,EACD,OAAO,EAGXwQ,EAAK61D,kBAAkBrmE,OAEjB1B,EAAI8nE,EAAwBG,aAAavmE,EAAQ,MACjD4mE,EAAMR,EAAwBG,aAAa,IAAI34D,KAAQ,MAC7D,OAAOtP,EAAEmoE,OAASG,EAAIH,MAClBnoE,EAAEooE,QAAUE,EAAIF,QAEzB,CACC9xD,KAAM,YACNkxD,SAAS,EACTC,SAAU,aACVxnD,MAAO,SAACve,GACJ,IAAKA,EACD,OAAO,EAGXwQ,EAAK61D,kBAAkBrmE,OAEjB1B,EAAI8nE,EAAwBG,aAAavmE,EAAQ,MACjD4mE,EAAMR,EAAwBG,aAAa,IAAI34D,KAAQ,MAO7D,OANKg5D,EAAIF,MAILE,EAAIF,SAHJE,EAAIF,MAAQ,GACZE,EAAIH,MAAQ,GAITnoE,EAAEmoE,OAASG,EAAIH,MAClBnoE,EAAEooE,QAAUE,EAAIF,QAEzB,CACC9xD,KAAM,YACNkxD,SAAS,EACTC,SAAU,aACVxnD,MAAO,SAACve,GACJ,IAAKA,EACD,OAAO,EAGXwQ,EAAK61D,kBAAkBrmE,OAEjB1B,EAAI8nE,EAAwBG,aAAavmE,EAAQ,MACjD4mE,EAAMR,EAAwBG,aAAa,IAAI34D,KAAQ,MAO7D,OANkB,KAAdg5D,EAAIF,OACJE,EAAIF,MAAQ,EACZE,EAAIH,MAAQ,GAEZG,EAAIF,QAEDpoE,EAAEmoE,OAASG,EAAIH,MAClBnoE,EAAEooE,QAAUE,EAAIF,QAEzB,CACC9xD,KAAM,WACNkxD,SAAS,EACTC,SAAU,YACVxnD,MAAO,SAACve,GACJ,IAAKA,EACD,OAAO,EAGXwQ,EAAK61D,kBAAkBrmE,OAEjB1B,EAAI8nE,EAAwBG,aAAavmE,EAAQ,KACjD4mE,EAAMR,EAAwBG,aAAa,IAAI34D,KAAQ,KAC7D,OAAOtP,EAAEmoE,OAASG,EAAIH,OAE3B,CACC7xD,KAAM,WACNkxD,SAAS,EACTC,SAAU,YACVxnD,MAAO,SAACve,GACJ,IAAKA,EACD,OAAO,EAGXwQ,EAAK61D,kBAAkBrmE,OAEjB1B,EAAI8nE,EAAwBG,aAAavmE,EAAQ,KACjD4mE,EAAMR,EAAwBG,aAAa,IAAI34D,KAAQ,KAC7D,OAAOtP,EAAEmoE,OAASG,EAAIH,KAAO,IAElC,CACC7xD,KAAM,WACNkxD,SAAS,EACTC,SAAU,YACVxnD,MAAO,SAACve,GACJ,IAAKA,EACD,OAAO,EAGXwQ,EAAK61D,kBAAkBrmE,OAEjB1B,EAAI8nE,EAAwBG,aAAavmE,EAAQ,KACjD4mE,EAAMR,EAAwBG,aAAa,IAAI34D,KAAQ,KAC7D,OAAOtP,EAAEmoE,OAASG,EAAIH,KAAO,IAElC,CACC7xD,KAAM,QACNkxD,SAAS,EACTC,SAAU,QACVxnD,MAAO,SAACve,GACJ,OAAkB,OAAXA,GAAmBA,IAAWgR,YAE1C,CACC4D,KAAM,WACNkxD,SAAS,EACTC,SAAU,YACVxnD,MAAO,SAACve,GACJ,OAAkB,OAAXA,GAAmBA,IAAWgR,aAE1CrP,OAAO6O,EAAKq1D,cAsDvB,OAjR6CryD,EAAAA,EAAAA,GA8N3B4yD,EAAAp2D,SAAd,WACI,OAAOhR,KAAKiR,YAAcjR,KAAKiR,UAAY,IAAIjR,OAQrConE,EAAAG,aAAd,SAA2BU,EAAYC,OAC7Bv1D,EAAM,CACRg1D,IAAK,KACLQ,MAAO,KACPC,aAAc,KACdC,QAAS,KACTX,MAAO,KACPY,QAAS,KACTb,KAAM,MAEV,OAAKQ,GAASC,IAGiB,GAA3BA,EAAWp4D,QAAQ,OACnB6C,EAAI80D,KAAOQ,EAAKM,eAEW,GAA3BL,EAAWp4D,QAAQ,OACnB6C,EAAI+0D,MAAQO,EAAKO,YAEU,GAA3BN,EAAWp4D,QAAQ,OACnB6C,EAAIg1D,IAAMM,EAAKF,WAEY,GAA3BG,EAAWp4D,QAAQ,OACnB6C,EAAIw1D,MAAQF,EAAKQ,YAEU,GAA3BP,EAAWp4D,QAAQ,OACnB6C,EAAI01D,QAAUJ,EAAKS,cAEQ,GAA3BR,EAAWp4D,QAAQ,OACnB6C,EAAI21D,QAAUL,EAAKU,cAEQ,GAA3BT,EAAWp4D,QAAQ,OACnB6C,EAAIy1D,aAAeH,EAAKW,oBAErBj2D,GAGHy0D,EAAAlnE,UAAAmnE,kBAAR,SAA0BrmE,GACtB,KAAMA,aAAkB4N,MACpB,MAAM,IAAIN,MAAM,mGA7QT84D,EAAAn2D,UAAqC,KAgRxDm2D,EAjRA,CAA6CR,IAwR7CiC,GAAA,SAAAh9C,GAGI,SAAAg9C,IAAA,IAAAr3D,EACIqa,EAAAjrB,KAAAZ,OAAOA,YACPwR,EAAKq1D,WAAa,CAAC,CACfjxD,KAAM,SACNkxD,SAAS,EACTC,SAAU,SACVxnD,MAAO,SAACve,EAAgB0b,GACpB,OAAO1b,IAAW0b,IAEvB,CACC9G,KAAM,eACNkxD,SAAS,EACTC,SAAU,YACVxnD,MAAO,SAACve,EAAgB0b,GACpB,OAAO1b,IAAW0b,IAEvB,CACC9G,KAAM,cACNkxD,SAAS,EACTC,SAAU,eACVxnD,MAAO,SAACve,EAAgB0b,GACpB,OAAgBA,EAAT1b,IAEZ,CACC4U,KAAM,WACNkxD,SAAS,EACTC,SAAU,YACVxnD,MAAO,SAACve,EAAgB0b,GACpB,OAAO1b,EAAS0b,IAErB,CACC9G,KAAM,uBACNkxD,SAAS,EACTC,SAAU,wBACVxnD,MAAO,SAACve,EAAgB0b,GACpB,OAAiBA,GAAV1b,IAEZ,CACC4U,KAAM,oBACNkxD,SAAS,EACTC,SAAU,qBACVxnD,MAAO,SAACve,EAAgB0b,GACpB,OAAO1b,GAAU0b,IAEtB,CACC9G,KAAM,QACNkxD,SAAS,EACTC,SAAU,QACVxnD,MAAO,SAACve,GACJ,OAAkB,OAAXA,GAAmBA,IAAWgR,WAAa+Q,MAAM/hB,KAE7D,CACC4U,KAAM,WACNkxD,SAAS,EACTC,SAAU,YACVxnD,MAAO,SAACve,GACJ,OAAkB,OAAXA,GAAmBA,IAAWgR,YAAc+Q,MAAM/hB,MAE9D2B,OAAO6O,EAAKq1D,cAMvB,OAnE+CryD,EAAAA,EAAAA,GAgE7Bq0D,EAAA73D,SAAd,WACI,OAAOhR,KAAKiR,YAAcjR,KAAKiR,UAAY,IAAIjR,OAhEpC6oE,EAAA53D,UAAuC,KAkE1D43D,EAnEA,CAA+CjC,IA0E/CkC,GAAA,SAAAj9C,GAGI,SAAAi9C,IAAA,IAAAt3D,EACIqa,EAAAjrB,KAAAZ,OAAOA,YACPwR,EAAKq1D,WAAa,CAAC,CACfjxD,KAAM,WACNkxD,SAAS,EACTC,SAAU,WACVxnD,MAAO,SAACve,EAAgB0b,EAAmBpL,OACjCy3D,EAASD,EAA0BE,gBAAgBtsD,EAAWpL,GAEpE,OAAmC,KADnCtQ,EAAS8nE,EAA0BE,gBAAgBhoE,EAAQsQ,IAC7CxB,QAAQi5D,KAE3B,CACCnzD,KAAM,iBACNkxD,SAAS,EACTC,SAAU,mBACVxnD,MAAO,SAACve,EAAgB0b,EAAmBpL,OACjCy3D,EAASD,EAA0BE,gBAAgBtsD,EAAWpL,GAEpE,OAAmC,KADnCtQ,EAAS8nE,EAA0BE,gBAAgBhoE,EAAQsQ,IAC7CxB,QAAQi5D,KAE3B,CACCnzD,KAAM,aACNkxD,SAAS,EACTC,SAAU,cACVxnD,MAAO,SAACve,EAAgB0b,EAAmBpL,OACjCy3D,EAASD,EAA0BE,gBAAgBtsD,EAAWpL,GAEpE,OADAtQ,EAAS8nE,EAA0BE,gBAAgBhoE,EAAQsQ,IAC7C23D,WAAWF,KAE9B,CACCnzD,KAAM,WACNkxD,SAAS,EACTC,SAAU,YACVxnD,MAAO,SAACve,EAAgB0b,EAAmBpL,OACjCy3D,EAASD,EAA0BE,gBAAgBtsD,EAAWpL,GAEpE,OADAtQ,EAAS8nE,EAA0BE,gBAAgBhoE,EAAQsQ,IAC7Coa,SAASq9C,KAE5B,CACCnzD,KAAM,SACNkxD,SAAS,EACTC,SAAU,SACVxnD,MAAO,SAACve,EAAgB0b,EAAmBpL,OACjCy3D,EAASD,EAA0BE,gBAAgBtsD,EAAWpL,GAEpE,OADAtQ,EAAS8nE,EAA0BE,gBAAgBhoE,EAAQsQ,MACzCy3D,IAEvB,CACCnzD,KAAM,eACNkxD,SAAS,EACTC,SAAU,YACVxnD,MAAO,SAACve,EAAgB0b,EAAmBpL,OACjCy3D,EAASD,EAA0BE,gBAAgBtsD,EAAWpL,GAEpE,OADAtQ,EAAS8nE,EAA0BE,gBAAgBhoE,EAAQsQ,MACzCy3D,IAEvB,CACCnzD,KAAM,QACNkxD,SAAS,EACTC,SAAU,QACVxnD,MAAO,SAACve,GACJ,OAAkB,OAAXA,GAAmBA,IAAWgR,WAA+B,IAAlBhR,EAAOL,SAE9D,CACCiV,KAAM,WACNkxD,SAAS,EACTC,SAAU,YACVxnD,MAAO,SAACve,GACJ,OAAkB,OAAXA,GAAmBA,IAAWgR,WAA6B,EAAhBhR,EAAOL,UAE9DgC,OAAO6O,EAAKq1D,cAiBvB,OA1F+CryD,EAAAA,EAAAA,GA4E7Bs0D,EAAA93D,SAAd,WACI,OAAOhR,KAAKiR,YAAcjR,KAAKiR,UAAY,IAAIjR,OAQrC8oE,EAAAE,gBAAd,SAA8Bl3D,EAAWR,GAGrC,OAFAQ,EAAIA,GAAK,GAEFR,GAAc,GAAKQ,GAAGI,cAAgBJ,GAvFlCg3D,EAAA73D,UAAuC,KAyF1D63D,EA1FA,CAA+ClC,OA0H/C,SAAAsC,KACIlpE,KAAA4V,KAAO,KACP5V,KAAA8mE,SAAU,EACV9mE,KAAA+mE,SAAW,QACX/mE,KAAAuf,MAAQ,SAACve,EAAa0b,GAClB,OAAOA,EAAUmyB,IAAI7tC,oBAO7B,SAAAmoE,IAAA,IAAA33D,EAAA,OAAAqa,GAAAA,EAAAhrB,MAAAb,KAAAU,YAAAV,YACIwR,EAAA+N,MAAQ,SAACve,EAAa0b,GAClB,OAAI1b,aAAkB4N,KACX8N,EAAUmyB,IAAI,IAAIjgC,KAAK5N,EAAOunE,cAAevnE,EAAOwnE,WAAYxnE,EAAO+mE,WAAWqB,eAEtF1sD,EAAUmyB,IAAI7tC,MAE7B,OAP8CwT,EAAAA,EAAAA,GAO9C20D,GAP8CD,ICvkBjCG,GAAyB,CAClC91D,SAAU,IAAIqM,mBCClB,SAAA0pD,mDAAgD,OAAZ90D,EAAAA,EAAAA,GAAY80D,GAAZ3pE,OCapC4pE,GAAA,WASI,SAAAA,EAAqBC,EAAkCC,EAAmD/qC,GAArF1+B,KAAAwpE,WAAAA,EAAkCxpE,KAAAypE,YAAAA,EAAmDzpE,KAAA0+B,UAAAA,EALlG1+B,KAAA0pE,SAAW,iBACX1pE,KAAA2pE,gBAAkB,IAAI56D,IAEtB/O,KAAA4pE,gBAA+B,IAAI56D,WAU3CxP,OAAAgC,eAAI+nE,EAAArpE,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAK0pE,cAShB,SAAmBG,GACf7pE,KAAK0pE,SAAWG,mCASbN,EAAArpE,UAAA4pE,qBAAP,SAA4BC,EAAeF,GAEvC,YAFuC,IAAAA,IAAAA,EAAAE,GACvC,KAAKJ,gBAAgBhpD,IAAIopD,EAAOF,GAChC,MASGN,EAAArpE,UAAA8pE,iBAAP,SAAwBD,GACpB,OAAO/pE,KAAK2pE,gBAAgBp9D,IAAIw9D,IAAUA,GASvCR,EAAArpE,UAAA+pE,WAAP,SAAkBlD,EAAkBzhD,EAAa4kD,GAC7C,QAD6C,IAAAA,IAAAA,EAAA,KACzCnD,IAAYzhD,EAaZ,MAAM,IAAIhX,MAAM,iFAZV67D,EAAUnqE,KAAKwpE,WAAWY,+BAA+B9kD,GAC/D,IAAK6kD,EACD,MAAM,IAAI77D,MAAM,gGAA+FgX,EAAG,MAItH,IADqBtlB,KAAKwpE,WAAWa,SAASC,EAAAA,gBAAgBC,aAAcJ,GAExE,MAAM,IAAI77D,MAAM,wDAAwDgX,EAAG,MAG/EtlB,KAAKwqE,SAASzD,EAAUzhD,EAAK4kD,IAa9BX,EAAArpE,UAAAuqE,mBAAP,SAA0B1D,EAAkB2D,EAAkBR,GAC1D,QAD0D,IAAAA,IAAAA,EAAA,KACtDnD,IAAY2D,EAGZ,MAAM,IAAIp8D,MAAM,kFAFhBtO,KAAK2qE,aAAa5D,EAAU2D,EAAUR,IAYvCX,EAAArpE,UAAA0qE,gBAAP,SAAuB7D,EAAkBmD,QAAA,IAAAA,IAAAA,EAAA,QAC/BW,EAAU7qE,KAAK8qE,cAAc/D,EAAUmD,GAC7C,OAAOlqE,KAAK4pE,gBAAgB/6B,IAAIg8B,IAS7BtB,EAAArpE,UAAA4qE,cAAP,SAAqB/D,EAAkBmD,GACnC,YADmC,IAAAA,IAAAA,EAAA,IAC5BA,EAAU,IAAMnD,GAMnBwC,EAAArpE,UAAAsqE,SAAR,SAAiBzD,EAAkBzhD,EAAa4kD,GAAhD,IAAA14D,EAAAxR,UAAgD,IAAAkqE,IAAAA,EAAA,QAEtCx9B,EADU1sC,KAAKypE,YAAYl9D,IAAI+Y,EAAK,CAAEylD,aAAc,SAC7BroC,UAAU,SAACvgC,GACpCqP,EAAKm5D,aAAa5D,EAAU5kE,EAAO+nE,IACpC,SAACznE,GACA,MAAM,IAAI6L,MAAM,iCAAiCgX,EAAG,YAAY7iB,EAAM04B,UACvE,WACCuR,EAAaZ,iBAOby9B,EAAArpE,UAAAyqE,aAAR,SAAqB5D,EAAkB5kE,EAAe+nE,GAClD,QADkD,IAAAA,IAAAA,EAAA,IAC9CnD,GAAY5kE,EAAO,CACnBnC,KAAKgrE,gCAEClpB,EAAM9hD,KAAK0+B,UAAUvZ,cAAc,OACzC28B,EAAImpB,UAAY9oE,MACV+oE,EAAMppB,EAAI2d,cAAc,OAE9B,GAAIyL,EAAK,KACCL,EAAU7qE,KAAK8qE,cAAc/D,EAAUmD,GAO7C,GALAgB,EAAItc,aAAa,KAAMic,GACvBK,EAAItc,aAAa,MAAO,IACxBsc,EAAItc,aAAa,sBAAuB,iBACxCsc,EAAItc,aAAa,YAAa,SAE1B5uD,KAAK4pE,gBAAgB/6B,IAAIg8B,GAAU,KAC7BM,EAAWnrE,KAAKorE,cAAc3L,cAAc,WAAWoL,EAAO,MACpE7qE,KAAKorE,cAActlD,YAAYqlD,GAGnCnrE,KAAKorE,cAAcxlD,YAAYslD,GAC/BlrE,KAAK4pE,gBAAgBz9D,IAAI0+D,MAQ7BtB,EAAArpE,UAAA8qE,0BAAR,WACShrE,KAAKorE,gBACNprE,KAAKorE,cAAgBprE,KAAK0+B,UAAUnG,gBAAgBknC,cAAc,sBAC7Dz/D,KAAKorE,gBACNprE,KAAKorE,cAAgBprE,KAAK0+B,UAAUvZ,cAAc,OAClDnlB,KAAKorE,cAAc9wC,UAAUnuB,IAAI,qBACjCnM,KAAK0+B,UAAUnG,gBAAgB3S,YAAY5lB,KAAKorE,sCArK/DpsD,EAAAA,WAAUvS,KAAA,CAAC,CACR63B,WAAY,oDAlBP+mC,EAAAA,oBACAC,EAAAA,8CAyB4E3mC,EAAAA,OAAMl4B,KAAA,CAACm4B,EAAAA,0LAT5F,GCFIuK,GAAU,EAEdo8B,GAAA,WA+FI,SAAAA,EAAoBC,EAAyBC,GAAzBzrE,KAAAwrE,IAAAA,EAAyBxrE,KAAAyrE,YAAAA,EApEtCzrE,KAAAsxC,SAAW,WAcXtxC,KAAA0rE,YAAa,EAUb1rE,KAAAoM,GAAK,YAAY+iC,KAkBjBnvC,KAAA2rE,QAAS,EA2BZ3rE,KAAKmQ,GAAKq7D,EACVxrE,KAAKq1B,KAAOr1B,KAAKyrE,YAAYG,eAC7B5rE,KAAKyrE,YAAY3B,qBAAqB,WAAY,kBAsI1D,OAhIIyB,EAAArrE,UAAAusC,SAAA,WACIzsC,KAAK6rE,mBAaTrsE,OAAAgC,eAAI+pE,EAAArrE,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKq1B,sCAahB71B,OAAAgC,eAAI+pE,EAAArrE,UAAA,YAAS,KAAb,WACI,OAAOF,KAAK2rE,wCAahBnsE,OAAAgC,eACI+pE,EAAArrE,UAAA,cAAW,KADf,WAEI,OAAQF,KAAK2rE,wCAajBnsE,OAAAgC,eACI+pE,EAAArrE,UAAA,eAAY,KADhB,WAEI,OAAOF,KAAK8rE,2CAahBtsE,OAAAgC,eAAI+pE,EAAArrE,UAAA,cAAW,KAAf,WACI,OAAOF,KAAK+mE,0CAchBvnE,OAAAgC,eAAI+pE,EAAArrE,UAAA,YAAS,KAAb,WACI,OAAIF,KAAKyrE,YAAYb,gBAAgB5qE,KAAK+mE,SAAU/mE,KAAKq1B,MAC9C,IAAMr1B,KAAKyrE,YAAYX,cAAc9qE,KAAK+mE,SAAU/mE,KAAKq1B,MAG7D,sCAaX71B,OAAAgC,eAAI+pE,EAAArrE,UAAA,WAAQ,KAAZ,WACI,OAAIF,KAAK+mE,SACD/mE,KAAKyrE,YAAYb,gBAAgB5qE,KAAK+mE,SAAU/mE,KAAKq1B,MAC9Cr1B,KAAK+rE,SAGT/rE,KAAKgsE,WAGThsE,KAAKisE,kDAMRV,EAAArrE,UAAA2rE,gBAAR,eACUhC,EAAY7pE,KAAKyrE,YAAYzB,iBAAiBhqE,KAAKq1B,MACzDr1B,KAAKmQ,GAAG0tB,cAAcvD,UAAUnuB,IAAI09D,GAEhC7pE,KAAK+mE,WAAa/mE,KAAKyrE,YAAYb,gBAAgB5qE,KAAK+mE,SAAU/mE,KAAKq1B,OACvEr1B,KAAKmQ,GAAG0tB,cAAcvD,UAAUnuB,IAAInM,KAAK+mE,+BArOpDt3B,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,WACVuiC,SAAA,wVApBgBzO,EAAAA,kBACXsoC,0CAuBJz2B,EAAAA,UAASrmC,KAAA,CAAC,aAAc,CAAEsmC,KAAMuQ,EAAAA,wCAGhCxQ,EAAAA,UAASrmC,KAAA,CAAC,mBAAoB,CAAEsmC,KAAMuQ,EAAAA,gCAGtCxQ,EAAAA,UAASrmC,KAAA,CAAC,WAAY,CAAEsmC,KAAMuQ,EAAAA,gCAc9BvW,EAAAA,YAAWtgC,KAAA,CAAC,sCAcZsgC,EAAAA,YAAWtgC,KAAA,CAAC,gCASZsgC,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,oBASAA,EAAAA,MAAKX,KAAA,CAAC,2BASNW,EAAAA,MAAKX,KAAA,CAAC,+BASNW,EAAAA,MAAKX,KAAA,CAAC,2BAUNW,EAAAA,MAAKX,KAAA,CAAC,6BA2DNsgC,EAAAA,YAAWtgC,KAAA,CAAC,kDAeZsgC,EAAAA,YAAWtgC,KAAA,CAAC,kBAuEjB8+D,EAxOA,GCRAW,GAAA,WAAA,SAAAA,KAYA,OALkBA,EAAAC,QAAd,WACI,MAAO,CACHC,SAAUF,wBATrBz+D,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC69D,IACf59D,QAAS,CAAC49D,IACV9yB,QAAS,CAACC,EAAAA,aAAc2zB,EAAAA,sBAIxB7+B,EAAAA,CADCtS,GAAgB,+KAMrBgxC,EAZA,GCII/8B,GAAU,MASV6f,QAAU,UACVsd,SAAW,WACXC,MAAQ,QACRC,KAAO,QAgBXC,GAAA,WA8QI,SAAAA,EAAmB7uC,GAAA59B,KAAA49B,WAAAA,EA5NZ59B,KAAA89D,UAAY,SAYZ99D,KAAAqvC,KAAO,MAYPrvC,KAAAsxC,SAAW,aAmBVtxC,KAAA0sE,MAAuB,QAaxB1sE,KAAAoM,GAAK,cAAc+iC,KAenBnvC,KAAA2sE,YAAa,EAkMxB,OAvHIntE,OAAAgC,eACWirE,EAAAvsE,UAAA,OAAI,KADf,WAEI,OAAOF,KAAK0sE,WAahB,SAAgBvqE,GACZ,OAAQA,GACJ,IAAK,QACL,IAAK,SACL,IAAK,QACDnC,KAAK0sE,MAAQvqE,EACb,MACJ,QACInC,KAAK0sE,MAAQ,0CAazBltE,OAAAgC,eAAIirE,EAAAvsE,UAAA,OAAI,KAAR,WACI,OAAIF,KAAK4sE,IACEC,GAAWN,MAGlBvsE,KAAK8sE,KACED,GAAWL,KAGlBxsE,KAAK+sE,SACEF,GAAWP,SAGfO,GAAW7d,yCAYtBxvD,OAAAgC,eAAIirE,EAAAvsE,UAAA,WAAQ,KAAZ,WACI,OAAQF,KAAK0W,MACT,KAAKm2D,GAAWN,MACZ,OAAOvsE,KAAKgtE,cAChB,KAAKH,GAAWP,SACZ,OAAOtsE,KAAKitE,iBAChB,KAAKJ,GAAWL,KACZ,OAAOxsE,KAAKktE,aAChB,QACI,OAAOltE,KAAKmtE,kDASjBV,EAAAvsE,UAAAusC,SAAP,WACIzsC,KAAKotE,gBAAkBptE,KAAKqtE,WAMzBZ,EAAAvsE,UAAAumD,gBAAP,WACIzmD,KAAK49B,WAAWC,cAAcvD,UACzBnuB,IAAI,eAAenM,KAAK0sE,MAAS,eAAe1sE,KAAK0W,OAMtD+1D,EAAAvsE,UAAAmtE,QAAR,WACI,OAAQrtE,KAAK0W,MACT,KAAKm2D,GAAWN,MACZ,MAAO,eACX,KAAKM,GAAWL,KACZ,MAAO,cACX,KAAKK,GAAWP,SACZ,MAAO,kBACX,QACI,MAAO,kBAaZG,EAAAvsE,UAAAotE,UAAP,WACI,MAAO,OAAOttE,KAAK4sE,IAAG,yBAzT7Bn9B,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,aACVuiC,SAAA,0fAxCAzO,EAAAA,6CAoDC6R,EAAAA,UAASrmC,KAAA,CAAC,kCAMVqmC,EAAAA,UAASrmC,KAAA,CAAC,kBAAmB,CAAEsmC,KAAMuQ,EAAAA,qCAMrCxQ,EAAAA,UAASrmC,KAAA,CAAC,gBAAiB,CAAEsmC,KAAMuQ,EAAAA,wCAMnCxQ,EAAAA,UAASrmC,KAAA,CAAC,mBAAoB,CAAEsmC,KAAMuQ,EAAAA,oCAMtCxQ,EAAAA,UAASrmC,KAAA,CAAC,eAAgB,CAAEsmC,KAAMuQ,EAAAA,iCAWlCvW,EAAAA,YAAWtgC,KAAA,CAAC,iCAYZsgC,EAAAA,YAAWtgC,KAAA,CAAC,+BAYZsgC,EAAAA,YAAWtgC,KAAA,CAAC,6CAcZsgC,EAAAA,YAAWtgC,KAAA,CAAC,yCAiBZsgC,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,0BAcA2/B,EAAAA,YAAWtgC,KAAA,CAAC,8BAA2B,CAAAiK,KACvCtJ,EAAAA,qBAaA2/B,EAAAA,YAAWtgC,KAAA,CAAC,gBAAa,CAAAiK,KACzBtJ,EAAAA,uBAaA2/B,EAAAA,YAAWtgC,KAAA,CAAC,qBAAkB,CAAAiK,KAC9BtJ,EAAAA,wBAYAA,EAAAA,oBAYAA,EAAAA,mBAYAA,EAAAA,oBAYAA,EAAAA,SAuHLq/D,EA3TA,GAgUAc,GAAA,WAAA,SAAAA,KAK+B,2BAL9B9/D,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC++D,IACf9+D,QAAS,CAAC8+D,IACVh0B,QAAS,CAACC,EAAAA,aAAcwzB,QAEGqB,EAL/B,GCtWIp+B,GAAU,MAGV6f,QAAU,UACVwe,KAAO,OACPC,QAAU,UACVC,QAAU,UACVC,MAAQ,SA0BZC,GAAA,WAAA,SAAAA,IAcW5tE,KAAAoM,GAAK,aAAa+iC,KAWlBnvC,KAAA0W,KAAsB,UAWtB1W,KAAAmC,MAAQ,GAwBRnC,KAAAqvC,KAAO,SAYPrvC,KAAAsxC,SAAW,YAYXtxC,KAAA6tE,MAAQ,QA4DnB,OAtDIruE,OAAAgC,eAAIosE,EAAA1tE,UAAA,kBAAe,KAAnB,WAYI,OARIF,KAAK8sE,KACK9sE,KAAK0W,KAAO,8BAAgC1W,KAAK8sE,KACpD9sE,KAAKmC,MACFnC,KAAK0W,KAAO,0BAA4B1W,KAAKmC,MAE7CnC,KAAK0W,KAAO,6DAWvBk3D,EAAA1tE,UAAA4tE,WAAP,yBACQC,EAAU,GAEd,OAAQC,GAAKhuE,KAAK0W,KAAKuxC,gBACnB,KAAK+lB,GAAKhf,SACCriD,EAAA,IACC3M,KAAKsxC,SAAQ,sBAAsB,EAD3Cy8B,IAGA,MACJ,KAAKC,GAAKR,MACCj/D,EAAA,IACCvO,KAAKsxC,SAAQ,mBAAmB,EADxCy8B,IAGA,MACJ,KAAKC,GAAKP,SACC/+D,EAAA,IACC1O,KAAKsxC,SAAQ,sBAAsB,EAD3Cy8B,IAGA,MACJ,KAAKC,GAAKN,SACC13C,EAAA,IACCh2B,KAAKsxC,SAAQ,sBAAsB,EAD3Cy8B,IAGA,MACJ,KAAKC,GAAKL,OACCt3C,EAAA,IACCr2B,KAAKsxC,SAAQ,oBAAoB,EADzCy8B,IAMR,OAAOA,uBA7Idt+B,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,YACVuiC,SAAA,gSAUC3C,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,oBAWAA,EAAAA,qBAWAA,EAAAA,oBAYAA,EAAAA,oBAYA2/B,EAAAA,YAAWtgC,KAAA,CAAC,+BAYZsgC,EAAAA,YAAWtgC,KAAA,CAAC,kCAYZsgC,EAAAA,YAAWtgC,KAAA,CAAC,sBA6DjBmhE,EAhJA,GAqJAK,GAAA,WAAA,SAAAA,KAMA,2BANCxgE,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACkgE,IACfjgE,QAAS,CAACigE,IACVn1B,QAAS,CAACC,EAAAA,aAAcwzB,QAG5B+B,EANA,GCxKaC,GAAgC,yBClB7CC,GAAA,WAWI,SAAAA,EACkDC,EACvC3sC,EAA4BjjB,GADWxe,KAAAouE,MAAAA,EACvCpuE,KAAAyhC,QAAAA,EAA4BzhC,KAAAwe,IAAAA,EAJ/Bxe,KAAAquE,YAAc,GACdruE,KAAA2uD,OAAS,GASV3uD,KAAAsxC,SAAW,4BAuEXtxC,KAAAqvC,KAAO,SAMlB,OAnEI7vC,OAAAgC,eAEW2sE,EAAAjuE,UAAA,QAAK,KAFhB,WAGI,OAAOF,KAAK2uD,QAAU3uD,KAAKouE,MAAMhiE,GAAK,eAW1C,SAAiBkT,GACbtf,KAAK2uD,OAASrvC,mCAWlB9f,OAAAgC,eAEW2sE,EAAAjuE,UAAA,aAAU,KAFrB,WAGI,OAAOF,KAAKquE,iBAWhB,SAAsB/uD,GAClBtf,KAAKquE,YAAc/uD,mCAsBvB6uD,EAAAjuE,UAAAusC,SAAA,WACIzsC,KAAKsuE,WAAatuE,KAAKouE,MAAMG,SAC7BvuE,KAAK6tE,MAAQ7tE,KAAKouE,MAAMhiE,GAAK,+BA3FpCqjC,EAAAA,UAAShjC,KAAA,CAAC,CAEPU,SAAU,2BACVuiC,SAAU,qGAML/K,EAAAA,OAAMl4B,KAAA,CAACyhE,aAZiBjtC,EAAAA,kBAAmB4L,EAAAA,uDAkB/CE,EAAAA,YAAWtgC,KAAA,CAAC,kDAWZW,EAAAA,OAAK,CAAAsJ,KACLq2B,EAAAA,YAAWtgC,KAAA,CAAC,uCAyBZW,EAAAA,OAAK,CAAAsJ,KACLq2B,EAAAA,YAAWtgC,KAAA,CAAC,sCAgCZW,EAAAA,OAAK,CAAAsJ,KACLq2B,EAAAA,YAAWtgC,KAAA,CAAC,gBAOjB0hE,EAhGA,GCKAK,GAAA,WAAA,SAAAA,IAMWxuE,KAAAsxC,SAAW,oCACtB,2BAPCpkC,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,kEAGT4/B,EAAAA,YAAWtgC,KAAA,CAAC,8CAEjB+hE,EAPA,GAYAC,GAAA,WAAA,SAAAA,IAMWzuE,KAAAsxC,SAAW,0CACtB,2BAPCpkC,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,wEAGT4/B,EAAAA,YAAWtgC,KAAA,CAAC,oDAEjBgiE,EAPA,GAYAC,GAAA,WAAA,SAAAA,KAKA,2BALCxhE,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,+BAGduhE,EALA,MCTW,UACA,UACC,sBAkJR,SAAAC,EAAkEP,EAAqC5vD,EAC/Fof,GAD0D59B,KAAAouE,MAAAA,EAAqCpuE,KAAAwe,IAAAA,EAC/Fxe,KAAA49B,WAAAA,EAzIA59B,KAAA4uE,eAAgB,EAQjB5uE,KAAAoM,GAAK,GAiCLpM,KAAA6uE,GAAK,IAkBL7uE,KAAAqvC,KAAO,UAwBPrvC,KAAA8uE,aAA8BC,GAgB9B/uE,KAAAgvE,cAAgB,IAAIjoD,EAAAA,aAMnB/mB,KAAAsxC,SAAW,8BA6BZtxC,KAAAuvC,UAAW,EAIbvvC,KAAKoM,GAAQpM,KAAKouE,MAAMhiE,GAAE,UAqDnC,OAlLI5M,OAAAgC,eACWmtE,EAAAzuE,UAAA,eAAY,KAOvB,WACI,OAAOF,KAAK4uE,mBAThB,SACwBtvD,GACpBtf,KAAK4uE,cAAa,mCAiDtBpvE,OAAAgC,eAAWmtE,EAAAzuE,UAAA,WAAQ,KAAnB,WACI,OAAOF,KAAKouE,MAAMhiE,oCA6CrB5M,OAAAgC,eACWmtE,EAAAzuE,UAAA,aAAU,KADrB,WAEO,OAAQF,KAAKouE,MAAMriC,2CAoCnB4iC,EAAAzuE,UAAA+uE,SAJP,SAIgBh7B,GACRj0C,KAAKuvC,SACN0E,EAAI7R,mBAGPpiC,KAAKgvE,cAAc/1D,KAAK,CAAEunB,MAAOyT,EAAKm6B,MAAOpuE,KAAKouE,QAClDpuE,KAAKouE,MAAM5hE,OAAOynC,GAClBA,EAAIpM,mBAKF8mC,EAAAzuE,UAAAgvE,UADP,SACiB1uC,GACTA,EAAM2uC,SACNnvE,KAAKouE,MAAMgB,OAAO5uC,GAClBxgC,KAAKgvE,cAAc/1D,KAAK,CAAEunB,MAAOA,EAAO4tC,MAAOpuE,KAAKouE,UAMpDO,EAAAzuE,UAAAmvE,WADP,SACkB7uC,GACXA,EAAM2uC,SACNnvE,KAAKouE,MAAMkB,SAAS9uC,GACpBxgC,KAAKgvE,cAAc/1D,KAAK,CAAEunB,MAAOA,EAAO4tC,MAAOpuE,KAAKouE,UAO3D5uE,OAAAgC,eAAWmtE,EAAAzuE,UAAA,oBAAiB,KAA5B,WACG,OAAQF,KAAK8uE,cACT,KAAA,GACI,MAAO,0CACX,KAAA,GACI,MAAO,wCACX,KAAA,GACI,MAAO,yCACX,QACI,MAAO,yDAlMtBr/B,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,6BACVuiC,SAAA,syBA4Ia6/B,EAAAA,MAAI,CAAA74D,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAACyhE,aAtK5BrhC,EAAAA,yBACA5L,EAAAA,oDA0CC2lB,EAAAA,aAAYn6C,KAAA,CAACiiE,gBA0Bb3hC,EAAAA,YAAWtgC,KAAA,CAAC,oBAAiB,CAAAiK,KAC7BtJ,EAAAA,oBAiBA2/B,EAAAA,YAAWtgC,KAAA,CAAC,cAAW,CAAAiK,KACvBtJ,EAAAA,4BAwBAA,EAAAA,6BAgBAkc,EAAAA,yBAMCyjB,EAAAA,YAAWtgC,KAAA,CAAC,yDAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,iEAsBbW,EAAAA,OAAK,CAAAsJ,KACLq2B,EAAAA,YAAWtgC,KAAA,CAAC,yDAWXY,EAAAA,aAAYZ,KAAA,CAAC,gBAAiB,CAAC,YAAS,CAAAiK,KACxCrJ,EAAAA,aAAYZ,KAAA,CAAC,gBAAiB,CAAC,YAAS,CAAAiK,KACxCrJ,EAAAA,aAAYZ,KAAA,CAAC,mBAAoB,CAAC,YAAS,CAAAiK,KAC3CrJ,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,8BAYxBY,EAAAA,aAAYZ,KAAA,CAAC,wBAAyB,CAAC,+BAStCY,EAAAA,aAAYZ,KAAA,CAAC,sBAAuB,CAAC,cAuB3CkiE,KC9MIx/B,GAAU,gBA6HV,SAAAqgC,EAAoBhxD,EAAgCke,GAAhC18B,KAAAwe,IAAAA,EAAgCxe,KAAA08B,QAAAA,EAhF7C18B,KAAAyvE,kBAAuC,CAC1C11C,cAAehuB,GACfiuB,eAAgBhuB,IAgBbhM,KAAAoM,GAAK,uBAAuB+iC,KAM5BnvC,KAAAsxC,SAAW,sBAcXtxC,KAAA+rC,WAAY,EAiBZ/rC,KAAA0vE,YAAc,IAAI3oD,EAAAA,aAiBlB/mB,KAAA2vE,WAAa,IAAI5oD,EAAAA,aA4H5B,OAvHIvnB,OAAAgC,eAAWguE,EAAAtvE,UAAA,WAAQ,KAAnB,WACI,OAAOF,KAAKunB,OAAYvnB,KAAKoM,GAAE,UAAY,oCAiBvCojE,EAAAtvE,UAAAogC,kBAAR,SAA0BsvC,GACtB,GAAK5vE,KAAK2lB,KAAV,KAGMzmB,EAAYmmE,EAAAA,aAAarlE,KAAKyvE,kBAAkB11C,eAEhD6I,EADmB5iC,KAAK08B,QAAQoG,MAAM5jC,GACCiB,OAAOH,KAAK2lB,KAAK8b,QAAQ5D,eAEtE+E,EAAoBQ,OAAO,WACvBwsC,IACAhtC,EAAoBS,UAGxBT,EAAoBgB,SAGhB4rC,EAAAtvE,UAAA4gC,mBAAR,SAA2B8uC,GACvB,GAAK5vE,KAAK2lB,KAAV,KAGMzmB,EAAYmmE,EAAAA,aAAarlE,KAAKyvE,kBAAkBz1C,gBAEhDqE,EADmBr+B,KAAK08B,QAAQoG,MAAM5jC,GACEiB,OAAOH,KAAK2lB,KAAK8b,QAAQ5D,eACvEQ,EAAqB+E,OAAO,WACxBwsC,IACAvxC,EAAqBgF,UAGzBhF,EAAqBuF,SAazB4rC,EAAAtvE,UAAAovE,SAAA,SAASr7B,GAAT,IAAAziC,EAAAxR,KACQA,KAAK+rC,WAGT/rC,KAAK8gC,mBACD,WACItvB,EAAKk+D,YAAYz2D,KAAK,CAAEunB,MAAOyT,EAAKm6B,MAAO58D,IAC3CA,EAAKu6B,WAAY,KAe7ByjC,EAAAtvE,UAAAkvE,OAAA,SAAOn7B,GAAP,IAAAziC,EAAAxR,KACSA,KAAK+rC,YAGV/rC,KAAK+rC,WAAY,EACjB/rC,KAAKwe,IAAIyhB,gBACTjgC,KAAKsgC,kBACD,WACI9uB,EAAKm+D,WAAW12D,KAAK,CAAEunB,MAAOyT,EAAKm6B,MAAO58D,QAetDg+D,EAAAtvE,UAAAsM,OAAA,SAAOynC,GACCj0C,KAAK+rC,UACL/rC,KAAK4M,KAAKqnC,GAEVj0C,KAAK6M,MAAMonC,IAInBu7B,EAAAtvE,UAAA0M,KAAA,SAAKqnC,GACDj0C,KAAKovE,OAAOn7B,IAEhBu7B,EAAAtvE,UAAA2M,MAAA,SAAMonC,GACFj0C,KAAKsvE,SAASr7B,wBAxOrBxE,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,sBACVuiC,SAAA,kJACA9hC,UAAW,CAAC,CAAE84C,QAASwnB,GAA+BvnB,YAAa6oB,iDAxBnE3iC,EAAAA,yBASKnI,EAAAA,+DAkDJt3B,EAAAA,kBAiBA2/B,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,wBAMA2/B,EAAAA,YAAWtgC,KAAA,CAAC,gDAcZW,EAAAA,2BAiBAkc,EAAAA,2BAiBAA,EAAAA,qBAcAs9B,EAAAA,aAAYn6C,KAAA,CAACq6C,EAAAA,WAAW,WAAM,OAAAqnB,KAAiC,CAAEp7B,KAAM+T,EAAAA,WAAW,WAAM,OAAAqnB,uBAMxFvnB,EAAAA,aAAYn6C,KAAA,CAACq6C,EAAAA,WAAW,WAAM,OAAA6nB,KAAmC,CAAE57B,KAAM+T,EAAAA,WAAW,WAAM,OAAA6nB,UAyG/Fa,KCnPAK,GAAA,WAAA,SAAAA,KA4BA,2BA5BCpiE,EAAAA,SAAQhB,KAAA,CAAC,CACRiB,aAAc,CACZ8hE,GACAb,GACAR,GACAM,GACAD,GACAE,IAEF7pB,gBAAiB,GAEjBl3C,QAAS,CACP6hE,GACAb,GACAR,GACAM,GACAD,GACEE,IAEJj2B,QAAS,CACPC,EAAAA,aACAknB,GACAsM,GACAnd,GACAwe,QAIJsC,EA5BA,GCZAC,GAAA,WAAA,SAAAA,KAIA,2BAJC5iE,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,yBAGd2iE,EAJA,GCmCAC,GAAA,WAoII,SAAAA,EAAmBnyC,GAAA59B,KAAA49B,WAAAA,EApGZ59B,KAAAq9B,SAAW,IAAItW,EAAAA,aAcf/mB,KAAAo9B,UAAY,IAAIrW,EAAAA,aAchB/mB,KAAAu9B,SAAW,IAAIxW,EAAAA,aAcf/mB,KAAAs9B,UAAY,IAAIvW,EAAAA,aAmJ3B,OAhJIvnB,OAAAgC,eAAWuuE,EAAA7vE,UAAA,qBAAkB,KAA7B,WACI,OAAQF,KAAKgwE,uDASjBxwE,OAAAgC,eACWuuE,EAAA7vE,UAAA,oBAAiB,KAD5B,WAEI,OAAOF,KAAKiwE,mBAAqBjwE,KAAKiwE,mBAAqBjwE,KAAKkwE,gBAAgBT,uBAWpF,SAA6B33C,GACzB93B,KAAKiwE,mBAAqBn4C,mCAS9Bt4B,OAAAgC,eAAWuuE,EAAA7vE,UAAA,YAAS,KAApB,WACI,OAAOF,KAAKkwE,gBAAgBnkC,2CAShCvsC,OAAAgC,eAAWuuE,EAAA7vE,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAK49B,WAAWC,+CAM3Br+B,OAAAgC,eACWuuE,EAAA7vE,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAK+rC,UAAY,GAAK,yCAmB1BgkC,EAAA7vE,UAAA0M,KAAP,SAAY4zB,GACRxgC,KAAKmwE,aAAe,CAAEC,OAAQpwE,KAAMwgC,MAAKA,OACnC6vC,EAAc,CAChBD,OAAQpwE,KACRwgC,MAAKA,EACL5nB,QAAQ,GAEZ5Y,KAAKo9B,UAAUnkB,KAAKo3D,GAChBA,EAAYz3D,QAGhB5Y,KAAKkwE,gBAAgBtjE,KAAK4zB,IAiBvBuvC,EAAA7vE,UAAA2M,MAAP,SAAa2zB,GACTxgC,KAAKmwE,aAAe,CAAEC,OAAQpwE,KAAMwgC,MAAKA,OACnC8vC,EAAc,CAChBF,OAAQpwE,KACRwgC,MAAKA,EACL5nB,QAAQ,GAEZ5Y,KAAKs9B,UAAUrkB,KAAKq3D,GAChBA,EAAY13D,QAGhB5Y,KAAKkwE,gBAAgBrjE,MAAM2zB,IAiB/BuvC,EAAA7vE,UAAAsM,OAAA,SAAOg0B,GACCxgC,KAAK+rC,UACL/rC,KAAK4M,KAAK4zB,GAEVxgC,KAAK6M,MAAM2zB,IAKZuvC,EAAA7vE,UAAAqwE,qBAAP,WACIvwE,KAAKq9B,SAASpkB,KAAKjZ,KAAKmwE,eAIrBJ,EAAA7vE,UAAAswE,sBAAP,WACIxwE,KAAKu9B,SAAStkB,KAAKjZ,KAAKmwE,mCA3N/B1gC,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,aACVuiC,SAAA,8zCAxCkEzO,EAAAA,uDA8CjE6R,EAAAA,UAASrmC,KAAA,CAAC,iDAGVm6C,EAAAA,aAAYn6C,KAAA,CAACqjE,wBAMblpB,EAAAA,aAAYn6C,KAAA,CAAC8+D,sBAcbjiD,EAAAA,0BAcAA,EAAAA,yBAcAA,EAAAA,0BAcAA,EAAAA,kCAcAlc,EAAAA,4BAwCA2/B,EAAAA,YAAWtgC,KAAA,CAAC,oBA8FjBsjE,EA7NA,GAkOAU,GAAA,WAAA,SAAAA,KAK+B,2BAL9BhjE,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACqiE,GAAoBD,IACnCniE,QAAS,CAACoiE,GAAoBD,IAC9Br3B,QAAS,CAACC,EAAAA,aAAcm3B,GAAyB3D,GAAend,GAAiB6Q,QAEtD6Q,EAL/B,OC9OmCC,WAAA,EAAYphB,SAAA,iEAC3CngB,GAAU,EAsBdwhC,GAAA,SAAA9kD,GA0MI,SAAA8kD,EAAoBC,EAAiC5tC,EACE2pB,GADvD,IAAAn7C,EAEQqa,EAAAjrB,KAAAZ,KAAM2sD,IAAuB3sD,YAFjBwR,EAAAo/D,KAAAA,EAAiCp/D,EAAAwxB,UAAAA,EACExxB,EAAAm7C,uBAAAA,EApM/Cn7C,EAAAw+B,WAAY,EACVx+B,EAAAq/D,qBAAuB,IAAI9zC,EAAAA,QAC3BvrB,EAAAs/D,mBAAqB,IAAI/zC,EAAAA,QAoB5BvrB,EAAApF,GAAK,mBAAmB+iC,KAqCf39B,EAAAu/D,gBAAiB,EAmD1Bv/D,EAAAw/D,gBAA4B,GA6ClBx/D,EAAAy/D,SAAW,IAAIlqD,EAAAA,aAiBfvV,EAAA0/D,WAAa,IAAInqD,EAAAA,eAoMtC,OAlX6CvS,EAAAA,EAAAA,GAYzChV,OAAAgC,eAAWmvE,EAAAzwE,UAAA,UAAO,KAAlB,WACI,OAAAwC,EAAW1C,KAAKmxE,YAAY9gE,UAAcrQ,KAAKoxE,gBAAgB/gE,4CAwBnE7Q,OAAAgC,eAAamvE,EAAAzwE,UAAA,sBAAmB,KAchC,WACI,OAAOF,KAAKqxE,0BAfhB,SAAiClvE,GAC7BnC,KAAKqxE,qBAAuBlvE,GAASnC,KAAKqxE,sDAyD9C7xE,OAAAgC,eACWmvE,EAAAzwE,UAAA,WAAQ,KADnB,WAEI,OAAOF,KAAKgwC,eAEhB,SAAoB7tC,GAApB,IAAAqP,EAAAxR,KACQA,KAAKgwC,YAAc7tC,IACnBnC,KAAKgwC,UAAY7tC,EAEbnC,KAAKmxE,aAAenxE,KAAKoxE,iBACzBpxE,KAAKsxE,QAAQphE,QAAQ,SAAC3Q,GAAM,OAAAA,EAAEgwC,SAAW/9B,EAAKw+B,8CAqB1DxwC,OAAAgC,eAAamvE,EAAAzwE,UAAA,YAAS,KAatB,WACI,OAAOF,KAAKuxE,YAAcC,GAAqBliB,SAAWkiB,GAAqBd,gBAdnF,SAAuBvuE,GACnBnC,KAAKuxE,YAAcpvE,IAAUqvE,GAAqBliB,0CAiEtD9vD,OAAAgC,eAAWmvE,EAAAzwE,UAAA,aAAU,KAArB,WACI,OAAOF,KAAKuxE,6CAoBhB/xE,OAAAgC,eAAImvE,EAAAzwE,UAAA,kBAAe,KAAnB,WAAA,IAAAsR,EAAAxR,KACI,OAAOA,KAAKsxE,QAAQ76D,OAAO,SAAClX,EAAGiB,GAC3B,OAA4C,IAArCgR,EAAKw/D,gBAAgBlhE,QAAQtP,sCAiBrCmwE,EAAAzwE,UAAAuxE,aAAP,SAAoBj/D,GAApB,IAAAhB,EAAAxR,KACI,KAAIwS,GAASxS,KAAKsxE,QAAQ3wE,QAAU6R,EAAQ,GAA5C,KAIMkuD,EAAS1gE,KAAKsxE,QAAQ9+D,GACtBk/D,EAAgBhR,EAAO7iC,cAE7B,IAAI6zC,EAAcp3C,UAAUwD,SAAS,wBAArC,CAIA99B,KAAKgxE,gBAAgBxuE,KAAKgQ,GAC1BkuD,EAAO9lD,UAAW,EAElB5a,KAAKgjC,UAAU4rB,aAAa8iB,EAAe,eAAgB,QAC3D1xE,KAAKgjC,UAAUurB,SAASmjB,EAAe,oCAEvC1xE,KAAKixE,SAASh4D,KAAK,CAAEynD,OAAQA,EAAQluD,MAAOA,QAEtCm/D,EAAqB3xE,KAAKmxE,YAAY9gE,UAAUP,QAAQ4wD,IAClC,IAAxBiR,IACA3xE,KAAKmzB,OAAOw+C,GAAoB/2D,UAAW,IAI1C5a,KAAK+wE,gBAAgD,EAA9B/wE,KAAKgxE,gBAAgBrwE,QAC7CX,KAAKsxE,QAAQphE,QAAQ,SAAC3Q,EAAGiB,GACjBA,IAAMgS,IAA8C,IAArChB,EAAKw/D,gBAAgBlhE,QAAQtP,IAC5CgR,EAAKogE,eAAepxE,QAkB7BmwE,EAAAzwE,UAAA0xE,eAAP,SAAsBp/D,GAClB,KAAIA,GAASxS,KAAKsxE,QAAQ3wE,QAAU6R,EAAQ,GAA5C,KAIMkuD,EAAS1gE,KAAKsxE,QAAQ9+D,GACtBk/D,EAAgBhR,EAAO7iC,cAE7B,IAAI6zC,EAAcp3C,UAAUwD,SAAS,wBAArC,CAIA99B,KAAKgxE,gBAAgBj6D,OAAO/W,KAAKgxE,gBAAgBlhE,QAAQ0C,GAAQ,GACjEkuD,EAAO9lD,UAAW,EAElB5a,KAAKgjC,UAAU4rB,aAAa8iB,EAAe,eAAgB,SAC3D1xE,KAAKgjC,UAAU6rB,YAAY6iB,EAAe,oCAE1C1xE,KAAKkxE,WAAWj4D,KAAK,CAAEynD,OAAQA,EAAQluD,MAAOA,QAExCm/D,EAAqB3xE,KAAKmxE,YAAY9gE,UAAUP,QAAQ4wD,IAClC,IAAxBiR,IACA3xE,KAAKmzB,OAAOw+C,GAAoB/2D,UAAW,MAO5C+1D,EAAAzwE,UAAAqgE,mBAAP,WAAA,IAAA/uD,EAAAxR,KACIA,KAAKoxE,gBAAgBlhE,QAAS,SAACwwD,GACtBA,EAAOvU,iBACRuU,EAAO9U,eAAiBp6C,EAAKo6C,mBAQlC+kB,EAAAzwE,UAAAumD,gBAAP,WAAA,IAAAj1C,EAAAxR,KACU6xE,EAAc,WAEhBrgE,EAAKq/D,qBAAqB3uE,OAE1BsP,EAAKw/D,gBAAgBj6D,OAAO,EAAGvF,EAAKw/D,gBAAgBrwE,QAGpD6Q,EAAK8/D,QAAQphE,QAAQ,SAACwwD,EAAQluD,OACpBk/D,EAAgBhR,EAAO7iC,cAEzBrsB,EAAK+9B,WACLmxB,EAAOnxB,UAAW,IAGjBmxB,EAAOnxB,UAAYmxB,EAAO9lD,UAC3BpJ,EAAKigE,aAAaj/D,GAGtBkuD,EAAOpS,YAAY9rB,KAAKC,EAAAA,UAAUjxB,EAAKq/D,uBAAuBnuC,UAAU,SAAChF,GAAO,OAAAlsB,EAAKsgE,cAAcp0C,EAAIlrB,KACvGhB,EAAKwxB,UAAUurB,SAASmjB,EAAe,6BAI/C1xE,KAAKmxE,YAAYp0B,QAAQva,KAAKC,EAAAA,UAAUziC,KAAK8wE,qBAAqBpuC,UAAU,WAAM,OAAAmvC,MAClF7xE,KAAKoxE,gBAAgBr0B,QAAQva,KAAKC,EAAAA,UAAUziC,KAAK8wE,qBAAqBpuC,UAAU,WAAM,OAAAmvC,MACtFA,IAEA7xE,KAAK4wE,KAAK3wC,iBAMP0wC,EAAAzwE,UAAAkkC,YAAP,WACIpkC,KAAK6wE,qBAAqB3uE,OAC1BlC,KAAK6wE,qBAAqBxsC,WAE1BrkC,KAAK8wE,mBAAmB5uE,OACxBlC,KAAK8wE,mBAAmBzsC,YAMrBssC,EAAAzwE,UAAA4xE,cAAP,SAAqBtxC,EAAOhgC,IACiB,IAArCR,KAAKgxE,gBAAgBlhE,QAAQtP,GAC7BR,KAAK4xE,eAAepxE,GAEpBR,KAAKyxE,aAAajxE,wBApX7BivC,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,kBACVuiC,SAAA,szBA7CA7C,EAAAA,yBASAiiB,EAAAA,6CA6OKhiB,EAAAA,UAAQ,CAAAp2B,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAAC6+C,8CAhMvBymB,EAAAA,aAAYtlE,KAAA,CAAC2hD,6BACbvH,EAAAA,gBAAep6C,KAAA,CAAC2hD,gBAehBrhB,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,mCAcAA,EAAAA,8BAwBAA,EAAAA,sBA2BAA,EAAAA,wBAOAA,EAAAA,yBA8BAA,EAAAA,wBAgCAkc,EAAAA,2BAiBAA,EAAAA,UAoMLqnD,EAvXA,CAK6CnlB,IA4X7CwmB,GAAA,WAAA,SAAAA,KAOA,2BAPCvkE,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACijE,IACfhjE,QAAS,CAACgjE,IACVl4B,QAAS,CAACsW,GAAiBrW,EAAAA,aAAcknB,GAAiBsM,QAI9D8F,EAPA,OC5aIC,MAAA,EACAC,OAAA,EACAC,QAAA,EACAC,SAAA,EACAC,SAAA,EACAC,SAAA,6JCTEC,GAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAG3D,SAAgBnjE,GAAMoT,EAAWgwD,EAAMC,QAAjB,IAAAjwD,IAAAA,EAAA,QAAiB,IAAAiwD,IAAAA,EAAA,GAInC,QAHM9/D,EAAM,GACN+/D,EAAOF,IAASxgE,UAAa,EAAIwQ,EACjCD,EAAOiwD,IAASxgE,UAAawQ,EAAQgwD,EAClChyE,EAAIkyE,EAAKD,EAAO,EAAQlwD,EAAJ/hB,EAAUA,EAAI+hB,EAAK/hB,GAAKiyE,EACjD9/D,EAAInQ,KAAKhC,GAEb,OAAOmS,EAUX,SAAgBggE,GAAOlL,GACnB,OAAQA,EAAO,GAAM,IAAQA,EAAO,KAAQ,GAAOA,EAAO,KAAQ,GAGtE,SAAgBmL,GAAQnL,EAAcC,EAAeC,GACjD,OAAO,IAAI/4D,KAAK64D,EAAMC,EAAOC,GAAKkL,SAWtC,SAAgBC,GAAWrL,EAAcC,GACrC,GAAKA,EAAQ,GAAe,GAARA,EAChB,MAAM,IAAIp5D,MAAM,+BAEdq5D,EAAMiL,GAAQnL,EAAMC,EAAO,GAC7BqL,EAAQR,GAAM7K,GAIlB,OA5Ca,IAyCRA,GAAwBiL,GAAOlL,IAChCsL,IAEG,CAACpL,EAAKoL,GAGjB,SAAgBC,GAAe/K,EAAYgL,eAEjCC,GADNjL,EAAO,IAAIr5D,KAAKq5D,EAAKM,cAAeN,EAAKO,WAAYP,EAAKF,YACpCl5D,cAEtB,IAAyB,IAAAskE,EAAA3kE,EAAAykE,GAAMG,EAAAD,EAAAjxE,QAAAkxE,EAAAhxE,KAAAgxE,EAAAD,EAAAjxE,OAAE,CAA5B,IAAMm5B,EAAU+3C,EAAAjxE,MACXkxE,EAAUh4C,EAAWi4C,UAAYj4C,EAAWi4C,UAAU18D,IACxD,SAAAxV,GAAK,OAAA,IAAIwN,KAAKxN,EAAEmnE,cAAennE,EAAEonE,WAAYpnE,EAAE2mE,aAAc/1D,UACjE,OAAQqpB,EAAW3kB,MACf,KAAM68D,GAAmB,MACrB,GAAIL,EAAWG,EAAQ,GAAGxkE,UACtB,OAAO,EAGX,MACJ,KAAM0kE,GAAoB,OACtB,GAAIL,EAAWG,EAAQ,GAAGxkE,UACtB,OAAO,EAGX,MACJ,KAAM0kE,GAAqB,YACjBC,EAASH,EAAQz8D,IAAI,SAAAtX,GAAK,OAAAA,EAAEuP,YAC5B4T,EAAMH,KAAKG,IAAI+wD,EAAO,GAAIA,EAAO,IACjCjxD,EAAMD,KAAKC,IAAIixD,EAAO,GAAIA,EAAO,IACvC,GAAgB/wD,GAAZywD,GAAmBA,GAAY3wD,EAC/B,OAAO,EAGX,MACJ,KAAMgxD,GAAsB,aAClBE,EAAYJ,EAAQz8D,IAAI,SAAAtX,GAAK,OAAAA,EAAEuP,gBACrC,IAA+B,IAAA6kE,EAAAllE,EAAAilE,GAASE,EAAAD,EAAAxxE,QAAAyxE,EAAAvxE,KAAAuxE,EAAAD,EAAAxxE,OAAE,CACtC,GAAIgxE,IADmBS,EAAAxxE,MAEnB,OAAO,uGAIf,MACJ,KAAMoxE,GAAsB,SAExB,GADYtL,EAAK4K,SACP,GAAM,EACZ,OAAO,EAGX,MACJ,KAAMU,GAAsB,SAExB,GADgBtL,EAAK4K,SACP,GAAM,EAChB,OAAO,EAGX,MACJ,QACI,OAAO,wGAInB,OAAO,UA+BPe,OAAA,EACAC,OAAA,EACAC,QAAA,EACAC,UAAA,EACAC,SAAA,EACAC,OAAA,EACAC,SAAA,oLAGJ,IAAAC,GAAA,WAII,SAAAA,EAAYC,QAAA,IAAAA,IAAAA,EAAkCC,GAAST,QACnD5zE,KAAKs0E,cAAgBF,EAmM7B,OAhMI50E,OAAAgC,eAAW2yE,EAAAj0E,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAKs0E,cAAgB,OAGhC,SAAwBnyE,GACpBnC,KAAKs0E,cAAgBnyE,mCAclBgyE,EAAAj0E,UAAAq0E,SAAP,mBACU5hE,EAAM,OACZ,IAAgB,IAAApE,EAAAC,EAAAY,GAAMpP,KAAKo0E,aAAcp0E,KAAKo0E,aAAe,IAAE1lE,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAA5D,IAAM1B,EAACkO,EAAAvM,MACRwQ,EAAInQ,KAAKhC,EAAI,wGAEjB,OAAOmS,GAcJwhE,EAAAj0E,UAAAs0E,WAAP,SAAkB/M,EAAcC,EAAe+M,gBAAA,IAAAA,IAAAA,GAAA,OACvCxM,EAAO,IAAIr5D,KAAK64D,EAAMC,EAAO,GAC7BgN,GAAQzM,EAAK4K,SAAW7yE,KAAKo0E,cAAgB,EAC7CM,EAAO,IACPA,EAAO,EAAIpyD,KAAKukB,IAAI6tC,IAExBzM,EAAOjoE,KAAK20E,UAAU1M,EAAM,OAAQyM,GAIpC,QAFIvyE,EADEwQ,EAAM,KAUR,GALAxQ,EAAQnC,KAAK40E,sBAAsB3M,EAAMR,EAAMC,GAC/C/0D,EAAInQ,KAAKL,IAET8lE,EAAOjoE,KAAK20E,UAAU1M,EAAM,MAAO,IAEzBO,aAAed,GAAWO,EAAK4K,WAAa7yE,KAAKo0E,aAAe,CACtE,GAAIK,GAAa9hE,EAAIhS,QAAU,OAC3B,IAAgB,IAAA4N,EAAAC,EAAAY,GAAM,EAAG,IAAEV,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAAjBwM,EAAAvM,MACRA,EAAQnC,KAAK40E,sBAAsB3M,EAAMR,EAAMC,GAC/C/0D,EAAInQ,KAAKL,GACT8lE,EAAOjoE,KAAK20E,UAAU1M,EAAM,MAAO,wGAG3C,MAGR,OAAOt1D,GAaJwhE,EAAAj0E,UAAA20E,mBAAP,SAA0BpN,EAAcC,EAAe+M,gBAAA,IAAAA,IAAAA,GAAA,OAC7CK,EAAQ90E,KAAKw0E,WAAW/M,EAAMC,EAAO+M,GACrC9hE,EAAM,OACZ,IAAgB,IAAApE,EAAAC,EAAAY,GAAM,EAAG0lE,EAAMn0E,OAAQ,IAAE+N,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAAtC,IAAM1B,EAACkO,EAAAvM,MACRwQ,EAAInQ,KAAKsyE,EAAMpyD,MAAMliB,EAAGA,EAAI,yGAEhC,OAAOmS,GAGJwhE,EAAAj0E,UAAAy0E,UAAP,SAAiB1M,EAAY3W,EAAkByjB,OACrCC,EAAM,IAAIpmE,KAAKq5D,GAEfgN,EAAgB,WACdD,EAAIjN,YAAcE,EAAKF,WACvBiN,EAAIlN,QAAQ,IAIpB,OAAQxW,EAASp/C,eACb,IAAK,OACD8iE,EAAIE,YAAYF,EAAIzM,cAAgBwM,GACpCE,IACA,MACJ,IAAK,UACDD,EAAIG,SAASH,EAAIxM,WAAa,EAAIuM,GAClCE,IACA,MACJ,IAAK,QACDD,EAAIG,SAASH,EAAIxM,WAAauM,GAC9BE,IACA,MACJ,IAAK,OACDD,EAAIlN,QAAQkN,EAAIjN,UAAY,EAAIgN,GAChC,MACJ,IAAK,MACDC,EAAIlN,QAAQkN,EAAIjN,UAAYgN,GAC5B,MACJ,IAAK,OACDC,EAAII,QAAQJ,EAAInmE,UAAoB,KAARkmE,GAC5B,MACJ,IAAK,SACDC,EAAII,QAAQJ,EAAInmE,UAAoB,IAARkmE,GAC5B,MACJ,IAAK,SACDC,EAAII,QAAQJ,EAAInmE,UAAoB,IAARkmE,GAC5B,MACJ,QACI,MAAM,IAAIzmE,MAAM,8BAExB,OAAO0mE,GAGJb,EAAAj0E,UAAAm1E,cAAP,SAAqBpN,EAAYqN,EAAgBpuD,EAAcquD,eACrDxtD,EAAY,IAAIytD,KAAKC,eAAeH,EAAQpuD,GAC5CjY,EAAS,CACXg5D,KAAIA,EACJyN,KAAM3tD,EAAUuwC,OAAO2P,IAG3B,GAAI,EAAmBoN,cAAe,KAC5BM,EAAiB,EAAmBN,cAAcpN,GAElD2N,EAAS,SAACC,OACNrjE,EAAQmjE,EAAe1gE,UAAU,SAACtI,GAAa,OAAXA,EAAA+J,OAAoBm/D,IACxD/zE,EAAqB,CAAEK,MAAO,GAAI2zE,QAAS,GAAIC,SAAU,IAE/D,MAAiB,QAAbF,IAA+B,EAATrjE,EACtB1Q,EAAEK,MAAQwzE,EAAenjE,GAAOrQ,MAEZ,QAAb0zE,IAAiC,IAAXrjE,IAIjC1Q,EAAEK,MAAQwzE,EAAenjE,GAAOrQ,MAChCL,EAAEg0E,QAAUH,EAAenjE,EAAQ,GAAKmjE,EAAenjE,EAAQ,GAAGrQ,MAAQ,GAC1EL,EAAEi0E,SAAW,CAACj0E,EAAEK,MAAOL,EAAEg0E,SAASzjD,KAAK,KAP5BvwB,OAWf,IAAmB,IAAAk0E,EAAAxnE,EAAA+mE,GAAKU,EAAAD,EAAA9zE,QAAA+zE,EAAA7zE,KAAA6zE,EAAAD,EAAA9zE,OAAE,CACtB+M,EADOwM,EAAIw6D,EAAA9zE,OACIyzE,EAAOn6D,kHAG1B,IAAmB,IAAAy6D,EAAA1nE,EAAA+mE,GAAKY,EAAAD,EAAAh0E,QAAAi0E,EAAA/zE,KAAA+zE,EAAAD,EAAAh0E,OAAE,CAArB,IAAMuZ,EACPxM,EADOwM,EAAI06D,EAAAh0E,OACI,CAAEA,MAAO,GAAI2zE,QAAS,GAAIC,SAAU,yGAG3D,OAAO9mE,GAGHklE,EAAAj0E,UAAA00E,sBAAR,SAA8B3M,EAAYR,EAAcC,GACpD,MAAO,CACHO,KAAIA,EACJmO,eAAgBnO,EAAKM,gBAAkBd,GAAQQ,EAAKO,aAAed,EACnE2O,YAAar2E,KAAKq2E,YAAYpO,EAAMR,EAAMC,GAC1C4O,YAAat2E,KAAKu2E,gBAAgBtO,EAAMR,EAAMC,KAI9CyM,EAAAj0E,UAAAq2E,gBAAR,SAAwBtO,EAAYR,EAAcC,GAC9C,OAAIO,EAAKM,gBAAkBd,EAChBQ,EAAKO,WAAad,EAEtBO,EAAKM,cAAgBd,GAGxB0M,EAAAj0E,UAAAm2E,YAAR,SAAoBpO,EAAYR,EAAcC,GAC1C,OAAIO,EAAKM,gBAAkBd,EAChBQ,EAAKO,WAAad,EAGtBO,EAAKM,cAAgBd,GAEpC0M,EAxMA,GCzHAqC,GAAA,WAAA,SAAAA,IAYWx2E,KAAAy2E,gBAAkB,IAAI1vD,EAAAA,aAoBjC,OAlBIvnB,OAAAgC,eACWg1E,EAAAt2E,UAAA,aAAU,KADrB,WAEI,OAAQF,KAAK02E,+CAGjBl3E,OAAAgC,eACWg1E,EAAAt2E,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAK02E,+CAGhBl3E,OAAAgC,eAAWg1E,EAAAt2E,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKioE,KAAKM,gBAAkBvoE,KAAKmC,MAAMomE,+CAI3CiO,EAAAt2E,UAAAktC,QADP,WAEIptC,KAAKy2E,gBAAgBx9D,KAAKjZ,KAAKmC,4BA9BtC+K,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,uDAITC,EAAAA,MAAKX,KAAA,CAAC,iCAGNW,EAAAA,+BAGAkc,EAAAA,2BAGAyjB,EAAAA,YAAWtgC,KAAA,CAAC,gDAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,sDASZY,EAAAA,aAAYZ,KAAA,CAAC,YAIlB+pE,EAhCA,iBAwEI,SAAAG,EAAmB/4C,GAAA59B,KAAA49B,WAAAA,EAvBZ59B,KAAA42E,iBAAmB,IAAI7vD,EAAAA,aAGvB/mB,KAAA29D,SAAW,EA2BtB,OAzBIn+D,OAAAgC,eACWm1E,EAAAz2E,UAAA,aAAU,KADrB,WAEI,OAAQF,KAAKo2E,gDAGjB52E,OAAAgC,eACWm1E,EAAAz2E,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAKo2E,gDAGhB52E,OAAAgC,eAAWm1E,EAAAz2E,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAKioE,KAAKO,aAAexoE,KAAKmC,MAAMqmE,4CAG/ChpE,OAAAgC,eAAWm1E,EAAAz2E,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK49B,WAAWC,+CAMpB84C,EAAAz2E,UAAAktC,QADP,eAEU66B,EAAO,IAAIr5D,KAAK5O,KAAKmC,MAAMomE,cAAevoE,KAAKmC,MAAMqmE,WAAYxoE,KAAKioE,KAAKF,WACjF/nE,KAAK42E,iBAAiB39D,KAAKgvD,wBA3ClC/6D,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,kEA/CV8zB,EAAAA,6CAmDC7zB,EAAAA,MAAKX,KAAA,CAAC,kCAGNW,EAAAA,qBAGAA,EAAAA,gCAGAkc,EAAAA,yBAGAyjB,EAAAA,YAAWtgC,KAAA,CAAC,qCAGZsgC,EAAAA,YAAWtgC,KAAA,CAAC,iDAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,uDAeZY,EAAAA,aAAYZ,KAAA,CAAC,YAKlBkqE,KAKAE,GAAA,WAKI,SAAAA,EAAmBnnC,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BANCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,mEAlGVm2C,EAAAA,eAuGJuzB,EANA,GAWAC,GAAA,WAII,SAAAA,EAAmBpnC,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BALCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,sEA7GVm2C,EAAAA,eAiHJwzB,EALA,GAUAC,GAAA,WAwBI,SAAAA,EAAoBt1C,EAA6BouB,GAA7B7vD,KAAAyhC,QAAAA,EAA6BzhC,KAAA6vD,KAAAA,EAFzC7vD,KAAA88B,SAAW,IAAIC,EAAAA,QA0D3B,OAnDWg6C,EAAA72E,UAAAumD,gBAAP,WAAA,IAAAj1C,EAAAxR,KAEIuiC,EAAAA,UAAUviC,KAAKyhC,QAAQ5D,cAAe,SAAS2E,KAC3Cw0C,EAAAA,SAAS,WAAM,OAAA1lB,EAAAA,SAAS,OACxB7uB,EAAAA,UAAUziC,KAAK88B,WACjB4F,UAAU,SAAClC,GACThvB,EAAKylE,WAAWz2C,KAGpBxgC,KAAK6vD,KAAKnoB,kBAAkB,WACxBnF,EAAAA,UAAU/wB,EAAKiwB,QAAQ5D,cAAe,WAAW2E,KAC7C00C,EAAAA,IAAI,SAAC12C,GACY,MAATA,EAAMv/B,KAA+B,aAATu/B,EAAMv/B,KAAkC,UAATu/B,EAAMv/B,MACjEu/B,EAAMqH,iBACNrH,EAAM4B,qBAGd40C,EAAAA,SAAS,WAAM,OAAA1lB,EAAAA,SAAS,OACxB7uB,EAAAA,UAAUjxB,EAAKsrB,WACjB4F,UAAU,SAAClC,GACI,MAATA,EAAMv/B,KAA+B,aAATu/B,EAAMv/B,KAAkC,UAATu/B,EAAMv/B,KACjEuQ,EAAKq+C,KAAKnS,IAAI,WAAM,OAAAlsC,EAAK2lE,aAAY,UAU9CJ,EAAA72E,UAAAkkC,YAAP,WACIpkC,KAAK88B,SAAS56B,MAAK,GACnBlC,KAAK88B,SAASuH,YAOX0yC,EAAA72E,UAAAg/D,YADP,WAEIl/D,KAAKm3E,eAOFJ,EAAA72E,UAAAk3E,UADP,SACiB52C,GACbxgC,KAAKi3E,WAAWz2C,wBA9EvBtzB,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,wEAtHV8zB,EAAAA,kBAGA4D,EAAAA,+CA2HCz3B,EAAAA,0BAOAA,EAAAA,2BAoDAC,EAAAA,aAAYZ,KAAA,CAAC,gCAQbY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,cAI9BsqE,EAhFA,MCzHa,YACD,WACA,WAID,UACA,UACA,qBA6TP,SAAAM,IAtHOr3E,KAAAoxC,YAAc,IAAIrqB,EAAAA,aAKjB/mB,KAAAg8D,WAAyCsb,GAKzCt3E,KAAAu3E,cAAe,EAKfv3E,KAAAw3E,QAAU,KAUVx3E,KAAAy3E,eAAwC,KAKxCz3E,KAAA03E,cAAuC,KAKvC13E,KAAA23E,eAAqC,CACzChQ,IAAK,UACLD,MAAO,QACPkQ,QAAS,QACTnQ,KAAM,WAMFznE,KAAA63E,aAAiC,CACrClQ,KAAK,EACLD,OAAO,EACPD,MAAM,GAoCHznE,KAAA83E,qBAAuBC,GAKvB/3E,KAAAg4E,aAAe,IAAIj7C,EAAAA,QAKnB/8B,KAAAi4E,iBAAmB,IAAIl7C,EAAAA,QAKvB/8B,KAAAk4E,kBAAoB,IAAIn7C,EAAAA,QAUrB/8B,KAAAs7D,mBAAiC,aAIjCt7D,KAAAu7D,kBAAuC,aAM7Cv7D,KAAKm4E,cAAgB,IAAIhE,GAEzBn0E,KAAKo4E,SAAWp4E,KAAKo4E,SAAWp4E,KAAKo4E,SAAW,IAAIxpE,KAEpD5O,KAAKm4E,cAAc/D,aAAep0E,KAAKq4E,UACvCr4E,KAAKs4E,iBAqRb,OA/kBI94E,OAAAgC,eACW61E,EAAAn3E,UAAA,YAAS,KADpB,WAEI,OAAOF,KAAKm4E,cAAc/D,kBAO9B,SAAqBjyE,GACjBnC,KAAKm4E,cAAc/D,aAAejyE,mCAOtC3C,OAAAgC,eACW61E,EAAAn3E,UAAA,SAAM,KADjB,WAEI,OAAOF,KAAKw3E,aAQhB,SAAkBr1E,GACdnC,KAAKw3E,QAAUr1E,EACfnC,KAAKs4E,kDAMT94E,OAAAgC,eACW61E,EAAAn3E,UAAA,gBAAa,KADxB,WAEI,OAAOF,KAAK23E,oBAOhB,SAAyBY,GACrBv4E,KAAK23E,eAAiBn4E,OAAOa,OAAOL,KAAK23E,eAAgBY,GACzDv4E,KAAKs4E,kDAOT94E,OAAAgC,eACW61E,EAAAn3E,UAAA,cAAW,KADtB,WAEI,OAAOF,KAAK63E,kBAOhB,SAAuBW,GACnBx4E,KAAK63E,aAAer4E,OAAOa,OAAOL,KAAK63E,aAAcW,oCAUzDh5E,OAAAgC,eACW61E,EAAAn3E,UAAA,YAAS,KADpB,WAEI,OAAOF,KAAKg8D,gBAMhB,SAAqB75D,GACjB,OAAQA,GACJ,KAAKm1E,GACDt3E,KAAKy4E,cAAgB,KACrB,MACJ,KAAKnB,GACL,KAAKA,GACDt3E,KAAKy4E,cAAgB,GACrB,MACJ,QACI,MAAM,IAAInqE,MAAM,2BAExBtO,KAAKu7D,kBAAkBv7D,KAAKy4E,eAC5Bz4E,KAAKu3E,cAAe,EACpBv3E,KAAKg8D,WAAa75D,mCAUtB3C,OAAAgC,eACW61E,EAAAn3E,UAAA,QAAK,KADhB,WAEI,OAAOF,KAAKy4E,mBAUhB,SAAiBt2E,GACbnC,KAAK04E,WAAWv2E,oCAOpB3C,OAAAgC,eACW61E,EAAAn3E,UAAA,WAAQ,KADnB,WAEI,OAAOF,KAAK24E,eAMhB,SAAoBx2E,GAChBnC,KAAK24E,UAAY34E,KAAK44E,YAAYz2E,oCAMtC3C,OAAAgC,eACW61E,EAAAn3E,UAAA,gBAAa,KADxB,WAEI,OAAOF,KAAKy3E,oBAehB,SAAyBt1E,GACrBnC,KAAKy3E,eAAiBt1E,mCAM1B3C,OAAAgC,eACW61E,EAAAn3E,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAK03E,mBAehB,SAAwBv1E,GACpBnC,KAAK03E,cAAgBv1E,mCA0IjBk1E,EAAAn3E,UAAA24E,gBAAR,SAAwB5Q,GACpB,OAAOjoE,KAAK44E,YAAY3Q,GAAMp5D,WAM1BwoE,EAAAn3E,UAAA44E,kBAAR,SAA0Bt2D,EAAanL,OAC7BpI,EAAS,GAGf,IAFAuT,EAAQxiB,KAAK44E,YAAYp2D,GACzBnL,EAAMrX,KAAK44E,YAAYvhE,GAChBmL,EAAM3T,YAAcwI,EAAIxI,WAC3B2T,EAAQxiB,KAAKm4E,cAAcxD,UAAUnyD,EAAO,MAAO,GACnDvT,EAAOzM,KAAKggB,GAGhB,OAAOvT,GAOHooE,EAAAn3E,UAAA64E,aAAR,SAAqB52E,GACjBnC,KAAKy4E,cAAgBz4E,KAAK44E,YAAYz2E,GACtCnC,KAAKu7D,kBAAkBv7D,KAAKy4E,gBAOxBpB,EAAAn3E,UAAA84E,eAAR,SAAuB72E,GAAvB,IAAAqP,EAAAxR,KACI,GAAIL,MAAMmP,QAAQ3M,GACdnC,KAAKy4E,cAAgBz4E,KAAKy4E,cAAc91E,OAAOR,EAAMyU,IAAI,SAAA6T,GAAK,OAAAjZ,EAAKonE,YAAYnuD,UAC5E,KACGwuD,EAAgBj5E,KAAK44E,YAAYz2E,GACjC6rC,EAAe,GACjBhuC,KAAKy4E,cAAcp1D,MAAM,SAAC4kD,GAAe,OAAAA,EAAKp5D,YAAcoqE,EAAcpqE,YAC1Em/B,EAAaxrC,KAAKy2E,GAElBj5E,KAAKy4E,cAAgBz4E,KAAKy4E,cAAchiE,OACpC,SAACwxD,GAAe,OAAAA,EAAKp5D,YAAcoqE,EAAcpqE,YAI/B,EAAtBm/B,EAAartC,SACbX,KAAKy4E,cAAgBz4E,KAAKy4E,cAAc91E,OAAOqrC,IAIvDhuC,KAAKu7D,kBAAkBv7D,KAAKy4E,gBAMxBpB,EAAAn3E,UAAAg5E,YAAR,SAAoB/2E,EAAsBg3E,GAA1C,IACQ32D,EACAnL,EAFR7F,EAAAxR,KAII,QAJsC,IAAAm5E,IAAAA,GAAA,GAIlCx5E,MAAMmP,QAAQ3M,GAEdA,EAAM+O,KAAK,SAACY,EAASvS,GAAY,OAAAuS,EAAEsnE,UAAY75E,EAAE65E,YACjD52D,EAAQxiB,KAAK44E,YAAYz2E,EAAM,IAC/BkV,EAAMrX,KAAK44E,YAAYz2E,EAAMA,EAAMxB,OAAS,IAC5CX,KAAKy4E,cAAa/1E,EAAA,CAAI8f,GAAUxiB,KAAK84E,kBAAkBt2D,EAAOnL,SAE9D,GAAKrX,KAAKu3E,aAGH,CAGH,GAFAv3E,KAAKu3E,cAAe,EAEhBv3E,KAAKy4E,cAAc,GAAG5pE,YAAc1M,EAAM0M,UAG1C,OAFA7O,KAAKy4E,cAAgB,QACrBz4E,KAAKu7D,kBAAkBv7D,KAAKy4E,eAIhCz4E,KAAKy4E,cAAcj2E,KAAKL,GACxBnC,KAAKy4E,cAAcvnE,KAAK,SAACY,EAASvS,GAAY,OAAAuS,EAAEsnE,UAAY75E,EAAE65E,YAE9D52D,EAAQxiB,KAAKy4E,cAAc52D,QAC3BxK,EAAMrX,KAAKy4E,cAAchsD,MACzBzsB,KAAKy4E,cAAa/1E,EAAA,CAAI8f,GAAUxiB,KAAK84E,kBAAkBt2D,EAAOnL,SAhB9DrX,KAAKu3E,cAAe,EACpBv3E,KAAKy4E,cAAgB,CAACt2E,GAmB1Bg3E,IACAn5E,KAAKy4E,cAAgBz4E,KAAKy4E,cAAchiE,OAAO,SAAAnX,GAAK,OAACkS,EAAK6nE,eAAe/5E,MAG7EU,KAAKu7D,kBAAkBv7D,KAAKy4E,gBAOxBpB,EAAAn3E,UAAAo5E,eAAR,SAAuBn3E,GACQ,OAAvBnC,KAAKy4E,eACLz4E,KAAK64E,gBAAe,KAAoB74E,KAAK64E,gBAAgB74E,KAAKy4E,iBAClEz4E,KAAKy4E,cAAgB,KACrBz4E,KAAKu7D,kBAAkBv7D,KAAKy4E,iBAQ5BpB,EAAAn3E,UAAAq5E,iBAAR,SAAyBp3E,GAAzB,IAAAqP,EAAAxR,KACImC,EAAQA,EAAMsU,OAAO,SAAAgU,GAAK,OAAM,OAANA,IAK1B,QAJM+uD,EAAqBx5E,KAAKy4E,cAAc93E,OACxC84E,EAAmC,IAAIzqE,IACzC7M,EAAMyU,IAAI,SAAA6T,GAAK,OAAAjZ,EAAKqnE,gBAAgBpuD,MAE/BjqB,EAAIR,KAAKy4E,cAAc93E,OAAS,EAAQ,GAALH,EAAQA,IAC5Ci5E,EAAoB5qC,IAAI7uC,KAAK64E,gBAAgB74E,KAAKy4E,cAAcj4E,MAChER,KAAKy4E,cAAc1hE,OAAOvW,EAAG,GAIjCR,KAAKy4E,cAAc93E,SAAW64E,GAC9Bx5E,KAAKu7D,kBAAkBv7D,KAAKy4E,gBAQ5BpB,EAAAn3E,UAAAw5E,cAAR,SAAsBv3E,GAElB,MADAA,EAAQA,EAAMsU,OAAO,SAAAgU,GAAK,OAAM,OAANA,KAChB9pB,OAAS,GAAnB,CAIAwB,EAAM+O,KAAK,SAACY,EAASvS,GAAY,OAAAuS,EAAEsnE,UAAY75E,EAAE65E,gBAC3CO,EAAa35E,KAAK64E,gBAAgB12E,EAAM,IACxCy3E,EAAW55E,KAAK64E,gBAAgB12E,EAAMA,EAAMxB,OAAS,IAE3DX,KAAKy4E,cAAcvnE,KAAK,SAACY,EAASvS,GAAY,OAAAuS,EAAEsnE,UAAY75E,EAAE65E,gBACxDS,EAAqB75E,KAAK64E,gBAAgB74E,KAAKy4E,cAAc,IAC7DqB,EAAmB95E,KAAK64E,gBAAgB74E,KAAKy4E,cAAcz4E,KAAKy4E,cAAc93E,OAAS,IAEvFi5E,EAAWC,GAAsCC,EAAbH,IACtC35E,KAAKy4E,cAAgB,GACrBz4E,KAAKu3E,cAAe,EACpBv3E,KAAKu7D,kBAAkBv7D,KAAKy4E,kBAO1BpB,EAAAn3E,UAAAo4E,eAAV,WACIt4E,KAAK+5E,aAAe,IAAIvE,KAAKC,eAAez1E,KAAKw3E,QAAS,CAAE7P,IAAK3nE,KAAK23E,eAAehQ,MACrF3nE,KAAKg6E,iBAAmB,IAAIxE,KAAKC,eAAez1E,KAAKw3E,QAAS,CAAEI,QAAS53E,KAAK23E,eAAeC,UAC7F53E,KAAKi6E,eAAiB,IAAIzE,KAAKC,eAAez1E,KAAKw3E,QAAS,CAAE9P,MAAO1nE,KAAK23E,eAAejQ,QACzF1nE,KAAKk6E,cAAgB,IAAI1E,KAAKC,eAAez1E,KAAKw3E,QAAS,CAAE/P,KAAMznE,KAAK23E,eAAelQ,OACvFznE,KAAKm6E,kBAAoB,IAAI3E,KAAKC,eAAez1E,KAAKw3E,QAAS,CAAE9P,MAAO1nE,KAAK23E,eAAejQ,MAAOC,IAAK3nE,KAAK23E,eAAehQ,OAMtH0P,EAAAn3E,UAAA04E,YAAV,SAAsB3Q,GAClB,OAAO,IAAIr5D,KAAKq5D,EAAKM,cAAeN,EAAKO,WAAYP,EAAKF,YAMvDsP,EAAAn3E,UAAAg9D,iBAAP,SAAwBzb,GACpBzhD,KAAKu7D,kBAAoB9Z,GAMtB41B,EAAAn3E,UAAAi9D,kBAAP,SAAyB1b,GACrBzhD,KAAKs7D,mBAAqB7Z,GAMvB41B,EAAAn3E,UAAA+8D,WAAP,SAAkB96D,GACdnC,KAAKy4E,cAAgBt2E,GAOlBk1E,EAAAn3E,UAAAm5E,eAAP,SAAsBpR,GAClB,OAA2B,OAAvBjoE,KAAKo6E,eAIFpH,GAAe/K,EAAMjoE,KAAKo6E,gBAM9B/C,EAAAn3E,UAAAw4E,WAAP,SAAkBv2E,GACd,GAAc,OAAVA,GAAkBA,IAAU6P,WAAcrS,MAAMmP,QAAQ3M,IAA2B,IAAjBA,EAAMxB,OACxE,OAAO,IAAIiO,KAGf,OAAQ5O,KAAKyZ,WACT,KAAK69D,GACDt3E,KAAK+4E,aAAY,GACjB,MACJ,KAAKzB,GACDt3E,KAAKg5E,eAAe72E,GACpB,MACJ,KAAKm1E,GACDt3E,KAAKk5E,YAAY/2E,GAAO,KAQ7Bk1E,EAAAn3E,UAAAm6E,aAAP,SAAoBl4E,GAChB,GAA2B,OAAvBnC,KAAKy4E,eAA0Bz4E,KAAKy4E,gBAAkB,GAA1D,CAIA,GAAc,OAAVt2E,GAAkBA,IAAU6P,UAI5B,OAHAhS,KAAKy4E,cAAgBz4E,KAAKyZ,YAAc69D,GAA2B,KAAO,GAC1Et3E,KAAKu3E,cAAe,OACpBv3E,KAAKu7D,kBAAkBv7D,KAAKy4E,eAIhC,OAAQz4E,KAAKyZ,WACT,KAAK69D,GACDt3E,KAAKs5E,eAAc,GACnB,MACJ,KAAKhC,GACDt3E,KAAKu5E,iBAAgB,GACrB,MACJ,KAAKjC,GACDt3E,KAAK05E,cAAa,MAQvBrC,EAAAn3E,UAAAo6E,qBAAP,SAA4Bn4E,GACxB,OAAQnC,KAAKyZ,WACT,KAAK69D,GACL,KAAKA,GACIt3E,KAAKq5E,eAAel3E,IACrBnC,KAAK04E,WAAWv2E,GAGpB,MACJ,KAAKm1E,GACDt3E,KAAKk5E,YAAY/2E,GAAO,wCA3kBnCiL,EAAAA,sBAiBAA,EAAAA,6BAkBAA,EAAAA,2BAkBAA,EAAAA,yBAoBAA,EAAAA,qBAgCAA,EAAAA,wBAoBAA,EAAAA,6BAeAA,EAAAA,4BAwBAA,EAAAA,2BAyBAkc,EAAAA,UAkZL+tD,SClmBIroB,QAAA,EACAurB,KAAA,EACAC,OAAA,sEAEJ,IAAAC,GAAA,SAAA5uD,GAAA,SAAA4uD,IAAA,IAAAjpE,EAAA,OAAAqa,GAAAA,EAAAhrB,MAAAb,KAAAU,YAAAV,YAcWwR,EAAAmsD,SAAW,EAiCVnsD,EAAAkpE,YAAcC,GAAa3rB,UA2CvC,OA1FwCx6C,EAAAA,EAAAA,GAmBpChV,OAAAgC,eAAWi5E,EAAAv6E,UAAA,aAAU,KAArB,WACI,OAAOF,KAAK06E,iBAMhB,SAAsBp7D,GAClBtf,KAAK06E,YAAcp7D,mCAMvB9f,OAAAgC,eAAWi5E,EAAAv6E,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK06E,cAAgBC,GAAa3rB,yCAM7CxvD,OAAAgC,eAAWi5E,EAAAv6E,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAK06E,cAAgBC,GAAaH,wCAWtCC,EAAAv6E,UAAA06E,WAAP,SAAkBp6C,GAAlB,IAAAhvB,EAAAxR,KACIA,KAAKo4E,SAAW,IAAIxpE,KAAK4xB,EAAM+nC,cAAevoE,KAAKo4E,SAAS5P,YAC5DxoE,KAAK06E,YAAcC,GAAa3rB,QAEhCzW,sBAAsB,WAClB/mC,EAAKqpE,SAASh9C,cAAckT,WAO7B0pC,EAAAv6E,UAAA46E,iBAAP,WACI96E,KAAK06E,YAAcC,GAAaH,QAM7BC,EAAAv6E,UAAA66E,mBAAP,SAA0Bv6C,GACT,MAATA,EAAMv/B,KAA+B,aAATu/B,EAAMv/B,KAAkC,UAATu/B,EAAMv/B,MACjEu/B,EAAMqH,iBACN7nC,KAAK86E,qBAUNL,EAAAv6E,UAAA86E,cAAP,SAAqB74E,GACjB,OAAInC,KAAKw4E,YAAY/Q,KACVznE,KAAKk6E,cAAc5hB,OAAOn2D,GAE9B,GAAGA,EAAMomE,iDAnFnBz1B,EAAAA,UAASrmC,KAAA,CAAC,8BAQVsgC,EAAAA,YAAWtgC,KAAA,CAAC,oBA6EjBguE,EA1FA,CAAwCpD,ICGpCloC,GAAU,EAEd8rC,GAAA,WAgLI,SAAAA,EAAmB9qE,GAAAnQ,KAAAmQ,GAAAA,EA5JZnQ,KAAAoM,GAAK,mBAAmB+iC,KAcxBnvC,KAAAioE,KAAO,IAAIr5D,KAyDX5O,KAAAk7E,YAAa,EAWbl7E,KAAAoxC,YAAc,IAAIrqB,EAAAA,aAQlB/mB,KAAAm7E,YAAa,EAebn7E,KAAA29D,SAAW,EA8BV39D,KAAAw3E,QAAU,KAKVx3E,KAAAo7E,aAAe,QAUfp7E,KAAAs7D,mBAAiC,aAIjCt7D,KAAAu7D,kBAAuC,aAG3Cv7D,KAAKq7E,qBACLr7E,KAAKs7E,eAAiB,IAAInH,GA4LlC,OApUI30E,OAAAgC,eACWy5E,EAAA/6E,UAAA,cAAW,KADtB,WAEI,OAAOF,KAAKo7E,kBAUhB,SAAuBj5E,GACnBnC,KAAKo7E,aAAej5E,EACpBnC,KAAKq7E,sDAWT77E,OAAAgC,eACWy5E,EAAA/6E,UAAA,SAAM,KADjB,WAEI,OAAOF,KAAKw3E,aAYhB,SAAkBr1E,GACdnC,KAAKw3E,QAAUr1E,EACfnC,KAAKq7E,sDAoDT77E,OAAAgC,eAAIy5E,EAAA/6E,UAAA,SAAM,KAAV,WAII,QAHIsiB,EAAQ,IAAI5T,KAAK5O,KAAKioE,KAAKM,cAAe,EAAG,GAC3Ct5D,EAAS,GAENzO,EAAI,EAAGA,EAAI,GAAIA,IACpByO,EAAOzM,KAAKggB,GACZA,EAAQxiB,KAAKs7E,eAAe3G,UAAUnyD,EAAO,QAAS,GAG1D,OAAOvT,mCA0CJgsE,EAAA/6E,UAAAq7E,eAAP,SAAsBp5E,GAClB,OAAInC,KAAKk7E,WACEl7E,KAAKw7E,gBAAgBljB,OAAOn2D,GAEhC,GAAGA,EAAMqmE,YAMbyS,EAAA/6E,UAAAu7E,YAAP,SAAmBj7C,GACfxgC,KAAKoxC,YAAYn4B,KAAKunB,GAEtBxgC,KAAKioE,KAAOznC,EACZxgC,KAAKu7D,kBAAkBv7D,KAAKioE,OAMzBgT,EAAA/6E,UAAAg9D,iBAAP,SAAwBzb,GACpBzhD,KAAKu7D,kBAAoB9Z,GAMtBw5B,EAAA/6E,UAAAi9D,kBAAP,SAAyB1b,GACrBzhD,KAAKs7D,mBAAqB7Z,GAMvBw5B,EAAA/6E,UAAA+8D,WAAP,SAAkB96D,GACVA,IACAnC,KAAKioE,KAAO9lE,IAOb84E,EAAA/6E,UAAAw7E,aAAP,SAAoBlpE,EAAO+Q,GACvB,OAAUA,EAAKilD,WAAU,KAMrByS,EAAA/6E,UAAAm7E,mBAAR,WACIr7E,KAAKw7E,gBAAkB,IAAIhG,KAAKC,eAAez1E,KAAKw3E,QAAS,CAAE9P,MAAO1nE,KAAK27E,eAOxEV,EAAA/6E,UAAA07E,iBADP,SACwBp7C,GACpBA,EAAMqH,iBACNrH,EAAM4B,sBAEA/yB,EAAOrP,KAAK80E,MAAM9/D,KAAK,SAACizD,GAAS,OAAAA,EAAKpqC,gBAAkB2C,EAAMx/B,SACpE,GAAKqO,EAOL,QAHMwsE,EAAS77E,KAAK80E,MAAMzkE,UACpByrE,EAAWzsE,EAAKwuB,cAAcluB,wBAE3B6C,EAAQqpE,EAAO/rE,QAAQT,GAAQ,EAAY,GAATmD,EAAYA,IAAS,KACtDupE,EAAeF,EAAOrpE,GAAOqrB,cAAcluB,wBACjD,GAAImsE,EAAS3jD,MAAQ4jD,EAAa5jD,KAAO2jD,EAAS7jD,OAAS8jD,EAAa9jD,KAAM,CAC1E4jD,EAAOrpE,GAAOqrB,cAAckT,QAC5B,SASLkqC,EAAA/6E,UAAA87E,mBADP,SAC0Bx7C,GACtBA,EAAMqH,iBACNrH,EAAM4B,sBAEA/yB,EAAOrP,KAAK80E,MAAM9/D,KAAK,SAACizD,GAAS,OAAAA,EAAKpqC,gBAAkB2C,EAAMx/B,SACpE,GAAKqO,EAOL,QAHMwsE,EAAS77E,KAAK80E,MAAMzkE,UACpByrE,EAAWzsE,EAAKwuB,cAAcluB,wBAE3B6C,EAAQqpE,EAAO/rE,QAAQT,GAAQ,EAAGmD,EAAQqpE,EAAOl7E,OAAQ6R,IAAS,KACjEupE,EAAeF,EAAOrpE,GAAOqrB,cAAcluB,wBACjD,GAAImsE,EAAS3jD,MAAQ4jD,EAAa5jD,KAAO2jD,EAAS7jD,OAAS8jD,EAAa9jD,KAAM,CAC1E4jD,EAAOrpE,GAAOqrB,cAAckT,QAC5B,SASLkqC,EAAA/6E,UAAA+7E,oBADP,SAC2Bz7C,GACvBA,EAAMqH,iBACNrH,EAAM4B,sBAEA/yB,EAAOrP,KAAK80E,MAAM9/D,KAAK,SAACizD,GAAS,OAAAA,EAAKpqC,gBAAkB2C,EAAMx/B,SACpE,GAAKqO,EAAL,KAEMwsE,EAAS77E,KAAK80E,MAAMzkE,UAC1B,GAAIwrE,EAAO/rE,QAAQT,GAAQ,EAAIwsE,EAAOl7E,OACpBk7E,EAAOA,EAAO/rE,QAAQT,GAAQ,GAEtCwuB,cAAckT,UAQrBkqC,EAAA/6E,UAAAg8E,mBADP,SAC0B17C,GACtBA,EAAMqH,iBACNrH,EAAM4B,sBAEA/yB,EAAOrP,KAAK80E,MAAM9/D,KAAK,SAACizD,GAAS,OAAAA,EAAKpqC,gBAAkB2C,EAAMx/B,SACpE,GAAKqO,EAAL,KAEMwsE,EAAS77E,KAAK80E,MAAMzkE,UAC1B,GAAgC,GAA5BwrE,EAAO/rE,QAAQT,GAAQ,EACTwsE,EAAOA,EAAO/rE,QAAQT,GAAQ,GAEtCwuB,cAAckT,UAQrBkqC,EAAA/6E,UAAAi8E,cADP,SACqB37C,GACjBA,EAAMqH,iBACNrH,EAAM4B,kBAEQpiC,KAAK80E,MAAMzkE,UAAU,GAE7BwtB,cAAckT,SAOjBkqC,EAAA/6E,UAAAk8E,aADP,SACoB57C,GAChBA,EAAMqH,iBACNrH,EAAM4B,sBAEAy5C,EAAS77E,KAAK80E,MAAMzkE,UACZwrE,EAAOA,EAAOl7E,OAAS,GAE/Bk9B,cAAckT,SAOjBkqC,EAAA/6E,UAAAm8E,eADP,SACsB77C,OACZr+B,EAAQnC,KAAK80E,MAAM9/D,KAAK,SAACizD,GAAS,OAAAA,EAAKpqC,gBAAkB2C,EAAMx/B,SAAQmB,MAC7EnC,KAAKioE,KAAO,IAAIr5D,KAAKzM,EAAMomE,cAAepmE,EAAMqmE,WAAYxoE,KAAKioE,KAAKF,WAEtE/nE,KAAKoxC,YAAYn4B,KAAKjZ,KAAKioE,MAC3BjoE,KAAKu7D,kBAAkBv7D,KAAKioE,2BA5WnCx4B,EAAAA,UAAShjC,KAAA,CAAC,CACPmB,UAAW,CAAC,CAAE84C,QAASsQ,EAAAA,kBAAmBrQ,YAAas0B,EAAwB7d,OAAO,IACtFjwD,SAAU,kBACVuiC,SAAA,0YAXAzO,EAAAA,0CA0BC8L,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,oBAcAA,EAAAA,2BASAA,EAAAA,sBAyBAA,EAAAA,0BAuBAA,EAAAA,2BAWAkc,EAAAA,2BAQAyjB,EAAAA,YAAWtgC,KAAA,CAAC,qCAMZslE,EAAAA,aAAYtlE,KAAA,CAACkqE,GAA2B,CAAE5jC,KAAM4jC,uBAShD5pC,EAAAA,YAAWtgC,KAAA,CAAC,2CAuHZY,EAAAA,aAAYZ,KAAA,CAAC,kBAAmB,CAAC,uCAyBjCY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,wCAyBnCY,EAAAA,aAAYZ,KAAA,CAAC,qBAAsB,CAAC,uCAmBpCY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,kCAmBnCY,EAAAA,aAAYZ,KAAA,CAAC,eAAgB,CAAC,iCAa9BY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,mCAc7BY,EAAAA,aAAYZ,KAAA,CAAC,gBAAiB,CAAC,cAQpCwuE,EA9WA,GCZI9rC,GAAU,EAEdmtC,GAAA,SAAAzwD,GAAA,SAAAywD,IAAA,IAAA9qE,EAAA,OAAAqa,GAAAA,EAAAhrB,MAAAb,KAAAU,YAAAV,YAEWwR,EAAA+qE,UAAY,CACfC,IAAK,CAAEv2E,UAAWw2E,OAAOC,mBAAoBC,UAAW,MAEhE,OAJ0CnoE,EAAAA,EAAAA,uBADzCwK,EAAAA,aAKDs9D,EALA,CAC0CM,EAAAA,mCAyLtC,SAAAC,EAAmB1sE,GAAAnQ,KAAAmQ,GAAAA,EArJZnQ,KAAAoM,GAAK,kBAAkB+iC,KAcvBnvC,KAAAioE,KAAO,IAAIr5D,KAoEX5O,KAAAoxC,YAAc,IAAIrqB,EAAAA,aAQlB/mB,KAAAm7E,YAAa,EAQbn7E,KAAA29D,SAAW,EA8BV39D,KAAAw3E,QAAU,KAKVx3E,KAAA88E,YAAc,UAUd98E,KAAAs7D,mBAAiC,aAIjCt7D,KAAAu7D,kBAAuC,aAG3Cv7D,KAAK+8E,oBACL/8E,KAAKs7E,eAAiB,IAAInH,GA4HlC,OA7PI30E,OAAAgC,eACWq7E,EAAA38E,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAK88E,iBAUhB,SAAsB36E,GAClBnC,KAAK88E,YAAc36E,EACnBnC,KAAK+8E,qDAWTv9E,OAAAgC,eACWq7E,EAAA38E,UAAA,SAAM,KADjB,WAEI,OAAOF,KAAKw3E,aAYhB,SAAkBr1E,GACdnC,KAAKw3E,QAAUr1E,EACfnC,KAAK+8E,qDA6CTv9E,OAAAgC,eAAIq7E,EAAA38E,UAAA,SAAM,KAAV,mBACU+O,EAAS,GACTuT,EAAQxiB,KAAKioE,KAAKM,cAAgB,EAClClxD,EAAMrX,KAAKioE,KAAKM,cAAgB,MAEtC,IAAmB,IAAAh6D,EAAAC,EAAAY,GAAMoT,EAAOnL,IAAI3I,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAAjC,IAAMulE,EAAI/4D,EAAAvM,MACX8M,EAAOzM,KAAK,IAAIoM,KAAK64D,EAAMznE,KAAKioE,KAAKO,WAAYxoE,KAAKioE,KAAKF,iHAG/D,OAAO94D,mCA0CJ4tE,EAAA38E,UAAA86E,cAAP,SAAqB74E,GACjB,OAAInC,KAAKk7E,WACEl7E,KAAKg9E,eAAe1kB,OAAOn2D,GAE/B,GAAGA,EAAMomE,eAMbsU,EAAA38E,UAAA+8E,WAAP,SAAkBz8C,GACdxgC,KAAKioE,KAAOznC,EAEZxgC,KAAKoxC,YAAYn4B,KAAKjZ,KAAKioE,MAC3BjoE,KAAKu7D,kBAAkBv7D,KAAKioE,OAMzB4U,EAAA38E,UAAAg9E,OAAP,SAAc18C,GACVA,EAAMqH,iBACNrH,EAAM4B,sBAEA+6C,EAAQ38C,EAAM6U,OAAS,GAAK,EAAI,EACtCr1C,KAAKo9E,kBAAkBD,IAMpBN,EAAA38E,UAAAs8E,IAAP,SAAWh8C,OACD28C,EAAQ38C,EAAM6U,OAAS,EAAI,GAAK,EACtCr1C,KAAKo9E,kBAAkBD,IAMpBN,EAAA38E,UAAAg9D,iBAAP,SAAwBzb,GACpBzhD,KAAKu7D,kBAAoB9Z,GAMtBo7B,EAAA38E,UAAAi9D,kBAAP,SAAyB1b,GACrBzhD,KAAKs7D,mBAAqB7Z,GAMvBo7B,EAAA38E,UAAAm9E,YAAP,SAAmB7qE,EAAO+Q,GACtB,OAAUA,EAAKglD,cAAa,KAMzBsU,EAAA38E,UAAA+8D,WAAP,SAAkB96D,GACVA,IACAnC,KAAKioE,KAAO9lE,IAQb06E,EAAA38E,UAAA87E,mBADP,SAC0Bx7C,GACtBA,EAAMqH,iBACNrH,EAAM4B,kBAENpiC,KAAKo9E,kBAAkB,IAOpBP,EAAA38E,UAAA07E,iBADP,SACwBp7C,GACpBA,EAAMqH,iBACNrH,EAAM4B,kBAENpiC,KAAKo9E,mBAAmB,IAOrBP,EAAA38E,UAAAm8E,eADP,WAEIr8E,KAAKoxC,YAAYn4B,KAAKjZ,KAAKioE,MAC3BjoE,KAAKu7D,kBAAkBv7D,KAAKioE,OAMxB4U,EAAA38E,UAAA68E,kBAAR,WACI/8E,KAAKg9E,eAAiB,IAAIxH,KAAKC,eAAez1E,KAAKw3E,QAAS,CAAE/P,KAAMznE,KAAKs9E,cAMrET,EAAA38E,UAAAk9E,kBAAR,SAA0BD,OAChBI,GAAc,IAAI3uE,MAAO25D,cAElB,EAAR4U,GAAsD,IAAzCn9E,KAAKioE,KAAKM,cAAgBgV,GACvCJ,EAAQ,GAA8C,IAAzCI,EAAcv9E,KAAKioE,KAAKM,gBAG1CvoE,KAAKioE,KAAOjoE,KAAKs7E,eAAe3G,UAAU30E,KAAKioE,KAAM,OAAQkV,yBA/SpE1tC,EAAAA,UAAShjC,KAAA,CAAC,CACPmB,UAAW,CACP,CACI84C,QAASsQ,EAAAA,kBACTrQ,YAAak2B,EACbzf,OAAO,GAEX,CACI1W,QAAS82B,EAAAA,sBACTC,SAAUnB,KAGlBnvE,SAAU,iBACVuiC,SAAA,wYA3BwEzO,EAAAA,0CA0CvE8L,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,oBAcAA,EAAAA,0BASAA,EAAAA,sBAyBAA,EAAAA,0BAuBAA,EAAAA,2BAWAkc,EAAAA,2BAQAyjB,EAAAA,YAAWtgC,KAAA,CAAC,wCAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,6CAmIZY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,qCAWnCY,EAAAA,aAAYZ,KAAA,CAAC,kBAAmB,CAAC,mCAWjCY,EAAAA,aAAYZ,KAAA,CAAC,oBAyBlBowE,KCvTAa,GAAA,WAiJI,SAAAA,EAAoB9/C,GAAA59B,KAAA49B,WAAAA,EAzHb59B,KAAA29E,gBAAkB,IAAI52D,EAAAA,aAkFtB/mB,KAAA29D,SAAW,EAqCV39D,KAAA8vC,WAAY,EASxB,OA9HItwC,OAAAgC,eAAWk8E,EAAAx9E,UAAA,WAAQ,KAAnB,eACU+nE,EAAOjoE,KAAKioE,KAAKA,KAEvB,GAAKjoE,KAAKmC,MAWV,OAPInC,KAAKyZ,YAAc69D,GACvBt3E,KAAK8vC,UAAa9vC,KAAU,MAAU6O,YAAco5D,EAAKp5D,UAEzD7O,KAAK8vC,UAAa9vC,KAAU,MACvBwqB,KAAK,SAAC/O,GAAS,OAAAA,EAAK5M,YAAco5D,EAAKp5D,YAGrC7O,KAAK8vC,eAGhB,SAAoB3tC,GAChBnC,KAAK8vC,UAAY3tC,mCAGrB3C,OAAAgC,eAAWk8E,EAAAx9E,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAKioE,KAAKmO,gDAGrB52E,OAAAgC,eAAWk8E,EAAAx9E,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAKioE,KAAKqO,6CAGrB92E,OAAAgC,eAAWk8E,EAAAx9E,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKioE,KAAKoO,6CAGrB72E,OAAAgC,eAAWk8E,EAAAx9E,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK49B,WAAWC,+CAG3Br+B,OAAAgC,eAAWk8E,EAAAx9E,UAAA,aAAU,KAArB,WACI,OAAOF,KAAKioE,KAAKoO,aAAer2E,KAAKioE,KAAKqO,6CAG9C92E,OAAAgC,eAAWk8E,EAAAx9E,UAAA,UAAO,KAAlB,eACU09E,EAAQ,IAAIhvE,KAAKA,KAAKg5D,OACtBK,EAAOjoE,KAAKioE,KAAKA,KACvB,OAAQA,EAAKM,gBAAkBqV,EAAMrV,eACjCN,EAAKO,aAAeoV,EAAMpV,YAC1BP,EAAKF,YAAc6V,EAAM7V,2CAIjCvoE,OAAAgC,eAAWk8E,EAAAx9E,UAAA,YAAS,KAApB,eACUynE,EAAM3nE,KAAKioE,KAAKA,KAAK4K,SAC3B,OAAe,IAARlL,GAAqB,IAARA,mCAGxBnoE,OAAAgC,eAAWk8E,EAAAx9E,UAAA,aAAU,KAArB,WACI,OAA2B,OAAvBF,KAAKo6E,eAIFpH,GAAehzE,KAAKioE,KAAKA,KAAMjoE,KAAKo6E,gDAG/C56E,OAAAgC,eAAWk8E,EAAAx9E,UAAA,eAAY,KAAvB,WACI,QAAKF,KAAK69E,iBAIH7K,GAAehzE,KAAKioE,KAAKA,KAAMjoE,KAAK69E,kDAG/Cr+E,OAAAgC,eAAWk8E,EAAAx9E,UAAA,YAAS,KAApB,WACI,OAA0B,OAAtBF,KAAK89E,cAIF9K,GAAehzE,KAAKioE,KAAKA,KAAMjoE,KAAK89E,+CAM/Ct+E,OAAAgC,eACWk8E,EAAAx9E,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAKioE,KAAKmO,kBAAoBp2E,KAAK+9E,WAAa/9E,KAAK4a,2CAGhEpb,OAAAgC,eACWk8E,EAAAx9E,UAAA,gBAAa,KADxB,WAEI,OAAOF,KAAKg+E,4CAGhBx+E,OAAAgC,eACWk8E,EAAAx9E,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAKi+E,UAAYj+E,KAAK4a,0CAGjCpb,OAAAgC,eACWk8E,EAAAx9E,UAAA,gBAAa,KADxB,WAEI,OAAOF,KAAK4a,0CAGhBpb,OAAAgC,eACWk8E,EAAAx9E,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAK+9E,2CAGhBv+E,OAAAgC,eACWk8E,EAAAx9E,UAAA,gBAAa,KADxB,WAEI,OAAOF,KAAKk+E,YAAcl+E,KAAKm+E,8CAGnC3+E,OAAAgC,eACWk8E,EAAAx9E,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAKo+E,2CASTV,EAAAx9E,UAAA+wE,SAFP,WAGIjxE,KAAK29E,gBAAgB1kE,KAAKjZ,KAAKioE,2BAtJtCx4B,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,eACVuiC,SAAA,2EAV0DzO,EAAAA,4CAazD7zB,EAAAA,yBAGAA,EAAAA,qBAGAA,EAAAA,6BAGAA,EAAAA,+BAGAA,EAAAA,4BAGAA,EAAAA,+BAGAkc,EAAAA,yBAkFAyjB,EAAAA,YAAWtgC,KAAA,CAAC,qCAGZsgC,EAAAA,YAAWtgC,KAAA,CAAC,mDAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,0DAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,4DAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,4DAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,4DAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,4DAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,uDASZY,EAAAA,aAAYZ,KAAA,CAAC,UAAO,CAAAiK,KACpBrJ,EAAAA,aAAYZ,KAAA,CAAC,oBAIlBixE,EAxJA,GCWIvuC,GAAU,EAEdkvC,GAAA,SAAAxyD,GAAA,SAAAwyD,IAAA,IAAA7sE,EAAA,OAAAqa,GAAAA,EAAAhrB,MAAAb,KAAAU,YAAAV,YAsCWwR,EAAApF,GAAK,iBAAiB+iC,KAMtB39B,EAAA8sE,gBAAuB,GAMvB9sE,EAAA+sE,gBAAiB,EAMjB/sE,EAAAmsE,gBAAkB,IAAI52D,EAAAA,aAMtBvV,EAAAgtE,cAAgB,IAAIz3D,EAAAA,aAqBpBvV,EAAAitE,kBAAmB,EAanBjtE,EAAA2pE,YAAa,IA2WxB,OAlb0C3mE,EAAAA,EAAAA,GA4EtChV,OAAAgC,eAAW68E,EAAAn+E,UAAA,mBAAgB,KAA3B,WACI,OAAOF,KAAKm4E,cAActD,mBAAmB70E,KAAKo4E,SAAS7P,cAAevoE,KAAKo4E,SAAS5P,YAAY,oCAMjG6V,EAAAn+E,UAAAmwC,UAAP,YACSrwC,KAAKu+E,gBAAkBv+E,KAAK80E,OAC7B90E,KAAK0+E,0BASNL,EAAAn+E,UAAAy+E,cAAP,SAAqBx8E,GACjB,OAAInC,KAAKw4E,YAAY7Q,IACV3nE,KAAK+5E,aAAazhB,OAAOn2D,GAE7B,GAAGA,EAAM4lE,WAMbsW,EAAAn+E,UAAA0+E,mBAAP,mBACUC,EAAW,GACXC,EAAK9+E,KAAKm4E,cAActD,mBAAmB70E,KAAKo4E,SAAS7P,cAAevoE,KAAKo4E,SAAS5P,YAAY,OACxG,IAAkB,IAAAuW,EAAAvwE,EAAAswE,GAAEE,EAAAD,EAAA78E,QAAA88E,EAAA58E,KAAA48E,EAAAD,EAAA78E,OAAE,CAAjB,IAAMylE,EAAGqX,EAAA78E,MACV08E,EAASr8E,KAAKxC,KAAKg6E,iBAAiB1hB,OAAOqP,EAAIM,4GAGnD,OAAO4W,GAMJR,EAAAn+E,UAAA++E,WAAP,SAAkBzsE,EAAO+Q,GACrB,MAAO,GAAGA,EAAK/Q,GAAOy1D,KAAKO,WAAajlD,EAAK/Q,GAAOy1D,KAAKF,WAMtDsW,EAAAn+E,UAAAg/E,YAAP,SAAmB1sE,EAAO+Q,GACtB,OAAUA,EAAK0kD,KAAKO,WAAU,KAAKjlD,EAAK0kD,KAAKF,WAM1CsW,EAAAn+E,UAAAk2E,eAAP,SAAsBj0E,GAClB,OAAOnC,KAAKo4E,SAAS5P,aAAermE,EAAMqmE,YAMvC6V,EAAAn+E,UAAAw2E,cAAP,SAAqBv0E,GACjB,OAAOnC,KAAKo4E,SAAS7P,gBAAkBpmE,EAAMomE,eAM1C8V,EAAAn+E,UAAAi/E,gBAAP,eACQlX,EAAOjoE,KAAK80E,MAAM9/D,KAAK,SAAC1V,GAAM,OAAAA,EAAEsb,WAE/BqtD,IACDA,EAAOjoE,KAAK80E,MAAM9/D,KAAK,SAAC1V,GAAM,OAAAA,EAAE2+E,WAGhChW,GACAA,EAAKpqC,cAAckT,SAOpBstC,EAAAn+E,UAAAk/E,UAAP,SAAiB5+C,GACbxgC,KAAKs6E,qBAAqB95C,EAAMynC,MAChCjoE,KAAK29E,gBAAgB1kE,KAAKunB,GAE1BxgC,KAAKoxC,YAAYn4B,KAAKjZ,KAAKy4E,gBAMxB4F,EAAAn+E,UAAAm/E,cAAP,SAAqB7+C,EAAO8+C,GACxB,GAAIA,EAAQ,CACJt/E,KAAK83E,uBAAyBC,IAC9B/3E,KAAKg4E,aAAa91E,WAGhBq9E,EAAOv/E,KAAK80E,MAAM9/D,KAAK,SAAC1V,GAAM,OAAAA,EAAEsb,WAClC2kE,IAASv/E,KAAKy+E,iBACdn4B,WAAW,WACPi5B,EAAK1hD,cAAckT,SACpB2E,SAAS/rC,GAAaud,QAAQ/nB,OAAOP,SAAU,MAC3CoB,KAAKw/E,UAA+B,SAAlBh/C,EAAMi/C,SAAwC,SAAlBj/C,EAAMi/C,SAC3Dz/E,KAAKw/E,SAASx/E,KAAK80E,MAAO90E,KAAK0/E,YAQnCrB,EAAAn+E,UAAAy/E,oBAAR,SAA4B3+E,EAAQ4+E,GAApC,IAAApuE,EAAAxR,UAAoC,IAAA4/E,IAAAA,GAAA,OAC1BvwE,EAAOrP,KAAK80E,MAAM9/D,KAAK,SAACizD,GAAS,OAAAA,EAAKpqC,gBAAkB78B,IAC9D,GAAKqO,EAAL,CAGA,QADMylE,EAAQ90E,KAAK80E,MAAMzkE,UAChBmC,EAAQsiE,EAAMhlE,QAAQT,IAAoB,EAAbmD,EAAQ,EAAQA,GAAS,EAAG,KACxDy1D,EAAO2X,EAAW9K,EAAMtiE,GAASsiE,EAAMtiE,EAAQ,GACrD,IAAKy1D,EAAKiW,aACDjW,EAAKkW,aAAc,CACpBlW,EAAKpqC,cAAckT,QACnB,OAKZ,GAAI/wC,KAAKu+E,gBAAkBzJ,EAAMhlE,QAAQT,GAAQ,EAAI,EAAG,KAC9CwwE,EAAU/K,EAAMA,EAAMhlE,QAAQT,IACpCrP,KAAK0/E,SAAW,IAAI9wE,KAAKixE,EAAQ5X,KAAKA,MAEtCjoE,KAAK0/E,SAAS5X,QAAQ9nE,KAAK0/E,SAAS3X,UAAY,GAEhD/nE,KAAKy+E,kBAAmB,EACxBz+E,KAAKs+E,gBAAkB,OAEvBt+E,KAAKw/E,SAAW,SAACrvC,EAAQjuC,OACfylE,EAAMx3B,EAAMn7B,KAAK,SAACuO,GAAS,OAAAA,EAAK0kD,KAAKA,KAAKp5D,YAAc3M,EAAK2M,YAC/D84D,GACAn2D,EAAKmuE,oBAAoBhY,EAAI9pC,eAAe,IAIpD79B,KAAKw+E,cAAcvlE,KAAKjZ,KAAK0/E,aAO7BrB,EAAAn+E,UAAA4/E,kBAAR,SAA0B9+E,EAAQ++E,GAAlC,IAAAvuE,EAAAxR,UAAkC,IAAA+/E,IAAAA,GAAA,OACxB1wE,EAAOrP,KAAK80E,MAAM9/D,KAAK,SAACizD,GAAS,OAAAA,EAAKpqC,gBAAkB78B,IAC9D,GAAKqO,EAAL,CAGA,QADMylE,EAAQ90E,KAAK80E,MAAMzkE,UAChBmC,EAAQsiE,EAAMhlE,QAAQT,GAAOmD,EAAQ,EAAIxS,KAAK80E,MAAMn0E,OAAQ6R,GAAS,EAAG,KACvEy1D,EAAO8X,EAAWjL,EAAMtiE,GAASsiE,EAAMtiE,EAAQ,GACrD,IAAKy1D,EAAKiW,aACDjW,EAAKkW,aAAc,CACpBlW,EAAKpqC,cAAckT,QACnB,OAKZ,GAAI/wC,KAAKu+E,gBAAkBzJ,EAAMhlE,QAAQT,GAAQ,EAAIrP,KAAK80E,MAAMn0E,OAAS,EAAG,KAClEk/E,EAAU/K,EAAMA,EAAMhlE,QAAQT,IACpCrP,KAAK0/E,SAAW,IAAI9wE,KAAKixE,EAAQ5X,KAAKA,MAEtCjoE,KAAK0/E,SAAS5X,QAAQ9nE,KAAK0/E,SAAS3X,UAAY,GAEhD/nE,KAAKy+E,kBAAmB,EACxBz+E,KAAKs+E,gBAAkB,OAEvBt+E,KAAKw/E,SAAW,SAACrvC,EAAQjuC,OACfylE,EAAMx3B,EAAMn7B,KAAK,SAACuO,GAAS,OAAAA,EAAK0kD,KAAKA,KAAKp5D,YAAc3M,EAAK2M,YAC/D84D,GACAn2D,EAAKsuE,kBAAkBnY,EAAI9pC,eAAe,IAIlD79B,KAAKw+E,cAAcvlE,KAAKjZ,KAAK0/E,aAO7BrB,EAAAn+E,UAAA8/E,kBAAR,SAA0Bh/E,GAA1B,IAAAwQ,EAAAxR,KACUqP,EAAOrP,KAAK80E,MAAM9/D,KAAK,SAACizD,GAAS,OAAAA,EAAKpqC,gBAAkB78B,IAC9D,GAAKqO,EAAL,CAGA,QADMylE,EAAQ90E,KAAK80E,MAAMzkE,UAChBmC,EAAQsiE,EAAMhlE,QAAQT,GAAe,EAARmD,EAAWA,IAAS,KAChDy1D,EAAO6M,EAAMtiE,EAAQ,GAC3B,IAAKy1D,EAAKiW,aACDjW,EAAKkW,aAAc,CACpBlW,EAAKpqC,cAAckT,QACnB,OAKZ,GAAI/wC,KAAKu+E,gBAA0C,IAAxBzJ,EAAMhlE,QAAQT,GAAa,KAC5CwwE,EAAU/K,EAAM,GAClB+K,EAAQzJ,eACRp2E,KAAK0/E,SAAW1/E,KAAKm4E,cAAcxD,UAAUkL,EAAQ5X,KAAKA,KAAM,OAAQ,GAExEjoE,KAAK0/E,SAAW,IAAI9wE,KAAKixE,EAAQ5X,KAAKA,MAG1CjoE,KAAKy+E,kBAAmB,EACxBz+E,KAAKs+E,gBAAkB,OAEvBt+E,KAAKw/E,SAAW,SAACrvC,EAAQjuC,OACfylE,EAAMx3B,EAAMn7B,KAAK,SAACuO,GAAS,OAAAA,EAAK0kD,KAAKA,KAAKp5D,YAAc3M,EAAK2M,YAC/D84D,GACAn2D,EAAKwuE,kBAAkBrY,EAAI9pC,gBAInC79B,KAAKw+E,cAAcvlE,KAAKjZ,KAAK0/E,aAO7BrB,EAAAn+E,UAAA+/E,cAAR,SAAsBj/E,GAAtB,IAAAwQ,EAAAxR,KACUqP,EAAOrP,KAAK80E,MAAM9/D,KAAK,SAACizD,GAAS,OAAAA,EAAKpqC,gBAAkB78B,IAC9D,GAAKqO,EAAL,CAIA,QAFMylE,EAAQ90E,KAAK80E,MAAMzkE,UAEhBmC,EAAQsiE,EAAMhlE,QAAQT,GAAOmD,EAAQxS,KAAK80E,MAAMn0E,OAAS,EAAG6R,IAAS,KACpEy1D,EAAO6M,EAAMtiE,EAAQ,GAC3B,IAAKy1D,EAAKiW,aACDjW,EAAKkW,aAAc,CACpBlW,EAAKpqC,cAAckT,QACnB,OAKZ,GAAI/wC,KAAKu+E,gBAAkBzJ,EAAMhlE,QAAQT,KAAUrP,KAAK80E,MAAMn0E,OAAS,EAAG,KAChEk/E,EAAU/K,EAAM90E,KAAK80E,MAAMn0E,OAAS,GAC1CX,KAAK0/E,SAAW,IAAI9wE,KAAKixE,EAAQ5X,KAAKA,MAEtCjoE,KAAKy+E,kBAAmB,EACxBz+E,KAAKs+E,gBAAkB,OAEvBt+E,KAAKw/E,SAAW,SAACrvC,EAAQjuC,OACfylE,EAAMx3B,EAAMn7B,KAAK,SAACuO,GAAS,OAAAA,EAAK0kD,KAAKA,KAAKp5D,YAAc3M,EAAK2M,YAC/D84D,GACAn2D,EAAKyuE,cAActY,EAAI9pC,gBAI/B79B,KAAKw+E,cAAcvlE,KAAKjZ,KAAK0/E,aAO7BrB,EAAAn+E,UAAAw+E,uBAAR,eACUpL,EAAY,GAClBtzE,KAAK80E,MAAMzkE,UAAUH,QAAQ,SAAC+3D,GACrBA,EAAKmO,gBACN9C,EAAU9wE,KAAKylE,EAAKA,KAAKA,QAIjCjoE,KAAK69E,gBAAkB,CAAC,CACpBnnE,KAAM68D,GAAcnB,SACpBkB,UAAWA,KAQZ+K,EAAAn+E,UAAA07E,iBADP,SACwBp7C,GACpBA,EAAMqH,iBACNrH,EAAM4B,kBAENpiC,KAAK2/E,oBAAoBn/C,EAAMx/B,SAO5Bq9E,EAAAn+E,UAAA87E,mBADP,SAC0Bx7C,GACtBA,EAAMqH,iBACNrH,EAAM4B,kBAENpiC,KAAK8/E,kBAAkBt/C,EAAMx/B,SAO1Bq9E,EAAAn+E,UAAAg8E,mBADP,SAC0B17C,GACtBA,EAAMqH,iBACNrH,EAAM4B,kBAENpiC,KAAKggF,kBAAkBx/C,EAAMx/B,SAO1Bq9E,EAAAn+E,UAAA+7E,oBADP,SAC2Bz7C,GACvBA,EAAMqH,iBACNrH,EAAM4B,kBAENpiC,KAAKigF,cAAcz/C,EAAMx/B,SAOtBq9E,EAAAn+E,UAAAi8E,cADP,SACqB37C,GACjBA,EAAMqH,iBACNrH,EAAM4B,kBAGN,QADM0yC,EAAQ90E,KAAK80E,MAAMr+D,OAAO,SAAAnX,GAAK,OAAAA,EAAE82E,iBAC9B51E,EAAI,EAAGA,EAAIs0E,EAAMn0E,OAAQH,IAC9B,IAAKs0E,EAAMt0E,GAAG09E,WAAY,CACtBpJ,EAAMt0E,GAAGq9B,cAAckT,QACvB,QASLstC,EAAAn+E,UAAAk8E,aADP,SACoB57C,GAChBA,EAAMqH,iBACNrH,EAAM4B,kBAGN,QADM0yC,EAAQ90E,KAAK80E,MAAMr+D,OAAO,SAAAnX,GAAK,OAAAA,EAAE82E,iBAC9B51E,EAAIs0E,EAAMn0E,OAAS,EAAQ,GAALH,EAAQA,IACnC,IAAKs0E,EAAMt0E,GAAG09E,WAAY,CACtBpJ,EAAMt0E,GAAGq9B,cAAckT,QACvB,4BAvcftB,EAAAA,UAAShjC,KAAA,CAAC,CACPmB,UAAW,CACP,CACIwvD,OAAO,EACP1W,QAASsQ,EAAAA,kBACTrQ,YAAa03B,IAGrB6B,WAAY,CACRppB,EAAAA,QAAQ,gBAAiB,CACrBqpB,EAAAA,WAAW,YAAa9a,EAAAA,aAAa37D,GAAa,CAC9CvK,OAAQ,CACJoK,aAAc,uBAGtB42E,EAAAA,WAAW,YAAa9a,EAAAA,aAAa17D,GAAc,CAC/CxK,OAAQ,CACJoK,aAAc,yBAK9B4D,SAAU,gBACVuiC,SAAA,kvBAaC3C,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,+BAMAA,EAAAA,8BAMAA,EAAAA,+BAMAkc,EAAAA,8BAMAA,EAAAA,sBAMAyoD,EAAAA,aAAYtlE,KAAA,CAACixE,GAAqB,CAAE3qC,KAAM2qC,yBA4B1C3wC,EAAAA,YAAWtgC,KAAA,CAAC,gDAkSZY,EAAAA,aAAYZ,KAAA,CAAC,kBAAmB,CAAC,uCAWjCY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,uCAWnCY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,wCAWnCY,EAAAA,aAAYZ,KAAA,CAAC,qBAAsB,CAAC,kCAWpCY,EAAAA,aAAYZ,KAAA,CAAC,eAAgB,CAAC,iCAiB9BY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,cAalC4xE,EA3cA,CAyB0ChH,IClBtCloC,GAAU,EAcdixC,GAAA,SAAAv0D,GAAA,SAAAu0D,IAAA,IAAA5uE,EAAA,OAAAqa,GAAAA,EAAAhrB,MAAAb,KAAAU,YAAAV,YAoCWwR,EAAApF,GAAK,gBAAgB+iC,KAGrB39B,EAAA6uE,WAAY,EAaZ7uE,EAAA89C,UAAW,EAQX99C,EAAAmsD,SAAW,EAQXnsD,EAAA69B,KAAO,OAQP79B,EAAAqsD,eAAiB,WAkBjBrsD,EAAA2pE,YAAa,EAyJZ3pE,EAAA8uE,aAAe,GAoEhB9uE,EAAA+uE,qBAAuB,SAAC9B,QAAA,IAAAA,IAAAA,GAAA,GAC3BjtE,EAAK0mE,kBAAkBh2E,OACvBsP,EAAKgvE,SAAS1I,qBAAuBC,GAErCvmE,EAAKivE,cAAchC,IAMhBjtE,EAAAkvE,qBAAuB,SAACjC,QAAA,IAAAA,IAAAA,GAAA,GAC3BjtE,EAAK0mE,kBAAkBh2E,OACvBsP,EAAKgvE,SAAS1I,qBAAuBC,GAErCvmE,EAAKmvE,UAAUlC,IAMZjtE,EAAAovE,gBAAkB,SAACpgD,GACtBA,EAAM4B,kBAEN5wB,EAAKgvE,SAASvI,iBAAiB/1E,MAAK,GACpCsP,EAAKgvE,SAASvI,iBAAiB5zC,WAG3B7yB,EAAKgvE,SAAS1I,uBAAyBC,GACvCvmE,EAAKqvE,aAAahjD,cAAckT,QACzBv/B,EAAKgvE,SAAS1I,uBAAyBC,IAC9CvmE,EAAKsvE,aAAajjD,cAAckT,QAGpCv/B,EAAKgvE,SAAS1I,qBAAuBC,MA8R7C,OApmB0CvjE,EAAAA,EAAAA,GA6DtChV,OAAAgC,eACI4+E,EAAAlgF,UAAA,qBAAkB,KADtB,WAEI,OAAOF,KAAKsvD,0CAkDhB9vD,OAAAgC,eAAI4+E,EAAAlgF,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK+gF,aAAepG,GAAaJ,sCAM5C/6E,OAAAgC,eAAI4+E,EAAAlgF,UAAA,cAAW,KAAf,WACI,OAAOF,KAAKsgF,kBAKhB,SAAgBhhE,GACZtf,KAAKsgF,aAAehhE,mCAUxB9f,OAAAgC,eAAI4+E,EAAAlgF,UAAA,iBAAc,KAAlB,WACI,OAAIF,KAAKghF,wBACEhhF,KAAKghF,wBAAwBtxC,SAEjC,UAUX,SAAmBoJ,GACf94C,KAAKghF,wBAA0BloC,mCASnCt5C,OAAAgC,eAAI4+E,EAAAlgF,UAAA,oBAAiB,KAArB,WACI,OAAIF,KAAKihF,2BACEjhF,KAAKihF,2BAA2BvxC,SAEpC,UAUX,SAAsBoJ,GAClB94C,KAAKihF,2BAA6BnoC,mCAStCt5C,OAAAgC,eAAI4+E,EAAAlgF,UAAA,gBAAa,KAAjB,eACU+nE,EAAajoE,KAAKkhF,WACxB,OAAOlhF,KAAKmhF,gBAAgBlZ,oCAUhCzoE,OAAAgC,eAAI4+E,EAAAlgF,UAAA,UAAO,KAAX,eACU+nE,EAAajoE,KAAKo4E,SACxB,OAAOp4E,KAAKmhF,gBAAgBlZ,oCAMhCzoE,OAAAgC,eAAI4+E,EAAAlgF,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKy4E,cAAgBz4E,KAAKy4E,cAAgB,IAAI7pE,sCAwBlDwxE,EAAAlgF,UAAAumD,gBAAP,WAAA,IAAAj1C,EAAAxR,KAEIA,KAAKk4E,kBAAkB11C,KACnBC,EAAAA,UAAUziC,KAAKi4E,kBACfmJ,EAAAA,UAAU,WAAM,OAAA5vE,EAAKgvE,SAASxI,aAAax1C,KACvC6+C,EAAAA,SAAS,GACTrK,EAAAA,SAAS,WAAM,OAAA1lB,EAAAA,SAAS,OACxB7uB,EAAAA,UAAUjxB,EAAKymE,sBACfv1C,UAAU,WACV,OAAQlxB,EAAKgvE,SAAS1I,sBAClB,KAAKC,GACDvmE,EAAKivE,gBACL,MACJ,KAAK1I,GACDvmE,EAAKmvE,gBAelBP,EAAAlgF,UAAAq7E,eAAP,SAAsBp5E,GAClB,OAAInC,KAAKw4E,YAAY9Q,MACV1nE,KAAKi6E,eAAe3hB,OAAOn2D,GAE/B,GAAGA,EAAMqmE,YAMb4X,EAAAlgF,UAAAugF,cAAP,SAAqBhC,QAAA,IAAAA,IAAAA,GAAA,GACjBz+E,KAAKo4E,SAAWp4E,KAAKm4E,cAAcxD,UAAU30E,KAAKo4E,SAAU,SAAU,GACtEp4E,KAAKsgF,aAAe,OAEhBtgF,KAAKwgF,WACLxgF,KAAKwgF,SAAS/B,iBAAmBA,IAOlC2B,EAAAlgF,UAAAygF,UAAP,SAAiBlC,QAAA,IAAAA,IAAAA,GAAA,GACbz+E,KAAKo4E,SAAWp4E,KAAKm4E,cAAcxD,UAAU30E,KAAKo4E,SAAU,QAAS,GACrEp4E,KAAKsgF,aAAe,OAEhBtgF,KAAKwgF,WACLxgF,KAAKwgF,SAAS/B,iBAAmBA,IA8ClC2B,EAAAlgF,UAAA46E,iBAAP,WAAA,IAAAtpE,EAAAxR,KACI6rB,EAAA3rB,UAAM46E,iBAAgBl6E,KAAAZ,MAEtBu4C,sBAAsB,WACd/mC,EAAK8vE,YACL9vE,EAAK8vE,WAAWnxE,GAAG0tB,cAAckT,WAQtCqvC,EAAAlgF,UAAA66E,mBAAP,SAA0Bv6C,GAA1B,IAAAhvB,EAAAxR,KACI6rB,EAAA3rB,UAAM66E,mBAAkBn6E,KAAAZ,KAACwgC,GAEzB+X,sBAAsB,WACd/mC,EAAK8vE,YACL9vE,EAAK8vE,WAAWnxE,GAAG0tB,cAAckT,WAQtCqvC,EAAAlgF,UAAAqhF,iBAAP,eAEUtZ,EAAOjoE,KAAKkhF,WAElB,MAAO,CACHM,SAAUxhF,KAAKm6E,kBAAkB7hB,OAAO2P,GACxC2P,QAAS53E,KAAKg6E,iBAAiB1hB,OAAO2P,KAOvCmY,EAAAlgF,UAAAuhF,aAAP,SAAoBzwE,GACZA,EAASslE,aACTt2E,KAAKygF,gBAGLzvE,EAASqlE,aACTr2E,KAAK2gF,YAGT3gF,KAAKs6E,qBAAqBtpE,EAASi3D,MACnCjoE,KAAKoxC,YAAYn4B,KAAKjZ,KAAKy4E,gBAMxB2H,EAAAlgF,UAAAwhF,YAAP,SAAmBlhD,GACfxgC,KAAKo4E,SAAWp4E,KAAKm4E,cAAcxD,UAAUn0C,EAAO,QAAS,IAM1D4/C,EAAAlgF,UAAAyhF,YAAP,SAAmBnhD,GAAnB,IAAAhvB,EAAAxR,KACIA,KAAKo4E,SAAW,IAAIxpE,KAAK5O,KAAKo4E,SAAS7P,cAAe/nC,EAAMgoC,YAC5DxoE,KAAK+gF,WAAapG,GAAa3rB,QAE/BzW,sBAAsB,WAClB/mC,EAAKowE,UAAU/jD,cAAckT,WAO9BqvC,EAAAlgF,UAAA2hF,eAAP,WAAA,IAAArwE,EAAAxR,KACIA,KAAK+gF,WAAapG,GAAaJ,KAC/BhiC,sBAAsB,WAClB/mC,EAAKswE,WAAWhN,MAAM9/D,KAAK,SAACizD,GAAS,OAAAA,EAAKmO,iBAAgBv4C,cAAckT,WAOzEqvC,EAAAlgF,UAAA6hF,iBAAP,SAAwBvhD,GACP,MAATA,EAAMv/B,KAA+B,aAATu/B,EAAMv/B,KAAkC,UAATu/B,EAAMv/B,MACjEu/B,EAAMqH,iBACN7nC,KAAK6hF,mBAUNzB,EAAAlgF,UAAAm6E,aAAP,SAAoBl4E,GAChB0pB,EAAA3rB,UAAMm6E,aAAYz5E,KAAAZ,KAACmC,GAEnBnC,KAAKwgF,SAAS/H,cAAgBz4E,KAAKy4E,cACnCz4E,KAAKu7D,kBAAkBv7D,KAAKy4E,gBAOzB2H,EAAAlgF,UAAA8hF,gBADP,SACuBxhD,GACnBA,EAAMqH,qBAEAo6C,EAAajiF,KAAKwgF,SAAS1L,MAAM9/D,KAAK,SAACizD,GAAS,OAAAA,EAAKpqC,gBAAkB3Y,SAASg9D,gBACtF,GAAID,EAAY,CACZjiF,KAAKwgF,SAASd,SAAW,IAAI9wE,KAAKqzE,EAAWha,KAAKA,UAE9CR,EAAOznE,KAAKwgF,SAASd,SAASnX,cAE9Bb,EAAQ1nE,KAAKwgF,SAASd,SAASlX,WAAa,EAC5Cd,EAAQ,IAAKA,EAAQ,GAAID,GAAQ,OAE/Br4D,EAAQ0jE,GAAW9yE,KAAKwgF,SAASd,SAASnX,cAAeb,GAE3DC,EAAM3nE,KAAKwgF,SAASd,SAAS3X,UAC7BJ,EAAMv4D,EAAM,KAAMu4D,EAAMv4D,EAAM,IAElCpP,KAAKwgF,SAASd,SAAS5X,QAAQH,GAC/B3nE,KAAKwgF,SAASd,SAASvK,SAASzN,GAChC1nE,KAAKwgF,SAASd,SAASxK,YAAYzN,GAEnCznE,KAAKwgF,SAAShB,SAAW,SAAC1K,EAAQ5yE,OACxB29E,EAAU/K,EAAM9/D,KAAK,SAAC1V,GAAM,OAAAA,EAAE2oE,KAAKA,KAAKp5D,YAAc3M,EAAK2M,YAC7DgxE,GAAWA,EAAQhiD,cAAckT,SAI7C/wC,KAAKygF,eAAc,IAOhBL,EAAAlgF,UAAAiiF,kBADP,SACyB3hD,GACrBA,EAAMqH,iBAEN7nC,KAAK2gF,WAAU,OAETsB,EAAajiF,KAAKwgF,SAAS1L,MAAM9/D,KAAK,SAACizD,GAAS,OAAAA,EAAKpqC,gBAAkB3Y,SAASg9D,gBACtF,GAAID,EAAY,CACZjiF,KAAKwgF,SAASd,SAAW,IAAI9wE,KAAKqzE,EAAWha,KAAKA,UAE9CR,EAAOznE,KAAKwgF,SAASd,SAASnX,cAE9Bb,EAAQ1nE,KAAKwgF,SAASd,SAASlX,WAAa,EACpC,GAARd,IAAcA,EAAQ,EAAGD,GAAQ,OAE/Br4D,EAAQ0jE,GAAW9yE,KAAKwgF,SAASd,SAASnX,cAAeb,GAE3DC,EAAM3nE,KAAKwgF,SAASd,SAAS3X,UAC7BJ,EAAMv4D,EAAM,KAAMu4D,EAAMv4D,EAAM,IAElCpP,KAAKwgF,SAASd,SAAS5X,QAAQH,GAC/B3nE,KAAKwgF,SAASd,SAASvK,SAASzN,GAChC1nE,KAAKwgF,SAASd,SAASxK,YAAYzN,GAEnCznE,KAAKwgF,SAAShB,SAAW,SAAC1K,EAAQ5yE,OACxB29E,EAAU/K,EAAM9/D,KAAK,SAAC1V,GAAM,OAAAA,EAAE2oE,KAAKA,KAAKp5D,YAAc3M,EAAK2M,YAC7DgxE,GAAWA,EAAQhiD,cAAckT,WAS1CqvC,EAAAlgF,UAAAkiF,qBADP,SAC4B5hD,GACxBA,EAAMqH,iBACN7nC,KAAKo4E,SAAWp4E,KAAKm4E,cAAcxD,UAAU30E,KAAKo4E,SAAU,QAAS,GAErEp4E,KAAKwgF,SAASlC,gBAAkB,OAChCt+E,KAAKwgF,SAAS/B,kBAAmB,MAE3BwD,EAAajiF,KAAKwgF,SAAS1L,MAAM9/D,KAAK,SAACizD,GAAS,OAAAA,EAAKpqC,gBAAkB3Y,SAASg9D,gBACtF,GAAID,EAAY,CACZjiF,KAAKwgF,SAASd,SAAW,IAAI9wE,KAAKqzE,EAAWha,KAAKA,UAE5CR,EAAOznE,KAAKwgF,SAASd,SAASnX,cAAgB,EAE9Cn5D,EAAQ0jE,GAAWrL,EAAMznE,KAAKwgF,SAASd,SAASlX,YAElDb,EAAM3nE,KAAKwgF,SAASd,SAAS3X,UAC7BJ,EAAMv4D,EAAM,KAAMu4D,EAAMv4D,EAAM,IAElCpP,KAAKwgF,SAASd,SAAS5X,QAAQH,GAC/B3nE,KAAKwgF,SAASd,SAASxK,YAAYzN,GAEnCznE,KAAKwgF,SAAShB,SAAW,SAAC1K,EAAQ5yE,OACxB29E,EAAU/K,EAAM9/D,KAAK,SAAC1V,GAAM,OAAAA,EAAE2oE,KAAKA,KAAKp5D,YAAc3M,EAAK2M,YAC7DgxE,GAAWA,EAAQhiD,cAAckT,WAS1CqvC,EAAAlgF,UAAAmiF,uBADP,SAC8B7hD,GAC1BA,EAAMqH,iBACN7nC,KAAKo4E,SAAWp4E,KAAKm4E,cAAcxD,UAAU30E,KAAKo4E,SAAU,OAAQ,GAEpEp4E,KAAKwgF,SAASlC,gBAAkB,OAChCt+E,KAAKwgF,SAAS/B,kBAAmB,MAE3BwD,EAAajiF,KAAKwgF,SAAS1L,MAAM9/D,KAAK,SAACizD,GAAS,OAAAA,EAAKpqC,gBAAkB3Y,SAASg9D,gBACtF,GAAID,EAAY,CACZjiF,KAAKwgF,SAASd,SAAW,IAAI9wE,KAAKqzE,EAAWha,KAAKA,UAE5CR,EAAOznE,KAAKwgF,SAASd,SAASnX,cAAgB,EAE9Cn5D,EAAQ0jE,GAAWrL,EAAMznE,KAAKwgF,SAASd,SAASlX,YAElDb,EAAM3nE,KAAKwgF,SAASd,SAAS3X,UAC7BJ,EAAMv4D,EAAM,KAAMu4D,EAAMv4D,EAAM,IAElCpP,KAAKwgF,SAASd,SAAS5X,QAAQH,GAC/B3nE,KAAKwgF,SAASd,SAASxK,YAAYzN,GAEnCznE,KAAKwgF,SAAShB,SAAW,SAAC1K,EAAQ5yE,OACxB29E,EAAU/K,EAAM9/D,KAAK,SAAC1V,GAAM,OAAAA,EAAE2oE,KAAKA,KAAKp5D,YAAc3M,EAAK2M,YAC7DgxE,GAAWA,EAAQhiD,cAAckT,WAS1CqvC,EAAAlgF,UAAAi8E,cADP,SACqB37C,GACbxgC,KAAKwgF,UACLxgF,KAAKwgF,SAASrE,cAAc37C,IAQ7B4/C,EAAAlgF,UAAAk8E,aADP,SACoB57C,GACZxgC,KAAKwgF,UACLxgF,KAAKwgF,SAASpE,aAAa57C,IAQ5B4/C,EAAAlgF,UAAAk3E,UADP,SACiB52C,GACTxgC,KAAKwgF,UAAYxgF,KAAKwgF,SAAS1I,uBAAyBC,IACxD/3E,KAAK4gF,gBAAgBpgD,IASrB4/C,EAAAlgF,UAAAihF,gBAAR,SAAwBh/E,GAAxB,IAAAqP,EAAAxR,KAOI,MAAO,CAAEo8C,UANSh8C,EAAA,CACdkiF,UAAW,WAAM,OAAA9wE,EAAKqwE,kBACtBU,SAAU,WAAM,OAAA/wE,EAAKspE,qBAClB96E,KAAKm4E,cAAc9C,cAAclzE,EAAOnC,KAAKs1E,OAAQt1E,KAAKu4E,cACzD,CAAC,MAAO,OAAQ,QAAS,MAAO,mCAtnB/C9oC,EAAAA,UAAShjC,KAAA,CAAC,CACPmB,UAAW,CACP,CACIwvD,OAAO,EACP1W,QAASsQ,EAAAA,kBACTrQ,YAAay5B,IAGrBF,WAAY,CACRppB,EAAAA,QAAQ,cAAe,CACnBqpB,EAAAA,WAAW,YAAa9a,EAAAA,aAAapmE,IACrCkhF,EAAAA,WAAW,YAAa9a,EAAAA,aAAa59D,GAAe,CAChDtI,OAAQ,CACJP,SAAU,MACVqI,UAAW,UAK3BkG,SAAU,eACVuiC,SAAA,grGAcC3C,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,yBAGAA,EAAAA,wBAaAA,EAAAA,wBAQA2/B,EAAAA,YAAWtgC,KAAA,CAAC,+BAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,qCAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,oDAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,oDAUZsgC,EAAAA,YAAWtgC,KAAA,CAAC,0CAMZqmC,EAAAA,UAASrmC,KAAA,CAAC,SAAU,CAAEsmC,KAAMkoC,wBAM5BnoC,EAAAA,UAASrmC,KAAA,CAAC,iCAMVqmC,EAAAA,UAASrmC,KAAA,CAAC,SAAU,CAAEsmC,KAAM8pC,uBAM5B/pC,EAAAA,UAASrmC,KAAA,CAAC,OAAQ,CAACsmC,KAAMsrC,2BAMzBvrC,EAAAA,UAASrmC,KAAA,CAAC,sCAMVqmC,EAAAA,UAASrmC,KAAA,CAAC,iDAyGVm6C,EAAAA,aAAYn6C,KAAA,CAACq6C,EAAAA,WAAW,WAAM,OAAA+vB,KAAqC,CAAE9jC,KAAM8jC,yCAO3EjwB,EAAAA,aAAYn6C,KAAA,CAACq6C,EAAAA,WAAW,WAAM,OAAAgwB,KAAwC,CAAE/jC,KAAM+jC,8BA4N9EzpE,EAAAA,aAAYZ,KAAA,CAAC,iBAAkB,CAAC,sCAkChCY,EAAAA,aAAYZ,KAAA,CAAC,mBAAoB,CAAC,yCAkClCY,EAAAA,aAAYZ,KAAA,CAAC,uBAAwB,CAAC,2CAgCtCY,EAAAA,aAAYZ,KAAA,CAAC,yBAA0B,CAAC,kCAgCxCY,EAAAA,aAAYZ,KAAA,CAAC,eAAgB,CAAC,iCAU9BY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,8BAU7BY,EAAAA,aAAYZ,KAAA,CAAC,mBAAoB,CAAC,cAqBvC2zE,EA1nBA,CAsB0C3F,IChDtCtrC,GAAU,EACdqzC,GAAA,SAAA32D,GAAA,SAAA22D,IAAA,IAAAhxE,EAAA,OAAAqa,GAAAA,EAAAhrB,MAAAb,KAAAU,YAAAV,YAyCWwR,EAAApF,GAAK,oBAAoB+iC,KAQzB39B,EAAA2pE,YAAa,EAuBb3pE,EAAAixE,WAAa,KAkLxB,OAxN6CjuE,EAAAA,EAAAA,GA2ClCguE,EAAAtiF,UAAAm/E,cAAP,WACIr/E,KAAKyiF,WAAa,IAMfD,EAAAtiF,UAAA66E,mBAAP,SAA0Bv6C,GAA1B,IAAAhvB,EAAAxR,KACI6rB,EAAA3rB,UAAM66E,mBAAkBn6E,KAAAZ,KAACwgC,GAEZ,eAATA,EAAMv/B,KAAqC,UAATu/B,EAAMv/B,MACxCu/B,EAAMqH,iBACN7nC,KAAK0iF,YAGI,cAATliD,EAAMv/B,KAAoC,SAATu/B,EAAMv/B,MACvCu/B,EAAMqH,iBACN7nC,KAAK2iF,gBAGTpqC,sBAAsB,WACd/mC,EAAK8vE,YAAc9vE,EAAK8vE,WAAWnxE,GAAG0tB,cAAckT,WAOzDyxC,EAAAtiF,UAAA46E,iBAAP,WAAA,IAAAtpE,EAAAxR,KACI6rB,EAAA3rB,UAAM46E,iBAAgBl6E,KAAAZ,MAEtBu4C,sBAAsB,WAClB/mC,EAAK8vE,WAAWnxE,GAAG0tB,cAAckT,WAOlCyxC,EAAAtiF,UAAAwiF,SAAP,WACI1iF,KAAKyiF,WAAa,OAClBziF,KAAKo4E,SAAWp4E,KAAKm4E,cAAcxD,UAAU30E,KAAKo4E,SAAU,OAAQ,GAEpEp4E,KAAK04E,WAAW14E,KAAKo4E,UACrBp4E,KAAKoxC,YAAYn4B,KAAKjZ,KAAKy4E,gBAMxB+J,EAAAtiF,UAAA0iF,WAAP,SAAkBpiD,GACD,MAATA,EAAMv/B,KAA+B,aAATu/B,EAAMv/B,KAAkC,UAATu/B,EAAMv/B,MACjEu/B,EAAMqH,iBACNrH,EAAM4B,kBAENpiC,KAAK0iF,aAONF,EAAAtiF,UAAAyiF,aAAP,WACI3iF,KAAKyiF,WAAa,OAClBziF,KAAKo4E,SAAWp4E,KAAKm4E,cAAcxD,UAAU30E,KAAKo4E,SAAU,QAAS,GAErEp4E,KAAK04E,WAAW14E,KAAKo4E,UACrBp4E,KAAKoxC,YAAYn4B,KAAKjZ,KAAKy4E,gBAMxB+J,EAAAtiF,UAAA2iF,eAAP,SAAsBriD,GACL,MAATA,EAAMv/B,KAA+B,aAATu/B,EAAMv/B,KAAkC,UAATu/B,EAAMv/B,MACjEu/B,EAAMqH,iBACNrH,EAAM4B,kBAENpiC,KAAK2iF,iBAONH,EAAAtiF,UAAA+8E,WAAP,SAAkBz8C,GAAlB,IAAAhvB,EAAAxR,KACIA,KAAKo4E,SAAW,IAAIxpE,KAAK4xB,EAAM+nC,cAAe/nC,EAAMgoC,WAAYhoC,EAAMunC,WACtE/nE,KAAK+gF,WAAapG,GAAa3rB,QAE/BhvD,KAAK04E,WAAWl4C,GAChBxgC,KAAKoxC,YAAYn4B,KAAKjZ,KAAKy4E,eAE3BlgC,sBAAsB,WAClB/mC,EAAKqpE,SAASh9C,cAAckT,WAO7ByxC,EAAAtiF,UAAAu7E,YAAP,SAAmBj7C,GACfxgC,KAAK04E,WAAWl4C,GAChBxgC,KAAKoxC,YAAYn4B,KAAKjZ,KAAKy4E,gBASxB+J,EAAAtiF,UAAAw4E,WAAP,SAAkBv2E,GACd,IAAKA,EACD,OAAO,IAAIyM,KAIfid,EAAA3rB,UAAMw4E,WAAU93E,KAAAZ,KAACmC,GACjBnC,KAAKo4E,SAAWj2E,GAMbqgF,EAAAtiF,UAAA+8D,WAAP,SAAkB96D,GAGVA,IACAnC,KAAKo4E,SAAWp4E,KAAKy4E,cAAgBt2E,IAQtCqgF,EAAAtiF,UAAA8hF,gBADP,SACuBxhD,GACnBA,EAAMqH,iBACN7nC,KAAKyiF,WAAa,OAClBziF,KAAKo4E,SAAWp4E,KAAKm4E,cAAcxD,UAAU30E,KAAKo4E,SAAU,QAAS,IAOlEoK,EAAAtiF,UAAAiiF,kBADP,SACyB3hD,GACrBA,EAAMqH,iBACN7nC,KAAKyiF,WAAa,OAClBziF,KAAKo4E,SAAWp4E,KAAKm4E,cAAcxD,UAAU30E,KAAKo4E,SAAU,OAAQ,IAOjEoK,EAAAtiF,UAAAi8E,cADP,SACqB37C,GACbxgC,KAAK8hF,aACL9hF,KAAK8hF,WAAW3xE,GAAG0tB,cAAckT,QACjC/wC,KAAK8hF,WAAW3F,cAAc37C,KAQ/BgiD,EAAAtiF,UAAAk8E,aADP,SACoB57C,GACZxgC,KAAK8hF,aACL9hF,KAAK8hF,WAAW3xE,GAAG0tB,cAAckT,QACjC/wC,KAAK8hF,WAAW1F,aAAa57C,yBAvPxCiP,EAAAA,UAAShjC,KAAA,CAAC,CACPmB,UAAW,CACP,CACIwvD,OAAO,EACP1W,QAASsQ,EAAAA,kBACTrQ,YAAa67B,IAGrBtC,WAAY,CACRppB,EAAAA,QAAQ,cAAe,CACnBqpB,EAAAA,WAAW,YAAa9a,EAAAA,aAAapmE,IACrCkhF,EAAAA,WAAW,YAAa9a,EAAAA,aAAa59D,GAAe,CAChDtI,OAAQ,CACJP,SAAU,MACVqI,UAAW,SAIvB6vD,EAAAA,QAAQ,gBAAiB,CACrBqpB,EAAAA,WAAW,YAAa9a,EAAAA,aAAa37D,GAAa,CAC9CvK,OAAQ,CACJoK,aAAc,uBAGtB42E,EAAAA,WAAW,YAAa9a,EAAAA,aAAa17D,GAAc,CAC/CxK,OAAQ,CACJoK,aAAc,yBAK9B4D,SAAU,mBACVuiC,SAAA,wkDAOC3C,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,0BAQA2/B,EAAAA,YAAWtgC,KAAA,CAAC,0CAMZqmC,EAAAA,UAASrmC,KAAA,CAAC,SAAU,CAACsmC,KAAMkoC,yBAM3BnoC,EAAAA,UAASrmC,KAAA,CAAC,SAAU,CAAEsmC,KAAM8pC,uBAM5B/pC,EAAAA,UAASrmC,KAAA,CAAC,OAAQ,CAACsmC,KAAMsrC,8BAkJzBhxE,EAAAA,aAAYZ,KAAA,CAAC,iBAAkB,CAAC,sCAUhCY,EAAAA,aAAYZ,KAAA,CAAC,mBAAoB,CAAC,kCAUlCY,EAAAA,aAAYZ,KAAA,CAAC,eAAgB,CAAC,iCAW9BY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,cAOlC+1E,EA1PA,CAkC6C/H,IC9B7CqI,GAAA,WAAA,SAAAA,KA2BiC,2BA3BhCr1E,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACVgwE,GACAW,GACA+B,GACAvJ,GACAF,GACAH,GACAM,GACAC,GACAkE,GACA4B,GACA2F,IAEJ70E,QAAS,CACLyyE,GACA/B,GACApD,GACA4B,GACA2F,GACA3L,GACAF,GACAH,GACAM,IAEJr+B,QAAS,CAACC,EAAAA,aAAcqqC,EAAAA,YAAa7W,QAER4W,EA3BjC,GCNI3zC,GAAU,EAMd6zC,GAAA,WAAA,SAAAA,IASWhjF,KAAAsxC,SAAW,kBAYXtxC,KAAA0P,MAAQ,OAWR1P,KAAA4L,OAAS,OAOT5L,KAAAqvC,KAAO,MAClB,2BAxCCniC,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,uDAMT4/B,EAAAA,YAAWtgC,KAAA,CAAC,wCAUZsgC,EAAAA,YAAWtgC,KAAA,CAAC,gBAAa,CAAAiK,KACzBq2B,EAAAA,YAAWtgC,KAAA,CAAC,oBAAiB,CAAAiK,KAC7BtJ,EAAAA,sBAUA2/B,EAAAA,YAAWtgC,KAAA,CAAC,iBAAc,CAAAiK,KAC1BtJ,EAAAA,oBAMA2/B,EAAAA,YAAWtgC,KAAA,CAAC,cAAW,CAAAiK,KACvBtJ,EAAAA,SAEL41E,EAxCA,GA6CAC,GAAA,WAAA,SAAAA,IASWjjF,KAAAsxC,SAAW,kBAWXtxC,KAAAsvD,UAAW,EAUXtvD,KAAAqvC,KAAO,SAClB,2BA/BCI,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,kBACVuiC,SAAA,sbAMC3C,EAAAA,YAAWtgC,KAAA,CAAC,2CAUZsgC,EAAAA,YAAWtgC,KAAA,CAAC,oCAAiC,CAAAiK,KAC7CtJ,EAAAA,oBAUA2/B,EAAAA,YAAWtgC,KAAA,CAAC,gBAEjBw2E,EA/BA,GAqCAC,GAAA,WAAA,SAAAA,KAGyC,2BAHxCh2E,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,yBAE2B+1E,EAHzC,GASAC,GAAA,WAAA,SAAAA,IAQWnjF,KAAAsxC,SAAW,0BACtB,2BATCpkC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,6DAMT4/B,EAAAA,YAAWtgC,KAAA,CAAC,mCAEjB02E,EATA,GAeAC,GAAA,WAAA,SAAAA,IAQWpjF,KAAAsxC,SAAW,4BACtB,2BATCpkC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,gEAMT4/B,EAAAA,YAAWtgC,KAAA,CAAC,sCAEjB22E,EATA,GAaAC,GAAA,WAAA,SAAAA,IASWrjF,KAAAsxC,SAAW,mBACtB,2BAVCpkC,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,yDAMT4/B,EAAAA,YAAWtgC,KAAA,CAAC,6BAEjB42E,EAVA,GAeAC,GAAA,WAAA,SAAAA,IAcWtjF,KAAAqvC,KAAO,SAClB,2BAfCniC,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,oDAUT4/B,EAAAA,YAAWtgC,KAAA,CAAC,cAAW,CAAAiK,KACvBtJ,EAAAA,SAELk2E,EAfA,OAwCIt0B,QAAU,UACVu0B,SAAW,0BAGf,SAAAC,IAkBWxjF,KAAAoM,GAAK,YAAY+iC,KAWjBnvC,KAAAqvC,KAAO,QAYPrvC,KAAA0W,KAA6B+sE,GAAYz0B,QAoBzChvD,KAAA0wE,YAAa,EACxB,OAhBIlxE,OAAAgC,eACIgiF,EAAAtjF,UAAA,iBAAc,KADlB,WAEI,OAAOF,KAAK0W,OAAS+sE,GAAYF,8DAhDxC9zC,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,WACVuiC,SAAA,ySAcC3C,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,oBAUA2/B,EAAAA,YAAWtgC,KAAA,CAAC,cAAW,CAAAiK,KACvBtJ,EAAAA,oBAWA2/B,EAAAA,YAAWtgC,KAAA,CAAC,mBAAgB,CAAAiK,KAC5BtJ,EAAAA,8BAMA2/B,EAAAA,YAAWtgC,KAAA,CAAC,gDAaZsgC,EAAAA,YAAWtgC,KAAA,CAAC,+BAA4B,CAAAiK,KACxCtJ,EAAAA,SAELo2E,SAGIx0B,QAAU,UACV00B,QAAU,WAMdC,GAAA,WAQI,SAAAA,EAAyDC,GAAA5jF,KAAA4jF,KAAAA,EAFjD5jF,KAAA6jF,eAAgB,EAiBjB7jF,KAAA8jF,OAAwC,UAgCxC9jF,KAAAyR,SAAU,EAarB,OA/BIjS,OAAAgC,eACImiF,EAAAzjF,UAAA,kBAAe,KADnB,WAEI,OAAOF,KAAK8jF,SAAWC,GAAqBL,yCAkBhDC,EAAAzjF,UAAA48C,YAAA,SAAYC,GACR,IAAK,IAAMxR,KAAQwR,EACF,aAATxR,IACAvrC,KAAK6jF,eAAgB,IAKjCF,EAAAzjF,UAAAusC,SAAA,WACIzsC,KAAKsvD,UAAYtvD,KAAK6jF,eAAiB7jF,KAAK4jF,KAAKlT,gCAlExDjhC,EAAAA,UAAShjC,KAAA,CAAC,CAEPU,SAAU,mBACVuiC,SAAA,qTAK+D8zC,GAAgBziF,WAAA,CAAA,CAAA2V,KAAlEo2B,EAAAA,UAAQ,CAAAp2B,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAAC+2E,yCAa/Bz2C,EAAAA,YAAWtgC,KAAA,CAAC,2BAAwB,CAAAiK,KACpCtJ,EAAAA,wBAOA2/B,EAAAA,YAAWtgC,KAAA,CAAC,qCAAkC,CAAAiK,KAC9CtJ,EAAAA,+BAOA2/B,EAAAA,YAAWtgC,KAAA,CAAC,oDAgBZsgC,EAAAA,YAAWtgC,KAAA,CAAC,oCAAiC,CAAAiK,KAC7CtJ,EAAAA,SAcLu2E,EApEA,GAyEAK,GAAA,WAAA,SAAAA,KAyB6B,2BAzB5Bv2E,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACV81E,GACAP,GACAD,GACAK,GACAM,GACAL,GACAH,GACAC,GACAF,IAEJv1E,QAAS,CACL61E,GACAP,GACAD,GACAK,GACAM,GACAL,GACAH,GACAC,GACAF,IAEJzqC,QAAS,CAACC,EAAAA,aAAcqW,QAECi1B,EAzB7B,GCzUI70C,GAAU,MAEUwgB,KAAA,EAAMs0B,KAAA,EAAMC,KAAA,4DAuBpC,IAAAC,GAAA,WAmKI,SAAAA,EAAoB1iD,GAAAzhC,KAAAyhC,QAAAA,EAjJazhC,KAAAqvC,KAAO,SAYjCrvC,KAAAoM,GAAK,gBAAgB+iC,KAUZnvC,KAAAokF,MAAO,EAUPpkF,KAAAqkF,OAAQ,EA8CRrkF,KAAAskF,YAAa,EAUZtkF,KAAAukF,eAAiB,IAAIx9D,EAAAA,aAUrB/mB,KAAAwkF,aAAe,IAAIz9D,EAAAA,aAUnB/mB,KAAAykF,eAAiB,IAAI19D,EAAAA,aAUrB/mB,KAAA0kF,iBAAmB,IAAI39D,EAAAA,aAUvB/mB,KAAA2kF,kBAAoB,IAAI59D,EAAAA,aASlC/mB,KAAA4kF,OAA8B,GAM7B5kF,KAAA6kF,OAAS,EAoSrB,OA1YIrlF,OAAAgC,eACI2iF,EAAAjkF,UAAA,WAAQ,KADZ,WAEI,OAAOF,KAAK8kF,eAWhB,SAAa3iF,GACTnC,KAAK8kF,WAAa3iF,EAClBnC,KAAK+kF,oDASTvlF,OAAAgC,eACI2iF,EAAAjkF,UAAA,WAAQ,KADZ,WAEI,OAAO,mCAkFJikF,EAAAjkF,UAAAkkC,YAAP,WACIpkC,KAAKglF,YAAa,EACdhlF,KAAKilF,eACLC,cAAcllF,KAAKilF,gBAOpBd,EAAAjkF,UAAAilF,aAAP,SAAoBC,GAChB,MAAO,SAAQA,EAAM5yE,MAAQ,GAAC,OAAOxS,KAAKqlF,OAU9C7lF,OAAAgC,eAAW2iF,EAAAjkF,UAAA,QAAK,KAAhB,WACI,OAAOF,KAAK6kF,wCAUhBrlF,OAAAgC,eAAW2iF,EAAAjkF,UAAA,UAAO,KAAlB,WACI,OAAQF,KAAKslF,cAAoBtlF,KAAKslF,cAAc9yE,MAAvB,mCAUjChT,OAAAgC,eAAW2iF,EAAAjkF,UAAA,YAAS,KAApB,WACI,OAAOF,KAAKulF,0CAUhB/lF,OAAAgC,eAAW2iF,EAAAjkF,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKglF,4CAShBxlF,OAAAgC,eAAI2iF,EAAAjkF,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKyhC,QAAQ5D,+CAUjBsmD,EAAAjkF,UAAAqM,IAAP,SAAWiG,eACP,IAAmB,IAAAjE,EAAAC,EAAAxO,KAAK4kF,QAAMl2E,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAA3B,IAAMuZ,EAAI/M,EAAAvM,MACX,GAAIsZ,EAAKjJ,QAAUA,EACf,OAAOiJ,yGAYZ0oE,EAAAjkF,UAAAiM,IAAP,SAAWi5E,GACPA,EAAM5yE,MAAQxS,KAAKqlF,MACnBrlF,KAAK4kF,OAAOpiF,KAAK4iF,GACjBplF,KAAK6kF,QAAU,EAEI,IAAf7kF,KAAKqlF,OAAeD,EAAMzZ,QAC1B3rE,KAAK2tD,OAAOy3B,GACO,IAAfplF,KAAKqlF,OACLrlF,KAAK4jC,QAGTwhD,EAAMzZ,QAAS,EAGnB3rE,KAAKwkF,aAAavrE,KAAK,CAAEusE,SAAUxlF,KAAMolF,MAAKA,KAU3CjB,EAAAjkF,UAAAoM,OAAP,SAAc84E,GACV,GAAIA,GAASA,IAAUplF,KAAKuM,IAAI64E,EAAM5yE,OAAQ,CAS1C,GARI4yE,EAAM5yE,QAAUxS,KAAKylF,UACrBL,EAAMzZ,QAAS,EACf3rE,KAAKkC,QAGTlC,KAAK4kF,OAAO7tE,OAAOquE,EAAM5yE,MAAO,GAChCxS,KAAK6kF,QAAU,GAEV7kF,KAAKqlF,MAEN,YADArlF,KAAKslF,cAAgB,MAIzB,IAAK,IAAI9kF,EAAI,EAAGA,EAAIR,KAAKqlF,MAAO7kF,IAC5BR,KAAK4kF,OAAOpkF,GAAGgS,MAAQhS,EAG3BR,KAAKykF,eAAexrE,KAAK,CAAEusE,SAAUxlF,KAAMolF,MAAKA,MAWjDjB,EAAAjkF,UAAAytD,OAAP,SAAcy3B,EAA0Bn/E,QAAA,IAAAA,IAAAA,EAAuBy/E,GAAU/1B,UAC/D9d,EAAWuzC,EAAM5yE,MACnBvM,IAAcy/E,GAAU/1B,OACxB1pD,EAAY4rC,EAAW7xC,KAAKylF,QAAUC,GAAUzB,KAAOyB,GAAUxB,MAGjEkB,GAASA,IAAUplF,KAAKslF,eACxBtlF,KAAK2lF,QAAQP,EAAOn/E,IAWrBk+E,EAAAjkF,UAAAgC,KAAP,eACUsQ,GAASxS,KAAKylF,QAAU,GAAKzlF,KAAKqlF,MAExC,GAAc,IAAV7yE,GAAgBxS,KAAKokF,KAIzB,OAAOpkF,KAAK2tD,OAAO3tD,KAAKuM,IAAIiG,GAAQkzE,GAAUzB,MAH1CjkF,KAAKwyE,QAaN2R,EAAAjkF,UAAA0lF,KAAP,eACUpzE,EAAQxS,KAAKylF,QAAU,EAAI,EAC7BzlF,KAAKqlF,MAAQ,EAAIrlF,KAAKylF,QAAU,EAEpC,GAAKzlF,KAAKokF,MAAQ5xE,IAAUxS,KAAKqlF,MAAQ,EAIzC,OAAOrlF,KAAK2tD,OAAO3tD,KAAKuM,IAAIiG,GAAQkzE,GAAUxB,MAH1ClkF,KAAKwyE,QAeN2R,EAAAjkF,UAAA0jC,KAAP,WACS5jC,KAAKulF,WACNvlF,KAAKulF,UAAW,EAChBvlF,KAAK2kF,kBAAkB1rE,KAAKjZ,MAC5BA,KAAK+kF,qBAaNZ,EAAAjkF,UAAAsyE,KAAP,WACQxyE,KAAKqkF,QACLrkF,KAAKulF,UAAW,EAChBvlF,KAAK0kF,iBAAiBzrE,KAAKjZ,MAC3BA,KAAK6lF,mBAML1B,EAAAjkF,UAAAylF,QAAR,SAAgBP,EAA0Bn/E,GAClCjG,KAAKglF,aAITI,EAAMn/E,UAAYA,EAClBm/E,EAAMzZ,QAAS,EAEX3rE,KAAKslF,gBACLtlF,KAAKslF,cAAcr/E,UAAYA,EAC/BjG,KAAKslF,cAAc3Z,QAAS,GAGhC3rE,KAAKslF,cAAgBF,EAErBplF,KAAKukF,eAAetrE,KAAK,CAAEusE,SAAUxlF,KAAMolF,MAAKA,IAChDplF,KAAK+kF,qBAKDZ,EAAAjkF,UAAA2lF,eAAR,WACQ7lF,KAAKilF,gBACLC,cAAcllF,KAAKilF,eACnBjlF,KAAKilF,cAAgB,OAMrBd,EAAAjkF,UAAA6kF,iBAAR,WAAA,IAAAvzE,EAAAxR,KACIA,KAAK6lF,kBAEA9iE,MAAM/iB,KAAKsxD,WAA6B,EAAhBtxD,KAAKsxD,WAC9BtxD,KAAKilF,cAAgBa,YAAY,eACvBC,GAAQv0E,EAAK8/C,SACf9/C,EAAK+zE,UAAY/zE,EAAK6zE,QAAUtiE,MAAMgjE,IAAgB,EAAPA,EAC/Cv0E,EAAKtP,OAELsP,EAAKghE,QAEVxyE,KAAKsxD,YAOT6yB,EAAAjkF,UAAA+7E,oBADP,WAAA,IAAAzqE,EAAAxR,KAEIA,KAAKkC,OACLq2C,sBAAsB,WAAM,OAAA/mC,EAAKqsB,cAAckT,WAM5CozC,EAAAjkF,UAAAg8E,mBADP,WAAA,IAAA1qE,EAAAxR,KAEIA,KAAK4lF,OACLrtC,sBAAsB,WAAM,OAAA/mC,EAAKqsB,cAAckT,+BAnctDtB,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,eACVuiC,SAAA,2iCACS,4HAxCTzO,EAAAA,4CAuDC8L,EAAAA,YAAWtgC,KAAA,CAAC,yBAUZsgC,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,oBAWAA,EAAAA,qBAUAA,EAAAA,wBASAA,EAAAA,wBAwBA2/B,EAAAA,YAAWtgC,KAAA,CAAC,qCAaZW,EAAAA,8BAUAkc,EAAAA,6BAUAA,EAAAA,+BAUAA,EAAAA,iCAUAA,EAAAA,kCAUAA,EAAAA,oCAsSAjc,EAAAA,aAAYZ,KAAA,CAAC,kDAQbY,EAAAA,aAAYZ,KAAA,CAAC,wBAKlB03E,EArcA,GAmdA6B,GAAA,WAwCI,SAAAA,EAAoBR,GAAAxlF,KAAAwlF,SAAAA,EAaxB,OATWQ,EAAA9lF,UAAAusC,SAAP,WACIzsC,KAAKwlF,SAASr5E,IAAInM,OAKfgmF,EAAA9lF,UAAAkkC,YAAP,WACIpkC,KAAKwlF,SAASl5E,OAAOtM,2BAnD5ByvC,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,YACVuiC,SAAA,wSAsC8By0C,qCAxB7B/2E,EAAAA,yBAWAA,EAAAA,sBAUA2/B,EAAAA,YAAWtgC,KAAA,CAAC,iBAAc,CAAAiK,KAC1BtJ,EAAAA,SAeL44E,EArDA,GA+DAC,GAAA,WAAA,SAAAA,KAMA,2BANCx4E,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACy2E,GAAsB6B,IACrCr4E,QAAS,CAACw2E,GAAsB6B,IAChCvtC,QAAS,CAACC,EAAAA,aAAcwzB,QAG5B+Z,EANA,OCviBI3oB,OAAS,SACTC,MAAQ,SAQNrC,GAAO,aACTsC,GAAS,EAeb0oB,GAAA,WAAA,SAAAA,IA+CoBlmF,KAAAoM,GAAK,gBAAgBoxD,KAYrBx9D,KAAAwvC,QAAaxvC,KAAKoM,GAAE,SAiCpBpM,KAAA29D,SAAmB,KAYnB39D,KAAA09D,cAAwCyoB,GAAc5oB,MAYtDv9D,KAAA49D,eAAgB,EAYhB59D,KAAAkpD,UAAW,EAapBlpD,KAAA69D,eAAiB79D,KAAKwvC,QAYtBxvC,KAAA89D,UAA2B,KAOzB99D,KAAAqqC,OAAiD,IAAItjB,EAAAA,aASvD/mB,KAAAsxC,SAAW,eAaXtxC,KAAAkwC,SAAU,EAaDlwC,KAAAomF,eAAgB,EAahBpmF,KAAA+9D,SAAU,EAaV/9D,KAAAuvC,UAAW,EAaXvvC,KAAAqmF,oBAAqB,EAI9BrmF,KAAAg+D,QAAah+D,KAAKoM,GAAE,SAInBpM,KAAAs7D,mBAAiCJ,GAIjCl7D,KAAAu7D,kBAAsCL,GAmGlD,OA3FWgrB,EAAAhmF,UAAAsM,OAAP,WACQxM,KAAKuvC,WAITvvC,KAAKomF,eAAgB,EACrBpmF,KAAKkwC,SAAU,EACflwC,KAAK+9D,SAAW/9D,KAAK+9D,QAErB/9D,KAAKqqC,OAAOpxB,KAAK,CAAE8kD,QAAS/9D,KAAK+9D,QAASuoB,SAAUtmF,OACpDA,KAAKu7D,kBAAkBv7D,KAAK+9D,WAKzBmoB,EAAAhmF,UAAAqmF,kBAAP,SAAyB/lD,GAGrBA,EAAM4B,mBAKH8jD,EAAAhmF,UAAAsmF,iBAAP,SAAwBhmD,GAKpBA,EAAM4B,kBAEF7yB,MACAvP,KAAKymF,eAAe5oD,cAAcwgC,OAGtCr+D,KAAKwM,UAKF05E,EAAAhmF,UAAAo+D,cAAP,SAAqB99B,GAKjBxgC,KAAKwM,UAKF05E,EAAAhmF,UAAAkpD,QAAP,SAAe5oB,GACXxgC,KAAKkwC,SAAU,GAKZg2C,EAAAhmF,UAAAopD,OAAP,SAAc9oB,GACVxgC,KAAKkwC,SAAU,EACflwC,KAAKs7D,sBAKF4qB,EAAAhmF,UAAA+8D,WAAP,SAAkB96D,GACdnC,KAAKi+D,OAAS97D,EACdnC,KAAK+9D,UAAY/9D,KAAKi+D,QAK1Bz+D,OAAAgC,eAAW0kF,EAAAhmF,UAAA,aAAU,KAArB,WACI,OAAQF,KAAK09D,eACT,KAAKyoB,GAAc7oB,OACf,OAAUt9D,KAAKsxC,SAAQ,kBAC3B,KAAK60C,GAAc5oB,MACnB,QACI,OAAUv9D,KAAKsxC,SAAQ,4CAM5B40C,EAAAhmF,UAAAg9D,iBAAP,SAAwBzb,GAAwBzhD,KAAKu7D,kBAAoB9Z,GAIlEykC,EAAAhmF,UAAAi9D,kBAAP,SAAyB1b,GAAkBzhD,KAAKs7D,mBAAqB7Z,GAGrEykC,EAAAhmF,UAAA62D,eAAA,WACI,OAAO/2D,KAAKymF,eAAe5oD,mCAvVlC4R,EAAAA,UAAShjC,KAAA,CAAC,CACPmB,UAAW,CAAC,CAAE84C,QAASsQ,EAAAA,kBAAmBrQ,YAAau/B,EAAsB9oB,OAAO,IACpFjwD,SAAU,eACVu5E,qBAAqB,EACrBh3C,SAAA,grCAcCoD,EAAAA,UAASrmC,KAAA,CAAC,iCAQVqmC,EAAAA,UAASrmC,KAAA,CAAC,mCAQVqmC,EAAAA,UAASrmC,KAAA,CAAC,gCAYVsgC,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,uBAYAA,EAAAA,qBAWAA,EAAAA,oBAWAA,EAAAA,wBAWAA,EAAAA,6BAYAA,EAAAA,6BAYAA,EAAAA,wBAYAA,EAAAA,8BAYAA,EAAAA,MAAKX,KAAA,CAAC,sCAYNW,EAAAA,MAAKX,KAAA,CAAC,8BAON6c,EAAAA,yBASAyjB,EAAAA,YAAWtgC,KAAA,CAAC,uCAaZsgC,EAAAA,YAAWtgC,KAAA,CAAC,sDAaZsgC,EAAAA,YAAWtgC,KAAA,CAAC,sCAAmC,CAAAiK,KAC/CtJ,EAAAA,uBAYA2/B,EAAAA,YAAWtgC,KAAA,CAAC,gCAA6B,CAAAiK,KACzCtJ,EAAAA,wBAYA2/B,EAAAA,YAAWtgC,KAAA,CAAC,iCAA8B,CAAAiK,KAC1CtJ,EAAAA,kCAYA2/B,EAAAA,YAAWtgC,KAAA,CAAC,8BAA2B,CAAAiK,KACvCtJ,EAAAA,SA+GL84E,EAzVA,GA2VaS,GAA4C,CACrDjgC,QAASkgC,EAAAA,cACTjgC,YAAaG,EAAAA,WAAW,WAAM,OAAA+/B,KAC9BzpB,OAAO,GAIXypB,GAAA,SAAAh7D,GAAA,SAAAg7D,mDAM8E,OAA5BryE,EAAAA,EAAAA,uBANjDtH,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,0HAGVS,UAAW,CAAC+4E,QAE8DE,EAN9E,CAMkDC,EAAAA,2BAKlDC,GAAA,WAAA,SAAAA,KAKiC,2BALhCt5E,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACw4E,GAAsBW,IACrCl5E,QAAS,CAACu4E,GAAsBW,IAChCpuC,QAAS,CAACmnB,QAEmBmnB,EALjC,GC1WIC,GAAU,EAEdC,GAAA,SAAAp7D,GA4TI,SAAAo7D,EAAmBzoE,EAA+Bof,EAAgCkyB,EAC3BnD,GADvD,IAAAn7C,EAEQqa,EAAAjrB,KAAAZ,KAAM2sD,IAAuB3sD,YAFlBwR,EAAAgN,IAAAA,EAA+BhN,EAAAosB,WAAAA,EAAgCpsB,EAAAs+C,SAAAA,EAC3Bt+C,EAAAm7C,uBAAAA,EA/ShDn7C,EAAApF,GAAK,YAAY46E,KAmBjBx1E,EAAA01E,WAAY,EAUZ11E,EAAA21E,WAAY,EAoBZ31E,EAAA41E,YAAa,EAgBb51E,EAAA61E,SAAQ,GAWR71E,EAAA+9B,UAAW,EAkEX/9B,EAAA81E,YAAc,IAAIvgE,EAAAA,aAelBvV,EAAA+1E,UAAY,IAAIxgE,EAAAA,aAehBvV,EAAAg2E,SAAW,IAAIzgE,EAAAA,aAefvV,EAAA47B,QAAU,IAAIrmB,EAAAA,aAgBdvV,EAAA4/B,YAAc,IAAIrqB,EAAAA,aAgBlBvV,EAAAi2E,UAAY,IAAI1gE,EAAAA,aAgBhBvV,EAAAsjD,YAAc,IAAI/tC,EAAAA,aA+DfvV,EAAAs+B,WAAY,EACZt+B,EAAAk2E,mBAAqB,2BACrBl2E,EAAAm2E,qBAAsB,IAyMpC,OA/fsCnzE,EAAAA,EAAAA,GA8FlChV,OAAAgC,eACWylF,EAAA/mF,UAAA,WAAQ,KAcnB,WACI,OAAOF,KAAK8vC,eAhBhB,SACoB52B,GAChBlZ,KAAK4nF,gBAAgB1uE,oCAwBzB1Z,OAAAgC,eACWylF,EAAA/mF,UAAA,QAAK,KAchB,WACI,OAAOF,KAAK6nF,SAAShqD,cAAct/B,MAAMupF,qBAhB7C,SACiBC,GACb/nF,KAAK6nF,SAAShqD,cAAct/B,MAAMupF,gBAAkBC,mCAgIxDvoF,OAAAgC,eACIylF,EAAA/mF,UAAA,YAAS,KADb,eAEU6tE,EAAU,CAAC/tE,KAAKosD,yBAAyB,aAI/C,OAHA2hB,EAAQvrE,KAAKxC,KAAKuvC,SAAW,qBAAuB,IAEpDw+B,EAAQvrE,KAAKxC,KAAKqnF,UACXtZ,EAAQ17C,KAAK,sCA8BxB7yB,OAAAgC,eAAWylF,EAAA/mF,UAAA,uBAAoB,KAA/B,WACI,OAAOF,KAAKgoF,YAAchoF,KAAKioF,mDAMnCzoF,OAAAgC,eAAWylF,EAAA/mF,UAAA,qBAAkB,KAA7B,WACI,OAAOF,KAAKkoF,YAAcloF,KAAKmoF,mDAMnC3oF,OAAAgC,eAAWylF,EAAA/mF,UAAA,aAAU,KAArB,WACI,OAAOF,KAAKosD,yBAAyB,oDAGzC5sD,OAAAgC,eAAWylF,EAAA/mF,UAAA,eAAY,KAAvB,WACI,OAAQF,KAAKuvC,SAAe,GAAJ,mCAerB03C,EAAA/mF,UAAAkoF,YAAP,SAAmBhsE,SACTisE,EAAe,mBAErB,OAAA17E,EAAA,IACK07E,GAAejsE,EAChBzP,EAAI07E,EAAY,aAAcjsE,KAI5B6qE,EAAA/mF,UAAA0nF,gBAAV,SAA0B1uE,EAAmBovE,QAAA,IAAAA,IAAAA,EAAA,UACnCC,EAAqC,CACvCl2B,cAAei2B,EACfh2B,MAAOtyD,KACP4a,UAAU,EACVhC,QAAQ,GAGRM,IAAalZ,KAAK8vC,WAClBy4C,EAAa3tE,UAAW,EACxB5a,KAAKoxC,YAAYn4B,KAAKsvE,GAEjBA,EAAa3vE,SACd5Y,KAAK8vD,SAASvB,SAASvuD,KAAK6nF,SAAShqD,cAAe79B,KAAK0nF,oBACzD1nF,KAAK8vC,UAAY52B,KAEbA,GAAYlZ,KAAK8vC,YACzB9vC,KAAKoxC,YAAYn4B,KAAKsvE,GAEjBA,EAAa3vE,SACd5Y,KAAK8vD,SAASjB,YAAY7uD,KAAK6nF,SAAShqD,cAAe79B,KAAK0nF,oBAC5D1nF,KAAK8vC,UAAY52B,KAQtB+tE,EAAA/mF,UAAAsoF,cAAP,SAAqBhoD,OACXioD,EAAqC,CACvCp2B,cAAe7xB,EACf8xB,MAAOtyD,KACP4Y,QAAQ,GAGZ5Y,KAAKynF,UAAUxuE,KAAKwvE,GAChBA,EAAY7vE,SAIG,WAAd4nB,EAAMv/B,KAAkC,QAAdu/B,EAAMv/B,MAAkBjB,KAAKmnF,WACxDnnF,KAAKwnF,SAASvuE,KAAK,CACfo5C,cAAe7xB,EACf8xB,MAAOtyD,OAII,MAAdwgC,EAAMv/B,KAA6B,aAAdu/B,EAAMv/B,MAAuBjB,KAAKonF,YAAepnF,KAAKuvC,UAC5EvvC,KAAK4nF,iBAAiB5nF,KAAK4a,SAAU4lB,GAGvB,QAAdA,EAAMv/B,KACNu/B,EAAMqH,mBAOPo/C,EAAA/mF,UAAAwoF,mBAAP,SAA0BloD,GACJ,MAAdA,EAAMv/B,KAA6B,aAAdu/B,EAAMv/B,KAAoC,UAAdu/B,EAAMv/B,MACvDjB,KAAKwnF,SAASvuE,KAAK,CACfo5C,cAAe7xB,EACf8xB,MAAOtyD,OAGXwgC,EAAMqH,iBACNrH,EAAM4B,oBAIP6kD,EAAA/mF,UAAAyoF,kBAAP,SAAyBnoD,GACrBA,EAAM4B,mBAMH6kD,EAAA/mF,UAAA0oF,cAAP,SAAqBpoD,GACjBxgC,KAAKwnF,SAASvuE,KAAK,CACfo5C,cAAe7xB,EACf8xB,MAAOtyD,QAORinF,EAAA/mF,UAAA2oF,kBAAP,WAEI7oF,KAAK2nF,qBAAsB,GAMxBV,EAAA/mF,UAAA4oF,iBAAP,SAAwBtoD,GACfxgC,KAAK2nF,qBACN3nF,KAAK4oF,cAAcpoD,GAEvBxgC,KAAK2nF,qBAAsB,GAQxBV,EAAA/mF,UAAA6oF,gBAAP,SAAuBvoD,GACnBxgC,KAAKsnF,YAAYruE,KAAK,CAClBo5C,cAAe7xB,EAAM6xB,cACrBC,MAAOtyD,OAEXwgC,EAAM5nB,QAAU5Y,KAAKknF,WAAalnF,KAAKuvC,UAMpC03C,EAAA/mF,UAAA8oF,cAAP,WACIhpF,KAAKipF,QAAQl1B,gBAMVkzB,EAAA/mF,UAAAgpF,cAAP,SAAqB1oD,GAEjBxgC,KAAKunF,UAAUtuE,KAAK,CAChBo5C,cAAe7xB,EAAM6xB,cACrBC,MAAOtyD,OAGPA,KAAK4a,UACL5a,KAAK6nF,SAAShqD,cAAckT,SAO7Bk2C,EAAA/mF,UAAAipF,kBAAP,SAAyB3oD,OACf4oD,EAAsC,CACxC/2B,cAAe7xB,EAAM6xB,cACrBC,MAAOtyD,KACP4Y,QAAQ,GAEZ5Y,KAAKotC,QAAQn0B,KAAKmwE,GAEbA,EAAexwE,SAAU5Y,KAAKonF,YAAepnF,KAAKuvC,UACnDvvC,KAAK4nF,iBAAiB5nF,KAAK4a,SAAU4lB,EAAM6xB,gBAU5C40B,EAAA/mF,UAAAmpF,uBAAP,SAA8B7oD,GAC1B,GAAIxgC,KAAKipF,UAAYzoD,EAAM80B,MAAS90B,EAAM+0B,UAAa/0B,EAAM+0B,SAAS+zB,KAAtE,KAIMhqD,EAAyC,CAC3CgzB,MAAOtyD,KACPupF,SAAU/oD,EAAM+0B,SAAS+zB,KACzBj3B,cAAe7xB,GAEnBxgC,KAAK80D,YAAY77C,KAAKqmB,KAMnB2nD,EAAA/mF,UAAAspF,WAAP,SAAkBhpD,GAEdA,EAAM5nB,QAAS,uBAhgBtB62B,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,WACVuiC,SAAA,2/CAjDA7C,EAAAA,yBAEA5L,EAAAA,kBAKA6tB,EAAAA,6CAqWKhiB,EAAAA,UAAQ,CAAAp2B,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAAC6+C,qCAjTvBve,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,oBASAA,EAAAA,yBAUAA,EAAAA,yBAUAA,EAAAA,0BAUAA,EAAAA,0BAUAA,EAAAA,0BAUAA,EAAAA,uBAMAA,EAAAA,wBAWAA,EAAAA,wBASAA,EAAAA,qBA0BAA,EAAAA,2BA+BAkc,EAAAA,0BAeAA,EAAAA,yBAeAA,EAAAA,wBAeAA,EAAAA,4BAgBAA,EAAAA,0BAgBAA,EAAAA,4BAgBAA,EAAAA,0BAMAyjB,EAAAA,YAAWtgC,KAAA,CAAC,gCAYZqmC,EAAAA,UAASrmC,KAAA,CAAC,WAAY,CAAEsmC,KAAM9R,EAAAA,8BAM9B6R,EAAAA,UAASrmC,KAAA,CAAC,WAAY,CAAEsmC,KAAM6c,gCAM9B9c,EAAAA,UAASrmC,KAAA,CAAC,oBAAqB,CAAEsmC,KAAMuQ,EAAAA,yCAMvCxQ,EAAAA,UAASrmC,KAAA,CAAC,oBAAqB,CAAEsmC,KAAMuQ,EAAAA,iBAuO5C2jC,EAngBA,CAIsCz7B,ICrDtCi+B,GAAA,WA+JI,SAAAA,EAAmBjrE,EAA+BijB,EACtCioD,GADO1pF,KAAAwe,IAAAA,EAA+Bxe,KAAAyhC,QAAAA,EACtCzhC,KAAA0pF,iBAAAA,EA5GL1pF,KAAAqnF,SAAQ,GA8CRrnF,KAAA2pF,UAAY,IAAI5iE,EAAAA,aAehB/mB,KAAAoxC,YAAc,IAAIrqB,EAAAA,aAclB/mB,KAAAsnF,YAAc,IAAIvgE,EAAAA,aAclB/mB,KAAAunF,UAAY,IAAIxgE,EAAAA,aAcf/mB,KAAAg6C,QAAmD,KACnDh6C,KAAA4pF,cAAoC,GAClC5pF,KAAA88B,SAAW,IAAIC,EAAAA,QAIrB/8B,KAAKg6C,QAAUh6C,KAAK0pF,iBAAiB10E,KAAK,IAAI7U,OAAO,MAqL7D,OA7RIX,OAAAgC,eACIioF,EAAAvpF,UAAA,YAAS,KADb,eAEU6tE,EAAU,CAAC,iBAGjB,OAFAA,EAAQvrE,KAAKxC,KAAKqnF,UAEXtZ,EAAQ17C,KAAK,sCAyGjBo3D,EAAAvpF,UAAAumD,gBAAP,WAEQzmD,KAAK6pF,UAAUlpF,SACfX,KAAK4pF,cAAgB5pF,KAAK6pF,UAAUpzE,OAAO,SAAC8M,GAA2B,OAAAA,EAAK3I,WACxE5a,KAAK4pF,cAAcjpF,QACnBX,KAAKoxC,YAAYn4B,KAAK,CAClBo5C,cAAe,KACfrkB,aAAchuC,KAAK4pF,cACnBt3B,MAAOtyD,SAShBypF,EAAAvpF,UAAAmwC,UAAP,WAAA,IAAA7+B,EAAAxR,KACI,GAAIA,KAAK6pF,UAAW,KACV9sC,EAAU/8C,KAAKg6C,QAAQwD,KAAKx9C,KAAK6pF,UAAUx5E,WAC7C0sC,IACAA,EAAQ+sC,iBAAiB,SAACC,GACtBA,EAAUxmE,KAAK+jE,YAAY9kD,KAAKC,EAAAA,UAAUjxB,EAAKsrB,WAAW4F,UAAU,SAACj2B,GACjE+E,EAAKw4E,gBAAgBv9E,KAEzBs9E,EAAUxmE,KAAKgkE,UAAU/kD,KAAKC,EAAAA,UAAUjxB,EAAKsrB,WAAW4F,UAAU,SAACj2B,GAC/D+E,EAAK03E,cAAcz8E,KAEvBs9E,EAAUxmE,KAAKuxC,YAAYtyB,KAAKC,EAAAA,UAAUjxB,EAAKsrB,WAAW4F,UAAU,SAACj2B,GACjE+E,EAAKy4E,gBAAgBx9E,KAEzBs9E,EAAUxmE,KAAKkkE,UAAUjlD,KAAKC,EAAAA,UAAUjxB,EAAKsrB,WAAW4F,UAAU,SAACj2B,GAC/D+E,EAAKg3E,cAAc/7E,KAEnBs9E,EAAUxmE,KAAK6jE,YACf2C,EAAUxmE,KAAK6tB,YAAY5O,KAAKC,EAAAA,UAAUjxB,EAAKsrB,WAAW4F,UAAU,SAACj2B,GACjE+E,EAAK04E,sBAAsBz9E,OAIvCzM,KAAKmqF,mBAAqBnqF,KAAK6pF,UAAUx5E,aAQ9Co5E,EAAAvpF,UAAAkkC,YAAP,WACIpkC,KAAK88B,SAAS56B,MAAK,GACnBlC,KAAK88B,SAASuH,YAMRolD,EAAAvpF,UAAAsoF,cAAV,SAAwBhoD,GAAxB,IAAAhvB,EAAAxR,KAEUoqF,EAAapqF,KAAK6pF,UAAUx5E,UAC5Bg6E,EAAgBD,EAAWn1E,UAAU,SAAC9E,GAAO,OAAAA,IAAOqwB,EAAM8xB,SAC3B,IAAjC9xB,EAAM6xB,cAAci4B,SACY,cAA5B9pD,EAAM6xB,cAAcpxD,KAAmD,SAA5Bu/B,EAAM6xB,cAAcpxD,IAChDjB,KAAKuqF,oBAAoBF,EAAeA,EAAgB,GAAG,EAAO7pD,EAAM6xB,gBAEnF/L,WAAW,WACP90C,EAAKq4E,UAAUx5E,UAAUg6E,EAAgB,GAAGxC,SAAShqD,cAAckT,UAGxC,eAA5BvQ,EAAM6xB,cAAcpxD,KAAoD,UAA5Bu/B,EAAM6xB,cAAcpxD,KACxDjB,KAAKuqF,oBAAoBF,EAAeA,EAAgB,GAAG,EAAM7pD,EAAM6xB,gBAGzD,cAA5B7xB,EAAM6xB,cAAcpxD,KAAmD,SAA5Bu/B,EAAM6xB,cAAcpxD,MAAmC,EAAhBopF,EACnFD,EAAWC,EAAgB,GAAGxC,SAAShqD,cAAckT,SACjB,eAA5BvQ,EAAM6xB,cAAcpxD,KAAoD,UAA5Bu/B,EAAM6xB,cAAcpxD,MACxEopF,EAAgBD,EAAWzpF,OAAS,GACpCypF,EAAWC,EAAgB,GAAGxC,SAAShqD,cAAckT,SAQvD04C,EAAAvpF,UAAA8pF,gBAAV,SAA0BxpD,GACtBxgC,KAAKsnF,YAAYruE,KAAK,CAClBo5C,cAAe7xB,EAAM6xB,cACrBC,MAAOtyD,QAOLypF,EAAAvpF,UAAAgpF,cAAV,SAAwB1oD,GACpBxgC,KAAKunF,UAAUtuE,KAAK,CAChBo5C,cAAe7xB,EAAM6xB,cACrBC,MAAOtyD,QAOLypF,EAAAvpF,UAAA+pF,gBAAV,SAA0BzpD,GACDA,EAAM8xB,MAAM10B,WAAWC,cAAcluB,4BACpD66E,EAAgBxqF,KAAK6pF,UAAUx5E,UAAU4E,UAAU,SAAC9E,GAAO,OAAAA,IAAOqwB,EAAM8xB,QACxE+3B,EAAgBrqF,KAAK6pF,UAAUx5E,UAAU4E,UAAU,SAAC9E,GAAO,OAAAA,IAAOqwB,EAAM+oD,WAC1Ec,EAAgBG,EAEhBxqF,KAAKuqF,oBAAoBF,EAAeG,GAAe,EAAMhqD,EAAM6xB,eAGnEryD,KAAKuqF,oBAAoBF,EAAeG,GAAe,EAAOhqD,EAAM6xB,gBAOlEo3B,EAAAvpF,UAAAqqF,oBAAV,SAA8BE,EAAWC,EAAaC,EAAet4B,GACjE,GAAIo4B,EAAY,GAAKzqF,KAAK6pF,UAAUlpF,QAAU8pF,GAC1CC,EAAc,GAAK1qF,KAAK6pF,UAAUlpF,QAAU+pF,EAC5C,OAAO,EAKX,QAFMN,EAAapqF,KAAK6pF,UAAUx5E,UAC5BpB,EAA6B,GAC1BzO,EAAI,EAAGA,EAAI4pF,EAAWzpF,OAAQH,IAC/BmqF,EACIF,GAAajqF,GAAKA,EAAIkqF,EACtBz7E,EAAOzM,KAAK4nF,EAAW5pF,EAAI,IACpBA,IAAMkqF,EACbz7E,EAAOzM,KAAK4nF,EAAWK,IAEvBx7E,EAAOzM,KAAK4nF,EAAW5pF,IAGvBkqF,EAAclqF,GAAKA,GAAKiqF,EACxBx7E,EAAOzM,KAAK4nF,EAAW5pF,EAAI,IACpBA,IAAMkqF,EACbz7E,EAAOzM,KAAK4nF,EAAWK,IAEvBx7E,EAAOzM,KAAK4nF,EAAW5pF,IAInCR,KAAKmqF,mBAAqBl7E,MAEpB27E,EAAwC,CAC1CR,WAAYpqF,KAAKmqF,mBACjB93B,cAAeA,EACfC,MAAOtyD,MAGX,OADAA,KAAK2pF,UAAU1wE,KAAK2xE,IACb,GAMDnB,EAAAvpF,UAAAgqF,sBAAV,SAAgC1pD,GACxBA,EAAM5lB,SACN5a,KAAK4pF,cAAcpnF,KAAKg+B,EAAM8xB,OACtB9xB,EAAM5lB,WACd5a,KAAK4pF,cAAgB5pF,KAAK4pF,cAAcnzE,OAAO,SAAC6yE,GAC5C,OAAOA,EAAKl9E,KAAOo0B,EAAM8xB,MAAMlmD,MAGvCpM,KAAKoxC,YAAYn4B,KAAK,CAClBo5C,cAAe7xB,EAAM6xB,cACrBrkB,aAAchuC,KAAK4pF,cACnBt3B,MAAOtyD,4BAzSlByvC,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,iBACVuiC,SAAA,2EAzCA7C,EAAAA,yBAWA5L,EAAAA,kBANAsiB,EAAAA,oDA2CCn2C,EAAAA,yBAMA2/B,EAAAA,YAAWtgC,KAAA,CAAC,6BAcZsgC,EAAAA,YAAWtgC,KAAA,CAAC,mBAAgB,CAAAiK,KAC5BtJ,EAAAA,sBASA2/B,EAAAA,YAAWtgC,KAAA,CAAC,oBAAiB,CAAAiK,KAC7BtJ,EAAAA,yBAeAkc,EAAAA,4BAeAA,EAAAA,4BAcAA,EAAAA,0BAcAA,EAAAA,0BAWAu9B,EAAAA,gBAAep6C,KAAA,CAACw6E,OA+LrBwC,EAtVA,GCeAoB,GAAA,WAAA,SAAAA,KAsB8B,2BAtB7Bp9E,EAAAA,SAAQhB,KAAA,CAAC,CACRiB,aAAc,CACZ+7E,GACAxC,IAEFt5E,QAAS,CACP87E,GACAxC,GACAl8B,GACAE,IAEFxS,QAAS,CACPC,EAAAA,aACAknB,GACAsM,GACAnd,GACAwe,GACA9X,GACAzK,GACAE,QAG0B2/B,EAtB9B,GCVAC,GAAA,WAAA,SAAAA,KAIA,2BAJC59E,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,uBAGd29E,EAJA,GASAC,GAAA,WAAA,SAAAA,KAIA,2BAJC79E,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,uBAGd49E,EAJA,GASAC,GAAA,WAAA,SAAAA,KAIA,2BAJC99E,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,qBAGd69E,EAJA,GASAC,GAAA,WAAA,SAAAA,KAIA,2BAJC/9E,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,sBAGd89E,EAJA,GASAC,GAAA,WAAA,SAAAA,KAKA,2BALCh+E,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2BAId+9E,EALA,GAUAC,GAAA,WAAA,SAAAA,KAIA,2BAJCj+E,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,wBAGdg+E,EAJA,GASAC,GAAA,WAAA,SAAAA,KAIA,2BAJCl+E,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2BAGdi+E,EAJA,GASAC,GAAA,WAAA,SAAAA,KAIA,2BAJCn+E,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,0BAGdk+E,EAJA,iBChEA,SAAAC,IAGWtrF,KAAAqmF,oBAAqB,EA6ChC,OA3CWiF,EAAAprF,UAAAqrF,SAAP,SAAgBC,GACZxrF,KAAKwrF,MAAQA,GAIVF,EAAAprF,UAAAopC,MAAP,WACItpC,KAAKwrF,MAAQ,MAIjBhsF,OAAAgC,eAAW8pF,EAAAprF,UAAA,iBAAc,KAAzB,WACI,OAAO,mCAEXV,OAAAgC,eAAW8pF,EAAAprF,UAAA,WAAQ,KAAnB,WACI,OAAOF,KAAKwrF,MAAMptC,0CAGfktC,EAAAprF,UAAAurF,gBAAP,WACSzrF,KAAKwrF,OAGVxrF,KAAKwrF,MAAME,uBAGflsF,OAAAgC,eAAW8pF,EAAAprF,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKwrF,MAAMp/E,oCAGfk/E,EAAAprF,UAAAyrF,kBAAP,SAAyBv9C,EAAa5N,OAC5B5lB,EAAW5a,KAAKwrF,MAAMI,eAAex9C,GAC5B,OAAXA,GAAmBA,IAAWp8B,YAG7B4I,EAGD5a,KAAKwrF,MAAMK,cAAc,CAACz9C,GAAS5N,GAFnCxgC,KAAKwrF,MAAMM,YAAY,CAAC19C,IAAS,EAAO5N,KAMzC8qD,EAAAprF,UAAAwZ,iBAAP,SAAwB00B,GACpB,OAAOpuC,KAAKwrF,MAAMI,eAAex9C,IAEzCk9C,KCrCAS,GAAA,SAAAlgE,GAoCI,SAAAkgE,EACcC,EAC2Bp8C,EAC3BhS,EACgCnkB,GAJ9C,IAAAjI,EAMIqa,EAAAjrB,KAAAZ,KAAM4vC,EAAUhS,EAAY,KAAMnkB,IAAUzZ,YALlCwR,EAAAw6E,SAAAA,EAC2Bx6E,EAAAo+B,SAAAA,EAC3Bp+B,EAAAosB,WAAAA,EACgCpsB,EAAAiI,UAAAA,EA5BvCjI,EAAAy6E,WAAa,KA2ExB,OAnF2Cz3E,EAAAA,EAAAA,GAavChV,OAAAgC,eAAWuqF,EAAA7rF,UAAA,SAAM,KAAjB,WACI,OAAOF,KAAKgsF,SAAS5tC,SAAW3T,KAAKC,UAAU1qC,KAAKmC,OAASnC,KAAKmC,uCAMtE3C,OAAAgC,eAAWuqF,EAAA7rF,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKgsF,SAASE,yCAOzB1sF,OAAAgC,eAAWuqF,EAAA7rF,UAAA,qBAAkB,KAA7B,WACI,OAAOF,KAAKgsF,SAAS3F,oDAezB7mF,OAAAgC,eAAIuqF,EAAA7rF,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAKgsF,SAAStyE,iBAAiB1Z,KAAKouC,aAG/C,SAAajsC,GACLnC,KAAKu0B,WAGTv0B,KAAK8vC,UAAY3tC,oCAMrB4pF,EAAA7rF,UAAAisF,UAAA,SAAUlmF,OACAmmF,EAAOpsF,KAAKyhC,QAAQ5D,cAAcluB,wBAClC08E,EAAYrsF,KAAKyhC,QAAQ5D,cAActD,cAAcA,cAAc5qB,wBACzE,OAAI1J,IAAcosC,GAASzE,KAChBw+C,EAAKx0D,EAAIw0D,EAAKxgF,QAAUygF,EAAUz0D,EAAIy0D,EAAUzgF,OAEpDwgF,EAAKx0D,GAAKy0D,EAAUz0D,GAI/Bm0D,EAAA7rF,UAAAkwC,QADA,SACQ5P,GAEJ,GADAxgC,KAAKgsF,SAAS3F,oBAAqB,EAC/BrmF,KAAKuvC,UAAYvvC,KAAKu0B,SAA1B,KACUqc,EAAc5wC,KAAK4vC,SAASO,MAAMn7B,KAAK,SAACuO,GAAS,OAAAA,EAAK2sB,UACxDlwC,KAAK4vC,SAASkB,iBAAmBF,GACjCA,EAAYnP,QAAQ5D,cAAckT,MAAM,CAAEC,eAAe,SAIjEhxC,KAAK4vC,SAASmC,aAAa/xC,KAAKwS,OAChCxS,KAAKgsF,SAASL,kBAAkB3rF,KAAKouC,OAAQ5N,IAGjDurD,EAAA7rF,UAAAmwC,UAAA,iCArFHZ,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,iBACVuiC,SAAA,+RANK47C,sCA0CA3mD,EAAAA,OAAMl4B,KAAA,CAACohC,aApDZ5M,EAAAA,kBAWK6M,GAAsB/sC,WAAA,CAAA,CAAA2V,KA2CtBiuB,EAAAA,OAAMl4B,KAAA,CAACqhC,6CA9BX1gC,EAAAA,OAAK,CAAAsJ,KACLq2B,EAAAA,YAAWtgC,KAAA,CAAC,oCA4DZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,cAgB5Bs/E,EAvFA,CAI2Cr7C,IChB9B47C,GAAsB,yBCEnCC,GAAA,SAAA1gE,GAAA,SAAA0gE,mDAgBA,OAX8C/3E,EAAAA,EAAAA,GAC1ChV,OAAAgC,eAAI+qF,EAAArsF,UAAA,WAAQ,KAAZ,WACI,OAAO,OAEX,SAAaiC,qCAGboqF,EAAArsF,UAAAkwC,QAAA,SAAQ5P,GACJxgC,KAAKgsF,SAAS3F,oBAAqB,EACnCrmF,KAAKgsF,SAASP,uCAdrBh8C,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,qBACVuiC,SAAU,4BACV9hC,UAAW,CAAC,CAAE84C,QAASqlC,GAAuBplC,YAAa4lC,QAa/DA,EAhBA,CAK8CR,ICG9CS,GAAA,SAAA3gE,GAMI,SAAA2gE,EACc5uD,EACApf,EACA/E,EAC0B+xE,EAC1BQ,GALd,IAAAx6E,EAMIqa,EAAAjrB,KAAAZ,KAAM49B,EAAYpf,EAAK/E,IAAUzZ,YALvBwR,EAAAosB,WAAAA,EACApsB,EAAAgN,IAAAA,EACAhN,EAAAiI,UAAAA,EAC0BjI,EAAAg6E,MAAAA,EAC1Bh6E,EAAAw6E,SAAAA,EAyBPx6E,EAAApB,SAA2C,KAyExCoB,EAAAi7E,cAAgB,WACtBj7E,EAAKw6E,SAAS3F,oBAAqB,KAyF3C,OAlM+C7xE,EAAAA,EAAAA,GAU3ChV,OAAAgC,eAAcgrF,EAAAtsF,UAAA,kBAAe,KAA7B,WACI,OAAOF,KAAK+kD,QAAQxJ,GAAG7Z,SAAS7D,+CAGpCr+B,OAAAgC,eAAcgrF,EAAAtsF,UAAA,mBAAgB,KAA9B,eACU+4B,EAAYj5B,KAAK+kD,QAAQvK,oBAAoBvhB,UAC7CyP,EAAe1oC,KAAK+kD,QAAQvK,oBAAoB9R,aACtD,OAAOpmB,KAAKmC,MAAMwU,EAAYj5B,KAAK+kD,QAAQtK,uBAAyB/R,mCAGxElpC,OAAAgC,eAAcgrF,EAAAtsF,UAAA,mBAAgB,KAA9B,WACI,OAAOF,KAAKwrF,MAAM9xC,eACdp3B,KAAKmC,MAAMzkB,KAAKwrF,MAAMkB,eAAiB1sF,KAAKwrF,MAAMS,YAClDjsF,KAAKmwC,MAAMxvC,OAAS,mCAarB6rF,EAAAtsF,UAAAkpD,QAAP,WACIppD,KAAK4wC,YAAc5wC,KAAKmxC,cAAgBnxC,KAAKmwC,MAAM,IAMhDq8C,EAAAtsF,UAAAopD,OAAP,SAAcrV,GACVj0C,KAAK4wC,YAAc,MAMhB47C,EAAAtsF,UAAAgmD,eAAP,WACIlmD,KAAKq9B,SAASpkB,QAMXuzE,EAAAtsF,UAAAkyC,cAAP,WACIpyC,KAAK+xC,aAAa/xC,KAAK+kD,QAAQrK,SAASzlC,UAAU,SAAA3S,GAAK,OAACA,EAAEiyB,aAMvDi4D,EAAAtsF,UAAAsyC,aAAP,WACQxyC,KAAKmxC,cAA4C,IAA5BnxC,KAAKmxC,aAAa3+B,OAAiD,IAAlCxS,KAAK+kD,QAAQ/3C,MAAMglC,WACzEhyC,KAAKwrF,MAAMmB,kBAAiB,GAE5B9gE,EAAA3rB,UAAMsyC,aAAY5xC,KAAAZ,OAQnBwsF,EAAAtsF,UAAAqyC,aAAP,eACUq6C,EAAY5sF,KAAKwrF,MAAM9xC,eAAiB15C,KAAKwrF,MAAM9xC,eAAiB,EAAI15C,KAAK+kD,QAAQrK,SAAS/5C,OAAS,EACzGX,KAAKmxC,cAAgBnxC,KAAKmxC,aAAa3+B,QAAUo6E,EACjD5sF,KAAK6sF,qBAELhhE,EAAA3rB,UAAMqyC,aAAY3xC,KAAAZ,OAOnBwsF,EAAAtsF,UAAAuwC,WAAP,SAAkBltB,GACD,OAATA,GAAiBA,IAASvR,YAG9BhS,KAAKgsF,SAASL,kBAAkBpoE,EAAK6qB,QACrCpuC,KAAKmxC,aAAe5tB,IAGhBipE,EAAAtsF,UAAA2sF,mBAAR,WACQ7sF,KAAKwrF,MAAMsB,uBACX9sF,KAAK4wC,YAAc5wC,KAAKmwC,MAAMnwC,KAAKmwC,MAAMxvC,OAAS,KAIhD6rF,EAAAtsF,UAAAiyC,mBAAV,SAA6BD,KAM7B1yC,OAAAgC,eAAcgrF,EAAAtsF,UAAA,iBAAc,KAA5B,WACI,OAAIF,KAAKoQ,WAAa4B,UACXhS,KAAKoQ,SAASC,UAChBa,KAAK,SAACY,EAAwBvS,GAC3B,OAAOuS,EAAEU,MAAQjT,EAAEiT,QAGxB,sCAUXhT,OAAAgC,eAAWgrF,EAAAtsF,UAAA,QAAK,KAAhB,mBACUiwC,EAAiC,GACvC,GAAInwC,KAAKoQ,WAAa4B,UAAW,KACvB+6E,EAAiB/sF,KAAmB,mBAC1C,IAAoB,IAAAgtF,EAAAx+E,EAAAu+E,GAAcE,EAAAD,EAAA9qF,QAAA+qF,EAAA7qF,KAAA6qF,EAAAD,EAAA9qF,OAAE,CAA/B,IAAMy+B,EAAKssD,EAAA9qF,MACPw+B,EAAMpM,UACP4b,EAAM3tC,KAAKm+B,yGAKvB,OAAOwP,mCAMJq8C,EAAAtsF,UAAA+kD,qBAAP,WACIjlD,KAAK+kD,QAAQvK,oBAAoBvhB,UAAYj5B,KAAKimD,iBAM/CumC,EAAAtsF,UAAAsxC,gBAAP,SAAuBvwC,GACnB,OAAQA,GACJ,KAAKwwC,GACDzxC,KAAKktF,cACL,MACJ,KAAKz7C,GACDzxC,KAAKmtF,cACL,MACJ,KAAK17C,GACDzxC,KAAK6M,UAIT2/E,EAAAtsF,UAAAgtF,YAAR,WACQltF,KAAKotF,mBACLptF,KAAKwrF,MAAME,sBAEX1rF,KAAK6M,SAIL2/E,EAAAtsF,UAAAitF,YAAR,WACQntF,KAAKotF,oBAGLptF,KAAKywC,WAAWzwC,KAAK4wC,cAIrB47C,EAAAtsF,UAAAktF,iBAAR,WACI,OAAOptF,KAAK4wC,uBAAuB27C,IAGhCC,EAAAtsF,UAAAumD,gBAAP,WACIzmD,KAAK+kD,QAAQvK,oBAAoBrY,iBAAiB,SAAUniC,KAAKysF,gBAM9DD,EAAAtsF,UAAAkkC,YAAP,WACIpkC,KAAK+kD,QAAQvK,oBAAoBvW,oBAAoB,SAAUjkC,KAAKysF,eACpEzsF,KAAK88B,SAAS56B,MAAK,GACnBlC,KAAK88B,SAASuH,gCArMrBoL,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,sBACVuiC,SAAA,6ZACA9hC,UAAW,CAAC,CAAE84C,QAAS7Y,GAAmB8Y,YAAa6lC,iDAhBzBvrD,EAAAA,kBAA9B4L,EAAAA,yBASKiB,sCAcAnJ,EAAAA,OAAMl4B,KAAA,CAAC6/E,aAhBPhB,wCAyCJzkC,EAAAA,gBAAep6C,KAAA,CAACs/E,GAAuB,CAAEhlC,aAAa,OAoK3DylC,EAvMA,CAK+C1nC,ICL/CuoC,GAAA,WAKI,SAAAA,EAAgD7B,GAAAxrF,KAAAwrF,MAAAA,EAgBpD,OAdW6B,EAAAntF,UAAA+C,UAAP,SAAiBia,EAAmB7K,EACnBkN,OACP1D,EAA4B,IAAIhH,GAAyB0K,GAC/D1D,EAAyB9G,kBAAoB1C,MACvCrF,EAAyB,CAAEmI,gBAAiB0G,EAA0BtI,SAAU,IAAI+5E,IAG1F,OAFAtgF,EAAMmI,gBAAgBJ,kBAAoB/U,KAAKwrF,MAAM+B,qBAEhDvgF,EAAMmI,gBAAgBJ,kBAAkBpU,OAI9ByV,GAASK,OAAO5I,GAAWqP,GAAalQ,GAH5CkQ,uBAflB0D,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,0FAIO+uB,EAAAA,OAAMl4B,KAAA,CAAC6/E,SAgBxBe,EArBA,kBAwBA,SAAAC,mDAMA,OAN6C94E,EAAAA,EAAAA,GAClC84E,EAAAptF,UAAAkf,sBAAP,SAA6BtI,EAAa5D,OAChCmM,EAAOnM,EAAKkJ,UACZkD,EAAMpM,EAAK9B,YAAcY,UAAY8E,EAAMA,EAAI5D,EAAK9B,WAC1D,OAAOiO,EAAKE,MAAMD,EAAKpM,EAAKwJ,UAAWxJ,EAAK5B,aAEpDg8E,GAN6C1tE,IAW7C4tE,GAAA,WAKI,SAAAA,KASJ,OAPWA,EAAAttF,UAAA+C,UAAP,SAAiBia,EAAmB7K,GAChC,OAAKA,EAAY1R,OAGFyV,GAASlF,KAAKrD,GAAWqP,GAAa7K,GAF1C6K,uBATlB0D,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,eACNiL,MAAM,4CAYV2sE,EAdA,GAmBAC,GAAA,WAKI,SAAAA,EAAgDjC,GAAAxrF,KAAAwrF,MAAAA,EA2BpD,OAzBWiC,EAAAvtF,UAAA+C,UAAP,SAAiBia,EAAmBwwE,SAEhC,GADA1tF,KAAKwrF,MAAMv1E,aAAeiH,GACpBwwE,GAAyB,IAAbA,IAAoBxwE,EAAWvc,OAC7C,OAAOuc,EAKX,QAHM/L,EAAOtD,GAAWqP,GACpBywE,EAAU,EACVC,EAAgB,KACXptF,EAAI,EAAGA,EAAI0c,EAAWvc,OAAQH,IAAK,KACpCqtF,EAAa,EACbD,IAAkB1wE,EAAW1c,GAAGktF,KAChCE,EAAgB1wE,EAAW1c,GAAGktF,GAC9BG,EAAa,GAEbA,IACA18E,EAAK4F,OAAOvW,EAAImtF,EAAS,IAAChhF,EAAA,IACrB3M,KAAKwrF,MAAMsC,UAAWF,EACvBjhF,EAAC3M,KAAKwrF,MAAMkC,UAAWE,EACvBjhF,EAAA4nB,UAAU,MAEdo5D,KAGR,OAAOx8E,uBA9BdyP,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,yFAIO+uB,EAAAA,OAAMl4B,KAAA,CAAC6/E,SA2BxBmB,EAhCA,GAqCAM,GAAA,WAAA,SAAAA,KAUA,OAHWA,EAAA7tF,UAAA+C,UAAP,SAAiBd,GACb,OAAOA,EAAMqO,MAAM,aAAa6hB,KAAK,0BAR5CzR,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,kBACNiL,MAAM,MAQVktE,EAVA,kBCzDI,SAAAC,EAAYxO,GAAZ,IAAAhuE,EACIqa,EAAAjrB,KAAAZ,OAAOA,YACPwR,EAAKy8E,UAAYzO,IASzB,OAb6ChrE,EAAAA,EAAAA,GAOzCw5E,EAAA9tF,UAAAg6B,SAAA,SAASC,EAAgBC,EAAMlV,EAAWmV,GAClCA,GACAr6B,KAAKiuF,YAETpiE,EAAA3rB,UAAMg6B,SAAQt5B,KAAAZ,KAACm6B,EAAgBC,IAEvC4zD,GAb6ClpD,OAoB7B,eACF,cAQVujB,QAAA,EAIAC,MAAA,EAIAC,QAAA,8EAeApZ,GAAU,EACR+rB,GAAO,4BA2CT,SAAAgzB,EACctwD,EACApf,EACA/E,EACAuyE,EACyCr/B,EAC/BrrB,GANxB,IAAA9vB,EAOIqa,EAAAjrB,KAAAZ,KAAM2sD,IAAuB3sD,YANnBwR,EAAAosB,WAAAA,EACApsB,EAAAgN,IAAAA,EACAhN,EAAAiI,UAAAA,EACAjI,EAAAw6E,SAAAA,EACyCx6E,EAAAm7C,uBAAAA,EAC/Bn7C,EAAA8vB,SAAAA,EAjCjB9vB,EAAA28E,iBAAkB,EAIlB38E,EAAA48E,qBAAuB,QACpB58E,EAAA68E,cAAgBvlB,GAChBt3D,EAAA88E,eAAiBnnB,GACjB31D,EAAA+8E,gBAAkB5uE,GAAeT,GACjC1N,EAAAg9E,sBAAgD,GAChDh9E,EAAAi9E,oBAA4C,GAC5Cj9E,EAAAk9E,UAAY,GAEZl9E,EAAAm9E,gBAAkB,GACpBn9E,EAAAo9E,UAAY,GACZp9E,EAAA+3C,UAAuB,KACvB/3C,EAAAsrB,SAAW,IAAIC,EAAAA,QACfvrB,EAAAgY,MAAQ,GACRhY,EAAAq9E,cAAgB,GAEhBr9E,EAAA+pD,kBAAsCL,GACtC1pD,EAAAw6B,gBAAmC,CACvC/O,eAAgB,IAAImK,GACpBlK,OAAO,EACPC,qBAAqB,EACrBiB,uBAAuB,GAEnB5sB,EAAAysD,OAAS,GAyBVzsD,EAAAs9E,YAA4C,KAM5Ct9E,EAAAu9E,WAA2C,KA+B3Cv9E,EAAAw9E,aAAiC,KAuBjCx9E,EAAAy9E,eAAmC,KAuBnCz9E,EAAA09E,eAAmC,KAqBnC19E,EAAA29E,mBAAuC,KAuBvC39E,EAAA49E,gBAAoC,KAuBpC59E,EAAA69E,cAAkC,KAqBlC79E,EAAA89E,mBAAuC,KAqBvC99E,EAAA+9E,kBAAsC,KAuFnC/9E,EAAAg+E,kBAAgC,KAUnCh+E,EAAAi+E,kBAAoB,IAAI1oE,EAAAA,aAUxBvV,EAAA4rB,UAAY,IAAIrW,EAAAA,aAUhBvV,EAAA6rB,SAAW,IAAItW,EAAAA,aAUfvV,EAAA8rB,UAAY,IAAIvW,EAAAA,aAUhBvV,EAAA+rB,SAAW,IAAIxW,EAAAA,aAUfvV,EAAAk+E,WAAa,IAAI3oE,EAAAA,aAUjBvV,EAAAm+E,cAAgB,IAAI5oE,EAAAA,aAUpBvV,EAAAo+E,cAAgB,IAAI7oE,EAAAA,aAiBpBvV,EAAApF,GAAK,aAAa+iC,KAuClB39B,EAAA8/B,SAAW,YAMX9/B,EAAA69B,KAAO,WAwCP79B,EAAAq+E,mBAAoB,EAgBpBr+E,EAAAk7E,eAAiB,IAgCjBl7E,EAAAy6E,WAAa,GAKbz6E,EAAA4X,eAAiBzJ,GAAeT,GAgBhC1N,EAAA+4C,YAAc,GAuBd/4C,EAAAs+E,kBAAoB,sBA8FpBt+E,EAAAu+E,YAAa,EAmBbv+E,EAAA+9B,UAAW,EAUX/9B,EAAAkF,KAAO,MAcPlF,EAAAg4C,MAAuBwmC,GAAc3nC,QAKrC72C,EAAAy+E,YAAc,GA0YXz+E,EAAA04C,gBAAkB,YACnB14C,EAAK+3C,UAAUK,QAAQQ,SAAW54C,EAAK+3C,UAAUK,QAAQS,SACzD74C,EAAK+3C,UAAUK,QAAQC,WAAar4C,EAAK+3C,UAAUK,QAAQO,kBAC5D34C,EAAKg4C,MAAQh4C,EAAK+3C,UAAUC,MAAQwmC,GAAc1nC,MAAQ0nC,GAAcznC,UAplC5E/2C,EAAKw6E,SAAST,SAAS/5E,KA85C/B,OAt8CuCgD,EAAAA,EAAAA,GAmEnChV,OAAAgC,eAAI0sF,EAAAhuF,UAAA,qBAAkB,KAAtB,WACI,OAAOF,KAAK+vF,YAAc/vF,KAAK6vF,mDAwMnCrwF,OAAAgC,eAAY0sF,EAAAhuF,UAAA,mBAAgB,KAA5B,SAA6BwvC,GACrBA,IACA1vC,KAAKqvF,cAAgB3/C,oCAU7BlwC,OAAAgC,eAAY0sF,EAAAhuF,UAAA,oBAAiB,KAA7B,SAA8BwvC,GACtBA,IACA1vC,KAAKivF,eAAiBv/C,oCAU9BlwC,OAAAgC,eAAY0sF,EAAAhuF,UAAA,oBAAiB,KAA7B,SAA8BwvC,GACtBA,IACA1vC,KAAKkvF,eAAiBx/C,oCAU9BlwC,OAAAgC,eAAY0sF,EAAAhuF,UAAA,kBAAe,KAA3B,SAA4BwvC,GACpBA,IACA1vC,KAAKgvF,aAAet/C,oCAU5BlwC,OAAAgC,eAAY0sF,EAAAhuF,UAAA,qBAAkB,KAA9B,SAA+BwvC,GACvBA,IACA1vC,KAAKovF,gBAAkB1/C,oCAU/BlwC,OAAAgC,eAAY0sF,EAAAhuF,UAAA,wBAAqB,KAAjC,SAAkCwvC,GAC1BA,IACA1vC,KAAKmvF,mBAAqBz/C,oCA4HlClwC,OAAAgC,eACW0sF,EAAAhuF,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAKwpD,QAAUwmC,GAAc1nC,uCAMxC9oD,OAAAgC,eACW0sF,EAAAhuF,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAKwpD,QAAUwmC,GAAcznC,yCAkBxC/oD,OAAAgC,eACW0sF,EAAAhuF,UAAA,eAAY,KADvB,WAEI,OAAQF,KAAKinD,SAASlb,2CAM1BvsC,OAAAgC,eACW0sF,EAAAhuF,UAAA,WAAQ,KADnB,WAEI,MAAO,2CAMXV,OAAAgC,eACW0sF,EAAAhuF,UAAA,WAAQ,KADnB,WAEI,OAAOF,KAAKinD,SAAS76C,oCA2FzB5M,OAAAgC,eAAW0sF,EAAAhuF,UAAA,aAAU,KAArB,WACI,OAAQF,KAAKmC,QAAUnC,KAAKuqD,6CA2BhC/qD,OAAAgC,eACI0sF,EAAAhuF,UAAA,OAAI,KADR,WAEI,OAAOF,KAAKwpB,WAEhB,SAASlK,GACLtf,KAAKwpB,MAAQ,GAAc,oCAmB/BhqB,OAAAgC,eACI0sF,EAAAhuF,UAAA,aAAU,KAqBd,WACI,OAAOF,KAAKkwF,YAAclwF,KAAKkwF,YAAclwF,KAAK8tF,cAvBtD,SACexuE,GACXtf,KAAKkwF,YAAc5wE,mCAgCvB9f,OAAAgC,eACW0sF,EAAAhuF,UAAA,WAAQ,KAcnB,WACI,OAAOF,KAAK0uF,eAhBhB,SACoBpvE,GAChBtf,KAAKmwF,aAAanwF,KAAK0uF,WACvB1uF,KAAK0uF,UAAYpvE,EACjBtf,KAAKkR,KAAKlR,KAAK0uF,4CA6EnBR,EAAAhuF,UAAA+tD,YAFA,SAEYztB,GACRA,EAAMqH,iBACNrH,EAAM4B,kBACNpiC,KAAK4M,QAMTshF,EAAAhuF,UAAAkwF,aAAA,SAAa5vD,GACTA,EAAM4B,kBACN5B,EAAMqH,iBACN7nC,KAAKwM,UAWThN,OAAAgC,eAAI0sF,EAAAhuF,UAAA,sBAAmB,KAAvB,WACI,OAAOF,KAAK+kD,QAAQ/3C,WAUxB,SAAwBA,GACpBhN,KAAK+kD,QAAQ/3C,MAAQA,mCAWzBxN,OAAAgC,eAAI0sF,EAAAhuF,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAK+kD,QAAQrL,oBAUxB,SAAmB3pB,GACf/vB,KAAK+kD,QAAQrL,eAAiB3pB,EAC9B/vB,KAAKwe,IAAIyhB,iDAMbzgC,OAAAgC,eAAW0sF,EAAAhuF,UAAA,uBAAoB,KAA/B,WACI,OAAOF,KAAK+vF,WAAa/vF,KAAKwuF,sBAAwB,QAM1D,SAAgCrsF,GAC5BnC,KAAKwuF,sBAAwBrsF,EAC7BnC,KAAKwe,IAAIC,gDAMbjf,OAAAgC,eAAW0sF,EAAAhuF,UAAA,qBAAkB,KAA7B,WACI,OAAOF,KAAKyuF,yBAMhB,SAA8BtsF,GAC1BnC,KAAKyuF,oBAAsBtsF,EAC3BnC,KAAKwe,IAAIC,gDAGHyvE,EAAAhuF,UAAAiwF,aAAV,SAAuBp6E,GACnB,GAAIA,IAAU/D,WAAuB,OAAV+D,EAA3B,KAIMu1B,EAAez9B,GAAW7N,KAAKob,oBAC/B5I,EAAQ84B,EAAar2B,UAAU,SAAC/B,GAAS,OAAAA,EAAK9B,YAAc2E,KACrD,EAATvD,IACA84B,EAAav0B,OAAOvE,EAAO,GAC3BxS,KAAKob,mBAAqBkwB,QAP1BtrC,KAAKob,mBAAqB,IAmBlC5b,OAAAgC,eAAI0sF,EAAAhuF,UAAA,QAAK,KAAT,WACI,OAAOF,KAAKi+D,wCAMhBz+D,OAAAgC,eAAW0sF,EAAAhuF,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAK+vF,WAAa/vF,KAAK6uF,cAAgB7uF,KAAKmR,UAMvD,SAAwBmO,GACpBtf,KAAK6uF,cAAgB7uF,KAAK0tF,UAAYpuE,GAAO,IAAI7I,OAAO,SAACnU,GAAM,OAAe,IAAfA,EAAEiyB,WAAqBjV,EACtFtf,KAAKqwF,8CAMFnC,EAAAhuF,UAAAowF,YAAP,SAAmB9vD,GACG,cAAdA,EAAMv/B,KAAqC,SAAdu/B,EAAMv/B,KACnCjB,KAAKinD,SAASrW,YAAc5wC,KAAKinD,SAAS9W,MAAM,GAChDnwC,KAAKwvF,kBAAkB3xD,cAAckT,SAChB,WAAdvQ,EAAMv/B,KAAkC,QAAdu/B,EAAMv/B,KACvCjB,KAAKwM,UAON0hF,EAAAhuF,UAAAgnD,cAAP,SAAqB1mB,GACC,YAAdA,EAAMv/B,KAAmC,OAAdu/B,EAAMv/B,MACjCu/B,EAAMqH,iBACNrH,EAAM4B,kBACNpiC,KAAK6M,UAILqhF,EAAAhuF,UAAAmwF,WAAR,WAAA,IAAA7+E,EAAAxR,KACUuwF,EAAavwF,KAAKuwF,WAKlBC,EAAYxwF,KAAKiW,aAAauU,KAJpB,SAACloB,GAEb,OADciuF,EAAajuF,EAAEiuF,GAAcjuF,GAC9B4M,WAAWgD,gBAAkBV,EAAKy+E,YAAYzpE,OAAOtU,gBAGtElS,KAAKmuF,gBAAkBnuF,KAAK6vF,oBAAsBW,GAM/CtC,EAAAhuF,UAAAuwF,kBAAP,SAAyBjwD,GAAzB,IAAAhvB,EAAAxR,KACQ0wF,GAAU,EACRC,EAAa3wF,KAAK+kD,QACpBvkB,IAAUxuB,WAAahS,KAAK2uF,kBAAoBnuD,IAIhDxgC,KAAK2uF,gBAAkBnuD,IAAUxuB,UAAYwuB,EAAQ,GAErDA,IAAUxuB,WAEN2+E,EAAW31C,eACX21C,EAAWxyC,SAAS,GAEpBuyC,GAAU,EAEd1wF,KAAK2vF,cAAc12E,KAAKunB,IAExBkwD,GAAU,EAEV1wF,KAAK+vF,YACL/vF,KAAKyW,SAEDi6E,GACAC,EAAWh3C,YAAYnX,KAAK+iB,EAAAA,KAAK,IAAI7iB,UAAU,WACvCiuD,EAAW31C,gBACXxpC,EAAKgN,IAAIyhB,mBAKrBjgC,KAAKqwF,eAONnC,EAAAhuF,UAAAgR,KAAP,SAAYE,EAAmBC,EAA8CC,EACzEiC,GACA,QAF2B,IAAAlC,IAAAA,EAAwBK,GAAiBb,UAAK,IAAAS,IAAAA,GAAA,QACzE,IAAAiC,IAAAA,EAA6BxC,GAAuBC,YAC/CI,EAAL,KAGM+J,EAAetN,GAAW7N,KAAKob,oBAAoB,GAEzDpb,KAAKqb,2BAA2BF,EAAc/J,EAAWC,EAAKC,EAAYiC,GAC1EvT,KAAKob,mBAAqBD,IAMvB+yE,EAAAhuF,UAAA0wF,mBAAP,SAA0BtxE,GAA1B,IAAA9N,EAAAxR,KACI,OAAKsf,GAAe,IAARA,EAGLtf,KAAK8tF,SACR9tF,KAAKmR,KAAKsF,OAAO,SAACnU,GAAM,OAAAA,EAAEkP,EAAKs8E,YAAcxuE,IAAK,GAClDtf,KAAKmR,KAAKsF,OAAO,SAACnU,GAAM,OAAAA,IAAMgd,IAJvBtN,WAOLk8E,EAAAhuF,UAAAmb,2BAAV,SAAqCrO,EAA6BoE,EAAmBC,EAAuBC,EACxGiC,GAEA,GAAIlC,IAAQK,GAAiBd,KAA7B,KAKM6B,EAAazF,EAAMgI,KAAK,SAAC9B,GAAS,OAAAA,EAAK9B,YAAcA,IAEtDqB,EAGDjT,OAAOa,OAAOoS,EAAY,CAAErB,UAASA,EAAEC,IAAGA,EAAEC,WAAUA,IAFtDtE,EAAMxK,KAAK,CAAE4O,UAASA,EAAEC,IAAGA,EAAEC,WAAUA,EAAEiC,SAAQA,SAPjDvG,EAAM+J,OAAO/J,EAAMiI,UAAU,SAAC/B,GAAS,OAAAA,EAAK9B,YAAcA,IAAY,IAgB9E5R,OAAAgC,eAAW0sF,EAAAhuF,UAAA,WAAQ,KAAnB,WACI,OAAIF,KAAK8tF,SACE+C,GAEJA,oCAMXrxF,OAAAgC,eAAW0sF,EAAAhuF,UAAA,WAAQ,KAAnB,WACI,OAA6B,EAAtBF,KAAK05C,gBACR15C,KAAK8tF,UACL9tF,KAAKqd,WAAawzE,oCAQlB3C,EAAAhuF,UAAA4wF,iBAAR,SAAyB1iD,GACrB,OAAOpuC,KAAKo+C,UAA8B,iBAAXhQ,EAAsB3D,KAAKC,UAAU0D,GAAUA,GAG1E8/C,EAAAhuF,UAAA6wF,aAAR,SAAqB3iD,GACjB,OAAOpuC,KAAKo+C,UAA8B,iBAAXhQ,EAAsB3D,KAAKumD,MAAM5iD,GAAUA,GAQvE8/C,EAAAhuF,UAAA0rF,eAAP,SAAsBroE,GAClB,OAAOvjB,KAAKyZ,UAAUC,iBAAiB1Z,KAAKoM,GAAIpM,KAAK8wF,iBAAiBvtE,KAMnE2qE,EAAAhuF,UAAA+wF,aAAP,WACIjxF,KAAKwe,IAAIyhB,iBAMNiuD,EAAAhuF,UAAA4sF,mBAAP,WAEI,MAA4B,KAArB9sF,KAAKiwF,aAAsBjwF,KAAKmuF,iBAMpCD,EAAAhuF,UAAAgxF,gBAAP,SAAuBj9C,GACfA,EAAI8pB,QACJ/9D,KAAKmxF,iBAELnxF,KAAKoxF,oBAONlD,EAAAhuF,UAAAwrF,oBAAP,mBACI,GAAK1rF,KAAKiwF,YAAV,KAGM/2E,EAAWlZ,KAAKiwF,YAAYzpE,OAC5B6qE,EAAYrxF,KAAKuwF,aAAU5jF,EAAA,IAC5B3M,KAAK8tF,UAAW50E,EACjBvM,EAAC3M,KAAKuwF,YAAar3E,KACnBA,EACAlZ,KAAK0tF,UACLluF,OAAOa,OAAOgxF,IAAS9iF,EAAA,IAAKvO,KAAK0tF,UAAW1tF,KAAKouF,qBAAoB7/E,QAEnE+iF,EAAgBtxF,KAAKmR,KACrBogF,EAAa7uF,EAAO1C,KAAKmR,MAC/BogF,EAAc/uF,KAAK6uF,OACb5kF,EAAgC,CAClC6kF,cAAaA,EAAED,UAASA,EAAEE,cAAaA,GAE3CvxF,KAAK0vF,WAAWz2E,KAAKxM,GACrBzM,KAAKmR,KAAK3O,KAAK6uF,GAGfrxF,KAAKmR,KAAOtD,GAAW7N,KAAKmR,MAC5BnR,KAAK8rF,YAAY,CAACuF,IAAY,GAC9BrxF,KAAKmuF,iBAAkB,EACvBnuF,KAAK8uF,YAAYjxD,cAAckT,QAC/B/wC,KAAKinD,SAASrW,YAAc,KAC5B5wC,KAAKywF,sBAMFvC,EAAAhuF,UAAAysF,iBAAP,SAAwB6E,GAChBxxF,KAAKyxF,oBAAsBzxF,KAAK8uF,YAChC9uF,KAAK8uF,YAAYjxD,cAAckT,QAE3BygD,EACAxxF,KAAKwvF,kBAAkB3xD,cAAckT,SAErC/wC,KAAK+uF,WAAWlxD,cAAckT,QAC9B/wC,KAAKwM,WAMP0hF,EAAAhuF,UAAAgc,6BAAV,SAAuCQ,EAAWN,EAAW9K,EAAYF,OAC/DsgF,EAAQhvF,EAAO1C,KAAKutF,sBACpB96E,EAAai/E,EAAS18E,KAAK,SAAC9B,GAAS,OAAAA,EAAK9B,YAAcA,IACxD0L,EAAgB,CAAE1L,UAASA,EAAEsL,UAASA,EAAEN,UAASA,EAAE9K,WAAUA,GAMnE,GALKmB,EAGDjT,OAAOa,OAAOoS,EAAYqK,GAF1B40E,EAASlvF,KAAKsa,GAId9c,KAAK0tF,SAAU,KACTiE,EAAcD,EAAS18E,KAAK,SAAC9B,GAAS,MAAmB,aAAnBA,EAAK9B,YAC3CwgF,EAAmB,CACrBxgF,UAAW,WAAYygF,WAAY,GACnCz1E,UAAW+qD,GAA2Bn2D,WAAWoL,UAAU,QAAS9K,YAAY,GAE/EqgF,EAGDnyF,OAAOa,OAAOsxF,EAAaC,GAF3BF,EAASlvF,KAAKovF,GAKtB5xF,KAAKutF,qBAAuBmE,GAazBxD,EAAAhuF,UAAAopD,OAAP,WACQtpD,KAAK+rC,YACD/rC,KAAKupD,YAAcvpD,KAAKupD,UAAUC,MAClCxpD,KAAKwpD,MAAQwmC,GAAcznC,QAE3BvoD,KAAKwpD,MAAQwmC,GAAc3nC,UAQhC6lC,EAAAhuF,UAAAuW,OAAP,WACIzW,KAAKkc,6BAA6Blc,KAAKiwF,YAAYzpE,OAAQsiD,GAA0B93D,WAAWoL,UAAU,aACtG,EAAMpc,KAAKqd,WAAawzE,GAAsB7+E,UAAYhS,KAAKuwF,aAMhErC,EAAAhuF,UAAAusC,SAAP,WAAA,IAAAj7B,EAAAxR,KACIA,KAAKupD,UAAYvpD,KAAKshC,SAAS/0B,IAAIulF,EAAAA,UAAW,MAC9C9xF,KAAK+xF,kBAAoB,WAAM,OAAAvgF,EAAKy1C,SAAShC,wBAC7CjlD,KAAKgsC,gBAAgBhP,iBAAmB,IAAIgxD,GAA+BhuF,KAAK+xF,mBAChF/xF,KAAKgsC,gBAAgBhP,iBAAiBlF,SAAS92B,OAAShB,KAAK49B,WAAWC,cACxE79B,KAAKyZ,UAAUkH,IAAI3gB,KAAKoM,GAAI,IAAI4C,MAM7Bk/E,EAAAhuF,UAAAumD,gBAAP,WACIzmD,KAAKiW,aAAYvT,EAAO1C,KAAKmR,MAEzBnR,KAAKupD,WACLvpD,KAAKupD,UAAUU,cAAcznB,KAAKC,EAAAA,UAAUziC,KAAK88B,WAAW4F,UAAU1iC,KAAKkqD,kBAO5EgkC,EAAAhuF,UAAAkkC,YAAP,WACIpkC,KAAK88B,SAAS56B,OACdlC,KAAK88B,SAASuH,WACdrkC,KAAKgsF,SAAS1iD,QACdtpC,KAAKyZ,UAAU6vB,MAAMtpC,KAAKoM,KAMvB8hF,EAAAhuF,UAAA8xF,YAAP,SAAmBxxD,GACfxgC,KAAK4vF,cAAc32E,KAAKunB,IAMrB0tD,EAAAhuF,UAAA+8D,WAAP,SAAkB96D,GAEdnC,KAAK8rF,YAAY3pF,GAAO,GACxBnC,KAAKwe,IAAIC,gBAMNyvE,EAAAhuF,UAAAg9D,iBAAP,SAAwBzb,GACpBzhD,KAAKu7D,kBAAoB9Z,GAMtBysC,EAAAhuF,UAAAi9D,kBAAP,SAAyB1b,KAKlBysC,EAAAhuF,UAAA+xF,iBAAP,SAAwB/T,GACpBl+E,KAAKuvC,SAAW2uC,GAMbgQ,EAAAhuF,UAAA62D,eAAP,WACI,OAAO/2D,KAAK+uF,WAAWlxD,eAM3Br+B,OAAAgC,eAAW0sF,EAAAhuF,UAAA,WAAQ,KAAnB,WAEI,OADAF,KAAK4uF,UAAY5uF,KAAKqd,SAClBrd,KAAKgvF,aACEhvF,KAAKgvF,aAEZhvF,KAAK4uF,YAAciC,GACZ7wF,KAAKkyF,gBAETlyF,KAAKmyF,mDAMhB3yF,OAAAgC,eAAW0sF,EAAAhuF,UAAA,UAAO,KAAlB,WACI,MAAO,CACHk8C,UAAWp8C,uCAOZkuF,EAAAhuF,UAAAkyF,iBAAP,SAAwB5xD,GACpBxgC,KAAKoxF,kBAAiB,EAAM5wD,GAC5BA,EAAM4B,mBAWH8rD,EAAAhuF,UAAAsM,OAAP,WACIxM,KAAKinD,SAASz6C,OAAOxM,KAAKgsC,kBAWvBkiD,EAAAhuF,UAAA0M,KAAP,WACI5M,KAAKinD,SAASr6C,KAAK5M,KAAKgsC,kBAWrBkiD,EAAAhuF,UAAA2M,MAAP,WACI7M,KAAKinD,SAASp6C,SAUlBrN,OAAAgC,eAAW0sF,EAAAhuF,UAAA,YAAS,KAApB,WACI,OAAOF,KAAKinD,SAASlb,2CAUlBmiD,EAAAhuF,UAAAmyF,cAAP,WAAA,IAAA7gF,EAAAxR,KACUmwC,EAAQxwC,MAAMgR,KAAK3Q,KAAKyZ,UAAUlN,IAAIvM,KAAKoM,KACjD,OAAOpM,KAAKo+C,SAAWjO,EAAMv5B,IAAI,SAAA2M,GAAQ,OAAA/R,EAAKu/E,aAAaxtE,KAAS4sB,GAWjE+9C,EAAAhuF,UAAA4rF,YAAP,SAAmBwG,EAAsBC,EAAiC/xD,GACtE,GAAI8xD,EAAU,KACJtkD,EAAehuC,KAAKyZ,UAAU40B,UAAUruC,KAAKoM,GAAIkmF,EAAUC,GACjEvyF,KAAKwyF,aAAaxkD,EAAcxN,KAWjC0tD,EAAAhuF,UAAA2rF,cAAP,SAAqB17C,EAAmB3P,GACpC,GAAI2P,EAAO,KACDnC,EAAehuC,KAAKyZ,UAAUi1B,aAAa1uC,KAAKoM,GAAI+jC,GAC1DnwC,KAAKwyF,aAAaxkD,EAAcxN,KAWjC0tD,EAAAhuF,UAAAixF,eAAP,SAAsBsB,EAAwBjyD,OACpCkyD,EAAa1yF,KAAKyZ,UAAUy1B,YAAYujD,EAAezyF,KAAKmR,KAAOnR,KAAKiW,cACxE+3B,EAAehuC,KAAKyZ,UAAU40B,UAAUruC,KAAKoM,GAAIsmF,GACvD1yF,KAAKwyF,aAAaxkD,EAAcxN,IAU7B0tD,EAAAhuF,UAAAkxF,iBAAP,SAAwBqB,EAAwBjyD,OACxCwN,EAAehuC,KAAKyZ,UAAUw0B,YAC9BjuC,KAAKiW,aAAatV,SAAWX,KAAKmR,KAAKxQ,QAAW8xF,IAClDzkD,EAAehuC,KAAKyZ,UAAUi1B,aAAa1uC,KAAKoM,GAAIpM,KAAKyZ,UAAUy1B,YAAYlvC,KAAKiW,gBAExFjW,KAAKwyF,aAAaxkD,EAAcxN,IAe7B0tD,EAAAhuF,UAAAglD,gBAAP,SAAuB9W,EAAauf,EAAentB,GAC/C,QADgC,IAAAmtB,IAAAA,GAAA,GACjB,OAAXvf,GAAmBA,IAAWp8B,UAAlC,KAGM2gF,EAAY3yF,KAAK4wF,mBAAmBxiD,GACxB,OAAdukD,GAAsBA,IAAc3gF,YAChC27C,EACA3tD,KAAK8rF,YAAY,CAAC6G,IAAY,EAAOnyD,GAErCxgC,KAAK6rF,cAAc,CAAC8G,GAAYnyD,MAKlC0tD,EAAAhuF,UAAAsyF,aAAV,SAAuBxkD,EAAwBxN,GAA/C,IAAAhvB,EAAAxR,KACU4yF,EAAmBjzF,MAAMgR,KAAK3Q,KAAKyZ,UAAUlN,IAAIvM,KAAKoM,KAAO,IAE7DK,EAAuC,CACzCuhC,aAFqBruC,MAAMgR,KAAKq9B,GAAgB,IAGhD0D,aAAckhD,EACdpyD,MAAKA,EACL5nB,QAAQ,GAEZ5Y,KAAKyvF,kBAAkBx2E,KAAKxM,GACvBA,EAAKmM,SACN5Y,KAAKyZ,UAAU+0B,aAAaxuC,KAAKoM,GAAIK,EAAKuhC,cAAc,GACxDhuC,KAAKi+D,OAASj+D,KAAKqd,WAAawzE,GAC5BpkF,EAAKuhC,aAAap3B,IAAI,SAACxK,GAAO,OAAAoF,EAAKu/E,aAAa3kF,GAAIoF,EAAK++E,cAAal+D,KAAK,MAC3E5lB,EAAKuhC,aAAa3b,KAAK,MAC3BryB,KAAKu7D,kBAAkB9uD,EAAKuhC,gBAQ7BkgD,EAAAhuF,UAAA2yF,cAAP,SAAqBryD,GACjBxgC,KAAKo9B,UAAUnkB,KAAKunB,GAChBA,EAAM5nB,QAGV5Y,KAAKywF,qBAMFvC,EAAAhuF,UAAA4yF,aAAP,WACI9yF,KAAKixF,eACLjxF,KAAK2sF,kBAAiB,GACtB3sF,KAAKq9B,SAASpkB,QAMXi1E,EAAAhuF,UAAA6yF,cAAP,SAAqBvyD,GACjBxgC,KAAKs9B,UAAUrkB,KAAKunB,GAChBA,EAAM5nB,SAGV5Y,KAAKiwF,YAAc,KAMhB/B,EAAAhuF,UAAA8yF,aAAP,WACIhzF,KAAK+uF,WAAWlxD,cAAckT,QAC9B/wC,KAAKu9B,SAAStkB,4BA78CrBw2B,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,YACVuiC,SAAA,wsKACA9hC,UAAW,CACP09E,GACA,CAAE5kC,QAAS4lC,GAAqB3lC,YAAaunC,GAC7C,CAAExnC,QAASsQ,EAAAA,kBAAmBrQ,YAAaG,EAAAA,WAAW,WAAM,OAAAonC,IAAoB9wB,OAAO,iDAxGhCn8B,EAAAA,kBAA5C4L,EAAAA,yBAeViB,UAuBAw9C,sCA0GAx+C,EAAAA,UAAQ,CAAAp2B,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAAC6+C,aA/I8D7mB,EAAAA,SAAQ1jC,WAAA,CAAA,CAAA2V,KAgJzFo2B,EAAAA,+CAKJgG,EAAAA,UAASrmC,KAAA,CAAC6sC,GAAmB,CAAEvG,KAAMuG,uBAMrCxG,EAAAA,UAASrmC,KAAA,CAAC+/E,GAA2B,CAAEz5C,KAAMy5C,0BAM7C15C,EAAAA,UAASrmC,KAAA,CAAC,mCAMVqmC,EAAAA,UAASrmC,KAAA,CAAC,oCA+BVm6C,EAAAA,aAAYn6C,KAAA,CAACu+E,GAAuB,CAAEj4C,KAAMuQ,EAAAA,sCAuB5CsD,EAAAA,aAAYn6C,KAAA,CAACq+E,GAAyB,CAAE/3C,KAAMuQ,EAAAA,sCAuB9CsD,EAAAA,aAAYn6C,KAAA,CAACs+E,GAAyB,CAAEh4C,KAAMuQ,EAAAA,0CAqB9CsD,EAAAA,aAAYn6C,KAAA,CAACy+E,GAA6B,CAAEn4C,KAAMuQ,EAAAA,uCAuBlDsD,EAAAA,aAAYn6C,KAAA,CAAC0+E,GAA0B,CAAEp4C,KAAMuQ,EAAAA,qCAuB/CsD,EAAAA,aAAYn6C,KAAA,CAACw+E,GAAwB,CAAEl4C,KAAMuQ,EAAAA,0CAqB7CsD,EAAAA,aAAYn6C,KAAA,CAAC2+E,GAA6B,CAAEr4C,KAAMuQ,EAAAA,yCAqBlDsD,EAAAA,aAAYn6C,KAAA,CAAC4+E,GAA4B,CAAEt4C,KAAMuQ,EAAAA,yCAGjDxQ,EAAAA,UAASrmC,KAAA,CAAC,YAAa,CAAEsmC,KAAMuQ,EAAAA,uCAG/BxQ,EAAAA,UAASrmC,KAAA,CAAC,UAAW,CAAEsmC,KAAMuQ,EAAAA,8CAM7BxQ,EAAAA,UAASrmC,KAAA,CAAC6sC,8BAQVsN,EAAAA,aAAYn6C,KAAA,CAAC,gBAAiB,CAAEsmC,KAAMuQ,EAAAA,yCAYtCsD,EAAAA,aAAYn6C,KAAA,CAAC,iBAAkB,CAAEsmC,KAAMuQ,EAAAA,yCAYvCsD,EAAAA,aAAYn6C,KAAA,CAAC,iBAAkB,CAAEsmC,KAAMuQ,EAAAA,uCAYvCsD,EAAAA,aAAYn6C,KAAA,CAAC,eAAgB,CAAEsmC,KAAMuQ,EAAAA,0CAYrCsD,EAAAA,aAAYn6C,KAAA,CAAC,kBAAmB,CAAEsmC,KAAMuQ,EAAAA,6CAYxCsD,EAAAA,aAAYn6C,KAAA,CAAC,qBAAsB,CAAEsmC,KAAMuQ,EAAAA,yCAO3CxQ,EAAAA,UAASrmC,KAAA,CAAC,oDAUV6c,EAAAA,0BAUAA,EAAAA,yBAUAA,EAAAA,0BAUAA,EAAAA,yBAUAA,EAAAA,2BAUAA,EAAAA,8BAUAA,EAAAA,8BAUAA,EAAAA,mBAgBAyjB,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,qBAgBA2/B,EAAAA,YAAWtgC,KAAA,CAAC,gBAAa,CAAAiK,KACzBtJ,EAAAA,0BAMA2/B,EAAAA,YAAWtgC,KAAA,CAAC,sDAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,oDAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,iCAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,mCAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,wCAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,wCAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,6CAkBZW,EAAAA,8BAgBAA,EAAAA,0BAgBAA,EAAAA,0BAgBAA,EAAAA,2BAqBAA,EAAAA,iCAuBAA,EAAAA,oBAWAA,EAAAA,wBAqBAA,EAAAA,0BAGAA,EAAAA,wBAkCAA,EAAAA,0BAyBAA,EAAAA,8BASAA,EAAAA,OAAK,CAAAsJ,KACLq2B,EAAAA,YAAWtgC,KAAA,CAAC,0CASZW,EAAAA,oBAUAA,EAAAA,2BAyBAC,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,YAAS,CAAAiK,KAC5CrJ,EAAAA,aAAYZ,KAAA,CAAC,wBAAyB,CAAC,cAzexC+gC,EAAAA,CAHC/R,GAAkB,4HAGoB6nB,EAAAA,oCAAAA,EAAAA,oDAYvC9V,EAAAA,CAHC/R,GAAkB,8HAGqB6nB,EAAAA,oCAAAA,EAAAA,qDAYxC9V,EAAAA,CAHC/R,GAAkB,8HAGqB6nB,EAAAA,oCAAAA,EAAAA,qDAYxC9V,EAAAA,CAHC/R,GAAkB,0HAGmB6nB,EAAAA,oCAAAA,EAAAA,mDAYtC9V,EAAAA,CAHC/R,GAAkB,gIAGsB6nB,EAAAA,oCAAAA,EAAAA,sDAYzC9V,EAAAA,CAHC/R,GAAkB,sIAGyB6nB,EAAAA,oCAAAA,EAAAA,yDA8nChD4qC,GAt8CuC1iC,IA28CvCynC,GAAA,WAAA,SAAAA,KAwB8B,2BAxB7BxlF,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACwgF,GAAmBnC,GAAuBgC,GAA6BN,GAClFJ,GAAuBG,GAAqBhB,GAA2BD,GACvEvB,GACAC,GACAC,GACAJ,GACAC,GACAI,GACAC,GACAC,IACJ19E,QAAS,CAACugF,GAAmBnC,GAAuBS,GAA2BD,GAC3EvB,GACAC,GACAC,GACAJ,GACAC,GACAI,GACAC,GACAC,IACJ5yC,QAAS,CAACmnB,GAAiBlnB,EAAAA,aAAc2U,GAAqB01B,EAAAA,YAAamQ,EAAAA,oBACvEtuC,GAAgBlX,GAAiBq5C,GAAmBv/B,GAAmBuH,GAAiBmd,IAC5Ft+D,UAAW,CAACkgC,QAEcmlD,EAxB9B,GChhDAE,GAAA,WAAA,SAAAA,KAggBA,OAnfkBA,EAAAC,gBAAd,SAA8BC,EAAmB/d,QAAA,IAAAA,IAAAA,EAAiB6d,EAAeG,oBACzEC,EAAa,GACjB,GAAIF,IAAcrhF,WAAczC,KAEzB,KACG8oD,EAAO,GAA0B86B,EAAeK,gBAChDC,EAAY9zF,MAAMgR,KAAK0nD,GACvBq7B,EAAoBr7B,EAAKvoD,QAAO,KAChC6jF,EAAkBt7B,EAAKvoD,QAAO,KAC9B8jF,EAAmBv7B,EAAKvoD,QAAO,MAEX,IAAtB8jF,GACAL,EAAW/wF,KAAK,CACZkU,KAAI,OACJm9E,gBAAiBD,EACjBE,WAAYX,EAAeY,kBAAkB17B,MAI1B,IAAvBq7B,GACAH,EAAW/wF,KAAK,CACZkU,KAAI,QACJm9E,gBAAiBH,EACjBI,WAAYX,EAAea,mBAAmB37B,MAI7B,IAArBs7B,GACAJ,EAAW/wF,KAAK,CACZkU,KAAI,MACJm9E,gBAAiBF,EACjBG,WAAYX,EAAec,iBAAiB57B,KAIpD,IAAK,IAAI73D,EAAI,EAAGA,EAAIizF,EAAU9yF,OAAQH,IAC7B2yF,EAAee,WAAWT,EAAUjzF,KACrC+yF,EAAW/wF,KAAK,CACZkU,KAAMy8E,EAAegB,UACrBN,gBAAiBrzF,EACjB2B,MAAOsxF,EAAUjzF,KAK7B+yF,EAAWriF,KAAK,SAACY,EAAGvS,GAAM,OAAAuS,EAAE+hF,gBAAkBt0F,EAAEs0F,kBAChDV,EAAeiB,uBAAuBb,QA3CtCA,EAAaJ,EAAekB,qBAAqB/e,GA6CrD,OAAOie,GAQGJ,EAAAmB,aAAd,SAA2Bf,GAEvB,QADMgB,EAAY,GACT/zF,EAAI,EAAGA,EAAI+yF,EAAW5yF,OAAQH,IACnC,GAAI+yF,EAAW/yF,GAAGkW,OAASy8E,EAAegB,UACtCI,EAAU/xF,KAAK+wF,EAAW/yF,GAAG2B,YAC1B,GAAsB,QAAlBoxF,EAAW/yF,GAAGkW,MAA4C,UAAlB68E,EAAW/yF,GAAGkW,KAC7D69E,EAAU/xF,KAAK,WACZ,GAAsB,SAAlB+wF,EAAW/yF,GAAGkW,KACrB,OAAQ68E,EAAW/yF,GAAGszF,YAClB,IAAA,UACIS,EAAU/xF,KAAK,QACf,MAEJ,IAAA,UACI+xF,EAAU/xF,KAAK,MAM/B,OAAO+xF,EAAUliE,KAAK,KAQZ8gE,EAAAqB,QAAd,SAAsBjB,GAElB,QADMl7B,EAAO,GACJ73D,EAAI,EAAGA,EAAI+yF,EAAW5yF,OAAQH,IAAK,CACxC,OAAQ+yF,EAAW/yF,GAAGszF,YAClB,IAAA,UAC0B,QAAlBP,EAAW/yF,GAAGkW,KACd2hD,EAAK71D,KAAK,KACe,UAAlB+wF,EAAW/yF,GAAGkW,KACrB2hD,EAAK71D,KAAK,KAEV61D,EAAK71D,KAAK,QAEd,MAEJ,IAAA,UAC0B,QAAlB+wF,EAAW/yF,GAAGkW,KACd2hD,EAAK71D,KAAK,MACe,UAAlB+wF,EAAW/yF,GAAGkW,KACrB2hD,EAAK71D,KAAK,MAEV61D,EAAK71D,KAAK,MAKlB+wF,EAAW/yF,GAAGkW,OAASy8E,EAAegB,WACtC97B,EAAK71D,KAAK+wF,EAAW/yF,GAAG2B,OAIhC,OAAOk2D,EAAKhmC,KAAK,KASP8gE,EAAAsB,eAAd,SAA6BC,EAAwBC,EAAqBh/B,OAQlE8R,EAMAmtB,EAbEC,EAAS1B,EAAe2B,qBAAqBJ,EAAiB/+B,GAC9Do/B,EAAW5B,EAAe6B,uBAAuBN,EAAiB/+B,GAClEs/B,EAAU9B,EAAe+B,sBAAsBR,EAAiB/+B,GAChE2nB,EAAa6V,EAAegC,kBAAkBT,EAAe,QAAkBZ,WAC/EnsB,EAAkB,KAAXktB,EAAiBn/C,SAASm/C,EAAQ,IAAM,EAC/CntB,EAAsB,KAAbqtB,EAAmBr/C,SAASq/C,EAAU,IAAM,EAAI,EAS/D,GALIttB,EADY,KAAZwtB,EACkB,YAAV3X,EAAuC,KAAO,OAE/C2X,EAGPN,EAAe,KACTS,EAAeT,EAAcpsB,cAAcr5D,WACrB,IAAxBkmF,EAAaz0F,SACbi0F,EAAaQ,EAAat6B,UAAU,EAAG,SAG3C85B,EAAa,SAEXS,EAAsB,YAAV/X,EAAuCsX,EAAWjyF,OAAO8kE,GAAQA,EAEnF,OAAKC,EAAQ,GAAe,GAARA,GAAgBA,IAAU4tB,IACnC,CAAEtoF,MAAK,UAAqB7K,MAAOwzD,GAGzCgS,EAAM,GAAOA,EAAMwrB,EAAeoC,YAAYF,EAAU3tB,EAAQ,IAAQC,IAAQ2tB,IAC1E,CAAEtoF,MAAK,UAAqB7K,MAAOwzD,GAGvC,CAAE3oD,MAAK,QAAmBi7D,KAAM,IAAIr5D,KAAKymF,EAAU3tB,EAAOC,KAGvDwrB,EAAAqC,kBAAd,SAAgCn9B,GAE5B,OADeA,EAAK1rC,QAAQ,OAAQwmE,EAAesC,cAQzCtC,EAAAuC,eAAd,SAA6BvzF,GAEzB,OADeA,EAAMwqB,QAAQ,KAAM,KAazBwmE,EAAAwC,qBAAd,SAAmCjB,EAC/B/+B,EACAz7B,EACAijD,EACAyY,OAII18E,EAKA28E,EAAUC,EARRC,EAAW5C,EAAe6C,sBAAsBtB,EAAiBx6D,GACjE+7D,EAAeF,EAASr/E,KACxBw/E,EAAqBH,EAASjC,WAG9BqC,EAAgBhD,EAAeiD,sBAAsB1B,EAAiBuB,EAActgC,GAC1Fz8C,EAAWw8B,SAASygD,EAAe,QAG7BE,EAASlD,EAAemD,eAAe5B,EAAiBqB,EAAUpgC,GACxEmgC,EAAWO,EAAO5zE,IAClBozE,EAAWQ,EAAO9zE,IAEdQ,MAAM7J,KAEFA,EADa,aAAb48E,EACW,IAEAA,OAGfS,EAAYr9E,EAChBq9E,GAAapZ,EAGI,aAAb0Y,GAAwC,aAAbC,IAC3B58E,EAAWq9E,GAGXX,GACgBC,EAAZU,IACAA,EAAYT,GAEZS,EAAYT,IACZS,EAAYV,GAEhB38E,EAAWq9E,GAEPA,GAAaV,GAAyBC,GAAbS,IACzBr9E,EAAWq9E,OAIbC,EAAWT,EAAS77D,SAAS,GAC7Bu8D,EAASV,EAAS77D,SAAS,GAC3B1X,EAAQmzC,EAAWjzC,MAAM,EAAG8zE,GAC5Bn/E,EAAMs+C,EAAWjzC,MAAM+zE,EAAQ9gC,EAAWh1D,QAG1C+1F,EAASvD,EAAewD,uBAAuBT,GAGrD,MAAO,GAAG1zE,GAFKtJ,EAAW,GAAM,GAAGw9E,EAASx9E,EAAa,GAAGA,GAE5B7B,GAUtB87E,EAAAyD,uBAAd,SAAqClC,EAAwBzsB,EAAYtS,GAErE,QADMkhC,EAAYl3F,MAAMgR,KAAKglD,GACpBn1D,EAAI,EAAGA,EAAIk0F,EAAgB/zF,OAAQH,IACP,YAA7Bk0F,EAAgBl0F,GAAGszF,aACS,QAAvBY,EAAgBl0F,GAAGkW,MAA0BuxD,EAAKF,UAAY,IACpC,UAAvB2sB,EAAgBl0F,GAAGkW,MAA4BuxD,EAAKO,WAAa,EAAI,MACzEquB,EAAU9/E,OAAO29E,EAAgBl0F,GAAG05B,SAAS,GAAI,EAAGi5D,EAAesC,aACnEoB,EAAUxkE,KAAK,KAI3B,OAAOwkE,EAAUxkE,KAAK,KASZ8gE,EAAA2D,0BAAd,SAAwCpC,EAAwB14C,OACtD+6C,EAAW5D,EAAe2B,qBAAqBJ,EAAiB14C,GAChEg7C,EAAa7D,EAAe6B,uBAAuBN,EAAiB14C,GACpEi7C,EAAY9D,EAAe+B,sBAAsBR,EAAiB14C,GAClE64C,EAAS1B,EAAe2B,qBAAqBJ,EAAiB14C,GAAO,GACrE+4C,EAAW5B,EAAe6B,uBAAuBN,EAAiB14C,GAAO,GAE/E,OAAIm3C,EAAe+D,YAAYH,EAAUlC,IAClC1B,EAAe+D,YAAYF,EAAYjC,IACvC5B,EAAegE,gBAAgBzC,EAAiBuC,GAC5C,WACa,KAAbF,GAAkC,KAAfC,GAAmC,KAAdC,EACxC,QACa,KAAbF,GAAkC,KAAfC,GAAmC,KAAdC,EACxC,UAEJ,IAGI9D,EAAAY,kBAAf,SAAiCz7B,GAC7B,OAAQA,EAAO7B,MAAM,IAAImE,OAAM,IAAqB,MAAMj6D,QACtD,KAAK,EAIL,KAAK,EAED,MAAA,UAEJ,KAAK,EAED,MAAA,YAKGwyF,EAAAa,mBAAf,SAAkC17B,GAC9B,OAAQA,EAAO7B,MAAM,IAAImE,OAAM,IAAsB,MAAMj6D,QACvD,KAAK,EAED,MAAA,UAEJ,KAAK,EAED,MAAA,YAKGwyF,EAAAc,iBAAf,SAAgC37B,GAC5B,OAAQA,EAAO7B,MAAM,IAAImE,OAAM,IAAoB,MAAMj6D,QACrD,KAAK,EAED,MAAA,UAEJ,KAAK,EAED,MAAA,YAKGwyF,EAAAkB,qBAAf,SAAoC/e,GAIhC,QAHMie,EAAa,GACbxrE,EAAY,IAAIytD,KAAKC,eAAeH,GACpCD,EAAgBttD,EAAUstD,cAAc,IAAIzmE,MACzCpO,EAAI,EAAGA,EAAI60E,EAAc10E,OAAQH,IAClC60E,EAAc70E,GAAGkW,OAASy8E,EAAegB,UACzCZ,EAAW/wF,KAAK,CACZkU,KAAMy8E,EAAegB,UACrBhyF,MAAOkzE,EAAc70E,GAAG2B,QAG5BoxF,EAAW/wF,KAAK,CACZkU,KAAM2+D,EAAc70E,GAAGkW,WAI7B0gF,EAAmBrvE,EAAUsvE,kBACnC,IAAS72F,EAAI,EAAGA,EAAI+yF,EAAW5yF,OAAQH,IACnC,OAAQ+yF,EAAW/yF,GAAGkW,MAClB,IAAA,MACI68E,EAAW/yF,GAAGszF,WAAasD,EAAiBzvB,IAC5C,MAEJ,IAAA,QAIA,IAAA,OACI4rB,EAAW/yF,GAAGszF,WAAasD,EAAiB1vB,MAMxD,OADAyrB,EAAeiB,uBAAuBb,GAC/BA,GAGIJ,EAAAe,WAAf,SAA0B1jE,GACtB,MAAY,MAAJA,GAAmC,MAAJA,GAAoC,MAAJA,GAG5D2iE,EAAAwD,uBAAf,SAAsC7C,GAClC,OAAQA,GACJ,IAAA,UACI,MAAO,IAEX,IAAA,UACI,OAAOX,EAAesC,cAKnBtC,EAAAmD,eAAf,SAA8B5B,EAAwBqB,EAAUpgC,OACxDkgC,EAAUC,EACd,OAAQC,EAASr/E,MACb,IAAA,QACIo/E,EAAW,EACXD,EAAW1C,EAAemE,iBAC1B,MAEJ,IAAA,MACIxB,EAAW,EACXD,EAAW1C,EAAeoC,YACtBpC,EAAeoE,sBAAsBpE,EAAegC,kBAAkBT,EAAe,QAAmB/+B,GACxGjgB,SAASy9C,EAAe6B,uBAAuBN,EAAiB/+B,GAAa,KACjF,MAEJ,IAAA,OAGQkgC,EAFmB,YAAnBE,EAASjC,YACTgC,EAAW,EACA,IAGXA,EAAW,WAMvB,MAAO,CAAErzE,IAAKqzE,EAAUvzE,IAAKszE,IAGlB1C,EAAAoC,YAAf,SAA2BF,EAAkB3tB,GACzC,OAAO,IAAI94D,KAAKymF,EAAU3tB,EAAO,GAAGK,WAGzBorB,EAAAiD,sBAAf,SAAqC1B,EAAwBh+E,EAAiBi/C,EAAoBnvC,QAAA,IAAAA,IAAAA,GAAA,OACxFgxE,EAAerE,EAAegC,kBAAkBT,EAAiBh+E,GAAMwjB,SACvEjrB,EAAS0mD,EAAWmF,UAAU08B,EAAa,GAAIA,EAAa,IAClE,OAAO,EAASrE,EAAeuC,eAAezmF,GAAUA,GAG7CkkF,EAAA2B,qBAAf,SAAoCJ,EAAwB/+B,EAAoBnvC,GAC5E,YAD4E,IAAAA,IAAAA,GAAA,GACrE2sE,EAAeiD,sBAAsB1B,EAAe,MAAiB/+B,EAAYnvC,IAG7E2sE,EAAA6B,uBAAf,SAAsCN,EAAwB/+B,EAAoBnvC,GAC9E,YAD8E,IAAAA,IAAAA,GAAA,GACvE2sE,EAAeiD,sBAAsB1B,EAAe,QAAmB/+B,EAAYnvC,IAG/E2sE,EAAA+B,sBAAf,SAAqCR,EAAwB/+B,EAAoBnvC,GAC7E,YAD6E,IAAAA,IAAAA,GAAA,GACtE2sE,EAAeiD,sBAAsB1B,EAAe,OAAkB/+B,EAAYnvC,IAG9E2sE,EAAAgC,kBAAf,SAAiCT,EAAwBh+E,GAErD,OADeg+E,EAAgBj+E,OAAO,SAACs/E,GAAa,OAACA,EAASr/E,OAASA,IAAO,IAInEy8E,EAAA+D,YAAf,SAA2B/0F,EAAY65C,GACnC,MAAkB,KAAV75C,GAAiC,IAAjB65C,EAAMr7C,QAAgBq7C,EAAM2e,OAAO,KAAOw4B,EAAesC,aAGtEtC,EAAAgE,gBAAf,SAA+BzC,EAAwBvyF,GACnD,OAAQgxF,EAAegC,kBAAkBT,EAAe,QAAkBZ,YACtE,IAAA,UACI,MAAkB,KAAV3xF,GAAiC,IAAjBA,EAAMxB,OAElC,IAAA,UACI,MAAkB,KAAVwB,GAAiC,IAAjBA,EAAMxB,OAElC,QACI,OAAO,IAKJwyF,EAAA6C,sBAAf,SAAqCtB,EAAwBx6D,GAGzD,OAFew6D,EAAgBj+E,OAAO,SAACgrB,GACnC,OAAAA,EAAQvH,SAAS,IAAMA,GAAYA,GAAYuH,EAAQvH,SAAS,IAAMuH,EAAQ/qB,OAASy8E,EAAegB,YAAW,IAI1GhB,EAAAoE,sBAAf,SAAqCE,EAAU9hC,GAC3C,OAAOjgB,SAASigB,EAAWmF,UAAU28B,EAASv9D,SAAS,GAAIu9D,EAASv9D,SAAS,IAAK,KAGvEi5D,EAAAiB,uBAAf,SAAsCyC,GAGlC,QAFIa,EAAa,EAERl3F,EAAI,EAAGA,EAAIq2F,EAAUl2F,OAAQH,IAElC,GAAqB,QAAjBq2F,EAAUr2F,GAAGkW,MAA2C,UAAjBmgF,EAAUr2F,GAAGkW,KAEpDmgF,EAAUr2F,GAAG05B,SAAW,CAACw9D,EAAYA,EAAa,GAClDA,GAAc,OACX,GAAqB,SAAjBb,EAAUr2F,GAAGkW,KAEpB,OAAQmgF,EAAUr2F,GAAGszF,YACjB,IAAA,UAEI+C,EAAUr2F,GAAG05B,SAAW,CAACw9D,EAAYA,EAAa,GAClDA,GAAc,EACd,MAEJ,IAAA,UAEIb,EAAUr2F,GAAG05B,SAAW,CAACw9D,EAAYA,EAAa,GAClDA,GAAc,OAIfb,EAAUr2F,GAAGkW,OAASy8E,EAAegB,YAE5C0C,EAAUr2F,GAAG05B,SAAW,CAACw9D,EAAYA,EAAa,GAClDA,MA3fYvE,EAAAK,gBAAkB,WAClBL,EAAAgB,UAAY,UACZhB,EAAAmE,iBAAmB,GACnBnE,EAAAsC,YAAc,IACdtC,EAAAG,eAAiB,KA2f7CH,EAhgBA,GCxCawE,GAA4B,8BCMzCC,GAAA,WAII,SAAAA,EAAuDC,GAAA73F,KAAA63F,YAAAA,EAW3D,OAVID,EAAA13F,UAAA+C,UAAA,SAAUd,EAAYsK,GAClB,MAAc,KAAVtK,EACIA,IAAUgxF,GAAeqC,kBAAkBx1F,KAAK63F,YAAYtD,WACrD,IAEXv0F,KAAK63F,YAAYC,cAAgB31F,EAC1BgxF,GAAeuC,eAAevzF,IAElC,wBAbdye,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,wFAGO+uB,EAAAA,OAAMl4B,KAAA,CAACkrF,SAWxBC,EAfA,GAoBAG,GAAA,WAII,SAAAA,EAAuDF,GAAA73F,KAAA63F,YAAAA,EAY3D,OAXIE,EAAA73F,UAAA+C,UAAA,SAAUd,EAAYsK,GAClB,MAAqC,KAAjCzM,KAAK63F,YAAYG,YACVh4F,KAAK63F,YAAYG,YAEO,OAA3Bh4F,KAAK63F,YAAY11F,OAAkBnC,KAAK63F,YAAY11F,QAAU6P,UACvDmhF,GAAeqC,kBAAkBx1F,KAAK63F,YAAYtD,WAElDpB,GAAeyD,uBAAuB52F,KAAK63F,YAAYnD,gBAAiB10F,KAAK63F,YAAY11F,MAAOA,wBAZtHye,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,sFAGO+uB,EAAAA,OAAMl4B,KAAA,CAACkrF,SAYxBI,EAhBA,GC3BAE,GAAA,WAYI,SAAAA,EAAmBvoD,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BAXCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,uEAHMm2C,EAAAA,eAapB20C,EAbA,OCKIC,SAAW,WACXC,OAAS,UCCbC,GAAA,WAAA,SAAAA,IAUWp4F,KAAAq4F,KAAwBC,GAAgBH,OAGxCn4F,KAAAsvD,UAAW,EASXtvD,KAAAu4F,QAAU,IAAIxxE,EAAAA,aAGd/mB,KAAAw4F,iBAAmB,IAAIzxE,EAAAA,aAGvB/mB,KAAAm7E,WAAa,kBAyCxB,OAvCI37E,OAAAgC,eACI42F,EAAAl4F,UAAA,cAAW,KADf,WAEI,OAAOF,KAAKq4F,OAASC,GAAgBJ,0CAGzC14F,OAAAgC,eACI42F,EAAAl4F,UAAA,cAAW,KADf,WAEI,OAAOF,KAAKsvD,UAAYtvD,KAAKq4F,OAASC,GAAgBH,wCAKnDC,EAAAl4F,UAAAu4F,SAFP,SAEgBj4D,GACZA,EAAMqH,iBACN7nC,KAAKu4F,QAAQt/E,QAQjBzZ,OAAAgC,eAAW42F,EAAAl4F,UAAA,aAAU,KAArB,WACI,OAAOF,KAAKq4F,OAASC,GAAgBH,wCAMlCC,EAAAl4F,UAAAw4F,cAAP,WACI14F,KAAKu4F,QAAQt/E,QAMVm/E,EAAAl4F,UAAAy4F,sBAAP,WACI34F,KAAKw4F,iBAAiBv/E,4BAnE7Bw2B,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,yBAEVuiC,SAAA,+dADS,iEAIRoD,EAAAA,UAASrmC,KAAA,CAAC,0BAGVW,EAAAA,wBAGAA,EAAAA,iCAGAA,EAAAA,gCAGAA,EAAAA,uBAGAkc,EAAAA,iCAGAA,EAAAA,2BAGAyjB,EAAAA,YAAWtgC,KAAA,CAAC,8CAGZsgC,EAAAA,YAAWtgC,KAAA,CAAC,wDAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,qDAKZY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,YAAS,CAAAiK,KACtCrJ,EAAAA,aAAYZ,KAAA,CAAC,sBAAuB,CAAC,cA4B1C2rF,EArEA,GCoDIjpD,GAAU,MAgDVypD,UAAY,YACZC,WAAa,aACbC,SAAW,WACXC,SAAW,YAcfC,GAAA,WA6QI,SAAAA,EAA+CzxD,EAA2C9F,EAC9EmvC,EAAiCqoB,GADEj5F,KAAAunC,gBAAAA,EAA2CvnC,KAAAyhC,QAAAA,EAC9EzhC,KAAA4wE,KAAAA,EAAiC5wE,KAAAi5F,WAAAA,EArPtCj5F,KAAA6tE,MAAQ,OAQR7tE,KAAAk5F,iBAAkB,EAgBTl5F,KAAAq4E,UAA+BhE,GAAST,OA8RjD5zE,KAAAoM,GAAK,mBAAmB+iC,KAqCxBnvC,KAAAsvD,UAAW,EA2BXtvD,KAAAq4F,KAAOC,GAAgBH,OASvBn4F,KAAA41F,YAAa,EAoBb51F,KAAAm5F,OAAS,IAAIpyE,EAAAA,aAcb/mB,KAAAu4F,QAAU,IAAIxxE,EAAAA,aAad/mB,KAAAoxC,YAAc,IAAIrqB,EAAAA,aAclB/mB,KAAAo5F,eAAiB,IAAIryE,EAAAA,aAcrB/mB,KAAAq5F,mBAAqB,IAAItyE,EAAAA,aAqEzB/mB,KAAAqgF,WAAY,EACZrgF,KAAA+rC,WAAY,EACZ/rC,KAAA+8D,iBAAmB,IAAI66B,GAA2B53F,MAClDA,KAAAs5F,eAAiB,IAAIvB,GAAyB/3F,MAC9CA,KAAA00F,gBAAkB,GAGlB10F,KAAA8wB,SAAU,EACV9wB,KAAAg4F,YAAc,GAEJh4F,KAAAu5F,UAAY,EACZv5F,KAAAw5F,cAAgB,KAChBx5F,KAAAy5F,eAAiB,IAE1Bz5F,KAAA23E,eAAiB,CACrBhQ,IAAK,UACLD,MAAO,QACPkQ,QAAS,QACTnQ,KAAM,WAEFznE,KAAA63E,aAAe,CACnBlQ,KAAK,EACLD,OAAO,EACPD,MAAM,GAEFznE,KAAA05F,UAAY,IAAI38D,EAAAA,QAKhB/8B,KAAAy3E,eAAwC,KACxCz3E,KAAA03E,cAAuC,KAuiBvC13E,KAAAs7D,mBAAiC,aAEjCt7D,KAAAu7D,kBAAuC,aACnD,OApjCI/7D,OAAAgC,eACWw3F,EAAA94F,UAAA,gBAAa,KADxB,WAEI,OAAOF,KAAK23E,oBAoBhB,SAAyBY,GACrBv4E,KAAK23E,eAAiBn4E,OAAOa,OAAOL,KAAK23E,eAAgBY,oCAa7D/4E,OAAAgC,eACWw3F,EAAA94F,UAAA,SAAM,KADjB,WAEI,OAAQF,KAAK25F,UAAY3nF,UAAa4nF,GAAwBhB,UAAY54F,KAAK25F,aAYnF,SAAkBrhC,GACdt4D,KAAK25F,QAAUrhC,mCA0BnB94D,OAAAgC,eACWw3F,EAAA94F,UAAA,cAAW,KADtB,WAEI,OAAOF,KAAK63E,kBAehB,SAAuBW,GACnBx4E,KAAK63E,aAAer4E,OAAOa,OAAOL,KAAK63E,aAAcW,oCASzDh5E,OAAAgC,eACWw3F,EAAA94F,UAAA,gBAAa,KADxB,WAEI,OAAOF,KAAKy3E,oBAehB,SAAyBt1E,GACrBnC,KAAKy3E,eAAiBt1E,mCAS1B3C,OAAAgC,eACWw3F,EAAA94F,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAK03E,mBAehB,SAAwBv1E,GACpBnC,KAAK03E,cAAgBv1E,mCAGzB3C,OAAAgC,eACWw3F,EAAA94F,UAAA,uBAAoB,KAD/B,WAEI,OAAOF,KAAK65F,mBAGhB,SAAgC13F,GAC5BnC,KAAK65F,cAAgB13F,mCAGzB3C,OAAAgC,eACWw3F,EAAA94F,UAAA,0BAAuB,KADlC,WAEI,OAAOF,KAAK85F,sBAGhB,SAAmC33F,GAC/BnC,KAAK85F,iBAAmB33F,mCAiB5B3C,OAAAgC,eAAWw3F,EAAA94F,UAAA,cAAW,KAAtB,WACI,OAAIF,KAAKmC,MACEnC,KAAK+5F,qBAAqB/5F,KAAK+nB,UAAW/nB,KAAKmC,OAEnD,oCAMX3C,OAAAgC,eAAWw3F,EAAA94F,UAAA,kBAAe,KAA1B,WAOI,OANIF,KAAKi+D,QACLj+D,KAAKg6F,iBAAoBh6F,KAAkB,cAAIA,KAAKi6F,eAAej6F,KAAKi+D,QAAUj+D,KAAKk6F,gBAAgBl6F,KAAKi+D,QAC5Gj+D,KAAK8wB,SAAU,GAEf9wB,KAAKg6F,iBAAoBh6F,KAAkB,cAAImzF,GAAeqC,kBAAkBx1F,KAAKu0F,WAAa,GAE/Fv0F,KAAKg6F,sBAGhB,SAA2B73F,GACvBnC,KAAKg6F,iBAAmB73F,mCAa5B3C,OAAAgC,eAAIw3F,EAAA94F,UAAA,WAAQ,KAAZ,WACI,OAAIF,KAAKm6F,4BACEn6F,KAAKm6F,4BAA4BzqD,SAEpC1vC,KAAKq4F,OAASC,GAAgBH,OAAUn4F,KAAKo6F,2BAA6Bp6F,KAAKq6F,4DAO3F76F,OAAAgC,eAAIw3F,EAAA94F,UAAA,UAAO,KAAX,WAAA,IAAAsR,EAAAxR,KACI,MAAO,CACHuvC,SAAUvvC,KAAKuvC,SACf6qC,cAAep6E,KAAKo6E,cACpBkgB,YAAat6F,KAAKs6F,YAClBhiC,OAAQt4D,KAAKs4D,OACbs9B,WAAY51F,KAAK41F,WACjB/nB,MAAO7tE,KAAK6tE,MACZqrB,gBAAiBl5F,KAAKk5F,gBACtB5jB,OAAQt1E,KAAKs1E,OACbjd,KAAMr4D,KAAKq4D,KACXggC,KAAMr4F,KAAKq4F,KACXva,aAAc99E,KAAK89E,aACnB37E,MAAOnC,KAAKmC,MACZo4F,WAAY,WAAQ/oF,EAAK+oF,gDAajC/6F,OAAAgC,eACWw3F,EAAA94F,UAAA,QAAK,KADhB,WAEI,OAAOF,KAAKi+D,YAGhB,SAAiBgK,GACbjoE,KAAKi+D,OAASgK,EACdjoE,KAAKu7D,kBAAkB0M,oCAgRpB+wB,EAAA94F,UAAAs6F,aAFP,SAEoBh6D,GAChBxgC,KAAKu6F,aACL/5D,EAAMqH,kBAgBHmxD,EAAA94F,UAAA+8D,WAAP,SAAkB96D,GACdnC,KAAKmC,MAAQA,EACbnC,KAAK4wE,KAAKnyD,gBAMPu6E,EAAA94F,UAAAg9D,iBAAP,SAAwBzb,GAAyBzhD,KAAKu7D,kBAAoB9Z,GAKnEu3C,EAAA94F,UAAAi9D,kBAAP,SAAyB1b,GAAkBzhD,KAAKs7D,mBAAqB7Z,GAG9Du3C,EAAA94F,UAAA62D,eAAP,eACQ0jC,EAMJ,OAJIA,EADAz6F,KAAKq4F,OAASC,GAAgBJ,SACdl4F,KAAkB,cAAIA,KAAK06F,cAAgB16F,KAAKg8C,MAEhDh8C,KAAkB,cAAIA,KAAK26F,cAAgB36F,KAAKg8C,OAE5Cy+C,EAAa58D,cAAgB,MAMlDm7D,EAAA94F,UAAAusC,SAAP,WAAA,IAAAj7B,EAAAxR,KACIA,KAAK46F,kBAAoB,CACrB7gE,cAAe96B,EACf+6B,eAAgB56B,OAGdijC,EAAUriC,KAAKqiC,SAAWrwB,UAAahS,KAAKqiC,OAASriC,KAAK66F,gBAChE76F,KAAK86F,yBAA2B,CAC5B39D,qBAAqB,EACrBD,OAAO,EACPD,eAAgB,IAAImK,GACpBpK,iBAAkB,IAAI6I,GAAqB7lC,KAAK46F,mBAChDv4D,OAAQA,GAGZriC,KAAK+6F,sBAAwB,CACzB59D,qBAAqB,EACrBD,OAAO,EACPmF,OAAQA,GAGZriC,KAAKunC,gBAAgBnK,UAAUoF,KAC3B/rB,EAAAA,OAAO,SAACukF,GAAY,OAAAA,EAAQ5uF,KAAOoF,EAAKypF,eACxCx4D,EAAAA,UAAUziC,KAAK05F,YAAYh3D,UAAU,SAACpD,GAClC9tB,EAAK0pF,WAAW57D,KAGxBt/B,KAAKunC,gBAAgBlK,SAASmF,KAC1B/rB,EAAAA,OAAO,SAACukF,GAAY,OAAAA,EAAQ5uF,KAAOoF,EAAKypF,eACxCx4D,EAAAA,UAAUziC,KAAK05F,YAAYh3D,UAAU,SAACpD,GAClC9tB,EAAK2pF,UAAU77D,KAGvBt/B,KAAKunC,gBAAgBhK,SAASiF,KAC1B/rB,EAAAA,OAAO,SAAAukF,GAAW,OAAAA,EAAQ5uF,KAAOoF,EAAKypF,eACtCx4D,EAAAA,UAAUziC,KAAK05F,YAAYh3D,UAAU,WACjClxB,EAAK4pF,cAGTp7F,KAAKq4F,OAASC,GAAgBJ,WAC9Bl4F,KAAK00F,gBAAkBvB,GAAeC,gBAAgBpzF,KAAKq4D,KAAMr4D,KAAKs1E,QAClEt1E,KAAKq4D,OAASrmD,YACdhS,KAAKq4D,KAAO86B,GAAeqB,QAAQx0F,KAAK00F,kBAE5C10F,KAAKu0F,UAAYpB,GAAemB,aAAat0F,KAAK00F,mBAOnDsE,EAAA94F,UAAAumD,gBAAP,WAAA,IAAAj1C,EAAAxR,KACQA,KAAKq4F,OAASC,GAAgBJ,UAAYl4F,KAAK06F,eAC/Cn4D,EAAAA,UAAUviC,KAAK06F,cAAc78D,cAAe,WAAW2E,KACnD6uB,EAAAA,SAAS,WAAM,OAAAC,EAAAA,SAAS,EAAGC,EAAAA,2BAC3B9uB,EAAAA,UAAUziC,KAAK05F,YACjBh3D,UAAU,SAAC/vB,GAAQ,OAAAnB,EAAKi2E,UAAU90E,MAOrCqmF,EAAA94F,UAAAkkC,YAAP,WACQpkC,KAAKi7F,cACLj7F,KAAKunC,gBAAgBrI,KAAKl/B,KAAKi7F,cAEnCj7F,KAAK05F,UAAUx3F,MAAK,GACpBlC,KAAK05F,UAAUr1D,YAcZ20D,EAAA94F,UAAAy4F,sBAAP,eACU/a,EAAQ,IAAIhvE,KAAKA,KAAKg5D,OAC5B5nE,KAAKq7F,gBAAgBzd,IAgBlBob,EAAA94F,UAAAw4E,WAAP,SAAkBzQ,GACdjoE,KAAKmC,MAAQ8lE,EACbjoE,KAAKoxC,YAAYn4B,KAAKgvD,GACtBjoE,KAAKu7D,kBAAkB0M,IAcpB+wB,EAAA94F,UAAAm6E,aAAP,WACIr6E,KAAKmC,MAAQ,KACTnC,KAAKs7F,UACLt7F,KAAKs7F,SAASjhB,eAElBr6E,KAAKu7D,kBAAkB,OAQpBy9B,EAAA94F,UAAAq6F,WAAP,WACI,GAAKv6F,KAAK+rC,UAGV,OAAQ/rC,KAAKq4F,MACT,KAAKC,GAAgBH,OACjBn4F,KAAKqgF,WAAY,MACXkb,EAAgBv7F,KAAKw7F,uBAAyBxpF,UAAahS,KAAK65F,cAAgB75F,KAAK+6F,sBAC3F/6F,KAAKi7F,aAAej7F,KAAKunC,gBAAgBvM,OAAOo9D,GAA+BmD,EAAcv7F,KAAKi5F,YAClGj5F,KAAKunC,gBAAgBzI,KAAK9+B,KAAKi7F,aAAcM,GAC7C,MAEJ,KAAKjD,GAAgBJ,SACjBl4F,KAAKqgF,WAAY,MACbob,OAAe,EAGnB,GAAIz7F,KAAK07F,0BAA4B1pF,UACjCypF,EAAkBz7F,KAAK85F,qBACpB,CACH2B,EAAkBz7F,KAAK86F,6BACnBa,OAAc,EAElB,GAAI37F,KAAK47F,mBACLD,EAAiB37F,KAAK47F,mBAAmB/9D,kBACtC,CACH,IAAI79B,KAAK67F,uBAIL,MAAM,IAAIvtF,MAAM,gGAFhBqtF,EAAiB37F,KAAK67F,uBAAuBh+D,cAMrD49D,EAAgBz+D,iBAAiBlF,SAAS92B,OAAS26F,EAGvD37F,KAAKi7F,aAAej7F,KAAKunC,gBAAgBvM,OAAOo9D,GAA+BqD,EAAiBz7F,KAAKi5F,YACrGj5F,KAAKunC,gBAAgBzI,KAAK9+B,KAAKi7F,aAAcQ,KAWlDzC,EAAA94F,UAAAw4F,cAAP,WACI14F,KAAKunC,gBAAgBrI,KAAKl/B,KAAKi7F,eAQ5BjC,EAAA94F,UAAAopC,MAAP,WACItpC,KAAK8wB,SAAU,EACf9wB,KAAKg4F,YAAc,GACnBh4F,KAAKq6E,eACLr6E,KAAK87F,mBAAmB,IAWrB9C,EAAA94F,UAAAm7F,gBAAP,SAAuBpzB,GACfjoE,KAAKmC,QACL8lE,EAAK8zB,SAAS/7F,KAAKmC,MAAMsmE,YACzBR,EAAK+zB,WAAWh8F,KAAKmC,MAAMumE,cAC3BT,EAAKg0B,WAAWj8F,KAAKmC,MAAMwmE,cAC3BV,EAAKi0B,gBAAgBl8F,KAAKmC,MAAMymE,oBAGpC5oE,KAAKmC,MAAQ8lE,EACbjoE,KAAKs7F,SAASljB,SAAWnQ,EACzBjoE,KAAKu7D,kBAAkB0M,GACvBjoE,KAAK04F,gBACL14F,KAAKoxC,YAAYn4B,KAAKgvD,IAWnB+wB,EAAA94F,UAAAopD,OAAP,SAAc9oB,GACVxgC,KAAKm8F,eAAgB,EACrBn8F,KAAKo8F,cAAc57D,EAAMx/B,OAAOmB,MAAOq+B,EAAM9pB,OAU1CsiF,EAAA94F,UAAAkpD,QAAP,WACIppD,KAAKm8F,eAAgB,EACjBn8F,KAAKmC,OAA8B,KAArBnC,KAAKg4F,cACnBh4F,KAAKg6F,iBAAmBh6F,KAAKi6F,eAAej6F,KAAKmC,SAYlD62F,EAAA94F,UAAAunF,UAAP,SAAiBjnD,GACb,OAAQA,EAAMv/B,KACV,IAAA,UACA,IAAA,KACIu/B,EAAMqH,iBACNrH,EAAM4B,kBACNpiC,KAAKq8F,UAAU77D,EAAMx/B,OAAOmB,MAAO,EAAGq+B,EAAM9pB,MAC5C,MACJ,IAAA,YACA,IAAA,OACQ8pB,EAAM2uC,OACNnvE,KAAKu6F,cAEL/5D,EAAMqH,iBACNrH,EAAM4B,kBACNpiC,KAAKq8F,UAAU77D,EAAMx/B,OAAOmB,OAAQ,EAAGq+B,EAAM9pB,SAgBtDsiF,EAAA94F,UAAAgoC,QAAP,SAAe1H,GACX,GAAIxgC,KAAKm8F,cAAe,CACpB37D,EAAMqH,iBACNrH,EAAM4B,sBACA6S,EAAuB,EAAfzU,EAAM6U,QAAe,EAAI,EACvCr1C,KAAKq8F,UAAU77D,EAAMx/B,OAAOmB,MAAO8yC,EAAMzU,EAAM9pB,QAWhDsiF,EAAA94F,UAAAwpD,QAAP,SAAelpB,GAAf,IAAAhvB,EAAAxR,KACUs8F,EAAc97D,EAAMx/B,OAAOmB,MAC3Bo6F,EAAiBv8F,KAAKw8F,qBACtBC,EAAatJ,GAAe2D,0BAA0B92F,KAAK00F,gBAAiB4H,GAClFt8F,KAAKm8F,eAAgB,EAEjBG,IAAgBnJ,GAAeqC,kBAAkBx1F,KAAKu0F,aACtDv0F,KAAK8wB,SAAU,GAIA,aAAf2rE,GAAiD,0BAApBj8D,EAAMk8D,WACnC18F,KAAKg6F,iBAAmBsC,EACxBt8F,KAAKo8F,cAAcE,EAAa97D,EAAM9pB,MACtC1W,KAAK87F,mBAAmBS,IACF,YAAfE,GAEPz8F,KAAKq6E,eACL9hC,sBAAsB,WAClB/mC,EAAKulD,iBAAiB50D,MAAQm6F,EAC9B9qF,EAAKsqF,mBAAmBS,MAEN,UAAfE,IAEPz8F,KAAK8wB,SAAU,EACf9wB,KAAKq6E,iBAIL2e,EAAA94F,UAAAk8F,cAAR,SAAsBO,EAAoBC,GACtC,GAAmB,KAAfD,EAAmB,KACbhI,EAAgB30F,KAAKmC,MACrBwzD,EAAiC,SAAnBinC,EAA6B58F,KAAK83F,cAAgB6E,EAChEE,EAAe1J,GAAesB,eAAez0F,KAAK00F,gBAAiBC,EAAeh/B,GAExF,GAAsB,UAAlBknC,EAAa7vF,MAA2B,KAClCkM,EAAW2jF,EAAa50B,KAS9B,GAPI0sB,IACAz7E,EAAS6iF,SAASpH,EAAclsB,YAChCvvD,EAAS8iF,WAAWrH,EAAcjsB,cAClCxvD,EAAS+iF,WAAWtH,EAAchsB,cAClCzvD,EAASgjF,gBAAgBvH,EAAc/rB,oBAGhB,OAAvB5oE,KAAKo6E,eACsB,OAAvBp6E,KAAKo6E,gBAA2BpH,GAAe95D,EAAUlZ,KAAKo6E,eAClEp6E,KAAKmC,MAAQ+W,EACblZ,KAAKg4F,YAAc,GACnBh4F,KAAKu7D,kBAAkBriD,OACpB,KACGzM,EAAyC,CAC3CqwF,WAAY98F,KACZi9C,aAAc/jC,GAElBlZ,KAAKo5F,eAAengF,KAAKxM,QAE1B,CACGA,EAA6C,CAC/CqwF,WAAY98F,KACZ+8F,UAAWpI,GAEf30F,KAAKg4F,YAAc2E,EACnB38F,KAAKq5F,mBAAmBpgF,KAAKxM,MAKjCusF,EAAA94F,UAAAm8F,UAAR,SAAkB1mC,EAAoB1gB,EAAc+nD,GAChDh9F,KAAKm8F,eAAgB,EACrBn8F,KAAK8wB,SAAU,MACTyrE,EAAiBv8F,KAAKw8F,qBAEtBS,EACF9J,GAAewC,qBAAqB31F,KAAK00F,gBAAiB/+B,EAAY4mC,EAAgBv8F,KAAKu5F,UAAYtkD,EAAMj1C,KAAK41F,YAEtH51F,KAAK+2D,iBAAiB50D,MAAQ86F,EAC9Bj9F,KAAK87F,mBAAmBS,GAGL,aADApJ,GAAe2D,0BAA0B92F,KAAK00F,gBAAiBuI,KAE9Ej9F,KAAKm8F,eAAgB,EACrBn8F,KAAKo8F,cAAca,EAAoBD,GACvCh9F,KAAK87F,mBAAmBS,KAIxBvD,EAAA94F,UAAAg7F,WAAR,SAAmB16D,GACfxgC,KAAKk9F,6BAA6B18D,EAAMjB,aAAavuB,UACrDhR,KAAK+rC,WAAY,GAGbitD,EAAA94F,UAAAi7F,UAAR,SAAkB36D,GACdxgC,KAAKs7D,qBACLt7D,KAAKm5F,OAAOlgF,KAAKjZ,MAEbA,KAAKs7F,UACLt7F,KAAKm9F,sBAILnE,EAAA94F,UAAAk7F,UAAR,WACIp7F,KAAK+rC,WAAY,EACjB/rC,KAAKi7F,aAAe,KACpBj7F,KAAKu4F,QAAQt/E,KAAKjZ,MAEdA,KAAK+2D,kBACL/2D,KAAK+2D,iBAAiBhmB,SAItBioD,EAAA94F,UAAAg9F,6BAAR,SAAqCE,GAArC,IAAA5rF,EAAAxR,KACIA,KAAKs7F,SAAW8B,EAAkB9B,aAC5B+B,EAAcr9F,KAAKsvD,UAAYtvD,KAAKq4F,OAASC,GAAgBH,OACnEn4F,KAAKs7F,SAASjb,UAAYrgF,KAAKqgF,UAC/BrgF,KAAKs7F,SAAS/iB,cAAgBv4E,KAAKu4E,cACnCv4E,KAAKs7F,SAAS9iB,YAAcx4E,KAAKw4E,YACjCx4E,KAAKs7F,SAAShmB,OAASt1E,KAAKs1E,OAC5Bt1E,KAAKs7F,SAAShsC,SAAW+tC,EACzBr9F,KAAKs7F,SAASjjB,UAAYr4E,KAAKq4E,UAC/Br4E,KAAKs7F,SAASxd,aAAe99E,KAAK89E,aAClC99E,KAAKs7F,SAASlhB,cAAgBp6E,KAAKo6E,cACnCp6E,KAAKs7F,SAASrM,eAAiBjvF,KAAKivF,eACpCjvF,KAAKs7F,SAASgC,kBAAoBt9F,KAAKs9F,kBACvCt9F,KAAKs7F,SAASlqD,YAAY5O,KAAKC,EAAAA,UAAUziC,KAAK05F,YAAYh3D,UAAU,SAAChF,GAAa,OAAAlsB,EAAK6pF,gBAAgB39D,KAEnG19B,KAAKmC,QACLnC,KAAKs7F,SAASn5F,MAAQnC,KAAKmC,MAC3BnC,KAAKs7F,SAASljB,SAAWp4E,KAAKmC,OAGlCi7F,EAAkB/E,KAAOr4F,KAAKq4F,KAC9B+E,EAAkB9tC,SAAW+tC,EAC7BD,EAAkBG,kBAAoBv9F,KAAKu9F,kBAC3CH,EAAkBI,iBAAmBx9F,KAAKw9F,iBAE1CJ,EAAkB7E,QAAQ/1D,KAAKC,EAAAA,UAAUziC,KAAK05F,YAAYh3D,UAAU,WAAM,OAAAlxB,EAAKknF,kBAC/E0E,EAAkB5E,iBAAiBh2D,KAAKC,EAAAA,UAAUziC,KAAK05F,YAAYh3D,UAAU,WAAM,OAAAlxB,EAAKmnF,2BAIpFK,EAAA94F,UAAAi9F,mBAAR,WAAA,IAAA3rF,EAAAxR,KACIu4C,sBAAsB,WAClB/mC,EAAK8pF,SAAS9a,SAASrB,qBAIvB6Z,EAAA94F,UAAAu9F,iBAAR,SAAyBt7F,GACrB,OAAOA,EAAMu7F,mBAAmB19F,KAAKs1E,SAGjC0jB,EAAA94F,UAAAs8F,mBAAR,WACI,OAAOx8F,KAAK+2D,iBAAiB0E,gBAGzBu9B,EAAA94F,UAAA47F,mBAAR,SAA2Bt5E,EAAenL,GAA1C,IAAA7F,EAAAxR,UAA0C,IAAAqX,IAAAA,EAAAmL,GACtC+1B,sBAAsB,WAClB/mC,EAAKulD,iBAAiBiG,kBAAkBx6C,EAAOnL,MAS/C2hF,EAAA94F,UAAA65F,qBAAR,SAA6BhyE,EAAgCkgD,GACzD,OAAOjoE,KAAK+nB,UAAY/nB,KAAK+nB,UAAUkgD,GAAQjoE,KAAKy9F,iBAAiBx1B,IASjE+wB,EAAA94F,UAAAg6F,gBAAR,SAAwB/3F,GACpB,IAAInC,KAAKs4D,QAAWt4D,KAAK+nB,UAIrB,OAAO/nB,KAAK+5F,qBAAqB/5F,KAAK+nB,UAAW5lB,OAH3CmzE,EAASt1E,KAAKs1E,QAAUt1E,KAAKw5F,cACnC,OAAOmE,EAAAA,WAAWx7F,EAAOnC,KAAKs4D,OAAQgd,IAMtC0jB,EAAA94F,UAAA+5F,eAAR,SAAuB93F,OACbmzE,EAASt1E,KAAKs1E,QAAUt1E,KAAKw5F,cAC7BoE,EAAe,EAAUD,EAAAA,WAAWx7F,EAAOnC,KAAKq4D,KAAMid,GAAU,GACtE,OAAO6d,GAAeyD,uBAAuB52F,KAAK00F,gBAAiB10F,KAAKmC,MAAOy7F,wBA3mCtFnuD,EAAAA,UAAShjC,KAAA,CAAC,CACPmB,UACI,CAAC,CACG84C,QAASsQ,EAAAA,kBACTrQ,YAAaqyC,EACb57B,OAAO,IAGfjwD,SAAU,kBACVuiC,SAAA,w4CACS,gHAlGTpT,GAAiBv7B,WAAA,CAAA,CAAA2V,KAqWJiuB,EAAAA,OAAMl4B,KAAA,CAAC6vB,aA7XpB2E,EAAAA,kBAGA4L,EAAAA,yBAEAgxD,EAAAA,8CAmICzwF,EAAAA,+BAQAA,EAAAA,sBASAA,EAAAA,yBAQAA,EAAAA,6BAYAA,EAAAA,sBAoCAA,EAAAA,oBA4BAA,EAAAA,2BAaAA,EAAAA,6BA2BAA,EAAAA,4BA2BAA,EAAAA,oCAqBAA,EAAAA,uCASAA,EAAAA,qBA+FAA,EAAAA,kBAgBA2/B,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,yBAmBAA,EAAAA,wBASAA,EAAAA,wBASAA,EAAAA,gCASAA,EAAAA,iCASAA,EAAAA,oBASAA,EAAAA,0BASAA,EAAAA,sBAMAA,EAAAA,sBAcAkc,EAAAA,wBAcAA,EAAAA,4BAaAA,EAAAA,+BAcAA,EAAAA,mCAcAA,EAAAA,gCAMAwpB,EAAAA,UAASrmC,KAAA,CAAC,mBAAoB,CAAEsmC,KAAM9R,EAAAA,iDAMtC6R,EAAAA,UAASrmC,KAAA,CAAC,6BAA8B,CAAEsmC,KAAMuQ,EAAAA,kDAMhDxQ,EAAAA,UAASrmC,KAAA,CAAC,6BAA8B,CAAEsmC,KAAMuQ,EAAAA,0CAMhDxQ,EAAAA,UAASrmC,KAAA,CAAC,qBAAsB,CAAEsmC,KAAM9R,EAAAA,6CAMxC2lB,EAAAA,aAAYn6C,KAAA,CAAC,iBAAkB,CAAEsmC,KAAM9R,EAAAA,oCAMvC6R,EAAAA,UAASrmC,KAAA,CAAC,gBAAiB,CAAEsmC,KAAM9R,EAAAA,oCAMnC6R,EAAAA,UAASrmC,KAAA,CAAC,gBAAiB,CAAEsmC,KAAM9R,EAAAA,4BAMnC2lB,EAAAA,aAAYn6C,KAAA,CAAC+7C,yCAMb5B,EAAAA,aAAYn6C,KAAA,CAACwrF,GAAgC,CAAEllD,KAAMklD,6BAMrDrxC,EAAAA,aAAYn6C,KAAA,CAACoqE,GAAoC,CAAE9jC,KAAM8jC,gCAMzDjwB,EAAAA,aAAYn6C,KAAA,CAACqqE,GAAuC,CAAE/jC,KAAM+jC,2BA8C5DzpE,EAAAA,aAAYZ,KAAA,CAAC,mBAAoB,CAAC,YAAS,CAAAiK,KAC3CrJ,EAAAA,aAAYZ,KAAA,CAAC,gBAAiB,CAAC,cA8hBpCusF,EAjnCA,GAsnCA8E,GAAA,WAAA,SAAAA,KAOmC,2BAPlCrwF,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACsrF,GAAwBZ,GACnCH,GAAgCL,GAA4BG,IAChEpqF,QAAS,CAACqrF,GAAwBf,GAAgCL,GAA4BG,IAC9Ft/C,QAAS,CAACC,EAAAA,aAAcwzB,GAAe7e,GAAqBy1B,GAAmB/zB,GAAiB6Q,GAAiBvC,IACjHxY,gBAAiB,CAACuzC,QAEa0F,EAPnC,GC5uCAC,GAAA,WAAA,SAAAA,IAMW/9F,KAAAg+F,cAAe,EACzB,2BAPA9wF,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,8EAIT4/B,EAAAA,YAAWtgC,KAAA,CAAC,qCAEhBsxF,EAPD,GAYAE,GAAA,WAAA,SAAAA,IAMWj+F,KAAA8qD,cAAe,EACzB,2BAPA59C,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,kFAIT4/B,EAAAA,YAAWtgC,KAAA,CAAC,uCAEhBwxF,EAPD,GCWIC,GAAY,EAwBhBC,GAAA,WAmTI,SAAAA,EACYvgE,EACYwgE,GADZp+F,KAAA49B,WAAAA,EACY59B,KAAAo+F,WAAAA,EAlSjBp+F,KAAAoM,GAAK,cAAc8xF,KAmBnBl+F,KAAAq+F,MAAQ,GASRr+F,KAAAm7B,QAAU,GASVn7B,KAAAs+F,gBAAkB,GAalBt+F,KAAAu+F,eAAiB,OAQjBv+F,KAAAw+F,gBAAkB,GASlBx+F,KAAAy+F,0BAA4B,GAU5Bz+F,KAAA0+F,iBAAmB,GASnB1+F,KAAA2+F,iBAAmB,GAanB3+F,KAAA4+F,gBAAkB,OASlB5+F,KAAA6+F,iBAAmB,GASnB7+F,KAAA8+F,2BAA6B,GAS7B9+F,KAAA++F,kBAAoB,GA4BpB/+F,KAAAm5F,OAAS,IAAIpyE,EAAAA,aAUb/mB,KAAAu4F,QAAU,IAAIxxE,EAAAA,aAUd/mB,KAAAg/F,mBAAqB,IAAIj4E,EAAAA,aAYzB/mB,KAAAi/F,oBAAsB,IAAIl4E,EAAAA,aAEzB/mB,KAAAk/F,mBAAuC,CAC3CnlE,cAAesrC,EAAAA,aAAaz7D,GAAe,CAAEzK,OAAQ,CAAEoK,aAAc,sBACrEywB,eAAgBqrC,EAAAA,aAAap7D,GAAa,CAAE9K,OAAQ,CAAEqK,WAAY,wBAI9DxJ,KAAAm/F,uBAAwB,EACxBn/F,KAAAo/F,UAAW,EACTp/F,KAAA88B,SAAW,IAAIC,EAAAA,QAelB/8B,KAAA29D,UAAY,EAiFf39D,KAAKq/F,SAAWlB,EAAmBhvD,UAAY,SAE/CnvC,KAAKs/F,wBAA0B,CAC3BtiE,iBAAkB,IAAIzD,GAAuBv5B,KAAKk/F,oBAClDjiE,eAAgB,IAAIpC,GACpBqC,MAAOl9B,KAAKu/F,QACZpiE,oBAAqBn9B,KAAKw/F,sBAoGtC,OA5YIhgG,OAAAgC,eACI28F,EAAAj+F,UAAA,UAAO,KADX,WAEI,OAAOF,KAAKo/F,cAGhB,SAAY9/E,GACRtf,KAAKs/F,wBAAwBpiE,MAAQ5d,EACrCtf,KAAKo/F,SAAW9/E,mCA+HpB9f,OAAAgC,eACI28F,EAAAj+F,UAAA,uBAAoB,KADxB,WAEI,OAAOF,KAAKm/F,2BAGhB,SAAyB7/E,GACrBtf,KAAKs/F,wBAAwBniE,oBAAsB7d,EACnDtf,KAAKm/F,sBAAwB7/E,mCA0DjC9f,OAAAgC,eAAW28F,EAAAj+F,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAK49B,WAAWC,+CAuB3Br+B,OAAAgC,eAAI28F,EAAAj+F,UAAA,QAAK,KAAT,WACI,OAAOF,KAAKy/F,OAAS,OAAS,yCAalCjgG,OAAAgC,eACI28F,EAAAj+F,UAAA,SAAM,KADV,WAEI,OAAQF,KAAK0/F,UAAU3zD,2CAG3BvsC,OAAAgC,eACI28F,EAAAj+F,UAAA,cAAW,KADf,WAEI,OAAOF,KAAK0/F,UAAU3zD,2CAa1BvsC,OAAAgC,eACI28F,EAAAj+F,UAAA,OAAI,KADR,WAEI,MAA6B,KAAzBF,KAAKs+F,iBAAoD,KAA1Bt+F,KAAK2+F,iBAC7B,SAEkB,KAAzB3+F,KAAKs+F,iBACqB,KAA1Bt+F,KAAK2+F,iBAEE,cAEA,yCAcfn/F,OAAAgC,eACI28F,EAAAj+F,UAAA,UAAO,KADX,WAEI,OAAOF,KAAKq/F,0CAiBhBlB,EAAAj+F,UAAAqgE,mBAAA,WAAA,IAAA/uD,EAAAxR,KACIA,KAAK0/F,UAAUpiE,UAAUkF,KAAKC,EAAAA,UAAUziC,KAAK88B,WAAW4F,UAAU,WAAM,OAAAlxB,EAAKmuF,yBAGzExB,EAAAj+F,UAAAy/F,oBAAR,WACI3/F,KAAKu4F,QAAQt/E,KAAK,CAAE2mF,OAAQ5/F,KAAMwgC,MAAO,QAWtC29D,EAAAj+F,UAAA0M,KAAP,SAAYo/B,QAAA,IAAAA,IAAAA,EAAmChsC,KAAKs/F,yBAChDt/F,KAAK0/F,UAAU9yF,KAAKo/B,GACpBhsC,KAAKm5F,OAAOlgF,KAAK,CAAE2mF,OAAQ5/F,KAAMwgC,MAAO,OACnCxgC,KAAKs+F,iBAAoBt+F,KAAK2+F,kBAC/B3+F,KAAK0/F,UAAUj+D,QAAQsP,SAYxBotD,EAAAj+F,UAAA2M,MAAP,WAEI7M,KAAK0/F,UAAU7yF,SAYZsxF,EAAAj+F,UAAAsM,OAAP,WACIxM,KAAKy/F,OAASz/F,KAAK6M,QAAU7M,KAAK4M,QAM/BuxF,EAAAj+F,UAAA2/F,iBAAP,SAAwBr/D,GACpBA,EAAM4B,kBAEFpiC,KAAKy/F,QACLz/F,KAAKw/F,sBACLh/D,EAAMx/B,OAAOs5B,UAAUwD,SAASqgE,EAAmB2B,eAEnD9/F,KAAK6M,SAONsxF,EAAAj+F,UAAA6/F,2BAAP,SAAkCv/D,GAC9BxgC,KAAKg/F,mBAAmB/lF,KAAK,CAAE2mF,OAAQ5/F,KAAMwgC,MAAKA,KAM/C29D,EAAAj+F,UAAA8/F,4BAAP,SAAmCx/D,GAC/BxgC,KAAKi/F,oBAAoBhmF,KAAK,CAAE2mF,OAAQ5/F,KAAMwgC,MAAKA,KAMhD29D,EAAAj+F,UAAAusC,SAAP,WACQzsC,KAAKo+F,YAAcp+F,KAAKoM,IACxBpM,KAAKo+F,WAAWjyF,IAAInM,KAAKoM,GAAIpM,OAM9Bm+F,EAAAj+F,UAAAkkC,YAAP,WACQpkC,KAAKo+F,YAAcp+F,KAAKoM,IACxBpM,KAAKo+F,WAAW9xF,OAAOtM,KAAKoM,KAvZrB+xF,EAAAhvD,QAAU,EACDgvD,EAAA2B,aAAe,iCAN1CrwD,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,aACVuiC,SAAA,ikDAlDAzO,EAAAA,kBAeKh1B,GAAoBlL,WAAA,CAAA,CAAA2V,KAsVpBo2B,EAAAA,iDA7SJgG,EAAAA,UAASrmC,KAAA,CAAC++B,gBASVuB,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,uBAGAA,EAAAA,qBAgBAA,EAAAA,uBASAA,EAAAA,+BASAA,EAAAA,8BAaAA,EAAAA,+BAQAA,EAAAA,yCASAA,EAAAA,gCAUAA,EAAAA,gCASAA,EAAAA,+BAaAA,EAAAA,gCASAA,EAAAA,0CASAA,EAAAA,iCASAA,EAAAA,oCAWAA,EAAAA,sBAiBAkc,EAAAA,wBAUAA,EAAAA,mCAUAA,EAAAA,oCAYAA,EAAAA,yBAyBAyjB,EAAAA,YAAWtgC,KAAA,CAAC,iCA6BZW,EAAAA,2BAKA2/B,EAAAA,YAAWtgC,KAAA,CAAC,0CAeZW,EAAAA,uBAwBAA,EAAAA,SAmHL+wF,EAjaA,GA2aA8B,GAAA,WAAA,SAAAA,KAK+B,2BAL9BxyF,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACywF,GAAoBJ,GAAyBE,IAC5DtwF,QAAS,CAACwwF,GAAoBJ,GAAyBE,IACvDxlD,QAAS,CAACC,EAAAA,aAAchL,GAAiBqhB,GAAiB6Q,GAAiB3I,QAEhDgpC,EAL/B,iBC3bI,SAAAC,EAAmB9zF,EAAgBoG,EAAsBrB,GAAtCnR,KAAAoM,GAAAA,EAAgBpM,KAAAwS,MAAAA,EAAsBxS,KAAAmR,KAAAA,EAU7D,OARI+uF,EAAAhgG,UAAA6Y,oBAAA,WACI,MAAO,CACHlC,MAAO7W,KAAKoM,GACZiN,SAAQjZ,EAAA,GAAQJ,KAAKmR,MACrB+H,SAAUlZ,KAAKua,QACf3B,QAAQ,IAGpBsnF,KAEAC,GAAA,WAKI,SAAAA,EACW/zF,EACA4L,EACAI,EACAjW,EACAwW,EACAb,GALA9X,KAAAoM,GAAAA,EACApM,KAAAgY,SAAAA,EACAhY,KAAAoY,OAAAA,EACApY,KAAAmC,MAAAA,EACAnC,KAAA2Y,UAAAA,EACA3Y,KAAA8X,QAAAA,EAmBf,OAjBIqoF,EAAAjgG,UAAAiZ,aAAA,SAAahX,GACT,GAA6B,WAAzBnC,KAAKoY,OAAOiF,UAA0Brd,KAAKoY,OAAOgoF,qBAItD,OAAOj+F,MAHGsoB,EAAI41E,WAAWl+F,GACrB,OAAQ4gB,MAAM0H,IAAM61E,SAAS71E,GAAKA,EAAI,GAK9C01E,EAAAjgG,UAAA6Y,oBAAA,WACI,MAAO,CACHlC,MAAO7W,KAAKoM,GAAGyK,MACf0pF,OAAQvgG,KAAKoM,GACbiN,SAAUrZ,KAAKmC,MACf+W,SAAUlZ,KAAK2Y,UACfC,QAAQ,IAGpBunF,EA9BA,iBAgCA,SAAAK,IAIIxgG,KAAAwX,KAAuB,KACvBxX,KAAA6X,IAAqB,KAiGzB,OA/FI2oF,EAAAtgG,UAAAugG,WAAA,SAAWjpF,GACP,OAAO,IAAI2oF,GAAQ3oF,EAAK+oF,OAAQ/oF,EAAKQ,SAAUR,EAAKY,OAAQZ,EAAKrV,MAAOqV,EAAKrV,MAAOqV,EAAKK,IAAIC,UAGjG0oF,EAAAtgG,UAAAwgG,UAAA,SAAUlpF,GACN,OAAO,IAAI0oF,GAAO1oF,EAAKpL,GAAGyK,MAAOW,EAAKQ,SAAUR,EAAKM,UAGzD0oF,EAAAtgG,UAAAygG,QAAA,SAAQ9pF,GACJ,OAAO7W,KAAK6X,IAAIzL,KAAOyK,GAG3B2pF,EAAAtgG,UAAA0gG,SAAA,SAASppF,GACL,OAAQxX,KAAKwX,KAAKpL,GAAGyK,QAAUW,EAAKpL,GAAGyK,OACnC7W,KAAKwX,KAAKpL,GAAGy0F,WAAarpF,EAAKpL,GAAGy0F,UAG1CrhG,OAAAgC,eAAIg/F,EAAAtgG,UAAA,aAAU,KAAd,WACI,QAASF,KAAKwX,sCAGlBhY,OAAAgC,eAAIg/F,EAAAtgG,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK2T,KAAKoG,6CAGrBva,OAAAgC,eAAIg/F,EAAAtgG,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK2T,KAAK4C,4CAGrBiqF,EAAAtgG,UAAA4gG,aAAA,WACI9gG,KAAK6X,IAAM7X,KAAK0gG,UAAU1gG,KAAKwX,UACzB/K,EAAO,CACToK,MAAO7W,KAAK6X,IAAIzL,GAChBiN,SAAUrZ,KAAK6X,IAAI1G,KACnByH,QAAQ,GAEZ5Y,KAAK2T,KAAKotF,eAAe9nF,KAAKxM,GAC1BA,EAAKmM,OACL5Y,KAAKghG,cAGThhG,KAAK6X,IAAI2C,iBAAmBxa,KAAK2T,KAAKuC,aAAa4C,mBAAmB9Y,KAAK6X,IAAIzL,IAAI,GACnFpM,KAAK2T,KAAKuC,aAAaqzB,eACvBvpC,KAAK2T,KAAKstF,eAAejhG,KAAK6X,IAAIzL,MAItCo0F,EAAAtgG,UAAA8gG,WAAA,WACIhhG,KAAK6X,IAAM,MAGf2oF,EAAAtgG,UAAAghG,MAAA,SAAM1pF,GACFxX,KAAKwX,KAAOxX,KAAKygG,WAAWjpF,GAC5BxX,KAAKwX,KAAKjB,WAAavW,KAAKuW,eACtB9J,EAAO,CACT8zF,OAAQvgG,KAAKwX,KAAKpL,GAClByK,MAAO7W,KAAKwX,KAAKpL,GAAGyK,MACpBwC,SAAUrZ,KAAKwX,KAAKrV,MACpByW,QAAQ,GAKZ,GAFA5Y,KAAK2T,KAAKwtF,gBAAgBloF,KAAKxM,GAE3BA,EAAKmM,OACL5Y,KAAKqX,WAKT,GAAIrX,KAAKohG,WAAY,CACjB,IAAKphG,KAAK6X,IAEN,YADA7X,KAAK8gG,eAIT,GAAI9gG,KAAK6X,MAAQ7X,KAAK2gG,QAAQ3gG,KAAKwX,KAAKpL,GAAGyK,OAIvC,OAHA7W,KAAK2T,KAAKmI,SAAQ,GAClB9b,KAAKwX,KAAOxX,KAAKygG,WAAWjpF,QAC5BxX,KAAK8gG,iBAMjBN,EAAAtgG,UAAAmX,IAAA,WACIrX,KAAKwX,KAAO,MAIhBgpF,EAAAtgG,UAAAmhG,aAAA,SAAarpF,EAAkBM,GAC3B,QAAKtY,KAAKwX,OAGHxX,KAAKwX,KAAKY,OAAO5F,QAAU8F,GAAetY,KAAKwX,KAAKQ,WAAaA,wBApG/EgH,EAAAA,aAsGDwhF,mBAsCI,SAAAc,EAAoBzxC,GAAA7vD,KAAA6vD,KAAAA,EAhCpB7vD,KAAAuhG,UAAW,EAEXvhG,KAAAwhG,cAAa,GACbxhG,KAAAyhG,aAAY,GAGZzhG,KAAAyZ,UAAY,IAAI1K,IAChB/O,KAAA0hG,KAAO,IAAI3yF,IACX/O,KAAA2hG,QAAuB,IAAI3yF,IAyBvBhP,KAAK4hG,mBACL5hG,KAAK6hG,oBAoQb,OAvRIriG,OAAAgC,eAAI8/F,EAAAphG,UAAA,SAAM,KAAV,WAGQF,KAAKwhG,cAAcpyF,OACnBpP,KAAK2hG,QAAQx1F,IAAIs+B,KAAKC,UAAU1qC,KAAKwhG,cAAcpyF,YAGjD6jE,EAAStzE,MAAMgR,KAAK3Q,KAAK2hG,SAAS/qF,IAAI,SAAAxH,GAAS,OAAAq7B,KAAKumD,MAAM5hF,KAOhE,OAJK6jE,EAAOtyE,QAAUX,KAAKkiF,eACvBjP,EAAOzwE,KAAKxC,KAAK8hG,cAAc9hG,KAAKkiF,gBAGjCjP,mCAWXquB,EAAAphG,UAAA2hG,kBAAA,WACI7hG,KAAKwhG,cAAcnyF,KAAO,KAC1BrP,KAAKwhG,cAAc3/E,OAAQ,EAC3B7hB,KAAKwhG,cAAcpyF,MAAQ,KAC3BpP,KAAKwhG,cAAc71B,QAAS,GAMhC21B,EAAAphG,UAAA0hG,iBAAA,WACI5hG,KAAKyhG,aAAapyF,KAAO,KACzBrP,KAAKyhG,aAAaM,MAAO,EACzB/hG,KAAKyhG,aAAa5/E,OAAQ,EAC1B7hB,KAAKyhG,aAAaryF,MAAQ,MAO9BkyF,EAAAphG,UAAAiM,IAAA,SAAIkD,GACArP,KAAKyZ,UAAUo1B,IAAIx/B,EAAKwI,KAAO7X,KAAKyZ,UAAUlN,IAAI8C,EAAKwI,KAAK1L,IAAIkD,EAAK+I,QACjEpY,KAAKyZ,UAAUkH,IAAItR,EAAKwI,IAAK,IAAI7I,KAAezC,IAAI8C,EAAKwI,KAAK1L,IAAIkD,EAAK+I,QAE3EpY,KAAK2hG,QAAQx1F,IAAIs+B,KAAKC,UAAU1qC,KAAK8hG,cAAczyF,MAGvDiyF,EAAAphG,UAAAoM,OAAA,SAAO+C,GACCrP,KAAKyZ,UAAUo1B,IAAIx/B,EAAKwI,MACxB7X,KAAKyZ,UAAUlN,IAAI8C,EAAKwI,KAAKqzB,UAAO77B,EAAK+I,QAEzCpY,KAAKgiG,aAAa3yF,KAClBrP,KAAKkiF,cAAgB,MAEzBliF,KAAK2hG,QAAQz2D,UAAOT,KAAKC,UAAU1qC,KAAK8hG,cAAczyF,MAG1DiyF,EAAAphG,UAAA+hG,QAAA,SAAQ5yF,GACJ,OAAQrP,KAAKyZ,UAAUo1B,IAAIx/B,EAAKwI,MAAQ7X,KAAKyZ,UAAUlN,IAAI8C,EAAKwI,KAAKg3B,IAAIx/B,EAAK+I,SACzEpY,KAAK0hG,KAAK7yD,IAAIx/B,EAAKwI,MAAQ7X,KAAK0hG,KAAKn1F,IAAI8C,EAAKwI,KAAKg3B,IAAIx/B,EAAK+I,SAGrEkpF,EAAAphG,UAAA0a,SAAA,SAASvL,GACL,OAAOrP,KAAKgiG,aAAa3yF,IAASrP,KAAKiiG,QAAQ5yF,IAGnDiyF,EAAAphG,UAAA8hG,aAAA,SAAa3yF,GACT,QAAIrP,KAAKkiF,gBACEliF,KAAKkiF,cAAc9pE,SAAW/I,EAAK+I,QAAUpY,KAAKkiF,cAAcrqE,MAAQxI,EAAKwI,MAK5FypF,EAAAphG,UAAAgiG,aAAA,SAAa7yF,EAAsBrC,GAC/BhN,KAAK2hG,QAAQx1F,IAAIs+B,KAAKC,UAAU1qC,KAAK8hG,cAAczyF,EAAMrC,MAG7Ds0F,EAAAphG,UAAAiiG,gBAAA,SAAgB9yF,EAAsBrC,GAClChN,KAAK2hG,QAAQz2D,UAAOT,KAAKC,UAAU1qC,KAAK8hG,cAAczyF,EAAMrC,MAQhEs0F,EAAAphG,UAAA4hG,cAAA,SAAczyF,EAAsBrC,GAChC,IAAKA,EACD,MAAO,CACHo1F,SAAU/yF,EAAKwI,IACfwqF,OAAQhzF,EAAKwI,IACbyqF,YAAajzF,EAAK+I,OAClBmqF,UAAWlzF,EAAK+I,QAIlB,IAAAzL,EAAAK,EAAAqC,KAAEwI,EAAAlL,EAAAkL,IAAKO,EAAAzL,EAAAyL,OAMb,MAAO,CAAEgqF,SALQ9/E,KAAKG,IAAIpT,EAAKwI,IAAKA,GAKjBwqF,OAJJ//E,KAAKC,IAAIlT,EAAKwI,IAAKA,GAIPyqF,YAHPhgF,KAAKG,IAAIpT,EAAK+I,OAAQA,GAGFmqF,UAFtBjgF,KAAKC,IAAIlT,EAAK+I,OAAQA,KAQ5CkpF,EAAAphG,UAAAsiG,uBAAA,SAAuBnzF,EAAsBwS,EAAgB4gF,GACzDziG,KAAKwhG,cAAc71B,QAAS,EAC5B3rE,KAAK4hG,mBACL5hG,KAAKwhG,cAAc3/E,MAAQA,IAAU4gF,EAIjCziG,KAAKwhG,cAAc3/E,QAAU7hB,KAAKwhG,cAAcnyF,OAChDrP,KAAKspC,QACLtpC,KAAKwhG,cAAcnyF,KAAOA,IAIlCiyF,EAAAphG,UAAAwiG,qBAAA,SAAqBrzF,EAAsBszF,OACjCC,EAAU5iG,KAAKwhG,cAGrB,GAAIoB,EAAQj3B,OAAQ,CAEhB,GAAIi3B,EAAQ/gF,MAIR,OAHA7hB,KAAK6iG,WAAWxzF,EAAMuzF,GACtBA,EAAQxzF,MAAQpP,KAAK8hG,cAAczyF,EAAMuzF,QACzCD,EAAQ1pF,KAAKjZ,KAAK8hG,cAAczyF,EAAMuzF,IAI1C5iG,KAAK6hG,oBACL7hG,KAAKspC,QACLtpC,KAAKmM,IAAIkD,KAIjBiyF,EAAAphG,UAAA4iG,YAAA,SAAYzzF,EAAsBwS,EAAgBkgF,GAe9C,GAbI/hG,KAAKwhG,cAAcpyF,OACnBpP,KAAK2hG,QAAQx1F,IAAIs+B,KAAKC,UAAU1qC,KAAKwhG,cAAcpyF,QAGvDpP,KAAK6hG,oBACL7hG,KAAKyhG,aAAaM,KAAOA,EACzB/hG,KAAKyhG,aAAa5/E,MAAQA,EAGrBkgF,GACD/hG,KAAKspC,QAGLznB,EAOA,OALK7hB,KAAKyhG,aAAapyF,OACnBrP,KAAKyhG,aAAapyF,KAAOrP,KAAKkiF,eAElCliF,KAAK+iG,oBAAoB1zF,QACzBrP,KAAKgjG,qBAIThjG,KAAKmiG,gBAAgB9yF,GACrBrP,KAAKyhG,aAAapyF,KAAOA,GAG7BiyF,EAAAphG,UAAA6iG,oBAAA,SAAoB1zF,GAChBrP,KAAKspC,QACLtpC,KAAKk5E,YAAY7pE,EAAMrP,KAAKyhG,eAGhCH,EAAAphG,UAAA+iG,SAAA,SAASjiG,EAAkCkiG,GAMvC,QAHIjiG,EACAkB,EAHEF,EAAWihG,EAAOC,UACpBC,EAAOnhG,EAASC,0BAMhB,GADAyK,EAAAtK,EAAA+gG,EAAAjhG,MAAA,GAAClB,EAAA0L,EAAA,GAAKxK,EAAAwK,EAAA,GACF3L,EAAO6tC,IAAI5tC,GAAM,KACXoiG,EAAWriG,EAAOuL,IAAItL,GAC5BkB,EAAM+N,QAAQ,SAAAuH,GAAU,OAAA4rF,EAASl3F,IAAIsL,KACrCzW,EAAO2f,IAAI1f,EAAKoiG,QAEhBriG,EAAO2f,IAAI1f,EAAKkB,GAEpBihG,EAAOnhG,EAASC,SATZkhG,EAAKhhG,WAajBk/F,EAAAphG,UAAAojG,aAAA,SAAaj0F,EAAsBk0F,GAE/B,OADAvjG,KAAKuhG,SAAWgC,IACXvjG,KAAKuhG,WAGVvhG,KAAKgjG,qBAKAhjG,KAAKyhG,aAAapyF,OACnBrP,KAAKyhG,aAAapyF,KAAOA,GAG7BrP,KAAKyhG,aAAaM,KAAO/hG,KAAKwjG,KAAKn0F,EAAMrP,KAAKyhG,cAC1CzhG,KAAK6iG,WAAWxzF,EAAMrP,KAAKyhG,eACxB,IAGXH,EAAAphG,UAAAujG,UAAA,SAAUp0F,EAAsBszF,GAAhC,IAAAnxF,EAAAxR,KACI,OAAIA,KAAKuhG,UACLvhG,KAAKkiG,aAAa7yF,EAAMrP,KAAKyhG,cAC7BzhG,KAAKijG,SAASjjG,KAAKyZ,UAAWzZ,KAAK0hG,MACnC1hG,KAAK6vD,KAAK6zC,QAAQ,WAAM,OAAAf,EAAQ1pF,KAAKzH,EAAKswF,cAAczyF,EAAMmC,EAAKiwF,iBACnEzhG,KAAK0hG,KAAKp4D,UACVtpC,KAAKuhG,UAAW,IAIhBvhG,KAAKyhG,aAAa5/E,OAClB7hB,KAAKgjG,qBACLL,EAAQ1pF,KAAKjZ,KAAK8hG,cAAczyF,EAAMrP,KAAKyhG,eAC3CzhG,KAAKkiG,aAAa7yF,EAAMrP,KAAKyhG,eACtB,IAGXzhG,KAAKmM,IAAIkD,IACF,IAGXiyF,EAAAphG,UAAAg5E,YAAA,SAAY7pE,EAAsBrC,GAE9B,IADM,IAAAL,EAAA3M,KAAA8hG,cAAAzyF,EAAArC,GAAEo1F,EAAAz1F,EAAAy1F,SAAUC,EAAA11F,EAAA01F,OAAQC,EAAA31F,EAAA21F,YAAaC,EAAA51F,EAAA41F,UAC9B/hG,EAAI4hG,EAAU5hG,GAAK6hG,EAAQ7hG,IAChC,IAAK,IAAIyS,EAAC,EAA0BA,GAAKsvF,EAAWtvF,IAChDjT,KAAKyZ,UAAUo1B,IAAIruC,GAAKR,KAAKyZ,UAAUlN,IAAI/L,GAAG2L,IAAI8G,GAC9CjT,KAAKyZ,UAAUkH,IAAIngB,EAAG,IAAIwO,KAAezC,IAAI/L,GAAG2L,IAAI8G,IAKpEquF,EAAAphG,UAAAsjG,KAAA,SAAKn0F,EAAsBrC,GACvBhN,KAAK0hG,KAAKp4D,QAEV,IADM,IAAA38B,EAAA3M,KAAA8hG,cAAAzyF,EAAArC,GAAEo1F,EAAAz1F,EAAAy1F,SAAUC,EAAA11F,EAAA01F,OAAQC,EAAA31F,EAAA21F,YAAaC,EAAA51F,EAAA41F,UAC9B/hG,EAAI4hG,EAAU5hG,GAAK6hG,EAAQ7hG,IAChC,IAAK,IAAIyS,EAAC,EAA0BA,GAAKsvF,EAAWtvF,IAChDjT,KAAK0hG,KAAK7yD,IAAIruC,GAAKR,KAAK0hG,KAAKn1F,IAAI/L,GAAG2L,IAAI8G,GACpCjT,KAAK0hG,KAAK/gF,IAAIngB,EAAG,IAAIwO,KAAezC,IAAI/L,GAAG2L,IAAI8G,IAK/DquF,EAAAphG,UAAA2iG,WAAA,SAAWxzF,EAAsBrC,GACxBhN,KAAKyhG,aAAaM,MACnB/hG,KAAKyZ,UAAU6vB,QAEnBtpC,KAAKk5E,YAAY7pE,EAAMrC,IAG3Bs0F,EAAAphG,UAAAopC,MAAA,WACItpC,KAAKyZ,UAAU6vB,QACftpC,KAAK0hG,KAAKp4D,QACVtpC,KAAK2hG,QAAQr4D,SAGjBg4D,EAAAphG,UAAA8iG,mBAAA,eACUvpF,EAAY2L,OAAOu+E,eACrBlqF,GACAA,EAAUmqF,uCAtSrB5kF,EAAAA,sDA1LkC6lB,EAAAA,UAmenCy8D,KC5bAuC,GAAA,WAudI,SAAAA,EACcC,EACA1sF,EACH+I,EACA1G,EACA+E,EACCijB,EACEouB,GAPd,IAAAr+C,EAAAxR,KACcA,KAAA8jG,iBAAAA,EACA9jG,KAAAoX,YAAAA,EACHpX,KAAAmgB,QAAAA,EACAngB,KAAAyZ,UAAAA,EACAzZ,KAAAwe,IAAAA,EACCxe,KAAAyhC,QAAAA,EACEzhC,KAAA6vD,KAAAA,EAzYP7vD,KAAA+jG,eAAiB,gBAajB/jG,KAAAgkG,qBAAuB,wBAkG9BhkG,KAAAwY,oBAAsB,EAoDtBxY,KAAAikG,YAAa,EAObjkG,KAAAkkG,UAAW,EAcJlkG,KAAA29D,SAAW,EAcX39D,KAAAqvC,KAAO,WAsEdrvC,KAAA0P,MAAQ,GAkFD1P,KAAAkwC,SAAU,EA4BPlwC,KAAAmkG,qBAAsB,EAuKhCnkG,KAAAokG,YAAc,SAAC5jE,GACXhvB,EAAKsyF,iBAAiBhB,YAAYtxF,EAAK6yF,cACnC7jE,EAAM8pD,SAAU9pD,EAAM8jE,UAQ9BtkG,KAAAukG,aAAe,SAAC/jE,GACKhvB,EAAKsyF,iBAAiBR,aAAa9xF,EAAK6yF,cAAiC,IAAlB7jE,EAAM8wC,UAE1E9/D,EAAKmC,KAAK6K,IAAIyhB,iBAQtBjgC,KAAAwkG,UAAY,WACJhzF,EAAKsyF,iBAAiBL,UAAUjyF,EAAK6yF,cAAe7yF,EAAKmC,KAAK8wF,mBAC9DjzF,EAAKmC,KAAK6K,IAAIyhB,iBAiT1B,OAz0BIzgC,OAAAgC,eAAIqiG,EAAA3jG,UAAA,UAAO,KAAX,WACI,MAAO,CACHk8C,UAAWp8C,KAAKmC,MAChBqV,KAAMxX,uCAWdR,OAAAgC,eAAIqiG,EAAA3jG,UAAA,WAAQ,KAAZ,WACI,GAAIF,KAAKkkG,SAAU,KACT9D,EAAuBpgG,KAAKoY,OAAOgoF,qBACzC,OAAOA,GAA8CpgG,KAAKogG,qBAE9D,OAAIpgG,KAAK0kG,aACE1kG,KAAK0kG,aAET1kG,KAAK2kG,qDAUhBnlG,OAAAgC,eAAIqiG,EAAA3jG,UAAA,SAAM,KAAV,WACI,OAAOF,KAAK6X,IAAI+sF,wCAUpBplG,OAAAgC,eAAIqiG,EAAA3jG,UAAA,OAAI,KAAR,WACI,OAAOF,KAAKmgB,QAAQxM,sCAUxBnU,OAAAgC,eACIqiG,EAAA3jG,UAAA,WAAQ,KADZ,WAEI,OAAOF,KAAK6X,IAAIrF,uCAUpBhT,OAAAgC,eAAIqiG,EAAA3jG,UAAA,cAAW,KAAf,WACI,OAAOF,KAAKoY,OAAO5F,uCAqBvBhT,OAAAgC,eAAWqiG,EAAA3jG,UAAA,SAAM,KAAjB,eACUqW,EAAavW,KAAK2T,KAAK4C,WAE7B,MAAO,CAAEM,MADKN,EAAavW,KAAK8X,QAAQvB,GAAcvW,KAAK8X,QAC3C+oF,SAAU7gG,KAAKsY,YAAaN,SAAUhY,KAAKgY,2CAU/DxY,OAAAgC,eAAIqiG,EAAA3jG,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKyhC,QAAQ5D,+CAexBr+B,OAAAgC,eAAIqiG,EAAA3jG,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKkkG,cAGhB,SAAe/hG,GACXnC,KAAK6kG,YAAY1iG,oCAqDrB3C,OAAAgC,eACIqiG,EAAA3jG,UAAA,WAAQ,KADZ,WAEI,OAAQF,KAAKoY,OAAO0sF,0CAGxBtlG,OAAAgC,eACIqiG,EAAA3jG,UAAA,cAAW,KADf,WAEI,OAAOF,KAAKoY,OAAO2sF,6CAGvBvlG,OAAAgC,eACIqiG,EAAA3jG,UAAA,iBAAc,KADlB,WAEI,OAAOF,KAAKoY,OAAO4sF,gDAIvBxlG,OAAAgC,eACIqiG,EAAA3jG,UAAA,SAAM,KADV,WAEI,OAAOF,KAAKoY,OAAOiqF,wCAGvB7iG,OAAAgC,eACIqiG,EAAA3jG,UAAA,SAAM,KADV,WAEI,OAAOF,KAAKoY,OAAO6sF,wCAGvBzlG,OAAAgC,eAEIqiG,EAAA3jG,UAAA,WAAQ,KAFZ,WAGI,OAAOF,KAAKoY,OAAOgqF,0CAGvB5iG,OAAAgC,eAEIqiG,EAAA3jG,UAAA,WAAQ,KAFZ,WAGI,OAAOF,KAAKoY,OAAO8sF,0CAUvB1lG,OAAAgC,eACIqiG,EAAA3jG,UAAA,cAAW,KADf,WAEI,OAAUF,KAAK6X,IAAI+sF,OAAM,IAAI5kG,KAAKoY,OAAOrC,uCAuB7CvW,OAAAgC,eAEIqiG,EAAA3jG,UAAA,WAAQ,KAFZ,WAGI,OAAOF,KAAKmlG,sBAUhB,SAAa7lF,OACHjQ,EAAOrP,KAAKqkG,cAClB/kF,EAAMtf,KAAK8jG,iBAAiB33F,IAAIkD,GAAQrP,KAAK8jG,iBAAiBx3F,OAAO+C,oCAGzE7P,OAAAgC,eACIqiG,EAAA3jG,UAAA,QAAK,KADT,WAEI,IAAIF,KAAK2T,KAAKoG,YAKP,KACGqrF,EAAwBplG,KAAK2T,KAAKuC,aAAawE,SAAS1a,KAAK6X,IAAIhB,OACvE,OAAOuuF,GAAkBA,EAAejjG,OAASijG,EAAejjG,MAAMnC,KAAKoY,OAAOrC,WAN5EsvF,EAAkBrlG,KAAK2T,KAAKuC,aAAa4C,mBAAmB9Y,KAAK6X,IAAIhB,OAAO,GAClF,QAAIwuF,IACOA,EAAgBrlG,KAAKoY,OAAOrC,SAAW/D,WAAoD,OAAvCqzF,EAAgBrlG,KAAKoY,OAAOrC,yCAkBnGvW,OAAAgC,eAAWqiG,EAAA3jG,UAAA,YAAS,KAcpB,WACI,GAAIF,KAAKoX,YAAYkuF,WACjB,OAAOtlG,KAAKoX,YAAYI,KAAKmB,eAhBrC,SAAqBxW,GACbnC,KAAKoX,YAAYkuF,aACjBtlG,KAAKoX,YAAYI,KAAKmB,UAAYxW,oCAqB1C3C,OAAAgC,eAAIqiG,EAAA3jG,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAKoY,OAAO0sF,0CAgBvBtlG,OAAAgC,eACcqiG,EAAA3jG,UAAA,YAAS,KAWvB,WACI,OAAOF,KAAKulG,gBAbhB,SACwBpjG,GACpBnC,KAAKulG,WAAapjG,EAEdnC,KAAKulG,YAAcvlG,KAAK2T,KAAK6xF,eAAe7hC,aAC5C3jE,KAAKulG,WAAW9jC,UAAUzhE,KAAK2T,KAAK6xF,eAAe7hC,WAC/C3jE,KAAK2T,KAAK6xF,eAAevjC,cACzBjiE,KAAK2T,KAAK6xF,eAAetjC,YAC7BliE,KAAKulG,WAAWjkC,wDAQxB9hE,OAAAgC,eAAcqiG,EAAA3jG,UAAA,gBAAa,KAA3B,WACI,MAAO,CAAE2X,IAAK7X,KAAKgY,SAAUI,OAAQpY,KAAKwY,qDAyB9CqrF,EAAA3jG,UAAAusC,SAAA,WAAA,IAAAj7B,EAAAxR,KACIA,KAAK6vD,KAAKnoB,kBAAkB,WACxBl2B,EAAKqsB,cAAcsE,iBAAiB,cAAe3wB,EAAK4yF,aACxD5yF,EAAKqsB,cAAcsE,iBAAiB,eAAgB3wB,EAAK+yF,cACzD/yF,EAAKqsB,cAAcsE,iBAAiB,YAAa3wB,EAAKgzF,WAGlDj1F,OACAiC,EAAKi0F,wBAA0B,WAAM,OAAAj0F,EAAK2yF,qBAAsB,GAChE3yF,EAAKk0F,sBAAwB,WAAM,OAAAl0F,EAAK2yF,qBAAsB,GAE9D3yF,EAAKqsB,cAAcsE,iBAAiB,mBAAoB3wB,EAAKi0F,yBAC7Dj0F,EAAKqsB,cAAcsE,iBAAiB,iBAAkB3wB,EAAKk0F,uBAG3Dl0F,EAAKm0F,eAAiB,SAACrjG,GAAkB,OAAAkP,EAAK43C,QAAQ9mD,IACtDkP,EAAKo0F,SAAW,WAAM,OAAAp0F,EAAK83C,UAC3B93C,EAAKqsB,cAAcsE,iBAAiB,UAAW3wB,EAAKm0F,gBACpDn0F,EAAKqsB,cAAcsE,iBAAiB,WAAY3wB,EAAKo0F,cASjE/B,EAAA3jG,UAAAkkC,YAAA,WAAA,IAAA5yB,EAAAxR,KACIA,KAAK6vD,KAAKnoB,kBAAkB,WACxBl2B,EAAKqsB,cAAcoG,oBAAoB,cAAezyB,EAAK4yF,aAC3D5yF,EAAKqsB,cAAcoG,oBAAoB,eAAgBzyB,EAAK+yF,cAC5D/yF,EAAKqsB,cAAcoG,oBAAoB,YAAazyB,EAAKgzF,WAErDj1F,OACAiC,EAAKqsB,cAAcoG,oBAAoB,mBAAoBzyB,EAAKi0F,yBAChEj0F,EAAKqsB,cAAcoG,oBAAoB,iBAAkBzyB,EAAKk0F,uBAC9Dl0F,EAAKqsB,cAAcoG,oBAAoB,UAAWzyB,EAAKm0F,gBACvDn0F,EAAKqsB,cAAcoG,oBAAoB,WAAYzyB,EAAKo0F,cASpE/B,EAAA3jG,UAAA2lG,kBAAA,WACQ7lG,KAAK8kG,UAAY9kG,KAAKoX,YAAYkuF,aAAetlG,KAAK6X,IAAIiuF,SAC1D9lG,KAAKmgB,QAAQzH,YAAY1Y,KAAKoX,YAAYI,KAAMxX,KAAKoX,YAAYI,KAAKmB,WACtE3Y,KAAKoX,YAAYC,MACjBrX,KAAK2T,KAAK6K,IAAIC,eACdze,KAAKoX,YAAY8pF,MAAMlhG,OAChBA,KAAKoX,YAAYkuF,YACxBtlG,KAAK2T,KAAKmI,SAAQ,IAQnB+nF,EAAA3jG,UAAA6lG,2BAAP,WACI,IAAI/lG,KAAKkkG,SAAT,KAIM70F,EAAOrP,KAAKqkG,cAElBrkG,KAAK6lG,oBACL7lG,KAAK8jG,iBAAiBpB,qBAAqBrzF,EAAMrP,KAAK2T,KAAK8wF,oBAUxDZ,EAAA3jG,UAAAilG,eAAP,WACI,OAAOnlG,KAAK8jG,iBAAiBlpF,SAAS5a,KAAKqkG,gBAOxCR,EAAA3jG,UAAA48C,YAAP,SAAmBC,GACXA,EAAQ56C,QAAU46C,EAAQ56C,MAAMk7C,aAC5Br9C,KAAKyhE,YACLzhE,KAAKyhE,UAAU+jC,eAAezjC,aAAe/hE,KAAK2T,KAAK6xF,eAAe7hC,WACtE3jE,KAAKyhE,UAAU+jC,eAAevjC,cAAgBjiE,KAAK2T,KAAK6xF,eAAevjC,cACvEjiE,KAAKyhE,UAAU+jC,eAAetjC,WAAaliE,KAAK2T,KAAK6xF,eAAetjC,aAYhF2hC,EAAA3jG,UAAA2kG,YAAA,SAAY1iG,GACJnC,KAAK6X,IAAIiuF,UAGT9lG,KAAK8kG,UAAY3iG,GACjBnC,KAAKmgB,QAAQ1H,eACbzY,KAAKoX,YAAY8pF,MAAMlhG,OAEvBA,KAAKmgB,QAAQhJ,kBAEjBnX,KAAK2T,KAAK6K,IAAIC,iBAWXolF,EAAA3jG,UAAA8lG,OAAP,SAAc1mF,GACV,IAAItf,KAAK6X,IAAIiuF,QAAb,KAGMtuF,EAAOxX,KAAKoX,YAAYqpF,WAAWzgG,MACnCyM,EAAOzM,KAAKmgB,QAAQzH,YAAYlB,EAAM8H,GAC5C,GAAItf,KAAKoX,YAAYI,MAAQxX,KAAKoX,YAAYwpF,SAASppF,GAAO,CAC1D,GAAI/K,EAAKmM,OACL,OAEJ5Y,KAAKmgB,QAAQhJ,kBAEjBnX,KAAKwe,IAAIC,iBAwCNolF,EAAA3jG,UAAA+lG,cADP,SACqBzlE,IACbxgC,KAAK8kG,UAAa9kG,KAAKkkG,UAAalkG,KAAK6X,IAAIiuF,SAC7C9lG,KAAKoX,YAAY8pF,MAAMlhG,MAG3BA,KAAK2T,KAAKsyF,cAAchtF,KAAK,CACzBzB,KAAMxX,KACNwgC,MAAKA,KASNqjE,EAAA3jG,UAAAktC,QADP,SACe5M,GACXxgC,KAAK2T,KAAKuyF,YAAYjtF,KAAK,CACvBzB,KAAMxX,KACNwgC,MAAKA,KASNqjE,EAAA3jG,UAAAimG,cADP,SACqB3lE,GACjBxgC,KAAK2T,KAAKwyF,cAAcltF,KAAK,CACzBzB,KAAMxX,KACNwgC,MAAKA,KASNqjE,EAAA3jG,UAAAkpD,QADP,SACe5oB,GACXxgC,KAAKkwC,SAAU,EACflwC,KAAK6X,IAAIq4B,SAAU,EACnBlwC,KAAK+lG,6BACA/lG,KAAK8jG,iBAAiB9B,aAAahiG,KAAKqkG,gBACzCrkG,KAAK2T,KAAKy9B,YAAYn4B,KAAK,CAAEzB,KAAMxX,KAAMwgC,MAAKA,IAElDxgC,KAAK8jG,iBAAiB5hB,cAAgBliF,KAAKqkG,eAQxCR,EAAA3jG,UAAAopD,OADP,WAEItpD,KAAKkwC,SAAU,EACflwC,KAAK6X,IAAIq4B,SAAU,GAGb2zD,EAAA3jG,UAAAkmG,UAAV,SAAoBnlG,EAAau/B,GAC7B,GAAqD,sBAAjDxgC,KAAK6X,IAAIgmB,cAAcksB,QAAQ73C,eAAyClS,KAAKqmG,YAAYplG,GAAM,KACzFquE,EAAYtvE,KAAQ,IAASqhB,UAAY5Q,GAAkBo+B,IAAI5tC,GAC/DmuE,GAAWpvE,KAAQ,IAASqhB,UAAY9Q,GAAgBs+B,IAAI5tC,GAC9DquE,EACCtvE,KAAY,QAASsmG,6BAA6BtmG,KAAK6X,IAAI0uF,SAAUvmG,KAAK6X,IAAIwJ,SAAUmf,EAAOxgC,KAAKwY,oBAC9F42D,GACNpvE,KAAY,QAASsmG,6BAA6BtmG,KAAK6X,IAAI0uF,SAAUvmG,KAAK6X,IAAIwJ,SAAUmf,EAAOxgC,KAAKwY,sBAKvGqrF,EAAA3jG,UAAAsmG,UAAV,SAAoB3kF,GACZA,EACA7hB,KAAK2T,KAAK2wE,WAAWmiB,mBAAmBzmG,KAAK6X,IAAIgmB,cAAe79B,KAAKgY,SAAUhY,KAAKwY,oBAEpFxY,KAAK2T,KAAK2wE,WAAWoiB,WAAW1mG,KAAK6X,IAAIgmB,cAAe79B,KAAKgY,SAAUhY,KAAKwY,qBAI1EqrF,EAAA3jG,UAAAymG,UAAV,SAAoB5E,GACZA,EACA/hG,KAAK2T,KAAK2wE,WAAWsiB,eAErB5mG,KAAK2T,KAAK2wE,WAAWlI,aAAap8E,KAAKgY,WAIrC6rF,EAAA3jG,UAAA2mG,WAAV,SAAqB9E,GACbA,EACA/hG,KAAK2T,KAAK2wE,WAAWwiB,gBAErB9mG,KAAK2T,KAAK2wE,WAAWnI,cAAcn8E,KAAKgY,WAWhD6rF,EAAA3jG,UAAAqzD,cADA,SACc/yB,OACJv/B,EAAMu/B,EAAMv/B,IAAIiR,cAChB2P,EAAQ2e,EAAM8pD,SACdyX,EAAOvhE,EAAM8jE,QACbj1F,EAAOrP,KAAKqkG,cAElB,GAAK3zF,GAAem+B,IAAI5tC,GAAxB,CAGAu/B,EAAM4B,sBAEA2kE,EAAc,CAAEC,WAAY,WAAYhmG,OAAQhB,KAAMwgC,MAAOA,EAAO5nB,QAAQ,GAElF,GADA5Y,KAAK2T,KAAKszF,cAAchuF,KAAK8tF,GACzBA,EAAYnuF,OACZ5Y,KAAK8jG,iBAAiBtB,uBAAuBnzF,EAAMwS,EAAOA,GAAiB,QAAR5gB,OADvE,CAKA,GAAIu/B,EAAM2uC,OAGN,OAFA3uC,EAAMqH,sBACN7nC,KAAKomG,UAAUnlG,EAAKu/B,GAWxB,GAPAxgC,KAAK8jG,iBAAiBtB,uBAAuBnzF,EAAMwS,EAAOA,GAAiB,QAAR5gB,GAGvD,QAARA,GACAu/B,EAAMqH,iBAGN7nC,KAAKkkG,UACD5zF,GAAgBu+B,IAAI5tC,GAD5B,CAEQ,GAAIjB,KAAKoY,OAAOgoF,qBAAwB,OACpC,CAAC,OAAQ,WAAWtwF,QAAQ9P,KAAKoY,OAAOiF,cAHpD,CAQI/M,GAAgBu+B,IAAI5tC,IACpBu/B,EAAMqH,qBAIJp7B,EAAO,CAAE+K,KAAMxX,KAAM8T,SAAU,KAAM0sB,MAAOA,EAAO5nB,QAAQ,GAEjE,GADA5Y,KAAK2T,KAAKuzF,cAAcjuF,KAAKxM,IACzBA,EAAKmM,OAIT,OAAQ3X,GACJ,IAAK,MACDjB,KAAKwmG,UAAU3kF,GACf,MACJ,IAAK,MACD7hB,KAAK2mG,UAAU5E,GACf,MACJ,IAAK,OACD/hG,KAAK6mG,WAAW9E,GAChB,MACJ,IAAK,YACL,IAAK,OACD,GAAIA,EAAM,CACN/hG,KAAK2T,KAAK2wE,WAAWnI,cAAc9sE,EAAKwI,KACxC,MAEJ7X,KAAK2T,KAAK2wE,WAAWpI,mBAAmBl8E,KAAK69B,cAAexuB,EAAKwI,IAAKxI,EAAK+I,QAC3E,MACJ,IAAK,aACL,IAAK,QACD,GAAI2pF,EAAM,CACN/hG,KAAK2T,KAAK2wE,WAAWlI,aAAa/sE,EAAKwI,KACvC,MAEJ7X,KAAK2T,KAAK2wE,WAAWrI,oBAAoBj8E,KAAK69B,cAAexuB,EAAKwI,IAAKxI,EAAK+I,QAC5E,MACJ,IAAK,UACL,IAAK,KACD,GAAI2pF,EAAM,CACN/hG,KAAK2T,KAAK2wE,WAAW6iB,YAAY93F,EAAK+I,QACtC,MAEJpY,KAAK2T,KAAK2wE,WAAW8iB,WAAWpnG,KAAK6X,IAAIgmB,cAAexuB,EAAKwI,IAAKxI,EAAK+I,QACvE,MACJ,IAAK,YACL,IAAK,OACD,GAAI2pF,EAAM,CACN/hG,KAAK2T,KAAK2wE,WAAW+iB,eAAeh4F,EAAK+I,QACzC,MAEJpY,KAAK2T,KAAK2wE,WAAWgjB,aAAatnG,KAAK6X,IAAIgmB,cAAexuB,EAAKwI,IAAKxI,EAAK+I,QACzE,MACJ,IAAK,QACL,IAAK,KACDpY,KAAKunG,yBACL,MACJ,IAAK,SACL,IAAK,MACDvnG,KAAKwnG,wBACL,MACJ,IAAK,IACL,IAAK,WACL,IAAK,QACGxnG,KAAK6X,IAAIwG,eACTre,KAAK6X,IAAI4vF,gBAAgBj7F,SAE7B,MACJ,QACI,YAQLq3F,EAAA3jG,UAAAqnG,uBAAP,WACQvnG,KAAKmkG,qBAGLnkG,KAAKoY,OAAO0sF,WAAa9kG,KAAK6X,IAAIiuF,UAC9B9lG,KAAKkkG,UACLlkG,KAAK2T,KAAKmI,SAAQ,GAClB9b,KAAK69B,cAAckT,SAEnB/wC,KAAKoX,YAAY8pF,MAAMlhG,QAS5B6jG,EAAA3jG,UAAAsnG,sBAAP,WACI,IAAIxnG,KAAKmkG,qBAILnkG,KAAKkkG,SAAU,KACTz5E,EAAIzqB,KAAKoX,YAAYI,KACrB/K,EAAI,CACN8zF,OAAQ91E,EAAEre,GACVyK,MAAO4T,EAAEre,GAAGyK,MACZwC,SAAUoR,EAAEtoB,MACZ+W,SAAUuR,EAAE9R,UACZC,QAAQ,GAGZ,GADA5Y,KAAK2T,KAAK+zF,iBAAiBzuF,KAAKxM,GAC5BA,EAAKmM,OACL,OAEJ5Y,KAAK2T,KAAKmI,SAAQ,GAClB9b,KAAK69B,cAAckT,UAWpB8yD,EAAA3jG,UAAAynG,cAAP,SAAqBrlC,EAAcL,EAAyBC,GACxD,OAAOliE,KAAKyhE,WAAazhE,KAAKoY,OAAOwvF,WAAa5nG,KAAKyhE,UAAUA,UAAUa,EAAML,EAAeC,GAAc,GAU3G2hC,EAAA3jG,UAAA0hE,eAAP,WACQ5hE,KAAKyhE,WAAazhE,KAAKoY,OAAOwvF,YAC9B5nG,KAAKyhE,UAAUG,kBAQhBiiC,EAAA3jG,UAAA2nG,mBAAP,SAA0Bz4F,GACtB,OAAOkT,KAAKC,IAAG1hB,MAARyhB,KAAI5f,EAAQ/C,MAAMgR,KAAK3Q,KAAK69B,cAAcztB,UAC5CwG,IAAI,SAAC+pB,GAAU,OAAAxxB,GAAoBC,EAAOuxB,QAG3CkjE,EAAA3jG,UAAAmmG,YAAR,SAAoBplG,GAChB,OAAOwP,GAAkBo+B,IAAI5tC,IAAQsP,GAAgBs+B,IAAI5tC,wBA57BhEwuC,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzC76F,SAAU,gBACVuiC,SAAA,m+DAnBK4xD,UAAyCd,UALzCjrF,UAFAu4B,UAdLjB,EAAAA,yBAEA5L,EAAAA,kBAMA4D,EAAAA,0CA2CCz3B,EAAAA,mBAUAA,EAAAA,uBAUAA,EAAAA,4BAwBAA,EAAAA,qBAaAA,EAAAA,yBAoCAA,EAAAA,wBAgEA2/B,EAAAA,YAAWtgC,KAAA,CAAC,kDAuBZsgC,EAAAA,YAAWtgC,KAAA,CAAC,2BAAwB,CAAAiK,KACpCtJ,EAAAA,0BAmDAA,EAAAA,OAAK,CAAAsJ,KACLq2B,EAAAA,YAAWtgC,KAAA,CAAC,qDAMZW,EAAAA,OAAK,CAAAsJ,KACLq2B,EAAAA,YAAWtgC,KAAA,CAAC,iDAcZsgC,EAAAA,YAAWtgC,KAAA,CAAC,+BAcZsgC,EAAAA,YAAWtgC,KAAA,CAAC,+BAUZsgC,EAAAA,YAAWtgC,KAAA,CAAC,2CAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,mDAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,8CAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,sCAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,2CAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,uBAAoB,CAAAiK,KAChCq2B,EAAAA,YAAWtgC,KAAA,CAAC,0CAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,0BAAuB,CAAAiK,KACnCq2B,EAAAA,YAAWtgC,KAAA,CAAC,gDAYZsgC,EAAAA,YAAWtgC,KAAA,CAAC,wCAYZsgC,EAAAA,YAAWtgC,KAAA,CAAC,oBAAiB,CAAAiK,KAC7Bq2B,EAAAA,YAAWtgC,KAAA,CAAC,oBAAiB,CAAAiK,KAC7Bq2B,EAAAA,YAAWtgC,KAAA,CAAC,qBAAkB,CAAAiK,KAC9BtJ,EAAAA,wBAUA2/B,EAAAA,YAAWtgC,KAAA,CAAC,uBAAoB,CAAAiK,KAChCq2B,EAAAA,YAAWtgC,KAAA,CAAC,+CAiBZsgC,EAAAA,YAAWtgC,KAAA,CAAC,+CAsDZsgC,EAAAA,YAAWtgC,KAAA,CAAC,2DAGZqmC,EAAAA,UAASrmC,KAAA,CAAC,cAAe,CAAEsmC,KAAMuQ,EAAAA,4CAGjCxQ,EAAAA,UAASrmC,KAAA,CAAC,eAAgB,CAAEsmC,KAAMuQ,EAAAA,iCAGlCxQ,EAAAA,UAASrmC,KAAA,CAACo0D,GAA2B,CAAE9tB,KAAM8tB,4BA0N7CxzD,EAAAA,aAAYZ,KAAA,CAAC,WAAY,CAAC,4BAgB1BY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,kCAYvBY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,4BAY7BY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,2BAevBY,EAAAA,aAAYZ,KAAA,CAAC,+BAgDbY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,cAlhB1B+gC,EAAAA,CADC/R,GAAkB,wMAqtBvBooE,EA97BA,GChBAoE,GAAA,WA+OI,SAAAA,EAAmB9nF,EACR/I,EACA0sF,EACCrqF,EACDgoB,EACAjjB,GALQxe,KAAAmgB,QAAAA,EACRngB,KAAAoX,YAAAA,EACApX,KAAA8jG,iBAAAA,EACC9jG,KAAAyZ,UAAAA,EACDzZ,KAAAyhC,QAAAA,EACAzhC,KAAAwe,IAAAA,EA5KJxe,KAAAqvC,KAAO,MA2FPrvC,KAAAkoG,UAAW,EA+DXloG,KAAAkwC,SAAU,EAMVlwC,KAAAmoG,gBAAkB,eAKfnoG,KAAAooG,eAAgB,EAkG9B,OA9TI5oG,OAAAgC,eACWymG,EAAA/nG,UAAA,UAAO,KADlB,WAEI,OAAIF,KAAKslG,WACE9lG,OAAOa,OAAO,GAAIL,KAAKqoG,SAAUroG,KAAK2T,KAAKuC,aAAa4C,mBAAmB9Y,KAAK6W,OAAO,IAE3F7W,KAAKqoG,cAGhB,SAAmB59E,GACfzqB,KAAKqoG,SAAW59E,mCAgDpBjrB,OAAAgC,eACIymG,EAAA/nG,UAAA,eAAY,KADhB,WAEI,OAAOF,KAAKwS,uCAMhBhT,OAAAgC,eACIymG,EAAA/nG,UAAA,eAAY,KADhB,WAEI,OAAOF,KAAKsoG,kDAMhB9oG,OAAAgC,eAAIymG,EAAA/nG,UAAA,UAAO,KAAX,WACI,OAAOF,KAAK2T,KAAK40F,gDAMrB/oG,OAAAgC,eAAIymG,EAAA/nG,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK2T,KAAK60F,+CAMrBhpG,OAAAgC,eAAIymG,EAAA/nG,UAAA,kBAAe,KAAnB,WACI,OAAOF,KAAK2T,KAAK80F,iDAMrBjpG,OAAAgC,eAAWymG,EAAA/nG,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK2T,KAAK0K,+CAMrB7e,OAAAgC,eAAWymG,EAAA/nG,UAAA,oBAAiB,KAA5B,WACI,OAAOF,KAAK2T,KAAK+0F,mDAUrBlpG,OAAAgC,eAAWymG,EAAA/nG,UAAA,QAAK,KAAhB,eACU2X,EAAa7X,KAAK2T,KAAKuC,aAAawE,SAAS1a,KAAK6W,OACxD,QAAIgB,IACOA,EAAInB,OAASC,GAAgBvB,KAAOyC,EAAInB,OAASC,GAAgBrB,yCAShF9V,OAAAgC,eAAWymG,EAAA/nG,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAK2T,KAAKg1F,8CAIrBnpG,OAAAgC,eAAWymG,EAAA/nG,UAAA,QAAK,KAAhB,eACU2X,EAAa7X,KAAK2T,KAAKuC,aAAawE,SAAS1a,KAAK6W,OACxD,QAAIgB,GACOA,EAAInB,OAASC,GAAgBvB,qCAO5C5V,OAAAgC,eAAWymG,EAAA/nG,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKmgB,QAAQtB,wBAAwB7e,KAAK6W,wCASrDrX,OAAAgC,eAAWymG,EAAA/nG,UAAA,aAAU,KAArB,WACI,GAAIF,KAAK2T,KAAKoG,YAAa,KACjBtE,EAAezV,KAAKoX,YAAYS,IACtC,OAAQpC,GAAgBA,EAAarJ,KAAOpM,KAAK6W,QAAU,EAE3D,OAAO,mCAqBfrX,OAAAgC,eAAIymG,EAAA/nG,UAAA,OAAI,KAAR,WACI,OAAOF,KAAKmgB,QAAQxM,sCAaxBnU,OAAAgC,eAAWymG,EAAA/nG,UAAA,QAAK,KAAhB,eACUqW,EAAavW,KAAK2T,KAAK4C,WAC7B,OAAOA,EAAavW,KAAKqoG,SAAS9xF,GAAcvW,KAAKqoG,0CAWzD7oG,OAAAgC,eAAIymG,EAAA/nG,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKyhC,QAAQ5D,+CA8BjBoqE,EAAA/nG,UAAA0oG,gBAAP,SAAuBpoE,OACbwN,EAAgBxN,EAAa,QAC/BxgC,KAAKyZ,UAAU00B,SAASnuC,KAAK4kG,OAAQ5kG,KAAK6W,OAC1C7W,KAAKyZ,UAAUg1B,YAAYzuC,KAAK4kG,OAAQ5kG,KAAK6W,OACjD7W,KAAK2T,KAAKk1F,0BAA0B76D,EAAchuC,KAAMwgC,IAarDynE,EAAA/nG,UAAA8lG,OAAP,SAAc7jG,OACJiV,EAAcpX,KAAKoX,YACrBA,EAAYkuF,YAAcluF,EAAYI,KAAKpL,GAAGyK,QAAU7W,KAAK6W,OAC7D7W,KAAK2T,KAAKmI,SAAQ,OAEhBjE,EAAM,IAAIqoF,GAAOlgG,KAAK6W,MAAO7W,KAAKwS,MAAOxS,KAAK8X,SACpD9X,KAAKmgB,QAAQxF,WAAW9C,EAAK1V,GAC7BnC,KAAKwe,IAAIC,gBAYNwpF,EAAA/nG,UAAAgrC,UAAP,WACIlrC,KAAK2T,KAAKsK,cAAcje,KAAK6W,QAMjCrX,OAAAgC,eAAIymG,EAAA/nG,UAAA,uBAAoB,KAAxB,WACI,OAAOF,KAAK2T,KAAK4C,WACbvW,KAAK8oG,WAAa,yBAA2B9oG,KAAK6W,MAAQ,uBAAyB7W,KAAK6W,MACxF7W,KAAK8oG,WAAa,eAAiB,8CAMpCb,EAAA/nG,UAAAmwC,UAAP,WACIrwC,KAAK8oG,WAAa9oG,KAAKqe,iBACnBre,KAAK2T,KAAKo1F,iBACV/oG,KAAKyZ,UAAUC,iBAAiB1Z,KAAK4kG,OAAQ5kG,KAAK6W,OACtD7W,KAAKwe,IAAIC,eACLze,KAAKynG,kBACLznG,KAAKynG,gBAAgB1pC,QAAU/9D,KAAK8oG,aAOlCb,EAAA/nG,UAAAooG,eAAV,eACUU,EAAahpG,KAAKwS,MAAQ,EAAIxS,KAAK2T,KAAKs1F,WAAajpG,KAAK2T,KAAKu1F,UAC/DC,EAAgBnpG,KAAK8oG,WAAa,yBAA2B,GAC7DM,EAAYppG,KAAKslG,WAAa,qBAAuB,GACrD+D,EAAarpG,KAAKqqD,MAAQ,uBAAyB,GACnDi/C,EAAetpG,KAAK8lG,QAAU,wBAA0B,GACxDyD,EAAWvpG,KAAK2T,KAAK61F,iBAAmB,oBAAsB,GAC9DC,EAAYzpG,KAAKkoG,SAAW,qBAAuB,GACzD,OAAUloG,KAAKmoG,gBAAe,IAAIa,EAAU,IAAIG,EAAa,IAAIC,EAAS,IAAIC,EAAU,cACrFC,EAAY,IAAIC,EAAQ,IAAIE,GAAYjjF,QAM/ChnB,OAAAgC,eAAWymG,EAAA/nG,UAAA,8BAA2B,KAAtC,WAGI,MAAUwpG,6BADe1pG,KAAK2T,KAAKg2F,cAAgB3pG,KAAKkoG,SAAW,gCAAkC,yDA5U5Gz4D,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,UACVuiC,SAAA,q3LAXKn6B,UAKyBirF,UAAzBc,UAPAxzD,UATL7M,EAAAA,kBAHA4L,EAAAA,sDAsCCz/B,EAAAA,qBAmBAA,EAAAA,sBAMAA,EAAAA,0BAMA0lC,EAAAA,UAASrmC,KAAA,CAAC,YAAa,CAAEsmC,KAAMyQ,8BAM/B1Q,EAAAA,UAASrmC,KAAA,CAACq6C,EAAAA,WAAW,WAAM,OAAAo/B,KAAuB,CAAEnzC,KAAMmzC,oBAW1DnU,EAAAA,aAAYtlE,KAAA,CAACq6C,EAAAA,WAAW,WAAM,OAAA+8C,oBAM9B92D,EAAAA,YAAWtgC,KAAA,CAAC,mCAGZsgC,EAAAA,YAAWtgC,KAAA,CAAC,4CAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,6BA2CZsgC,EAAAA,YAAWtgC,KAAA,CAAC,yBAkNjBw7F,EA/UA,GCPM3+D,GAAQ,SAACn5B,GAAO,OAAO,IAAPA,GAAY4Q,QAAQ5Q,kBAI1C,SAAAy5F,KAgDA,OAvCkBA,EAAA75E,MAAd,SAAoB5e,GAChB,OAAOA,EAAKxQ,QA+BTipG,EAAA1pG,UAAA2pG,QAAP,SAAe14F,GACX,YADW,IAAAA,IAAAA,EAAA,IACJ,CAAC,CACJlQ,IAAK,QACL4sE,MAAO,QACPi8B,cAAeF,EAAkB75E,MAAM5e,MAGnDy4F,oBAGA,SAAAG,mDAuGA,OAvG6Cv1F,EAAAA,EAAAA,GAS3Bu1F,EAAAtnF,IAAd,SAAkBtR,GACd,OAAOA,EAAKxQ,QAAUwQ,EAAKsF,OAAO6yB,IAAO3oC,OAASwQ,EAAKsF,OAAO6yB,IAAOxgB,OAAO,SAAChX,EAAGvS,GAAM,OAAA+iB,KAAKG,IAAI3Q,EAAGvS,KAAM,GAU9FwqG,EAAAxnF,IAAd,SAAkBpR,GACd,OAAOA,EAAKxQ,QAAUwQ,EAAKsF,OAAO6yB,IAAO3oC,OAASwQ,EAAKsF,OAAO6yB,IAAOxgB,OAAO,SAAChX,EAAGvS,GAAM,OAAA+iB,KAAKC,IAAIzQ,EAAGvS,KAAM,GAU9FwqG,EAAAznD,IAAd,SAAkBnxC,GACd,OAAOA,EAAKxQ,QAAUwQ,EAAKsF,OAAO6yB,IAAO3oC,OAASwQ,EAAKsF,OAAO6yB,IAAOxgB,OAAO,SAAChX,EAAGvS,GAAM,OAACuS,IAAKvS,IAAK,GAUvFwqG,EAAAC,QAAd,SAAsB74F,GAClB,OAAOA,EAAKxQ,QAAUwQ,EAAKsF,OAAO6yB,IAAO3oC,OAASX,KAAKsiD,IAAInxC,GAAQnR,KAAK+vB,MAAM5e,GAAQ,GAoCnF44F,EAAA7pG,UAAA2pG,QAAP,SAAe14F,QAAA,IAAAA,IAAAA,EAAA,QACLlC,EAAS4c,EAAA3rB,UAAM2pG,QAAOjpG,KAAAZ,KAACmR,GAqB7B,OApBAlC,EAAOzM,KAAK,CACRvB,IAAK,MACL4sE,MAAO,MACPi8B,cAAeC,EAAwBtnF,IAAItR,KAE/ClC,EAAOzM,KAAK,CACRvB,IAAK,MACL4sE,MAAO,MACPi8B,cAAeC,EAAwBxnF,IAAIpR,KAE/ClC,EAAOzM,KAAK,CACRvB,IAAK,MACL4sE,MAAO,MACPi8B,cAAeC,EAAwBznD,IAAInxC,KAE/ClC,EAAOzM,KAAK,CACRvB,IAAK,UACL4sE,MAAO,MACPi8B,cAAeC,EAAwBC,QAAQ74F,KAE5ClC,GAEf86F,GAvG6CH,mBA0G7C,SAAAK,mDAoEA,OApE2Cz1F,EAAAA,EAAAA,GASzBy1F,EAAAC,OAAd,SAAqB/4F,GACjB,OAAOA,EAAKxQ,QAAUwQ,EAAKsF,OAAO6yB,IAAO3oC,OAC/BwQ,EAAKsF,OAAO6yB,IAAOp4B,KAAK,SAACY,EAAGvS,GAAM,OAAA,IAAIqP,KAAKrP,GAAG65E,UAAY,IAAIxqE,KAAKkD,GAAGsnE,YA3K7D,GA2K2EpnE,WAUpFi4F,EAAAE,SAAd,SAAuBh5F,GACnB,OAAOA,EAAKxQ,QAAUwQ,EAAKsF,OAAO6yB,IAAO3oC,QArLnCqN,EAsLGmD,EAAKsF,OAAO6yB,IAAOp4B,KAAK,SAACY,EAAGvS,GAAM,OAAA,IAAIqP,KAAKrP,GAAG65E,UAAY,IAAIxqE,KAAKkD,GAAGsnE,aAtL7DprE,EAAIrN,OAAS,GAsL8DqR,UAtLxF,IAAChE,GAqNHi8F,EAAA/pG,UAAA2pG,QAAP,SAAe14F,QAAA,IAAAA,IAAAA,EAAA,QACLlC,EAAS4c,EAAA3rB,UAAM2pG,QAAOjpG,KAAAZ,KAACmR,GAW7B,OAVAlC,EAAOzM,KAAK,CACRvB,IAAK,WACL4sE,MAAO,WACPi8B,cAAeG,EAAsBE,SAASh5F,KAElDlC,EAAOzM,KAAK,CACRvB,IAAK,SACL4sE,MAAO,SACPi8B,cAAeG,EAAsBC,OAAO/4F,KAEzClC,GAEfg7F,GApE2CL,IC7K3CQ,GAAA,WA0BI,SAAAA,EAAoBv6C,GAAA7vD,KAAA6vD,KAAAA,EAVb7vD,KAAAqqG,aAAuB,KAIvBrqG,KAAAsqG,aAAc,EAwNzB,OA7MI9qG,OAAAgC,eAAI4oG,EAAAlqG,UAAA,gBAAa,KAAjB,eACQ0L,EAAS5L,KAAKoY,OAAOzE,KAAK42F,0BAG1BC,EAAyB,EAS7B,OARIxqG,KAAKoY,OAAO1E,QAAU1T,KAAKoY,OAAO1E,OAAO+2F,eACzCD,EAAyBxqG,KAAKoY,OAAOzE,KAAK+2F,sBAAwB1qG,KAAKoY,OAAOgqF,SAAW,GAGnE,IAAtBpiG,KAAKoY,OAAO3E,QACZ7H,GAAU5L,KAAKoY,OAAOuyF,eAAeC,YAAYh/F,OAAS5L,KAAKoY,OAAOwyF,YAAYh/F,OAAS4+F,GAGxF5+F,mCAMXpM,OAAAgC,eAAI4oG,EAAAlqG,UAAA,oBAAiB,KAArB,eACU2qG,EAAyB7qG,KAAKoY,OAAOzE,KAAK61F,iBAAmBxpG,KAAKoY,OAAO4sF,eAAiB,EAC1F8F,EAAiBzK,WAAWrgG,KAAKoY,OAAO2yF,UACxCC,EAAkB3K,WAAWrgG,KAAKoY,OAAO4yF,iBAAmBH,EAE9DE,EAAWxtF,OAAOwF,MAAM+nF,IAAmBA,EAAiBE,EAAkBA,EAAkBF,EAGpG,OAFAC,EAAWA,EAAW1K,WAAWrgG,KAAKoY,OAAO1I,OAASq7F,EAAW1K,WAAWrgG,KAAKoY,OAAO1I,OAEjF1P,KAAKoY,OAAO6yF,WAAWrtE,WAAWC,cAAcluB,wBAAwBD,MAAQq7F,mCAM3FvrG,OAAAgC,eAAI4oG,EAAAlqG,UAAA,oBAAiB,KAArB,eACUgrG,EAAclrG,KAAKoY,OAAO6yF,WAAWrtE,WAAWC,cAAcluB,wBAAwBD,MAE5F,GAAI1P,KAAKoY,OAAO6P,OAAQ,KACdkjF,EAAiBnrG,KAAKmrG,eACxBnrG,KAAKoY,OAAOzE,KAAKy3F,4BAA8BprG,KAAKoY,OAAOzE,KAAK03F,gBAAe,GAAQH,EAE3F,OAAIlrG,KAAKoY,OAAOuc,UAAY0rE,WAAWrgG,KAAKoY,OAAOuc,UAAYw2E,GAC3DnrG,KAAKmrG,eAAiBnrG,KAAKoY,OAAOuc,SAE3B0rE,WAAWrgG,KAAKoY,OAAOuc,UAAYu2E,GAEnCC,EAAiBD,EAG5B,OAAIlrG,KAAKoY,OAAOuc,SACL0rE,WAAWrgG,KAAKoY,OAAOuc,UAAYu2E,EAEnC3tF,OAAO+tF,kDAYnBlB,EAAAlqG,UAAAqrG,yBAAP,eACUC,EAAkBxrG,KAAKoY,OAAO6yF,WAAWrtE,WAAWC,cAAcluB,wBAAwBD,MAE1F0qB,EAAOp6B,KAAKoY,OAAOqzF,sBAErBzrG,KAAKoY,OAAO6P,OACWjoB,KAAKoY,OAAOzE,KAAK03F,gBAAe,GAAQG,EAAkBnL,WAAWjmE,IAEtEp6B,KAAKoY,OAAOzE,KAAKy3F,8BACnCprG,KAAKoY,OAAO1I,MAAQ0qB,GAEjBp6B,KAAKoY,OAAOuc,UAAa0rE,WAAWjmE,GAAQimE,WAAWrgG,KAAKoY,OAAOuc,UAC1E30B,KAAKoY,OAAO1I,MAAQ2wF,WAAWrgG,KAAKoY,OAAOuc,UAAY,KAChD0rE,WAAWjmE,GAAQimE,WAAWrgG,KAAKoY,OAAO4yF,iBACjDhrG,KAAKoY,OAAO1I,MAAQ1P,KAAKoY,OAAO4yF,gBAAkB,KAElDhrG,KAAKoY,OAAO1I,MAAQ0qB,EAGxBp6B,KAAK6vD,KAAKnS,IAAI,cAEd19C,KAAKoY,OAAOzE,KAAK+3F,SACjB1rG,KAAKoY,OAAOzE,KAAKg4F,gBAAgB1yF,KAAK,CAClCb,OAAQpY,KAAKoY,OACbwzF,UAAWJ,EAAgBt8F,WAC3B28F,SAAU7rG,KAAKoY,OAAO1I,SAOvB06F,EAAAlqG,UAAA4rG,aAAP,SAAoBtrE,GAChBxgC,KAAKsqG,aAAc,MACb9sD,EAAOhd,EAAMtC,QAAUl+B,KAAK+rG,eAE9BP,EAAkBnL,WAAWrgG,KAAKoY,OAAO1I,OACvCw7F,EAAclrG,KAAKoY,OAAO6yF,WAAWrtE,WAAWC,cAAcluB,wBAAwBD,MAC5F87F,EAAkBjuF,OAAOwF,MAAMyoF,IAAqBA,EAAkBN,EAAeA,EAAcM,MAE7FQ,EAAchsG,KAAKisG,eAAejsG,KAAKoY,QACvC8zF,EAAclsG,KAAKmsG,eAAensG,KAAKoY,QACzCpY,KAAKoY,OAAOzE,KAAK61F,iBACjBxpG,KAAKosG,sBAAsBpsG,KAAKoY,OAAQolC,GAGpCx9C,KAAKoY,OAAO1I,MADZ87F,EAAkBhuD,EAAOwuD,EACLA,EAAc,KAC3BE,GAAyCA,EAAzBV,EAAkBhuD,EACrB0uD,EAAc,KAEbV,EAAkBhuD,EAAQ,KAIvDx9C,KAAK6vD,KAAKnS,IAAI,cACd19C,KAAKoY,OAAOzE,KAAK+3F,SAEbF,IAAoBnL,WAAWrgG,KAAKoY,OAAO1I,QAC3C1P,KAAKoY,OAAOzE,KAAKg4F,gBAAgB1yF,KAAK,CAClCb,OAAQpY,KAAKoY,OACbwzF,UAAWJ,EAAgBt8F,WAC3B28F,SAAU7rG,KAAKoY,OAAO1I,QAI9B1P,KAAKqsG,kBAAmB,GAGlBjC,EAAAlqG,UAAA+rG,eAAV,SAAyB7zF,OACjBozF,EAAkBnL,WAAWjoF,EAAO1I,OAClCw7F,EAAc9yF,EAAO6yF,WAAWrtE,WAAWC,cAAcluB,wBAAwBD,MACvF87F,EAAkBjuF,OAAOwF,MAAMyoF,IAAqBA,EAAkBN,EAAeA,EAAcM,MAE7FX,EAAyBzyF,EAAOzE,KAAK61F,iBAAmBpxF,EAAO4sF,eAAiB,EAChF8F,EAAiBzK,WAAWjoF,EAAO2yF,UACnCC,EAAkB3K,WAAWjoF,EAAO4yF,iBAAmBH,EACvDmB,EAAczuF,OAAOwF,MAAM+nF,IAAmBA,EAAiBE,EAAkBA,EAAkBF,EACzG,OAAOkB,EAAcR,EAAkBQ,EAAcR,GAG/CpB,EAAAlqG,UAAAisG,eAAV,SAAyB/zF,GACrB,OAAOA,EAAO6P,OAASo4E,WAAWrgG,KAAKmrG,gBAAkB9K,WAAWjoF,EAAOuc,WAGrEy1E,EAAAlqG,UAAAksG,sBAAV,SAAgCh0F,EAA4BolC,GAA5D,IAAAhsC,EAAAxR,KACUssG,EAAkBl0F,EAAOm0F,0BACzBC,EAAeF,EAAgBxjF,OAAO,SAACs3B,EAAKtqC,GAAS,OAAAsqC,EAAMtqC,EAAI22F,UAAU,GAE/E,GAAIr0F,EAAO6P,OAAQ,KACTykF,EAAc1sG,KAAKoY,OAAOzE,KAAK03F,gBAAe,GAC9CsB,EAAiB3sG,KAAKoY,OAAOzE,KAAKy3F,4BAEfuB,EAArBD,EAAclvD,IACdA,EAAOmvD,EAAiBD,GAShC,QAJIE,EAAelqG,EAAO4pG,GACtBO,EAAcrvD,EACdsvD,EAAsBN,EACtBO,GAAgB,eAKhBA,GAAgB,MACZC,EAAkBF,EAChBG,EAAkB,GACxBL,EAAgB18F,QAAQ,SAAC4F,OACfo3F,EAAqB7M,WAAWvqF,EAAI9U,OAAOmsG,WAC3CC,EAAgB5vD,EAAOsvD,EAAuBh3F,EAAI9U,OAAOgkG,eAEzD+F,EAAWv5F,EAAKy6F,eAAen2F,EAAI9U,QACnC2zB,EAAWnjB,EAAK26F,eAAer2F,EAAI9U,QACrCksG,EAAqBE,EAAerC,GACpCj1F,EAAI9U,OAAO0O,MAAQq7F,EAAW,KAC9B8B,GAAgBK,EAAqBnC,EACrCiC,GAAmBl3F,EAAI22F,SACvBM,GAAgB,GACTp4E,GAAiDA,EAApCu4E,EAAqBE,GACzCt3F,EAAI9U,OAAO0O,MAAQilB,EAAW,KAC9Bk4E,GAAgBl4E,EAAWu4E,EAC3BF,GAAmBl3F,EAAI22F,SACvBM,GAAgB,GAGhBE,EAAgBzqG,KAAKsT,KAI7Bg3F,EAAsBE,EACtBJ,EAAkBK,OACbF,IAGTH,EAAgB18F,QAAQ,SAAC4F,OACfo3F,EAAqB7M,WAAWvqF,EAAI9U,OAAOmsG,WAC3CC,EAAgBP,EAAcC,EAAuBh3F,EAAI9U,OAAOgkG,eACtElvF,EAAI9U,OAAO0O,MAASw9F,EAAqBE,EAAgB,4BAzOpEpuF,EAAAA,sDAJoB6lB,EAAAA,UAgPrBulE,EA5OA,GCkCAiD,GAAA,WAqBI,SAAAA,EAAoBx9C,EACDpuB,EACD6rE,GAFEttG,KAAA6vD,KAAAA,EACD7vD,KAAAyhC,QAAAA,EACDzhC,KAAAstG,mBAAAA,EATVttG,KAAAutG,WAAY,EAKZvtG,KAAA88B,SAAW,IAAIC,EAAAA,QA4E3B,OAnEWswE,EAAAntG,UAAAkkC,YAAP,WACIpkC,KAAK88B,SAAS56B,MAAK,GACnBlC,KAAK88B,SAASuH,YAMXgpE,EAAAntG,UAAAumD,gBAAP,WAAA,IAAAj1C,EAAAxR,MACSA,KAAKoY,OAAOo1F,aAAextG,KAAKoY,OAAOq1F,YACxCztG,KAAK6vD,KAAKnoB,kBAAkB,WACxBnF,EAAAA,UAAU/wB,EAAKiwB,QAAQ5D,cAAe,aAAa2E,KAC/CkrE,EAAAA,aA7CE,KA8CFjrE,EAAAA,UAAUjxB,EAAKsrB,WACjB4F,UAAU,SAAClC,GAELhvB,EAAK+7F,UACL/7F,EAAK+7F,WAAY,EAIA,IAAjB/sE,EAAMkgC,SACNlvD,EAAKm8F,uBAAuBntE,GAC5BhvB,EAAK4G,OAAOzE,KAAKi6F,WAAWC,QAAQC,YAAYttE,QAK5D+B,EAAAA,UAAUviC,KAAKyhC,QAAQ5D,cAAe,WAAW2E,KAC7CkrE,EAAAA,aA9DM,KA+DNjrE,EAAAA,UAAUziC,KAAK88B,WACjB4F,UAAU,WACRlxB,EAAK87F,mBAAmBhD,aAAc,EACtC94F,EAAK4G,OAAOzE,KAAK6K,IAAIyhB,oBAS1BotE,EAAAntG,UAAA6tG,YADP,WAEI/tG,KAAKstG,mBAAmBjD,aAAe,cAOpCgD,EAAAntG,UAAA+lG,cADP,WAEIjmG,KAAKutG,WAAY,EACjBvtG,KAAKstG,mBAAmBl1F,OAASpY,KAAKoY,OACtCpY,KAAKstG,mBAAmB/B,4BAMpB8B,EAAAntG,UAAAytG,uBAAR,SAA+BntE,GAC3BxgC,KAAKstG,mBAAmBl1F,OAASpY,KAAKoY,OACtCpY,KAAKstG,mBAAmBjB,kBAAmB,EAC3CrsG,KAAKstG,mBAAmBvB,eAAiBvrE,EAAMtC,QAE/Cl+B,KAAKstG,mBAAmBhD,aAAc,EACtCtqG,KAAKoY,OAAOzE,KAAK6K,IAAIyhB,qCA7F5B/yB,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,iEA/BV03B,EAAAA,cAJA5D,EAAAA,kBAyBKmpE,sCAiBJh9F,EAAAA,MAAKX,KAAA,CAAC,wCA6DNY,EAAAA,aAAYZ,KAAA,CAAC,oCAQbY,EAAAA,aAAYZ,KAAA,CAAC,eAkBlB4gG,EA/FA,GAqGAW,GAAA,WAuBI,SAAAA,EAAmBvsE,EAA8Cvc,EAAiB2qC,GAAlF,IAAAr+C,EAAAxR,KAAmBA,KAAAyhC,QAAAA,EAA8CzhC,KAAAklB,SAAAA,EAAiBllB,KAAA6vD,KAAAA,EAjB3E7vD,KAAAiuG,mBAA6B1wF,OAAO2wF,iBAGpCluG,KAAAmuG,mBAA6B5wF,OAAO+tF,iBAGpCtrG,KAAAouG,UAAY,IAAIrxE,EAAAA,QAGhB/8B,KAAAquG,YAAc,IAAItxE,EAAAA,QAGlB/8B,KAAAsuG,OAAS,IAAIvxE,EAAAA,QAGZ/8B,KAAA+wD,SAAW,IAAIh0B,EAAAA,QAInB/8B,KAAKquG,YAAY7rE,KACb5rB,EAAAA,IAAI,SAAC4pB,GAAU,OAAAA,EAAMtC,UACrBuE,EAAAA,UAAUziC,KAAK+wD,UACfqwB,EAAAA,UAAU,SAACp+E,GAAW,OAAAwO,EAAK88F,OAAO9rE,KAC9B5rB,EAAAA,IAAI,SAAC4pB,GAAU,OAAAA,EAAMtC,QAAUl7B,IAC/By/B,EAAAA,UAAUjxB,EAAK48F,WACf3rE,EAAAA,UAAUjxB,EAAKu/C,cAErBruB,UAAU,SAACk3B,OAEH3hC,EAAOzmB,EAAK+8F,MAAQ30C,EAEpBn3C,EAAMjR,EAAK+8F,MAAQ/8F,EAAKy8F,mBACxB1rF,EAAM/Q,EAAK+8F,MAAQ/8F,EAAK28F,mBAE9B38F,EAAKymB,KAAOA,EAAOxV,EAAMA,EAAMwV,EAEpB1V,EAAP0V,IACAzmB,EAAKymB,KAAO1V,KAkD5B,OA5CIyrF,EAAA9tG,UAAAusC,SAAA,WAAA,IAAAj7B,EAAAxR,KACIA,KAAK6vD,KAAKnoB,kBAAkB,WACxBnF,EAAAA,UAAU/wB,EAAK0T,SAASif,YAAa,aAAa3B,KAC9C6uB,EAAAA,SAAS,WAAM,OAAAC,EAAAA,SAAS,EAAGC,EAAAA,2BAC3B9uB,EAAAA,UAAUjxB,EAAKu/C,WACjBruB,UAAU,SAAC/vB,GAAQ,OAAAnB,EAAKg9F,YAAY77F,KAEtC4vB,EAAAA,UAAU/wB,EAAK0T,SAASif,YAAa,WAAW3B,KAAKC,EAAAA,UAAUjxB,EAAKu/C,WAC/DruB,UAAU,SAAC/vB,GAAQ,OAAAnB,EAAKi9F,UAAU97F,QAI/Cq7F,EAAA9tG,UAAAkkC,YAAA,WACIpkC,KAAK+wD,SAAS7uD,MAAK,GACnBlC,KAAK+wD,SAAS1sB,YAGlB7kC,OAAAgC,eAAWwsG,EAAA9tG,UAAA,OAAI,KAAf,SAAgBof,GAAhB,IAAA9N,EAAAxR,KACIu4C,sBAAsB,WAAM,OAAA/mC,EAAKiwB,QAAQ5D,cAAct/B,MAAM05B,KAAO3Y,EAAM,wCAG9E9f,OAAAgC,eAAWwsG,EAAA9tG,UAAA,MAAG,KAAd,SAAeof,GAAf,IAAA9N,EAAAxR,KACIu4C,sBAAsB,WAAM,OAAA/mC,EAAKiwB,QAAQ5D,cAAct/B,MAAM45B,IAAM7Y,EAAM,wCAG7E0uF,EAAA9tG,UAAAuuG,UAAA,SAAUjuE,GACNxgC,KAAKouG,UAAUlsG,KAAKs+B,GACpBxgC,KAAKouG,UAAU/pE,YAGnB2pE,EAAA9tG,UAAA4tG,YAAA,SAAYttE,GACRA,EAAMqH,qBACAn0B,EAAS1T,KAAKyhC,QAAQ5D,cAActD,cAAcA,cAExDv6B,KAAKi4B,KAAOj4B,KAAKuuG,MAAQ/tE,EAAMtC,QAAUxqB,EAAO/D,wBAAwBsoB,KACxEj4B,KAAKm4B,IAAMqI,EAAMx/B,OAAO2O,wBAAwBwoB,IAAMzkB,EAAO/D,wBAAwBwoB,IAErFn4B,KAAKquG,YAAYnsG,KAAKs+B,IAG1BwtE,EAAA9tG,UAAAsuG,YAAA,SAAYhuE,GACRA,EAAMqH,iBACN7nC,KAAKsuG,OAAOpsG,KAAKs+B,wBA3FxBtzB,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,4DAxIV8zB,EAAAA,8CA8JyC0D,EAAAA,OAAMl4B,KAAA,CAACm4B,EAAAA,mBA1JhDC,EAAAA,sDAwICz3B,EAAAA,kCAGAA,EAAAA,yBAGAkc,EAAAA,4BAGAA,EAAAA,uBAGAA,EAAAA,UA4EL0kF,EA7FA,iBAmGI,SAAAU,EAAmBh/D,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BALCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,uEA5NVm2C,EAAAA,eAgOJorD,mBAOI,SAAAC,EAAmBj/D,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BANCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,yDAnOVm2C,EAAAA,eAwOJqrD,mBAOI,SAAAC,EAAmBl/D,GAAA1vC,KAAA0vC,SAAAA,EAEvB,2BAPCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2DA3OVm2C,EAAAA,eAiPJsrD,KAIAC,GAAA,WAKI,SAAAA,EAAmBn/D,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BANCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2DAtPVm2C,EAAAA,eA2PJurD,EANA,iBAaI,SAAAC,EAAmBp/D,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BANCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,+DA9PVm2C,EAAAA,eAmQJwrD,KAKAC,GAAA,WAAA,SAAAA,YAUIvvG,OAAAgC,eAAIutG,EAAA7uG,UAAA,SAAM,KAAV,WACI,OAAOF,KAAKgvG,aAEhB,SAAW1vF,GACHA,IACAtf,KAAKgvG,QAAU1vF,oCAIvB9f,OAAAgC,eAAIutG,EAAA7uG,UAAA,OAAI,KAAR,WACI,OAAOF,KAAKivG,WAEhB,SAAS3vF,GACDA,IACAtf,KAAKivG,MAAQ3vF,wDAxBxBN,EAAAA,WAAUvS,KAAA,CAAC,CACR63B,WAAY,gHADhB,OAiCI4qE,iBAAA,EACAC,gBAAA,EACAv+F,KAAA,0GAMJ,IAAAw+F,GAAA,SAAAvjF,GA4BI,SAAAujF,EACIxnD,EACAjrB,EACAqG,EACA4tC,EACQy+B,GALZ,IAAA79F,EAOIqa,EAAAjrB,KAAAZ,KAAM4wE,EAAMhpB,EAAUjrB,EAAOqG,IAAUhjC,YAF/BwR,EAAA69F,IAAAA,EATJ79F,EAAA89F,iBAAmB,6BACnB99F,EAAA+9F,sBAAwB,kCACxB/9F,EAAAg+F,2BAA6B,0CAwIzC,OA/JkDh7F,EAAAA,EAAAA,GAE9ChV,OAAAgC,eACI4tG,EAAAlvG,UAAA,OAAI,KADR,SACSof,GACLtf,KAAKgvG,QAAU1vF,mCAGnB9f,OAAAgC,eAAI4tG,EAAAlvG,UAAA,SAAM,KAAV,WACI,OAAOF,KAAKgvG,yCAGhBxvG,OAAAgC,eAAI4tG,EAAAlvG,UAAA,YAAS,KAAb,WACI,OAAOF,KAAKoY,SAAWpY,KAAKoY,OAAOq3F,SAAYzvG,KAAKoY,OAAOs3F,YAAc1vG,KAAKoY,OAAOo1F,8CAGzFhuG,OAAAgC,eAAW4tG,EAAAlvG,UAAA,OAAI,KAAf,WACI,OAAOF,KAAKqvG,IAAIviC,sCAmBbsiC,EAAAlvG,UAAAkkC,YAAP,WACIpkC,KAAK2vG,gBAGFP,EAAAlvG,UAAAu4F,SAAP,SAAgBj4D,GACZxgC,KAAKqvG,IAAIO,YAAa,EACtB5vG,KAAKs0C,YAAY9T,IAGd4uE,EAAAlvG,UAAAm0C,cAAP,SAAqB7T,GAArB,IAAAhvB,EAAAxR,KACI,GAAKA,KAAKknF,WAAwD,UAA3C1mD,EAAMx/B,OAAOsyD,aAAa,aAAjD,CAIA9yB,EAAMqH,iBACNrH,EAAM4B,kBAENpiC,KAAKgxD,kBAAmB,EACxBhxD,KAAKqvG,IAAIj3F,OAASpY,KAAKoY,OACvBpY,KAAKgwD,gBAAkBhwD,KAAKsvG,iBAE5BzjF,EAAA3rB,UAAMm0C,cAAazzC,KAAAZ,KAACwgC,GAEpBxgC,KAAKqvG,IAAIQ,gBAAiB,EAC1B7vG,KAAKoY,OAAOzE,KAAK6K,IAAIyhB,oBAEfxzB,EAAO,CACTy2F,OAAQljG,KAAKoY,QAEjBpY,KAAKoY,OAAOzE,KAAKm8F,oBAAoB72F,KAAKxM,GAE1CzM,KAAK+vG,cAAgBxtE,EAAAA,UAAUviC,KAAKoY,OAAOzE,KAAKuR,SAASif,YAAa,WAAWzB,UAAU,SAAChF,GAC9E,WAANA,EAAGz8B,KAA6B,QAANy8B,EAAGz8B,KAC7BuQ,EAAKinF,SAAS/6D,OAKnB0xE,EAAAlvG,UAAAsxD,cAAP,SAAqBhxB,GASjB,GARAA,EAAMqH,iBACNhc,EAAA3rB,UAAMsxD,cAAa5wD,KAAAZ,KAACwgC,GAEhBxgC,KAAK2wD,cAAgB3wD,KAAKkxD,YAAclxD,KAAKoY,OAAOzE,KAAKq8F,gBACzDhwG,KAAKoY,OAAOzE,KAAKq8F,cAAgBhwG,KAAKoY,OACtCpY,KAAKoY,OAAOzE,KAAK6K,IAAIyhB,iBAGrBjgC,KAAKqvG,IAAIQ,eAAgB,KACnBpjG,EAAO,CACTy2F,OAAQljG,KAAKoY,OACbQ,QAAQ,GAEZ5Y,KAAKoY,OAAOzE,KAAKs8F,eAAeh3F,KAAKxM,GAEjCA,EAAKmM,QACL5Y,KAAKy4F,SAASj4D,KAKnB4uE,EAAAlvG,UAAAo0C,YAAP,SAAmB9T,GAAnB,IAAAhvB,EAAAxR,KAEIA,KAAK6vD,KAAKnS,IAAI,WACV7xB,EAAA3rB,UAAMo0C,YAAW1zC,KAAA4Q,EAACgvB,GAElBhvB,EAAK69F,IAAIQ,gBAAiB,EAC1Br+F,EAAK4G,OAAOzE,KAAKq8F,cAAgB,KACjCx+F,EAAK4G,OAAOzE,KAAK6K,IAAIyhB,kBAGzBjgC,KAAK2vG,gBAGCP,EAAAlvG,UAAAuyD,gBAAV,SAA0BjyB,OAGlB8V,EAAOE,EAFX3qB,EAAA3rB,UAAMuyD,gBAAe7xD,KAAAZ,KAACwgC,GAKlBgW,EAFAx2C,KAAKoxD,uBAAyBpxD,KAAKyxD,oBACnCnb,EAAQ9V,EAAM8V,MACN9V,EAAMgW,QAEdF,EAAQ9V,EAAM4V,QAAQ,GAAGE,MACjB9V,EAAM4V,QAAQ,GAAGI,OAG7Bx2C,KAAKkxD,UAAU3yD,MAAMqN,OAAS,KAC9B5L,KAAKkxD,UAAU3yD,MAAMwsG,SAAW,KAChC/qG,KAAKkxD,UAAU3yD,MAAM2xG,UAAY,KACjClwG,KAAKkxD,UAAU3yD,MAAM27B,SAAW,SAE1B4yC,EAAO5nD,SAASC,cAAc,KAC9Bm9C,EAAOp9C,SAASirF,eAAe,SACrCrjC,EAAKlnD,YAAY08C,GAEjBwK,EAAKxyC,UAAUnuB,IAAI,kBACnBnM,KAAKqvG,IAAIviC,KAAOA,MAEVsjC,EAAepwG,KAAKmwD,cAAgBnwD,KAAKmwD,cAAcxgD,wBAAwBsoB,KAAO,EACtFo4E,EAAcrwG,KAAKmwD,cAAgBnwD,KAAKmwD,cAAcxgD,wBAAwBwoB,IAAM,EAErFn4B,KAAKoY,OAAOo1F,aAQbxtG,KAAKkxD,UAAUvvB,aAAamrC,EAAM9sE,KAAKkxD,UAAUo/C,WAAW,IAE5DtwG,KAAK8vD,SAASvB,SAASue,EAAM9sE,KAAKwvG,4BAClCxvG,KAAKkxD,UAAU9gD,SAAS,GAAG7R,MAAMgyG,YAAc,QAV/CvwG,KAAK8vD,SAASvB,SAASue,EAAM9sE,KAAKuvG,uBAElCvvG,KAAKkxD,UAAUvvB,aAAamrC,EAAM9sE,KAAKkxD,UAAUkR,oBAUjDpiE,KAAKi4B,KAAOj4B,KAAKiyD,YAAc3b,EAAUt2C,KAAKkxD,UAAUvhD,wBAAwBD,MAAQ,EAAK,EAAK0gG,EAClGpwG,KAAKm4B,IAAMn4B,KAAKkyD,YAAc1b,EAAUx2C,KAAKkxD,UAAUvhD,wBAAwB/D,OAAS,EAAK,EAAKykG,GAIlGjB,EAAAlvG,UAAAyvG,aAAR,WACQ3vG,KAAK+vG,gBACL/vG,KAAK+vG,cAAcjkE,cACnB9rC,KAAK+vG,cAAgB,2BA/JhC7iG,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,qEA7TV8zB,EAAAA,kBAIA4D,EAAAA,cAMAiqB,EAAAA,iBAZAjiB,EAAAA,yBA+ViBkiE,oCA5BhB3hG,EAAAA,MAAKX,KAAA,CAAC,0BA6JX2iG,EAlKA,CAGkDx/C,IAmKlD4gD,GAAA,SAAA3kF,GAqCI,SAAA2kF,EAAoB5yE,EAAgCkyB,EAA6BD,EAAsBw/C,GAAvG,IAAA79F,EACIqa,EAAAjrB,KAAAZ,KAAM49B,EAAYkyB,EAAUD,IAAK7vD,YADjBwR,EAAAosB,WAAAA,EAAgCpsB,EAAAs+C,SAAAA,EAA6Bt+C,EAAAq+C,KAAAA,EAAsBr+C,EAAA69F,IAAAA,EAP/F79F,EAAAi/F,eAAsB,KACtBj/F,EAAAk/F,mBAA0B,KAG1Bl/F,EAAAm/F,WAAa,IAAI5zE,EAAAA,QACjBvrB,EAAAo/F,oBAAsB,wCA6IlC,OA7KkDp8F,EAAAA,EAAAA,GAC9ChV,OAAAgC,eACIgvG,EAAAtwG,UAAA,OAAI,KADR,SACSof,GACDA,aAAeuxF,KACf7wG,KAAKgvG,QAAU1vF,GAGfA,aAAekkC,KACfxjD,KAAK8wG,UAAYxxF,oCAIzB9f,OAAAgC,eAAIgvG,EAAAtwG,UAAA,SAAM,KAAV,WACI,OAAOF,KAAKgvG,yCAGhBxvG,OAAAgC,eAAIgvG,EAAAtwG,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAKgvG,SAAWhvG,KAAKgvG,QAAQr7F,KAAKo9F,mBAAqB/wG,KAAKqvG,IAAIj3F,OAAOq3F,UAAYzvG,KAAKqvG,IAAIj3F,OAAO44F,gDAG9GxxG,OAAAgC,eAAIgvG,EAAAtwG,UAAA,mBAAgB,KAApB,WACI,GAAIF,KAAK8wG,UACL,OAAO9wG,KAAK8wG,2CAgBbN,EAAAtwG,UAAAkkC,YAAP,WACIpkC,KAAK2wG,WAAWzuG,MAAK,GACrBlC,KAAK2wG,WAAWtsE,YAGbmsE,EAAAtwG,UAAA80D,WAAP,SAAkBx0B,GACd,GAAIxgC,KAAKixG,cACLjxG,KAAKqvG,IAAIj3F,SAAWpY,KAAKoY,QACzBpY,KAAKqvG,IAAIj3F,OAAO3E,QAAUzT,KAAKoY,OAAO3E,OACtCzT,KAAKqvG,IAAIj3F,OAAO1E,SAAW1T,KAAKoY,OAAO1E,OAAQ,CAE3C1T,KAAK0wG,oBACL1wG,KAAK8vD,SAASjB,YAAY7uD,KAAKywG,eAAgBzwG,KAAK4wG,yBAGlDM,EAAalxG,KAAK49B,WAAWC,cAAcluB,wBAC3CiqD,EAAMs3C,EAAWj5E,KAAOi5E,EAAWxhG,MAAQ,EAE3CiU,EAAS3jB,KAAK49B,WAAWC,cAActD,cACzCiG,EAAM40B,OAAO9e,MAAQsjB,GACrB55D,KAAKmxG,SAAWC,GAAalC,iBAC7BlvG,KAAK0wG,mBAAqB1wG,KAAKywG,eAAiB9sF,EAAOy+C,oBAEvDpiE,KAAKmxG,SAAWC,GAAajC,gBAC7BnvG,KAAK0wG,mBAAqB1wG,KAAKywG,eAAiB9sF,EAAO0tF,kBAG3B,UAA5BrxG,KAAKqvG,IAAIviC,KAAKwkC,WACdtxG,KAAK8vD,SAASvB,SAASvuD,KAAKywG,eAAgBzwG,KAAK4wG,uBAKtDJ,EAAAtwG,UAAA40D,YAAP,SAAmBt0B,GAAnB,IAAAhvB,EAAAxR,KAEI,GADawgC,EAAM40B,OAAO9C,iBACJ88C,GAItB,GAAIpvG,KAAKoY,QAAUpY,KAAKqvG,IAAIj3F,OAAOzE,KAAKvH,KAAOpM,KAAKoY,OAAOzE,KAAKvH,GAC5DpM,KAAKqvG,IAAIviC,KAAKwkC,UAAY,YAD9B,CAKA,GAAItxG,KAAKixG,cACLjxG,KAAKqvG,IAAIj3F,SAAWpY,KAAKoY,QACzBpY,KAAKqvG,IAAIj3F,OAAO3E,QAAUzT,KAAKoY,OAAO3E,OACtCzT,KAAKqvG,IAAIj3F,OAAO1E,SAAW1T,KAAKoY,OAAO1E,QAMnC,KAJK1T,KAAKoY,OAAO6P,QAAWjoB,KAAKoY,OAAO6P,QAAUjoB,KAAKqvG,IAAIj3F,OAAO6P,UAC9DjoB,KAAKqvG,IAAIviC,KAAKwkC,UAAY,eAGzBtxG,KAAKqvG,IAAIj3F,OAAO6P,QAAUjoB,KAAKoY,OAAO6P,OACfjoB,KAAKoY,OAAOzE,KAAK03F,gBAAe,GAAQhL,WAAWrgG,KAAKqvG,IAAIj3F,OAAO1I,QAEpE1P,KAAKoY,OAAOzE,KAAKy3F,4BACpCprG,KAAKqvG,IAAIviC,KAAKwkC,UAAY,OAE1BtxG,KAAKqvG,IAAIviC,KAAKwkC,UAAY,aAIlCtxG,KAAKqvG,IAAIviC,KAAKwkC,UAAY,QAG1BtxG,KAAKuxG,mBACLvxG,KAAKqvG,IAAIviC,KAAKwkC,UAAgC,UAApB9wE,EAAMx/B,OAAOoL,GAAiB,gBAAkB,aAE1EklD,EAAAA,SAAS,KAAK9uB,KAAKC,EAAAA,UAAUziC,KAAK2wG,aAAajuE,UAAU,WACrDlxB,EAAK69F,IAAIj3F,OAAOzE,KAAK69F,eACD,UAApBhxE,EAAMx/B,OAAOoL,GAAiBoF,EAAK+/F,iBAAiB32D,sBAAsB9hB,YAAc,GACpFtnB,EAAK+/F,iBAAiB32D,sBAAsB9hB,YAAc,QAKvE03E,EAAAtwG,UAAA60D,YAAP,SAAmBv0B,GACFA,EAAM40B,OAAO9C,iBACJ88C,KAItBpvG,KAAKqvG,IAAIviC,KAAKwkC,UAAY,QAEtBtxG,KAAKywG,gBACLzwG,KAAK8vD,SAASjB,YAAY7uD,KAAKywG,eAAgBzwG,KAAK4wG,qBAGpD5wG,KAAKuxG,kBACLvxG,KAAK2wG,WAAWzuG,MAAK,KAItBsuG,EAAAtwG,UAAAs1D,WAAP,SAAkBh1B,GAGd,GAFAA,EAAMqH,iBACOrH,EAAM40B,OAAO9C,iBACJ88C,MAIlBpvG,KAAKoY,QAAWpY,KAAKqvG,IAAIj3F,OAAOzE,KAAKvH,KAAOpM,KAAKoY,OAAOzE,KAAKvH,MAI7DpM,KAAKuxG,kBACLvxG,KAAK2wG,WAAWzuG,MAAK,GAGrBlC,KAAKixG,cAAc,KACbxkG,EAAO,CACTy2F,OAAQljG,KAAKqvG,IAAIj3F,OACjBpX,OAAQhB,KAAKoY,QAGbq5F,OAAe,EAKnB,GAJIzxG,KAAKoY,OAAO6P,SAAWjoB,KAAKqvG,IAAIj3F,OAAO6P,SACvCwpF,EAAkBzxG,KAAKoY,OAAOzE,KAAK03F,gBAAe,GAAQhL,WAAWrgG,KAAKqvG,IAAIj3F,OAAO1I,QAGpF+hG,GAAmBA,EAAkBzxG,KAAKoY,OAAOzE,KAAKy3F,6BACvDprG,KAAKoY,OAAO3E,QAAUzT,KAAKqvG,IAAIj3F,OAAO3E,OACtCzT,KAAKoY,OAAO1E,SAAW1T,KAAKqvG,IAAIj3F,OAAO1E,QACvC1T,KAAKqvG,IAAIO,WAGL,OAFA5vG,KAAKqvG,IAAIO,YAAa,OACtB5vG,KAAKoY,OAAOzE,KAAK+9F,kBAAkBz4F,KAAKxM,GAIhDzM,KAAKoY,OAAOzE,KAAKg+F,WAAW3xG,KAAKqvG,IAAIj3F,OAAQpY,KAAKoY,OAAQpY,KAAKmxG,UAE/DnxG,KAAKoY,OAAOzE,KAAKq8F,cAAgB,KACjChwG,KAAKoY,OAAOzE,KAAK6K,IAAIyhB,sCA7KhC/yB,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,qEAneV8zB,EAAAA,kBAUA6tB,EAAAA,iBANAjqB,EAAAA,cAmgB4GkqE,oCAjC3G3hG,EAAAA,MAAKX,KAAA,CAAC,0BA4KX+jG,EAhLA,CAGkDh8C,kBA8KlD,SAAAo9C,KAImC,2BAJlC1kG,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,gBACVS,UAAW,CAAC+qC,QAEmBi5D,KAKnCC,GAAA,SAAAhmF,GAII,SAAAgmF,EAA+Bv8B,UAE3BzpD,EAAAjrB,KAAAZ,KAAMs1E,IAAOt1E,KAarB,OAhB0CwU,EAAAA,EAAAA,GAKtCq9F,EAAA3xG,UAAA+C,UAAA,SAAUd,EAAYmzE,GAClB,OAAInzE,GAASA,aAAiByM,KACtB0mE,EACOzpD,EAAA3rB,UAAM+C,UAASrC,KAAAZ,KAACmC,EA3oBX,aA2oBuC6P,UAAWsjE,GAEvDzpD,EAAA3rB,UAAM+C,UAASrC,KAAAZ,KAACmC,GAGpBA,uBAhBlBye,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,gFAGO+uB,EAAAA,OAAMl4B,KAAA,CAACqlG,EAAAA,gBAexBD,EAnBA,CAG0CE,EAAAA,UAoB1CC,GAAA,SAAAnmF,GAII,SAAAmmF,EAA+B18B,UAE3BzpD,EAAAjrB,KAAAZ,KAAMs1E,IAAOt1E,KAarB,OAhB6CwU,EAAAA,EAAAA,GAKzCw9F,EAAA9xG,UAAA+C,UAAA,SAAUd,EAAYmzE,GAClB,OAAInzE,GAA0B,iBAAVA,EACZmzE,EACOzpD,EAAA3rB,UAAM+C,UAASrC,KAAAZ,KAACmC,EAAO6P,UAAWsjE,GAElCzpD,EAAA3rB,UAAM+C,UAASrC,KAAAZ,KAACmC,GAGpBA,uBAhBlBye,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,mFAGO+uB,EAAAA,OAAMl4B,KAAA,CAACqlG,EAAAA,gBAexBE,EAnBA,CAG6CC,EAAAA,4BA4B7C,SAAAC,IAAA,IAAA1gG,EAAA,OAAAqa,GAAAA,EAAAhrB,MAAAb,KAAAU,YAAAV,YACIwR,EAAA2gG,OAAQ,EACR3gG,EAAA4gG,qBAAuB,OAsB3B,OAxBkD59F,EAAAA,EAAAA,GAI9C09F,EAAAhyG,UAAAg6B,SAAA,SAASC,EAA6BC,EAAyClV,EAAqBmV,OAC1Fg4E,EAAYryG,KAAK83B,SAASu6E,UAC1BrxG,EAAsBhB,KAAK83B,SAAe,OAMhD93B,KAAKmyG,MAAsC,OAA9BnyG,KAAKoyG,qBACdpyG,KAAKoyG,qBACLC,EAAU1iG,wBAAwBqoB,OAC9Bh3B,EAAO2O,wBAAwBqoB,OAASmC,EAAexqB,wBAAwB/D,OAGvFuuB,EAAe57B,MAAMmR,MAAQ1O,EAAOw3B,YAAc,KAClDx4B,KAAK83B,SAASgC,mBAAqB95B,KAAK83B,SAAS6B,kBAAoB35B,KAAKmyG,MAAQv4E,GAAkBpC,IAAMoC,GAAkBlC,OAC5H13B,KAAK83B,SAASiC,cAAgB/5B,KAAKmyG,MAAQlqG,GAAmBH,GAE9D+jB,EAAA3rB,UAAMg6B,SAAQt5B,KAAAZ,KAACm6B,EAAgB,CAAEzqB,MAAO1O,EAAOw3B,YAAa5sB,OAAQ5K,EAAOy3B,cAAgBvT,EAAUmV,IAE7G63E,GAxBkDptE,ICvqBlD+rE,GAAA,WA48BI,SAAAA,EAAmB1wF,EAA8E3B,GAA9Exe,KAAAmgB,QAAAA,EAA8EngB,KAAAwe,IAAAA,EA76B1Fxe,KAAAunB,OAAS,GAaTvnB,KAAAsyG,UAAW,EAaXtyG,KAAA0vG,WAAY,EAaZ1vG,KAAA8kG,SAAW,KAaX9kG,KAAA+vF,YAAa,EAab/vF,KAAAytG,WAAY,EAiIZztG,KAAAyvG,SAAU,EA+DVzvG,KAAA+qG,SAAW/qG,KAAKgrG,gBAYhBhrG,KAAAuyG,cAAgB,GAahBvyG,KAAAwyG,mBAAqB,GAkDrBxyG,KAAAsc,qBAAsB,EAatBtc,KAAAyyG,mBAAoB,EAapBzyG,KAAAqd,SAAqBC,GAASwD,OAoF9B9gB,KAAA4nG,YAAa,EA4YpB5nG,KAAA0T,OAAS,KAmBC1T,KAAA0yG,SAAU,EAoBV1yG,KAAA2yG,WAAa,KAIb3yG,KAAA4yG,SAAW,KAIX5yG,KAAA6yG,cAAkC9hG,GAAuBC,WAQzDhR,KAAA8yG,SAAU,EAQV9yG,KAAA+yG,gBAAiB,EAIjB/yG,KAAAgzG,iBAAkB,EAQlBhzG,KAAAizG,iBAAmB,KAInBjzG,KAAAkzG,aAAc,EAiBhBlzG,KAAAmzG,QAAU7d,IAkhBtB,OA/2CI91F,OAAAgC,eACIqvG,EAAA3wG,UAAA,aAAU,KADd,WAEI,OAAOF,KAAKkzG,iBAUhB,SAAe/wG,GACXnC,KAAKkzG,YAAc/wG,EAEfnC,KAAK2T,MACL3T,KAAK2T,KAAK2F,eAAe85F,wDAUjC5zG,OAAAgC,eACIqvG,EAAA3wG,UAAA,SAAM,KADV,WAEI,OAAOF,KAAK8yG,aAUhB,SAAW3wG,GACHnC,KAAK8yG,UAAY3wG,IACjBnC,KAAK8yG,QAAU3wG,EACXnC,KAAK2T,OACL3T,KAAK2T,KAAK0/F,cACVrzG,KAAK2T,KAAKmI,SAAQ,IAGtB9b,KAAKszG,QACDtzG,KAAK2T,OACL3T,KAAK2T,KAAK2D,eAAc,GACxBtX,KAAK2T,KAAK2F,eAAei6F,qBACzBvzG,KAAK2T,KAAK+3F,SACV1rG,KAAK2T,KAAK6/F,iBAAiBC,sBAG3BzzG,KAAK0T,QAAU1T,KAAK0T,OAAO+2F,cAAgBzqG,KAAK0T,OAAO+T,SAAWtlB,IAClEnC,KAAK0T,OAAO+T,OAAStlB,qCAWjC3C,OAAAgC,eACIqvG,EAAA3wG,UAAA,gBAAa,KADjB,WAEI,OAAOF,KAAK+yG,oBAUhB,SAAkB5wG,GACVnC,KAAK+yG,iBAAmB5wG,IACxBnC,KAAK+yG,eAAiB5wG,EACtBnC,KAAKszG,0CAUb9zG,OAAAgC,eACIqvG,EAAA3wG,UAAA,iBAAc,KADlB,WAEI,OAAOF,KAAKgzG,qBAUhB,SAAmB7wG,GACXnC,KAAKgzG,kBAAoB7wG,IACzBnC,KAAKgzG,gBAAkB7wG,EACvBnC,KAAKszG,0CAuBb9zG,OAAAgC,eACWqvG,EAAA3wG,UAAA,QAAK,KADhB,WAEI,OAAOF,KAAK0zG,eAAiB1zG,KAAK2zG,OAAS3zG,KAAK4zG,kBASpD,SAAiBzxG,GACTA,IACAnC,KAAK0zG,gBAAiB,EACtB1zG,KAAK2zG,OAASxxG,oCAItB3C,OAAAgC,eAAWqvG,EAAA3wG,UAAA,YAAS,KAApB,eACU2zG,EAAW7zG,KAAK0P,MAEtB,OAD0BmkG,GAAgC,iBAAbA,IAAoD,IAA3BA,EAAS/jG,QAAQ,KAE5E4lC,SAASm+D,EAAU,IAAM,KAAO7zG,KAAK2T,KAAKw5F,UAAYntG,KAAK2T,KAAKmgG,qBAC/DD,EAID7zG,KAAK0P,MAFL1P,KAAK4zG,cAAgB5zG,KAAK2T,KAAKogG,0DAiF9Cv0G,OAAAgC,eAAIqvG,EAAA3wG,UAAA,QAAK,KAAT,WACI,OAAOF,KAAK2T,KAAK0I,QAAQvM,QAAQ9P,uCAyDrCR,OAAAgC,eACWqvG,EAAA3wG,UAAA,SAAM,KADjB,WAEI,OAAOF,KAAK0yG,aAUhB,SAAkBvwG,GACd,GAAInC,KAAK0yG,UAAYvwG,EAAO,CACxB,GAAInC,KAAK2T,MAAQ3T,KAAK0P,QAAUqT,MAAM2yB,SAAS11C,KAAK0P,MAAO,KAEvD,YADAvN,EAAQnC,KAAKg0G,MAAQh0G,KAAKi0G,SAM9Bj0G,KAAK0yG,QAAUvwG,oCAuBvB3C,OAAAgC,eACWqvG,EAAA3wG,UAAA,YAAS,KADpB,WAEI,OAAOF,KAAK2yG,gBAShB,SAAqBuB,GACjBl0G,KAAK2yG,WAAa,IAAIuB,EAElBl0G,KAAK2T,OACL3T,KAAK2T,KAAK2F,eAAe66F,8BAA8Bn0G,KAAK+V,OAC3D/V,KAAS,KAASo0G,sBACnBp0G,KAAK2T,KAAK2F,eAAe85F,yDAuBjC5zG,OAAAgC,eACWqvG,EAAA3wG,UAAA,UAAO,KADlB,WAEI,OAAOF,KAAK4yG,cAShB,SAAmB5hG,GACfhR,KAAK4yG,SAAW5hG,mCASpBxR,OAAAgC,eACWqvG,EAAA3wG,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAK6yG,mBAahB,SAAwBqB,GACpBl0G,KAAK6yG,cAAgBqB,mCASzB10G,OAAAgC,eACWqvG,EAAA3wG,UAAA,mBAAgB,KAD3B,WAEI,OAAOF,KAAKq0G,uBAUhB,SAA4BC,GACxBt0G,KAAKq0G,kBAAoBC,mCAS7B90G,OAAAgC,eAAIqvG,EAAA3wG,UAAA,kBAAe,KAAnB,WACI,OAAOF,KAAKizG,kDAiBhBzzG,OAAAgC,eACIqvG,EAAA3wG,UAAA,eAAY,KADhB,WAEI,OAAOF,KAAKu0G,mBAkBhB,SAAiB7kE,GACb1vC,KAAKu0G,cAAgB7kE,EACjB1vC,KAAK2T,MACL3T,KAAK2T,KAAK6K,IAAIC,gDAUtBjf,OAAAgC,eACIqvG,EAAA3wG,UAAA,iBAAc,KADlB,WAEI,OAAOF,KAAKw0G,qBAkBhB,SAAmB9kE,GACf1vC,KAAKw0G,gBAAkB9kE,EACnB1vC,KAAK2T,MACL3T,KAAK2T,KAAK6K,IAAIC,gDAUtBjf,OAAAgC,eACIqvG,EAAA3wG,UAAA,uBAAoB,KADxB,WAEI,OAAOF,KAAKy0G,2BAgBhB,SAAyB/kE,GACrB1vC,KAAKy0G,sBAAwB/kE,EACzB1vC,KAAK2T,MACL3T,KAAK2T,KAAK6K,IAAIC,gDAUtBjf,OAAAgC,eACIqvG,EAAA3wG,UAAA,qBAAkB,KADtB,WAEI,OAAOF,KAAK00G,yBAgBhB,SAAuBhlE,GACnB1vC,KAAK00G,oBAAsBhlE,mCAS/BlwC,OAAAgC,eAAIqvG,EAAA3wG,UAAA,QAAK,KAAT,WAAA,IAAAsR,EAAAxR,KACI,OAAOA,KAAK2T,KAAKsE,QAAQxB,OAAO,SAACoB,GAAQ,OAAAA,aAAeowF,KACnDrxF,IAAI,SAACiB,GACF,GAAIA,EAAIM,MACJ,OAAON,EAAIM,MAAM1B,OAAO,SAACe,GAAS,OAAAA,EAAKc,cAAgB9G,EAAKgB,UAEjEsW,OAAO,SAAChX,EAAGvS,GAAM,OAAAuS,EAAEnP,OAAOpD,IAAI,qCAUzCC,OAAAgC,eAAIqvG,EAAA3wG,UAAA,eAAY,KAAhB,WACI,IAAK6iB,MAAM/iB,KAAKmzG,SACZ,OAAOnzG,KAAKmzG,YAEV1K,EAAkBzoG,KAAK2T,KAAK80F,gBAAgBhyF,OAAO,SAAAtV,GAAK,OAACA,EAAEqsG,cAC3DhF,EAAgBxoG,KAAK2T,KAAK60F,cAAc/xF,OAAO,SAAAtV,GAAK,OAACA,EAAEqsG,cACzD13F,EAAM9V,KACN20G,GAAU,EAMd,GAJI30G,KAAKwtG,cACL13F,EAAM9V,KAAK40G,YAAYn+F,OAAO,SAAAtV,GAAK,OAACA,EAAEqsG,cAAa,IAGlDxtG,KAAKioB,OAIN0sF,EAASnM,EAAc14F,QAAQgG,OAJjB,KACR++F,EAAoBpM,EAAgB34F,QAAQgG,GAClD6+F,GAAgC,IAAvBE,GAA4B,EAAIrM,EAAc7nG,OAASk0G,EAKpE,OADA70G,KAAKmzG,QAAUwB,mCAUnBn1G,OAAAgC,eAAIqvG,EAAA3wG,UAAA,cAAW,KAAf,WACI,OAAO,mCASXV,OAAAgC,eAAIqvG,EAAA3wG,UAAA,eAAY,KAAhB,WACI,OAAO,mCAWXV,OAAAgC,eAAIqvG,EAAA3wG,UAAA,cAAW,KAAf,WACI,MAAO,oCAUXV,OAAAgC,eAAIqvG,EAAA3wG,UAAA,QAAK,KAAT,WAII,QAHI40G,EAAM90G,KAAK0T,OACXqhG,EAAM,EAEHD,GACHC,IACAD,EAAMA,EAAIphG,OAEd,OAAOqhG,mCAGXv1G,OAAAgC,eAAIqvG,EAAA3wG,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAK2T,KAAK60F,cAAcxoG,KAAK2T,KAAK60F,cAAc7nG,OAAS,KAAOX,sCAE3ER,OAAAgC,eAAIqvG,EAAA3wG,UAAA,cAAW,KAAf,WACI,OAAOF,KAAKqiG,QAAUriG,KAAKoiG,SAAWpiG,KAAKqiG,OAASriG,KAAKoiG,SAAW,mCAExE5iG,OAAAgC,eAAIqvG,EAAA3wG,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAKilG,QAAUjlG,KAAKklG,SAAWllG,KAAKilG,OAASjlG,KAAKklG,SAAW,mCAoExE1lG,OAAAgC,eAAIqvG,EAAA3wG,UAAA,2BAAwB,KAA5B,WACI,OAAOF,KAAK2T,KAAKkI,yBAAyB7G,KAAKhV,KAAK+V,wCAyHjD86F,EAAA3wG,UAAA80G,kBAAP,WACIh1G,KAAKmzG,QAAU7d,KAMZub,EAAA3wG,UAAAqgE,mBAAP,WAaI,GAZIvgE,KAAK0kG,eACL1kG,KAAKu0G,cAAgBv0G,KAAK0kG,aAAah1D,UAEvC1vC,KAAKi1G,eACLj1G,KAAKw0G,gBAAkBx0G,KAAKi1G,aAAavlE,UAEzC1vC,KAAKk1G,iBACLl1G,KAAKy0G,sBAAwBz0G,KAAKk1G,eAAexlE,UAEjD1vC,KAAKm1G,8BACLn1G,KAAK00G,oBAAsB10G,KAAKm1G,4BAA4BzlE,WAE3D1vC,KAAK2jD,UACN,OAAQ3jD,KAAKqd,UACT,KAAKC,GAASwD,OACd,KAAKxD,GAASyD,QACV/gB,KAAK2jD,UAAYimD,GACjB,MACJ,KAAKtsF,GAASC,OACVvd,KAAK2jD,UAAYomD,GACjB,MACJ,KAAKzsF,GAAS1O,KACV5O,KAAK2jD,UAAYsmD,GACjB,MACJ,QACIjqG,KAAK2jD,UAAYimD,GAI7B,IAAK5pG,KAAKo1G,QACN,OAAQp1G,KAAKqd,UACT,KAAKC,GAASyD,QACV/gB,KAAKo1G,QAAUjuC,GAA2Bn2D,WAC1C,MACJ,KAAKsM,GAASC,OACVvd,KAAKo1G,QAAUvsC,GAA0B73D,WACzC,MACJ,KAAKsM,GAAS1O,KACV5O,KAAKo1G,QAAUhuC,GAAwBp2D,WACvC,MACJ,KAAKsM,GAASwD,OACd,QACI9gB,KAAKo1G,QAAUtsC,GAA0B93D,aASzD6/F,EAAA3wG,UAAAm1G,gBAAA,SAAgBC,EAAgB/lG,OAEtBgmG,EAAiBD,EAEnBt1G,KAAK2T,KAAK+2F,sBADV1qG,KAAKoQ,UAAYpQ,KAAKoQ,SAAS0Y,OAFd,SAACs3B,EAAK9gC,GAAQ,OAAAgD,KAAKC,IAAIjD,EAAI4lF,SAAW5lF,EAAI0lF,eAAiB,EAAG5kD,IAE3B,IAAM,EAExDo1D,EAAkBF,EAAmD,KAA3Ct1G,KAAKy1G,qBAAqBz1G,KAAKoQ,UAC/D,OAAOb,EACPimG,GAAkB,SAASD,EAAa,IACpCC,GAAkB,UAAUD,EAAa,SAG1C1E,EAAA3wG,UAAAw1G,2BAAP,SAAkCtlG,GAAlC,IAAAoB,EAAAxR,KACU21G,EAAmC,GAEzCvlG,EAASF,QAAQ,SAAA4F,GACb,GAAKA,EAAIovF,SAAT,KAGM0Q,EAAe9/F,EAAI49F,gBAAkBiC,EAAY7/F,EAAIovF,SAAW,KAAOyQ,EAAY7/F,EAAIovF,SAAW,GAAGwO,eACrGmC,EAAiBF,EAAY7/F,EAAIovF,SAAW,IAAMyQ,EAAY7/F,EAAIovF,SAAW,GAAG4Q,QAAUhgG,EAAIkvF,eAC9F+Q,EAAgBjgG,EAAI49F,gBAAkBiC,EAAY7/F,EAAIovF,SAAW,IAAMyQ,EAAY7/F,EAAIovF,SAAW,GAAGwO,eACrGsC,GAAoBlgG,EAAI49F,gBAAkBiC,EAAY7/F,EAAIovF,SAAW,KAAOyQ,EAAY7/F,EAAIovF,SAAW,GAAGwO,eAEhH,GAAIiC,EAAY7/F,EAAIovF,SAAW,KAAOlzF,UAGlC2jG,EAAY7/F,EAAIovF,SAAW,GAAK,CAC5B+Q,IAAKngG,EACLpG,MAAOoG,EAAI49F,gBAAkBliG,EAAKmC,KAAKuiG,qBAAuBxgE,SAAS5/B,EAAIq3F,UAAW,IAAM,KAC5F2I,QAAShgG,EAAIkvF,eACbC,OAAQnvF,EAAIovF,SAAWpvF,EAAIkvF,eAC3B0O,eAAgB59F,EAAI49F,qBAErB,GAAIkC,GAAgBC,IAAmB,GAAc,GAA2B,CAOnF,GAAIE,GAAiBF,EAIjB,IAAK,IAAIr1G,EAAIsV,EAAIovF,SAAW,EAAIpvF,EAAIkvF,eAAgBxkG,EAAIm1G,EAAY7/F,EAAIovF,SAAW,GAAGD,OAAS,KACtF0Q,EAAYn1G,KAAOm1G,EAAYn1G,GAAGkzG,gBADuDlzG,IAE1Fm1G,EAAYn1G,GAAKm1G,EAAY7/F,EAAIovF,SAAW,GAQxDyQ,EAAY7/F,EAAIovF,SAAW,GAAK,CAC5B+Q,IAAKngG,EACLpG,MAAOoG,EAAI49F,gBAAkBliG,EAAKmC,KAAKuiG,qBAAuBxgE,SAAS5/B,EAAIq3F,UAAW,IAAM,KAC5F2I,QAAShgG,EAAIkvF,eACbC,OAAQnvF,EAAIovF,SAAWpvF,EAAIkvF,eAC3B0O,eAAgB59F,EAAI49F,qBAErB,GAAIqC,GAAiBJ,EAAY7/F,EAAIovF,SAAW,GAAG4Q,QAAUhgG,EAAIkvF,eAIpE,IAASxkG,EAAIsV,EAAIovF,SAAW,EAAIyQ,EAAY7/F,EAAIovF,SAAW,GAAG4Q,QAASt1G,EAAIsV,EAAIovF,SAAW,EAAIpvF,EAAIkvF,kBACzF2Q,EAAYn1G,KAAOm1G,EAAYn1G,GAAGkzG,gBADuElzG,IAE1Gm1G,EAAYn1G,GAAK,CACby1G,IAAKngG,EACLpG,MAAOoG,EAAI49F,gBAAkBliG,EAAKmC,KAAKuiG,qBAAuBxgE,SAAS5/B,EAAIq3F,UAAW,IAAM,KAC5F2I,QAAShgG,EAAIkvF,eACbC,OAAQnvF,EAAIovF,SAAWpvF,EAAIkvF,eAC3B0O,eAAgB59F,EAAI49F,mBAUxC,IAAK,IAAIlzG,EAAI,EAAGA,EAAIm1G,EAAYh1G,OAAQH,IACpC,GAAIm1G,EAAYn1G,IAA+B,EAAzBm1G,EAAYn1G,GAAGs1G,QAAa,CAI9C,QAHI7iG,EAAI,EAGDA,EAAI0iG,EAAYn1G,GAAGs1G,SAAWt1G,EAAIyS,EAAI,EAAI0iG,EAAYn1G,GAAGykG,UACxD0Q,EAAYn1G,EAAIyS,OACb0iG,EAAYn1G,GAAGkP,OAASimG,EAAYn1G,EAAIyS,GAAGvD,QAC3CimG,EAAYn1G,GAAGkP,QAAUimG,EAAYn1G,EAAIyS,GAAGvD,OAASimG,EAAYn1G,EAAIyS,GAAG6iG,SAAWH,EAAYn1G,GAAGs1G,SAClGH,EAAYn1G,EAAIyS,GAAGvD,OAASimG,EAAYn1G,EAAIyS,GAAG6iG,SAAWH,EAAYn1G,GAAGs1G,UAJZ7iG,IAAK,KAS/DvD,EAAQimG,EAAYn1G,GAAGkzG,eACzBiC,EAAYn1G,GAAGkP,MAAQimG,EAAYn1G,GAAGs1G,QACtCH,EAAYn1G,GAAGkP,MACnBimG,EAAYn1G,EAAIyS,GAAK,CACjBgjG,IAAKN,EAAYn1G,GAAGy1G,IACpBvmG,MAAOA,EACPomG,QAAS,EACT7Q,OAAQ0Q,EAAYn1G,GAAGykG,OACvByO,eAAgBiC,EAAYn1G,GAAGkzG,gBAM3CiC,EAAYn1G,GAAGkP,MAAQimG,EAAYn1G,GAAGkzG,eAClCiC,EAAYn1G,GAAGkP,MAAQimG,EAAYn1G,GAAGs1G,QACtCH,EAAYn1G,GAAGkP,MAInBlP,GAAKyS,GAHL0iG,EAAYn1G,GAAGs1G,QAAU,GAOjC,OAAOH,GAGD9E,EAAA3wG,UAAAi2G,0BAAV,SAAoC/lG,GAKhC,QAJMulG,EAAc31G,KAAK01G,2BAA2BtlG,GAG9CnB,EAAmB,GAChBzO,EAAI,EAAGA,EAAIm1G,EAAYh1G,OAAQH,IAChCm1G,EAAYn1G,IAAQm1G,EAAYn1G,GAAGkP,MACnCT,EAAOzM,KAAKmzG,EAAYn1G,GAAGkP,MAAQ,MAEnCT,EAAOzM,KAAKkzC,SAAS11C,KAAK2T,KAAKogG,yBAA0B,IAAM,MAGvE,OAAO9kG,GAGD4hG,EAAA3wG,UAAAu1G,qBAAV,SAA+BrlG,GAE5B,OADYpQ,KAAKm2G,0BAA0B/lG,GAChCiiB,KAAK,MAGZw+E,EAAA3wG,UAAAqsG,wBAAP,WACI,GAAIvsG,KAAKyqG,eAAiBzqG,KAAK0T,OAAO+2F,cAAgBzqG,KAAKwtG,YACvD,MAAO,CAAC,CAAExsG,OAAQhB,KAAMysG,SAAU,IAOtC,QAJM2J,EAAcp2G,KAAK01G,2BAA2B11G,KAAK0T,OAAOtD,UAC1DimG,EAAiC,GACjCpR,EAASjlG,KAAKilG,OAASjlG,KAAKilG,OAASjlG,KAAKklG,SAAW,EAElD1kG,EAAI,EAAGA,EAAI41G,EAAYz1G,OAAQH,IAChCR,KAAKklG,UAAY1kG,EAAI,GAAKA,EAAI,EAAIykG,GAClCoR,EAAQ7zG,KAAK,CAAExB,OAAQo1G,EAAY51G,GAAGy1G,IAAKxJ,SAAU,IAK7D,QADM6J,EAAyC,GACtCrjG,EAAI,EAAGA,EAAIojG,EAAQ11G,OAAQsS,IAC5BqjG,EAAgB31G,QAAU21G,EAAgBA,EAAgB31G,OAAS,GAAGK,OAAO+U,QAAUsgG,EAAQpjG,GAAGjS,OAAO+U,MACzGugG,EAAgBA,EAAgB31G,OAAS,GAAG8rG,WAE5C6J,EAAgB9zG,KAAK6zG,EAAQpjG,IAIrC,OAAOqjG,GAeJzF,EAAA3wG,UAAA8zG,IAAP,SAAWxhG,GAMP,GAHIxS,KAAK2T,MACL3T,KAAK2T,KAAKmI,SAAQ,GAElB9b,KAAK0yG,QACL,OAAO,EAGX,GAAI1yG,KAAK0T,SAAW1T,KAAK0T,OAAOuU,OAC5B,OAAOjoB,KAAK2qG,eAAeqJ,IAAIxhG,OAG7BmB,EAAQ3T,KAAS,KACjBwwC,EAAWh+B,IAAUR,UAC3B,GAAIw+B,IAAah+B,EAAQ,GAAKA,GAASmB,EAAK60F,cAAc7nG,QACtD,OAAO,MAGL+O,EAAQgmC,SAAS11C,KAAK0P,MAAO,IAEnC,IAAK1P,KAAK0T,QAAWC,EAAK4iG,kBAAiB,GAAQ7mG,EAAQiE,EAAK6iG,qBAC5D,OAAO,EAGXx2G,KAAK0yG,SAAU,EACf1yG,KAAKy2G,eAAiB9iG,EAAK+iG,iBAAiB5mG,QAAQ9P,MACpDwS,EAAQA,IAAUR,UAAYQ,EAAQmB,EAAKgjG,eAAeh2G,WACpDi2G,EAAejjG,EAAKgjG,eAAenkG,GACnC/F,EAAO,CAAE2L,OAAQpY,KAAM2c,cAAenK,EAAOqkG,UAAU,GAwB7D,OAvBAljG,EAAKmjG,gBAAgB79F,KAAKxM,IAEiB,IAAvCkH,EAAKgjG,eAAe7mG,QAAQ9P,QAC5B2T,EAAKgjG,eAAe5/F,OAAOtK,EAAKkQ,cAAe,EAAG3c,OAEL,IAAzC2T,EAAK+iG,iBAAiB5mG,QAAQ9P,OAC9B2T,EAAK+iG,iBAAiB3/F,OAAOpD,EAAK+iG,iBAAiB5mG,QAAQ9P,MAAO,IAItEwwC,GACA78B,EAAKojG,aAAa/2G,KAAM42G,GAGxB52G,KAAKwtG,cACLxtG,KAAK40G,YAAY1kG,QAAQ,SAAAywB,GAAS,OAAAA,EAAMqzE,QACxCrgG,EAAKqjG,mBAGTrjG,EAAK0/F,cACL1/F,EAAK6K,IAAIyhB,gBACTjgC,KAAK2T,KAAK6/F,iBAAiBC,qBAC3BzzG,KAAK2T,KAAK2D,eAAc,IACjB,GAaJu5F,EAAA3wG,UAAA+zG,MAAP,SAAazhG,GAIT,GAHIxS,KAAK2T,MACL3T,KAAK2T,KAAKmI,SAAQ,IAEjB9b,KAAK0yG,QACN,OAAO,EAGX,GAAI1yG,KAAK0T,QAAU1T,KAAK0T,OAAOuU,OAC3B,OAAOjoB,KAAK2qG,eAAesJ,MAAMzhG,OAG/BmB,EAAQ3T,KAAS,KACjBwwC,EAAWh+B,IAAUR,UAC3B,GAAIw+B,IAAah+B,EAAQ,GAAKA,GAASmB,EAAK+iG,iBAAiB/1G,QACzD,OAAO,EAGX6R,EAASA,IAAUR,UAAYQ,EAC3BxS,KAAKy2G,iBAAmBzkG,UAAYhS,KAAKy2G,eAAiBz2G,KAAKwS,MACnExS,KAAK0yG,SAAU,MAETkE,EAAejjG,EAAK+iG,iBAAiBlkG,GAE3CmB,EAAK+iG,iBAAiB3/F,OAAOvE,EAAO,EAAGxS,OACI,IAAvC2T,EAAKgjG,eAAe7mG,QAAQ9P,OAC5B2T,EAAKgjG,eAAe5/F,OAAOpD,EAAKgjG,eAAe7mG,QAAQ9P,MAAO,GAG9DwwC,GACA78B,EAAKojG,aAAa/2G,KAAM42G,GAGxB52G,KAAKwtG,aACLxtG,KAAK40G,YAAY1kG,QAAQ,SAAAywB,GAAS,OAAAA,EAAMszE,UAG5CtgG,EAAKqjG,kBACLrjG,EAAK0/F,kBAGC5mG,EAAO,CAAE2L,OAAQpY,KAAM2c,cADPhJ,EAAK+iG,iBAAiB5mG,QAAQ9P,MACR62G,UAAU,GAOtD,OANAljG,EAAKmjG,gBAAgB79F,KAAKxM,GAE1BkH,EAAK6K,IAAIyhB,gBACTjgC,KAAK2T,KAAK6/F,iBAAiBC,qBAC3BzzG,KAAK2T,KAAK2D,eAAc,IAEjB,GASX9X,OAAAgC,eAAIqvG,EAAA3wG,UAAA,iBAAc,KAAlB,WAEI,QADIwT,EAAS1T,KAAK0T,OACXA,GAAUA,EAAOA,QACpBA,EAASA,EAAOA,OAEpB,OAAOA,mCAKDm9F,EAAA3wG,UAAAozG,MAAV,WACQtzG,KAAK2T,MACL3T,KAAK2T,KAAK8K,gBAYlBjf,OAAAgC,eAAIqvG,EAAA3wG,UAAA,aAAU,KAAd,WAAA,IAAAsR,EAAAxR,KACI,OAAOA,KAAK2T,KAAKsjG,eAAejiG,KAAK,SAACuS,GAAW,OAAAA,EAAOnP,SAAW5G,qCAWvEhS,OAAAgC,eAAIqvG,EAAA3wG,UAAA,aAAU,KAAd,WAAA,IAAAsR,EAAAxR,KACI,OAAOA,KAAK2T,KAAKujG,eAAeliG,KAAK,SAACmiG,GAAe,OAAAA,EAAW/+F,SAAW5G,qCAO/EhS,OAAAgC,eAAIqvG,EAAA3wG,UAAA,cAAW,KAAf,WAAA,IAAAsR,EAAAxR,KACI,OAAOA,KAAK2T,KAAKyjG,iBAAiBpiG,KAAK,SAAC41F,GAAgB,OAAAA,EAAYxyF,SAAW5G,qCAa5Eq/F,EAAA3wG,UAAAm3G,SAAP,WACSr3G,KAAKwtG,cAENxtG,KAAK0P,MAAQ1P,KAAKyrG,sBAElBzrG,KAAK2T,KAAK8K,eACVze,KAAK2T,KAAK+3F,WAeXmF,EAAA3wG,UAAAurG,oBAAP,eACUr8F,EAAQpP,KAAK2T,KAAKuR,SAASoyF,cAC3BC,EAAU,IAAIxoG,IAEpB,GAAwB,EAApB/O,KAAKmY,MAAMxX,OAAY,KACnB62G,EAAqB,GACyB,EAA9Cx3G,KAAKmY,MAAM,GAAG0lB,cAAcztB,SAASzP,OACrCX,KAAKmY,MAAMjI,QAAQ,SAACsH,GAAS,OAAAggG,EAAmBh1G,KAAKgV,EAAKqwF,mBAAmBz4F,MAE7EooG,EAAqBx3G,KAAKmY,MAAMvB,IAAI,SAACY,GAAS,OAAArI,GAAoBC,EAAOoI,EAAKqmB,qBAG5ErrB,EAAQglG,EAAmB1nG,QAAQwS,KAAKC,IAAG1hB,MAARyhB,KAAI5f,EAAQ80G,KAC/CC,EAAYz3G,KAAK2T,KAAKuR,SAASif,YAAYwtB,iBAAiB3xD,KAAKmY,MAAM3F,GAAOqrB,eAC9E65E,EAAcrX,WAAWoX,EAAUlH,aAAelQ,WAAWoX,EAAUE,cACzEtX,WAAWoX,EAAUG,kBAEzBL,EAAQ52F,IAAI2B,KAAKC,IAAG1hB,MAARyhB,KAAI5f,EAAQ80G,IAAqBE,GAGjD,GAAI13G,KAAKirG,WAAY,KACbA,OAAU,EAEVA,EADAjrG,KAAKivF,gBAAyF,EAAvEjvF,KAAKirG,WAAWrtE,WAAWC,cAAcztB,SAAS,GAAGA,SAASzP,OACvE2hB,KAAKC,IAAG1hB,MAARyhB,KAAI5f,EAAQ/C,MAAMgR,KAAK3Q,KAAKirG,WAAWrtE,WAAWC,cAAcztB,SAAS,GAAGA,UACrFwG,IAAI,SAAC+pB,GAAU,OAAAxxB,GAAoBC,EAAOuxB,OAElCxxB,GAAoBC,EAAOpP,KAAKirG,WAAWrtE,WAAWC,cAAcztB,SAAS,KAG1FpQ,KAAKsyG,UAAYtyG,KAAK+vF,cACtBkb,GAAcjrG,KAAKirG,WAAWrtE,WAAWC,cAAcztB,SAAS,GAAGT,wBAAwBD,WAGzFmoG,EAAc73G,KAAK2T,KAAKuR,SAASif,YAAYwtB,iBAAiB3xD,KAAKirG,WAAWrtE,WAAWC,eACzFi6E,EAAgBzX,WAAWwX,EAAYtH,aAAelQ,WAAWwX,EAAYF,cAC/EtX,WAAWwX,EAAYD,kBAC3BL,EAAQ52F,IAAIsqF,EAAY6M,OAItBC,EAAcz1F,KAAKC,IAAG1hB,MAARyhB,KAAI5f,EAAQ/C,MAAMgR,KAAK4mG,EAAQ9oG,UAC7CiB,EAAQ4S,KAAKU,KAAK+0F,EAAcR,EAAQhrG,IAAIwrG,IAElD,OAAIx6F,OAAOwF,MAAMrT,GACN1P,KAAK0P,MAELA,EAAQ,MAOhBmhG,EAAA3wG,UAAA83G,aAAP,eACUnE,EAAW7zG,KAAK0P,MAChBuoG,EAAoBpE,GAAgC,iBAAbA,IAAoD,IAA3BA,EAAS/jG,QAAQ,KAEvF,GAAI9P,KAAK0T,QAAU1T,KAAK0T,OAAO+2F,aAC3B,MAAO,GAGX,IAAIoJ,GAAaoE,EASb,OAAOpE,MAPHqE,EAAYrE,EAKhB,MAJyB,iBAAdqE,IAAuD,IAA7BA,EAAUxsF,SAAS,QACpDwsF,GAAa,MAGVA,uBAl9ClBzoE,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,aACVuiC,SAAU,gDAtCLn6B,UAVLs3B,EAAAA,oDA6DCz/B,EAAAA,sBAaAA,EAAAA,wBAaAA,EAAAA,yBAaAA,EAAAA,wBAaAA,EAAAA,0BAaAA,EAAAA,yBAaAA,EAAAA,0BASAA,EAAAA,sBA0BAA,EAAAA,6BAwCAA,EAAAA,8BAyBAA,EAAAA,uBA6BAA,EAAAA,qBASAA,EAAAA,wBAyCAA,EAAAA,wBAaAA,EAAAA,6BAYAA,EAAAA,kCAaAA,EAAAA,2BAkBAA,EAAAA,yBAmBAA,EAAAA,mCAaAA,EAAAA,iCAaAA,EAAAA,wBAaAA,EAAAA,sBASAA,EAAAA,yBA4CAA,EAAAA,0BA+BAA,EAAAA,uBASAA,EAAAA,4BAqBAA,EAAAA,gCAyBAA,EAAAA,4BAwCAA,EAAAA,MAAKX,KAAA,CAAC,wCAiCNW,EAAAA,oCAiCAA,EAAAA,MAAKX,KAAA,CAAC,kDA+BNW,EAAAA,MAAKX,KAAA,CAAC,sCAyINW,EAAAA,sBAaAA,EAAAA,wBAYAA,EAAAA,wBAWAA,EAAAA,4BAmHAw5C,EAAAA,aAAYn6C,KAAA,CAACkiG,GAA0B,CAAE57D,KAAM47D,2BAK/C/nD,EAAAA,aAAYn6C,KAAA,CAACmiG,GAAgC,CAAE77D,KAAM67D,6BAKrDhoD,EAAAA,aAAYn6C,KAAA,CAACqiG,GAAgC,CAAE/7D,KAAM+7D,0CAOrDloD,EAAAA,aAAYn6C,KAAA,CAACiiG,GAAgC,CAAE37D,KAAM27D,QAxhBtDlhE,EAAAA,CADC/R,GAAkB,2HAuiCvBo1E,EAv9CA,kBA8qDI,SAAAsH,EAAmBh4F,EAA8E3B,GAAjG,IAAAhN,EAEIqa,EAAAjrB,KAAAZ,KAAMmgB,EAAS3B,IAAIxe,YAFJwR,EAAA2O,QAAAA,EAA8E3O,EAAAgN,IAAAA,EA3MjGhN,EAAApB,SAAW,IAAIgoG,EAAAA,UAgCR5mG,EAAAo2F,YAAa,IA+KxB,OAlN6CpzF,EAAAA,EAAAA,GAWzChV,OAAAgC,eACW22G,EAAAj4G,UAAA,YAAS,KADpB,WAEI,OAAOF,KAAK2yG,gBAShB,SAAqBuB,qCAqBrB10G,OAAAgC,eACW22G,EAAAj4G,UAAA,UAAO,KADlB,WAEI,OAAOF,KAAK4yG,cAShB,SAAmBsB,qCAQnB10G,OAAAgC,eAAI22G,EAAAj4G,UAAA,kBAAe,KAAnB,WACI,OAAOF,KAAKizG,kDAShBzzG,OAAAgC,eAAI22G,EAAAj4G,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAKu0G,mBAKhB,SAAiB7kE,qCAQjBlwC,OAAAgC,eAAI22G,EAAAj4G,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAKw0G,qBAMhB,SAAmB9kE,qCAQnBlwC,OAAAgC,eAAI22G,EAAAj4G,UAAA,uBAAoB,KAAxB,WACI,OAAOF,KAAKy0G,2BAKhB,SAAyB/kE,qCAQzBlwC,OAAAgC,eAAI22G,EAAAj4G,UAAA,QAAK,KAAT,WACI,MAAO,oCASXV,OAAAgC,eACI22G,EAAAj4G,UAAA,SAAM,KADV,WAEI,OAAOF,KAAK40G,YAAYvxF,MAAM,SAAAliB,GAAK,OAAAA,EAAEsmB,cASzC,SAAWtlB,GACPnC,KAAK8yG,QAAU3wG,EACfnC,KAAKoQ,SAASF,QAAQ,SAAAywB,GAAS,OAAAA,EAAMlZ,OAAStlB,qCAKlDg2G,EAAAj4G,UAAAqgE,mBAAA,WAAA,IAAA/uD,EAAAxR,KAKIA,KAAKoQ,SAASizB,MAAMrjC,KAAKoQ,SAASC,UAAUqS,MAAM,IAClD1iB,KAAKoQ,SAASF,QAAQ,SAAAywB,GAClBA,EAAMjtB,OAASlC,KAUvBhS,OAAAgC,eAAI22G,EAAAj4G,UAAA,cAAW,KAAf,WACI,OAAO+P,GAAQjQ,KAAKoQ,SAASC,4CASjC7Q,OAAAgC,eAAI22G,EAAAj4G,UAAA,cAAW,KAAf,WACI,OAAO,mCASXV,OAAAgC,eAAI22G,EAAAj4G,UAAA,eAAY,KAAhB,WACI,OAAO,mCASXV,OAAAgC,eAAI22G,EAAAj4G,UAAA,QAAK,KAAT,eAC0CwP,EAAlC2oG,GAA2B,EAU/B,OATA3oG,EAAQ,GAAG1P,KAAKoQ,SAAS0Y,OAAO,SAACs3B,EAAK9gC,GAClC,OAAIA,EAAImI,OACG24B,GAEc,iBAAd9gC,EAAI5P,QAAkD,IAA5B4P,EAAI5P,MAAMI,QAAQ,OAChDuoG,GAA2B,GAE3Bj4D,EAAM1K,SAASp2B,EAAI5P,MAAO,MAClC,GACI2oG,EAA2B3oG,EAAQ,IAAMA,OAGpD,SAAU4P,yDAlNbmwB,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCp6F,UAAW,CAAC,CAAE84C,QAASmqD,GAAoBlqD,YAAaG,EAAAA,WAAW,WAAM,OAAAqxD,MACzEhrG,SAAU,mBACVuiC,SAAU,gDAhgDLn6B,UAVLs3B,EAAAA,uDA8gDCga,EAAAA,gBAAep6C,KAAA,CAACokG,GAAoB,CAAE99D,KAAM89D,wBAS5CzjG,EAAAA,0BAuBAA,EAAAA,uBASAA,EAAAA,sBAkFAA,EAAAA,SAqFL+qG,GAlN6CtH,mBAoN7C,SAAAyH,mDA6EA,OAvE8C9jG,EAAAA,EAAAA,GAQ1ChV,OAAAgC,eAAI82G,EAAAp4G,UAAA,QAAK,KAAT,WAEI,OADcF,KAAKm2G,0BAA0Bn2G,KAAKoQ,UAAU0Y,OAAO,SAACs3B,EAAK9gC,GAAQ,OAAA8gC,EAAM1K,SAASp2B,EAAK,KAAK,QAI9G,SAAUA,qCAEV9f,OAAAgC,eAAI82G,EAAAp4G,UAAA,eAAY,KAAhB,WACI,OAAO,mCAUXV,OAAAgC,eACI82G,EAAAp4G,UAAA,SAAM,KADV,WAEI,OAAOF,KAAK8yG,aAUhB,SAAW3wG,GACPnC,KAAK8yG,QAAU3wG,EACfnC,KAAKoQ,SAASF,QAAQ,SAAAywB,GAAS,OAAAA,EAAMlZ,OAAStlB,qCAMlDm2G,EAAAp4G,UAAAqgE,mBAAA,WAAA,IAAA/uD,EAAAxR,KACI6rB,EAAA3rB,UAAMqgE,mBAAkB3/D,KAAAZ,MACnBA,KAAKynB,OAGNznB,KAAKoQ,SAASF,QAAQ,SAAAywB,GAAS,OAAAA,EAAMlZ,OAASjW,EAAKiW,SAFnDznB,KAAKynB,OAASznB,KAAK40G,YAAYpqF,KAAK,SAAAzG,GAAK,OAAAA,EAAE0D,SAK/CznB,KAAKoQ,SAASF,QAAQ,SAAAywB,GAClBA,EAAM43E,eAAgB,EACtB53E,EAAMqwE,gBAAiB,KAW/BxxG,OAAAgC,eAAI82G,EAAAp4G,UAAA,2BAAwB,KAA5B,WACI,OAAOF,KAAKoQ,SAASoa,KAAK,SAAAmW,GAAS,OAAAA,EAAM63E,oEA1EhD/oE,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCp6F,UAAW,CAAC,CAAE84C,QAASmqD,GAAoBlqD,YAAaG,EAAAA,WAAW,WAAM,OAAAwxD,MACzEnrG,SAAU,oBACVuiC,SAAU,uCA4BTtiC,EAAAA,SA6CLkrG,GAvE8CH,IC/tD9CM,GAAA,WA0BI,SAAAA,EAAYC,GAFL14G,KAAA24G,aAAe,IAAI5xF,EAAAA,aAGtB/mB,KAAK44G,UAAYF,EAUzB,OAjCIl5G,OAAAgC,eAAIi3G,EAAAv4G,UAAA,SAAM,KAAV,WACI,OAAOF,KAAK64G,aAGhB,SAAW12G,GACHA,IACAnC,KAAK64G,QAAU12G,oCAIvB3C,OAAAgC,eACIi3G,EAAAv4G,UAAA,QAAK,KADT,WAEI,OAAQF,KAAW,OAAIA,KAAKo5B,OAAOp5B,KAAK44G,WAAa,UAGzD,SAAUz2G,GACNnC,KAAK84G,eAAe32G,oCAUds2G,EAAAv4G,UAAA44G,eAAV,SAAyB32G,OACf86C,EAAej9C,KAAKmC,MACtBA,IAAU86C,IACVj9C,KAAKo5B,OAAOp5B,KAAK44G,WAAaz2G,EAC9BnC,KAAK24G,aAAa1/F,KAAK,CAAEI,SAAU4jC,EAAc/jC,SAAU/W,qCApBlEiL,EAAAA,4BASAkc,EAAAA,UAcLmvF,EArCA,GAwCAM,GAAA,SAAAltF,GAkBI,SAAAktF,EAAmBxtE,GAAnB,IAAA/5B,EACIqa,EAAAjrB,KAAAZ,KAAMurC,IAAKvrC,YADIwR,EAAA+5B,KAAAA,EALZ/5B,EAAAwnG,YAAc,KAoBzB,OAjC2CxkG,EAAAA,EAAAA,GACvChV,OAAAgC,eACIu3G,EAAA74G,UAAA,SAAM,KADV,WAEI,OAAOF,KAAKo5B,YAGhB,SAAWj3B,GACHA,IACAnC,KAAKo5B,OAASj3B,oCActB3C,OAAAgC,eAAIu3G,EAAA74G,UAAA,OAAI,KAAR,WACI,OAAQF,KAAW,OAAMA,KAAKoY,OAAa,OAAIpY,KAAKoY,OAAOmP,OAASvnB,KAAKoY,OAAOrC,MAAS,oCAG7FvW,OAAAgC,eAAIu3G,EAAA74G,UAAA,QAAK,KAAT,WACI,OAAOF,KAAKoY,OAAO3E,uCAGvBjU,OAAAgC,eAAIu3G,EAAA74G,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKg5G,YAAch5G,KAAKyT,uEA9BlCrG,EAAAA,2BAWAA,EAAAA,yBAGAA,EAAAA,SAkBL2rG,EAjCA,CAA2CN,ICxC3CQ,GAAA,SAAAptF,GAKI,SAAAotF,WACIptF,EAAAjrB,KAAAZ,KAAM,WAASA,KAMvB,OATkDwU,EAAAA,EAAAA,GAM9ChV,OAAAgC,eAAIy3G,EAAA/4G,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAKoY,OAAOmgG,mEAV1BrrG,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,kEAWd8rG,EAZA,CAGkDF,QCL9CG,aAAe,eACfC,aAAe,gBAGnBC,GAAA,SAAAvtF,GAAA,SAAAutF,mDAiBA,OAjBsC5kG,EAAAA,EAAAA,GAC3B4kG,EAAAl5G,UAAAuW,OAAP,SAActF,EAAagE,GAA3B,IAAA3D,EAAAxR,KACU2S,EAA+B,GAarC,OAZAxB,EAAKjB,QAAQ,SAACqT,GACN/R,EAAKgO,YAAY+D,EAAMpO,EAAgBJ,kBAAkB,IACzDpC,EAAInQ,KAAK+gB,GACFA,EAAKnL,OAAOo1F,cAG2E,EAF1FjqF,EAAKnL,OAAOw8F,YAAY3/F,UAAU,SAAC0rB,GACnC,OAAAnvB,EAAKgO,YAAYmhB,EAAOxrB,EAAgBJ,kBAAkB,KAC1DvD,EAAKgO,YAAYmhB,EAAOxrB,EAAgBJ,kBAAkB,OAC1DpC,EAAInQ,KAAK+gB,KAKd5Q,GAEfymG,EAjBA,CAAsCx5F,IAoBtCy5F,GAAA,WA6MI,SAAAA,EAAmB76F,GAAAxe,KAAAwe,IAAAA,EAnIZxe,KAAAs5G,eAAgB,EAwFhBt5G,KAAAu5G,qBAAuB,OAavBv5G,KAAAsxC,SAAW,oBAIVtxC,KAAAw5G,gBAAkB,GAIlBx5G,KAAAy5G,aAAe,GAIfz5G,KAAA05G,YAAc,GAId15G,KAAA25G,oBAAsBC,GAAmBT,aAIzCn5G,KAAA65G,gBAAkB,GAIlB75G,KAAA85G,qBAAuB,GAIvB95G,KAAA+5G,OAAS,GA2ErB,OA7QIv6G,OAAAgC,eACI63G,EAAAn5G,UAAA,UAAO,KADX,WAEI,OAAOF,KAAKy5G,kBAShB,SAAYt3G,GACJA,IACAnC,KAAKy5G,aAAet3G,EACpBnC,KAAKg6G,oBACDh6G,KAAKi6G,gBACLj6G,KAAKyW,2CAWjBjX,OAAAgC,eACI63G,EAAAn5G,UAAA,QAAK,KADT,WAEI,OAAOF,KAAK+5G,YAQhB,SAAU53G,GACNnC,KAAK+5G,OAAS,GAAkB,oCASpCv6G,OAAAgC,eACI63G,EAAAn5G,UAAA,sBAAmB,KADvB,WAEI,OAAOF,KAAK85G,0BAShB,SAAwB33G,GACpBnC,KAAK85G,qBAAuB,GAAkB,oCAclDt6G,OAAAgC,eACI63G,EAAAn5G,UAAA,cAAW,KADf,WAEI,OAAOF,KAAKw5G,iDAShBh6G,OAAAgC,eACI63G,EAAAn5G,UAAA,iBAAc,KADlB,WAEI,OAAOF,KAAK65G,qBAUhB,SAAmB13G,GACf,IAAKA,GAA0B,IAAjBA,EAAMxB,OAIhB,OAHAX,KAAKk6G,iBACLl6G,KAAK65G,gBAAkB,QACvB75G,KAAKwe,IAAIyhB,gBAEFjgC,KAAK65G,iBAAmB75G,KAAK65G,gBAAgBl5G,OAASwB,EAAMxB,QACnEX,KAAKk6G,iBAGTl6G,KAAK65G,gBAAkB13G,EACvBnC,KAAKyW,SACLzW,KAAKwe,IAAIyhB,iDASbzgC,OAAAgC,eACI63G,EAAAn5G,UAAA,qBAAkB,KADtB,WAEI,OAAOF,KAAK25G,yBAShB,SAAuBx3G,GACfA,IAAU6P,YACVhS,KAAKm6G,aAAah4G,GACgB,EAA9BnC,KAAK65G,gBAAgBl5G,QACrBX,KAAKyW,2CAqEjB4iG,EAAAn5G,UAAAkkC,YAAA,uBACI,IAAmB,IAAA71B,EAAAC,EAAAxO,KAAKw5G,iBAAe9qG,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAA1BwM,EAAAvM,MACNw2G,aAAa7sE,qHAMlButE,EAAAn5G,UAAA85G,kBAAR,WAAA,IAAAxoG,EAAAxR,KACmC,EAA3BA,KAAKy5G,aAAa94G,SAClBX,KAAK05G,YAAc,GACnB15G,KAAKy5G,aAAavpG,QAAQ,SAACkI,OACjBmL,EAAO/R,EAAK4oG,iBAAiB5oG,EAAM4G,GACrCmL,GACA/R,EAAKkoG,YAAYl3G,KAAK+gB,KAG9BvjB,KAAKw5G,gBAAkBx5G,KAAK05G,YAAYh3F,MAAM,GAC9C1iB,KAAKm6G,aAAan6G,KAAK25G,uBAUvBN,EAAAn5G,UAAAi6G,aAAR,SAAqBh4G,GACjBnC,KAAK25G,oBAAsBx3G,EAGvBnC,KAAKw5G,gBAFLr3G,IAAUy3G,GAAmBA,GAAmBV,eAChD/2G,IAAUy3G,GAAmBV,aACNl5G,KAAK05G,YAAYh3F,MAAM,GAAGxR,KAAK,SAACu0E,EAASvjF,GAC5D,OAAOujF,EAAQ7vE,KAAK1D,cAAcmoG,cAAcn4G,EAAK0T,KAAK1D,iBAGvClS,KAAK05G,aAM1BL,EAAAn5G,UAAAuW,OAAV,eACUoF,EAA2B,IAAIhH,GAAyB8K,GAAeT,IAC7ErD,EAAyB9G,kBAAkBvS,KAAKxC,KAAKs6G,0BAA0B,SAC/Ez+F,EAAyB9G,kBAAkBvS,KAAKxC,KAAKs6G,0BAA0B,UAC/Ez+F,EAAyB9G,kBAAkBvS,KAAKxC,KAAKs6G,0BAA0B,eAEzE/mG,EAAW,IAAI6lG,GACrBp5G,KAAKw5G,gBAAkBjmG,EAASkD,OAAOzW,KAAKw5G,gBAAiB39F,IAKvDw9F,EAAAn5G,UAAAo6G,0BAAV,SAAoClpG,GAChC,MAAO,CACHgL,UAAW0sD,GAA0B93D,WAAWoL,UAAU,YAC1DhL,UAAWA,EACXE,YAAY,EACZoL,UAAW1c,KAAK65G,kBAMdR,EAAAn5G,UAAAg6G,eAAV,WACIl6G,KAAKg6G,sDA3QR5sG,EAAAA,qBA2BAA,EAAAA,mCAoBAA,EAAAA,6BAiBAA,EAAAA,2BASAA,EAAAA,8BAWAA,EAAAA,kCAiCAA,EAAAA,oCAmCAA,EAAAA,wBAaA2/B,EAAAA,YAAWtgC,KAAA,CAAC,iBAwGjB4sG,EAtRA,kBCoFI,SAAAkB,EAAmB/7F,GAAnB,IAAAhN,EACIqa,EAAAjrB,KAAAZ,KAAMwe,IAAIxe,YADKwR,EAAAgN,IAAAA,EAnCZhN,EAAAgpG,YAAc,WAadhpG,EAAAipG,YAAc,WAUdjpG,EAAAkpG,0BAA4B,IAAI3zF,EAAAA,aAuB/BvV,EAAAsrB,SAAW,IAAIC,EAAAA,UAwD3B,OA/J8CvoB,EAAAA,EAAAA,GAe1ChV,OAAAgC,eACI+4G,EAAAr6G,UAAA,iBAAc,KADlB,WAEI,OAAKF,KAAK26G,aAAe36G,KAAK26G,YAAYh6G,OAAS,GAC/CX,KAAK46G,qBAAuB56G,KAAKqc,QAAQ1b,SAElCX,KAAK66G,eAAel6G,OAAS,GACpCX,KAAK66G,eAAel6G,SAAWX,KAAK66G,eAAepkG,OAAO,SAACX,GAAQ,OAAAA,EAAI3T,QAAOxB,yCAatFnB,OAAAgC,eACI+4G,EAAAr6G,UAAA,iBAAc,KADlB,WAEI,OAAKF,KAAK26G,aAAe36G,KAAK26G,YAAYh6G,OAAS,GAC/CX,KAAK46G,mBAAqB,GAAK56G,KAAK66G,eAAel6G,OAAS,GAErDX,KAAK66G,eAAel6G,SAAWX,KAAK66G,eAAepkG,OAAO,SAACX,GAAQ,OAACA,EAAI3T,QAAOxB,wCAiD9FnB,OAAAgC,eAAW+4G,EAAAr6G,UAAA,qBAAkB,KAA7B,WACI,OAAQF,KAAY,QAAIA,KAAKqc,QAAQ5F,OAAO,SAACX,GAAQ,OAAAA,EAAI2R,SAAQ9mB,OAAS,mCAU9EnB,OAAAgC,eAAW+4G,EAAAr6G,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAK26G,YAAYlkG,OAAO,SAACX,GAAQ,OAACA,EAAIy5B,4CAOvCgrE,EAAAr6G,UAAAk6G,iBAAV,SAA2B/H,EAAgBj6F,GAA3C,IAAA5G,EAAAxR,KACI,GAAIoY,EAAOzE,KAAK61F,mBAAqBpxF,EAAOqyF,aACxC,OAAO,SAELlnF,EAAO,IAAI01F,GAQjB,OAPA11F,EAAK8uF,UAAYA,EACjB9uF,EAAKnL,OAASA,EAEdmL,EAAKo1F,aAAan2E,KAAKC,EAAAA,UAAUziC,KAAK88B,WAAW4F,UAAU,SAACj2B,GACxD+E,EAAKspG,oBAAoB,CAAE1iG,OAAQmL,EAAKnL,OAAQc,SAAUzM,EAAKyM,aAG5DqK,GASJg3F,EAAAr6G,UAAA66G,eAAP,uBACI,IAAkB,IAAAxsG,EAAAC,EAAAxO,KAAK66G,gBAAcnsG,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAAzBwM,EAAAvM,MACNA,OAAQ,yGAUbo4G,EAAAr6G,UAAA86G,eAAP,uBACI,IAAkB,IAAAzsG,EAAAC,EAAAxO,KAAK66G,gBAAcnsG,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAAzBwM,EAAAvM,MACNA,OAAQ,yGAMbo4G,EAAAr6G,UAAA46G,oBAAP,SAA2BruG,GACvBzM,KAAK06G,0BAA0BzhG,KAAKxM,IAMjC8tG,EAAAr6G,UAAAkkC,YAAP,WACIpkC,KAAK88B,SAAS56B,MAAK,GACnBlC,KAAK88B,SAASuH,gCAlKrBoL,EAAAA,UAAShjC,KAAA,CAAC,CACPi6E,qBAAqB,EACrBv5E,SAAU,oBACVuiC,SAAA,8vCApBA7C,EAAAA,6DAqCCz/B,EAAAA,8BAmBAA,EAAAA,2BAsBAA,EAAAA,2BAaAA,EAAAA,yCAUAkc,EAAAA,UAgFLixF,GA/J8ClB,IAoK9C4B,GAAA,WAAA,SAAAA,KAYA,2BAZCxtG,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC6sG,GAA0BtB,IACzCtrG,QAAS,CAAC4sG,IACV9hE,QAAS,CACLsW,GACAg4B,GACA15B,GACA3U,EAAAA,aACAqqC,EAAAA,iBAIRk4B,EAZA,kBC9KI,SAAAC,WACIrvF,EAAAjrB,KAAAZ,KAAM,WAASA,KAiBvB,OApBmDwU,EAAAA,EAAAA,GAc/ChV,OAAAgC,eAAI05G,EAAAh7G,UAAA,WAAQ,KAAZ,WACI,QAAIF,KAAKoY,OAAOzE,KAAK4iG,kBAAiB,GAAQv2G,KAAKoY,OAAO1I,MAAQ1P,KAAKoY,OAAOzE,KAAK6iG,2EAlB1FtpG,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,mEAsBd+tG,GApBmDnC,mBA6B/C,SAAAoC,EAAmB38F,GAAnB,IAAAhN,EACIqa,EAAAjrB,KAAAZ,KAAMwe,IAAIxe,YADKwR,EAAAgN,IAAAA,IA2BvB,OA7B+ChK,EAAAA,EAAAA,GAS3C2mG,EAAAj7G,UAAAk6G,iBAAA,SAAiB/H,EAAgBj6F,GAC7B,GAAqB,IAAjBA,EAAO3E,OAAe2E,EAAO44F,eAC7B,OAAO,SAELztF,EAAO,IAAI23F,GAGjB,OAFA33F,EAAK8uF,UAAYA,EACjB9uF,EAAKnL,OAASA,EACPmL,GAMJ43F,EAAAj7G,UAAAk7G,oBAAP,SAA2B56E,EAAO66E,GAC9B,GAAI76E,EAAMu9B,UAAYs9C,EAAWC,SAE7B,OADA96E,EAAM8lD,SAASvoB,SAAU,EAG7Bs9C,EAAWl5G,OAASk5G,EAAWl5G,2BAhCtCstC,EAAAA,UAAShjC,KAAA,CAAC,CACPi6E,qBAAqB,EACrBv5E,SAAU,qBACVuiC,SAAA,s1BAnC2D7C,EAAAA,qBAkE/DsuE,GA7B+C9B,IAkC/CkC,GAAA,WAAA,SAAAA,KAWA,2BAXC9tG,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACytG,GAA2BD,IAC1CvtG,QAAS,CAACwtG,IACV1iE,QAAS,CACLsuC,GACA15B,GACA3U,EAAAA,aACAqqC,EAAAA,iBAIRw4B,EAXA,GCvCAC,GAAA,SAAA3vF,GAsLI,SAAA2vF,EAAmBr7F,EACR3B,EACYi9F,EACAC,EACgC/uD,GAJvD,IAAAn7C,EAKQqa,EAAAjrB,KAAAZ,KAAM2sD,IAAuB3sD,YALlBwR,EAAA2O,QAAAA,EACR3O,EAAAgN,IAAAA,EACYhN,EAAAiqG,cAAAA,EACAjqG,EAAAkqG,YAAAA,EACgClqG,EAAAm7C,uBAAAA,EAxJ/Cn7C,EAAAsoG,qBAAuB,0BA4JvBtoG,EAAAopF,kBAAsC,CAC1CnhE,oBAAqBC,GAAoBrC,KACzCwC,qBAAsBH,GAAoBnC,MAC1CoC,kBAAmBC,GAAkBlC,OACrCoC,mBAAoBF,GAAkBlC,QAGlClmB,EAAAmqG,iBAAoC,CACxC3+E,iBAAkB,IAAI8H,GAA6BtzB,EAAKopF,mBACxD39D,eAAgB,IAAImK,GACpBlK,OAAO,EACPC,qBAAqB,EACrBiB,uBAAuB,KA4I/B,OAlV6C5pB,EAAAA,EAAAA,GAezChV,OAAAgC,eACWg6G,EAAAt7G,UAAA,sBAAmB,KAD9B,WAEI,OAAOF,KAAK85G,0BAShB,SAA+B33G,GAC3BnC,KAAK85G,qBAAuB33G,mCAWhC3C,OAAAgC,eACIg6G,EAAAt7G,UAAA,4BAAyB,KAD7B,eAEU07G,EAAa57G,KAAK2T,KAAKkoG,WAC7B,OAAO,EAA4B,GAAbD,EAAmB,KAAO,wCAiFpDp8G,OAAAgC,eAAWg6G,EAAAt7G,UAAA,OAAI,KAAf,WACI,OAAOF,KAAKmgB,QAAQxM,sCASxBnU,OAAAgC,eAAWg6G,EAAAt7G,UAAA,yBAAsB,KAAjC,WACI,OAAqB,MAAbF,KAAK2T,OAAiB3T,KAAK2T,KAAKmoG,aAAe97G,KAAK2T,KAAKooG,4CASrEv8G,OAAAgC,eAAWg6G,EAAAt7G,UAAA,8BAA2B,KAAtC,WACI,OAAqB,MAAbF,KAAK2T,MAAgB3T,KAAK2T,KAAKmoG,6CAS3Ct8G,OAAAgC,eAAWg6G,EAAAt7G,UAAA,4BAAyB,KAApC,WACI,OAAqB,MAAbF,KAAK2T,MAAgB3T,KAAK2T,KAAKooG,2CAS3Cv8G,OAAAgC,eAAWg6G,EAAAt7G,UAAA,qBAAkB,KAA7B,WACI,OAAOF,KAAK2T,KAAK60F,cAAc/xF,OAAO,SAAAX,GAAO,OAACA,EAAI20F,eAAc9pG,wCAUpEnB,OAAAgC,eACIg6G,EAAAt7G,UAAA,YAAS,KADb,WAEI,OAAOF,KAAKosD,yBAAyB,qDAiClCovD,EAAAt7G,UAAA87G,SAAP,WACI,OAAoB,MAAbh8G,KAAK2T,KAAe3T,KAAK2T,KAAKsoG,aAAe,IASjDT,EAAAt7G,UAAAg8G,cAAP,WACI,OAAoB,MAAbl8G,KAAK2T,KAAe3T,KAAK2T,KAAKwoG,WAAa,IAS/CX,EAAAt7G,UAAAk8G,mBAAP,WACI,OAAoB,MAAbp8G,KAAK2T,KAAe3T,KAAK2T,KAAK0oG,gBAAkB,IASpDb,EAAAt7G,UAAAo8G,iBAAP,WACI,OAAoB,MAAbt8G,KAAK2T,KAAe3T,KAAK2T,KAAK4oG,cAAgB,IASlDf,EAAAt7G,UAAAs8G,cAAP,WACIx8G,KAAK27G,iBAAiB3+E,iBAAiBlF,SAAS92B,OAAShB,KAAKy8G,aAAa5+E,cAC3E79B,KAAK27G,iBAAiBt5E,OAASriC,KAAK2T,KAAKknF,gBACzC76F,KAAK08G,eAAelwG,OAAOxM,KAAK27G,mBAS7BH,EAAAt7G,UAAAy8G,qBAAP,WACI38G,KAAK48G,cAAc58G,KAAKy7G,cAAe,UASpCD,EAAAt7G,UAAA28G,mBAAP,WACI78G,KAAK48G,cAAc58G,KAAK07G,YAAa,QAGjCF,EAAAt7G,UAAA08G,cAAR,SAAsBE,EAAsBC,GACxC/8G,KAAKw8G,oBAECv3F,EAAW,eACXiC,EAAyB,UAAf61F,EACZ,IAAI7lF,GAAwBjS,GAC5B,IAAI0G,GAAsB1G,EAAUiH,GAAaC,KAE/C1f,EAAO,CAAEkH,KAAM3T,KAAK2T,KAAMqpG,SAAUF,EAAK51F,QAASA,EAAStO,QAAQ,GAEzE5Y,KAAK2T,KAAKspG,mBAAmBhkG,KAAKxM,GAC9BA,EAAKmM,QAGTkkG,EAAI71F,UAAOjnB,KAAK2T,KAAMuT,IASnBs0F,EAAAt7G,UAAAg9G,qBAAP,WACIl9G,KAAK27G,iBAAiB3+E,iBAAiBlF,SAAS92B,OAAShB,KAAKm9G,mBAAmBt/E,cACjF79B,KAAK27G,iBAAiBt5E,OAASriC,KAAK2T,KAAKknF,gBACzC76F,KAAKo9G,qBAAqB5wG,OAAOxM,KAAK27G,mBASnCH,EAAAt7G,UAAAm9G,sBAAP,WACIr9G,KAAK27G,iBAAiB3+E,iBAAiBlF,SAAS92B,OAAShB,KAAKs9G,oBAAoBz/E,cAClF79B,KAAK27G,iBAAiBt5E,OAASriC,KAAK2T,KAAKknF,gBACzC76F,KAAKu9G,sBAAsB/wG,OAAOxM,KAAK27G,mBAU3Cn8G,OAAAgC,eAAWg6G,EAAAt7G,UAAA,UAAO,KAAlB,WACI,MAAO,CAEHyT,KAAM3T,KAAK2T,KACX6pG,QAASx9G,uCAKjBR,OAAAgC,eAAWg6G,EAAAt7G,UAAA,wBAAqB,KAAhC,WACI,OAAiB,MAAbF,KAAK2T,MAA0D,MAA1C3T,KAAK2T,KAAK8pG,6BACxBz9G,KAAK2T,KAAK8pG,6BAA6B/tE,SAEvC,0DAnVlBD,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,mBACVuiC,SAAA,28GAdKn6B,UArBLs3B,EAAAA,yBAkBAhX,GAAuB90B,WAAA,CAAA,CAAA2V,KAuMlBo2B,EAAAA,kBAzMLlgB,GAAqB7rB,WAAA,CAAA,CAAA2V,KA0MhBo2B,EAAAA,8CACAA,EAAAA,UAAQ,CAAAp2B,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAAC6+C,yCAjLvBve,EAAAA,YAAWtgC,KAAA,CAAC,2BAAwB,CAAAiK,KACpCtJ,EAAAA,mCASAA,EAAAA,yCAuBAA,EAAAA,oCAYA0lC,EAAAA,UAASrmC,KAAA,CAAC,uBAAwB,CAAEsmC,KAAM+R,6BAS1ChS,EAAAA,UAASrmC,KAAA,CAAC8tG,gCASVznE,EAAAA,UAASrmC,KAAA,CAAC,8CASVqmC,EAAAA,UAASrmC,KAAA,CAAC,iBAAkB,CAAEsmC,KAAM+R,2BASpChS,EAAAA,UAASrmC,KAAA,CAAC,4CASVqmC,EAAAA,UAASrmC,KAAA,CAAC,wBAAyB,CAAEsmC,KAAM+R,8BAS3ChS,EAAAA,UAASrmC,KAAA,CAAC0uG,iCASVroE,EAAAA,UAASrmC,KAAA,CAAC,0CA4DVsgC,EAAAA,YAAWtgC,KAAA,CAAC,iBAqKjB+uG,EAtVA,CAI6ChwD,IAyV7CkyD,GAAA,WAII,SAAAA,EAAmBhuE,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BALCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,yEAvXVm2C,EAAAA,eA2XJo6D,EALA,GC/XAC,GAAA,WAwBI,SAAAA,EAAmBx9F,EACPy9F,EACDn8E,EACAjjB,GAHQxe,KAAAmgB,QAAAA,EACPngB,KAAA49G,cAAAA,EACD59G,KAAAyhC,QAAAA,EACAzhC,KAAAwe,IAAAA,EAKDxe,KAAAmoG,gBAAkB,sBAKlBnoG,KAAA69G,2BAA6B,qCAM7B79G,KAAAqpD,WAAY,EA+DfrpD,KAAA29D,SAAW,EAmKtB,OA1NIn+D,OAAAgC,eAAIm8G,EAAAz9G,UAAA,UAAO,KAAX,WACI,OAAOF,KAAKqpD,2CA6ChB7pD,OAAAgC,eACIm8G,EAAAz9G,UAAA,WAAQ,KADZ,WAEI,OAAOF,KAAK2T,KAAKmqG,gBAAgB99G,KAAK8T,2CAY1CtU,OAAAgC,eACIm8G,EAAAz9G,UAAA,cAAW,KADf,eAEU69G,EAAY/9G,KAAK8T,SAASrB,aAAeT,UAAYhS,KAAK8T,SAASrB,WAAWrB,UAAY,GAChG,OAAOpR,KAAK4kG,OAAS,IAAMmZ,mCAG/Bv+G,OAAAgC,eACIm8G,EAAAz9G,UAAA,eAAY,KADhB,WAEI,OAAOF,KAAKwS,uCAShBhT,OAAAgC,eAAIm8G,EAAAz9G,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKyhC,QAAQ5D,+CASxBr+B,OAAAgC,eACIm8G,EAAAz9G,UAAA,eAAY,KADhB,WAEI,OAAUF,KAAKmoG,gBAAe,IAASnoG,KAAK69G,2BAA0B,IAAM79G,KAAK8T,SAASL,OACrFzT,KAAKkwC,QAAU,IAAIlwC,KAAKmoG,gBAAe,WAAa,qCAOtDwV,EAAAz9G,UAAAkpD,QADP,WAEIppD,KAAKqpD,WAAY,GAOds0D,EAAAz9G,UAAAopD,OADP,WAEItpD,KAAKqpD,WAAY,GASds0D,EAAAz9G,UAAAsM,OAAP,eACUwxG,GAAiBh+G,KAAK2T,KAAKsqG,wBAAwB1iE,GAAGvqC,SAAS4hC,WAC/DsrE,EAAgBl+G,KAAKwS,MAE3B,GADAxS,KAAK2T,KAAKwqG,YAAYn+G,KAAK8T,UACvBkqG,EAAe,KACTlqG,EAAW9T,KAAK2T,KAAKkqB,cAAc4hC,cAAc,mBAAmBy+C,EAAa,MACnFpqG,GACAA,EAASi9B,UASd4sE,EAAAz9G,UAAAw7D,UADP,SACiBl7B,OAEPv/B,EAAMu/B,EAAMv/B,IAAIiR,cACtB,GAAKxB,GAAem+B,IAAI5tC,GAAxB,CAGAu/B,EAAM4B,sBACA2kE,EAAc,CAAEC,WAAY,WAAYhmG,OAAQhB,KAAMwgC,MAAOA,EAAO5nB,QAAQ,GAElF,GADA5Y,KAAK2T,KAAKszF,cAAchuF,KAAK8tF,IACzBA,EAAYnuF,SAGhB4nB,EAAMqH,iBAED7nC,KAAKo+G,yBAAyBn9G,EAAKu/B,EAAM8pD,SAAU9pD,EAAM2uC,UAAW3uC,EAAM8jE,SAE/E,GAAItkG,KAAKqmG,YAAYplG,EAAKu/B,EAAM2uC,SACvBnvE,KAAKqhB,UAAY5Q,GAAkBo+B,IAAI5tC,KAAWjB,KAAKqhB,UAAY9Q,GAAgBs+B,IAAI5tC,KACxFjB,KAAKwM,aAFb,KAOMC,EAAO,CAAE+K,KAAMxX,KAAM8T,SAAU,KAAM0sB,MAAOA,EAAO5nB,QAAQ,GAEjE,GADA5Y,KAAK2T,KAAKuzF,cAAcjuF,KAAKxM,IACzBA,EAAKmM,OAAT,KAEMa,EAAYzZ,KAAK49G,cACvBnkG,EAAU+nF,cAAc3/E,MAAQ2e,EAAM8pD,YAAsB,QAARrpF,OAE9CuX,EAAqBiB,EAAUyoE,gBACiB,IADAliF,KAAK2T,KAAKkC,WAAWY,OAAO,SAAAX,GAAO,OAACA,EAAI2R,SAAQ7Q,IAAI,SAAAzV,GAAK,OAAAA,EAAEymB,eACxG9X,QAAQ2J,EAAUyoE,cAAc9pE,QAAiBqB,EAAUyoE,cAAc9pE,OAAS,EAC3F,OAAQnX,GACJ,IAAK,YACL,IAAK,OACDjB,KAAK2T,KAAK2wE,WAAWgjB,aAAatnG,KAAK69B,cAAe79B,KAAKwS,MAAOgG,GAClE,MACJ,IAAK,UACL,IAAK,KACDxY,KAAK2T,KAAK2wE,WAAW8iB,WAAWpnG,KAAK69B,cAAe79B,KAAKwS,MAAOgG,GAChE,MACJ,IAAK,MACDxY,KAAKq+G,aAAa79E,EAAM8pD,eAWpC9qF,OAAAgC,eAAIm8G,EAAAz9G,UAAA,OAAI,KAAR,WACI,OAAOF,KAAKmgB,QAAQxM,sCAMxBnU,OAAAgC,eAAIm8G,EAAAz9G,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAK2T,KAAK2qG,gBAAgBt+G,KAAK8T,SAASrB,WAAWrB,WAAWiM,0CAGjEsgG,EAAAz9G,UAAAm+G,aAAR,SAAqBx8F,GACbA,EACA7hB,KAAK2T,KAAK2wE,WAAWmiB,mBAAmBzmG,KAAK69B,cAAe79B,KAAKwS,MAAO,GAEpExS,KAAKwS,QAAUxS,KAAK2T,KAAKsqG,wBAAwBvjE,SAAS/5C,OAAS,GAAKX,KAAK2T,KAAK4qG,qBAClFv+G,KAAK2T,KAAK2wE,WAAWnI,cAAc,GAAG,GAEtCn8E,KAAK2T,KAAK2wE,WAAWgjB,aAAatnG,KAAK69B,cAAe79B,KAAKwS,MAAO,IAKtEmrG,EAAAz9G,UAAAk+G,yBAAR,SAAiCn9G,EAAK4gB,EAAe28F,GACjD,YADkC,IAAA38F,IAAAA,GAAA,QAAe,IAAA28F,IAAAA,GAAA,GAC7C38F,GACuE,IAAhE,CAAC,OAAQ,KAAM,YAAa,UAAW,OAAO/R,QAAQ7O,KAE1DjB,KAAKqmG,YAAYplG,EAAKu9G,KAA8E,IAAhE,CAAC,OAAQ,KAAM,YAAa,UAAW,OAAO1uG,QAAQ7O,IAG7F08G,EAAAz9G,UAAAmmG,YAAR,SAAoBplG,EAAKkuE,GACrB,OAAOA,IAA+G,IAArG,CAAC,OAAQ,QAAS,KAAM,OAAQ,YAAa,aAAc,UAAW,aAAar/D,QAAQ7O,wBA1PnHwuC,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,uBACVuiC,SAAA,8sDATKn6B,UAEA+rF,UATLrgE,EAAAA,kBAFA4L,EAAAA,wDAwCCz/B,EAAAA,qBAmBAA,EAAAA,sBASAA,EAAAA,wBASAA,EAAAA,4BASA0lC,EAAAA,UAASrmC,KAAA,CAAC,kCASVsgC,EAAAA,YAAWtgC,KAAA,CAAC,wCAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,sCAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,+CAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,4CAqBZsgC,EAAAA,YAAWtgC,KAAA,CAAC,0BASZY,EAAAA,aAAYZ,KAAA,CAAC,yBAQbY,EAAAA,aAAYZ,KAAA,CAAC,2BA0BbY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,cAwF9BkxG,EA7QA,MCOW,UACC,QAIZc,GAAA,WAAA,SAAAA,KA+kBA,OA3kBIj/G,OAAAgC,eAAIi9G,EAAAv+G,UAAA,wBAAqB,KAAzB,WACI,OAAOw1C,SAAS11C,KAAK2T,KAAK+qG,cAAcnjE,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAc8gF,YAAa,qCAG1Gn/G,OAAAgC,eAAIi9G,EAAAv+G,UAAA,6BAA0B,KAA9B,WACI,OAAOw1C,SAAS11C,KAAK2T,KAAK+qG,cAAc9jE,sBAAsB9hB,WAAY,qCAG9Et5B,OAAAgC,eAAIi9G,EAAAv+G,UAAA,kCAA+B,KAAnC,WACI,OAAOF,KAAK2T,KAAKsqG,wBAAwB1iE,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,+CAGzE4gF,EAAAv+G,UAAAqxG,iBAAP,SAAwBv5F,OAChB4mG,EAAU5+G,KAAK2T,KAAKiE,YAAY5C,KAAK,SAAC6C,GAAQ,OAAAA,EAAIrF,QAAUwF,IAChEhY,KAAK2T,KAAKiE,YAAY5C,KAAK,SAAC6C,GAAQ,OAAAA,EAAIrF,QAAUwF,IAAYhY,KAAK2T,KAAKiE,YAAY8xB,MAIpF,OAHKk1E,IACDA,EAAU5+G,KAAK2T,KAAKkrG,iBAAiB7pG,KAAK,SAAC6C,GAAQ,OAAAA,EAAIrF,QAAUwF,KAE9D4mG,EAAQE,YAGZL,EAAAv+G,UAAA6+G,uBAAP,SAA8BvmG,OACpBJ,EAASpY,KAAK2T,KAAK80F,gBAAgBzzF,KAAK,SAACc,GAAQ,OAACA,EAAI03F,aAAe13F,EAAI8R,eAAiBpP,IAChG,OAAOxY,KAAK2T,KAAK60F,cAAc7nG,OAASX,KAAK2T,KAAK80F,gBAAgBhyF,OAAO,SAACtV,GAAM,OAACA,EAAEqsG,cAAa19F,QAAQsI,GACpGI,GAGDimG,EAAAv+G,UAAA8+G,qBAAP,SAA4BxmG,OACpBymG,EAOJ,KALIA,EAD+B,EAA/Bj/G,KAAK2T,KAAKiE,YAAYjX,OACXX,KAAK2T,KAAKiE,YAAY8xB,MAAMo1E,WAE5B9+G,KAAK2T,KAAKurG,iBAEStkE,sBACZpiB,aAClBx4B,KAAK2T,KAAKkC,WAAWY,OAAO,SAAAtV,GAAK,OAACA,EAAEqsG,cAAax4F,KAAK,SAACoD,GAAW,OAAAA,EAAOwP,eAAiBpP,IAAoByP,OAC9G,OAAO,MAELzV,EAAQxS,KAAK++G,uBAAuBvmG,GAC1C,OAAOxY,KAAKm/G,uBAAyBF,EAASngE,oBAAoBtsC,EAAQ,GAAKxS,KAAKo/G,4BAGjFX,EAAAv+G,UAAAm/G,yBAAP,SAAgC7mG,OACxBymG,EAOJ,KALIA,EAD+B,EAA/Bj/G,KAAK2T,KAAKiE,YAAYjX,OACXX,KAAK2T,KAAKiE,YAAY8xB,MAAMo1E,WAE5B9+G,KAAK2T,KAAKurG,iBAEStkE,sBACZpiB,aAClBx4B,KAAK2T,KAAKkC,WAAWY,OAAO,SAAAtV,GAAK,OAACA,EAAEqsG,cAAax4F,KAAK,SAACoD,GAAW,OAAAA,EAAOwP,eAAiBpP,IAAoByP,OAC9G,OAAO,MAELzV,EAAQxS,KAAK++G,uBAAuBvmG,GAC1C,OAAOxY,KAAKo/G,4BAA8BH,EAASngE,oBAAoBtsC,IAG3EhT,OAAAgC,eAAWi9G,EAAAv+G,UAAA,qBAAkB,KAA7B,WACI,OAAOo/G,EAAIt/G,KAAK2T,KAAK60F,cAAkBxoG,KAAK2T,KAAK80F,iBAAiBhyF,OAAO,SAAAtV,GAAK,OAACA,EAAEqsG,+CAG9EiR,EAAAv+G,UAAAq/G,gBAAP,SAAuBvnG,GACnB,OAAOhY,KAAK2T,KAAKoG,aAAgB/Z,KAAK2T,KAAK2G,eAAiBta,KAAK2T,KAAK2G,cAAc9H,QAAUwF,GAG3FymG,EAAAv+G,UAAAs/G,iBAAP,SAAwBhnG,OACdJ,EAASpY,KAAKy/G,mBAAmBzqG,KAAK,SAAA7T,GAAK,OAAAA,EAAEymB,eAAiBpP,IACpE,QAAOJ,GAASA,EAAO0sF,UAGpB2Z,EAAAv+G,UAAAw/G,iBAAP,SAAwBz5G,EAAmBuS,OACjCmnG,EAAc3/G,KAAKy/G,mBACzB,OAAIx5G,IAAc25G,GACPD,EAAY5oG,OAAO,EAAGyB,EAAqB,GAAG/G,UAAUwD,UAAU,SAAA3S,GAAK,OAAAA,EAAEwiG,WACzE7+F,IAAc25G,GACdD,EAAY5oG,OAAOyB,EAAoBmnG,EAAYh/G,OAAS,GAAGsU,UAAU,SAAA3S,GAAK,OAAAA,EAAEwiG,gBADpF,GAKJ2Z,EAAAv+G,UAAA2/G,6BAAP,SAAoC7nG,EAAUQ,EAAoBsnG,QAAA,IAAAA,IAAAA,GAAA,OACxDC,EAAe//G,KAAKggH,gBAAgBxnG,EAAoBsnG,GAC9D,OAAO9/G,KAAK2T,KAAKkqB,cAAc4hC,cACxBsgD,EAAY,mBAAmB/nG,EAAQ,yBAAyBQ,EAAkB,OAGtFimG,EAAAv+G,UAAA+7E,oBAAP,SAA2Bx6C,EAASzpB,EAAUQ,EAAoBsnG,QAAA,IAAAA,IAAAA,GAAA,GAC1D9/G,KAAK2T,KAAK80F,gBAAgBzoG,KAAK2T,KAAK80F,gBAAgB9nG,OAAS,GAAGinB,eAAiBpP,IAGjFxY,KAAKg/G,qBAAqBxmG,EAAqB,GAC3CipB,EAAQnH,UAAUwD,SAAS,8BAAgC2D,EAAQnH,UAAUwD,SAAS,iCAClF99B,KAAKq/G,yBAAyB7mG,EAAqB,GACnDipB,EAAQw+E,mBAAmB79C,kBAAkBrxB,MAAM,CAAEC,eAAe,KAEpEhxC,KAAK2T,KAAKkqB,cAAckT,MAAM,CAAEC,eAAe,IAC/ChxC,KAAK2T,KAAK+qG,cAAc/kE,YACnBnX,KAAKkH,EAAAA,SACLhH,UAAU,WACPjB,EAAQw+E,mBAAmB79C,kBAAkBrxB,MAAM,CAAEC,eAAe,MAE5EhxC,KAAKuxG,iBAAiBv5F,GAAUmmC,SAAS,IAG7C1c,EAAQw+E,mBAAmBlvE,MAAM,CAAEC,eAAe,IAGtDhxC,KAAKkgH,8BAA8BloG,EAAUQ,EAAqB,EAAGsnG,KAItErB,EAAAv+G,UAAAg8E,mBAAP,SAA0Bz6C,EAASzpB,EAAUQ,EAAoBsnG,GAC7D,QAD6D,IAAAA,IAAAA,GAAA,GAClC,IAAvBtnG,EAAJ,KAGMhG,EAAQxS,KAAK++G,uBAAuBvmG,EAAqB,IAC1DipB,EAAQ0+E,wBAA0BngH,KAAK2T,KAAK60F,cAAc7nG,SAAsB,IAAZ6R,EACrEivB,EAAQb,WAAWu/E,uBAAuBpvE,MAAM,CAAEC,eAAe,IACzDhxC,KAAKq/G,yBAAyB7mG,EAAqB,GAG3DipB,EAAQ0+E,uBAAuBpvE,MAAM,CAAEC,eAAe,IAFtDhxC,KAAKkgH,8BAA8BloG,EAAUQ,EAAqB,EAAGsnG,KAOtErB,EAAAv+G,UAAAkgH,qBAAP,SAA4BpoG,EAAUQ,OAC5B6nG,EAAargH,KAAKw/G,iBAAiBhnG,EAAqB,GAC1D,EACAxY,KAAK0/G,iBAAiBE,GAAoBpnG,EAAqB,GACnE,IAAoB,IAAhB6nG,EAAJ,KAIMC,EAAgB9nG,EAAqB,EAAI6nG,GACK,IAAhDrgH,KAAK++G,uBAAuBuB,IAAyBtgH,KAAK2T,KAAK60F,cAAc7nG,OAG7EX,KAAK6/G,6BAA6B7nG,EAAUsoG,GAAevvE,QACnD/wC,KAAKq/G,yBAAyBiB,GAGtCtgH,KAAK6/G,6BAA6B7nG,EAAUsoG,GAAevvE,QAF3D/wC,KAAKkgH,8BAA8BloG,EAAUsoG,QAT7CtgH,KAAK2T,KAAK4sG,YAAYC,KAAK/+E,QAAQ5D,cAAckT,SAelD0tE,EAAAv+G,UAAAugH,iBAAP,SAAwBh/E,EAASzpB,EAAUQ,OACnC6nG,EAIJ,IAAoB,KAHpBA,EAAargH,KAAKw/G,iBAAiBhnG,EAAqB,GACpD,EACAxY,KAAK0/G,iBAAiBE,GAAqBpnG,EAAqB,KAC3CxY,KAAK2T,KAAK4sG,YAC/BvgH,KAAK2T,KAAK4sG,YAAY72E,MAAMjI,QAAQ5D,cAAckT,YADtD,KAIMuvE,EAAgB9nG,EAAqB,EAAI6nG,EAC3CrgH,KAAKg/G,qBAAqBsB,GACtB7+E,EAAQnH,UAAUwD,SAAS,6BACvB99B,KAAKq/G,yBAAyBiB,GAC9BtgH,KAAK6/G,6BAA6B7nG,EAAUsoG,GAAevvE,QAE3D/wC,KAAKkgH,8BAA8BloG,EAAUsoG,GAGjDtgH,KAAK6/G,6BAA6B7nG,EAAUsoG,GAAevvE,QAG/D/wC,KAAKkgH,8BAA8BloG,EAAUsoG,KAI9C7B,EAAAv+G,UAAAi8E,cAAP,SAAqBnkE,EAAU8nG,QAAA,IAAAA,IAAAA,GAAA,OAEvBY,GADYZ,EAAY9/G,KAAK2T,KAAKkrG,iBAAmB7+G,KAAK2T,KAAKiE,aAC1C5C,KAAK,SAAC6C,GAAQ,OAAAA,EAAIrF,QAAUwF,IAC/C+nG,EAAe//G,KAAKggH,gBAAgB,EAAGF,GAC7C,GAAKY,EAAL,KAEIC,GADJD,EAAaA,EAAW7iF,eACI4hC,cAAcsgD,GACtC//G,KAAK2T,KAAK60F,cAAc7nG,QAA8C,IAApCX,KAAKo/G,2BACvCuB,EAAU5vE,MAAM,CAAEC,eAAe,KAEjChxC,KAAK2T,KAAKkqB,cAAckT,MAAM,CAAEC,eAAe,IAC/ChxC,KAAK2T,KAAK+qG,cAAc/kE,YACnBnX,KAAKkH,EAAAA,SACLhH,UAAU,YACPi+E,EAAYD,EAAWjhD,cAAcsgD,IAC3BhvE,MAAM,CAAEC,eAAe,MAEzChxC,KAAKuxG,iBAAiBv5F,GAAUmmC,SAAS,MAI1CsgE,EAAAv+G,UAAAk8E,aAAP,SAAoBpkE,EAAU8nG,GAA9B,IAAAtuG,EAAAxR,UAA8B,IAAA8/G,IAAAA,GAAA,OACpBttG,EAAQxS,KAAK2T,KAAK80F,gBAAgBzoG,KAAK2T,KAAK80F,gBAAgB9nG,OAAS,GAAGinB,aAE1E84F,GADYZ,EAAY9/G,KAAK2T,KAAKkrG,iBAAmB7+G,KAAK2T,KAAKiE,aAC1C5C,KAAK,SAAC6C,GAAQ,OAAAA,EAAIrF,QAAUwF,IACrD,GAAK0oG,EAEL,GADAA,EAAaA,EAAW7iF,cACpB79B,KAAKg/G,qBAAqBxsG,GAAQ,KAC5BouG,EAAWF,EAAWr9C,iBAAiBrjE,KAAKggH,iBAAiB,EAAGF,IACtEc,EAASA,EAASjgH,OAAS,GAAGowC,MAAM,CAAEC,eAAe,SAErDhxC,KAAK2T,KAAKkqB,cAAckT,MAAM,CAAEC,eAAe,IAC/ChxC,KAAK2T,KAAK+qG,cAAc/kE,YACnBnX,KAAKkH,EAAAA,SACLhH,UAAU,eACDk+E,EAAWF,EAAWr9C,iBAAiB7xD,EAAKwuG,iBAAiB,EAAGF,IACtEc,EAASA,EAASjgH,OAAS,GAAGowC,MAAM,CAAEC,eAAe,MAE7DhxC,KAAKuxG,iBAAiBv5F,GAAUmmC,SAASn+C,KAAK++G,uBAAuBvsG,KAItEisG,EAAAv+G,UAAAinG,YAAP,SAAmB3uF,GAAnB,IAAAhH,EAAAxR,KACU6gH,EAAiB7gH,KAAK2T,KAAKsqG,wBAAwBzjE,oBACnDulE,EAAe//G,KAAKggH,gBAAgBxnG,GACT,IAA7BqoG,EAAe5nF,UACDj5B,KAAK2T,KAAKkqB,cAAcwlC,iBAC/B08C,EAAY,uBAAuBvnG,EAAkB,MACtD,GAAGu4B,SAET/wC,KAAK2T,KAAKkqB,cAAckT,MAAM,CAAEC,eAAe,IAC/ChxC,KAAK2T,KAAKsqG,wBAAwB9/D,SAAS,GAC3Cn+C,KAAK2T,KAAKsqG,wBAAwBtkE,YAC7BnX,KAAKkH,EAAAA,SAAShH,UAAU,eACfvqB,EAAQ3G,EAAKmC,KAAKkqB,cAAcwlC,iBAC/B08C,EAAY,uBAAuBvnG,EAAkB,MACzC,EAAfL,EAAMxX,QAAcwX,EAAM,GAAG44B,YAK1C0tE,EAAAv+G,UAAAmnG,eAAP,SAAsB7uF,GAAtB,IAAAhH,EAAAxR,KACU6gH,EAAiB7gH,KAAK2T,KAAKsqG,wBAAwBzjE,oBACnDulE,EAAe//G,KAAKggH,gBAAgBxnG,GAC1C,GAAoC,IAAhCqoG,EAAen4E,cACfm4E,EAAe5nF,YAAc4nF,EAAen4E,aAAe1oC,KAAK2T,KAAKsqG,wBAAwBxjE,oBAAqB,KAC5GtiC,EAAQnY,KAAK2T,KAAKkqB,cAAcwlC,iBAC/B08C,EAAY,uBAAuBvnG,EAAkB,MAC5DL,EAAMA,EAAMxX,OAAS,GAAGowC,aAExB/wC,KAAK2T,KAAKkqB,cAAckT,MAAM,CAAEC,eAAe,IAC/ChxC,KAAK2T,KAAKsqG,wBAAwB9/D,SAASn+C,KAAK2T,KAAKsqG,wBAAwBvjE,SAAS/5C,OAAS,GAC/FX,KAAK2T,KAAKsqG,wBAAwBtkE,YAC7BnX,KAAKkH,EAAAA,SAAShH,UAAU,eACfvqB,EAAQ3G,EAAKmC,KAAKkqB,cAAcwlC,iBAC/B08C,EAAY,uBAAuBvnG,EAAkB,MACzC,EAAfL,EAAMxX,QAAcwX,EAAMA,EAAMxX,OAAS,GAAGowC,WAKzD0tE,EAAAv+G,UAAAknG,WAAP,SAAkBsZ,EAAYI,EAAiBtoG,GAA/C,IAAAhH,EAAAxR,KACI,GAAwB,IAApB8gH,EAAJ,KAGMC,EAAqBrrE,SAAS11C,KAAKghH,gCAAgCziH,MAAM45B,IAAK,KAC/EuoF,EAAWP,wBACZO,EAAWP,uBAAuBc,UAAY3+F,KAAKukB,IAAIk6E,IACvD/gH,KAAK2T,KAAKkqB,cAAckT,MAAM,CAAEC,eAAe,IAC/ChxC,KAAK2T,KAAKsqG,wBAAwB9/D,SAAS2iE,EAAkB,GAC7D9gH,KAAK2T,KAAKsqG,wBAAwBtkE,YAC7BnX,KAAKkH,EAAAA,SACLhH,UAAU,eACDw+E,EAAMR,EAAW32D,QAAQ73C,cACzByF,EAAcnG,EAAK2vG,iBAErBT,EADAQ,IAAQvpG,GAAuB,yBAARupG,EACV1vG,EAAK4vG,cAAcN,EAAiBI,GAEpC1vG,EAAKmC,KAAKkqB,cAAc4hC,cACjC,uCAAuCqhD,EAAe,MAE9DtvG,EAAK6vG,qBAAqBX,EAAYloG,MAG9CxY,KAAKqhH,qBAAqBX,EAAYloG,KAIpCimG,EAAAv+G,UAAAmhH,qBAAV,SAA+BC,EAAc9oG,GACzCxY,KAAKuhH,UAAUD,EAAanB,uBAAwB3nG,IAGjDimG,EAAAv+G,UAAAonG,aAAP,SAAoBoZ,EAAYI,EAAiBtoG,GAAjD,IAAAhH,EAAAxR,KACI,GAAI8gH,IAAoB9gH,KAAK2T,KAAKsqG,wBAAwBvjE,SAAS/5C,OAAS,IACnD,IAApBmgH,GAA8D,yBAArCJ,EAAW32D,QAAQ73C,eADjD,KAIMgC,EAAYlU,KAAK2T,KAAKsqG,wBAAwBh/D,UAAU6hE,EAAkB,GAC1EU,EAAkBxhH,KAAK2T,KAAKkoG,WAAav5F,KAAKU,KAAKhjB,KAAK2T,KAAKkoG,YAAc,EAC3E4F,EAAqBf,EAAWT,mBAClCS,EAAWT,mBAAmBgB,UAAY/sG,EAAYwhC,SAAS11C,KAAKghH,gCAAgCziH,MAAM45B,IAAK,IAC/GqpF,EAAkBttG,EAEtB,GADAlU,KAAK2T,KAAKkqB,cAAckT,MAAM,CAAEC,eAAe,IAC3CwwE,GAAmBA,EAAkBC,EAAoB,KACnDC,EAAYZ,EAAkB,EACpC9gH,KAAK2T,KAAKsqG,wBAAwB9/D,SAASujE,GAC3C1hH,KAAK2T,KAAKsqG,wBAAwBtkE,YAC7BnX,KAAKkH,EAAAA,SACLhH,UAAU,WACPg+E,EAAalvG,EAAKmwG,kBAAkBD,GACpClwG,EAAK+vG,UAAUb,EAAYloG,UAGnCxY,KAAK4hH,iBAAiBlB,EAAYloG,KAIhCimG,EAAAv+G,UAAAqhH,UAAV,SAAoBb,EAAYloG,GAC5B,GAAyC,yBAArCkoG,EAAW32D,QAAQ73C,cACnBwuG,EAAW3vE,YACR,KACG8wE,EAAoD,yBAArCnB,EAAW32D,QAAQ73C,cACxC,GAAIlS,KAAKg/G,qBAAqBxmG,IAAuBxY,KAAKq/G,yBAAyB7mG,GAAqB,KAC9FunG,EAAe//G,KAAKggH,gBAAgBxnG,EAAoBqpG,GACxDrqG,EAAOkpG,EAAWjhD,cAAiBsgD,EAAY,uBAAuBvnG,EAAkB,MAE9F,OADAhB,EAAKu5B,QACEv5B,EAEXxX,KAAKkgH,8BAA8BxqE,SACnCgrE,EAAWptD,aAAa,iBAAkB,IAAK96C,EAAoBqpG,KAIjEpD,EAAAv+G,UAAA0hH,iBAAV,SAA2BlB,EAAYloG,GACnC,OAAQxY,KAAKuhH,UAAUb,EAAWT,mBAAoBznG,IAGnDimG,EAAAv+G,UAAA4mG,cAAP,WAAA,IAAAt1F,EAAAxR,KACU6gH,EAAiB7gH,KAAK2T,KAAKsqG,wBAAwBzjE,oBACnD+2D,EAAmBvxG,KAAK2T,KAAKiE,YAAY8xB,MAAMo1E,WAAWlkE,sBAC/B,IAA7BimE,EAAe5nF,UACfj5B,KAAKm8E,cAAcn8E,KAAK2T,KAAKiE,YAAY8xB,MAAMl3B,QAE1C++F,EAAiB/4E,aAAekd,SAAS67D,EAAiBz4E,WAAY,KAAO,GAAK94B,KAAK2T,KAAK60F,cAAc7nG,OAC3GX,KAAKmnG,YAAY,IAEjBnnG,KAAK2T,KAAKkqB,cAAckT,MAAM,CAAEC,eAAe,IAC/ChxC,KAAKuxG,iBAAiBvxG,KAAK2T,KAAKiE,YAAY8xB,MAAMl3B,OAAO2rC,SAAS,GAClEn+C,KAAK2T,KAAK+qG,cAAc/kE,YACnBnX,KAAKkH,EAAAA,SACLhH,UAAU,WACPlxB,EAAK21F,YAAY,OAM9BsX,EAAAv+G,UAAA0mG,aAAP,WAAA,IAAAp1F,EAAAxR,KACU6gH,EAAiB7gH,KAAK2T,KAAKsqG,wBAAwBzjE,oBACzD,GAAoC,IAAhCqmE,EAAen4E,cACfm4E,EAAe5nF,YAAc4nF,EAAen4E,aAAe1oC,KAAK2T,KAAKsqG,wBAAwBxjE,oBAAqB,KAC5GqnE,EAAO9hH,KAAK+hH,aACZ/pG,EAAW09B,SAASosE,EAAKA,EAAKnhH,OAAS,GAAG2yD,aAAa,iBAAkB,IAC/EtzD,KAAKo8E,aAAapkE,QAElBhY,KAAK2T,KAAKkqB,cAAckT,MAAM,CAAEC,eAAe,IAC/ChxC,KAAK2T,KAAKsqG,wBAAwB9/D,SAASn+C,KAAK2T,KAAKsqG,wBAAwBvjE,SAAS/5C,OAAS,GAC/FX,KAAK2T,KAAKsqG,wBAAwBtkE,YAC7BnX,KAAKkH,EAAAA,SAAShH,UAAU,eACfo/E,EAAOtwG,EAAKuwG,aAClB,GAAkB,EAAdD,EAAKnhH,OAAY,KACXqX,EAAW09B,SAASosE,EAAKA,EAAKnhH,OAAS,GAAG2yD,aAAa,iBAAkB,IAC/E9hD,EAAK4qE,aAAapkE,OAM/BymG,EAAAv+G,UAAA8hH,oBAAP,WAAA,IAAAxwG,EAAAxR,KACU6gH,EAAiB7gH,KAAK2T,KAAKsqG,wBAAwBzjE,oBACzD,GAAoC,IAAhCqmE,EAAen4E,cACfm4E,EAAe5nF,YAAc4nF,EAAen4E,aAAe1oC,KAAK2T,KAAKsqG,wBAAwBxjE,oBAAqB,KAC5GziC,EAAWhY,KAAK2T,KAAKsqG,wBAAwBvjE,SAAS/5C,OAAS,EAC/DkX,EAAM7X,KAAK2T,KAAKkqB,cAAc4hC,cAAc,mBAAmBznD,EAAQ,MAC7E,GAAIH,GAAqC,yBAA9BA,EAAIkyC,QAAQ73C,cAEnB,YADA2F,EAAIk5B,YAGF+uE,KAAajoG,GAAqC,yBAA9BA,EAAIkyC,QAAQ73C,eACtClS,KAAKo8E,aAAapkE,EAAU8nG,QAE5B9/G,KAAK2T,KAAKsqG,wBAAwB9/D,SAASn+C,KAAK2T,KAAKsqG,wBAAwBvjE,SAAS/5C,OAAS,GAC/FX,KAAK2T,KAAKsqG,wBAAwBtkE,YAC7BnX,KAAKkH,EAAAA,SAAShH,UAAU,eACf1qB,EAAWxG,EAAKmC,KAAKsqG,wBAAwBvjE,SAAS/5C,OAAS,EAC/DkX,EAAMrG,EAAKmC,KAAKkqB,cAAc4hC,cAAc,mBAAmBznD,EAAQ,MAC7E,GAAIH,GAAqC,yBAA9BA,EAAIkyC,QAAQ73C,cACnB2F,EAAIk5B,YADR,KAIM+uE,KAAajoG,GAAqC,yBAA9BA,EAAIkyC,QAAQ73C,eACtCV,EAAK4qE,aAAapkE,EAAU8nG,OAKrCrB,EAAAv+G,UAAAwmG,WAAP,SAAkB4a,EAActpG,EAAUQ,EAAoBqpG,GAC1D,QAD0D,IAAAA,IAAAA,GAAA,IACtDA,GAA6B,IAAb7pG,GAChBhY,KAAK2T,KAAK80F,gBAAgBzoG,KAAK2T,KAAK80F,gBAAgB9nG,OAAS,GAAGinB,eAAiBpP,EAIrF,GAAIxY,KAAK2T,KAAK80F,gBAAgBzoG,KAAK2T,KAAK80F,gBAAgB9nG,OAAS,GAAGinB,eAAiBpP,EAAoB,CACrG,GAAIxY,KAAKu/G,gBAAgBvnG,GAErB,YADAhY,KAAK2T,KAAK4sG,YAAY72E,MAAMjI,QAAQ5D,cAAckT,YAGhDkxE,EAAQjiH,KAAK2T,KAAKsE,QAAQjD,KAAK,SAAA6C,GAAO,OAAAA,EAAIrF,QAAUwF,EAAW,IACjEhY,KAAK2T,KAAKsE,QAAQjD,KAAK,SAAA6C,GAAO,OAAAA,EAAIrF,QAAUwF,EAAW,IACvDhY,KAAK2T,KAAKkrG,iBAAiB7pG,KAAK,SAAA6C,GAAO,OAAAA,EAAIrF,QAAUwF,EAAW,IACpE,GAAIA,IAAahY,KAAK2T,KAAKsqG,wBAAwBvjE,SAAS/5C,OAAS,GAAKX,KAAK2T,KAAK4qG,qBAEhF,YADAv+G,KAAKm8E,cAAc,GAAG,GAGtB8lC,GACAjiH,KAAKsnG,aAAaga,EAActpG,EAAU,OAE3C,KACGR,EAAOxX,KAAK6/G,6BAA6B7nG,EAAUQ,EAAoBqpG,GAC7E,GAAIrqG,EAAM,CACN,GAAIxX,KAAK2T,KAAKoG,aAAe/Z,KAAKu/G,gBAAgBvnG,GAE9C,YADAhY,KAAKygH,iBAAiBjpG,EAAMQ,EAAUQ,GAG1CxY,KAAKi8E,oBAAoBzkE,EAAMQ,EAAUQ,EAAoBqpG,MAKlEpD,EAAAv+G,UAAAgiH,sBAAP,SAA6BC,GACzB,GAAIniH,KAAK2T,KAAK6/F,iBAAiB4O,mBAC3BpiH,KAAK2T,KAAK6/F,iBAAiB6O,gCAD/B,KAKMhmG,EAAUrc,KAAK2T,KAAK6/F,iBAAiB8O,0BACrC53B,EAAcy3B,EAAU,EAAI9lG,EAAQ1b,OAAS,EAC7CinB,EAAevL,EAAQquE,GAAa9iE,cACxBu6F,EAAUniH,KAAKq/G,yBAAyBz3F,GAAgB5nB,KAAKg/G,qBAAqBp3F,IAEhG5nB,KAAK2T,KAAK6/F,iBAAiB+O,oBAAoBlmG,EAAQquE,IAAc,GAErE1qF,KAAK2T,KAAK6/F,iBAAiBgP,mBAAmBnmG,EAAQquE,IAAc,KAIrE+zB,EAAAv+G,UAAAuiH,uBAAP,SAA8BrqG,EAA4BknB,OAChD7P,EAAOzvB,KAAK2T,KAAK6/F,iBAAiB8O,0BAClCI,EAAsBjzF,EAAK3f,QAAQsI,GAAU,EAC7CwP,EAAexP,EAAOwP,aAC5B,GAAqB,IAAjBA,GAAsB86F,EAAsB,EAAhD,KAEUC,EAAqB3iH,KAAK4iH,iCAC3BD,GAAsBvqG,IAAWuqG,GAClCrjF,EAAUuI,qBAJlB,KAQMg7E,EAAapzF,EAAKizF,GAClBI,EAAmBD,EAAWj7F,aAET,GAAvB86F,GAA2C,EAAf96F,IAAqB5nB,KAAKq/G,yBAAyByD,KAAsB1qG,EAAO6P,SAC5GqX,EAAUuI,iBACV7nC,KAAK2T,KAAK6/F,iBAAiBgP,mBAAmBK,GAAY,MAI3DpE,EAAAv+G,UAAA6iH,4BAAP,SAAmCzjF,GAC/B,GAA+B,EAA3Bt/B,KAAK2T,KAAKsE,QAAQtX,OAAY,CAC9B,GAAwF,EAApFX,KAAK2T,KAAKsE,QAAQxB,OAAO,SAAAoB,GAAO,OAAAA,aAAe8lG,KAA4Bh9G,OAE3E,YADA2+B,EAAU8C,kBAGdpiC,KAAK8mG,qBACE9mG,KAAK2T,KAAK4qG,sBACjBv+G,KAAKm8E,cAAc,GAAG,GAE1B78C,EAAUuI,kBAGP42E,EAAAv+G,UAAA8iH,uBAAP,SAA8B5qG,EAA4BknB,OAChD7P,EAAOzvB,KAAK2T,KAAK6/F,iBAAiB8O,0BAClCW,EAAsBxzF,EAAK3f,QAAQsI,GAAU,EACnD,GAAI6qG,GAAuBjjH,KAAK2T,KAAK6/F,iBAAiB8O,0BAA0B3hH,OAE5EX,KAAK+iH,4BAA4BzjF,OAFrC,KAKM4jF,EAAazzF,EAAKwzF,GAClBE,EAAmBD,EAAWt7F,aAC/BxP,EAAO6P,QAAWjoB,KAAKg/G,qBAAqBmE,GAGtC/qG,IAAWpY,KAAKojH,iCAAoCpjH,KAAKg/G,qBAAqBmE,KACrFnjH,KAAK2T,KAAK6/F,iBAAiBgP,mBAAmBU,GAAY,GAC1D5jF,EAAU8C,oBAJV9C,EAAUuI,iBACV7nC,KAAK2T,KAAK6/F,iBAAiBgP,mBAAmBU,GAAY,MAO1DzE,EAAAv+G,UAAAkjH,8BAAR,eACUC,EACFrjH,KAAK2T,KAAK60F,cAAc/xF,OAAO,SAAAX,GAAO,OAAEA,EAAe,aAAKA,EAAIi6E,aACpE,OAAOszB,EAAuBA,EAAuB1iH,OAAS,IAG1D89G,EAAAv+G,UAAA0iH,+BAAR,WACI,OAAO5iH,KAAK2T,KAAK60F,cAAc/xF,OAAO,SAAAX,GAAO,OAAEA,EAAe,aAAKA,EAAIi6E,aAAY,IAGhF0uB,EAAAv+G,UAAAumG,mBAAP,SAA0B6a,EAActpG,EAAUQ,EAAoBsnG,GAClE,QADkE,IAAAA,IAAAA,GAAA,GAC9DA,GAA0B,IAAb9nG,GAAyC,IAAvBQ,GAA4BxY,KAAK2T,KAAKsE,QAAQtX,OAC7EX,KAAKgiH,2BAGT,GAA2B,IAAvBxpG,EAA0B,CAC1B,GAAIxY,KAAKu/G,gBAAgBvnG,GAErB,YADAhY,KAAK2T,KAAK4sG,YAAYC,KAAK/+E,QAAQ5D,cAAckT,QAGpC,IAAb/4B,GAAkBhY,KAAK2T,KAAK2vG,gBAAkBtjH,KAAK2T,KAAK4vG,aAAeC,GAAWC,YAClFzjH,KAAKkiH,wBAELliH,KAAKonG,WAAWka,EAActpG,EAC1BhY,KAAK2T,KAAK80F,gBAAgBzoG,KAAK2T,KAAK80F,gBAAgB9nG,OAAS,GAAGinB,kBAErE,KACGpQ,EAAOxX,KAAK6/G,6BAA6B7nG,EAAUQ,EAAoBsnG,GAC7E,GAAItoG,EAAM,CACN,GAAIxX,KAAK2T,KAAKoG,aAAe/Z,KAAKu/G,gBAAgBvnG,GAE9C,YADAhY,KAAKogH,qBAAqBpoG,EAAUQ,GAGxCxY,KAAKk8E,mBAAmB1kE,EAAMQ,EAAUQ,EAAoBsnG,MAKjErB,EAAAv+G,UAAAwjH,4BAAP,SAAmCC,OACzB5C,EAAqBrrE,SAAS11C,KAAKghH,gCAAgCziH,MAAM45B,IAAK,IAC9EyrF,EAAY5jH,KAAK2T,KAAKkrG,iBAAiBpoG,OAAO,SAAAlW,GAAK,OAAY,IAAZA,EAAEiS,QACtD7P,OAAO3C,KAAK2T,KAAKsE,QAAQ5H,WAAW2E,KAAK,SAAA5T,GAAK,OAAAA,EAAEoR,QAAUmxG,IACzDzvG,EAAYlU,KAAK2T,KAAKsqG,wBAAwBh/D,UAAU0kE,GACxDnC,EAAkBxhH,KAAK2T,KAAKkoG,WAAav5F,KAAKU,KAAKhjB,KAAK2T,KAAKkoG,YAAc,EAC3E4F,EAAqBmC,EAAYA,EAAU/lF,cAAcojF,UAAY/sG,EAAY6sG,EAC/ES,EAAkBttG,EAC1B,UAAK0vG,GAAaA,EAAU/lF,cAAcojF,UAAY3+F,KAAKukB,IAAIk6E,IACpDS,GAAmBA,EAAkBC,IAO5ChD,EAAAv+G,UAAAggH,8BAAR,SAAsCloG,EAAUQ,EAAoBsnG,GAApE,IAAAtuG,EAAAxR,UAAoE,IAAA8/G,IAAAA,GAAA,OAC1D+D,EAAgB7jH,KAAK++G,uBAAuBvmG,GAClDxY,KAAK2T,KAAKkqB,cAAckT,MAAM,CAAEC,eAAe,IAC/ChxC,KAAK2T,KAAK+qG,cAAc/kE,YACnBnX,KAAKkH,EAAAA,SACLhH,UAAU,WACPlxB,EAAKquG,6BAA6B7nG,EAAUQ,EAAoBsnG,GAAW/uE,MAAM,CAAEC,eAAe,MAE1GhxC,KAAKuxG,iBAAiBv5F,GAAUmmC,SAAS0lE,IAEnCpF,EAAAv+G,UAAAkhH,cAAV,SAAwB5uG,EAAOrF,GAC3B,YAD2B,IAAAA,IAAAA,EAAWnN,KAAKmhH,kBACpCnhH,KAAK2T,KAAKkqB,cAAc4hC,cACpBtyD,EAAQ,mBAAmBqF,EAAK,OAGrCisG,EAAAv+G,UAAAyhH,kBAAV,SAA4BmC,GACxB,OAAO9jH,KAAK2T,KAAKowG,MAAMlmF,cAAc4hC,cACjC,mBAAmBqkD,EAAS,OAG5BrF,EAAAv+G,UAAA6hH,WAAR,eACU50G,EAAWnN,KAAKmhH,iBACtB,OAAOnhH,KAAK2T,KAAKkqB,cAAcwlC,iBAAiBl2D,IAG1CsxG,EAAAv+G,UAAA8/G,gBAAV,SAA0Bp4F,EAAuBk4F,GAC7C,YAD6C,IAAAA,IAAAA,GAAA,GACtCA,EAAY,wBAA0B,iBAGvCrB,EAAAv+G,UAAAihH,eAAV,WACI,MAAO,oCA7kBdniG,EAAAA,aA+kBDy/F,EA/kBA,GCNAuF,GAAA,WAAA,SAAAA,KAG2C,2BAH1C92G,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,mBAE6B62G,EAH3C,GAMAC,GAAA,WAAA,SAAAA,KAGuC,2BAHtC/2G,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,uBAEyB82G,EAHvC,GAMAC,GAAA,WAAA,SAAAA,KAG0C,2BAHzCh3G,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,0BAE4B+2G,EAH1C,GAQAC,GAAA,WAWI,SAAAA,EACoDxwG,EACzC8tB,EAC6CgK,GAD7CzrC,KAAAyhC,QAAAA,EAEHzhC,KAAK2T,KAAOA,EACZ3T,KAAKyrC,kBAAoBA,EACzBzrC,KAAKyrC,kBAAkB93B,KAAOA,EAqC1C,OAlDInU,OAAAgC,eAAY2iH,EAAAjkH,UAAA,UAAO,KAAnB,WACI,OAAOF,KAAK2T,KAAK4sG,6CAgBd4D,EAAAjkH,UAAAsmG,UAFP,SAEiBhmE,GACbA,EAAM4B,kBACoB,EAAtBpiC,KAAKokH,QAAQzjH,QACRX,KAAKokH,QAAQ5D,OAAUxgH,OAASwgC,EAAM8pD,UACtCtqF,KAAKokH,QAAQ16E,QAAW1pC,MAAQwgC,EAAM8pD,WAEvCtqF,KAAKqkH,KAAK7jF,GAGdxgC,KAAKqkH,KAAK7jF,IAGV2jF,EAAAjkH,UAAAokH,cAAR,SAAsBtsG,EAAUusG,OACtB5wG,EAAO3T,KAAS,KACtB2T,EAAK+qG,cAAc/kE,YAAYnX,KAAKkH,EAAAA,QAASwtC,EAAAA,IAAI,WAAM,OAAAvjE,EAAK8K,kBAAiBikB,UAAU,WACnF/uB,EAAK2G,cAAcnC,MAAMnD,KAAK,SAAA7T,GAAK,OAAAA,EAAEqX,qBAAuB+rG,IAAW9iF,QAAQ5D,cAAckT,WAG7FozE,EAAAjkH,UAAAmkH,KAAR,SAAa7jF,GACTA,EAAMqH,qBACA0pE,EAAmBvxG,KAAK2T,KAAK+qG,cAAc9jE,sBAC3C8vC,EAAclqD,EAAM8pD,SAAWtqF,KAAK2T,KAAK6wG,wBAA0BxkH,KAAK2T,KAAK8wG,yBAC7EC,EAAa1kH,KAAK2T,KAAK2G,cAAcnC,MAAMnD,KAAK,SAAA1S,GAAK,OAAAA,EAAEkW,qBAAuBkyE,IAC/Eg6B,GACA1kH,KAAKyrC,kBAAkBuzE,qBAAqBt0B,IACzC1qF,KAAKyrC,kBAAkB4zE,yBAAyB30B,GAKpDg6B,EAAW7mF,cAAckT,SAJzB/wC,KAAKskH,cAActkH,KAAK2T,KAAK2G,cAAc9H,MAAOk4E,GAClD6mB,EAAiBz4E,WACjB94B,KAAK2T,KAAK2G,cAAcwkG,WAAWhgE,oBAAoB9+C,KAAKyrC,kBAAkBszE,uBAAuBr0B,0BAjDhHx9E,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,+FAWLw3B,EAAAA,OAAMl4B,KAAA,CAACq6C,EAAAA,WAAW,WAAM,OAAA69D,eAtCb1jF,EAAAA,8CAwCX0D,EAAAA,OAAMl4B,KAAA,CAACq6C,EAAAA,WAAW,WAAM,OAAA23D,8CAK5BpxG,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,YAAS,CAAAiK,KACtCrJ,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,cAkCxC03G,EAtDA,GCzBAS,GAAe,CACX,CACIhvG,KAAM,aACNzT,MAAO,8KAIX,CACIyT,KAAM,WACNzT,MAAO,mwBAKX,CACIyT,KAAM,mBACNzT,MAAO,qvBAIX,CACIyT,KAAM,MACNzT,MAAO,6LAKX,CACIyT,KAAM,QACNzT,MAAO,0PAIX,CACIyT,KAAM,iBACNzT,MAAO,mPAKX,CACIyT,KAAM,YACNzT,MAAO,0mBAIX,CACIyT,KAAM,SACNzT,MAAO,iIAIX,CACIyT,KAAM,wBACNzT,MAAO,8KAIX,CACIyT,KAAM,eACNzT,MAAO,+JAKX,CACIyT,KAAM,WACNzT,MAAO,gNAIX,CACIyT,KAAM,YACNzT,MAAO,2NAIX,CACIyT,KAAM,WACNzT,MAAO,8cAKX,CACIyT,KAAM,cACNzT,MAAO,8WAIX,CACIyT,KAAM,UACNzT,MAAO,yMAIX,CACIyT,KAAM,UACNzT,MAAO,odAKX,CACIyT,KAAM,aACNzT,MAAO,6XAKX,CACIyT,KAAM,YACNzT,MAAO,2UAMX,CACIyT,KAAM,qBACNzT,MAAO,8KAIX,CACIyT,KAAM,YACNzT,MAAO,wJAIX,CACIyT,KAAM,aACNzT,MAAO,0XAKX,CACIyT,KAAM,YACNzT,MAAO,wUAMX,CACIyT,KAAM,YACNzT,MAAO,2TAIX,CACIyT,KAAM,YACNzT,MAAO,iOAIX,CACIyT,KAAM,mBACNzT,MAAO,+NAKX,CACIyT,KAAM,cACNzT,MAAO,0SAKX,CACIyT,KAAM,aACNzT,MAAO,oZAKX,CACIyT,KAAM,YACNzT,MAAO,iWAMX,CACIyT,KAAM,QACNzT,MAAO,ySAKX,CACIyT,KAAM,UACNzT,MAAO,mPAKX,CACIyT,KAAM,YACNzT,MAAO,2RAKX,CACIyT,KAAM,MACNzT,MAAO,iOAIX,CACIyT,KAAM,QACNzT,MAAO,yRCxMf0iH,GAAA,WAOI,SAAAA,EAAY1kG,GACRngB,KAAKmgB,QAAO,EAgBpB,OAbW0kG,EAAA3kH,UAAA+C,UAAP,SAAiBia,EAAmB7K,EAAmCjG,EAAYiU,OAE3EpR,EADE0E,EAAO3T,KAAKmgB,QAAQxM,KAU1B,OAJI1E,EAHCoD,EAAY1R,OAGJyV,GAASlF,KAAKrD,GAAWqP,GAAa7K,GAFtC6K,EAIbvJ,EAAKmxG,mBAAqB71G,uBApBjC2R,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,WACNiL,MAAM,+CARDtL,MA8BTsvG,EAxBA,GA6BAE,GAAA,WAOI,SAAAA,EAAY5kG,GACRngB,KAAKmgB,QAAO,EAyBpB,OAtBW4kG,EAAA7kH,UAAA+C,UAAP,SAAiBia,EAAmBzK,EAChC0P,EAAwDE,EACxDjW,EAAYwH,EAAsByM,OAE5BrT,EAAQ,CAAEqF,YAAa,GAAI8P,UAAW,GAAIE,gBAAeA,GACzD1O,EAAyB3T,KAAKmgB,QAAQxM,KAG5C,OAFA3G,EAAMqF,YAAcsB,EAAKqxG,oBAEpBh4G,EAAMqF,YAAY1R,QASvBqM,EAAMmV,UAAYxO,EAAKsxG,uBACvBj4G,EAAMqV,gBAAkB1O,EAAKuxG,eAEtB9uG,GAASvC,MAAMhG,GAAWqP,GAAalQ,EAAO2G,EAAMC,KAVvDA,EAAcmD,OAAO,EAAGnD,EAAcjT,QAC/B,CACHwQ,KAAM+L,EACNtb,SAAUsb,yBAxBzB0D,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,iBACNiL,MAAM,+CArCDtL,MAoETwvG,EAjCA,GAsCAI,GAAA,WAOI,SAAAA,EAAYhlG,GACRngB,KAAKmgB,QAAO,EAuBpB,OApBWglG,EAAAjlH,UAAA+C,UAAP,SAAiBia,EAA4BzK,EACzC0P,EAAwDE,EACxDjW,EAAYiU,OAENrT,EAAQ,CAAEqF,YAAa,GAAI8P,UAAW,GAAIE,gBAAeA,GACzD1O,EAAyB3T,KAAKmgB,QAAQxM,KAG5C,OAFA3G,EAAMqF,YAAcsB,EAAKqxG,oBAEpBh4G,EAAMqF,YAAY1R,QAIvBqM,EAAMmV,UAAYxO,EAAKsxG,uBACvBj4G,EAAMqV,gBAAkB1O,EAAKuxG,eAEtB9uG,GAASmL,cAAc,CAC1BpQ,KAAMtD,GAAWqP,EAAW/L,MAC5BvP,SAAUiM,GAAWqP,EAAWtb,WACjCoL,IATQkQ,EAAW/L,0BApB7ByP,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,kBACNiL,MAAM,+CA3EDtL,MAwGT4vG,EA/BA,GAoCAC,GAAA,WAMI,SAAAA,EAAoBjlG,GAAAngB,KAAAmgB,QAAAA,EAoBxB,OAlBWilG,EAAAllH,UAAA+C,UAAP,SAAiBia,EAA4BlB,EAAU2C,EAAcvS,EAAYiU,GAE7E,QAFyC,IAAArE,IAAAA,EAAA,QAAU,IAAA2C,IAAAA,EAAA,KAE9C3e,KAAKmgB,QAAQxM,KAAKoI,OACnB,OAAOmB,MAGLlQ,EAAQ,CACVwF,MAAOwJ,EACP2G,eAAgBhE,GAGd1P,EAAyB,CAC3BkC,KAAMiF,GAAS4F,KAAKnO,GAAWqP,EAAW/L,MAAOnE,GACjDpL,SAAUwU,GAAS4F,KAAKnO,GAAWqP,EAAWtb,UAAWoL,IAG7D,OADAhN,KAAKmgB,QAAQxM,KAAK0xG,YAAcr4G,EACzBiC,uBAxBd2R,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,aACNiL,MAAM,+CA/GDtL,MAuIT6vG,EA1BA,GA+BAE,GAAA,WAMI,SAAAA,EAAoBnlG,GAAAngB,KAAAmgB,QAAAA,EAiBxB,OAfWmlG,EAAAplH,UAAA+C,UAAP,SAAiBia,EAAmB/H,EAChC/I,EAAYiU,OACN1M,EAAO3T,KAAKmgB,QAAQxM,KACpB3G,EAAQ,CAAEmI,gBAAiBA,GAEjC,IAAKnI,EAAMmI,kBACNnI,EAAMmI,gBAAgBJ,mBAC4B,IAAnD/H,EAAMmI,gBAAgBJ,kBAAkBpU,OACxC,OAAOuc,MAGLjO,EAASmH,GAASK,OAAO5I,GAAWqP,GAAalQ,GAEvD,OADA2G,EAAKsC,aAAehH,uBApB3B2R,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,gBACNiL,MAAM,+CA9IDtL,MAmKT+vG,EAvBA,GCvIMC,GAA2B,qBAKjC,SAAAC,KAIWxlH,KAAA8oG,YAAa,EACb9oG,KAAAmsF,WAAY,GAMvBs5B,GAAA,WAqBI,SAAAA,EAAoBtlG,EAA+EsrD,GAA/EzrE,KAAAmgB,QAAAA,EAA+EngB,KAAAyrE,YAAAA,EAlB3FzrE,KAAA0lH,yBAA2B,IAAI12G,IAC/BhP,KAAA2lH,qBAAsB,EACtB3lH,KAAA88B,SAAW,IAAIC,EAAAA,QACf/8B,KAAA4lH,aAAc,EACd5lH,KAAA6lH,uBAAyB,IAAI92G,IAE7B/O,KAAA8lH,kBAAoB,EAGrB9lH,KAAAoiH,oBAAqB,EACrBpiH,KAAA+lH,eAAqC,KACrC/lH,KAAAgmH,mBAA2C,KAC3ChmH,KAAAimH,cAAoC,KACpCjmH,KAAAkmH,iBAAkB,EAClBlmH,KAAAmmH,uBAAyB,IAAIp3G,IA0dxC,OApdI02G,EAAAvlH,UAAAkkC,YAAA,WACIpkC,KAAK88B,SAAS56B,MAAK,GACnBlC,KAAK88B,SAASuH,YAGlB7kC,OAAAgC,eAAWikH,EAAAvlH,UAAA,wBAAqB,KAAhC,WACI,OAAOw1C,SAAS11C,KAAK2T,KAAK+qG,cAAcnjE,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAc8gF,YAAa,qCAG1Gn/G,OAAAgC,eAAWikH,EAAAvlH,UAAA,6BAA0B,KAArC,WACI,OAAOw1C,SAAS11C,KAAK2T,KAAK+qG,cAAc9jE,sBAAsB9hB,WAAY,qCAG9Et5B,OAAAgC,eAAWikH,EAAAvlH,UAAA,sBAAmB,KAA9B,WACI,OAA8G,IAAvGw1C,SAAS11C,KAAK2T,KAAK+qG,cAAcnjE,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAc8gF,YAAa,qCAG1Gn/G,OAAAgC,eAAWikH,EAAAvlH,UAAA,4BAAyB,KAApC,WACI,OAAOF,KAAK2T,KAAK80F,gBAAgBhyF,OAAO,SAAAX,GAAO,OAACA,EAAI03F,aAAe13F,EAAIi6E,8CAG3EvwF,OAAAgC,eAAWikH,EAAAvlH,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAK2T,KAAK80F,gBAAgBhyF,OAAO,SAAAX,GAAO,OAACA,EAAI03F,+CAGxDhuG,OAAAgC,eAAWikH,EAAAvlH,UAAA,WAAQ,KAAnB,WAII,OAHKF,KAAKomH,YACNpmH,KAAKomH,UAAY,IAAIvU,GAAqB7xG,KAAK2T,KAAK2hE,SAEjDt1E,KAAKomH,2CAMTX,EAAAvlH,UAAAmmH,kBAAP,WAAA,IAAA70G,EAAAxR,KACSA,KAAK2lH,sBACN3lH,KAAK2lH,qBAAsB,EAE3B3lH,KAAK2T,KAAKg4F,gBAAgBnpE,KAAKC,EAAAA,UAAUziC,KAAK88B,WAAW4F,UAAU,SAACpD,GAChE9tB,EAAK80G,oBAAoBhnF,EAAUlnB,UAGvCpY,KAAK2T,KAAK+qG,cAAc/kE,YAAYnX,KAAKC,EAAAA,UAAUziC,KAAK88B,WAAW4F,UAAU,SAACpD,GACtEA,EAAU0S,aAAexgC,EAAKs0G,mBAC9Bt0G,EAAKs0G,iBAAmBxmF,EAAU0S,WAClCxgC,EAAKmC,KAAKujG,eAAehnG,QAAQ,SAACinG,GAC9BA,EAAWoP,0BAGf/0G,EAAKy0G,gBACLz0G,EAAK+wG,oBAAoB/wG,EAAKy0G,eAAe,GAC7Cz0G,EAAKy0G,cAAgB,QAI7BjmH,KAAK2T,KAAK+9F,kBAAkBlvE,KAAKC,EAAAA,UAAUziC,KAAK88B,WAAW4F,UAAU,WACjElxB,EAAKmC,KAAKujG,eAAehnG,QAAQ,SAACinG,GAC9BA,EAAWoP,6BASpBd,EAAAvlH,UAAAsmH,eAAP,SAAsBzwG,EAAe1D,OAG7B8C,OAH6B,IAAA9C,IAAAA,EAAA,MACjCrS,KAAK4lH,aAAc,EAS8B,KAL7CzwG,EADA9C,aAAuBwC,GACLxC,EAEArS,KAAKymH,0BAA0B1wG,EAAO1D,IAGxC0C,kBAAkBpU,OAClCX,KAAK0mH,YAAY3wG,GAEjB/V,KAAKyW,OAAOV,EAAO,KAAMZ,GAG7BnV,KAAK4lH,aAAc,GAMhBH,EAAAvlH,UAAAuW,OAAP,SAAcV,EAAe5T,EAAYwkH,EACrCr1G,GADJ,IAAAE,EAAAxR,KAEU8V,EAAM9V,KAAKmgB,QAAQxK,mBAAmBI,GACtCuG,EAAsBhL,KAAewE,GAAMA,EAAIwG,oBAErD,GAAIqqG,EACA3mH,KAAKmgB,QAAQ1J,OAAOV,EAAO5T,EAAOwkH,EAA2BrqG,OAC1D,KACGsqG,EAA2B5mH,KAAK2T,KAAKkI,yBAAyB7G,KAAKe,GACzE,GAAI6wG,aAAoC/xG,GACpC7U,KAAKmgB,QAAQ1J,OAAOV,EAAO5T,EAAOykH,EAA0BtqG,OACzD,KACGuqG,EAAmB,EACzB7mH,KAAKmgB,QAAQ1J,OAAOV,EAAO5T,EAAO0kH,EAAoBzqG,UAAWE,IAKzEi8B,sBAAsB,WAAM,OAAA/mC,EAAKmC,KAAKmzG,gBAAgB7tG,KAAKnD,EAAI+F,6BAM5D4pG,EAAAvlH,UAAAwmH,YAAP,SAAmB3wG,GAAnB,IAAAvE,EAAAxR,KACI,GAAI+V,IACe/V,KAAKmgB,QAAQxK,mBAAmBI,GAE3C,QAIR/V,KAAK4lH,aAAc,EAEnB5lH,KAAKmgB,QAAQ5D,aAAaxG,GAG1BwiC,sBAAsB,WAAM,OAAA/mC,EAAKmC,KAAKmzG,gBAAgB7tG,KAAK,QAEvDlD,KACoB/V,KAAK+mH,eAAehxG,GAC5BpV,OAAS,GAGzBX,KAAK4lH,aAAc,GAMhBH,EAAAvlH,UAAA8mH,aAAP,SAAoB7kH,EAAYia,EAAY9K,GAA5C,IAAAE,EAAAxR,KACIA,KAAKmgB,QAAQhE,cAAcha,EAAOia,EAAW9K,GAG7CinC,sBAAsB,WAAM,OAAA/mC,EAAKmC,KAAKmzG,gBAAgB7tG,KAAKzH,EAAKmC,KAAKkI,6BAMlE4pG,EAAAvlH,UAAA+mH,iBAAP,uBACI,IAAmB,IAAAC,EAAA14G,EAAAo2G,IAAKuC,EAAAD,EAAAhlH,QAAAilH,EAAA/kH,KAAA+kH,EAAAD,EAAAhlH,OAAE,CAArB,IAAM4qE,EAAIq6C,EAAAhlH,MACNnC,KAAKyrE,YAAYb,gBAAgBkC,EAAKl3D,KAAM2vG,KAC7CvlH,KAAKyrE,YAAYhB,mBAAmBqC,EAAKl3D,KAAMk3D,EAAK3qE,MAAOojH,2GAQhEE,EAAAvlH,UAAA6mH,eAAP,SAAsBK,GAClB,GAAKpnH,KAAK6lH,uBAAuBh3E,IAAIu4E,GAUrC,OAAOpnH,KAAK6lH,uBAAuBt5G,IAAI66G,OAT7BhvG,EAASpY,KAAK2T,KAAK0I,QAAQrH,KAAK,SAACc,GAAQ,OAAAA,EAAIC,QAAUqxG,IACvDC,EAAgB,IAAI1nH,MAK1B,OAHAK,KAAKsnH,wBAAwBlvG,EAAOyD,yBAA0B7b,KAAK2T,KAAKkI,yBAAyB/G,SAAUuyG,GAC3GrnH,KAAK6lH,uBAAuBllG,IAAIymG,EAAUC,GAEnCA,GASR5B,EAAAvlH,UAAAuzG,mBAAP,WAAA,IAAAjiG,EAAAxR,KACSA,KAAK4lH,cACN5lH,KAAK0lH,yBAAyBp8E,QAE9BtpC,KAAK6lH,uBAAuB31G,QAAQ,SAAC/N,EAAuBlB,OAClDmX,EAAS5G,EAAKmC,KAAK0I,QAAQrH,KAAK,SAACc,GAAQ,OAAAA,EAAIC,QAAU9U,IACzDmX,GACAjW,EAAMxB,OAAS,EAEf6Q,EAAK81G,wBAAwBlvG,EAAOyD,yBAA0BrK,EAAKmC,KAAKkI,yBAAyB/G,SAAU3S,GAEzFqP,EAAK+1G,uBAAuBnvG,EAAOyD,2BAEjDrK,EAAKk0G,yBAAyBv5G,IAAIlL,GAGtCuQ,EAAK80G,oBAAoBluG,IAEzB5G,EAAKq0G,uBAAuB36E,UAAOjqC,OAS5CwkH,EAAAvlH,UAAAsnH,iBAAP,SAAwBJ,EAAkBK,OAChCC,EAAkB1nH,KAAK+mH,eAAeK,GAEtB,IAAlBK,GAAgD,EAAzBC,EAAgB/mH,OACvC+mH,EAAgB,GAAGC,eAAiB,KAC7BF,IAAkBC,EAAgB/mH,OAAS,EAClD+mH,EAAgBD,EAAgB,GAAGG,cAAgB,MAEnDF,EAAgBD,EAAgB,GAAGG,cAAgBF,EAAgBD,EAAgB,GAAGE,eACtFD,EAAgB,GAAGC,eAAiB,KACpCD,EAAgBA,EAAgB/mH,OAAS,GAAGinH,cAAgB,MAGhEF,EAAgB3wG,OAAO0wG,EAAe,IAMnChC,EAAAvlH,UAAAumH,0BAAP,SAAiCW,EAAkBS,QAAA,IAAAA,IAAAA,EAAA,MAM/C,QAHIC,EACAC,EAHEL,EAAkBG,GAAsC7nH,KAAK+mH,eAAeK,GAC5EjyG,EAAkB,IAAIN,GAAyB8K,GAAeT,GAAIkoG,GAI/D5mH,EAAI,EAAGA,EAAIknH,EAAgB/mH,OAAQH,KACxCunH,EAAmBL,EAAgBlnH,IAEbiS,WAAW2J,UAAU0qD,SAAqD,OAA1CihD,EAAiBt1G,WAAWiK,UAQ7EqrG,EAAiBJ,iBAAmB31G,WAAiD,OAApC+1G,EAAiBJ,gBAClEI,EAAiBJ,iBAAmBhoG,GAAeT,IACpD6oG,EAAiBH,gBAAkBjoG,GAAeV,IAM3C8oG,EAAiBJ,iBAAmBhoG,GAAeV,IAC1D6oG,EAAc/yG,kBAAkBvS,KAAKulH,EAAiBt1G,aAEtD0C,EAAgBJ,kBAAkBvS,KAAKulH,EAAiBt1G,YACxDq1G,EAAgB,OARhBA,EAAgB,IAAIjzG,GAAyB8K,GAAeV,IAAKmoG,GACjEjyG,EAAgBJ,kBAAkBvS,KAAKslH,GACvCA,EAAc/yG,kBAAkBvS,KAAKulH,EAAiBt1G,aAblDs1G,EAAiBH,gBAAkBjoG,GAAeV,KAAQ6oG,IAC1DA,EAAgB,IAAIjzG,GAAyB8K,GAAeV,IAAKmoG,GACjEjyG,EAAgBJ,kBAAkBvS,KAAKslH,IAqBnD,OAAO3yG,GAMJswG,EAAAvlH,UAAA8nH,gBAAP,SAAuBZ,GACnB,GAAIpnH,KAAK0lH,yBAAyB72E,IAAIu4E,GAClC,OAAO,MAGLhvG,EAASpY,KAAK2T,KAAK0I,QAAQrH,KAAK,SAACc,GAAQ,OAAAA,EAAIC,QAAUqxG,IACvDa,EAAYjoH,KAAKunH,uBAAuBnvG,EAAOyD,0BAKrD,OAJIosG,GACAjoH,KAAK0lH,yBAAyBv5G,IAAIi7G,GAG/Ba,GAMJxC,EAAAvlH,UAAAgoH,oBAAP,SAA2BpzG,GACvB,OAAiB,IAAbA,EACO9U,KAAK2T,KAAKw0G,gBAAgBC,6BAE1BpoH,KAAK2T,KAAKw0G,gBAAgBE,6BAOlC5C,EAAAvlH,UAAAooH,aAAP,SAAoB71G,GAChB,OAAIA,EAAW2J,UAAU0qD,QACd9mE,KAAK2T,KAAKw0G,gBAAgB,mBAAmB11G,EAAW2J,UAAUxG,OAAWnD,EAAW2J,UAAUxG,KAClGnD,EAAWiK,qBAAqB9N,KAChC5O,KAAKuoH,SAAStlH,UAAUwP,EAAWiK,UAAW1c,KAAK2T,KAAK2hE,QAExD7iE,EAAWiK,WAOnB+oG,EAAAvlH,UAAAomH,oBAAP,SAA2BluG,OACjB++F,EAAa/+F,EAAO++F,WACtBA,GACAA,EAAWoP,wBAOZd,EAAAvlH,UAAAqiH,oBAAP,SAA2BnqG,EAA4BowG,OAC7CrR,EAAa/+F,EAAO++F,WACtBA,GACAA,EAAWsR,UAAUD,IAOtB/C,EAAAvlH,UAAAmiH,0BAAP,WACIriH,KAAK2T,KAAK+0G,aAAaC,YAAY9qF,cAAckT,SAGrDvxC,OAAAgC,eAAWikH,EAAAvlH,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAK2T,KAAKsC,8CAGrBzW,OAAAgC,eAAWikH,EAAAvlH,UAAA,aAAU,KAArB,WAGI,OAFiB,IAAI2kH,GAAoB7kH,KAAS,KAASmgB,SACtDld,UAAUjD,KAAK2T,KAAKxC,KAAMnR,KAAK2T,KAAKyH,mBAAoBpb,KAAK4oH,OAAQ,oCAOvEnD,EAAAvlH,UAAAsiH,mBAAP,SAA0BpqG,EAA4B8tG,GAClDlmH,KAAK2T,KAAKkqB,cAAckT,MAAM,CAACC,eAAe,IAC9ChxC,KAAKimH,cAAgB7tG,EACrBpY,KAAKkmH,gBAAkBA,EAIvB,QAFI2C,EAAqB,EACrBC,EAAoB,EACft2G,EAAQ,EAAGA,EAAQxS,KAAKyoG,gBAAgB9nG,OAAQ6R,IAErD,GADAq2G,GAAsBnzE,SAAS11C,KAAKyoG,gBAAgBj2F,GAAO9C,MAAO,IAC9D1P,KAAKyoG,gBAAgBj2F,KAAW4F,EAAQ,CACxC0wG,EAAoBD,EAAqBnzE,SAAS11C,KAAKyoG,gBAAgBj2F,GAAO9C,MAAO,IACrF,UAIFuvG,EAAWj/G,KAAK2T,KAAKurG,gBACrBxvG,EAAQ1P,KAAKm/G,sBAAwBn/G,KAAKo/G,2BAC5C8G,EACAjH,EAASrkE,sBAAsB9hB,YAAc+vF,EAAqBn5G,EAElEuvG,EAASrkE,sBAAsB9hB,WAAagwF,GAI5CrD,EAAAvlH,UAAAqnH,uBAAR,SAA+Bl1G,GAC3B,IAAKA,EACD,OAAO,EAGX,GAAIA,aAAuBwC,GAA0B,KAC3CM,EAAe,EACrB,GAAIA,EAAgBL,WAAa6K,GAAeT,GAI5C,OAA2B,EAHDlf,KAAK+oH,0BAA0B5zG,GAO7D,QADI8yG,GAAY,EACPznH,EAAI,EAAGA,EAAI2U,EAAgBJ,kBAAkBpU,OAAQH,IAC1DynH,EAAYA,GAAajoH,KAAKunH,uBAAuBpyG,EAAgBJ,kBAAkBvU,IAG3F,OAAOynH,EAGX,OAAO,GAGHxC,EAAAvlH,UAAA6oH,0BAAR,SAAkC12G,GAG9B,QADIqN,EADAqQ,EAAQ,EAEHvvB,EAAI,EAAGA,EAAI6R,EAAY0C,kBAAkBpU,OAAQH,KACtDkf,EAAUrN,EAAY7R,cACCqU,KACf6K,EAAQ5K,WAAa6K,GAAeV,KACpC8Q,IAGJA,GAAgB/vB,KAAK+oH,0BAA0BrpG,IAIvD,OAAOqQ,GAGJ01F,EAAAvlH,UAAAonH,wBAAP,SAA+Bj1G,EAC3ByC,EACAk0G,GACAhpH,KAAKipH,iCAAiC52G,EAAayC,EAAUk0G,GAGzDA,EAAeroH,SACfqoH,EAAeA,EAAeroH,OAAS,GAAGinH,cAAgB,OAI1DnC,EAAAvlH,UAAA+oH,iCAAR,SAAyC52G,EACTyC,EACAk0G,GAC5B,GAAK32G,EAIL,GAAIA,aAAuBwC,GAA0B,CAEjD,QADMM,EAAe,EACZ3U,EAAI,EAAGA,EAAI2U,EAAgBJ,kBAAkBpU,OAAQH,IAC1DR,KAAKipH,iCAAiC9zG,EAAgBJ,kBAAkBvU,GAAI2U,EAAgBL,SAAUk0G,GAEtGA,EAAeroH,SACfqoH,EAAeA,EAAeroH,OAAS,GAAGinH,cAAgB9yG,OAE3D,KACGo0G,EAAS,IAAI1D,GACnB0D,EAAOz2G,WAAU,EACjBy2G,EAAOtB,cAAgB9yG,MAEjBq0G,EAAaH,EAAeA,EAAeroH,OAAS,GACtDwoH,IACAD,EAAOvB,eAAiBwB,EAAWvB,eAGvCoB,EAAexmH,KAAK0mH,KAIrBzD,EAAAvlH,UAAAkpH,gCAAP,eAMQl2G,EALEm2G,EAAiBrpH,KAAK2T,KAAKkI,yBACjC,IAAKwtG,EAAet0G,oBAAsBs0G,EAAet0G,kBAAkBpU,OACvE,OAAO,EAKX,IAAK,IAAIH,EAAI,EAAGA,EAAI6oH,EAAet0G,kBAAkBpU,OAAQH,IAAK,CAG9D,MAFA0S,EAAOm2G,EAAet0G,kBAAkBvU,cAEnBqU,IAMjB,OAAO,MALDy0G,EAAQ,EACd,GAAIA,EAASv0G,mBAAqBu0G,EAASv0G,kBAAkBpU,OACzD,OAAO,EAMnB,OAAO,uBAzedqe,EAAAA,sDAlBQzJ,UAZAg0D,MAygBTk8C,EA3eA,GC1BA,SAAgB8D,KACZ,OAAO,SAACvoH,EAAaC,EAAauoH,OACxBC,EAAa,IAAMxoH,EAAIiO,YAC7Bs6G,EAAWA,GAAY,CACnBxtF,cAAc,EACdC,YAAY,IAEP1vB,IAAMi9G,EAASj9G,KAAG,WAA4B,OAAOvM,KAAKypH,QAC7DC,EAAiBF,EAAS7oG,KAAG,SAA0BrB,GAAYtf,KAAKypH,GAAcnqG,GAe5F,OAbAkqG,EAAS7oG,IAAM,SAAqBrB,SAC1BjG,EAAWrZ,KAAKiB,GACtB,IAAIqe,IAAQjG,GAA4B,iBAARiG,GAAoBA,IAAQjG,KACxDqwG,EAAe9oH,KAAKZ,KAAMsf,GACtBtf,KAAK88C,aAAa,KAEZC,IAAOpwC,EAAA,IACR1L,GAAM,IAAI0oH,EAAAA,aAAatwG,EAAUiG,GAAK,MAE3Ctf,KAAK88C,YAAYC,KAItBysE,GCVf,IAAAI,GAAA,WAyBI,SAAAA,KA2CJ,OAzCWA,EAAA1pH,UAAAumD,gBAAP,WAAA,IAAAj1C,EAAAxR,KACIu4C,sBAAsB,WAClB/mC,EAAKuzC,QAAQ1F,uBAIduqE,EAAA1pH,UAAA2pH,WAAP,WACI7pH,KAAKiwF,YAAc,MAGhB25B,EAAA1pH,UAAA4pH,iBAAP,SAAwBxqF,GAAxB,IAAA9tB,EAAAxR,KAE0B,IADAA,KAAKmR,KAAKrB,QAAQwvB,EAAUgnD,SAASnkF,OAEvDnC,KAAKmR,KAAKjB,QAAQ,SAAAuxB,GACdA,EAAQqnE,WAAaxpE,EAAUy+B,QAC/BvsD,EAAKL,KAAK,GAAGi1E,eAAgB,KAGjC9mD,EAAUgnD,SAASnkF,MAAM2mG,WAAaxpE,EAAUy+B,QAC3C/9D,KAAKmR,KAAKuR,MAAM,EAAG1iB,KAAKmR,KAAKxQ,QAAQqU,KAAK,SAAA7E,GAAM,OAAkB,IAAlBA,EAAG24F,aAG5C9oG,KAAKmR,KAAKuR,MAAM,EAAG1iB,KAAKmR,KAAKxQ,QAAQqU,KAAK,SAAA7E,GAAM,OAAkB,IAAlBA,EAAG24F,aAI3D9oG,KAAKmR,KAAK,GAAGi1E,eAAgB,GAH7BpmF,KAAKmR,KAAK,GAAGi1E,eAAgB,EAC7BpmF,KAAKmR,KAAK,GAAG23F,YAAa,IAJ1B9oG,KAAKmR,KAAK,GAAGi1E,eAAgB,EAC7BpmF,KAAKmR,KAAK,GAAG23F,YAAa,IAQlCxpE,EAAUgnD,SAASG,eAAe5oD,cAAcwgC,QAGpD7+D,OAAAgC,eAAWooH,EAAA1pH,UAAA,WAAQ,KAAnB,eACQ6pH,EAAW,OACf,OAAQ/pH,KAAK4rD,gBACT,KAAKC,GAAeT,KAAM2+D,EAAW,OAAQ,MAC7C,KAAKl+D,GAAeR,QAAS0+D,EAAW,OAG5C,OAAOA,uDAlEdt6E,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,yBACVuiC,SAAA,owDAMCtiC,EAAAA,sBAGAA,EAAAA,2BAGA0lC,EAAAA,UAASrmC,KAAA,CAAC,QAAS,CAAEsmC,KAAMyV,6BAG3Bp7C,EAAAA,uBAGA0lC,EAAAA,UAASrmC,KAAA,CAAC6sC,OA8CfswE,EApEA,GCeAI,GAAA,WA6EI,SAAAA,EAAmBxrG,GAAAxe,KAAAwe,IAAAA,EArEXxe,KAAA86F,yBAA4C,CAChD39D,qBAAqB,EACrBD,OAAO,EACPF,iBAAkB,IAAI8H,GACtB7H,eAAgB,IAAImL,IAmBjBpoC,KAAAiqH,oBAAsB,IAAIljG,EAAAA,aAG1B/mB,KAAAkqH,uBAAyB,IAAInjG,EAAAA,aAgKxC,OAlJIvnB,OAAAgC,eAAcwoH,EAAA9pH,UAAA,qBAAkB,KAAhC,WACI,OAAOF,KAAKmqH,sDAGhB3qH,OAAAgC,eAAIwoH,EAAA9pH,UAAA,SAAM,KAAV,WACI,OAAOF,KAAK0nH,gBAAgB1nH,KAAK0nH,gBAAgB/mH,OAAS,KAAOX,KAAKoqH,8CAG1E5qH,OAAAgC,eAAIwoH,EAAA9pH,UAAA,WAAQ,KAAZ,WACI,OAAuC,IAAhCF,KAAK0nH,gBAAgB/mH,wCAGhCnB,OAAAgC,eAAIwoH,EAAA9pH,UAAA,6BAA0B,KAA9B,WACI,OAAOF,KAAK2T,KAAKw0G,gBAAuD,uEAG5E3oH,OAAAgC,eAAIwoH,EAAA9pH,UAAA,wBAAqB,KAAzB,WACI,OAAOF,KAAK2T,KAAKw0G,gBAAiD,iEAGtE3oH,OAAAgC,eAAIwoH,EAAA9pH,UAAA,OAAI,KAAR,WACI,OAAQF,KAAKoY,OAAOiF,UAChB,KAAKC,GAASC,OACV,MAAO,SACX,QACI,MAAO,yCAMnBysG,EAAA9pH,UAAAumD,gBAAA,WACIzmD,KAAK86F,yBAAyBz4D,OAASriC,KAAKoY,OAAOzE,KAAKknF,gBACxD76F,KAAK86F,yBAAyB99D,iBAAiBlF,SAAS92B,OAAShB,KAAKqqH,qBAAqB5oF,QAAQ5D,eAGhGmsF,EAAA9pH,UAAA6wC,MAAP,WAAA,IAAAv/B,EAAAxR,KAGIu4C,sBAAsB,WAAM,OAAA/mC,EAAK84G,mBAAmBv5E,WAGjDi5E,EAAA9pH,UAAAqqH,oBAAP,SAA2BC,GACvB,OAAOxqH,KAAKoqH,aAAa33G,WAAW2J,WAAapc,KAAKoqH,aAAa33G,WAAW2J,UAAUxG,OAAS40G,GAG9FR,EAAA9pH,UAAAuqH,iBAAP,SAAwBruG,GACpB,OAAOA,EAAYpc,KAAK0qH,mBAAmBtuG,EAAUxG,MAAQ,MAG1Do0G,EAAA9pH,UAAAyqH,cAAP,WACI,OAAO3qH,KAAKqqH,qBAAqB5oF,QAAQ5D,cAAc8gF,YAAc,MAGzEn/G,OAAAgC,eAAIwoH,EAAA9pH,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKoY,OAAOg9F,QAAQpuC,iDAGxBgjD,EAAA9pH,UAAAwqH,mBAAP,SAA0BvoH,GACtB,OAAOnC,KAAK2T,KAAKw0G,gBAAgB,mBAAmBnoH,KAAK4qH,aAAazoH,GAAOyT,OAAWzT,GAGrF6nH,EAAA9pH,UAAA2qH,YAAP,WACI,OAAI7qH,KAAKoY,OAAOiF,WAAaC,GAASyD,SAAsD,OAA3C/gB,KAAKoqH,aAAa33G,WAAW2J,UACnEpc,KAAK4qH,aAAa5qH,KAAK8qH,WAAW,IAAI/jD,SACrC/mE,KAAKoqH,aAAa33G,WAAW2J,UAG9Bpc,KAAKoqH,aAAa33G,WAAW2J,UAAU2qD,SAFvC,eAMRijD,EAAA9pH,UAAA6qH,2BAAP,WACI/qH,KAAKgrH,mBAAmBx+G,OAAOxM,KAAK86F,2BAGjCkvB,EAAA9pH,UAAA0qH,aAAP,SAAoBzoH,GAChB,OAAOnC,KAAKoY,OAAOg9F,QAAQh5F,UAAUja,IAGlC6nH,EAAA9pH,UAAA+qH,oBAAP,SAA2B3rF,OACjBn9B,EAASm9B,EAAsB,aAA8Bn9B,MACnEnC,KAAKoqH,aAAa33G,WAAW2J,UAAYpc,KAAK4qH,aAAazoH,GAE3DnC,KAAK+wC,SAGFi5E,EAAA9pH,UAAAgrH,gBAAP,SAAuB/oH,GACnB,QAAInC,KAAKoqH,aAAa33G,WAAWiK,WACtB1c,KAAKoqH,aAAa33G,WAAWiK,YAAcva,GAMnD6nH,EAAA9pH,UAAAirH,cAAP,SAAqB7rF,GACjBt/B,KAAKoqH,aAAa33G,WAAWiK,UAAY1c,KAAKorH,eAAe9rF,EAAUt+B,OAAOmB,QAG3E6nH,EAAA9pH,UAAAmrH,6BAAP,SAAoC/rF,EAAWgsF,GACkB,IAAzDtrH,KAAKurH,yBAAyBC,gBAAgB7qH,QAC9C2+B,EAAU8C,kBACVpiC,KAAKurH,yBAAyB95C,aAAa65C,IAE3CtrH,KAAKkqH,uBAAuBjxG,KAAK,CAC7BjY,OAAQhB,KAAKoqH,aACblxG,SAAQ,KAKb8wG,EAAA9pH,UAAAurH,uBAAP,SAA8BnsF,EAAWgsF,GACpB,UAAbhsF,EAAUr+B,MACVjB,KAAKurH,yBAAyB95C,aAAa65C,GAC3CtrH,KAAKkqH,uBAAuBjxG,KAAK,CAC7BjY,OAAQhB,KAAKoqH,aACblxG,SAAQ,MAKb8wG,EAAA9pH,UAAAwrH,oBAAP,WACI1rH,KAAKiqH,oBAAoBhxG,KAAKjZ,KAAKoqH,eAGhCJ,EAAA9pH,UAAAyrH,yBAAP,SAAgCrsF,IACxBA,EAAU6vC,QAAwB,cAAb7vC,EAAUr+B,KAAwC,SAAbq+B,EAAUr+B,KACpEjB,KAAK+qH,6BAGQ,QAAbzrF,EAAUr+B,KAAoBq+B,EAAUgrD,UAAYtqF,KAAK0nH,gBAAgB,KAAO1nH,KAAKoqH,cACrF9qF,EAAUuI,iBAGdrH,MAAM4B,mBAGF4nF,EAAA9pH,UAAAkrH,eAAR,SAAuBjpH,GAOnB,OANInC,KAAKoY,OAAOiF,WAAaC,GAASC,OAClCpb,EAAQk+F,WAAWl+F,GACZnC,KAAKoY,OAAOiF,WAAaC,GAASyD,UACzC5e,EAAQ4e,QAAQ5e,IAGbA,uBAhMdstC,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,qCACVuiC,SAAA,kyFA9BA7C,EAAAA,qDAyCCz/B,EAAAA,4BAGAA,EAAAA,+BAGAA,EAAAA,oBAGAA,EAAAA,8BAGAA,EAAAA,mCAGAkc,EAAAA,uCAGAA,EAAAA,qCAGAwpB,EAAAA,UAASrmC,KAAA,CAAC,uBAAwB,CAAEsmC,KAAM2Z,mCAG1C5Z,EAAAA,UAASrmC,KAAA,CAAC,cAAe,CAAEsmC,KAAMyV,iCAGjC1V,EAAAA,UAASrmC,KAAA,CAAC,qBAAsB,CAAEsmC,KAAM+R,uCAGxChS,EAAAA,UAASrmC,KAAA,CAAC,2BAA4B,CAAEsmC,KAAM49B,QAqJnDq5C,EAlMA,GCpBA4B,GAAA,SAAA//F,GAAA,SAAA+/F,mDAyBA,OAnB0Dp3G,EAAAA,EAAAA,GAKtDhV,OAAAgC,eAAcoqH,EAAA1rH,UAAA,qBAAkB,KAAhC,WACI,OAAOF,KAAK88F,WAAW/lC,kDAM3Bv3D,OAAAgC,eAAIoqH,EAAA1rH,UAAA,uBAAoB,KAAxB,WACI,OAAOF,KAAK2T,KAAKw0G,gBAAsD,sEAGpEyD,EAAA1rH,UAAA2rH,eAAP,SAAsBtxB,GAClBA,yBAvBP9qD,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,kCACVuiC,SAAA,unGAICoD,EAAAA,UAASrmC,KAAA,CAAC,aAAc,CAAEsmC,KAAMimD,6BAOhC5rF,EAAAA,SAULw+G,EAzBA,CAM0D5B,ICqB1D8B,GAAA,WA6DI,SAAAA,EAAoBttG,GAAAxe,KAAAwe,IAAAA,EApDbxe,KAAA0nH,gBAAkB,IAAI/nH,MAErBK,KAAA+rH,8BAAkD,CACtDpyF,kBAAmBC,GAAkBnC,OACrCgC,oBAAqBC,GAAoBpC,OACzCuC,qBAAsBH,GAAoBpC,OAC1CwC,mBAAoBF,GAAkBnC,QAGlCz3B,KAAAgsH,6BAAgD,CACpD7uF,qBAAqB,EACrBD,OAAO,EACPF,iBAAkB,IAAI8H,GAA6B9kC,KAAK+rH,+BACxD9uF,eAAgB,IAAImK,IAgN5B,OAvKI0kF,EAAA5rH,UAAAumD,gBAAA,WACIzmD,KAAKgsH,6BAA6B3pF,OAASriC,KAAK2T,KAAK0uB,QAGzD7iC,OAAAgC,eAAIsqH,EAAA5rH,UAAA,WAAQ,KAAZ,WACI,OAAIF,KAAKoY,OAAOiF,WAAaC,GAAS1O,KAC3B5O,KAAKisH,uBAGTjsH,KAAKksH,2DAGhB1sH,OAAAgC,eAAIsqH,EAAA5rH,UAAA,OAAI,KAAR,WACI,OAAOF,KAAKwzG,iBAAiB7/F,sCAG1Bm4G,EAAA5rH,UAAAisH,sBAAP,WACQnsH,KAAKosH,kBACLpsH,KAAKqsH,oCAINP,EAAA5rH,UAAAosH,qBAAP,WACQtsH,KAAKusH,qBAAqB7iF,OAC1B1pC,KAAKusH,qBAAqB7iF,MAAMqH,SAIjC+6E,EAAA5rH,UAAA0M,KAAP,WACI5M,KAAKgsH,6BAA6BhvF,iBAAiBlF,SAAS92B,OACxDhB,KAAK2T,KAAK64G,SAAWxsH,KAAK2T,KAAK64G,SAAS3uF,cAAgB79B,KAAK2T,KAAKkqB,cACtE79B,KAAKwM,OAAOI,KAAK5M,KAAKgsH,+BAGnBF,EAAA5rH,UAAAusH,mBAAP,WACIzsH,KAAKwzG,iBAAiBkT,YAAY1mH,KAAKoY,OAAOrC,OAC9C/V,KAAKqsH,mCACLrsH,KAAKwe,IAAIyhB,iBAGN6rF,EAAA5rH,UAAAwsH,YAAP,WACQ1sH,KAAK2sH,oBACL3sH,KAAK+6B,eAAemE,KAAKl/B,KAAK2sH,qBAI/Bb,EAAA5rH,UAAA0sH,mBAAP,WACI5sH,KAAK0nH,gBAAkB1nH,KAAK0nH,gBAAgBjxG,OACxC,SAAAgrB,GAAW,OAAAA,EAAQhvB,WAAW2J,YAC7BqlB,EAAQhvB,WAAWiK,WAA8C,IAAjC+kB,EAAQhvB,WAAWiK,WAAmB+kB,EAAQhvB,WAAW2J,UAAU0qD,WAEtE,EAA9B9mE,KAAK0nH,gBAAgB/mH,SACrBX,KAAK0nH,gBAAgB,GAAGC,eAAiB,KACzC3nH,KAAK0nH,gBAAgB1nH,KAAK0nH,gBAAgB/mH,OAAS,GAAGinH,cAAgB,MAG1E5nH,KAAKwzG,iBAAiBgT,eAAexmH,KAAKoY,OAAOrC,MAAO/V,KAAK0nH,iBAC7D1nH,KAAK0sH,eAGFZ,EAAA5rH,UAAA2sH,iBAAP,eACU3D,EAAS,IAAI1D,GACnB0D,EAAOz2G,WAAa,CAChB2J,UAAW,KACXhL,UAAWpR,KAAKoY,OAAOrC,MACvBzE,WAAYtR,KAAKoY,OAAOkE,oBACxBI,UAAW,MAGf1c,KAAK0nH,gBAAgB1nH,KAAK0nH,gBAAgB/mH,OAAS,GAAGinH,cAAgBjoG,GAAeV,IACrFiqG,EAAOvB,eAAiB3nH,KAAK0nH,gBAAgB1nH,KAAK0nH,gBAAgB/mH,OAAS,GAAGinH,cAE9E5nH,KAAK0nH,gBAAgBllH,KAAK0mH,GAE1BlpH,KAAK8sH,uBACL9sH,KAAK+sH,kBAGFjB,EAAA5rH,UAAA+pH,oBAAP,SAA2BzpF,OACjBinF,EAAgBznH,KAAK0nH,gBAAgB53G,QAAQ0wB,GAE7B,IAAlBinF,GAAqD,EAA9BznH,KAAK0nH,gBAAgB/mH,OAC5CX,KAAK0nH,gBAAgB,GAAGC,eAAiB,KAClCF,IAAkBznH,KAAK0nH,gBAAgB/mH,OAAS,EACvDX,KAAK0nH,gBAAgBD,EAAgB,GAAGG,cAAgB,MAExD5nH,KAAK0nH,gBAAgBD,EAAgB,GAAGG,cAAgB5nH,KAAK0nH,gBAAgBD,EAAgB,GAAGE,eAChG3nH,KAAK0nH,gBAAgB,GAAGC,eAAiB,KACzC3nH,KAAK0nH,gBAAgB1nH,KAAK0nH,gBAAgB/mH,OAAS,GAAGinH,cAAgB,MAG1E5nH,KAAK0nH,gBAAgB3wG,OAAO0wG,EAAe,GAE3CznH,KAAKwe,IAAIyhB,gBAETjgC,KAAK8sH,wBAGFhB,EAAA5rH,UAAAgqH,uBAAP,SAA8B1pF,OACpBhuB,EAAQxS,KAAK0nH,gBAAgB53G,QAAQ0wB,EAAMx/B,QACjDw/B,EAAMx/B,OAAO4mH,cAAgBpnF,EAAMtnB,SAC/B1G,EAAQ,EAAIxS,KAAK0nH,gBAAgB/mH,SACjCX,KAAK0nH,gBAAgBl1G,EAAQ,GAAGm1G,eAAiBnnF,EAAMtnB,WAIxD4yG,EAAA5rH,UAAAunF,UAAP,SAAiBnoD,GACbA,EAAU8C,mBAGP0pF,EAAA5rH,UAAA8sH,qBAAP,SAA4B1tF,GACP,QAAbA,EAAUr+B,KAAqBq+B,EAAUgrD,WACzChrD,EAAU8C,kBACV9C,EAAUuI,mBAIVikF,EAAA5rH,UAAA+sH,gBAAR,SAAwBzC,GACpB,OAAQxqH,KAAKoY,OAAOiF,UAChB,KAAKC,GAASyD,QACV,OAAOomD,GAA2Bn2D,WAAWoL,UAAUouG,GAC3D,KAAKltG,GAASC,OACV,OAAOsrD,GAA0B73D,WAAWoL,UAAUouG,GAC1D,KAAKltG,GAAS1O,KACV,OAAOw4D,GAAwBp2D,WAAWoL,UAAUouG,GACxD,QACI,OAAO1hD,GAA0B93D,WAAWoL,UAAUouG,KAI1DsB,EAAA5rH,UAAA4sH,qBAAR,WACI9sH,KAAKusH,qBAAqBr8G,QAAQ,SAAA6T,GAAK,OAAAA,EAAEvF,IAAIC,iBAC7Cze,KAAKktH,yBAAyBh9G,QAAQ,SAAA6T,GAAK,OAAAA,EAAEvF,IAAIC,kBAG7CqtG,EAAA5rH,UAAAmsH,iCAAR,WACIrsH,KAAK0nH,gBAAkB,OACjByF,EAAc,IAAI3H,GAExB2H,EAAY16G,WAAa,CACrB2J,UAAWpc,KAAKitH,gBAAgBjtH,KAAKosH,kBACrCh7G,UAAWpR,KAAKoY,OAAOrC,MACvBzE,WAAYtR,KAAKoY,OAAOkE,oBACxBI,UAAW,MAEfywG,EAAYvF,cAAgBjoG,GAAeV,IAE3Cjf,KAAK0nH,gBAAgBllH,KAAK2qH,OAEpBC,EAAe,IAAI5H,GACzB4H,EAAa36G,WAAa,CACtB2J,UAAW,KACXhL,UAAWpR,KAAKoY,OAAOrC,MACvBzE,WAAYtR,KAAKoY,OAAOkE,oBACxBI,UAAW,MAGf0wG,EAAazF,eAAiBhoG,GAAeV,IAE7Cjf,KAAK0nH,gBAAgBllH,KAAK4qH,IAGtBtB,EAAA5rH,UAAA6sH,eAAR,WAAA,IAAAv7G,EAAAxR,KACIu4C,sBAAsB,WAClB/mC,EAAK67G,qBAAqBxvF,cAAc5E,UAAYznB,EAAK67G,qBAAqBxvF,cAAc6K,oCAnOvG+G,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,gCACVuiC,SAAA,iwFAxCA7C,EAAAA,8DA4CCz/B,EAAAA,sBAiBAA,EAAAA,gCAGAA,EAAAA,gCAGAA,EAAAA,kCAGAA,EAAAA,8BAGAA,EAAAA,8BAGAA,EAAAA,oCAGA2kE,EAAAA,aAAYtlE,KAAA,CAACu9G,sCAGbj4C,EAAAA,aAAYtlE,KAAA,CAACm/G,oBAGb94E,EAAAA,UAASrmC,KAAA,CAAC,SAAU,CAAEsmC,KAAMvH,wCAG5BsH,EAAAA,UAASrmC,KAAA,CAAC,4BAA6B,CAAEsmC,KAAMuQ,EAAAA,8CAG/CxQ,EAAAA,UAASrmC,KAAA,CAAC,yBAA0B,CAAEsmC,KAAMuQ,EAAAA,4CAG5CxQ,EAAAA,UAASrmC,KAAA,CAAC,2BA4Kfq/G,EAtOA,GC3BAwB,GAAA,WAoBI,SAAAA,KAqBJ,OAnBWA,EAAAptH,UAAAqtH,oBAAP,SAA2BC,GAC6B,IAAhDxtH,KAAKytH,gBAAgBz8C,gBAAgBrwE,OACjCX,KAAK2T,KAAK+5G,gBAAgB1tH,KAAKoY,OAAOrC,OACtC/V,KAAKyxE,aAAa+7C,GAElBxtH,KAAK2T,KAAKg6G,UAAU3tH,KAAKoY,OAAOrC,OAGpC/V,KAAK2T,KAAKzC,KAAK,CAAEE,UAAWpR,KAAKoY,OAAOrC,MAAO1E,IAAKm8G,EAAel8G,YAAY,KAIhFg8G,EAAAptH,UAAAuxE,aAAP,SAAoB+7C,GACM,IAAlBA,EACAxtH,KAAKytH,gBAAgBh8C,aAAa,GAElCzxE,KAAKytH,gBAAgBh8C,aAAa,wBAtC7ChiC,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,0BACVuiC,SAAA,+lCAICtiC,EAAAA,oBAGAA,EAAAA,8BAGAA,EAAAA,+BAGA0lC,EAAAA,UAASrmC,KAAA,CAAC,kBAAmB,CAAEsmC,KAAM49B,QAwB1C28C,EAzCA,MCiCA,SAAAM,KAKW5tH,KAAAo+E,WAAY,iBAOnB,SAAAyvC,EAAmBn+E,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BALCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,8EAjDVm2C,EAAAA,eAqDJuqE,mBAMI,SAAAC,EAAmBp+E,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BALCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,6EAxDVm2C,EAAAA,eA4DJwqE,mBAMI,SAAAC,EAAmBr+E,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BALCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,6EA/DVm2C,EAAAA,eAmEJyqE,mBAMI,SAAAC,EAAmBt+E,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BALCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,8EAtEVm2C,EAAAA,eA0EJ0qE,KAKAC,GAAA,WAwFI,SAAAA,EAAoBzvG,GAAAxe,KAAAwe,IAAAA,EA/EZxe,KAAAkuH,mBAAoB,EACpBluH,KAAA0nH,gBAAkB,IAAI/nH,MACtBK,KAAA88B,SAAW,IAAIC,EAAAA,QACf/8B,KAAAmuH,qBAAsB,EACtBnuH,KAAAouH,mBAAoB,EACpBpuH,KAAAquH,wBAAyB,EACzBruH,KAAAsuH,aAAe,IAAIt/G,IAEjBhP,KAAAuuH,aAAe,IAAIC,EAAAA,aAItBxuH,KAAAyuH,SAAW,IAAI9uH,MACfK,KAAA0uH,aAAe,GAId1uH,KAAA2uH,yBAA2B,CAC/B70F,mBAAoBF,GAAkBpC,KAGlCx3B,KAAA4uH,wBAA2C,CAC/CzxF,qBAAqB,EACrBD,OAAO,EACPF,iBAAkB,IAAI8H,GAA6B9kC,KAAK2uH,0BACxD1xF,eAAgB,IAAImK,IAIxBpnC,KAAA6pE,UAAY,mBA0hBhB,OA7fIrqE,OAAAgC,eAAIysH,EAAA/tH,UAAA,OAAI,KAAR,WACI,OAAOF,KAAKwzG,iBAAiB7/F,sCAGjCnU,OAAAgC,eAAIysH,EAAA/tH,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKoY,OAAOg9F,QAAQpuC,iDAG/BxnE,OAAAgC,eAAIysH,EAAA/tH,UAAA,cAAW,KAAf,WACI,OAAQF,KAAKoY,OAAOiF,UAChB,KAAKC,GAASyD,QACV,OAAO/gB,KAAK2T,KAAKw0G,gBAAgB0G,8BACrC,KAAKvxG,GAASC,OACV,OAAOvd,KAAK2T,KAAKw0G,gBAAgB2G,6BACrC,KAAKxxG,GAAS1O,KACV,OAAO5O,KAAK2T,KAAKw0G,gBAAgB4G,2BACrC,QACI,OAAO/uH,KAAK2T,KAAKw0G,gBAAgB6G,6DAM7Cf,EAAA/tH,UAAAkkC,YAAA,WACIpkC,KAAK88B,SAAS56B,MAAK,GACnBlC,KAAK88B,SAASuH,YAGlB4pF,EAAA/tH,UAAAumD,gBAAA,WAAA,IAAAj1C,EAAAxR,KASI,GARAA,KAAK0nH,gBAAkB,IAAI/nH,MAC3BK,KAAKwzG,iBAAiB8T,wBAAwBtnH,KAAKoY,OAAOyD,yBAA0B7b,KAAK2T,KAAKyV,eAAgBppB,KAAK0nH,iBAC/G1nH,KAAK0nH,iBAAmB1nH,KAAK0nH,gBAAgB/mH,QACS,OAAtDX,KAAK0nH,gBAAgB,GAAGj1G,WAAW2J,UAAUxG,OAC7C5V,KAAKivH,aAAavH,gBAAkB1nH,KAAK0nH,iBAE7C1nH,KAAKkvH,qBAEDlvH,KAAKmvH,kBAAmB,KAClBC,EAAKpvH,KAAK2T,KAAKyH,mBAAmBpG,KAAK,SAAA9B,GAAQ,OAAAA,EAAK9B,YAAcI,EAAK4G,OAAOrC,QAChFq5G,GACApvH,KAAKmvH,kBAAkB19C,aAAa29C,EAAG/9G,KAI/CknC,sBAAsB,WAClB/mC,EAAK69G,iBAAiBvgC,YAAYjxD,cAAckT,WAIjDk9E,EAAA/tH,UAAAovH,iBAAP,WACI,OAAItvH,KAAKoY,OAAOyD,yBACL,kCAGJ,6CAGJoyG,EAAA/tH,UAAA46B,WAAP,SAAkB1iB,EAA4Bo7F,EAAuCz4E,EACjF4xF,GADJ,IAAAn7G,EAAAxR,KAEIA,KAAKoY,OAASA,EACdpY,KAAKwzG,iBAAmBA,EACxBxzG,KAAK+6B,eAAiBA,EACtB/6B,KAAK2sH,mBAAqBA,EAE1B3sH,KAAK4uH,wBAAwBvsF,OAASriC,KAAK2T,KAAK0uB,OAEhDriC,KAAKuuH,aAAevuH,KAAK2T,KAAKs8F,eAAeztE,KAAKC,EAAAA,UAAUziC,KAAK88B,WAAW4F,UAAU,WAClFlxB,EAAK+9G,mBAONtB,EAAA/tH,UAAA0qH,aAAP,SAAoBzoH,GAChB,OAAOnC,KAAKoY,OAAOg9F,QAAQh5F,UAAUja,IAMlC8rH,EAAA/tH,UAAAwqH,mBAAP,SAA0BvoH,GACtB,OAAOnC,KAAK2T,KAAKw0G,gBAAgB,mBAAmBnoH,KAAK4qH,aAAazoH,GAAOyT,OAAWzT,GAGrF8rH,EAAA/tH,UAAAsvH,MAAP,WACIxvH,KAAKoY,OAAO6P,QAAUjoB,KAAKoY,OAAO6P,OAClCjoB,KAAKuvH,iBAGFtB,EAAA/tH,UAAAuvH,OAAP,WACIzvH,KAAKoY,OAAOqP,QAAS,EACrBznB,KAAK2T,KAAK+mG,0BAA0BzhG,KAAK,CAAEb,OAAQpY,KAAKoY,OAAQc,UAAU,IAC1ElZ,KAAKuvH,iBAGFtB,EAAA/tH,UAAAwvH,kBAAP,SAAyBpwF,GACrB,GAAIt/B,KAAKkuH,kBAAmB,CACxBluH,KAAK4uH,wBAAwB5xF,iBAAiBlF,SAAS92B,OAASs+B,EAAUqwF,kBAEpEC,EAAW5vH,KAAK2T,KAAKkqB,cAAcluB,wBACnCkgH,EAAe7vH,KAAK8vH,aAAajyF,cAAcluB,wBAEjDoU,EAAI8rG,EAAa53F,KAAO43F,EAAangH,MACrCqgH,EAAKH,EAAS33F,KAAO23F,EAASlgH,MAClCqU,GAAKqB,OAAO6uC,YACZ87D,GAAM3qG,OAAO6uC,YACT3xC,KAAKukB,IAAI9iB,EAAIgsG,GAAM,KACnB/vH,KAAK4uH,wBAAwB5xF,iBAAiBlF,SAAS2B,oBAAsBC,GAAoBrC,KACjGr3B,KAAK4uH,wBAAwB5xF,iBAAiBlF,SAAS+B,qBAAuBH,GAAoBrC,OAElGr3B,KAAK4uH,wBAAwB5xF,iBAAiBlF,SAAS2B,oBAAsBC,GAAoBnC,MACjGv3B,KAAK4uH,wBAAwB5xF,iBAAiBlF,SAAS+B,qBAAuBH,GAAoBnC,OAGtGv3B,KAAKgwH,QAAQpjH,KAAK5M,KAAK4uH,yBACvB5uH,KAAKkuH,mBAAoB,IAI1BD,EAAA/tH,UAAA+vH,oBAAP,SAA2B3wF,GACN,UAAbA,EAAUr+B,KACVjB,KAAK0vH,kBAAkBpwF,IAIxB2uF,EAAA/tH,UAAAgwH,gBAAP,WAAA,IAAA1+G,EAAAxR,KACIu4C,sBAAsB,WAClB/mC,EAAK08G,mBAAoB,KAI1BD,EAAA/tH,UAAAiwH,mBAAP,SAA0B7wF,GACtBt/B,KAAKivH,aAAa7C,iBAAmB9sF,EAAU0O,aAAa7rC,MAC5Dm9B,EAAU1mB,QAAS,EACnB5Y,KAAK8vH,aAAajyF,cAAct/B,MAAM+4D,QAAU,OAChDt3D,KAAKgwH,QAAQnjH,QACb7M,KAAKivH,aAAariH,QAGdqhH,EAAA/tH,UAAAkwH,yBAAR,WACI,OAAoC,IAAhCpwH,KAAK0nH,gBAAgB/mH,SACkC,WAAtDX,KAAK0nH,gBAAgB,GAAGj1G,WAAW2J,UAAUxG,MACS,SAAtD5V,KAAK0nH,gBAAgB,GAAGj1G,WAAW2J,UAAUxG,MACS,UAAtD5V,KAAK0nH,gBAAgB,GAAGj1G,WAAW2J,UAAUxG,MACS,UAAtD5V,KAAK0nH,gBAAgB,GAAGj1G,WAAW2J,UAAUxG,MACS,OAAtD5V,KAAK0nH,gBAAgB,GAAGj1G,WAAW2J,UAAUxG,OAIf5V,KAAK0nH,gBAAgBjxG,OAAO,SAAAqmG,GAC3D,QAAwB,IAAvBA,EAAI6K,gBAA8C,IAAtB7K,EAAI8K,eACE,WAAlC9K,EAAIrqG,WAAW2J,UAAUxG,MACS,SAAlCknG,EAAIrqG,WAAW2J,UAAUxG,MACS,UAAlCknG,EAAIrqG,WAAW2J,UAAUxG,MACS,UAAlCknG,EAAIrqG,WAAW2J,UAAUxG,MACS,OAAlCknG,EAAIrqG,WAAW2J,UAAUxG,QAAgBjV,SAERX,KAAK0nH,gBAAgB/mH,QAGvDstH,EAAA/tH,UAAAmwH,8BAAR,WACI,GAAIrwH,KAAKoY,OAAOiF,WAAaC,GAASyD,QAClC,OAAO,EAGX,GAA+B,IAA3B/gB,KAAKsuH,aAAal0F,KAAY,KACxBk2F,EAAatwH,KAAKsuH,aAAan7F,SAASjxB,OAAOC,MAErD,IAAKmuH,GAA6B,IAAfA,EACf,OAAO,EAIf,IAAK,IAAI99G,EAAQ,EAAGA,EAAQxS,KAAK0uH,aAAa/tH,OAAQ6R,IAClD,GAAIxS,KAAKsuH,aAAaz/E,IAAI7uC,KAAK0uH,aAAal8G,IACxC,OAAO,EAIf,OAAO,GAGJy7G,EAAA/tH,UAAAgvH,mBAAP,WAAA,QAAA19G,EAAAxR,KACQmR,EAAOnR,KAAKoY,OAAO+H,QAAQlJ,aAAajX,KAAK2T,KAAKvH,IAChDmkH,EAAiDvwH,KAAK2T,KAAKkI,yBAC3D1G,EAAkB,IAAIN,GAAyB07G,EAAoBz7G,SAAUy7G,EAAoBn/G,eAEvG,IAAsB,IAAA7C,EAAAC,EAAA+hH,EAAoBx7G,mBAAiBrG,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAAxD,IAAMwd,EAAOhR,EAAAvM,MACd,GAAIud,aAAmB7K,GAEnB,GADoB,EACDzD,YAAcpR,KAAKoY,OAAOrC,MACzC,MAGRZ,EAAgBJ,kBAAkBvS,KAAKkd,wGAG3C,GAAIvK,EAAgBJ,kBAAkBpU,OAAQ,KACpCqM,EAAQ,CAAEmI,gBAAiBA,GACjChE,EAAOiF,GAASK,OAAO5I,GAAWsD,GAAOnE,GAGzChN,KAAKoY,OAAOiF,WAAaC,GAAS1O,MAClC5O,KAAK0uH,aAAe/uH,MAAMgR,KAAK,IAAI3B,IAAImC,EAAKyF,IAAI,SAAAa,GAC5C,OAAAA,EAAOjG,EAAK4G,OAAOrC,OAAS0B,EAAOjG,EAAK4G,OAAOrC,OAAOy6G,eAAiB/4G,EAAOjG,EAAK4G,OAAOrC,WAC9F/V,KAAKsuH,aAAe,IAAIt/G,IAAShP,KAAK0nH,gBAAgB5+F,OAAO,SAAC9a,EAAK1L,GAC/D,MAAoC,OAAhCA,EAAEmQ,WAAW2J,UAAUxG,KACvBlT,EAAYsL,EAAQrO,MAAMgR,KAAMrO,EAAEmQ,WAAoB,UAAc0gB,UAAUvc,IAAI,SAAA6T,GAC9E,OAAA,IAAI7b,KAAK6b,GAAG+lG,kBAEpB9tH,EAAYsL,EAAQ,CAAC1L,EAAEmQ,WAAWiK,UAAYpa,EAAEmQ,WAAWiK,UAAU8zG,eAAiBluH,EAAEmQ,WAAWiK,aACpG,OAEH1c,KAAK0uH,aAAe/uH,MAAMgR,KAAK,IAAI3B,IAAImC,EAAKyF,IAAI,SAAAa,GAAU,OAAAA,EAAOjG,EAAK4G,OAAOrC,WAC7E/V,KAAKsuH,aAAe,IAAIt/G,IAAShP,KAAK0nH,gBAAgB5+F,OAAO,SAAC9a,EAAK1L,GAC/D,MAAoC,OAAhCA,EAAEmQ,WAAW2J,UAAUxG,KACvBlT,EAAYsL,EAAQrO,MAAMgR,KAAMrO,EAAEmQ,WAAoB,UAAc0gB,WAExEzwB,EAAYsL,EAAQ,CAAC1L,EAAEmQ,WAAWiK,aACnC,MAEP1c,KAAKyuH,SAAW,IAAI9uH,UAEd8wH,EAAwBzwH,KAAKowH,4BAA8BpwH,KAAKqwH,gCAElErwH,KAAKoY,OAAOiF,WAAaC,GAASyD,QAClC/gB,KAAK0wH,kBAEL1wH,KAAK2wH,SAASF,GAGlBzwH,KAAKyuH,SAASv9G,KAAK,SAACY,EAAGvS,GAAM,OAAAiS,EAAKo/G,SAAS9+G,EAAGvS,KAE1CS,KAAKoY,OAAOiF,WAAaC,GAAS1O,OAClC5O,KAAK0uH,aAAe1uH,KAAK0uH,aAAa93G,IAAI,SAAAzU,GAAS,OAAA,IAAIyM,KAAKzM,MAG5DnC,KAAKmuH,qBACLnuH,KAAK6wH,cAAcJ,GAGvBzwH,KAAK8wH,mBAEL9wH,KAAKwe,IAAIyhB,iBAGLguF,EAAA/tH,UAAAwwH,gBAAR,WAAA,IAAAl/G,EAAAxR,KACIA,KAAKouH,mBAAoB,EACzBpuH,KAAKquH,wBAAyB,EAC9BruH,KAAK0uH,aAAax+G,QAAQ,SAAAuxB,OAChBsvF,EAAiB,IAAInD,GACvBnsF,IAAYzvB,WAAyB,OAAZyvB,GAAgC,KAAZA,GACzCjwB,EAAK4G,OAAOyD,0BACI,IAAZ4lB,GAAoBjwB,EAAKk2G,gBAAgB1yG,KAAK,SAAA8nG,GAAO,MAAkC,SAAlCA,EAAIrqG,WAAW2J,UAAUxG,QAC9Em7G,EAAejoB,YAAa,EAC5Bt3F,EAAK68G,wBAAyB,IACX,IAAZ5sF,GAAqBjwB,EAAKk2G,gBAAgB1yG,KAAK,SAAA8nG,GAAO,MAAkC,UAAlCA,EAAIrqG,WAAW2J,UAAUxG,QAClFm7G,EAAejoB,YAAa,EAC5Bt3F,EAAK68G,wBAAyB,GAElC0C,EAAejoB,YAAa,EAGhCioB,EAAejoB,YAAa,EAEhCioB,EAAe5uH,MAAQs/B,EACvBsvF,EAAeljD,MAAQpsC,EACvBsvF,EAAe3qC,eAAgB,EAC/B50E,EAAKi9G,SAASjsH,KAAKuuH,IAEnBv/G,EAAK28G,qBAAsB,KAK/BF,EAAA/tH,UAAAywH,SAAR,SAAiBF,GAAjB,IAAAj/G,EAAAxR,KACIA,KAAKouH,mBAAoB,EACzBpuH,KAAKquH,wBAAyB,EAC9BruH,KAAK0uH,aAAax+G,QAAQ,SAAAuxB,GACtB,GAAIA,IAAYzvB,WAAyB,OAAZyvB,GAAgC,KAAZA,EAAgB,KACvDsvF,EAAiB,IAAInD,GACvBp8G,EAAK4G,OAAOyD,yBACR40G,GACIj/G,EAAK88G,aAAaz/E,IAAIpN,GACtBsvF,EAAejoB,YAAa,EAE5BioB,EAAejoB,YAAa,EAEhCt3F,EAAK68G,wBAAyB,IAE9B0C,EAAejoB,YAAa,EAC5Bt3F,EAAK48G,mBAAoB,GAG7B2C,EAAejoB,YAAa,EAE5Bt3F,EAAK4G,OAAOiF,WAAaC,GAAS1O,MAClCmiH,EAAe5uH,MAAQ,IAAIyM,KAAK6yB,GAChCsvF,EAAeljD,MAAQ,IAAIj/D,KAAK6yB,KAEhCsvF,EAAe5uH,MAAQs/B,EACvBsvF,EAAeljD,MAAQpsC,GAE3BsvF,EAAe3qC,eAAgB,EAC/B50E,EAAKi9G,SAASjsH,KAAKuuH,QAEnBv/G,EAAK28G,qBAAsB,KAK/BF,EAAA/tH,UAAA4wH,iBAAR,eACUE,EAAa,IAAIpD,GACvBoD,EAAUloB,WAAa9oG,KAAKouH,kBAC5B4C,EAAU7uH,MAAQnC,KAAK2T,KAAKw0G,gBAAgB8I,0BAC5CD,EAAUnjD,MAAQ7tE,KAAK2T,KAAKw0G,gBAAgB8I,0BAC5CD,EAAU5qC,cAAgBpmF,KAAKquH,uBAC/B2C,EAAU5yC,WAAY,EACtBp+E,KAAKyuH,SAAS3sG,QAAQkvG,IAGlB/C,EAAA/tH,UAAA2wH,cAAR,SAAsBJ,OACZS,EAAU,IAAItD,GAChB5tH,KAAKoY,OAAOyD,yBACR40G,IACIzwH,KAAKsuH,aAAaz/E,IAAI,MACtBqiF,EAAOpoB,YAAa,EAEpBooB,EAAOpoB,YAAa,GAI5BooB,EAAOpoB,YAAa,EAExBooB,EAAO/uH,MAAQ,KACf+uH,EAAOrjD,MAAQ7tE,KAAK2T,KAAKw0G,gBAAgBgJ,sBACzCD,EAAO9qC,eAAgB,EACvB8qC,EAAO9yC,WAAY,EACnBp+E,KAAKyuH,SAAS3sG,QAAQovG,IAGlBjD,EAAA/tH,UAAA0wH,SAAR,SAAiB9+G,EAAmBvS,OAC5B6xH,EAASt/G,EAAE3P,MACXkvH,EAAS9xH,EAAE4C,MAKf,cAJI,IAAcmb,GAASwD,SACvBswG,EAASt/G,EAAE3P,MAAM8lD,cACjBopE,EAAS9xH,EAAE4C,MAAM8lD,eAEjBmpE,EAASC,GACD,EACQA,EAATD,EACA,EAEA,GAMf5xH,OAAAgC,eAAIysH,EAAA/tH,UAAA,kBAAe,KAAnB,WACI,OAAIF,KAAK2T,KAAK29G,mCACHtxH,KAAK2T,KAAK29G,mCAAmC5hF,SAE7C1vC,KAAKuxH,kEAIpB/xH,OAAAgC,eAAIysH,EAAA/tH,UAAA,iBAAc,KAAlB,WACI,OAAIF,KAAK2T,KAAK69G,kCACHxxH,KAAK2T,KAAK69G,kCAAkC9hF,SAE5C1vC,KAAKyxH,iEAIpBjyH,OAAAgC,eAAIysH,EAAA/tH,UAAA,kBAAe,KAAnB,WACI,OAAIF,KAAK2T,KAAK+9G,mCACH1xH,KAAK2T,KAAK+9G,mCAAmChiF,SAE7C1vC,KAAK2xH,kEAIpBnyH,OAAAgC,eAAIysH,EAAA/tH,UAAA,iBAAc,KAAlB,WACI,OAAIF,KAAK2T,KAAKi+G,kCACH5xH,KAAK2T,KAAKi+G,kCAAkCliF,SAE5C1vC,KAAK6xH,iEAIpBryH,OAAAgC,eAAIysH,EAAA/tH,UAAA,sBAAmB,KAAvB,WACI,OAAOF,KAAKyuH,SAAS,KAAOzuH,KAAKyuH,SAAS,GAAG3lB,aAAe9oG,KAAKyuH,SAAS,GAAGroC,+CAG1E6nC,EAAA/tH,UAAA4xH,YAAP,WAAA,IAAAtgH,EAAAxR,KACU+xH,EAAa,IAAIl9G,GAAyB8K,GAAeT,GAAIlf,KAAKoY,OAAOrC,OACzEs8E,EAAgBryF,KAAKyuH,SAAS/rG,MAAM,EAAG1iB,KAAKyuH,SAAS9tH,QAAQ8V,OAAO,SAAAtG,GAAM,OAAkB,IAAlBA,EAAG24F,aAGnF,GAFuB9oG,KAAKyuH,SAAS/rG,MAAM,EAAG1iB,KAAKyuH,SAAS9tH,QAAQqU,KAAK,SAAA7E,GAAM,OAAkB,IAAlBA,EAAG24F,aAE9D,CAChB,GAAIzW,EAAc1xF,QAAUstH,EAAoC+D,4BAC5D3/B,EAAcniF,QAAQ,SAAAuxB,OACdrlB,EAAY,KAGRA,EAFc,OAAlBqlB,EAAQt/B,OAAkBs/B,EAAQt/B,QAAU6P,UACxCR,EAAK4G,OAAOiF,WAAaC,GAASyD,QACtBvP,EAAKy7G,gBAAgBxrF,EAAQt/B,MAAM+M,YAEnCsC,EAAKy7G,gBAAgB,UAGzBz7G,EAAKy7G,gBAAgB,SAErC8E,EAAWh9G,kBAAkBvS,KAAK,CAC9B4Z,UAAWA,EACXhL,UAAWI,EAAK4G,OAAOrC,MACvBzE,WAAYE,EAAK4G,OAAOkE,oBACxBI,UAAW+kB,EAAQt/B,cAGxB,KACG8vH,EAAkB5/B,EAAcp9E,UAAU,SAAA3S,GAAK,OAAY,OAAZA,EAAEH,OAAkBG,EAAEH,QAAU6P,YACjFkgH,OAAU,EACS,GAAnBD,IACAC,EAAa7/B,EAAc4/B,GAC3B5/B,EAAct7E,OAAOk7G,EAAiB,IAGtCjyH,KAAKoY,OAAOiF,WAAaC,GAAS1O,KAClCmjH,EAAWh9G,kBAAkBvS,KAAK,CAC9B4Z,UAAW,IAAI+sD,GACf/3D,UAAWpR,KAAKoY,OAAOrC,MACvBzE,WAAYtR,KAAKoY,OAAOkE,oBACxBI,UAAW,IAAI1N,IAAIqjF,EAAcz7E,IAAI,SAAAtX,GACjC,OAAA,IAAIsP,KAAKtP,EAAE6C,MAAMomE,cAAejpE,EAAE6C,MAAMqmE,WAAYlpE,EAAE6C,MAAM4lE,WAAWqB,mBAG/E2oD,EAAWh9G,kBAAkBvS,KAAK,CAC9B4Z,UAAW,IAAI8sD,GACf93D,UAAWpR,KAAKoY,OAAOrC,MACvBzE,WAAYtR,KAAKoY,OAAOkE,oBACxBI,UAAW,IAAI1N,IAAIqjF,EAAcz7E,IAAI,SAAAtU,GAAK,OAAAA,EAAEH,WAIhD+vH,GACAH,EAAWh9G,kBAAkBvS,KAAK,CAC9B4Z,UAAWpc,KAAKitH,gBAAgB,SAChC77G,UAAWpR,KAAKoY,OAAOrC,MACvBzE,WAAYtR,KAAKoY,OAAOkE,oBACxBI,UAAWw1G,EAAW/vH,QAKlCnC,KAAK0nH,gBAAkB,IAAI/nH,MAC3BK,KAAKwzG,iBAAiBgT,eAAexmH,KAAKoY,OAAOrC,MAAOg8G,QAExD/xH,KAAKwzG,iBAAiBkT,YAAY1mH,KAAKoY,OAAOrC,OAGlD/V,KAAKuvH,iBAGFtB,EAAA/tH,UAAAqvH,cAAP,WACQvvH,KAAK2sH,qBACL3sH,KAAK+6B,eAAemE,KAAKl/B,KAAK2sH,oBAC9B3sH,KAAK2sH,mBAAqB,OAI3BsB,EAAA/tH,UAAAunF,UAAP,SAAiBnoD,GACI,WAAbA,EAAUr+B,KAAoC,QAAbq+B,EAAUr+B,KAC3CjB,KAAKuvH,gBAETjwF,EAAU8C,mBAGP6rF,EAAA/tH,UAAAwmH,YAAP,WACI1mH,KAAKwzG,iBAAiBkT,YAAY1mH,KAAKoY,OAAOrC,OAC9C/V,KAAKkvH,sBAGFjB,EAAA/tH,UAAAiyH,qBAAP,SAA4B7yF,GACP,UAAbA,EAAUr+B,KACVjB,KAAK0mH,eAINuH,EAAA/tH,UAAAkyH,qBAAP,eACU9I,EAAWtpH,KAAKoY,OAAOyD,yBAC7B,OAAOytG,GAAYA,EAASv0G,mBAAqBu0G,EAASv0G,kBAAkBpU,UACrE2oH,EAASv0G,kBAAkB,GAA4BqH,WACiB,OAA1EktG,EAASv0G,kBAAkB,GAA4BqH,UAAUxG,OAGlEq4G,EAAA/tH,UAAA+sH,gBAAR,SAAwBzC,GACpB,OAAQxqH,KAAKoY,OAAOiF,UAChB,KAAKC,GAASyD,QACV,OAAOomD,GAA2Bn2D,WAAWoL,UAAUouG,GAC3D,KAAKltG,GAASC,OACV,OAAOsrD,GAA0B73D,WAAWoL,UAAUouG,GAC1D,KAAKltG,GAAS1O,KACV,OAAOw4D,GAAwBp2D,WAAWoL,UAAUouG,GACxD,QACI,OAAO1hD,GAA0B93D,WAAWoL,UAAUouG,KAtjB1CyD,EAAA+D,4BAA8B,sBAPzDviF,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,iCACVuiC,SAAA,gwMAxFA7C,EAAAA,wDAyHCE,EAAAA,YAAWtgC,KAAA,CAAC,gDAGZqmC,EAAAA,UAASrmC,KAAA,CAAC,WAAY,CAAEsmC,KAAM9R,EAAAA,8BAG9B6R,EAAAA,UAASrmC,KAAA,CAAC,UAAW,CAAEsmC,KAAM+R,2BAG7BhS,EAAAA,UAASrmC,KAAA,CAAC,eAAgB,CAAEsmC,KAAM+4E,+BAGlCh5E,EAAAA,UAASrmC,KAAA,CAAC,mBAAoB,CAAEsmC,KAAM62E,gCAGtC92E,EAAAA,UAASrmC,KAAA,CAAC,oBAAqB,CAAEsmC,KAAMu6E,+CAGvCx6E,EAAAA,UAASrmC,KAAA,CAAC,mCAAoC,CAAEsmC,KAAMuQ,EAAAA,uDAGtDxQ,EAAAA,UAASrmC,KAAA,CAAC,kCAAmC,CAAEsmC,KAAMuQ,EAAAA,uDAGrDxQ,EAAAA,UAASrmC,KAAA,CAAC,kCAAmC,CAAEsmC,KAAMuQ,EAAAA,wDAGrDxQ,EAAAA,UAASrmC,KAAA,CAAC,mCAAoC,CAAEsmC,KAAMuQ,EAAAA,iBAggB3D2qE,EAhkBA,GClDAoE,GAAA,WA0FI,SAAAA,EACWlyG,EACAmtF,EACA9uF,EACAof,EACAiyB,EACCyiE,EACAr5B,EAC2B1xD,GAP5BvnC,KAAAmgB,QAAAA,EACAngB,KAAAstG,mBAAAA,EACAttG,KAAAwe,IAAAA,EACAxe,KAAA49B,WAAAA,EACA59B,KAAA6vD,KAAAA,EACC7vD,KAAAsyH,kBAAAA,EACAtyH,KAAAi5F,WAAAA,EAC2Bj5F,KAAAunC,gBAAAA,EAvF/BvnC,KAAA05F,UAAY,IAAI38D,EAAAA,QAmEjB/8B,KAAAuyH,SAAW,eAGXvyH,KAAA29D,UAAY,EAOT39D,KAAAwtH,cAAgB97G,GAAiBd,KA0I/C,OA/MIpR,OAAAgC,eACI6wH,EAAAnyH,UAAA,eAAY,KADhB,eAEUsyH,EAAiB,CACnB,mBACAxyH,KAAKoY,OAAOm6F,eAGVj4E,EAAY,CACdm4F,gBAAiBzyH,KAAKoY,OAAOo1F,YAC7BklB,IAAO1yH,KAAK2yH,UACZzxH,KAAQlB,KAAK4yH,WACbC,uBAAwB7yH,KAAKoY,OAAOiF,WAAaC,GAASC,OAC1Du1G,yBAA0B9yH,KAAKoY,OAAOk6F,SACtCygB,0BAA2B/yH,KAAKoY,OAAO23E,YAAc/vF,KAAK2T,KAAK6/F,iBAAiB4O,mBAChF4Q,uBAAwBhzH,KAAKizH,QAQjC,OALAzzH,OAAO2jG,QAAQ7oE,GAAWpqB,QAAQ,SAACvD,OAAA4B,EAAAlM,EAAAsK,EAAA,GAACumH,EAAA3kH,EAAA,GAAOA,EAAA,IAEnCikH,EAAehwH,KAAK0wH,KAGrBV,EAAengG,KAAK,sCAG/B7yB,OAAAgC,eACI6wH,EAAAnyH,UAAA,SAAM,KADV,WAEI,OAAIF,KAAK2T,KAAKw/G,iBACFnzH,KAAK2T,KAAKy/G,oBAAsB,EAAIpzH,KAAKoY,OAAO3E,OAASzT,KAAK2T,KAAK0/G,iBAExE,sCAGX7zH,OAAAgC,eAAI6wH,EAAAnyH,UAAA,YAAS,KAAb,WACI,OAAOF,KAAKwtH,gBAAkB97G,GAAiBb,qCAGnDrR,OAAAgC,eAAI6wH,EAAAnyH,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKwtH,gBAAkB97G,GAAiBZ,sCAGnDtR,OAAAgC,eAAI6wH,EAAAnyH,UAAA,cAAW,KAAf,WACI,OAAIF,KAAKwtH,gBAAkB97G,GAAiBd,KAGjC5Q,KAAKwtH,gBAAkB97G,GAAiBb,IAAM,eAAiB,iBAEnE,gDAGXrR,OAAAgC,eAAI6wH,EAAAnyH,UAAA,SAAM,KAAV,WACI,OAAOF,KAAKwtH,gBAAkB97G,GAAiBd,sCAGnDpR,OAAAgC,eAAI6wH,EAAAnyH,UAAA,sBAAmB,KAAvB,WACI,OAAOF,KAAKoY,OAAOyD,yBAA2B,mCAAqC,0DASvFrc,OAAAgC,eACI6wH,EAAAnyH,UAAA,WAAQ,KADZ,WAEI,OAAUF,KAAK4kG,OAAM,IAAI5kG,KAAKoY,OAAOrC,uCAgBlCs8G,EAAAnyH,UAAAusC,SAAP,WACIzsC,KAAKszH,yBAGFjB,EAAAnyH,UAAAmwC,UAAP,WACIrwC,KAAKuzH,mBACLvzH,KAAKwe,IAAIC,gBAGb4zG,EAAAnyH,UAAAkkC,YAAA,WACIpkC,KAAK05F,UAAUx3F,MAAK,GACpBlC,KAAK05F,UAAUr1D,WAEXrkC,KAAKwzH,qBACLxzH,KAAKunC,gBAAgBrI,KAAKl/B,KAAKwzH,sBAKhCnB,EAAAnyH,UAAAktC,QADP,SACe5M,GACNxgC,KAAKstG,mBAAmBjB,mBACzB7rE,EAAM4B,kBACFpiC,KAAK2T,KAAK6/F,iBAAiB4O,oBACvBpiH,KAAKoY,OAAO23E,YAAe/vF,KAAKoY,OAAOo1F,aACtCxtG,KAAK2T,KAAK6/F,iBAAiBwU,gBAAgBhoH,KAAKoY,OAAOrC,SACxD/V,KAAK2T,KAAK6/F,iBAAiBuS,eAAiB/lH,KAAKoY,QAE9CpY,KAAKoY,OAAOk6F,UACnBtyG,KAAKyzH,gBAKVpB,EAAAnyH,UAAAwzH,qBAAP,SAA4BlzF,GACxBA,EAAM4B,kBAENpiC,KAAK2zH,wBAGTn0H,OAAAgC,eAAI6wH,EAAAnyH,UAAA,OAAI,KAAR,WACI,OAAOF,KAAKmgB,QAAQxM,sCAGd0+G,EAAAnyH,UAAAqzH,iBAAV,WAAA,IAAA/hH,EAAAxR,KACUkT,EAAOlT,KAAKmgB,QAAQxM,KAAKyH,mBAAmBpG,KAAK,SAAC+O,GAAM,OAAAA,EAAE3S,YAAcI,EAAK4G,OAAOrC,QAC1F/V,KAAKwtH,cAAgBt6G,EAAOA,EAAK7B,IAAMK,GAAiBd,MAGrDyhH,EAAAnyH,UAAA0zH,mBAAP,SAA0BpzF,GAClBxgC,KAAK2T,KAAK6/F,iBAAiB4O,qBAC3B5hF,EAAM4B,kBACNpiC,KAAKyzH,gBAILpB,EAAAnyH,UAAAuzH,YAAR,WAAA,IAAAjiH,EAAAxR,KAGU6zH,GAFe7zH,KAAK2T,KAAKqxG,oBAC3BhlH,KAAK2T,KAAKqxG,oBAAoBhwG,KAAK,SAAC9B,GAAS,OAAAA,EAAK9B,YAAcI,EAAK4G,OAAOrC,QAAS,MAErF/V,KAAKwtH,cAAgB,EAAI97G,GAAiBZ,KAAOY,GAAiBb,IAAMa,GAAiBZ,KACvF9Q,KAAKwtH,cAAgB,EAAI97G,GAAiBZ,KAAOY,GAAiBd,KAAO5Q,KAAKwtH,cAAgB,EACpGxtH,KAAKwtH,cAAgBqG,EACrB7zH,KAAK2T,KAAKzC,KAAK,CAAEE,UAAWpR,KAAKoY,OAAOrC,MAAO1E,IAAKrR,KAAKwtH,cAAel8G,WAAYtR,KAAKoY,OAAOq6F,kBAC5Fl/F,SAAUvT,KAAKoY,OAAOyF,gBAGtBw0G,EAAAnyH,UAAAyzH,qBAAR,WACI,IAAK3zH,KAAKwzH,oBAAqB,KAErBM,EADe9zH,KAAK49B,WAAWC,cACC4hC,cAAc,IAAMz/D,KAAK+zH,qBAE/D/zH,KAAKg0H,2BAA2Bh3F,iBAAiBlF,SAAS92B,OAAS8yH,EACnE9zH,KAAKg0H,2BAA2B3xF,OAASriC,KAAK2T,KAAK0uB,OAEnDriC,KAAKwzH,oBACDxzH,KAAKunC,gBAAgBvM,OAAOizF,GAAqCjuH,KAAKg0H,2BAA4Bh0H,KAAKi5F,YAC3Gj5F,KAAKunC,gBAAgBzI,KAAK9+B,KAAKwzH,oBAAqBxzH,KAAKg0H,8BAIzD3B,EAAAnyH,UAAAozH,sBAAR,WAAA,IAAA9hH,EAAAxR,KACIA,KAAKi0H,4BAA8B,CAC/Bn6F,mBAAoBF,GAAkBlC,OACtCqC,cAAesrC,EAAAA,aAAapmE,EAAQ,CAChCE,OAAQ,CACJP,SAAU,WAGlBo7B,eAAgBqrC,EAAAA,aAAajmE,EAAS,CAClCD,OAAQ,CACJP,SAAU,YAKtBoB,KAAKg0H,2BAA6B,CAC9B72F,qBAAqB,EACrBD,OAAO,EACPF,iBAAkB,IAAI6I,GAAqB7lC,KAAKi0H,6BAChDh3F,eAAgB,IAAImK,IAGxBpnC,KAAKunC,gBAAgBnK,UAAUoF,KAC3B/rB,EAAAA,OAAO,SAACukF,GAAY,OAAAA,EAAQ5uF,KAAOoF,EAAKgiH,sBACxC/wF,EAAAA,UAAUziC,KAAK05F,YAAYh3D,UAAU,SAACpD,GAClC9tB,EAAK0iH,iBAAiB50F,KAG9Bt/B,KAAKunC,gBAAgBhK,SAASiF,KAC1B/rB,EAAAA,OAAO,SAAAukF,GAAW,OAAAA,EAAQ5uF,KAAOoF,EAAKgiH,sBACtC/wF,EAAAA,UAAUziC,KAAK05F,YAAYh3D,UAAU,WACjClxB,EAAK2iH,qBAIT9B,EAAAnyH,UAAAg0H,iBAAR,SAAyB50F,OACftuB,EAAWsuB,EAAUC,aAAqB,SAC5CvuB,GACAA,EAAS8pB,WAAW96B,KAAKoY,OAAQpY,KAAKsyH,kBAAmBtyH,KAAKunC,gBAAiBjI,EAAUlzB,KAIzFimH,EAAAnyH,UAAAi0H,gBAAR,WACIn0H,KAAKwzH,oBAAsB,0BAhOlC/jF,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,kBACVuiC,SAAA,u2BAtBKn6B,UAIA60F,UAnBLv9D,EAAAA,yBAGA5L,EAAAA,kBAIA4D,EAAAA,cAUK4gF,UANL5nB,EAAAA,mBASKvhE,GAAiBv7B,WAAA,CAAA,CAAA2V,KA+GjBiuB,EAAAA,OAAMl4B,KAAA,CAAC6vB,yCArFXlvB,EAAAA,sBAGAA,EAAAA,4BAGA2/B,EAAAA,YAAWtgC,KAAA,CAAC,yBAyBZsgC,EAAAA,YAAWtgC,KAAA,CAAC,qCAiCZsgC,EAAAA,YAAWtgC,KAAA,CAAC,+BAGZsgC,EAAAA,YAAWtgC,KAAA,CAAC,mCAGZsgC,EAAAA,YAAWtgC,KAAA,CAAC,4BAoCZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,cA2G5B4lH,EAlOA,GCVA+B,GAAA,WAyCI,SAAAA,EAAmB51G,EAA+Bg1F,EAA8CpV,GAA7Ep+F,KAAAwe,IAAAA,EAA+Bxe,KAAAwzG,iBAAAA,EAA8CxzG,KAAAo+F,WAAAA,EAjCxFp+F,KAAAq0H,UAAY,qCACZr0H,KAAAs0H,gBAAkB,KAGnBt0H,KAAAu0H,iBAAmB,EA2BnBv0H,KAAAsxC,SAAW,2BAGdtxC,KAAKwzG,iBAAiB6S,oBAsS9B,OAnSI+N,EAAAl0H,UAAAusC,SAAA,WACIzsC,KAAKwzG,iBAAiB2S,uBAAuBxlG,IAAI3gB,KAAKoY,OAAOrC,OAAO,IAGxEq+G,EAAAl0H,UAAAumD,gBAAA,WACIzmD,KAAKumH,wBAGF6N,EAAAl0H,UAAAmwC,UAAP,WACIrwC,KAAKumH,wBAIF6N,EAAAl0H,UAAAs0H,aADP,SACoBl1F,GAEZt/B,KAAKy0H,wBACLz0H,KAAKwzG,iBAAiB7/F,KAAK2wE,WAAW0+B,uBAAuBhjH,KAAKoY,OAAQknB,GAE9EA,EAAU8C,mBAIPgyF,EAAAl0H,UAAAw0H,kBADP,SACyBp1F,GACjBt/B,KAAK20H,yBACL30H,KAAKwzG,iBAAiB7/F,KAAK2wE,WAAWm+B,uBAAuBziH,KAAKoY,OAAQknB,GAE9EA,EAAU8C,mBAMPgyF,EAAAl0H,UAAA00H,cAAP,SAAqBpiH,OACXC,EAAazS,KAAK0nH,gBAAgBl1G,GACxC,SAAUC,IAAcA,EAAW05E,YAMhCioC,EAAAl0H,UAAAqmH,qBAAP,WACIvmH,KAAK0nH,gBAAkB1nH,KAAKwzG,iBAAiBuT,eAAe/mH,KAAKoY,OAAOrC,OACxE/V,KAAK60H,wBAGTr1H,OAAAgC,eAAI4yH,EAAAl0H,UAAA,WAAQ,KAAZ,WACI,IAAKF,KAAKoY,OAAO23E,WAEb,OADA/vF,KAAKs0H,gBAAkB,KAI3B,GAAIt0H,KAAKoY,OAAO08G,mBAEZ,OADA90H,KAAKs0H,gBAAkBt0H,KAAKoY,OAAO08G,mBAC5B90H,KAAKoY,OAAO08G,uBAGjBzL,EAAiBrpH,KAAKoY,OAAOyD,yBACnC,OAAKwtG,GAA8D,IAA5CA,EAAet0G,kBAAkBpU,OAKpDX,KAAKwzG,iBAAiBwU,gBAAgBhoH,KAAKoY,OAAOrC,QAClD/V,KAAKs0H,gBAAkBt0H,KAAK+0H,cACrB/0H,KAAK+0H,gBAGhB/0H,KAAKs0H,gBAAkBt0H,KAAKg1H,cACrBh1H,KAAKg1H,gBAVRh1H,KAAKs0H,gBAAkBt0H,KAAKi1H,YACrBj1H,KAAKi1H,8CAgBpBz1H,OAAAgC,eAAI4yH,EAAAl0H,UAAA,UAAO,KAAX,WACI,MAAO,CACHkY,OAAQpY,KAAKoY,yCAOdg8G,EAAAl0H,UAAAg1H,cAAP,SAAqBziH,GACbA,EACAzS,KAAK0nH,gBAAgBx3G,QAAQ,SAACqT,GAC1BA,EAAKulF,WAAcvlF,EAAK9Q,aAAeA,IAEN,EAA9BzS,KAAK0nH,gBAAgB/mH,SAC5BX,KAAK0nH,gBAAgBx3G,QAAQ,SAACqT,GAC1BA,EAAKulF,YAAa,IAEtB9oG,KAAK0nH,gBAAgB,GAAG5e,YAAa,OAGnCt2F,EAAQxS,KAAKwzG,iBAAiB8O,0BAA0BxyG,QAAQ9P,KAAKoY,QAC9D,GAAT5F,IAAexS,KAAKm1H,qBAAqB3iH,GACzCxS,KAAKwzG,iBAAiBgP,mBAAmBxiH,KAAKwzG,iBAAiB8O,0BAA0B9vG,IAAQ,GACjF,GAATA,IAAexS,KAAKo1H,oBAAoB5iH,IAC/CxS,KAAKwzG,iBAAiBgP,mBAAmBxiH,KAAKwzG,iBAAiB8O,0BAA0B9vG,IAAQ,GAGrGxS,KAAKwzG,iBAAiBuS,eAAiB/lH,KAAKoY,OAC5CpY,KAAKwzG,iBAAiB4O,oBAAqB,EAC3CpiH,KAAKwzG,iBAAiBwS,mBAAqBvzG,GAMxC2hH,EAAAl0H,UAAAm1H,cAAP,SAAqB/1F,EAA+B/b,OAC1CkkG,EAAgBznH,KAAK0nH,gBAAgB53G,QAAQyT,GACnDvjB,KAAKwnH,iBAAiBC,GACtBznH,KAAKyoH,aAMF2L,EAAAl0H,UAAAg6G,eAAP,WACIl6G,KAAKwzG,iBAAiBkT,YAAY1mH,KAAKoY,OAAOrC,OAC9C/V,KAAKwe,IAAIyhB,iBAMNm0F,EAAAl0H,UAAAsoF,cAAP,SAAqBlpD,EAA0B7sB,GAC1B,UAAb6sB,EAAUr+B,MACVq+B,EAAUuI,iBACV7nC,KAAKk1H,cAAcziH,KAOpB2hH,EAAAl0H,UAAAo1H,wBAAP,iBACI,OAAA3oH,EAAA,IACK3M,KAAKq0H,YAAar0H,KAAKu1H,mBACxB5oH,EAAI3M,KAAKq0H,UAAS,YAAar0H,KAAKu1H,sBAOrCnB,EAAAl0H,UAAAuoH,UAAP,SAAiBD,QAAA,IAAAA,IAAAA,GAAA,GACTxoH,KAAKs0H,kBAAoBt0H,KAAKg1H,cAC1BxM,EACAxoH,KAAKw1H,oBAELx1H,KAAKy1H,eAEFz1H,KAAKs0H,kBAAoBt0H,KAAKi1H,YACrCj1H,KAAK01H,UAAU93F,WAAWC,cAAc4hC,cAAc,mBAAmB1uB,QAClE/wC,KAAKs0H,kBAAoBt0H,KAAK+0H,eACrC/0H,KAAK21H,YAAY/3F,WAAWC,cAAc4hC,cAAc,mBAAmB1uB,SAI3EqjF,EAAAl0H,UAAAsnH,iBAAR,SAAyBC,GACC,IAAlBA,GAAuD,IAAhCznH,KAAK0nH,gBAAgB/mH,QAKhDX,KAAKwzG,iBAAiBgU,iBAAiBxnH,KAAKoY,OAAOrC,MAAO0xG,GAE1DznH,KAAK60H,uBACL70H,KAAKwzG,iBAAiBgT,eAAexmH,KAAKoY,OAAOrC,QAP7C/V,KAAKk6G,kBAULka,EAAAl0H,UAAAq1H,iBAAR,WACI,OAAOv1H,KAAKwzG,iBAAiB2S,uBAAuB55G,IAAIvM,KAAKoY,OAAOrC,QAGhEq+G,EAAAl0H,UAAA20H,qBAAR,WAQI,GAPA70H,KAAK0nH,gBAAgBx3G,QAAQ,SAAC0lH,GAAO,OAAAA,EAAGzpC,WAAY,IAEhDnsF,KAAK61H,UACL71H,KAAKwzG,iBAAiB2S,uBAAuBxlG,IAAI3gB,KAAKoY,OAAOrC,OAAO,GAExE/V,KAAKwe,IAAIyhB,gBAELjgC,KAAK81H,WAA2C,EAA9B91H,KAAK0nH,gBAAgB/mH,OAAY,CAQnD,QAPMo1H,EAAY/1H,KAAK81H,UAAUr0F,QAAQ5D,cAAc8gF,YACnDqX,EAAY,EACVC,EAAoBj2H,KAAK81H,UAAUr0F,QAAQ5D,cAAcztB,SAC3D8lH,EAAoB,EAClBC,EAAgBn2H,KAAK61H,SAASh4F,cAAc8gF,YAC9CjpE,SAASxwB,SAASif,YAAYwtB,iBAAiB3xD,KAAK61H,SAASh4F,eAAe,eAAgB,IAEvFrrB,EAAQ,EAAGA,EAAQyjH,EAAkBt1H,OAAS,EAAG6R,IAAS,CAC/D,KAAIwjH,EAAYC,EAAkBzjH,GAAOmsG,YAAcoX,GAQhD,CACCvjH,EAAQ,GAAM,GAAiCujH,EAA5BC,EAAYG,EAC/BD,IAC2B,EAApBA,GAAyBF,EAAYC,EAAkBzjH,EAAQ,GAAGmsG,YAAcwX,EAAgBJ,GACvGG,IAEJl2H,KAAKu0H,iBAAmBv0H,KAAK0nH,gBAAgB/mH,OAASu1H,EACtDl2H,KAAKwzG,iBAAiB2S,uBAAuBxlG,IAAI3gB,KAAKoY,OAAOrC,OAAO,GACpE,MAfAigH,GAAaC,EAAkBzjH,GAAOmsG,YAClCnsG,EAAQ,GAAM,EACd0jH,KAEAF,GAAatgF,SAASxwB,SAASif,YAAYwtB,iBAAiBskE,EAAkBzjH,IAAQ,eAAgB,IACtGwjH,GAAatgF,SAASxwB,SAASif,YAAYwtB,iBAAiBskE,EAAkBzjH,IAAQ,gBAAiB,KAcnH,IAAK,IAAIhS,EAAI01H,EAAmB11H,EAAIR,KAAK0nH,gBAAgB/mH,OAAQH,IAC7DR,KAAK0nH,gBAAgBlnH,GAAG2rF,WAAY,EAExCnsF,KAAKwe,IAAIyhB,kBAITm0F,EAAAl0H,UAAAy0H,sBAAR,WACI,QAAS30H,KAAK81H,WAA+C,EAAlC91H,KAAK81H,UAAUjsC,UAAUlpF,QAChDX,KAAK81H,UAAUjsC,UAAUngD,MAAM9L,WAAWC,cAAc4hC,cAAc,qBAAuBv6C,SAASg9D,gBAGtGkyC,EAAAl0H,UAAAu0H,qBAAR,WACI,GAAIz0H,KAAK81H,UAAW,CAChB,GAAI91H,KAAKu1H,oBAAsBv1H,KAAK81H,UAAUjsC,UAAU22B,KAAK5iF,WAAWC,cAAc4hC,cAAc,uBAChGv6C,SAASg9D,cACT,OAAO,EACJ,IAAKliF,KAAKu1H,oBAAsBv1H,KAAK61H,SAASh4F,gBAAkB3Y,SAASg9D,cAC5E,OAAO,EAGf,OAAO,GAGHkyC,EAAAl0H,UAAAs1H,kBAAR,WAC0C,EAAlCx1H,KAAK81H,UAAUjsC,UAAUlpF,OACzBX,KAAK81H,UAAUjsC,UAAUngD,MAAM9L,WAAWC,cAAc4hC,cAAc,mBAAmB1uB,QAEzF/wC,KAAK61H,SAASh4F,cAAckT,SAI5BqjF,EAAAl0H,UAAAu1H,aAAR,WACQz1H,KAAKwzG,iBAAiB0S,gBACjBlmH,KAAKu1H,oBAA0D,IAApCv1H,KAAK81H,UAAUjsC,UAAUlpF,OAGrDX,KAAK81H,UAAUjsC,UAAUngD,MAAM9L,WAAWC,cAAc4hC,cAAc,mBAAmB1uB,QAFzF/wC,KAAK61H,SAASh4F,cAAckT,QAK3B/wC,KAAKu1H,mBAGNv1H,KAAK81H,UAAUjsC,UAAU22B,KAAK5iF,WAAWC,cAAc4hC,cAAc,qBAAqB1uB,QAF1F/wC,KAAK61H,SAASh4F,cAAckT,SAOhCqjF,EAAAl0H,UAAAi1H,qBAAR,SAA6B78G,GACzB,GAAItY,KAAKwzG,iBAAiB4iB,oBACtB,OAAO,EAGX,QADIvN,EAAqB,EAChBr2G,EAAQ,EAAGA,EAAQxS,KAAKwzG,iBAAiB/K,gBAAgB9nG,SAC9DkoH,GAAsBnzE,SAAS11C,KAAKwzG,iBAAiB/K,gBAAgBj2F,GAAO9C,MAAO,IAC/E1P,KAAKwzG,iBAAiB/K,gBAAgBj2F,KAAWxS,KAAKwzG,iBAAiB8O,0BAA0BhqG,IAF/B9F,KAO1E,OAAOq2G,GADO7oH,KAAKwzG,iBAAiB2L,sBAAwBn/G,KAAKwzG,iBAAiB4L,4BAI9EgV,EAAAl0H,UAAAk1H,oBAAR,SAA4B98G,GACxB,GAAItY,KAAKwzG,iBAAiB4iB,oBACtB,OAAO,EAGX,QADItN,EAAoB,EACft2G,EAAQ,EAAGA,EAAQxS,KAAKwzG,iBAAiB/K,gBAAgB9nG,QAC1DX,KAAKwzG,iBAAiB/K,gBAAgBj2F,KAAWxS,KAAKwzG,iBAAiB8O,0BAA0BhqG,GAD/B9F,IAItEs2G,GAAqBpzE,SAAS11C,KAAKwzG,iBAAiB/K,gBAAgBj2F,GAAO9C,MAAO,IAEtF,OAAOo5G,GAAqB9oH,KAAKwzG,iBAAiB4L,gDA9UzD3vE,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,0BACVuiC,SAAA,ywEA5BA7C,EAAAA,yBAgBK44E,UAEAhH,sCAoBJrxG,EAAAA,2BAGA0lC,EAAAA,UAASrmC,KAAA,CAAC,cAAe,CAAEsmC,KAAMuQ,EAAAA,qCAGjCxQ,EAAAA,UAASrmC,KAAA,CAAC,gBAAiB,CAAEsmC,KAAMuQ,EAAAA,qCAGnCxQ,EAAAA,UAASrmC,KAAA,CAAC,gBAAiB,CAAEsmC,KAAMuQ,EAAAA,iCAGnCxQ,EAAAA,UAASrmC,KAAA,CAAC,YAAa,CAAEsmC,KAAM02C,uBAG/B32C,EAAAA,UAASrmC,KAAA,CAAC,WAAY,CAAEsmC,KAAM9R,EAAAA,gCAG9B6R,EAAAA,UAASrmC,KAAA,CAAC,YAAa,CAAEsmC,KAAMk0C,0BAG/Bn0C,EAAAA,UAASrmC,KAAA,CAAC,cAAe,CAAEsmC,KAAMk0C,uBAGjCl6C,EAAAA,YAAWtgC,KAAA,CAAC,wDAmBZY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,sCAS7BY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,cA8QxC2nH,EAhVA,GCGAiC,GAAA,WAiMI,SAAAA,EAAoB73G,EACD2B,EACCshB,EACD6rE,EACAkG,GAJCxzG,KAAAwe,IAAAA,EACDxe,KAAAmgB,QAAAA,EACCngB,KAAAyhC,QAAAA,EACDzhC,KAAAstG,mBAAAA,EACAttG,KAAAwzG,iBAAAA,EACvB,OA9LIh0G,OAAAgC,eACI60H,EAAAn2H,UAAA,cAAW,KADf,WAEI,OAAOF,KAAKoY,OAAO2sF,6CAGvBvlG,OAAAgC,eACI60H,EAAAn2H,UAAA,iBAAc,KADlB,WAEI,OAAOF,KAAKoY,OAAO4sF,gDAIvBxlG,OAAAgC,eACI60H,EAAAn2H,UAAA,SAAM,KADV,WAEI,OAAOF,KAAKoY,OAAOiqF,wCAGvB7iG,OAAAgC,eACI60H,EAAAn2H,UAAA,SAAM,KADV,WAEI,OAAOF,KAAKoY,OAAO6sF,wCAGvBzlG,OAAAgC,eAEI60H,EAAAn2H,UAAA,WAAQ,KAFZ,WAGI,OAAOF,KAAKoY,OAAOgqF,0CAGvB5iG,OAAAgC,eAEI60H,EAAAn2H,UAAA,WAAQ,KAFZ,WAGI,OAAOF,KAAKoY,OAAO8sF,0CAwCvB1lG,OAAAgC,eAEI60H,EAAAn2H,UAAA,QAAK,KAFT,WAGI,OAAOF,KAAK2T,KAAK2iH,oBAAoBt2H,KAAKoY,yCAO9C5Y,OAAAgC,eACI60H,EAAAn2H,UAAA,eAAY,KADhB,eAEUsyH,EAAiB,CACnB,uBACAxyH,KAAKoY,OAAOo6F,oBAGVl4E,EAAY,CACdi8F,uBAAwBv2H,KAAK62G,SAC7B2f,4BAA6Bx2H,KAAKw4G,aAClCie,4BAA6Bz2H,KAAK02H,gBAClCC,0BAA2B32H,KAAK42H,YAQpC,OALAp3H,OAAO2jG,QAAQ7oE,GAAWpqB,QAAQ,SAACvD,OAAA4B,EAAAlM,EAAAsK,EAAA,GAACk9D,EAAAt7D,EAAA,GAAWA,EAAA,IAEvCikH,EAAehwH,KAAKqnE,KAGrB2oD,EAAengG,KAAK,sCAM/B7yB,OAAAgC,eACI60H,EAAAn2H,UAAA,SAAM,KADV,WAEI,OAAKF,KAAKoY,OAAO6P,OAxHT,KA2HSjoB,KAAK2T,KAAK60F,cAAc14F,QAAQ9P,KAAKoY,QAF3C,sCASf5Y,OAAAgC,eAAI60H,EAAAn2H,UAAA,OAAI,KAAR,WACI,OAAOF,KAAKmgB,QAAQxM,sCAOxBnU,OAAAgC,eAAI60H,EAAAn2H,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKwzG,iBAAiBuS,iBAAmB/lH,KAAKoY,wCAOzD5Y,OAAAgC,eAAI60H,EAAAn2H,UAAA,eAAY,KAAhB,WACI,OAAQF,KAAK2T,KAAK61F,kBAAmBxpG,KAAKoY,OAAOogG,8CAGrDh5G,OAAAgC,eACI60H,EAAAn2H,UAAA,oBAAiB,KADrB,WAEI,OAAOF,KAAK2T,KAAK61F,kBAAoBxpG,KAAKoY,OAAOhI,WAAab,KAAS,OAAS,oCAOpF/P,OAAAgC,eAAI60H,EAAAn2H,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAKoY,OAAO6P,wCAOvBzoB,OAAAgC,eAAI60H,EAAAn2H,UAAA,kBAAe,KAAnB,WACI,OAAOF,KAAK2T,KAAKq8F,gBAAmBhwG,KAAKoY,wCAM7C5Y,OAAAgC,eAAI60H,EAAAn2H,UAAA,2BAAwB,KAA5B,WACI,OAAOF,KAAKoY,OAAOw8F,YAAYpqF,KAAK,SAAAmW,GAAS,OAAAA,EAAM63E,gDAMvDh5G,OAAAgC,eAAI60H,EAAAn2H,UAAA,SAAM,KAAV,WACI,OAAOF,KAAKyhC,QAAQ5D,cAAcluB,wBAAwB/D,wCAOvDyqH,EAAAn2H,UAAAg/D,YADP,SACmB1+B,GAEfA,EAAMqH,kBAGHwuF,EAAAn2H,UAAAmwC,UAAP,WACIrwC,KAAKwe,IAAIC,oCA9LhBgxB,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,wBACVuiC,SAAA,wrGAvBA7C,EAAAA,yBAOKt3B,UALL0rB,EAAAA,kBAOKmpE,UAHAqb,2CAqBJ14E,EAAAA,YAAWtgC,KAAA,CAAC,mDAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,8CAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,sCAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,2CAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,uBAAoB,CAAAiK,KAChCq2B,EAAAA,YAAWtgC,KAAA,CAAC,0CAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,0BAAuB,CAAAiK,KACnCq2B,EAAAA,YAAWtgC,KAAA,CAAC,2CAUZW,EAAAA,sBAOAA,EAAAA,0BAMA0lC,EAAAA,UAASrmC,KAAA,CAAC4lH,wBAMVv/E,EAAAA,UAASrmC,KAAA,CAAC2nH,sBAMVriD,EAAAA,aAAYtlE,KAAA,CAACq6C,EAAAA,WAAW,WAAM,OAAAuvE,IAA8B,CAAEtjF,KAAMsjF,mBAOpEtpF,EAAAA,YAAWtgC,KAAA,CAAC,oBAAiB,CAAAiK,KAC7Bq2B,EAAAA,YAAWtgC,KAAA,CAAC,0CASZsgC,EAAAA,YAAWtgC,KAAA,CAAC,yBAyBZsgC,EAAAA,YAAWtgC,KAAA,CAAC,4CAgCZsgC,EAAAA,YAAWtgC,KAAA,CAAC,sCAsCZY,EAAAA,aAAYZ,KAAA,CAAC,YAAa,CAAC,cAehC4pH,EAtMA,GCnBaQ,GAAyB,CAClCC,eAAgB7oH,GCkEuC,CACvD8oH,6BAA8B,iEAC9BC,mCAAoC,oBACpCC,2BAA4B,oBAC5BC,gBAAiB,SACjBC,0BAA2B,QAC3BC,0BAA2B,QAC3BC,gCAAiC,mBACjCC,wCAAyC,MACzCC,qCAAsC,eACtCnP,6BAA8B,MAC9BC,4BAA6B,KAC7BmP,wBAAyB,iBACzBC,yBAA0B,WAC1BC,+BAAgC,mBAChCC,2BAA4B,cAC5BC,yBAA0B,YAC1BC,uBAAwB,SACxBC,6BAA8B,iBAC9BC,sBAAuB,QACvBC,yBAA0B,YAC1BC,qBAAsB,OACtBC,wBAAyB,WACzBC,uBAAwB,SACxBC,sBAAuB,QACvBC,sBAAuB,QACvBC,0BAA2B,YAC3BC,0BAA2B,aAC3BC,0BAA2B,aAC3BC,0BAA2B,aAC3BC,yBAA0B,YAC1BC,yBAA0B,YAC1BC,yBAA0B,YAC1BC,4BAA6B,eAC7BC,yBAA0B,YAC1BC,qCAAsC,2BACtCC,kCAAmC,wBACnCC,qBAAsB,OACtBC,sBAAuB,QACvBC,oBAAqB,MACrBC,sCAAuC,gBACvCC,uBAAwB,QACxBC,qBAAsB,MACtBC,qBAAsB,MACtBC,qBAAsB,MACtBC,yBAA0B,MAC1BC,0BAA2B,WAC3BC,wBAAyB,SACzBC,kCAAmC,YACnCC,wCAAyC,OACzCC,mCAAoC,aACpCC,yCAA0C,QAC1CC,oCAAqC,OACrCC,kCAAmC,YACnCC,wCAAyC,MACzCC,mCAAoC,aACpCC,yCAA0C,OAC1CC,qCAAsC,OACtCC,iCAAkC,aAClCC,mCAAoC,eACpCC,oCAAqC,iCACrCC,sBAAuB,SACvBC,qBAAsB,QACtBC,kCAAmC,SACnC1J,0BAA2B,aAC3BE,sBAAuB,WACvByJ,oBAAqB,cACrBC,mBAAoB,aACpBC,qBAAsB,eACtB9L,2BAA4B,cAC5BF,6BAA8B,gBAC9BC,2BAA4B,cAC5BF,8BAA+B,iBAC/BkM,6BAA8B,qBD1I9BC,qBAAsB/sH,GEN6C,CACnEgtH,mBAAoB,KACpBC,uBAAwB,YFO5B,SAASC,GAAsBC,EAAkCC,eAC7D,IAAkB,IAAA9sH,EAAAC,EAAAhP,OAAOiP,KAAK4sH,IAAW3sH,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAAtC,IAAMjB,EAAGyN,EAAAvM,MACNlB,KAAOm6H,IACPA,EAAen6H,GAAOo6H,EAAWp6H,0GGX7C,IAAAq6H,GAAA,WAAA,SAAAA,IAEct7H,KAAAu7H,gBAAmD,IAAIxsH,IAE1D/O,KAAAw7H,cAAgB,qBAChBx7H,KAAAy7H,cAAgB,EAChBz7H,KAAA07H,mBAAqB,EACrB17H,KAAAglH,oBAAsB,GACtBhlH,KAAA27H,kBAAoB,EACpB37H,KAAA47H,iBAAkB,EAyN7B,OAvNWN,EAAAp7H,UAAAkzG,qBAAP,WACIpzG,KAAKuzG,qBACLvzG,KAAK2T,KAAKkoH,sBACV77H,KAAK2T,KAAK6K,IAAIyhB,iBAGXq7F,EAAAp7H,UAAAqZ,kBAAP,SAAyB9M,GACrB,GAAKzM,KAAKu7H,gBAAgBnhG,KAA1B,CACA,IAAK3tB,EAKD,OAJAzM,KAAKu7H,gBAAgBjyF,aACjBtpC,KAAK2T,MAAQ3T,KAAK2T,KAAK4qG,sBACvBv+G,KAAK27H,qBAIb,GAAIlvH,EAAK0E,KAAM,KACP0F,EAAQpK,EAAKoK,MACZpK,EAAKoK,QACNA,EAAQ7W,KAAK2T,KAAK4C,WAAa9J,EAAK0E,KAAKnR,KAAK2T,KAAK4C,YAAc9J,EAAK0E,MAE1EnR,KAAK8Z,gBAAgBjD,GAEzB,GAAIpK,EAAKoK,QAAU7E,WAA4B,OAAfvF,EAAKoK,MAAgB,KAC3Cyb,EAAa7lB,EAAK8zF,OAASvgG,KAAK2T,KAAKkC,WAAWb,KAAK,SAAAc,GAAO,OAAAA,EAAItD,QAAU/F,EAAK8zF,OAAOM,WAAU9qF,MAAQ/D,UACxG8pH,EAAkB97H,KAAK2T,KAAKqxG,sBACyD,IAAnFhlH,KAAK2T,KAAKqxG,oBAAoBpuG,IAAI,SAAA1D,GAAQ,OAAAA,EAAK9B,YAAWtB,QAAQwiB,GAC1E,GAAIA,GAAcwpG,EAEd,YADA97H,KAAK8Z,gBAAgBrN,EAAKoK,OAG9B7W,KAAK8Z,gBAAgBrN,EAAKoK,MAAOyb,MAIlCgpG,EAAAp7H,UAAA4Z,gBAAP,SAAuBjD,EAAOyb,GAA9B,IAAA9gB,EAAAxR,KACI,GAAkC,IAA9BA,KAAKu7H,gBAAgBnhG,OACzBp6B,KAAK+7H,mBAAmB/7H,KAAKw7H,cAAelpG,GACV,IAA9BtyB,KAAKu7H,gBAAgBnhG,OAAcp6B,KAAKu7H,gBAAgB1sF,IAAI7uC,KAAKw7H,gBACrE,GAAIx7H,KAAKg8H,WAAY,CACjB,GAAIh8H,KAAK2T,KAAKuC,aAAaC,SAAWnW,KAAK47H,gBAIvC,OAHA57H,KAAK47H,iBAAkB,OAEvB57H,KAAKu7H,gBAAgBjyF,QAGzBtpC,KAAKi8H,2BAA2BplH,EAAOyb,QACpC,GAAItyB,KAAKk8H,oBACZ,GAAIl8H,KAAK2T,KAAKuC,aAAaC,SAAWnW,KAAK47H,gBAGvC,OAFA57H,KAAK47H,iBAAkB,OACvB57H,KAAKu7H,gBAAgBjyF,YAGtB,CACetpC,KAAKm8H,aAAatlH,EAAO7W,KAAK2T,KAAKqxG,qBAC3C90G,QAAQ,SAAA9D,GACfoF,EAAKuqH,mBAAmB3vH,EAAIkmB,OAKhCgpG,EAAAp7H,UAAAi0G,8BAAP,SAAqC7hF,GACjCtyB,KAAKu7H,gBAAgBrrH,QAAQ,SAACksH,GACtBA,EAAM7vH,IAAI+lB,IACV8pG,EAAMlxF,UAAO5Y,KAGjBtyB,KAAK2T,KAAK4qG,sBAAyBv+G,KAAK27H,qBAGzCL,EAAAp7H,UAAAm8H,qBAAP,WACI,GAAIr8H,KAAKy7H,cACL,OAAOz7H,KAAKy7H,cAEhB,IAAKz7H,KAAK2T,KAAKxC,KAAO,OAAOnR,KAAKy7H,cAAgB,MAC9Ca,EAAmB,EAWvB,OAVAt8H,KAAK2T,KAAKkC,WAAWY,OAAO,SAACX,GAAQ,OAAAA,EAAIymH,aAAezmH,EAAI2R,SAAQvX,QAAQ,SAACkI,OACnEokH,EAA0BpkH,EAAOurC,UAAUkmD,QAAQ,IAAIlpG,OACzD67H,GACIF,EAAmBE,IACnBF,EAAmBE,KAI/Bx8H,KAAK07H,mBAAqBY,EAC1Bt8H,KAAKy7H,cAAiBa,EAAmBt8H,KAAK2T,KAAK8oH,qBAC5Cz8H,KAAKy7H,eAGTH,EAAAp7H,UAAAw8H,mBAAP,SAA0B7lH,EAAO1F,OACzBwrH,EAAe38H,KAAKu7H,gBAAgBhvH,IAAIsK,GAK5C,OAJK8lH,IACDA,EAAe,IAAI5tH,IACnB/O,KAAKu7H,gBAAgB56G,IAAI9J,EAAO8lH,IAE/B38H,KAAK6Z,sBAAyB1I,GACnCnR,KAAK2T,KAAKkC,WAAWY,OAAO,SAAAX,GAAO,OAAAA,EAAIymH,aAAYrsH,QAAQ,SAACkI,GACxD,IAAKukH,EAAapwH,IAAI6L,EAAOrC,OAAQ,KAC3B6mH,EAAezrH,EAAKyF,IAAI,SAAAa,GAAU,OAAAA,EAAOW,EAAOrC,SACtD4mH,EAAah8G,IAAIvI,EAAOrC,MACpBqC,EAAOurC,UAAUkmD,QAAQ+yB,OAG9BD,GAGJrB,EAAAp7H,UAAAqzG,mBAAP,WACIvzG,KAAKy7H,cAAgB,EACpBz7H,KAAS,KAASo0G,sBACfp0G,KAAK2T,KAAK4qG,sBACVv+G,KAAK27H,qBAINL,EAAAp7H,UAAA28H,mBAAP,SAA0BC,GACtB,GAAkC,IAA9B98H,KAAKu7H,gBAAgBnhG,MAAep6B,KAAK6Z,qBAC7C,GAAwC,IAApC7Z,KAAKglH,oBAAoBrkH,OAA7B,CAIA,GAA4B,IAAxBm8H,EAAan8H,OAGb,OAFAX,KAAKglH,oBAAsB,QAC3BhlH,KAAKuZ,oBAGTvZ,KAAK+8H,2BAA2B/8H,KAAKglH,oBAAqB8X,GAC1D98H,KAAKglH,oBAAsB8X,EAAazqH,YAAYuE,IAAI,SAAAa,GAAU,OAAAA,EAAOrG,iBATrEpR,KAAKglH,oBAAsB8X,EAAazqH,YAAYuE,IAAI,SAAAa,GAAU,OAAAA,EAAOrG,aAYjF5R,OAAAgC,eAAW85H,EAAAp7H,UAAA,uBAAoB,KAA/B,WAEI,OAAkC,EADRF,KAAK2T,KAAKkC,WAAWY,OAAO,SAAAX,GAAO,OAAAA,EAAIymH,aAAezmH,EAAI2R,SAC3D9mB,wCAGrB26H,EAAAp7H,UAAA67H,mBAAR,SAA2B3vH,EAAIkmB,GAC3B,GAAItyB,KAAKu7H,gBAAgBhvH,IAAIH,GAAK,KACxB4wH,EAAmB1qG,GAActyB,KAAK2T,KAAKkI,2BACmE,IAA5G7b,KAAK2T,KAAKkI,yBAAyB9G,kBAAkB6B,IAAI,SAAC1D,GAAS,OAAAA,EAAK9B,YAAWtB,QAAQwiB,GAC/FA,GAActyB,KAAKu7H,gBAAgBhvH,IAAIH,GAAIG,IAAI+lB,KAAgB0qG,EAC/Dh9H,KAAKu7H,gBAAgBhvH,IAAIH,GAAI8+B,UAAO5Y,GAEpCtyB,KAAKu7H,gBAAgBrwF,UAAO9+B,GAE5BA,IAAOpM,KAAKw7H,eAAiBx7H,KAAK2T,KAAK4qG,sBACvCv+G,KAAK27H,sBAKTL,EAAAp7H,UAAAi8H,aAAR,SAAqBtlH,EAAOmuG,GAA5B,IAAAxzG,EAAAxR,KACI,GAAmC,IAA/BglH,EAAoBrkH,OAAgB,MAAO,OACzCs8H,EAAa,GACf9rH,EAAOnR,KAAK2T,KAAKxC,KACjBnR,KAAK2T,KAAKuC,aAAaC,UACvBhF,EAAOiF,GAASC,kBACZxI,GAAW7N,KAAK2T,KAAKxC,MACrBnR,KAAK2T,KAAKuC,aAAaI,sBAAqB,GAC5CtW,KAAK2T,KAAK4C,iBAGZuB,EAAU9X,KAAK2T,KAAK4C,WAAapF,EAAK6D,KAAK,SAAA8B,GAAO,OAAAA,EAAItF,EAAKmC,KAAK4C,cAAgBM,IAASA,EAC3FzK,EAAK,KAMT,OALA44G,EAAoB90G,QAAQ,SAAAgD,GACxB9G,GAAM,IAAI8G,EAAK9B,UAAS,OAAO0G,EAAQ5E,EAAK9B,WAAU,IAClD6rH,EAAWz6H,KAAK4J,EAAGzJ,OAAO,OAC1ByJ,GAAM,OAEP6wH,GAGH3B,EAAAp7H,UAAA+7H,2BAAR,SAAmCplH,EAAOyb,OAClCza,EAAM7X,KAAK2T,KAAKI,QAAQxH,IAAIsK,GAChC,GAAKgB,EAEL,IADAA,EAAMA,EAAIzH,SAAWyH,EAAMA,EAAInE,OACxBmE,GACHhB,EAAQgB,EAAIhB,MACZ7W,KAAK+7H,mBAAmBllH,EAAOyb,GAC/Bza,EAAMA,EAAInE,QAKV4nH,EAAAp7H,UAAAg9H,wBAAR,SAAgCrmH,EAAOyb,KAG/BgpG,EAAAp7H,UAAA68H,2BAAR,SAAmCt3C,EAASq3C,GAA5C,IAAAtrH,EAAAxR,KACUm9H,EAAiBL,EAAazqH,YAAYuE,IAAI,SAAAa,GAAU,OAAAA,EAAOrG,YAC/DgsH,EAAcN,EAAaO,iBACjC,GAAI53C,EAAQ9kF,QAAUw8H,EAAex8H,OAAQ,KACnC28H,EAAUH,EAAez6G,MAAM,EAAG+iE,EAAQ9kF,QAAQuO,WACpDu2E,EAAQv2E,aAAeouH,GACvBt9H,KAAKuZ,wBAEN,CAEH,GADiBksE,EAAQ/iE,MAAM,EAAGy6G,EAAex8H,QAAQuO,aACxCiuH,EAAejuH,WAE5B,YADAlP,KAAKuZ,oBAGT6jH,EAAYxmH,IAAI,SAAAd,GAAO,OAAAA,EAAIC,QAAO7F,QAAQ,SAAAqtH,GACtC/rH,EAAK+pH,gBAAgBrrH,QAAQ,SAACksH,EAAOhwH,IACL,IAAzBA,EAAG0D,QAAQytH,IACX/rH,EAAK+pH,gBAAgBrwF,UAAO9+B,SAM/C5M,OAAAgC,eAAY85H,EAAAp7H,UAAA,aAAU,KAAtB,WACI,MAAyD,kBAAlDF,KAAK2T,KAAKkqB,cAAcksB,QAAQ73C,+CAG3C1S,OAAAgC,eAAY85H,EAAAp7H,UAAA,qBAAkB,KAA9B,WACI,MAAyD,0BAAlDF,KAAK2T,KAAKkqB,cAAcksB,QAAQ73C,mEA/N9C8M,EAAAA,aAkODs8G,EAlOA,GCNAkC,GAAA,WA8BI,SAAAA,EAAoB/7F,EAA6BqiE,GAA7B9jG,KAAAyhC,QAAAA,EAA6BzhC,KAAA8jG,iBAAAA,EAR1C9jG,KAAAy9H,qBAAuB,EAGvBz9H,KAAAu8H,YAAa,EAkBbv8H,KAAA29D,SAAW,EAwHtB,OA9HIn+D,OAAAgC,eACIg8H,EAAAt9H,UAAA,qBAAkB,KADtB,WAEI,OAAOF,KAAKoY,OAAOwP,8CAMvBpoB,OAAAgC,eACWg8H,EAAAt9H,UAAA,aAAU,KADrB,WAEI,MAAO,WAAWF,KAAKoY,OAAOrC,uCAO3BynH,EAAAt9H,UAAAkpD,QADP,WAEIppD,KAAKkwC,SAAU,GAIZstF,EAAAt9H,UAAAopD,OADP,WAEItpD,KAAKkwC,SAAU,GAInBstF,EAAAt9H,UAAAqzD,cADA,SACc/yB,OAEJv/B,EAAMu/B,EAAMv/B,IAAIiR,cAChB6vF,EAAOvhE,EAAM8jE,QACbziF,EAAQ2e,EAAM8pD,SAEpB,GAAK55E,GAAem+B,IAAI5tC,GAAxB,CAGAu/B,EAAM4B,sBACA31B,EAAO,CAAEu6F,WAAY,cAAehmG,OAAQhB,KAAMwgC,MAAOA,EAAO5nB,QAAQ,GAE9E,GADA5Y,KAAK2T,KAAKszF,cAAchuF,KAAKxM,IACzBA,EAAKmM,SAGT4nB,EAAMqH,iBAED7nC,KAAK09H,qBAAqBz8H,EAAK8gG,IAApC,CAEA/hG,KAAK8jG,iBAAiBtC,cAAc3/E,MAAQA,KAAmB,QAAR5gB,OACjD4W,EAAM7X,KAAK29H,qBAAqB39H,KAAKgY,UAC3C,OAAQ/W,GACJ,IAAK,MACD,GAAI4gB,EAAO,CACP7hB,KAAK2T,KAAK2wE,WAAWmiB,mBAAmB5uF,EAAK7X,KAAKgY,SAAUhY,KAAKwY,oBAAoB,GACrF,MAEJxY,KAAK2T,KAAK2wE,WAAWoiB,WAAW7uF,EAAK7X,KAAKgY,SAAUhY,KAAKwY,oBAAoB,GAC7E,MACJ,IAAK,YACL,IAAK,OACL,IAAK,OACD,GAAIupF,GAAgB,SAAR9gG,EAAgB,CACxBjB,KAAK2T,KAAK2wE,WAAWnI,cAAcn8E,KAAKgY,UAAU,GAClD,MAEJhY,KAAK2T,KAAK2wE,WAAWpI,mBAAmBl8E,KAAK69B,cAAe79B,KAAKgY,SAAUhY,KAAKwY,oBAAoB,GACpG,MACJ,IAAK,MACL,IAAK,aACL,IAAK,QACD,GAAIupF,GAAgB,QAAR9gG,EAAe,CACvBjB,KAAK2T,KAAK2wE,WAAWlI,aAAap8E,KAAKgY,UAAU,GACjD,MAEJhY,KAAK2T,KAAK2wE,WAAWrI,oBAAoBj8E,KAAK69B,cAAe79B,KAAKgY,SAAUhY,KAAKwY,oBAAoB,GACrG,MACJ,IAAK,UACL,IAAK,KACDxY,KAAK2T,KAAK2wE,WAAW8iB,WAAWvvF,EAAK7X,KAAKgY,SAAUhY,KAAKwY,oBACzD,MACJ,IAAK,YACL,IAAK,OACDxY,KAAK2T,KAAK2wE,WAAWgjB,aAAazvF,EAAK7X,KAAKgY,SAAUhY,KAAKwY,wBAKvEhZ,OAAAgC,eAGIg8H,EAAAt9H,UAAA,QAAK,KAHT,WAII,OAAOF,KAAKoY,OAAO4/F,gDAGvBx4G,OAAAgC,eAAIg8H,EAAAt9H,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKyhC,QAAQ5D,+CAGxBr+B,OAAAgC,eAAIg8H,EAAAt9H,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAKoY,OAAOiF,0CAGvB7d,OAAAgC,eAAIg8H,EAAAt9H,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKoY,OAAOzE,KAAK8oH,sDAM5Bj9H,OAAAgC,eAAWg8H,EAAAt9H,UAAA,OAAI,KAAf,WACI,OAAQF,KAAKoY,OAAW,sCAGpBolH,EAAAt9H,UAAAy9H,qBAAR,SAA6B3lH,GAEzB,OADoBhY,KAAK2T,KAAKkrG,iBAAiBxuG,UAC5B2E,KAAK,SAAC4oH,GAAO,OAAAA,EAAGC,eAAiB7lH,IAAU6lB,eAG1D2/F,EAAAt9H,UAAAw9H,qBAAR,SAA6Bz8H,EAAK8gG,GAC9B,OAAIA,GAC8E,IAAxE,CAAC,UAAW,YAAa,KAAM,OAAQ,MAAO,QAAQjyF,QAAQ7O,IAE0D,IAA3H,CAAC,OAAQ,KAAM,OAAQ,QAAS,YAAa,UAAW,YAAa,aAAc,OAAQ,MAAO,OAAO6O,QAAQ7O,IAGrHu8H,EAAAt9H,UAAA49H,iBAAP,SAAwBC,GACpB,OAAO/9H,KAAK2T,KAAKw0G,gBAAgB,oBAAoB4V,EAAQ98H,MAAU88H,EAAQlwD,2BA1JtFp+B,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,wBACVuiC,SAAA,+pCAX2EzO,EAAAA,kBAItEqgE,8CAWJl0F,EAAAA,sBAGAA,EAAAA,oCAGAA,EAAAA,0BAGAA,EAAAA,uBAGAA,EAAAA,wBAMAA,EAAAA,OAAK,CAAAsJ,KACLq2B,EAAAA,YAAWtgC,KAAA,CAAC,kDAGZsgC,EAAAA,YAAWtgC,KAAA,CAAC,4CAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,qCAGZsgC,EAAAA,YAAWtgC,KAAA,CAAC,0CAKZsgC,EAAAA,YAAWtgC,KAAA,CAAC,mDAGZY,EAAAA,aAAYZ,KAAA,CAAC,yBAKbY,EAAAA,aAAYZ,KAAA,CAAC,+BAKbY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,0BA2DzBsgC,EAAAA,YAAWtgC,KAAA,CAAC,oBAAiB,CAAAiK,KAC7Bq2B,EAAAA,YAAWtgC,KAAA,CAAC,oBAAiB,CAAAiK,KAC7Bq2B,EAAAA,YAAWtgC,KAAA,CAAC,uBAuCjB+wH,EAnKA,GCAAQ,GAAA,WA+DI,SAAAA,EAAmB79G,EACAshB,EACAjjB,GAFAxe,KAAAmgB,QAAAA,EACAngB,KAAAyhC,QAAAA,EACAzhC,KAAAwe,IAAAA,EAzBZxe,KAAAg5G,YAAc,EAGdh5G,KAAAy9H,sBAAwB,EAyDnC,OAvDIj+H,OAAAgC,eACIw8H,EAAA99H,UAAA,eAAY,KADhB,WAEI,OAAOF,KAAKwS,uCAGhBhT,OAAAgC,eAAIw8H,EAAA99H,UAAA,YAAS,KAAb,WACI,OAAOF,KAAK2T,KAAK2F,eAAe+iH,uBAAyB,mCAgBtD2B,EAAA99H,UAAAmwC,UAAP,WACIrwC,KAAKwe,IAAIC,gBAGbjf,OAAAgC,eAAWw8H,EAAA99H,UAAA,OAAI,KAAf,WACI,OAAOF,KAAKmgB,QAAQxM,sCAGxBnU,OAAAgC,eAAWw8H,EAAA99H,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKyhC,QAAQ5D,+CAGjBmgG,EAAA99H,UAAA+9H,mBAAP,SAA0B3rG,GACtB,OAAKtyB,KAAK2jD,UAAUp3C,IAAI+lB,GAGjBtyB,KAAK2jD,UAAUp3C,IAAI+lB,GAFf,IASf9yB,OAAAgC,eAAWw8H,EAAA99H,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK2T,KAAK60F,+CAMrBhpG,OAAAgC,eAAWw8H,EAAA99H,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAK2T,KAAK80F,qEA7ExBh5D,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,uBACVuiC,SAAA,26EACA9hC,UAAW,CAAC+qC,iDAXPpjC,UARL0rB,EAAAA,kBAEA4L,EAAAA,wDAqBCz/B,EAAAA,sBAGAA,EAAAA,qBAGAA,EAAAA,2BAGAA,EAAAA,oCAGAA,EAAAA,4BAGA2/B,EAAAA,YAAWtgC,KAAA,CAAC,4CASZslE,EAAAA,aAAYtlE,KAAA,CAAC+wH,GAAyB,CAAEzqF,KAAMyqF,yBAM9C1qF,EAAAA,UAASrmC,KAAA,CAAC,YAAa,CAAEsmC,KAAMyQ,QAwCpCw6E,EApGA,OCKIruE,KAAA,EACAuuE,KAAA,EACAC,IAAA,EACAC,MAAA,EACAC,OAAA,EACAC,QAAA,EACAC,SAAA,EACAC,WAAA,EACAC,YAAA,0NAIJ,IAAAC,GAAA,WAqCI,SAAAA,EAAoBzoB,EAAyBpmD,GAA7C,IAAAr+C,EAAAxR,KAAoBA,KAAAi2G,IAAAA,EAAyBj2G,KAAA6vD,KAAAA,EAlB7C7vD,KAAA2+H,WAAa,IAAI53G,EAAAA,aAGjB/mB,KAAA4+H,aAAe,IAAI73G,EAAAA,aAUT/mB,KAAA6+H,KAAO,IAAI9hG,EAAAA,QACX/8B,KAAA8+H,cAAgBC,GAAoBpvE,KA4B9C3vD,KAAAg/H,mBAAqB,SAACthG,GAClB,GAAKlsB,EAAKytH,WAAV,KAGMl7G,EAAI2Z,EAAGQ,QACPtG,EAAI8F,EAAGS,QACPl4B,EAAYuL,EAAK0tH,mBAAmBn7G,EAAG6T,GACzC3xB,IAAcuL,EAAKstH,gBAGvBttH,EAAKs6B,cACLt6B,EAAK2tH,KAAO3tH,EAAK4tH,WAAW18F,UAAU,WAAM,OAAAlxB,EAAKotH,aAAa3lH,KAAKhT,KACnEuL,EAAKstH,cAAgB74H,KAGzBjG,KAAAq/H,kBAAoB,WACX7tH,EAAKytH,aAGVztH,EAAKmtH,WAAW1lH,MAAK,GACrBzH,EAAKs6B,cACLt6B,EAAKstH,cAAgBC,GAAoBpvE,OA5CzC3vD,KAAKo/H,WAAa9tE,EAAAA,SAAS,KAAK9uB,KAC5BC,EAAAA,UAAUziC,KAAK6+H,MACfpoH,EAAAA,OAAO,WAAM,OAAAjF,EAAKytH,cAuF9B,OAzHIz/H,OAAAgC,eACIk9H,EAAAx+H,UAAA,aAAU,KADd,WAEI,OAAOF,KAAKs/H,iBAGhB,SAAehgH,GACPA,IAAQtf,KAAKs/H,cACbt/H,KAAK8rC,cACL9rC,KAAKs/H,YAAchgH,oCAU3B9f,OAAAgC,eAAIk9H,EAAAx+H,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKi2G,IAAIp4E,+CAGpBr+B,OAAAgC,eAAIk9H,EAAAx+H,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK69B,cAAcluB,yDAe9B+uH,EAAAx+H,UAAAusC,SAAA,WAAA,IAAAj7B,EAAAxR,KACIA,KAAK6vD,KAAKnoB,kBAAkB,WACxBl2B,EAAKqsB,cAAcsE,iBAAiB,cAAe3wB,EAAKwtH,oBACxDxtH,EAAKqsB,cAAcsE,iBAAiB,eAAgB3wB,EAAK6tH,sBAIjEX,EAAAx+H,UAAAkkC,YAAA,WAAA,IAAA5yB,EAAAxR,KACIA,KAAK6vD,KAAKnoB,kBAAkB,WACxBl2B,EAAKqsB,cAAcoG,oBAAoB,cAAezyB,EAAKwtH,oBAC3DxtH,EAAKqsB,cAAcoG,oBAAoB,eAAgBzyB,EAAK6tH,qBAEhEr/H,KAAK8rC,cACL9rC,KAAK6+H,KAAKx6F,YA4Bdq6F,EAAAx+H,UAAAg/H,mBAAA,SAAmBn7G,EAAW6T,OAGpBw0D,EAAOpsF,KAAKkxG,WAEZ/7C,EAAU7yC,KAAKi9G,MAAMx7G,EAAIqoE,EAAKn0D,MAC9Bo9B,EAAU/yC,KAAKi9G,MAAM3nG,EAAIw0D,EAAKj0D,KAE9BF,EAAOk9B,GAJC,IAIUi3B,EAAK18E,MACvBwoB,EAAQi9B,GAAqB,IAAVi3B,EAAK18E,MACxByoB,EAAMk9B,GANE,IAMS+2B,EAAKxgF,OACtBosB,EAASq9B,GAAsB,IAAX+2B,EAAKxgF,OAsB/B,OApBIusB,GAAOF,EACK8mG,GAAoBT,QACzBnmG,GAAOD,EACF6mG,GAAoBR,SACzBvmG,GAAUC,EACL8mG,GAAoBP,WACzBxmG,GAAUE,EACL6mG,GAAoBN,YACzBtmG,EACK4mG,GAAoBZ,IACzBnmG,EACK+mG,GAAoBV,OACzBpmG,EACK8mG,GAAoBb,KACzBhmG,EACK6mG,GAAoBX,MAEpBW,GAAoBpvE,MAO9B+uE,EAAAx+H,UAAA4rC,YAAV,WACQ9rC,KAAKm/H,MACLn/H,KAAKm/H,KAAKrzF,mCA5HrB5+B,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,mEAlBmC8zB,EAAAA,kBAAuB4D,EAAAA,8CAuBnEz3B,EAAAA,MAAKX,KAAA,CAAC,yCAYN6c,EAAAA,6BAGAA,EAAAA,UA0GLo1G,EA/HA,GCjBAc,GAAA,WAWI,SAAAA,EAAmBlyB,GAAAttG,KAAAstG,mBAAAA,EAIvB,2BAXC79D,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,0BACVuiC,SAAA,8XAPK06D,uCAYJt3D,EAAAA,UAASrmC,KAAA,CAACuhG,OAEfwxB,EAfA,GCgCAC,GAAA,WAgHI,SAAAA,EAAmBjsB,EAA8C/xE,EAA4BjjB,GAA1Exe,KAAAwzG,iBAAAA,EAA8CxzG,KAAAyhC,QAAAA,EAA4BzhC,KAAAwe,IAAAA,EAxGrFxe,KAAA46F,kBAAoB,CACxB/gE,qBAAsBH,GAAoBrC,KAC1CyC,mBAAoBF,GAAkBlC,QAGlC13B,KAAA0/H,2BAA8C,CAClDthG,uBAAuB,EACvBjB,qBAAqB,EACrBD,OAAO,EACPD,eAAgB,IAAImK,GACpBpK,iBAAkB,IAAI8H,GAA6B9kC,KAAK46F,oBAGpD56F,KAAA2/H,0BAA6C,CACjDvhG,uBAAuB,EACvBjB,qBAAqB,EACrBD,OAAO,EACPD,eAAgB,IAAImK,GACpBpK,iBAAkB,IAAI8H,GAA6B9kC,KAAK46F,oBAIpD56F,KAAA4/H,qBAAuB,EACvB5/H,KAAAgvG,QAAU,KACVhvG,KAAA6/H,cAAe,EACf7/H,KAAA8/H,aAAc,EA6Ef9/H,KAAAsxC,SAAW,0BAqnBtB,OA5rBI9xC,OAAAgC,eACIi+H,EAAAv/H,UAAA,SAAM,KADV,WAEI,OAAOF,KAAKgvG,aAGhB,SAAW1vF,GACHA,IACAtf,KAAKgvG,QAAU1vF,EAEftf,KAAK0nH,gBAAkB1nH,KAAKwzG,iBAAiBuT,eAAe/mH,KAAKgvG,QAAQj5F,OAEzE/V,KAAK+/H,kBAEL//H,KAAK4/H,qBAAuB,EAC5B5/H,KAAKiD,UAAUjD,KAAK4/H,wDAI5BpgI,OAAAgC,eACIi+H,EAAAv/H,UAAA,QAAK,KADT,WAEI,OAAOF,KAAKyS,WAAazS,KAAKyS,WAAWiK,UAAY,UAGzD,SAAU4C,GAAV,IAAA9N,EAAAxR,KACSsf,GAAe,IAARA,GAIRtf,KAAKyS,WAAWiK,UAAY1c,KAAKorH,eAAe9rG,GAC5Ctf,KAAK0nH,gBAAgB1yG,KAAK,SAAAuO,GAAQ,OAAAA,EAAK9Q,aAAejB,EAAKiB,eAAgBT,WAC3EhS,KAAKggI,eAAc,KALvBhgI,KAAKyS,WAAWiK,UAAY,KAC5B1c,KAAKigI,wBAQTjgI,KAAKyW,0CAyCTgpH,EAAAv/H,UAAAumD,gBAAA,WACIzmD,KAAK0/H,2BAA2Br9F,OAASriC,KAAKoY,OAAOzE,KAAKknF,gBAC1D76F,KAAK2/H,0BAA0Bt9F,OAASriC,KAAKoY,OAAOzE,KAAKknF,gBAEzD76F,KAAKg8C,MAAMne,cAAckT,SAKtB0uF,EAAAv/H,UAAAggI,aAFP,SAEoB1/F,GAChBA,EAAM4B,kBACFld,SAASg9D,gBAAkBliF,KAAK2oH,YAAY9qF,eAAkB2C,EAAM8pD,UACpEtqF,KAAKwzG,iBAAiB7/F,KAAK2wE,WAAWy+B,4BAA4BviF,IAKnEi/F,EAAAv/H,UAAAigI,aADP,SACoB3/F,GAChBA,EAAMqH,iBACNrH,EAAM4B,kBACNpiC,KAAK6M,SAGTrN,OAAAgC,eAAIi+H,EAAAv/H,UAAA,WAAQ,KAAZ,WACI,QAASF,KAAKoY,OAAOyD,0BAA4F,EAAhE7b,KAAKoY,OAAOyD,yBAAyB9G,kBAAkBpU,yCAG5GnB,OAAAgC,eAAIi+H,EAAAv/H,UAAA,WAAQ,KAAZ,WACI,OAAIF,KAAKoY,OAAOiF,WAAaC,GAAS1O,KAC3B5O,KAAKogI,cAGTpgI,KAAKqgI,iDAGhB7gI,OAAAgC,eAAIi+H,EAAAv/H,UAAA,OAAI,KAAR,WACI,OAAQF,KAAKoY,OAAOiF,UAChB,KAAKC,GAASwD,OACd,KAAKxD,GAASyD,QACV,MAAO,OACX,KAAKzD,GAASC,OACV,MAAO,2CAInB/d,OAAAgC,eAAIi+H,EAAAv/H,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKoY,OAAOg9F,QAAQpuC,iDAG/BxnE,OAAAgC,eAAIi+H,EAAAv/H,UAAA,mBAAgB,KAApB,WACI,OAAIF,KAAKyS,WAAW2J,WACTpc,KAAKyS,WAAW2J,UAAU0qD,yCAMzCtnE,OAAAgC,eAAIi+H,EAAAv/H,UAAA,cAAW,KAAf,WACI,OAAIF,KAAKyS,WAAW2J,WAAapc,KAAKyS,WAAW2J,UAAU0qD,QAChD9mE,KAAKwzG,iBAAiB8U,aAAatoH,KAAKyS,YACxCzS,KAAKoY,OAAOiF,WAAaC,GAAS1O,KAClC5O,KAAKwzG,iBAAiB7/F,KAAKw0G,gBAAgBoP,qCAC3Cv3H,KAAKoY,OAAOiF,WAAaC,GAASyD,QAClC/gB,KAAKwzG,iBAAiB7/F,KAAKw0G,gBAAgBmP,wCAE3Ct3H,KAAKwzG,iBAAiB7/F,KAAKw0G,gBAAgBkP,iEAOnDoI,EAAAv/H,UAAAogI,gBAAP,SAAuB9/F,GACL,UAATA,EAAMv/B,KAA+B,MAATu/B,EAAMv/B,KAA+B,aAATu/B,EAAMv/B,MAA0BjB,KAAKugI,mBAAmBx0F,UAGjG,QAATvL,EAAMv/B,MACTu/B,EAAM8pD,UACN9pD,EAAMqH,iBACNrH,EAAM4B,mBACEpiC,KAAKugI,mBAAmBx0F,WAChC/rC,KAAKwgI,yBAAyBxgI,KAAKygI,iBAAiB5iG,iBAPxD79B,KAAKwgI,yBAAyBxgI,KAAKygI,iBAAiB5iG,eACpD2C,EAAM2H,6BAcPs3F,EAAAv/H,UAAAwgI,eAAP,SAAsBlgG,GAGlB,GAFAxgC,KAAK6/H,cAAe,EAEhB7/H,KAAKoY,OAAOiF,WAAaC,GAASyD,UACrB,UAATyf,EAAMv/B,KAA+B,MAATu/B,EAAMv/B,KAA+B,aAATu/B,EAAMv/B,KAI9D,OAHAjB,KAAKygI,iBAAiB5iG,cAAckT,QACpC/wC,KAAKwgI,yBAAyBxgI,KAAKygI,iBAAiB5iG,oBACpD2C,EAAM4B,kBAKd,GAAa,UAAT5B,EAAMv/B,IAAoB,CAC1B,GAAIjB,KAAK8/H,YACL,OAEJ9/H,KAAK2gI,mBACEngG,EAAM2uC,QAAoB,cAAT3uC,EAAMv/B,KAAoC,SAATu/B,EAAMv/B,IAG/C,WAATu/B,EAAMv/B,KAAgC,QAATu/B,EAAMv/B,MAC1Cu/B,EAAMqH,iBACN7nC,KAAK6M,UAJL7M,KAAKygI,iBAAiB5iG,cAAckT,QACpC/wC,KAAKwgI,yBAAyBxgI,KAAKygI,iBAAiB5iG,gBAKxD2C,EAAM4B,mBAMHq9F,EAAAv/H,UAAA0gI,aAAP,SAAoBthG,GAChBt/B,KAAK6/H,cAAe,GAMjBJ,EAAAv/H,UAAAwpD,QAAP,SAAepqB,IAGP9vB,MAAYxP,KAAK6/H,cAAgBvgG,EAAUt+B,OAAOmB,SAClDnC,KAAKmC,MAAQm9B,EAAUt+B,OAAOmB,QAO/Bs9H,EAAAv/H,UAAA2gI,mBAAP,WACI7gI,KAAK8/H,aAAc,GAMhBL,EAAAv/H,UAAA4gI,iBAAP,WACI9gI,KAAK8/H,aAAc,GAMhBL,EAAAv/H,UAAAkwF,aAAP,WACQpwF,KAAKoY,OAAOiF,WAAaC,GAASyD,SAAW/gB,KAAKugI,mBAAmBx0F,YACrE/rC,KAAKygI,iBAAiB5iG,cAAckT,QACpC/wC,KAAKwgI,yBAAyBxgI,KAAKygI,iBAAiB5iG,iBAOrD4hG,EAAAv/H,UAAA6gI,gBAAP,WACI/gI,KAAKg8C,MAAMne,cAAckT,SAMtB0uF,EAAAv/H,UAAA0qH,aAAP,SAAoBzoH,GAChB,OAAOnC,KAAKoY,OAAOg9F,QAAQh5F,UAAUja,IAMlCs9H,EAAAv/H,UAAAwqH,mBAAP,SAA0BvoH,GACtB,OAAOnC,KAAKwzG,iBAAiB7/F,KAAKw0G,gBAAgB,mBAAmBnoH,KAAK4qH,aAAazoH,GAAOyT,OAAWzT,GAMtGs9H,EAAAv/H,UAAA2qH,YAAP,WACI,OAAI7qH,KAAKoY,OAAOiF,WAAaC,GAASyD,SAAyC,OAA9B/gB,KAAKyS,WAAW2J,UACtDpc,KAAK4qH,aAAa5qH,KAAK8qH,WAAW,IAAI/jD,SAEtC/mE,KAAKyS,WAAW2J,UAAU2qD,UAOlC04D,EAAAv/H,UAAAqqH,oBAAP,SAA2BC,GACvB,QAAIxqH,KAAKyS,WAAW2J,WACTpc,KAAKyS,WAAW2J,UAAUxG,OAAS40G,GAS3CiV,EAAAv/H,UAAAg6G,eAAP,WACIl6G,KAAKwzG,iBAAiBkT,YAAY1mH,KAAKoY,OAAOrC,OAC9C/V,KAAK+/H,kBACD//H,KAAKg8C,OACLh8C,KAAKg8C,MAAMne,cAAckT,QAE7B/wC,KAAKwe,IAAIyhB,gBAETjgC,KAAK4/H,qBAAuB,EAC5B5/H,KAAKiD,UAAUjD,KAAK4/H,uBAMjBH,EAAAv/H,UAAAygI,YAAP,WACI3gI,KAAK81H,UAAUjsC,UAAUpzE,OAAO,SAAA6yE,GAAQ,OAAAA,EAAK1uE,UAAW,IAExD,QADIomH,GAAmB,EACdxuH,EAAQ,EAAGA,EAAQxS,KAAK0nH,gBAAgB/mH,OAAQ6R,IAAS,KACxDC,EAAazS,KAAK0nH,gBAAgBl1G,GAAOC,WAClB,OAAzBA,EAAWiK,WAAuBjK,EAAW2J,UAAU0qD,UACvDk6D,EAAkBxuH,IAGD,IAArBwuH,GACAhhI,KAAKwnH,iBAAiBwZ,EAAiBhhI,KAAKyS,YAEhDzS,KAAK+/H,kBACL//H,KAAKihI,mCAMFxB,EAAAv/H,UAAA2pH,WAAP,WACI7pH,KAAKmC,MAAQ,MAMVs9H,EAAAv/H,UAAAghI,eAAP,SAAsB5hG,GACD,UAAbA,EAAUr+B,KAAmC,MAAbq+B,EAAUr+B,KAAmC,aAAbq+B,EAAUr+B,MAC1Eq+B,EAAUuI,iBACV7nC,KAAK6pH,aACL7pH,KAAKg8C,MAAMne,cAAckT,UAO1B0uF,EAAAv/H,UAAAihI,aAAP,WACInhI,KAAK6pH,aACL7pH,KAAKg8C,MAAMne,cAAckT,SAMtB0uF,EAAAv/H,UAAAkhI,gBAAP,SAAuB9hG,GACF,UAAbA,EAAUr+B,KAAmC,MAAbq+B,EAAUr+B,KAAmC,aAAbq+B,EAAUr+B,MAC1Eq+B,EAAUuI,iBACV7nC,KAAK2gI,cACL3gI,KAAKg8C,MAAMne,cAAckT,UAO1B0uF,EAAAv/H,UAAAmhI,cAAP,WACIrhI,KAAK2gI,cACL3gI,KAAKg8C,MAAMne,cAAckT,SAMtB0uF,EAAAv/H,UAAAohI,qBAAP,WAAA,IAAA9vH,EAAAxR,MACSA,KAAKmC,OAAwB,IAAfnC,KAAKmC,QAGxBo2C,sBAAsB,eACZgpF,EAAiBr8G,SAASg9D,cAC1Bq/C,GAAkB/vH,EAAKi3C,WAAW5qB,cAAcC,SAASyjG,KAC3D/vH,EAAK+uH,mBAAmBx0F,WACxBv6B,EAAKmvH,iBAQVlB,EAAAv/H,UAAA2M,MAAP,WAAA,IAAA2E,EAAAxR,KACwC,IAAhCA,KAAK0nH,gBAAgB/mH,QAC4B,OAAjDX,KAAK0nH,gBAAgB,GAAGj1G,WAAWiK,YACsB,IAAzD1c,KAAK0nH,gBAAgB,GAAGj1G,WAAW2J,UAAU0qD,QAC7C9mE,KAAKwzG,iBAAiBuT,eAAe/mH,KAAKoY,OAAOrC,OAAO0W,MAExDzsB,KAAK0nH,gBAAgBx3G,QAAQ,SAACqT,GACQ,OAA9BA,EAAK9Q,WAAWiK,WAAuB6G,EAAK9Q,WAAW2J,UAAU0qD,SACjEt1D,EAAKgiG,iBAAiBgU,iBAAiBh2G,EAAK4G,OAAOrC,MAAOvE,EAAKk2G,gBAAgB53G,QAAQyT,MAKnGvjB,KAAKwzG,iBAAiB4O,oBAAqB,EAE3CpiH,KAAKwzG,iBAAiB8S,oBAAoBtmH,KAAKoY,QAC/CpY,KAAKwzG,iBAAiB+O,oBAAoBviH,KAAKoY,QAAQ,GAEvDpY,KAAKwzG,iBAAiBuS,eAAiB,KACvC/lH,KAAKwzG,iBAAiBwS,mBAAqB,KAC3ChmH,KAAKwe,IAAIyhB,gBAETjgC,KAAK4/H,qBAAuB,EAC5B5/H,KAAKiD,UAAUjD,KAAK4/H,uBAMjBH,EAAAv/H,UAAA2rH,eAAP,SAAsBtxB,GACbv6F,KAAKyS,WAAW2J,UAAU0qD,SAC3ByzB,KAODklC,EAAAv/H,UAAAshI,eAAP,SAAsBr/H,GAClBnC,KAAKmC,MAAQA,EACbnC,KAAK2gI,eAMFlB,EAAAv/H,UAAAsgI,yBAAP,SAAgCx/H,GAC5BhB,KAAK0/H,2BAA2B1iG,iBAAiBlF,SAAS92B,OAASA,EACnEhB,KAAKugI,mBAAmB/zH,OAAOxM,KAAK0/H,6BAMjCD,EAAAv/H,UAAAuhI,wBAAP,SAA+BniG,EAAW9sB,GACtCxS,KAAK2/H,0BAA0B3iG,iBAAiBlF,SAAS92B,OAASs+B,EAAUt+B,OAAOu5B,cACnFv6B,KAAK0hI,kBAAkBrxH,UAAUmC,GAAOhG,OAAOxM,KAAK2/H,4BAMjDF,EAAAv/H,UAAA+qH,oBAAP,SAA2B3rF,GAA3B,IAAA9tB,EAAAxR,KACUmC,EAASm9B,EAAsB,aAA8Bn9B,MACnEnC,KAAKyS,WAAW2J,UAAYpc,KAAK4qH,aAAazoH,GAC1CnC,KAAKyS,WAAW2J,UAAU0qD,QAG1BvuB,sBAAsB,WAAM,OAAA/mC,EAAKmwH,kCAEjCppF,sBAAsB,WAAM,OAAA/mC,EAAKowH,6BAGjC5hI,KAAKg8C,OAGLzD,sBAAsB,WAAM,OAAA/mC,EAAKwqC,MAAMne,cAAckT,WAOtD0uF,EAAAv/H,UAAA2hI,eAAP,SAAsBviG,EAAiC7sB,GAC/C6sB,EAAU1kB,UACN5a,KAAK81H,UAAUjsC,WACf7pF,KAAK81H,UAAUjsC,UAAU35E,QAAQ,SAACo5E,GAC1BA,IAAShqD,EAAUgzB,QACnBg3B,EAAK1uE,UAAW,KAI5B5a,KAAKyS,WAAaA,EAEdzS,KAAKg8C,OACLh8C,KAAKg8C,MAAMne,cAAckT,SAEtB/wC,KAAKyS,aAAeA,GAC3BzS,KAAK+/H,mBAONN,EAAAv/H,UAAAsoF,cAAP,SAAqBlpD,EAA0BgqD,GAC1B,UAAbhqD,EAAUr+B,MACVq+B,EAAUuI,iBACVyhD,EAAK1uE,UAAY0uE,EAAK1uE,WAOvB6kH,EAAAv/H,UAAA4hI,mBAAP,SAA0BthG,GACT,QAATA,EAAMv/B,MACNjB,KAAK4/H,qBAAuB,EAC5B5/H,KAAKiD,UAAUjD,KAAK4/H,wBAOrBH,EAAAv/H,UAAAm1H,cAAP,SAAqB/1F,EAA+B/b,OAC1CkkG,EAAgBznH,KAAK0nH,gBAAgB53G,QAAQyT,GACnDvjB,KAAKwnH,iBAAiBC,EAAelkG,EAAK9Q,YAE1CzS,KAAK+hI,uBAMFtC,EAAAv/H,UAAAgqH,uBAAP,SAA8B5qF,EAAgC7sB,GAA9D,IAAAjB,EAAAxR,KACQs/B,EAAUoS,eACVj/B,EAAWm1G,cAAiBtoF,EAAsB,aAA8Bn9B,MAChFnC,KAAK0nH,gBAAgB1nH,KAAK0nH,gBAAgB53G,QAAQ2C,GAAc,GAAGk1G,eAAiBl1G,EAAWm1G,cAI/FrvE,sBAAsB,WAAM,OAAA/mC,EAAKiF,aAOlCgpH,EAAAv/H,UAAA8hI,wBAAP,SAA+BC,OACvBlyG,EAAQ,EACNmyG,EAAmBliI,KAAK81H,UAAUr0F,QAAQ5D,cAAcztB,SACxD+xH,EAAgBniI,KAAKqyG,UAAUx0E,cAAcluB,wBAEnD,GAAsB,UAAlBsyH,EAA2B,CAC3B,IAAK,IAAIzvH,EAAQ,EAAGA,EAAQ0vH,EAAiBvhI,OAAQ6R,IAC7C8P,KAAKU,KAAKk/G,EAAiB1vH,GAAO7C,wBAAwBuoB,OAAS5V,KAAKU,KAAKm/G,EAAcjqG,QAC3FnI,IAIJA,EAAQmyG,EAAiBvhI,SACzBX,KAAK4/H,sBAAwBt9G,KAAKU,KAAKk/G,EAAiBnyG,GAAOpgB,wBAAwBuoB,OACnF5V,KAAKU,KAAKm/G,EAAcjqG,OAAS,EACrCl4B,KAAKiD,UAAUjD,KAAK4/H,uBAI5B,GAAsB,SAAlBqC,EAA0B,CAC1B,IAASzvH,EAAQ,EAAGA,EAAQ0vH,EAAiBvhI,OAAQ6R,IAC7C8P,KAAKU,KAAKk/G,EAAiB1vH,GAAO7C,wBAAwBsoB,MAAQ3V,KAAKU,KAAKm/G,EAAclqG,OAC1FlI,IAII,EAARA,IACA/vB,KAAK4/H,sBAAwBt9G,KAAKU,KAAKm/G,EAAclqG,MACjD3V,KAAKU,KAAKk/G,EAAiBnyG,EAAQ,GAAGpgB,wBAAwBsoB,MAAQ,EAC1Ej4B,KAAKiD,UAAUjD,KAAK4/H,yBAKxBH,EAAAv/H,UAAA+/H,qBAAR,WAAA,IAAAzuH,EAAAxR,KACIu4C,sBAAsB,WAClB,GAAI/mC,EAAKgiG,iBAAiB4O,mBAAoB,KACpCggB,EAAiB5wH,EAAK6gG,UAAUx0E,cAAcluB,wBAAwBD,MAC5E8B,EAAK6wH,eAAiB7wH,EAAKskH,UAAUr0F,QAAQ5D,cAAcluB,wBAAwBD,MAEnF8B,EAAK8wH,WAAa9wH,EAAK6wH,gBAAkBD,GAAkB5wH,EAAK+wH,iBAGhE/wH,EAAKgN,IAAIyhB,oBAKbw/F,EAAAv/H,UAAAkrH,eAAR,SAAuBjpH,GAOnB,OANInC,KAAKoY,OAAOiF,WAAaC,GAASC,OAClCpb,EAAQk+F,WAAWl+F,GACZnC,KAAKoY,OAAOiF,WAAaC,GAASyD,UACzC5e,EAAQ4e,QAAQ5e,IAGbA,GAGHs9H,EAAAv/H,UAAA8/H,cAAR,SAAsBl3B,OACZogB,EAAS,IAAI1D,GACnB0D,EAAOz2G,WAAazS,KAAKyS,WACzBy2G,EAAOvB,eAA+C,EAA9B3nH,KAAK0nH,gBAAgB/mH,OAAagf,GAAeV,IAAM,KAC/EiqG,EAAOpgB,WAAaA,EAEpB9oG,KAAK0nH,gBAAgBllH,KAAK0mH,OAEpBvoH,EAASX,KAAK0nH,gBAAgB/mH,OAChCX,KAAK0nH,gBAAgB/mH,EAAS,KAC9BX,KAAK0nH,gBAAgB/mH,EAAS,GAAGinH,cAAgB5nH,KAAK0nH,gBAAgB/mH,EAAS,GAAGgnH,gBAGtF3nH,KAAKigI,wBAGDR,EAAAv/H,UAAAsnH,iBAAR,SAAyBC,EAAuBh1G,GACtB,IAAlBg1G,GAAuD,IAAhCznH,KAAK0nH,gBAAgB/mH,QAKhDX,KAAKwzG,iBAAiBgU,iBAAiBxnH,KAAKoY,OAAOrC,MAAO0xG,GAE1DznH,KAAKyW,SAEDzW,KAAKyS,aAAeA,GACpBzS,KAAK+/H,kBAGT//H,KAAKigI,wBAZDjgI,KAAKk6G,kBAeLulB,EAAAv/H,UAAA6/H,gBAAR,WACI//H,KAAKyS,WAAa,CACdrB,UAAWpR,KAAKoY,OAAOrC,MACvBqG,UAAW,KACXM,UAAW,KACXpL,WAAYtR,KAAKoY,OAAOkE,qBAGxBtc,KAAKoY,OAAOiF,WAAaC,GAASyD,UAClC/gB,KAAKyS,WAAW2J,UAAYpc,KAAK4qH,aAAa5qH,KAAK8qH,WAAW,KAG9D9qH,KAAKoY,OAAOiF,WAAaC,GAAS1O,MAAQ5O,KAAKg8C,QAC/Ch8C,KAAKg8C,MAAMne,cAAc17B,MAAQ,MAGrCnC,KAAKigI,wBAGDR,EAAAv/H,UAAA+gI,gCAAR,eACUiB,EAAmBliI,KAAK81H,UAAUr0F,QAAQ5D,cAAcztB,SAC9D,GAAK8xH,GAAgD,IAA5BA,EAAiBvhI,OAA1C,KAIM6hI,EAAqBlgH,KAAKU,KAAKhjB,KAAKqyG,UAAUx0E,cAAcluB,wBAAwBuoB,OAEpFuqG,EAAoBngH,KAAKU,KAAKk/G,EAAiBA,EAAiBvhI,OAAS,GAAGgP,wBAAwBuoB,OACjFsqG,GAArBC,IACAziI,KAAK4/H,sBAAwB6C,EAAoBD,EACjDxiI,KAAKiD,UAAUjD,KAAK4/H,yBAIpBH,EAAAv/H,UAAA+C,UAAR,SAAkBD,GAAlB,IAAAwO,EAAAxR,KACIu4C,sBAAsB,WAClB/mC,EAAKskH,UAAUr0F,QAAQ5D,cAAct/B,MAAM0E,UAAY,aAAaD,EAAM,SAI1Ey8H,EAAAv/H,UAAA6hI,oBAAR,WAKI,QAJIhyG,EAAQ,EACNmyG,EAAmBliI,KAAK81H,UAAUr0F,QAAQ5D,cAAcztB,SACxD+xH,EAAgBniI,KAAKqyG,UAAUx0E,cAAcluB,wBAE1C6C,EAAQ,EAAGA,EAAQ0vH,EAAiBvhI,OAAQ6R,IAC7C8P,KAAKU,KAAKk/G,EAAiB1vH,GAAO7C,wBAAwBsoB,MAAQ3V,KAAKU,KAAKm/G,EAAclqG,OAC1FlI,IAIR,GAAIA,GAAS,EACT/vB,KAAK4/H,qBAAuB,MACzB,KACG8C,EAAqC,SAA/BR,EAAiBnyG,GAAO3jB,GAAgB2jB,EAAQ,EAAIA,EAAQ,EACxE/vB,KAAK4/H,sBAAwBt9G,KAAKU,KAAKm/G,EAAclqG,MAAQ3V,KAAKU,KAAKk/G,EAAiBQ,GAAK/yH,wBAAwBsoB,MAAQ,EAGjIj4B,KAAKiD,UAAUjD,KAAK4/H,uBAGhBH,EAAAv/H,UAAA0hI,yBAAR,WACU5hI,KAAKyS,WAAWiK,WAA2C,IAA9B1c,KAAKyS,WAAWiK,UAC/C1c,KAAKyW,SACEzW,KAAKmC,QACZnC,KAAKmC,MAAQ,OAIbs9H,EAAAv/H,UAAAyhI,8BAAR,WAAA,IAAAnwH,EAAAxR,KACQA,KAAKmC,QACLnC,KAAKmC,MAAQ,MAEbnC,KAAK0nH,gBAAgB1yG,KAAK,SAAAuO,GAAQ,OAAAA,EAAK9Q,aAAejB,EAAKiB,eAAgBT,WAC3EhS,KAAKggI,eAAc,GAEvBhgI,KAAKyW,UAGDgpH,EAAAv/H,UAAAuW,OAAR,WACIzW,KAAKwzG,iBAAiBgT,eAAexmH,KAAKoY,OAAOrC,QAGrDvW,OAAAgC,eAAYi+H,EAAAv/H,UAAA,mBAAgB,KAA5B,WACI,OAAOF,KAAKoY,OAAOyD,0BAA4F,EAAhE7b,KAAKoY,OAAOyD,yBAAyB9G,kBAAkBpU,4DAjuB7G8uC,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,yBACVuiC,SAAA,q/MAXK+1E,UAhBLxkF,EAAAA,kBAPA4L,EAAAA,qDAqECz/B,EAAAA,qBAkBAA,EAAAA,+BAmBA0lC,EAAAA,UAASrmC,KAAA,CAAC,kBAAmB,CAAEsmC,KAAMuQ,EAAAA,qCAGrCxQ,EAAAA,UAASrmC,KAAA,CAAC,gBAAiB,CAAEsmC,KAAMuQ,EAAAA,6BAGnCxQ,EAAAA,UAASrmC,KAAA,CAAC,QAAS,CAAEsmC,KAAM9R,EAAAA,yCAG3B6R,EAAAA,UAASrmC,KAAA,CAAC,uBAAwB,CAAEsmC,KAAM+R,wBAG1ChS,EAAAA,UAASrmC,KAAA,CAAC,YAAa,CAAEsmC,KAAM02C,gCAG/B1X,EAAAA,aAAYtlE,KAAA,CAAC,YAAa,CAAEsmC,KAAM+R,yBAGlChS,EAAAA,UAASrmC,KAAA,CAAC,aAAc,CAAEsmC,KAAM9R,EAAAA,uCAGhC6R,EAAAA,UAASrmC,KAAA,CAAC,mBAAoB,CAAEsmC,KAAM9R,EAAAA,gCAGtC6R,EAAAA,UAASrmC,KAAA,CAAC,8BAGVqmC,EAAAA,UAASrmC,KAAA,CAAC,gCAGVqmC,EAAAA,UAASrmC,KAAA,CAAC,iCAGVsgC,EAAAA,YAAWtgC,KAAA,CAAC,uDAYZY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,YAAS,CAAAiK,KAC5CrJ,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,iCAQ7BY,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,cAimBlCgzH,EAnuBA,GCsEakD,GAAqB,IAAIp3E,EAAAA,eAAuB,0BA+GzDpzB,IAAM,MACNH,OAAS,cAIT4qG,cAAgB,gBAChBC,gBAAkB,kBAClBC,mBAAqB,0BAIrBrf,YAAc,cACdsf,iBAAmB,wBAInBC,SAAW,WACXC,YAAc,cACdnvH,SAAW,WACXovH,gBAAkB,mBAGtBve,GAAA,SAAA94F,GA80EI,SAAA84F,EACW7gB,EACA1sF,EACC+I,EACD1G,EAC+BowB,EAC9BjM,EACAiyB,EACiB3qC,EAClB1G,EACGi7B,EACA0pF,EACAC,EACH9+C,EACAkvB,EAC8Bz4E,EAC9BzhB,EAC4CqzC,GAjBvD,IAAAn7C,EAkBIqa,EAAAjrB,KAAAZ,KAAM2sD,IAAuB3sD,YAjBtBwR,EAAAsyF,iBAAAA,EACAtyF,EAAA4F,YAAAA,EACC5F,EAAA2O,QAAAA,EACD3O,EAAAiI,UAAAA,EAC+BjI,EAAAq4B,cAAAA,EAC9Br4B,EAAAosB,WAAAA,EACApsB,EAAAq+C,KAAAA,EACiBr+C,EAAA0T,SAAAA,EAClB1T,EAAAgN,IAAAA,EACGhN,EAAAioC,SAAAA,EACAjoC,EAAA2xH,QAAAA,EACA3xH,EAAA4xH,QAAAA,EACH5xH,EAAA8yE,WAAAA,EACA9yE,EAAAgiG,iBAAAA,EAC8BhiG,EAAAupB,eAAAA,EAC9BvpB,EAAA8H,eAAAA,EAC4C9H,EAAAm7C,uBAAAA,EAx1E/Cn7C,EAAA6xH,iBAAmBxM,GAAuBC,eAC1CtlH,EAAA8xH,kBAAoB,KACpB9xH,EAAA+xH,0BAA4B,KAC5B/xH,EAAAgyH,YAAa,EACbhyH,EAAAgmE,QAAU,KAEVhmE,EAAAwzE,YAAa,EACbxzE,EAAAiyH,WAAa,GA0BdjyH,EAAAkyH,cAAe,EA+SflyH,EAAAm4F,aAAc,EAwHdn4F,EAAAy3F,WAAa,qBAUbz3F,EAAA03F,UAAY,oBAsIZ13F,EAAAmyH,kBAAoB,GA2CpBnyH,EAAAoyH,mBAAqB,GA2IrBpyH,EAAA00F,YAAc,IAAIn/E,EAAAA,aAelBvV,EAAA4/B,YAAc,IAAIrqB,EAAAA,aAelBvV,EAAAqyH,qBAAuB,IAAI98G,EAAAA,aAe3BvV,EAAAslG,gBAAkB,IAAI/vF,EAAAA,aAmCtBvV,EAAAk2F,iBAAmB,IAAI3gF,EAAAA,aAiCvBvV,EAAA2vF,gBAAkB,IAAIp6E,EAAAA,aAmCtBvV,EAAAwH,WAAa,IAAI+N,EAAAA,aA+BjBvV,EAAAuvF,eAAiB,IAAIh6E,EAAAA,aAqCrBvV,EAAAsJ,UAAY,IAAIiM,EAAAA,aAmChBvV,EAAAsyH,gBAAkB,IAAI/8G,EAAAA,aAkBtBvV,EAAAuyH,aAAe,IAAIh9G,EAAAA,aAenBvV,EAAAwyH,cAAgB,IAAIj9G,EAAAA,aAgBpBvV,EAAAs1G,gBAAkB,IAAI//F,EAAAA,aAetBvV,EAAAyyH,aAAe,IAAIl9G,EAAAA,aAgBnBvV,EAAA0yH,WAAa,IAAIn9G,EAAAA,aAgBjBvV,EAAA4M,aAAe,IAAI2I,EAAAA,aAUnBvV,EAAAo+E,cAAgB,IAAI7oE,EAAAA,aAgBpBvV,EAAAm6F,gBAAkB,IAAI5kF,EAAAA,aAgBtBvV,EAAA20F,cAAgB,IAAIp/E,EAAAA,aAgBpBvV,EAAAy0F,cAAgB,IAAIl/E,EAAAA,aAepBvV,EAAAkpG,0BAA4B,IAAI3zF,EAAAA,aAehCvV,EAAAs+F,oBAAsB,IAAI/oF,EAAAA,aAgB1BvV,EAAAy+F,eAAiB,IAAIlpF,EAAAA,aAgBrBvV,EAAAkgG,kBAAoB,IAAI3qF,EAAAA,aAOxBvV,EAAA01F,cAAgB,IAAIngF,EAAAA,aAgBpBvV,EAAAy1F,cAAgB,IAAIlgF,EAAAA,aAOpBvV,EAAA2yH,eAAiB,IAAIp9G,EAAAA,aAOrBvV,EAAA4yH,aAAe,IAAIr9G,EAAAA,aA8XnBvV,EAAAmsD,SAAW,EAmBXnsD,EAAA+gH,SAAW,OA4KX/gH,EAAA6yH,uBAAyB,KAGxB7yH,EAAA8yH,cAAe,EACf9yH,EAAA+yH,cAAe,EACf/yH,EAAAgzH,YAAa,EACbhzH,EAAAizH,cAAwB,KACxBjzH,EAAAkzH,YAAsB,KACtBlzH,EAAAmzH,iBAA2B,KAC3BnzH,EAAAozH,eAAyB,KACzBpzH,EAAAqzH,cAAe,EAEfrzH,EAAAszH,oBAAsB,KAgBvBtzH,EAAAgsG,QAAmC,KAGlChsG,EAAAuzH,YAA0B,KAmO3BvzH,EAAAyrG,mBAAqB,IAAIl2F,EAAAA,aAMhCvV,EAAAizF,iBAAmB,IAAI19E,EAAAA,aAahBvV,EAAAqqG,WAAa,EAQbrqG,EAAAwzH,wBAA0B,GAc1BxzH,EAAAu3F,iBAAkB,EAKlBv3F,EAAA60E,oBAAqB,EAKrB70E,EAAAg0F,eAA8B,CACjC7hC,WAAY,GACZ1B,eAAe,EACfC,YAAY,EACZ+iE,iBAAkB,EAClBC,eAAgB,IAMb1zH,EAAA0kG,sBAAuB,EASpB1kG,EAAAsrB,SAAW,IAAIC,EAAAA,QAKfvrB,EAAA2zH,SAAW,GAIX3zH,EAAA4zH,MAAQ,EAIR5zH,EAAA6zH,SAAU,EAIV7zH,EAAA42F,eAAgB,EAIhB52F,EAAA8zH,UAAW,EAIX9zH,EAAAwI,aAAe,EAIfxI,EAAA4iG,oBAAsB,EAItB5iG,EAAA+zH,SAAiC,GAIjC/zH,EAAAmlG,eAAuC,GAIvCnlG,EAAAklG,iBAAyC,GAIzCllG,EAAAg0H,0BAAuD,IAAI3wH,GAAyB8K,GAAeV,KAInGzN,EAAAi9E,oBAAiD,GAIjDj9E,EAAAi0H,qBAAuB,KAIvBj0H,EAAAk0H,eAAgB,EAIhBl0H,EAAAm0H,gBAAiB,EAIjBn0H,EAAAo0H,iBAAmB,KAInBp0H,EAAAq0H,iBAAmB,KAInBr0H,EAAAs0H,iBAAmB,KAInBt0H,EAAAu0H,eAAiB,KACjBv0H,EAAAw0H,iBAAkB,EAClBx0H,EAAAy0H,YAAcziB,GAAWC,YAG3BjyG,EAAA00H,mBAAqB,GACrB10H,EAAA20H,mBAAqB,GACrB30H,EAAA2hC,QAAU,OACV3hC,EAAAmiG,OAAS,OAEPniG,EAAA40H,wBAAyB,EAE3B50H,EAAA60H,uBAAyB,EAGzB70H,EAAA80H,YAAchxC,IACd9jF,EAAA+0H,eAAiB,GACjB/0H,EAAAg1H,iBAAmB,GACnBh1H,EAAAi1H,aAAenxC,IACf9jF,EAAAk1H,eAAiBpxC,IACjB9jF,EAAAm1H,gBAAkB,GAClBn1H,EAAAo1H,eAAgB,EAIhBp1H,EAAAq1H,2BAA6B,GAE7Br1H,EAAAs1H,iBAAmBC,GAAoB/uG,OACvCxmB,EAAAw1H,wBAA0BC,GAA2BnE,mBAErDtxH,EAAA01H,2BAA6B,IAAIh1B,GAA6B,CAClEz4E,oBAAqBC,GAAoBnC,MACzCoC,kBAAmBC,GAAkBlC,OACrCmC,qBAAsBH,GAAoBrC,KAC1CyC,mBAAoBF,GAAkBlC,OACtCsC,eAAgB,OAGZxoB,EAAA21H,gBAAkB,CACtBlqG,eAAgB,IAAImK,GACpBlK,OAAO,EACPC,qBAAqB,EACrBkF,OAAQ7wB,EAAK41H,mBACbpqG,iBAAkBxrB,EAAK01H,4BAsFvB11H,EAAK61H,cAAgB,WACjB71H,EAAKq+C,KAAKnS,IAAI,WAAM,OAAAlsC,EAAK81H,0BAm2FrC,OArsKmD9yH,EAAAA,EAAAA,GAG/ChV,OAAAgC,eAAWmjH,EAAAzkH,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKunI,8CAehB/nI,OAAAgC,eACImjH,EAAAzkH,UAAA,kBAAe,KAOnB,WACI,OAAOF,KAAKqjI,sBAThB,SACoBlhI,GAChBnC,KAAKqjI,iBAAmB7jI,OAAOa,OAAO,GAAIL,KAAKqjI,iBAAkBlhI,oCA6CrE3C,OAAAgC,eAAWmjH,EAAAzkH,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAKwlI,0BAA0B1wH,cAW1C,SAA0B3S,GACtBnC,KAAKwlI,0BAA0B1wH,SAAW3S,mCAY9C3C,OAAAgC,eAAImjH,EAAAzkH,UAAA,2BAAwB,KAA5B,WACI,OAAOF,KAAKwlI,+BAkBhB,SAA6BrjI,GACzB,GAAIA,GAASA,aAAiB0S,GAA0B,CAEpD,QADMyK,EAAG,EACA9M,EAAQ,EAAGA,EAAQ8M,EAAIvK,kBAAkBpU,OAAQ6R,IACtD,KAAM8M,EAAIvK,kBAAkBvC,aAAkBqC,IAA2B,KAC/D+H,EAAqB,IAAI/H,GAAyB8K,GAAeV,IAAKK,EAAIvK,kBAAkBvC,GAAOpB,WACzGwL,EAAmB7H,kBAAkBvS,KAAK8c,EAAIvK,kBAAkBvC,IAChE8M,EAAIvK,kBAAkBvC,GAASoK,MAKjC4qH,EAA+B,IAAI3yH,GAAyB1S,EAAM2S,SAAU3S,EAAMiP,WACxFo2H,EAA6BzyH,kBAAoB5S,EAAM4S,kBACvD/U,KAAKwlI,0BAA4BgC,EAE7BxnI,KAAKwzG,iBAAiB4V,oCACtBppH,KAAKiW,aAAe,MAGxBjW,KAAKwzG,iBAAiBC,qBACtBzzG,KAAKsZ,eAAeC,oBACpBvZ,KAAKye,iDAQbjf,OAAAgC,eACImjH,EAAAzkH,UAAA,SAAM,KADV,WAEI,OAAIF,KAAKw3E,QACEx3E,KAAKw3E,QAEL,UAOf,SAAWr1E,GACPnC,KAAKw3E,QAAUr1E,mCAWnB3C,OAAAgC,eACImjH,EAAAzkH,UAAA,SAAM,KADV,WAEI,OAAOF,KAAKqlI,aAUhB,SAAWljI,GACPnC,KAAKqlI,QAAUljI,EACfnC,KAAKga,eAEDha,KAAKomI,yBACLpmI,KAAKwe,IAAIyhB,gBACTjgC,KAAK67H,sBACL77H,KAAKwe,IAAIyhB,kDAWjBzgC,OAAAgC,eACImjH,EAAAzkH,UAAA,OAAI,KADR,WAEI,OAAOF,KAAKolI,WAOhB,SAAS9lH,GACDA,IAAQtf,KAAKolI,OAAS9lH,EAAM,GAAKA,EAAMtf,KAAKynI,WAAa,IAI7DznI,KAAKikI,aAAahrH,KAAK,CAAEyuH,SAAU1nI,KAAKolI,MAAO3/C,QAASnmE,IACxDtf,KAAKolI,MAAQ9lH,EACbtf,KAAKwe,IAAIC,iDAWbjf,OAAAgC,eACImjH,EAAAzkH,UAAA,UAAO,KADX,WAEI,OAAOF,KAAKmlI,cAUhB,SAAY7lH,GACJA,EAAM,IAIVtf,KAAK8jG,iBAAiBx6D,QACtBtpC,KAAKmlI,SAAW7lH,EAChBtf,KAAKgc,KAAO,EACZhc,KAAK8b,SAAQ,GACb9b,KAAKwe,IAAIC,iDAqBbjf,OAAAgC,eACImjH,EAAAzkH,UAAA,eAAY,KADhB,WAEI,OAAOF,KAAK0lI,mBAWhB,SAAiBvjI,GACTnC,KAAK0lI,gBAAkBvjI,IACvBnC,KAAK0lI,cAAgBvjI,EACjBnC,KAAKmgB,QAAQxM,OACb3T,KAAKye,eACDze,KAAKomI,wBACLpmI,KAAKsnI,wDAgBrB9nI,OAAAgC,eAAImjH,EAAAzkH,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKooG,mBAUhB,SAAkB9oF,GACdtf,KAAKooG,cAAgB9oF,EACjBtf,KAAKmgB,QAAQxM,MAAQ3T,KAAK6V,aAG1B7V,KAAK+oG,iBAAkB,EACvB/oG,KAAK2nI,kBACL3nI,KAAKsnI,uDAIb9nI,OAAAgC,eACImjH,EAAAzkH,UAAA,eAAY,KADhB,WAEI,OAAOF,KAAKslI,cAUhB,SAAiBhmH,GACbtf,KAAKslI,SAAWhmH,EACZtf,KAAKmgB,QAAQxM,MAAQ3T,KAAK6V,YAC1B7V,KAAKsnI,sDAqBb9nI,OAAAgC,eAAImjH,EAAAzkH,UAAA,cAAW,KAAf,WACI,OAAOF,KAAK6kI,kBAShB,SAAgBvlH,IACRA,GAAQtf,KAAKuW,aAAevE,WAAiC,OAApBhS,KAAKuW,YAC9C4lB,QAAQC,KAAK,yEAEjBp8B,KAAK6kI,aAAevlH,EAChBtf,KAAKmgB,QAAQxM,MACb3T,KAAK4nI,oDAcbpoI,OAAAgC,eAAWmjH,EAAAzkH,UAAA,SAAM,KAAjB,WACI,OAAOF,KAAKmzC,aAUhB,SAAkBhxC,GAAlB,IAAAqP,EAAAxR,KACQA,KAAKmzC,UAAYhxC,IACjBnC,KAAKmzC,QAAUhxC,EACfo2C,sBAAsB,WACb/mC,EAAKwzE,aACNxzE,EAAKk6F,SACLl6F,EAAKgN,IAAIC,oDAgBzBjf,OAAAgC,eAAWmjH,EAAAzkH,UAAA,QAAK,KAAhB,WACI,OAAOF,KAAK2zG,YAUhB,SAAiBxxG,GAAjB,IAAAqP,EAAAxR,KACQA,KAAK2zG,SAAWxxG,IAChBnC,KAAK2zG,OAASxxG,EACdo2C,sBAAsB,WAIb/mC,EAAKwzE,YACNxzE,EAAKk6F,6CAarBlsG,OAAAgC,eAAImjH,EAAAzkH,UAAA,cAAW,KAAf,WACI,OAAOw1C,SAAS11C,KAAK2zG,OAAQ,IAAM,oCAgCvCn0G,OAAAgC,eAAWmjH,EAAAzkH,UAAA,YAAS,KAApB,WACI,OAAOF,KAAKo3B,WAAap3B,KAAKo3B,WAAap3B,KAAKqzH,sBAUpD,SAAqBlxH,GACjBnC,KAAKo3B,WAAase,SAASvzC,EAAO,qCAYtC3C,OAAAgC,eAAWmjH,EAAAzkH,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKm3B,kBAEhB,SAAuBh1B,GACnBnC,KAAKm3B,aAAeh1B,EACpBnC,KAAKk2G,sBAAuB,mCAqBhC12G,OAAAgC,eACImjH,EAAAzkH,UAAA,mBAAgB,KAOpB,WACI,OAAOF,KAAKsjI,mBAAqBtjI,KAAKmoH,gBAAgB8O,gCAT1D,SACqB90H,GACjBnC,KAAKsjI,kBAAoBnhI,mCAiB7B3C,OAAAgC,eACImjH,EAAAzkH,UAAA,YAAS,KAUb,WACI,OAAOF,KAAKwjI,gBAZhB,SACcrhI,GACVnC,KAAKwjI,WAAarhI,EACdnC,KAAKmgB,QAAQxM,MACb3T,KAAKye,gDA8Bbjf,OAAAgC,eACImjH,EAAAzkH,UAAA,2BAAwB,KAO5B,WACI,OAAOF,KAAKujI,2BAA6BvjI,KAAKmoH,gBAAgB6O,wCATlE,SAC6B70H,GACzBnC,KAAKujI,0BAA4BphI,mCA6BrC3C,OAAAgC,eAAImjH,EAAAzkH,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK2lI,oBAWhB,SAAkBxjI,GACVnC,KAAK2lI,iBAAmBxjI,IACxBnC,KAAK2lI,eAAiBxjI,EAClBnC,KAAKmgB,QAAQxM,OACb3T,KAAKye,eACDze,KAAKomI,wBACLpmI,KAAKsnI,wDAuBrB9nI,OAAAgC,eACImjH,EAAAzkH,UAAA,iBAAc,KADlB,WAEI,OAAOF,KAAKgmI,qBAWhB,SAAmB7jI,GACXnC,KAAKgmI,kBAAoB7jI,IACzBnC,KAAKgmI,gBAAkB7jI,EACnBnC,KAAK67G,aACL77G,KAAK67G,YAAc15G,GAlzBT,GAAA,IAozBVnC,KAAKomI,wBACDpmI,KAAKozH,sBACLpzH,KAAK6nI,SAAShqG,cAAct/B,MAAMqN,QAAa5L,KAAKozH,oBAAsB,GAAKpzH,KAAKqzH,kBAC/ElxH,GAASnC,KAAKujH,aAAeC,GAAWC,YAvzBvC,GAuzByE,GAAK,EAAC,MAI7FzjH,KAAKwzG,iBAAiB4O,oBAAqB,EAC3CpiH,KAAKwzG,iBAAiBuS,eAAiB,KAEvC/lH,KAAKwzG,iBAAiByT,mBAClBjnH,KAAKmgB,QAAQxM,MACb3T,KAAKye,iDAYjBjf,OAAAgC,eACImjH,EAAAzkH,UAAA,aAAU,KADd,WAEI,OAAOF,KAAKimI,iBAWhB,SAAe9jI,GACXnC,KAAKimI,YAAc9jI,mCAUvB3C,OAAAgC,eACImjH,EAAAzkH,UAAA,kBAAe,KADnB,WAEI,OAAOF,KAAK8mI,sBAWhB,SAAoB3kI,GAChBnC,KAAK8mI,iBAAmB3kI,EACpBnC,KAAKmgB,QAAQxM,MACb3T,KAAKye,gDAWbjf,OAAAgC,eACImjH,EAAAzkH,UAAA,yBAAsB,KAD1B,WAEI,OAAOF,KAAKgnI,6BAWhB,SAA2B7kI,GACvBnC,KAAKgnI,wBAA0B7kI,EAC3BnC,KAAKmgB,QAAQxM,OACb3T,KAAKsZ,eAAei6F,qBACpBvzG,KAAK8b,SAAQ,GACb9b,KAAK67H,sBACL77H,KAAKwe,IAAIC,iDA6jBjBjf,OAAAgC,eAAImjH,EAAAzkH,UAAA,mBAAgB,KAApB,WACI,OAAOF,KAAK8nI,aAAe73H,GAAQjQ,KAAK8nI,aAAaz3H,WAAa,oCAUtE7Q,OAAAgC,eAAImjH,EAAAzkH,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAKo3G,iBAAiBxgG,IAAI,SAACg0F,GAAgB,OAAAA,EAAYK,aAAYx0F,OAAO,SAACw0F,GAAe,OAAAA,qCAUrGzrG,OAAAgC,eAAImjH,EAAAzkH,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAKo3G,iBAAiBxgG,IAAI,SAACg0F,GAAgB,OAAAA,EAAYuM,aAAY1gG,OAAO,SAAC0gG,GAAe,OAAAA,qCASrG33G,OAAAgC,eAAWmjH,EAAAzkH,UAAA,mBAAgB,KAA3B,eACUyS,EAAM,IAAIylG,EAAAA,UAChB,IAAKp4G,KAAK+nI,gBACN,OAAOp1H,MAELq1H,EAAUhoI,KAAK+nI,gBAAgBtxH,OAAO,SAAC8M,GACzC,OAAoD,OAA7CA,EAAKke,QAAQ5D,cAActD,gBAGtC,OADA5nB,EAAI0wB,MAAM2kG,GACHr1H,mCAUXnT,OAAAgC,eAAWmjH,EAAAzkH,UAAA,UAAO,KAAlB,eACUyS,EAAM,IAAIylG,EAAAA,UAChB,IAAKp4G,KAAKioI,SACN,OAAOt1H,MAELu1H,EAAQloI,KAAKioI,SACdxxH,OAAO,SAAC8M,GACL,OAAoD,OAA7CA,EAAKke,QAAQ5D,cAActD,gBAErCrpB,KAAK,SAACY,EAAGvS,GACN,OAAOuS,EAAEU,MAAQjT,EAAEiT,QAG3B,OADAG,EAAI0wB,MAAM6kG,GACHv1H,mCAaXnT,OAAAgC,eAAWmjH,EAAAzkH,UAAA,cAAW,KAAtB,eACUyS,EAAM,IAAIylG,EAAAA,UAChB,IAAKp4G,KAAKmoI,aACN,OAAOx1H,MAELu1H,EAAQloI,KAAKmoI,aAAa1xH,OAAO,SAAC8M,GACpC,OAAoD,OAA7CA,EAAKke,QAAQ5D,cAActD,gBACnCrpB,KAAK,SAACY,EAAGvS,GACR,OAAOuS,EAAEU,MAAQjT,EAAEiT,QAGvB,OADAG,EAAI0wB,MAAM6kG,GACHv1H,mCAuCXnT,OAAAgC,eAAWmjH,EAAAzkH,UAAA,+BAA4B,KAAvC,WACI,OAAOF,KAAKooI,8BAA8B1+F,uCA8F9ClqC,OAAAgC,eAAWmjH,EAAAzkH,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAKqoI,kDAYhB7oI,OAAAgC,eAAWmjH,EAAAzkH,UAAA,qBAAkB,KAA7B,WACI,OAAOF,KAAKsoI,2DAMhB9oI,OAAAgC,eAAWmjH,EAAAzkH,UAAA,2BAAwB,KAAnC,WACI,OAAO,sCAsBXV,OAAAgC,eAAWmjH,EAAAzkH,UAAA,mBAAgB,KAA3B,WACI,OAAOF,KAAKuoI,cAAgBvoI,KAAKuoI,cAAgBvoI,KAAKwoI,wDAY1DhpI,OAAAgC,eAAWmjH,EAAAzkH,UAAA,gBAAa,KAAxB,eACUuV,EAAezV,KAAKoX,YAAYS,IACtC,OAAwB,OAAjBpC,EAAwBzV,KAAKiY,QAAQjD,KAAK,SAAA1S,GAAK,OAAAA,EAAEuU,QAAUpB,EAAarJ,KAAM,sCAMzF5M,OAAAgC,eAAWmjH,EAAAzkH,UAAA,2BAAwB,KAAnC,eACUsS,EAAQ8sG,EAAIt/G,KAAKwoG,cAAkBxoG,KAAKyoG,iBAAiBhyF,OAAO,SAAAnU,GAAK,OAACA,EAAEkrG,cAAav4F,UAAU,SAAA3S,GAAK,OAAAA,EAAEwiG,WAC5G,OAAkB,IAAXtyF,EAAeA,EAAQ,sCAMlChT,OAAAgC,eAAWmjH,EAAAzkH,UAAA,0BAAuB,KAAlC,eACUuoI,EAAiBnpB,EAAIt/G,KAAKwoG,cAAkBxoG,KAAKyoG,iBAAiBhyF,OAAO,SAAAnU,GAAK,OAACA,EAAEkrG,cACjFh7F,EAAQi2H,EAAeh3H,UAAUwD,UAAU,SAAA3S,GAAK,OAAAA,EAAEwiG,WACxD,OAAkB,IAAXtyF,EAAei2H,EAAe9nI,OAAS,EAAI6R,EAAQ,sCAmB9DhT,OAAAgC,eAAWmjH,EAAAzkH,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAK0oI,kBAAkB/nI,OAASX,KAAK0oI,kBAAoB1oI,KAAK2oI,oDAkBzEnpI,OAAAgC,eACImjH,EAAAzkH,UAAA,YAAS,KADb,WAEI,OAAOF,KAAKosD,yBAAyB,6CAGzC5sD,OAAAgC,eAAImjH,EAAAzkH,UAAA,cAAW,KAAf,eACUg6B,EAAWl6B,KAAKknI,2BAA2B/0B,MAAQ,yBAA2B,4BACpF,OAAUnyG,KAAKosD,yBAAyB,cAAa,IAAIlyB,mCAY7D16B,OAAAgC,eAAImjH,EAAAzkH,UAAA,cAAW,KAAf,WACI,OAAOF,KAAKga,8CAMhBxa,OAAAgC,eAAImjH,EAAAzkH,UAAA,qBAAkB,KAAtB,WACI,OAAOF,KAAKo0G,qDAYhB50G,OAAAgC,eAAImjH,EAAAzkH,UAAA,qBAAkB,KAAtB,WACI,OAAOF,KAAKyuF,yBAchB,SAAuBtsF,GACnBnC,KAAKyuF,oBAAsB5gF,GAAW1L,GACtCnC,KAAKwe,IAAIC,gDAUbjf,OAAAgC,eAAImjH,EAAAzkH,UAAA,sBAAmB,KAAvB,WACI,OAAOF,KAAKi+G,wBAAwBjxG,WAMxC,SAAwBA,GACpBhN,KAAKi+G,wBAAwBjxG,MAAQA,mCAWzCxN,OAAAgC,eAAImjH,EAAAzkH,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAKi+G,wBAAwBvkE,oBAWxC,SAAmB3pB,GACf/vB,KAAKi+G,wBAAwBvkE,eAAiB3pB,EAC9C/vB,KAAKwe,IAAIyhB,iDAMbzgC,OAAAgC,eAAImjH,EAAAzkH,UAAA,sBAAmB,KAAvB,WAMI,OALkC,OAA9BF,KAAKylI,uBACLzlI,KAAKylI,qBAAuBzlI,KAAKwpG,iBAC7BxpG,KAAK6V,WAAWiT,OAAO,SAACs3B,EAAKtqC,GAAQ,OAAAwM,KAAKC,IAAI69B,EAAKtqC,EAAIssF,WAAW,GAClEpiG,KAAK6V,WAAWiT,OAAO,SAACs3B,EAAKtqC,GAAQ,OAAAwM,KAAKC,IAAI69B,EAAKtqC,EAAIrC,QAAQ,IAEhEzT,KAAKylI,sDAShBjmI,OAAAgC,eAAImjH,EAAAzkH,UAAA,qBAAkB,KAAtB,WACI,OAAOF,KAAK6V,WAAWY,OAAO,SAACX,GAAQ,OAAoB,IAApBA,EAAI03F,cAAwC,IAAf13F,EAAI2R,SAAiB9mB,wCAY7FnB,OAAAgC,eAAImjH,EAAAzkH,UAAA,oBAAiB,KAArB,WACI,OAAOF,KAAKkmI,wBAWhB,SAAsB/jI,GAClBnC,KAAKkmI,mBAAqB/jI,mCAc9B3C,OAAAgC,eAAImjH,EAAAzkH,UAAA,oBAAiB,KAArB,WACI,OAAOF,KAAKmmI,wBAWhB,SAAsBhkI,GAClBnC,KAAKmmI,mBAAqBhkI,mCAM9B3C,OAAAgC,eAAImjH,EAAAzkH,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAK6pC,+CAsBhBrqC,OAAAgC,eAAWmjH,EAAAzkH,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAK4oI,kDAyBhBppI,OAAAgC,eAAWmjH,EAAAzkH,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKskI,kBAUhB,SAAuBprH,GACflZ,KAAKskI,eAAiBprH,IACtBlZ,KAAKskI,aAAeprH,EACpBlZ,KAAKwe,IAAIC,eACLze,KAAKomI,wBACLpmI,KAAKsnI,uDAcjB9nI,OAAAgC,eAAWmjH,EAAAzkH,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAKykI,mBAUhB,SAAwBvrH,GAChBlZ,KAAKykI,gBAAkBvrH,IACvBlZ,KAAKykI,cAAgBvrH,EACrBlZ,KAAKwe,IAAIC,eACLze,KAAKomI,wBACLpmI,KAAKsnI,uDAcjB9nI,OAAAgC,eAAWmjH,EAAAzkH,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAK6oI,sBAUhB,SAAuB3vH,GACflZ,KAAKukI,eAAiBrrH,IACtBlZ,KAAKukI,aAAerrH,EACpBlZ,KAAKwe,IAAIC,eACLze,KAAKomI,wBACLpmI,KAAKsnI,uDAcjB9nI,OAAAgC,eAAWmjH,EAAAzkH,UAAA,YAAS,KAApB,WACI,OAAOF,KAAK8oI,oBAUhB,SAAqB5vH,GACblZ,KAAKwkI,aAAetrH,IACpBlZ,KAAKwkI,WAAatrH,EAClBlZ,KAAKwe,IAAIC,eACLze,KAAKomI,wBACLpmI,KAAKsnI,uDAcjB9nI,OAAAgC,eAAWmjH,EAAAzkH,UAAA,aAAU,KAArB,WACI,OAAOF,KAAK0kI,iBAUhB,SAAsBxrH,GACdlZ,KAAK0kI,cAAgBxrH,IACrBlZ,KAAK0kI,YAAcxrH,EACnBlZ,KAAKwe,IAAIC,eACLze,KAAKomI,wBACLpmI,KAAKsnI,uDAcjB9nI,OAAAgC,eAAWmjH,EAAAzkH,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAK2kI,sBAUhB,SAA2BzrH,GACnBlZ,KAAK2kI,mBAAqBzrH,IAC1BlZ,KAAK2kI,iBAAmBzrH,EACxBlZ,KAAKwe,IAAIC,eACLze,KAAKomI,wBACLpmI,KAAKsnI,uDAcjB9nI,OAAAgC,eAAWmjH,EAAAzkH,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK4kI,oBAUhB,SAAyB1rH,GACjBlZ,KAAK4kI,iBAAmB1rH,IACxBlZ,KAAK4kI,eAAiB1rH,EACtBlZ,KAAKwe,IAAIC,eACLze,KAAKomI,wBACLpmI,KAAKsnI,uDAsNT3iB,EAAAzkH,UAAA66C,sBAAR,SAA8Bva,GAA9B,IAAAhvB,EAAAxR,KACIA,KAAKi+G,wBAAwB32E,SAAS9G,GAClChxB,MAAYxP,KAAKwxG,cAAa,GAClCxxG,KAAKqmF,oBAAqB,EAE1BrmF,KAAK6vD,KAAKnS,IAAI,WACVlsC,EAAKq+C,KAAKk5E,SAASvmG,KAAKkH,EAAAA,SAAShH,UAAU,WACvClxB,EAAKysG,wBAAwBtkE,YAAY1gC,KAAKzH,EAAKysG,wBAAwBjxG,SAG3EwE,EAAKuI,aACLvI,EAAKw3H,qCAAqCx3H,EAAK8I,eAEnD9I,EAAK60E,oBAAqB,IAG9BrmF,KAAKipI,gBAGDtkB,EAAAzkH,UAAAgpI,wBAAR,SAAgC1oG,GAAhC,IAAAhvB,EAAAxR,KACU84B,EAAa0H,EAAMx/B,OAAO83B,WAC5BtpB,MAAYxP,KAAKwxG,cAAa,GAClCxxG,KAAKk/G,gBAAgBxiE,UAAU5jB,GAC/B94B,KAAKmpI,kBAAkBj5H,QAAQ,SAAAk5H,GAAQ,OAAAA,EAAK1sF,UAAU5jB,KACtD94B,KAAKwe,IAAIC,eAETze,KAAK6vD,KAAKnS,IAAI,WACVlsC,EAAKq+C,KAAKk5E,SAASvmG,KAAKkH,EAAAA,SAAShH,UAAU,WACvClxB,EAAKktG,cAAc/kE,YAAY1gC,KAAKzH,EAAK0tG,gBAAgBlyG,WAIjEhN,KAAKipI,gBAOFtkB,EAAAzkH,UAAA+oI,aAAP,WAAA,IAAAz3H,EAAAxR,KACIA,KAAKyjI,WAAWvzH,QAAQ,SAAAm5H,GACpB73H,EAAKupB,eAAemE,KAAKmqG,GACzB73H,EAAKupB,eAAewC,SAASiF,KACzB/rB,EAAAA,OAAO,SAAA3U,GAAK,OAAAA,EAAEsK,KAAOi9H,IACrB5mG,EAAAA,UAAUjxB,EAAKsrB,WAAW4F,UAAU,WAChClxB,EAAKqsB,cAAckT,aAK3B4zE,EAAAzkH,UAAAopI,eAAR,SAAuB9oG,OACbv/B,EAAMu/B,EAAMv/B,IAAIiR,e5Kv0E9B,SAAgBq3H,EAAgBtoI,GAC5B,OAC+D,IADxD,CAAC,OAAQ,KAAM,OAAQ,QAAS,YAAa,UAAW,YAAa,aACxE,OAAQ,MAAO,QAAS,WAAY,KAAK6O,QAAQ7O,G4Ks0E5CsoI,CAAgBtoI,IAA0B,KAAlBu/B,EAAMm7B,SAA2B,QAAR16D,GAAyB,aAARA,GAA8B,WAARA,KACzFu/B,EAAMqH,iBACM,aAAR5mC,GACAjB,KAAKi+G,wBAAwBr/D,iBAC7B5+C,KAAK69B,cAAckT,SACJ,WAAR9vC,IACPjB,KAAKi+G,wBAAwBp/D,iBAC7B7+C,KAAK69B,cAAckT,WA6B/B4zE,EAAAzkH,UAAAspI,eAAA,eACIxpI,KAAKmgB,QAAQxM,KAAO3T,MACfoX,YAAYzD,KAAO3T,MACnBskF,WAAW3wE,KAAO3T,MAClBwzG,iBAAiB7/F,KAAO3T,MACxBsZ,eAAe3F,KAAO3T,MAG/B2kH,EAAAzkH,UAAAupI,gBAAA,WAAA,IAAAj4H,EAAAxR,KACU0pI,EAAajnG,EAAAA,UAAUziC,KAAK88B,UAElC98B,KAAKkkI,WAAW1hG,KAAKknG,GAAYhnG,UAAU,SAAAj2B,GAAQ,OAAA+E,EAAKo2H,iBAAiBn7H,KACzEzM,KAAKoe,aAAaokB,KAAKknG,GAAYhnG,UAAU,SAAAj2B,GACzC+E,EAAK8H,eAAesiH,iBAAkB,EACtCpqH,EAAK8H,eAAeC,kBAAkB9M,KAE1CzM,KAAKkW,aAAa6yB,cAAcvG,KAAKC,EAAAA,UAAUziC,KAAK88B,WAAW4F,UAAU,WACrElxB,EAAK8H,eAAeC,oBACpB/H,EAAKwI,eACLxI,EAAKiN,eACwD,IAAzDjN,EAAK0E,aAAaI,sBAAqB,GAAO3V,QAE1C6Q,EAAK2O,QAAQrB,oBACbtN,EAAKwK,SAKjBhc,KAAKikI,aAAazhG,KAAKknG,GAAYhnG,UAAU,WACzClxB,EAAKsK,SAAQ,GACbtK,EAAKsyF,iBAAiBx6D,QACtB93B,EAAKsyF,iBAAiB5hB,cAAgB,OAG1CliF,KAAKiwG,eAAeztE,KAAKknG,GAAYhnG,UAAU,WAAM,OAAAlxB,EAAKsK,SAAQ,KAClE9b,KAAK2rG,gBAAgBnpE,KAAKknG,GAAYhnG,UAAU,WAAM,OAAAlxB,EAAKsK,SAAQ,KAEnE9b,KAAK+6B,eAAesC,SAASmF,KAAKC,EAAAA,UAAUziC,KAAK88B,WAAW4F,UAAU,SAAClC,GAC/DhvB,EAAKupB,eAAeiE,eAAewB,EAAMp0B,IAAI0rB,SAASuK,SAAW7wB,EAAKqpF,iBACtErpF,EAAKiyH,WAAW3zH,QAAQ0wB,EAAMp0B,IAAM,GACpCoF,EAAKiyH,WAAWjhI,KAAKg+B,EAAMp0B,MAGnCpM,KAAK+6B,eAAewC,SAASiF,KAAKC,EAAAA,UAAUziC,KAAK88B,WAAW4F,UAAU,SAAClC,OAC7DmpG,EAAMn4H,EAAKiyH,WAAW3zH,QAAQ0wB,EAAMp0B,KAC7B,IAATu9H,GACAn4H,EAAKiyH,WAAW1sH,OAAO4yH,EAAK,MASjChlB,EAAAzkH,UAAAusC,SAAP,WACIzsC,KAAKwpI,iBACLxpI,KAAKypI,kBACLzpI,KAAK4pI,iBAAmB5pI,KAAKmjI,QAAQnuH,KAAK,IAAI7U,OAAO,MACrDH,KAAKmtG,UAAYntG,KAAK2zG,SAAwC,IAA9B3zG,KAAK2zG,OAAO7jG,QAAQ,KAAc4lC,SAAS11C,KAAK2zG,OAAQ,IAAM,EAC9F3zG,KAAK6pI,eAAiB7pI,KAAK0jI,aAC3B1jI,KAAKunI,aAAevnI,KAAK8pI,kBAGnBnlB,EAAAzkH,UAAA6pI,aAAV,WAAA,IAAAv4H,EAAAxR,KACQA,KAAK0jI,cACL1jI,KAAKgqI,sBAGThqI,KAAKiqI,YAAYjqI,KAAK6V,WAAY,SAACC,GAA4B,OAAAtE,EAAKuyH,aAAa9qH,KAAKnD,KAEtF9V,KAAK4pI,iBAAiBpsF,KAAKx9C,KAAK6V,YAChC7V,KAAKye,eACLze,KAAKqzG,cACLrzG,KAAKkqI,wBAELlqI,KAAK6V,WAAWknC,QACfva,KAAKC,EAAAA,UAAUziC,KAAK88B,WACpB4F,UAAU,SAAC2H,GAA4C74B,EAAK24H,iBAAiB9/F,MAO3Es6E,EAAAzkH,UAAAkqI,8BAAP,WACIpqI,KAAK6V,WAAW3F,QAAQ,SAAAkI,GAAU,OAAAA,EAAO48F,uBAOtC2P,EAAAzkH,UAAAmqI,gBAAP,eACUC,EAAetqI,KAAK4X,YAAY8xB,MAClC4gG,GACAA,EAAaxrB,WAAWr6D,gBAQzBkgE,EAAAzkH,UAAAqqI,uBAAP,WACIvqI,KAAK2mI,gBAAgBhmI,OAAS,EAC9BX,KAAKumI,eAAe5lI,OAAS,EAC7BX,KAAKwmI,iBAAiB7lI,OAAS,GAO5BgkH,EAAAzkH,UAAAsqI,kBAAP,WACIxqI,KAAK0mI,eAAiBpxC,IACtBt1F,KAAKymI,aAAenxC,IACpBt1F,KAAKsmI,YAAchxC,KAOhBqvB,EAAAzkH,UAAAmzG,YAAP,WACIrzG,KAAKqqI,kBACLrqI,KAAKoqI,gCACLpqI,KAAKuqI,yBACLvqI,KAAKwqI,oBACLxqI,KAAK4mI,cAAgB5mI,KAAK6V,WAAW2U,KAAK,SAAA1U,GAAO,OAAAA,EAAI03F,eAMlDmX,EAAAzkH,UAAAqgE,mBAAP,WACIvgE,KAAK+pI,gBAMFplB,EAAAzkH,UAAAumD,gBAAP,WAAA,IAAAj1C,EAAAxR,KAqBI,GApBAA,KAAK6vD,KAAKnoB,kBAAkB,WACxBl2B,EAAK0T,SAASif,YAAYhC,iBAAiB,SAAU3wB,EAAK61H,eAC1D71H,EAAKo0H,iBAAmBp0H,EAAK83H,eAAe7sF,KAAKjrC,GACjDA,EAAKqsB,cAAcsE,iBAAiB,UAAW3wB,EAAKo0H,oBAExD5lI,KAAKyqI,cAELzqI,KAAK0rD,iBAAiBlpB,KAAKC,EAAAA,UAAUziC,KAAK88B,WAAW4F,UAAU,WAC3D6V,sBAAsB,WAClB/mC,EAAK8H,eAAemiH,cAAgB,EACpCjqH,EAAKk6F,SACLl6F,EAAKysG,wBAAwB5+D,wBAGrCr/C,KAAKomI,wBAAyB,EAC9BpmI,KAAKsnI,sBAKAtnI,KAAK0qI,gBAAiB,CAavB1qI,KAAK+gE,UAAY,IAAI+B,iBAXJ,SAAC6nE,GAGF,EAFgBA,EAAcl0H,OAAO,SAACusD,GAC9C,MAAyB,cAAlBA,EAAStsD,OACjB/V,QACwB6Q,EAAKk5H,kBAC5Bl5H,EAAKk6F,SACLl6F,EAAKuvD,UAAUc,aACfrwD,EAAKuvD,UAAY,QAKzB/gE,KAAK+gE,UAAU8B,QAAQ7iE,KAAKklB,SAASS,KAbtB,CAAEw9C,WAAW,EAAMynE,SAAS,IAgB/C5qI,KAAKmoI,aAAaprF,QAAQva,KAAKC,EAAAA,UAAUziC,KAAK88B,WAAW4F,UAAU,SAAAmoG,GAC/D,OAAAr5H,EAAK23H,kBAAoB33H,EAAKs5H,wBAAwBD,EAAKx6H,UACtDoG,OAAO,SAAA8M,GAAQ,OAA6C,OAA7CA,EAAKke,QAAQ5D,cAActD,gBAAyB/oB,EAAKu2H,mBAEjF/nI,KAAK+nI,gBAAgBhrF,QAAQva,KAAKC,EAAAA,UAAUziC,KAAK88B,WAAW4F,UAAU,SAAAqoG,GAClE,OAAAv5H,EAAK23H,kBAAoB33H,EAAKs5H,wBAAwBt5H,EAAK22H,aAAc4C,EAAY16H,UAChFoG,OAAO,SAAA8M,GAAQ,OAA6C,OAA7CA,EAAKke,QAAQ5D,cAActD,mBAEnDv6B,KAAK6vD,KAAKnoB,kBAAkB,WACxBl2B,EAAKq0H,iBAAmBr0H,EAAKupC,sBAAsB0B,KAAKjrC,GACxDA,EAAKysG,wBAAwBzjE,oBAAoBrY,iBAAiB,SAAU3wB,EAAKq0H,oBAGrF7lI,KAAK6vD,KAAKnoB,kBAAkB,WACxBl2B,EAAKs0H,iBAAmBt0H,EAAK03H,wBAAwBzsF,KAAKjrC,GAC1DA,EAAKktG,cAAc9jE,sBAAsBzY,iBAAiB,SAAU3wB,EAAKs0H,oBAE7E9lI,KAAKmpI,kBAAoBnpI,KAAK8qI,wBAAwB9qI,KAAKmoI,aAAcnoI,KAAK+nI,qBACxEiD,EAAYhrI,KAAKi+G,wBAAwB1iE,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAClFmtG,EAAU7oG,iBAAiB,SAAU,SAAC8R,GAAUziC,EAAKi7E,cAAcx4C,KACnE+2F,EAAU7oG,iBAAiB,QAAS,WAAQ3wB,EAAKggG,iBAEjDxxG,KAAKi+G,wBAAwBrkE,cAAcpX,KAAKC,EAAAA,UAAUziC,KAAK88B,WAAW4F,UAAU,WAChF6V,sBAAsB,WACb/mC,EAAKwzE,YACNxzE,EAAKk6F,cAMbiZ,EAAAzkH,UAAA4qI,wBAAR,SAAgCG,EAAUF,GACtC,OAAOE,EAASr0H,IAAI,SAAAiB,GAAO,OAAAA,EAAIinG,aAAYn8G,OAAOooI,EAAYn0H,IAAI,SAAAiB,GAAO,OAAAA,EAAIinG,eAM1E6F,EAAAzkH,UAAAkkC,YAAP,WAAA,IAAA5yB,EAAAxR,KACIA,KAAK6vD,KAAKnoB,kBAAkB,WACxBl2B,EAAK0T,SAASif,YAAYF,oBAAoB,SAAUzyB,EAAK61H,eAC7D71H,EAAKqsB,cAAcoG,oBAAoB,UAAWzyB,EAAKo0H,kBACvDp0H,EAAKysG,wBAAwBzjE,oBAAoBvW,oBAAoB,SAAUzyB,EAAKq0H,kBACpFr0H,EAAKktG,cAAc9jE,sBAAsB3W,oBAAoB,SAAUzyB,EAAKs0H,sBACtEkF,EAAYx5H,EAAKysG,wBAAwB1iE,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAClFmtG,EAAU/mG,oBAAoB,SAAU,SAACgQ,GAAUziC,EAAKi7E,cAAcx4C,KACtE+2F,EAAU/mG,oBAAoB,QAAS,WAAQzyB,EAAKggG,mBAEpDxxG,KAAK+gE,WACL/gE,KAAK+gE,UAAUc,aAEnB7hE,KAAK88B,SAAS56B,MAAK,GACnBlC,KAAK88B,SAASuH,WACdrkC,KAAKglF,YAAa,GAMf2/B,EAAAzkH,UAAA8xF,YAAP,SAAmBxxD,GACfxgC,KAAK4vF,cAAc32E,KAAKunB,IAarBmkF,EAAAzkH,UAAAgrI,uBAAP,SAA8Bz+H,OACpBqJ,EAAMrJ,EAAK2L,OAASpY,KAAK6V,WAAWb,KAAK,SAAC7T,GAAM,OAAAA,IAAMsL,EAAK2L,SAAUpG,UAEtE8D,IAILA,EAAI2R,OAAShb,EAAKyM,SAClBlZ,KAAK06G,0BAA0BzhG,KAAKxM,GAEpCzM,KAAKye,iBAUTjf,OAAAgC,eAAImjH,EAAAzkH,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK49B,WAAWC,+CAM3Br+B,OAAAgC,eAAcmjH,EAAAzkH,UAAA,SAAM,KAApB,WACI,OAAOF,KAAK66F,iDAUhBr7F,OAAAgC,eAAImjH,EAAAzkH,UAAA,mBAAgB,KAApB,WACI,OAAQF,KAAK4rD,gBACT,KAAKC,GAAeT,KAChB,OAAO,GACX,KAAKS,GAAeR,QAChB,OAAO,GACX,QACI,OAAO,qCAInB7rD,OAAAgC,eAAImjH,EAAAzkH,UAAA,uBAAoB,KAAxB,WACI,OAAQF,KAAK4rD,gBACT,KAAKC,GAAeT,KAChB,OAAO,GACX,KAAKS,GAAeR,QAChB,OAAO,GACX,QACI,OAAO,qCAUnB7rD,OAAAgC,eAAImjH,EAAAzkH,UAAA,6BAA0B,KAA9B,WACI,OAAQF,KAAK4rD,gBACT,KAAKC,GAAeT,KAChB,OAAO,GACX,KAAKS,GAAeR,QAChB,OAAO,GACX,QACI,OAAO,qCAYnB7rD,OAAAgC,eAAImjH,EAAAzkH,UAAA,8BAA2B,KAA/B,WACI,OAAyB,GAAjBF,KAAKmtG,UAAkB,qCAWnC3tG,OAAAgC,eAAImjH,EAAAzkH,UAAA,uBAAoB,KAAxB,WACI,OAAyB,GAAjBF,KAAKmtG,UAAkB,qCAUnC3tG,OAAAgC,eAAImjH,EAAAzkH,UAAA,cAAW,KAAf,WACI,OAAK6iB,MAAM/iB,KAAKymI,gBAChBzmI,KAAKymI,aAAezmI,KAAKqrG,kBAClBrrG,KAAKymI,8CAUhBjnI,OAAAgC,eAAImjH,EAAAzkH,UAAA,gBAAa,KAAjB,WACI,OAAK6iB,MAAM/iB,KAAK0mI,kBAChB1mI,KAAK0mI,eAAiB1mI,KAAKu2G,oBACpBv2G,KAAK0mI,gDAQhBlnI,OAAAgC,eAAWmjH,EAAAzkH,UAAA,sBAAmB,KAA9B,WACI,OAAOF,KAAKmrI,0DAMhB3rI,OAAAgC,eAAImjH,EAAAzkH,UAAA,kBAAe,KAAnB,WACI,OAAOF,KAAKqe,eAAiBre,KAAK2oG,aAAe3oG,KAAK8zG,oBAAsB,mCAUhFt0G,OAAAgC,eAAImjH,EAAAzkH,UAAA,UAAO,KAAX,WACI,OAAOF,KAAKulI,0CAUhB/lI,OAAAgC,eAAImjH,EAAAzkH,UAAA,gBAAa,KAAjB,WACI,OAAIF,KAAKumI,eAAe5lI,SAGxBX,KAAKumI,eAAiBvmI,KAAK22G,eAAelgG,OAAO,SAAAX,GAAO,OAACA,EAAI2R,UAFlDznB,KAAKumI,gDAapB/mI,OAAAgC,eAAImjH,EAAAzkH,UAAA,kBAAe,KAAnB,WACI,OAAIF,KAAKwmI,iBAAiB7lI,SAG1BX,KAAKwmI,iBAAmBxmI,KAAK02G,iBAAiBjgG,OAAO,SAACX,GAAQ,OAACA,EAAI2R,UAFxDznB,KAAKwmI,kDAUb7hB,EAAAzkH,UAAAo2H,oBAAP,SAA2Bl+G,GACvB,GAAIpY,KAAKwpG,iBACL,MAAO,OAELqK,EAAWz7F,EAAO1I,MAClBq7F,EAAW/qG,KAAKorI,2BAGtB,QAF0Bv3B,GAAgC,iBAAbA,IAAoD,IAA3BA,EAAS/jG,QAAQ,OAE7D4lC,SAASt9B,EAAO1I,MAAO,IAAMq7F,EAC5CA,EAAS77F,WAGbkJ,EAAO1I,OAWXi1G,EAAAzkH,UAAAo+G,gBAAP,SAAuB1oG,GACnB,OAAO5V,KAAK6V,WAAWb,KAAK,SAACc,GAAQ,OAAAA,EAAIC,QAAUH,KAWhD+uG,EAAAzkH,UAAAkhH,cAAP,SAAqB5uG,GACjB,OAAOxS,KAAKmgB,QAAQpI,iBAAiBvF,IAYlCmyG,EAAAzkH,UAAAmrI,YAAP,SAAmBC,GACf,OAAOtrI,KAAKmgB,QAAQzI,eAAe4zH,IAUvC9rI,OAAAgC,eAAImjH,EAAAzkH,UAAA,iBAAc,KAAlB,WACI,OAAIF,KAAK2mI,gBAAgBhmI,SAGzBX,KAAK2mI,gBAAkB3mI,KAAK6V,WAAWY,OAAO,SAAAtV,GAAK,OAACA,EAAEsmB,UAF3CznB,KAAK2mI,iDAebhiB,EAAAzkH,UAAAqrI,gBAAP,SAAuBvzH,EAAkBwzH,OAC/BpkB,EAAWpnH,KAAK6V,WAAWe,IAAI,SAACwB,GAAW,OAAAA,EAAOrC,QAAOjG,QAAQ07H,GACvE,IAAkB,IAAdpkB,EACA,OAAOpnH,KAAKmgB,QAAQ9H,kBAAkBL,EAAUovG,IAcjDzC,EAAAzkH,UAAAurI,aAAP,SAAoB9zH,EAAkB6zH,GAClC,OAAOxrI,KAAKmgB,QAAQjI,gBAAgBP,EAAa6zH,IAUrDhsI,OAAAgC,eAAImjH,EAAAzkH,UAAA,aAAU,KAAd,WACI,OAAIF,KAAKqlH,YACErlH,KAAKqlH,YAAYzjH,SAASghB,YAE7B,mCAWZpjB,OAAAgC,eAAImjH,EAAAzkH,UAAA,eAAY,KAAhB,WACI,GAAIF,KAAKqlH,YACL,OAAOrlH,KAAKqlH,YAAYzjH,SAASihB,8CAWzCrjB,OAAAgC,eAAImjH,EAAAzkH,UAAA,cAAW,KAAf,WACI,OAAqB,IAAdF,KAAKgc,sCAUhBxc,OAAAgC,eAAImjH,EAAAzkH,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKgc,KAAO,GAAKhc,KAAKynI,4CAUjCjoI,OAAAgC,eAAImjH,EAAAzkH,UAAA,aAAU,KAAd,WACI,IAAK6iB,MAAM/iB,KAAKsmI,aAAgB,OAAOtmI,KAAKsmI,YAK5C,QAHM72G,EAAOzvB,KAAKuoG,eAAe9xF,OAAO,SAAAX,GAAO,OAAc,IAAdA,EAAIrC,QAAgBqC,EAAImS,SACnEi4B,EAAa,EACb1/C,EAAI,EACAA,EAAIivB,EAAK9uB,OAAQH,IACrB0/C,GAAcxK,SAASjmB,EAAKjvB,GAAG2sG,UAAW,KAAO,EAGrD,OADAntG,KAAKsmI,YAAcpmF,mCAIvB1gD,OAAAgC,eAAImjH,EAAAzkH,UAAA,oBAAiB,KAArB,WACI,OAAOF,KAAKqe,eAAiBre,KAAKqc,QAAQ1b,OAASX,KAAK46G,oDAMlD+J,EAAAzkH,UAAA62G,aAAV,SAAuBpmG,EAA0B+6H,EAAwB9xE,OAC/DixE,EAAO7qI,KAAK6V,WAAWxF,UACvBs7H,EAAYd,EAAK/6H,QAAQa,GAC3Bi7H,EAAUf,EAAK/6H,QAAQ47H,GAEvB9xE,IAAQw3C,GAAalC,oBACrB08B,EACc,IACVA,EAAU,GAIdhyE,IAAQw3C,GAAajC,iBACrBy8B,IAGJf,EAAK9zH,OAAMlW,MAAXgqI,EAAInoI,EAAA,CAAQkpI,EAAS,GAAMf,EAAK9zH,OAAO40H,EAAW,SAC5CE,EAAU7rI,KAAK8rI,iBAAiBjB,GACtC7qI,KAAK6V,WAAWwtB,MAAMwoG,GACtB7rI,KAAK6V,WAAWk2H,kBAChB/rI,KAAKulI,SAAWvlI,KAAK6V,WAAWxF,WAM1Bs0G,EAAAzkH,UAAA4rI,iBAAV,SAA2BjB,GAClBA,IACDA,EAAO7qI,KAAK6V,WAAWxF,eAEvBw7H,EAAU,GAOd,OANAhB,EAAKp0H,OAAO,SAAAtV,GAAK,OAAY,IAAZA,EAAEsS,QAAavD,QAAQ,SAAAtQ,GACpCisI,EAAQrpI,KAAK5C,GACTA,EAAE4tG,cACFq+B,EAAUA,EAAQlpI,OAAO/C,EAAEg1G,gBAG5Bi3B,GAMDlnB,EAAAzkH,UAAA8rI,sBAAV,SAAgCr7H,EAA0B+6H,EAAwBxxG,OACxEjS,EAASjoB,KAAK22G,eAChBs1B,EAAYhkH,EAAOnY,QAAQ47H,GAE3BA,EAAGl+B,cACHy+B,GAAaP,EAAG92B,YAAYj0G,QAG5Bu5B,IAAak3E,GAAalC,kBAC1B+8B,IAGA/xG,IAAak3E,GAAajC,iBAC1B88B,IAGJhkH,EAAOlR,OAAMlW,MAAbonB,EAAMvlB,EAAA,CAAQupI,EAAW,GAAMhkH,EAAOlR,OAAOkR,EAAOnY,QAAQa,GAAO,MAM7Dg0G,EAAAzkH,UAAAgsI,kBAAV,SAA4Bx4H,EAA4B/C,EAA0B+6H,EAAwB9xE,OAChGuyE,EAASz4H,EAAOtD,SAASC,UACzBs7H,EAAYQ,EAAOr8H,QAAQa,GAC7Bi7H,EAAUO,EAAOr8H,QAAQ47H,GAEzB9xE,IAAQw3C,GAAalC,kBACrB08B,IAGAhyE,IAAQw3C,GAAajC,iBACrBy8B,IAGJO,EAAOp1H,OAAMlW,MAAbsrI,EAAMzpI,EAAA,CAAQkpI,EAAS,GAAMO,EAAOp1H,OAAO40H,EAAW,KACtDj4H,EAAOtD,SAASizB,MAAM8oG,IASnBxnB,EAAAzkH,UAAAyxG,WAAP,SAAkBv5F,EAA4Bg0H,EAAgCxyE,QAAA,IAAAA,IAAAA,EAAoBw3C,GAAaxgG,UAEvGspB,EAAW0/B,EACT+xE,EAAYvzH,EAAOwP,aACnBgkH,EAAUQ,EAAWxkH,aAW3B,GARIsS,EADA0/B,IAAQw3C,GAAalC,kBAAoBy8B,EAAYC,EAC1Cx6B,GAAalC,iBACjBt1C,IAAQw3C,GAAajC,iBAA+By8B,EAAZD,EACpCv6B,GAAajC,gBAEbiC,GAAaxgG,KAIvBwH,EAAO3E,QAAU24H,EAAW34H,OAC5B2E,EAAOuyF,iBAAmByhC,EAAWzhC,eAD1C,CAmBA,GAdA3qG,KAAK8b,SAAQ,GACT1D,EAAO3E,OACPzT,KAAKksI,kBAAkB9zH,EAAO1E,OAAQ0E,EAAQg0H,EAAYlyG,GAG1DkyG,EAAWnkH,QAAU7P,EAAO6P,QAC5BjoB,KAAKgsI,sBAAsB5zH,EAAQg0H,EAAYlyG,GAG/CkyG,EAAWnkH,SAAW7P,EAAO6P,SAC7B7P,EAAO47F,MACPh0G,KAAKgsI,sBAAsB5zH,EAAQg0H,EAAYlyG,KAG9CkyG,EAAWnkH,QAAU7P,EAAO6P,OAAQ,CACrC7P,EAAO67F,YAED42B,EAAO7qI,KAAK6V,WAAWxF,UACvBg8H,EAAKxB,EAAK/6H,QAAQsI,GAClBk0H,EAAKzB,EAAK/6H,QAAQs8H,GAGpBlyG,EADA0/B,IAAQw3C,GAAalC,kBAAoBm9B,EAAKC,EACnCl7B,GAAalC,iBACjBt1C,IAAQw3C,GAAajC,iBAAwBm9B,EAALD,EACpCj7B,GAAajC,gBAEbiC,GAAaxgG,KAIhC5Q,KAAK+2G,aAAa3+F,EAAQg0H,EAAYlyG,GACtCl6B,KAAKwe,IAAIyhB,oBAEHxzB,EAAO,CACTy2F,OAAQ9qF,EACRpX,OAAQorI,GAGZpsI,KAAK0xG,kBAAkBz4F,KAAKxM,KAUzBk4G,EAAAzkH,UAAAqsI,SAAP,WACSvsI,KAAK+e,aACN/e,KAAKgc,MAAQ,IAWd2oG,EAAAzkH,UAAAssI,aAAP,WACSxsI,KAAKysI,cACNzsI,KAAKgc,MAAQ,IAYd2oG,EAAAzkH,UAAAwsI,SAAP,SAAgBptH,GACRA,EAAM,GAAKA,EAAMtf,KAAKynI,WAAa,IAIvCznI,KAAKgc,KAAOsD,IAUTqlG,EAAAzkH,UAAAue,aAAP,WACIze,KAAKwe,IAAIyhB,iBAeN0kF,EAAAzkH,UAAAysI,OAAP,SAAcx7H,GACVnR,KAAKmgB,QAAQrC,aAAa3M,GAE1BnR,KAAKkkI,WAAWjrH,KAAK,CAAE9H,KAAIA,IAC3BnR,KAAKga,eACLha,KAAKwe,IAAIC,gBAaNkmG,EAAAzkH,UAAA0sI,UAAP,SAAiBj1H,GACT3X,KAAKuW,aAAevE,WAAiC,OAApBhS,KAAKuW,YACtCvW,KAAKie,cAActG,IAKpBgtG,EAAAzkH,UAAA+d,cAAP,SAAqBC,GACjBle,KAAKmgB,QAAQlC,cAAcC,IAMrBymG,EAAAzkH,UAAA6d,kBAAV,SAA4BlH,EAAYrE,GAGpC,IAAe,IAAXA,EACA,GAAIxS,KAAKkW,aAAaC,QAAS,KACrBiE,EAA2B,CAAEhO,GAAIyK,EAAOH,KAAMC,GAAgBtB,OAAQ6D,SAAU,MACtFlZ,KAAKkW,aAAa/J,IAAIiO,EAAapa,KAAKmR,KAAKqB,SAE7CxS,KAAKmR,KAAK4F,OAAOvE,EAAO,OAEzB,KACGxF,EAAehN,KAAKkW,aAAawE,SAAS7D,GAChD7W,KAAKkW,aAAa/J,IAAI,CAAEC,GAAIyK,EAAOH,KAAMC,GAAgBtB,OAAQ6D,SAAU,MAAQlM,GAASA,EAAMgR,aAenG2mG,EAAAzkH,UAAA2sI,WAAP,SAAkB1qI,EAAYwV,EAAkBS,GAC5C,GAAIpY,KAAK8sI,UAAU9sI,KAAKuW,YAAa,KAC3BT,EAAM9V,KAAK6V,WAAWxF,UAAU2E,KAAK,SAAA7T,GAAK,OAAAA,EAAE4U,QAAUqC,IAC5D,GAAItC,EAAK,KAECgC,EAAU9X,KAAKmgB,QAAQnJ,WAAWW,GAClCnF,EAAQxS,KAAKmgB,QAAQjJ,sBAAsBS,GAEjD,GAAInF,EAAQ,EACR,WAEEpG,EAAK,CACPyK,MAAOc,EACPkpF,SAAU/qF,EAAItD,MACdwF,SAAUxF,GAGRgF,EAAO,IAAI2oF,GAAQ/zF,EAAIoG,EAAOsD,EAAKgC,EAAQhC,EAAIC,OAAQ+B,EAAQhC,EAAIC,OAAQ+B,GAC3ErL,EAAOzM,KAAKmgB,QAAQzH,YAAYlB,EAAMrV,GAE5C,GAAInC,KAAKoX,YAAYI,MAAQxX,KAAKoX,YAAYwpF,SAASppF,GAAO,CAC1D,GAAI/K,EAAKmM,OACL,OAEJ5Y,KAAKmgB,QAAQhJ,kBAGjBnX,KAAKwe,IAAIC,kBAkBdkmG,EAAAzkH,UAAA6sI,UAAP,SAAiB5qI,EAAYwV,GACzB,GAAI3X,KAAK8sI,UAAU9sI,KAAKuW,YAAa,KAC3By2H,EAAehtI,KAAKoX,YAAYI,KAClCw1H,GAAgBA,EAAa5gI,GAAGyK,QAAUc,GAC1C3X,KAAKmgB,QAAQhJ,sBAEXU,EAAM,IAAIqoF,GAAOvoF,GAAc,EAAG3X,KAAKmgB,QAAQnJ,WAAWW,IAChE3X,KAAKmgB,QAAQxF,WAAW9C,EAAK1V,GAC7BnC,KAAKwe,IAAIC,iBAYVkmG,EAAAzkH,UAAAgR,KAAP,SAAYuB,GACRzS,KAAK8b,SAAQ,GACTrJ,aAAsB9S,MACtBK,KAAKmgB,QAAQ7E,cAAc7I,GAE3BzS,KAAKmgB,QAAQjP,KAAKuB,GAEtBzS,KAAKgkI,cAAc/qH,KAAKxG,IAgBrBkyG,EAAAzkH,UAAAuW,OAAP,SAAcb,EAAczT,EAAYwkH,EACpCr1G,GACAtR,KAAKwzG,iBAAiB/8F,OAAOb,EAAMzT,EAAOwkH,EAA2Br1G,IAalEqzG,EAAAzkH,UAAA8mH,aAAP,SAAoB7kH,EAAYia,EAAY9K,GACxCtR,KAAKwzG,iBAAiBwT,aAAa7kH,EAAOia,EAAW9K,IAgBlDqzG,EAAAzkH,UAAA+sI,gBAAP,eAAuB,IAAAC,EAAA,GAAAxgI,EAAA,EAAAA,EAAAhM,UAAAC,OAAA+L,IAAAwgI,EAAAxgI,GAAAhM,UAAAgM,GACC,IAAhBwgI,EAAKvsI,QAAgBhB,MAAMmP,QAAQo+H,EAAK,IACxCltI,KAAKmtI,mBAAmBD,EAAK,IAAI,GAEjCltI,KAAK2yG,WAAWu6B,EAAK,IAAI,EAAMA,EAAK,IAExCltI,KAAK67H,sBACL77H,KAAKwe,IAAIyhB,iBAeN0kF,EAAAzkH,UAAAktI,iBAAP,eAAwB,IAAAF,EAAA,GAAAxgI,EAAA,EAAAA,EAAAhM,UAAAC,OAAA+L,IAAAwgI,EAAAxgI,GAAAhM,UAAAgM,GACA,IAAhBwgI,EAAKvsI,QAAgBhB,MAAMmP,QAAQo+H,EAAK,IACxCltI,KAAKqtI,0BAA0BH,EAAK,IAEpCltI,KAAK2yG,WAAWu6B,EAAK,IAAI,IAa1BvoB,EAAAzkH,UAAAwmH,YAAP,SAAmB9wG,GACf5V,KAAKwzG,iBAAiBkT,YAAY9wG,IAY/B+uG,EAAAzkH,UAAAytH,UAAP,SAAiB/3G,GACRA,EAIA5V,KAAKmgB,QAAQxK,mBAAmBC,IAGrC5V,KAAKmgB,QAAQ1D,WAAW7G,GANpB5V,KAAKob,mBAAqB,IAa3BupG,EAAAzkH,UAAAqZ,kBAAP,SAAyB9M,KAMlBk4G,EAAAzkH,UAAA0nI,iBAAP,SAAwBn7H,GACpBzM,KAAK8b,SAAQ,GACb9b,KAAKsZ,eAAeC,kBAAkB9M,IAcnCk4G,EAAAzkH,UAAAotI,UAAP,SAAiBh7G,EAAyC9f,GAEtD,OADY8f,aAAsBu+E,GAAqBv+E,EAAatyB,KAAKs+G,gBAAgBhsF,IAC9E0hF,IAAIxhG,IAYZmyG,EAAAzkH,UAAAqtI,YAAP,SAAmBj7G,EAAyC9f,GAExD,OADY8f,aAAsBu+E,GAAqBv+E,EAAatyB,KAAKs+G,gBAAgBhsF,IAC9E2hF,MAAMzhG,IAWdmyG,EAAAzkH,UAAAwrG,OAAP,WACI1rG,KAAKsnI,sBAOF3iB,EAAAzkH,UAAAkzG,qBAAP,aAcOuR,EAAAzkH,UAAAstI,SAAP,SAAgBlrE,EAAcL,EAAyBC,GACnD,OAAOliE,KAAKgV,KAAKstD,EAAM,EAAGL,EAAeC,IActCyiD,EAAAzkH,UAAAutI,SAAP,SAAgBnrE,EAAcL,EAAyBC,GACnD,OAAOliE,KAAKgV,KAAKstD,GAAO,EAAGL,EAAeC,IAYvCyiD,EAAAzkH,UAAAoX,cAAP,SAAqBo2H,GAArB,IAAAl8H,EAAAxR,KACI,GAAIA,KAAKwlG,eAAe7hC,WAAY,CAGhC,GAFA3jE,KAAK2tI,oBAEDD,EAAkB,KACZE,EAAa/sE,GAA0Ba,mBAAmBn1D,IAAIvM,KAAKoM,IACzEpM,KAAKwlG,eAAe0/B,eAAeh1H,QAAQ,SAACumD,EAAOj2D,GAC3Ci2D,EAAMr+C,SAAWw1H,EAAWx1H,QAC5Bq+C,EAAM5+C,MAAQ+1H,EAAW/1H,KACzB4+C,EAAMjkD,QAAUo7H,EAAWp7H,QAC3BhB,EAAKg0F,eAAey/B,iBAAmBzkI,KAKnD,OAAOR,KAAKgV,KAAKhV,KAAKwlG,eAAe7hC,WAAY,EAAG3jE,KAAKwlG,eAAevjC,cAAejiE,KAAKwlG,eAAetjC,YAAY,GAEvH,OAAO,GAWRyiD,EAAAzkH,UAAA2tI,YAAP,WACI7tI,KAAKwlG,eAAiB,CAClB7hC,WAAY,GACZ1B,eAAe,EACfC,YAAY,EACZ+iE,iBAAkB,EAClBC,eAAgB,IAGpBllI,KAAKiY,QAAQ/H,QAAQ,SAAC2H,GACdA,EAAIM,OACJN,EAAIM,MAAMjI,QAAQ,SAAC/O,GACfA,EAAEygE,sBAalBpiE,OAAAgC,eAAImjH,EAAAzkH,UAAA,qBAAkB,KAAtB,WACI,OAAOF,KAAK6V,WAAW2U,KAAK,SAAC1U,GAAQ,OAAAA,EAAIw8F,4CAU7C9yG,OAAAgC,eAAImjH,EAAAzkH,UAAA,qBAAkB,KAAtB,WACI,OAAOF,KAAK6V,WAAW2U,KAAK,SAAC1U,GAAQ,OAAAA,EAAIgvF,4CAU7CtlG,OAAAgC,eAAImjH,EAAAzkH,UAAA,uBAAoB,KAAxB,WACI,OAAOF,KAAK6V,WAAW2U,KAAK,SAAC1U,GAAQ,OAAAA,EAAIi6E,8CAU7CvwF,OAAAgC,eAAImjH,EAAAzkH,UAAA,uBAAoB,KAAxB,WACI,OAAOF,KAAKsZ,eAAeO,sDAM/Bra,OAAAgC,eAAImjH,EAAAzkH,UAAA,uBAAoB,KAAxB,WACI,OAAOF,KAAK8tI,yBAA2B7G,GAA2BpE,iDAStErjI,OAAAgC,eAAImjH,EAAAzkH,UAAA,oBAAiB,KAArB,WACI,OAAOF,KAAK6V,YAAc7V,KAAK6V,WAAW2U,KAAK,SAAC1U,GAAQ,OAAAA,EAAI25F,2CAUhEjwG,OAAAgC,eAAImjH,EAAAzkH,UAAA,kBAAe,KAAnB,WACI,OAAOF,KAAK4mI,+CAShBpnI,OAAAgC,eAAWmjH,EAAAzkH,UAAA,mBAAgB,KAA3B,WACI,QAASF,KAAK6V,WAAW2U,KAAK,SAAA1U,GAAO,OAAAA,EAAI20F,gDAU7CjrG,OAAAgC,eAAImjH,EAAAzkH,UAAA,gBAAa,KAAjB,WACI,OAAIF,KAAK4X,YACE5X,KAAK4X,YAAYhB,IAAI,SAACiB,GAAQ,OAAAA,EAAIM,MAAM1B,OAAO,SAACe,GAAS,OAAAA,EAAKoD,aAChEkO,OAAO,SAAChX,EAAGvS,GAAM,OAAAuS,EAAEnP,OAAOpD,IAAI,IAEhC,oCAMXC,OAAAgC,eAAImjH,EAAAzkH,UAAA,wBAAqB,KAAzB,WACI,OAAOF,KAAKqmI,wDAMhB7mI,OAAAgC,eAAcmjH,EAAAzkH,UAAA,iBAAc,KAA5B,WACI,OAAOF,KAAK+tI,WAAa/tI,KAAKkU,2CAMlC1U,OAAAgC,eAAcmjH,EAAAzkH,UAAA,iBAAc,KAA5B,WACI,OAAOF,KAAK2zG,SAAwC,IAA9B3zG,KAAK2zG,OAAO7jG,QAAQ,sCAM9CtQ,OAAAgC,eAAcmjH,EAAAzkH,UAAA,kBAAe,KAA7B,WACI,OAAOF,KAAKmzC,UAA0C,IAA/BnzC,KAAKmzC,QAAQrjC,QAAQ,sCAOtC60G,EAAAzkH,UAAAgqI,sBAAV,WACI,GAAKlqI,KAAKguI,iBAAoBhuI,KAAKmzC,SAAYnzC,KAAK0qI,iBAA2C,IAAxB1qI,KAAKiuI,eAG5E,GAAKjuI,KAAK69B,cAAc+C,YAAe5gC,KAAK69B,cAAc+C,WAAWnI,aAG9D,KACGy1G,EAAeluI,KAAK69B,cAAc+C,WAAWjxB,wBAAwB/D,OAC3E5L,KAAKmzC,QAAUnzC,KAAKiuI,gBAAkBC,EAAe,KAAOluI,KAAKmzC,YALc,KACzEg7F,EAAiBjpH,SAASqT,gBAAgBE,aAChDz4B,KAAKmzC,QAAUnzC,KAAKiuI,gBAAkBE,EAAiB,KAAOA,EAAej/H,aAW3Ey1G,EAAAzkH,UAAAkuI,qBAAV,WAAA,IAAA58H,EAAAxR,KACSA,KAAKk2G,uBACNl2G,KAAKm3B,aAAen3B,KAAK+zG,yBACzB/zG,KAAK6V,WAAW3F,QAAQ,SAACkI,GACrB,GAAI5G,EAAKg4F,kBAAoB9zD,SAASlkC,EAAK2lB,aAAc,IAAK,KACpDk3G,EAAsB34F,SAASlkC,EAAK2lB,aAAc,KAAO/e,EAAO6sF,OAAS7sF,EAAO6sF,OAAS7sF,EAAO8sF,SAAW,GACjH9sF,EAAOw7F,aAAey6B,EAAsB,UAE5Cj2H,EAAOw7F,aAAepiG,EAAK2lB,eAGnCn3B,KAAKwqI,sBAObhrI,OAAAgC,eAAcmjH,EAAAzkH,UAAA,0BAAuB,KAArC,eACUouI,EAAWtuI,KAAK05C,gBAAkB15C,KAAK+tI,WAC7C,OAAO/tI,KAAKkU,UAAYoO,KAAKG,IAAIziB,KAAK6mI,2BAClC7mI,KAAK+b,OAASuG,KAAKG,IAAI6rH,EAAUtuI,KAAK2e,SAAW2vH,oCAO/C3pB,EAAAzkH,UAAA27H,oBAAV,WAQI,GAPA77H,KAAKkqI,wBAEDlqI,KAAKozH,sBACLpzH,KAAK6nI,SAAShqG,cAAct/B,MAAMqN,QAAa5L,KAAKozH,oBAAsB,GAAKpzH,KAAKqzH,kBAC/ErzH,KAAKsjH,gBAAkBtjH,KAAKujH,aAAeC,GAAWC,YA32H7C,GA22H+E,GAAK,EAAC,MAEvGzjH,KAAKuuI,gBAAkB,GAClBvuI,KAAKmzC,QAKN,OAJAnzC,KAAK67G,WAAa,UACd77G,KAAK6Z,sBAAwB7Z,KAAKu+G,uBAClCv+G,KAAKuuI,gBAAkBvuI,KAAKsZ,eAAe+iH,yBAK/Cr8H,KAAK6Z,sBAAwB7Z,KAAKu+G,uBAClCv+G,KAAKuuI,gBAAkBvuI,KAAKsZ,eAAe+iH,wBAG/Cr8H,KAAK67G,WAAa77G,KAAKwuI,4BAMjB7pB,EAAAzkH,UAAAuuI,mBAAV,WACI,OAAO,GAMD9pB,EAAAzkH,UAAAwuI,iBAAV,eACQC,EAAgB,EAKpB,OAJI3uI,KAAK4uI,aAAmC,MAApB5uI,KAAK+kI,cACzB4J,EAAgB3uI,KAAK+kI,YAAYlnG,cAAcukC,kBAC3CpiE,KAAK+kI,YAAYlnG,cAAckY,aAAe,GAE/C44F,GAMDhqB,EAAAzkH,UAAA2uI,gBAAV,eACQC,EAAe,EAKnB,OAJI9uI,KAAK+b,QAAU/b,KAAK+uI,YACpBD,EAAe9uI,KAAK+uI,UAAUlxG,cAAcukC,kBACxCpiE,KAAK+uI,UAAUlxG,cAAckY,aAAe,GAE7C+4F,GAKDnqB,EAAAzkH,UAAAsuI,yBAAV,eAOQ5yB,EANEozB,EAA6BhvI,KAAKivI,MAAMpxG,cAAckY,aACxD/1C,KAAKivI,MAAMpxG,cAAcpF,aACvBy2G,EAAWlvI,KAAKklB,SAASif,YAAYwtB,iBAAiB3xD,KAAK69B,eAC3D8wG,EAAgB3uI,KAAK0uI,mBACrBI,EAAe9uI,KAAK6uI,kBACpBM,EAAkBnvI,KAAKyuI,qBAG7B,GAAIzuI,KAAKguI,gBAAiB,CAEtB,IAA0D,IAAtDkB,EAASE,iBAAiB,UAAUt/H,QAAQ,KAG5C,OAAO9P,KAAKqvI,wBAFZzzB,EAAalmE,SAASw5F,EAASE,iBAAiB,UAAW,SAK/DxzB,EAAalmE,SAAS11C,KAAKmzC,QAAS,QAElCvnC,EAAS0W,KAAKukB,IAAI+0E,EAAa+yB,EAC7B3uI,KAAK6nI,SAAShqG,cAAckY,aAC5B/1C,KAAKuuI,gBAAkBO,EACvBK,EAAkBH,EAClBhvI,KAAKq+C,IAAIxgB,cAAcpF,cAE/B,GAAe,IAAX7sB,GAAgBmX,MAAM64F,GAAa,KAC7B0zB,EAAatvI,KAAKqvI,wBACxB,OAAoB,EAAbC,EAAiBA,EAAa,KAGzC,OAAO1jI,GAGXpM,OAAAgC,eAAWmjH,EAAAzkH,UAAA,aAAU,KAArB,WACI,OAAOF,KAAKuvI,mBAAqBvvI,KAAKmtG,UAAYntG,KAAKwvI,YAAcxvI,KAAKmtG,2CAOvEwX,EAAAzkH,UAAAqqG,wBAAP,eACQ3+F,EAAS5L,KAAK6nI,SAAShqG,cAAcpF,aAAez4B,KAAK+jH,MAAMlmF,cAAcpF,aAIjF,OAHIz4B,KAAK6Z,uBACLjO,GAAU5L,KAAKivI,MAAMpxG,cAAcpF,cAEhC7sB,GAMJ+4G,EAAAzkH,UAAA6zG,uBAAP,SAA8B07B,OACtBC,OADsB,IAAAD,IAAAA,EAAA,MAGtBC,EADc,OAAdD,EACgBA,EAEAzvI,KAAKmtG,WACjBz3D,SAAS11C,KAAKklB,SAASif,YAAYwtB,iBAAiB3xD,KAAK69B,eAAeuxG,iBAAiB,SAAU,IAGvGpvI,KAAK0oG,oBACLgnC,GAAiB1vI,KAAK2vI,wBAA0B3vI,KAAK2vI,wBAAwB9xG,cAAc8gF,YAAc,OAGvGixB,EAAsB5vI,KAAKuoG,eAAe9xF,OAAO,SAAAtV,GAAK,OAACA,EAAEqsG,cAI3DqiC,EAAc,GAEZC,EADe9vI,KAAKuoG,eAAe9xF,OAAO,SAAAtV,GAAK,OAAAA,EAAEqsG,cACrB52F,IAAI,SAAAm5H,GAAS,OAAAA,EAAMr6B,2BAA2Bq6B,EAAM3/H,YAChF4/H,EAAqBF,EAAahnH,OAAO,SAACs3B,EAAK78B,GAAS,OAAA68B,EAAM78B,EAAK5iB,QAAQ,GACjFmvI,EAAa5/H,QAAQ,SAAA+/H,GAAa,OAAAJ,EAAcA,EAAYltI,OAAOstI,SAG7DC,EAAuBlwI,KAAKwpG,iBAC9BqmC,EAAYp5H,OAAO,SAAAtV,GAAK,OAAAA,EAAEuyG,iBAC1Bk8B,EAAoBn5H,OAAO,SAAAtV,GAAK,OAAAA,EAAEuyG,iBAEhCy8B,EAAgBnwI,KAAKwpG,iBACvBwmC,EAAqBE,EAAqBvvI,OAC1CivI,EAAoBjvI,OAASuvI,EAAqBvvI,OAEhDyvI,EAAoBF,EACrBpnH,OAAO,SAAC88D,EAAMyqD,OACLx8B,EAAWw8B,EAAK3gI,MAChB4gI,EAAa56F,SAASm+D,EAAU,IAItC,OAAOjuB,GAHWiuB,GAAgC,iBAAbA,IAAoD,IAA3BA,EAAS/jG,QAAQ,KAC3EwgI,EAAa,IAAMZ,EACnBY,IAEL,GAMP,OAJoBhuH,KAAKmC,MAAOlH,OAAO+iF,SAAS8vC,GAE5C9tH,KAAKC,KAAKmtH,EAAgBU,GAAqBD,EA//H9B,KA8/HjB7tH,KAAKC,IAAImtH,EAAgBS,EA9/HR,MAigIFjhI,YAOby1G,EAAAzkH,UAAAqwI,mBAAV,eACQ7gI,EACEw/H,EAAWlvI,KAAKklB,SAASif,YAAYwtB,iBAAiB3xD,KAAK69B,eAC3D1tB,EAAKnQ,KAAKklB,SAASsrH,eAAexwI,KAAK69B,cAAczxB,MAIvDsD,EAFA1P,KAAKywI,gBAEwD,IAArDvB,EAASE,iBAAiB,SAASt/H,QAAQ,KAC/C4lC,SAASw5F,EAASE,iBAAiB,SAAU,IAAM,KAE/C15F,SAAS11C,KAAK2zG,OAAQ,MAGpBxjG,IACVT,EAAQS,EAAGwuG,aAIVjvG,IACDA,EAAQ1P,KAAK6V,WAAWiT,OAAO,SAACw5B,EAAK/+B,GAAU,OAAA++B,EAAM5M,SAAUnyB,EAAK7T,OAAS6T,EAAKqwF,aAAe,KAAK,IAGtG5zG,KAAKuvI,qBACL7/H,GAAS1P,KAAKwvI,aAEdjyH,OAAO+iF,SAAS5wF,IAAUA,IAAU1P,KAAKmtG,YACzCntG,KAAKmtG,UAAYz9F,EACjB1P,KAAKwe,IAAIyhB,iBAEbjgC,KAAKouI,wBAGFzpB,EAAAzkH,UAAAqvI,iBAAP,WACI,IAAKvvI,KAAKomI,uBAA0B,OAAO,MACrCprF,EAAeh7C,KAAKi+G,wBAAwBjjE,eAClD,SAAUh7C,KAAKmtG,WAAantG,KAAKi+G,wBAAwBvjE,UACV,EAA/C16C,KAAKi+G,wBAAwBvjE,SAAS/5C,QACtCq6C,IAMM2pE,EAAAzkH,UAAAiqI,iBAAV,SAA2B9/F,GAA3B,IAAA74B,EAAAxR,KACUw9C,EAAOx9C,KAAK4pI,iBAAiBpsF,KAAKnT,GACxC,GAAImT,EAAM,KACFkzF,GAAQ,EACRC,GAAU,EAEd3wI,KAAKiqI,YAAYjqI,KAAK6V,YAGtB2nC,EAAKssC,iBAAiB,SAACryE,GACnBjG,EAAKuyH,aAAa9qH,KAAKxB,EAAO8L,MAC9BmtH,GAAQ,IAGZlzF,EAAK6G,mBAAmB,SAAC5sC,GAErBjG,EAAK2O,QAAQ5D,aAAa9E,EAAO8L,KAAKxN,OAGtCvE,EAAK2O,QAAQ1D,WAAWhF,EAAO8L,KAAKxN,OACpC46H,GAAU,IAGd3wI,KAAKqzG,eAEDq9B,GAASC,KACT3wI,KAAKsZ,eAAeC,oBACpBvZ,KAAKsnI,sBAGbtnI,KAAKye,gBAMCkmG,EAAAzkH,UAAAonI,mBAAV,WASItnI,KAAKqzG,kBACCu9B,EAAY5wI,KAAKuvI,mBACvBvvI,KAAKuwI,qBACLvwI,KAAKwe,IAAIyhB,gBACTjgC,KAAKqzG,cACLrzG,KAAK67H,sBAED77H,KAAK+Z,aACL/Z,KAAK6wI,4BAA4B7wI,KAAKsa,eAG1Cta,KAAKwe,IAAIyhB,gBACTjgC,KAAKqzG,cAEDu9B,IAAc5wI,KAAKuvI,qBACnBvvI,KAAKuwI,qBACLvwI,KAAKwe,IAAIyhB,gBACTjgC,KAAKqzG,gBAUNsR,EAAAzkH,UAAAirI,uBAAP,eACQz7H,EAAQ,EAQZ,OANI1P,KAAK2vI,0BACLjgI,GAAS1P,KAAK2vI,wBAAwB9xG,cAAcluB,wBAAwBD,OAE5E1P,KAAK8wI,sBACLphI,GAAS1P,KAAK8wI,oBAAoBjzG,cAAcluB,wBAAwBD,OAErEA,GAWJi1G,EAAAzkH,UAAAmrG,eAAP,SAAsB0lC,gBAAA,IAAAA,IAAAA,GAAA,OACZC,EAAKD,EAAa/wI,KAAK22G,eAAiB32G,KAAKwoG,cAC/ClmD,EAAM,MACV,IAAkB,IAAA2uF,EAAAziI,EAAAwiI,GAAEE,EAAAD,EAAA/uI,QAAAgvI,EAAA9uI,KAAA8uI,EAAAD,EAAA/uI,OAAE,CAAjB,IAAM4T,EAAGo7H,EAAA/uI,MACQ,IAAd2T,EAAIrC,QACJ6uC,GAAO5M,SAAS5/B,EAAIpG,MAAO,0GAKnC,OAFA4yC,GAAOtiD,KAAK8zG,qBAWN6Q,EAAAzkH,UAAAq2G,iBAAV,SAA2Bw6B,QAAA,IAAAA,IAAAA,GAAA,OACnBrhI,EAAQ1P,KAAKywI,eACbzwI,KAAKmtG,UACLz3D,SAAS11C,KAAK2zG,OAAQ,IAI1B,OAHI3zG,KAAKuvI,qBAAuBvvI,KAAKywI,iBACjC/gI,GAAS1P,KAAKwvI,aAEX9/H,EAAQ1P,KAAKqrG,eAAe0lC,IAM7BpsB,EAAAzkH,UAAAyyG,WAAV,SAAqBvhG,EAAmBmrH,EAAqB4U,OACnD/4H,EAASpY,KAAKmgB,QAAQxK,mBAAmBvE,GAC3CgH,IACAA,EAAOmkH,WAAaA,EAChB4U,IACInxI,KAAKu+G,sBAAwBv+G,KAAKsZ,eAAeqiH,oBACrDvjH,EAAOurC,UAAYwtF,KAQrBxsB,EAAAzkH,UAAAitI,mBAAV,SAA6B96H,EAAmCkqH,GAAhE,IAAA/qH,EAAAxR,KACIqS,EAAYnC,QAAQ,SAACuxB,GACjBjwB,EAAKmhG,WAAWlxE,EAAQrwB,UAAWmrH,EAAY96F,EAAQ2vG,kBAMrDzsB,EAAAzkH,UAAAmtI,0BAAV,SAAoCh7H,GAApC,IAAAb,EAAAxR,KACIqS,EAAYnC,QAAQ,SAACkI,OACXka,EAAala,GAAUA,EAAOhH,UAAYgH,EAAOhH,UAAYgH,EACnE5G,EAAKmhG,WAAWrgF,GAAY,MAO1BqyF,EAAAzkH,UAAAmxI,iBAAV,SAA2Bv6H,GACvB,MAAmB,iBAARA,EACAwG,GAASC,OACM,kBAARzG,EACPwG,GAASyD,QACM,iBAARjK,GAAoBA,aAAelI,KAC1C0O,GAAS1O,KAEb0O,GAASwD,QAGZ6jG,EAAAzkH,UAAA4pI,eAAR,eACUhoF,EAAM58B,SAASC,cAAc,OAC7B5mB,EAAQujD,EAAIvjD,MAClBA,EAAMmR,MAAQ,QACdnR,EAAMqN,OAAS,QACfrN,EAAM27B,SAAW,WACjB37B,EAAM45B,IAAM,WACZ55B,EAAM45B,IAAM,WACZ55B,EAAM+Q,SAAW,SACjB4V,SAASS,KAAKC,YAAYk8B,OACpB0tF,EAAc1tF,EAAI68D,YAAc78D,EAAItpB,YAE1C,OADAtT,SAASS,KAAKG,YAAYg8B,GACnB0tF,GAMD7qB,EAAAzkH,UAAA8pI,oBAAV,WAAA,IAAAx4H,EAAAxR,KACUmR,EAAOnR,KAAKmgB,QAAQ3C,WACpB6+B,EAAUr8C,KAAKy5C,SAASpY,wBAAwBwvE,IAChDygC,EAAStxI,KAAKuxI,mBAAmBpgI,GACjCkL,EAAU,GAEhBi1H,EAAOphI,QAAQ,SAAC6F,OACNkgG,EAAMzkG,EAAK4xH,QAAQ5nF,gBAAgBa,EAAS,KAAM7qC,EAAK4xH,QAAQ9hG,UACrE20E,EAAIjlG,SAAS+E,MAAQA,EACrBkgG,EAAIjlG,SAASqM,SAAW7L,EAAK6/H,iBAAiBlgI,EAAK,GAAG4E,IACtDkgG,EAAIj2E,kBAAkBC,gBACtB5jB,EAAQ7Z,KAAKyzG,EAAIjlG,YAGrBhR,KAAK6V,WAAWwtB,MAAMhnB,GAClBlL,GAAsB,EAAdA,EAAKxQ,SACbX,KAAK6pI,gBAAiB,IAIpBllB,EAAAzkH,UAAAqxI,mBAAV,SAA6BpgI,GACzB,OAAO3R,OAAOiP,KAAK0C,GAAwB,IAAhBA,EAAKxQ,OAAewQ,EAAK,GAAK,KAM7DwzG,EAAAzkH,UAAAsxI,aAAA,SAAaxjI,GACT,OAAOA,EAAIyI,OAAO,SAAAtV,GAAK,OAAY,IAAZA,EAAEsS,SAMnBkxG,EAAAzkH,UAAA+pI,YAAV,SAAsB/sH,EAA2C0yD,GAAjE,IAAAp+D,EAAAxR,KAcI,QAd6D,IAAA4vE,IAAAA,EAAA,MAE7D5vE,KAAK4mI,cAAgB5mI,KAAK6V,WAAW2U,KAAK,SAAA1U,GAAO,OAAAA,EAAI03F,cACjDxtG,KAAKwpG,kBAELxpG,KAAK6V,WAAW3F,QAAQ,SAAC4F,GACrB,GAAIA,EAAI20F,aAAc,KACZgnC,EAAa37H,EAAI1F,SACtB0F,EAAI1F,SAAS0Y,OAAO,SAACs3B,EAAK9gC,GAAQ,OAAAgD,KAAKC,IAAIjD,EAAI8iF,SAAW9iF,EAAIylF,YAAc,EAAG3kD,IAAM,GACrF,EACA5uC,EAAK60H,uBAAyB/jH,KAAKC,IAAIkvH,EAAYjgI,EAAK60H,2BAIjErmI,KAAKwpG,kBAAoBxpG,KAAKmzH,gBAAiB,KAGzCue,EAAsB1xI,KAAK6V,WAAWY,OAAO,SAACX,GAAQ,OAAAA,EAAI20F,cAAiB30F,EAAIpC,QAAUoC,EAAIpC,OAAO+2F,eAC1GzqG,KAAK6V,WAAWwtB,MAAMquG,GAE1B1xI,KAAKulI,SAAWvlI,KAAK6V,WAAWxF,UAChC6M,EAAWhN,QAAQ,SAACkI,GAChBA,EAAOzE,KAAOnC,EACd4G,EAAOw7F,aAAepiG,EAAKugB,YAC3BvgB,EAAKmgI,mBAAmBv5H,GAEpBw3D,GACAA,EAAGx3D,KAIXpY,KAAKg3G,mBAGD2N,EAAAzkH,UAAAyxI,mBAAR,SAA2Bv5H,GAEnBpY,KAAK+Z,aAAmC,OAApB3B,EAAO0sF,UAC3B1sF,EAAOrC,OAASqC,EAAOrC,QAAU/V,KAAKuW,aACtC6B,EAAO0sF,SAAW9kG,KAAK+Z,cAOrB4qG,EAAAzkH,UAAA82G,gBAAV,WACQh3G,KAAKmzH,kBACLnzH,KAAK22G,eAAiB32G,KAAK6V,WAAWY,OAAO,SAACtV,GAAM,OAAAA,EAAE8mB,UAE1DjoB,KAAK02G,iBAAmB12G,KAAK6V,WAAWY,OAAO,SAACtV,GAAM,OAACA,EAAE8mB,UAMtD08F,EAAAzkH,UAAAwtH,gBAAP,SAAuBt8G,GACnB,OAAO,GAMJuzG,EAAAzkH,UAAA0xI,sBAAP,SAA6BpxG,EAAOvqB,GAChCjW,KAAK+oG,gBAAkBvoE,EAAMu9B,YACvB/vB,EACFxN,EAAMu9B,QACF9nD,EACIjW,KAAKyZ,UAAU40B,UAAUruC,KAAKoM,GAAIpM,KAAKyZ,UAAUy1B,YAAYj5B,EAAcjW,KAAKuW,aAChFvW,KAAKyZ,UAAUy1B,YAAYlvC,KAAKmgB,QAAQlJ,cAAa,GAAOjX,KAAKuW,YACrEN,EACIjW,KAAKyZ,UAAUi1B,aAAa1uC,KAAKoM,GAAIpM,KAAKyZ,UAAUy1B,YAAYj5B,EAAcjW,KAAKuW,aACnFvW,KAAKyZ,UAAUw0B,YAC3BjuC,KAAK6oG,0BAA0B76D,EAAc,KAAMxN,EAAOA,EAAMu9B,SAChE/9D,KAAKue,0BAA0BiiB,EAAMu9B,UAMzCv+D,OAAAgC,eAAImjH,EAAAzkH,UAAA,0BAAuB,KAA3B,WACI,OAAiE,EAA1DF,KAAKwlI,0BAA0BzwH,kBAAkBpU,OACpDX,KAAK6xI,gBAAkB7xI,KAAK6xI,eAAe9zE,QAAU,wBAA0B,sBAC/E/9D,KAAK6xI,gBAAkB7xI,KAAK6xI,eAAe9zE,QAAU,eAAiB,8CAMvE4mD,EAAAzkH,UAAAqe,0BAAP,SAAiCuzH,GAC7B,GAAIA,IAAiB9/H,UAAW,KACtBiE,EAAejW,KAAKwzG,iBAAiBv9F,aACrC83H,EAAa93H,EAAeA,EAAatV,OAASX,KAAK+tI,WAC7D/tI,KAAK+oG,gBAAkB/oG,KAAKyZ,UAAUs1B,iBAAiB/uC,KAAKoM,GAAI2hI,GAC5D/tI,KAAK6xI,iBACL7xI,KAAK6xI,eAAezrD,eAAiBpmF,KAAK+oG,kBAAoB/oG,KAAKyZ,UAAUw1B,kBAAkBjvC,KAAKoM,IAC/FpM,KAAK6xI,eAAezrD,gBACrBpmF,KAAK6xI,eAAe9zE,QAChB/9D,KAAK+oG,kBAGjB/oG,KAAKwe,IAAIC,oBACFze,KAAK6xI,iBACZ7xI,KAAK6xI,eAAe9zE,QAAU+zE,IAAiB9/H,WAAY8/H,IAO5DntB,EAAAzkH,UAAA6xI,oBAAP,SAA2BhkG,EAAqB93B,EAAqBM,WAC3Dy7H,EAAgBhyI,KAAKyZ,UAAUlN,IAAIwhC,GACrCkkG,GAAqB,EACrBC,GAAiB,EACrB,GAAIF,MACA,IAAkB,IAAAzjI,EAAAC,EAAAhP,OAAOiP,KAAKwH,IAAavH,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAAxC,IAAMjB,EAAGyN,EAAAvM,MACJgwI,EAAW57H,EAAaN,EAAahV,GAAKsV,GAAcN,EAAahV,GAC3E,GAAI+wI,EAAcnjG,IAAIsjG,IAElB,GADAF,GAAqB,EACjBC,EACA,MAAO,qBAIX,GADAA,GAAiB,EACbD,EACA,MAAO,qHAKvB,OAAOA,EAAqB,cAAgB,gBAMzCttB,EAAAzkH,UAAAkyI,mCAAP,SAA0CjhI,GACtC,GAAKA,EAIL,OAAQnR,KAAK+xI,oBAAoB/xI,KAAKoM,GAAI+E,EAAMnR,KAAKuW,aACjD,IAAK,cACIvW,KAAK+oG,kBACN/oG,KAAK+oG,iBAAkB,GAEvB/oG,KAAK6xI,eAAezrD,gBACpBpmF,KAAK6xI,eAAezrD,eAAgB,GAExC,MAEJ,IAAK,eACGpmF,KAAK+oG,kBACL/oG,KAAK+oG,iBAAkB,GAEvB/oG,KAAK6xI,eAAezrD,gBACpBpmF,KAAK6xI,eAAezrD,eAAgB,GAExC,MAEJ,QACSpmF,KAAK6xI,eAAezrD,gBACrBpmF,KAAK6xI,eAAezrD,eAAgB,GAEpCpmF,KAAK+oG,kBACL/oG,KAAK+oG,iBAAkB,QA3B/B/oG,KAAKue,6BA0CNomG,EAAAzkH,UAAAmyI,aAAP,eACQ54H,EAEJ,OADAA,EAAYzZ,KAAKyZ,UAAUlN,IAAIvM,KAAKoM,KACjBzM,MAAMgR,KAAK8I,GAAa,IAYxCkrG,EAAAzkH,UAAAoyI,WAAP,SAAkBC,EAAehgD,GAAjC,IACQvkD,EADRx8B,EAAAxR,KAEQwyI,EAAiB,GAEjBA,EADAxyI,KAAKkW,aAAaC,QACDo8H,EAAO97H,OAAO,SAAAnU,GAAK,OAACkP,EAAK2O,QAAQtB,wBAAwBvc,KAEzDiwI,EAErBvkG,EAAehuC,KAAKyZ,UAAU40B,UAAUruC,KAAKoM,GAAIomI,EAAgBjgD,GACjEvyF,KAAK6oG,0BAA0B76D,IAW5B22E,EAAAzkH,UAAAoe,aAAP,SAAoBi0H,OACZvkG,EACJA,EAAehuC,KAAKyZ,UAAUi1B,aAAa1uC,KAAKoM,GAAImmI,GACpDvyI,KAAK6oG,0BAA0B76D,IAW5B22E,EAAAzkH,UAAAuyI,cAAP,WACIzyI,KAAK6oG,0BAA0B7oG,KAAKyZ,UAAUy1B,YAAYlvC,KAAKmgB,QAAQlJ,cAAa,GAAOjX,KAAKuW,cAU7FouG,EAAAzkH,UAAAynI,gBAAP,WACI3nI,KAAK6oG,0BAA0B7oG,KAAKyZ,UAAUw0B,cAGlD02E,EAAAzkH,UAAAwyI,mBAAA,WACI1yI,KAAK8jG,iBAAiBx6D,QACtBtpC,KAAK8jG,iBAAiB5hB,cAAgB,KACtCliF,KAAKwe,IAAIC,gBAGbkmG,EAAAzkH,UAAAyyI,WAAA,SAAWthI,OAEDq/D,EAAa1wE,KAAK0+G,cAAc9jE,sBAChC0U,EAAWtvD,KAAKi+G,wBAAwBzjE,oBAC9C,OAAQnpC,GACJ,KAAK0tH,GAAoBb,KACrBxtD,EAAW53C,YALC,GAMZ,MACJ,KAAKimG,GAAoBX,MACrB1tD,EAAW53C,YARC,GASZ,MACJ,KAAKimG,GAAoBZ,IACrB7uE,EAASr2B,WAXG,GAYZ,MACJ,KAAK8lG,GAAoBV,OACrB/uE,EAASr2B,WAdG,GAeZ,MACJ,KAAK8lG,GAAoBP,WACrB9tD,EAAW53C,YAjBC,GAkBZw2B,EAASr2B,WAlBG,GAmBZ,MACJ,KAAK8lG,GAAoBN,YACrB/tD,EAAW53C,YArBC,GAsBZw2B,EAASr2B,WAtBG,GAuBZ,MACJ,KAAK8lG,GAAoBT,QACrB5tD,EAAW53C,YAzBC,GA0BZw2B,EAASr2B,WA1BG,GA2BZ,MACJ,KAAK8lG,GAAoBR,SACrB7tD,EAAW53C,YA7BC,GA8BZw2B,EAASr2B,WA9BG,GA+BZ,MACJ,QACI,OAERj5B,KAAKwxG,gBAGTmT,EAAAzkH,UAAA4sI,UAAA,SAAU8F,GACN,OAAOA,IAAQ5gI,WAAqB,OAAR4gI,GAGhCjuB,EAAAzkH,UAAAg5E,YAAA,SAAY05D,GAAZ,IAAAphI,EAAAxR,KACSA,KAAK8sI,UAAU8F,IAIhBA,aAAejzI,MACfizI,EAAI1iI,QAAQ,SAAAd,GAAS,OAAAoC,EAAKghF,aAAapjF,KAEvCpP,KAAKwyF,aAAaogD,GAEtB5yI,KAAKwe,IAAIC,gBARLze,KAAK0yI,sBAWb/tB,EAAAzkH,UAAA2yI,qBAAA,SAAqB98H,OACXwyF,EAAiBvoG,KAAKuoG,eAC5B,MAAqB,iBAAVxyF,EACAA,EAEJwyF,EAAevzF,KAAK,SAAAoD,GAAU,OAAAA,EAAOrC,QAAUA,IAAO6R,cAIjE+8F,EAAAzkH,UAAAsyF,aAAA,SAAapjF,OACH0jI,EAAa,CAAEj7H,IAAKzI,EAAMgzF,SAAUhqF,OAAQpY,KAAK6yI,qBAAqBzjI,EAAMkzF,cAC5EywC,EAAW,CAAEl7H,IAAKzI,EAAMizF,OAAQjqF,OAAQpY,KAAK6yI,qBAAqBzjI,EAAMmzF,YAE9EviG,KAAK8jG,iBAAiBrC,aAAapyF,KAAOyjI,EAC1C9yI,KAAK8jG,iBAAiB5qB,YAAY65D,EAAS/yI,KAAK8jG,iBAAiBrC,cACjEzhG,KAAK8jG,iBAAiB5B,aAAa6wC,EAAS/yI,KAAK8jG,iBAAiBrC,cAClEzhG,KAAK8jG,iBAAiBlC,oBAG1B+iB,EAAAzkH,UAAA8yI,kBAAA,WACI,OAAOhzI,KAAK8jG,iBAAiB7wB,QAGjC0xC,EAAAzkH,UAAA+yI,yBAAA,SAAyB/vC,eACjB9qF,EACAX,EAAS,GACPy7H,EAAe,GAEfC,EAAexzI,MAAMgR,KAAK3Q,KAAK8jG,iBAAiBrqF,WACjDhD,OAAO,SAAC28H,GAAU,OAAAA,EAAM,GAAKlwC,EAAOviG,SAEnC4nG,EAAiBvoG,KAAKuoG,eACvB9xF,OAAO,SAAAX,GAAO,OAACA,EAAI03F,cACnBt8F,KAAK,SAACY,EAAGvS,GAAM,OAAAuS,EAAE8V,aAAeroB,EAAEqoB,mBAGvC,IAAyB,IAAAyrH,EAAA7kI,EAAA2kI,GAAYG,EAAAD,EAAAnxI,QAAAoxI,EAAAlxI,KAAAkxI,EAAAD,EAAAnxI,OAAE,CAA5B,IAAAwM,EAAArM,EAAAixI,EAAAnxI,MAAA,GAAC0V,EAAAnJ,EAAA,GAAKiS,EAAAjS,EAAA,GACb,GAAKw0F,EAAOrrF,GAAZ,KAGM6pF,EAAO/hG,MAAMgR,KAAKgQ,OACxB,IAAmB,IAAA4yH,EAAA/kI,EAAAkzF,GAAI8xC,EAAAD,EAAArxI,QAAAsxI,EAAApxI,KAAAoxI,EAAAD,EAAArxI,OAAE,EACrBkW,EAASmwF,EADEirC,EAAArxI,UAGPsV,EAAOW,EAAOrC,OAASmtF,EAAOrrF,GAAKO,EAAOrC,6GAG9CvW,OAAOiP,KAAKgJ,GAAQ9W,QACpBuyI,EAAa1wI,KAAKiV,GAEtBA,EAAS,yGAEb,OAAOy7H,GAGXvuB,EAAAzkH,UAAAuzI,gBAAA,eACUvwC,EAASljG,KAAKi+G,wBAAwBvjE,SAE5C,OAAO16C,KAAKizI,yBAAyB/vC,IAMlCyhB,EAAAzkH,UAAA2oG,0BAAP,SAAiC6qC,EAA6B77H,EAC1D2oB,EAAesxG,OACT6B,EAAoB3zI,KAAKyZ,UAAUlN,IAAIvM,KAAKoM,IAG5CK,EAA+B,CAAEilC,aAFlBiiG,EAAoBh0I,MAAMgR,KAAKgjI,GAAqB,GAEpB3lG,aADhC0lG,EAAoB/zI,MAAMgR,KAAK+iI,GAAqB,GACN77H,IAAGA,EAAE2oB,MAAKA,GAC7ExgC,KAAK6jI,qBAAqB5qH,KAAKxM,GAC/BinI,EAAoB1zI,KAAKyZ,UAAUw0B,YACnC,IAAK,IAAIztC,EAAI,EAAGA,EAAIiM,EAAKuhC,aAAartC,OAAQH,IAC1CkzI,EAAkBvnI,IAAIM,EAAKuhC,aAAaxtC,IAE5CR,KAAKyZ,UAAUkH,IAAI3gB,KAAKoM,GAAIsnI,GAC5B1zI,KAAKue,0BAA0BuzH,IAO5BntB,EAAAzkH,UAAAusF,cAAP,SAAqBjsD,GACjBxgC,KAAK0+G,cAAc9jE,sBAAsB9hB,YAAc0H,EAAMx/B,OAAO83B,WACpE94B,KAAKi+G,wBAAwBzjE,oBAAoBvhB,WAAauH,EAAMx/B,OAAOi4B,UAC3EuH,EAAMx/B,OAAO83B,WAAa,EAC1B0H,EAAMx/B,OAAOi4B,UAAY,GAatB0rF,EAAAzkH,UAAA0zI,WAAP,SAAkB57H,EAAkB67H,EAAsBjkE,GAA1D,IAAAp+D,EAAAxR,KACI,QADgC,IAAA6zI,IAAAA,GAAmB,QAAG,IAAAjkE,IAAAA,EAAA,QAClD53D,EAAW,GAAKA,EAAWhY,KAAKi+G,wBAAwBvjE,SAAS/5C,OAAS,IAChD,IAArBkzI,IAAqG,IAA3E7zI,KAAK6V,WAAWe,IAAI,SAAAd,GAAO,OAAAA,EAAI8R,eAAc9X,QAAQ+jI,IAOxF,GAJA7zI,KAAKwxG,eACDxxG,KAAKi+G,wBAAwBvjE,SAASh4B,MAAM1K,EAAUA,EAAW,GAAGhD,KAAK,SAAA8B,GAAO,OAAAA,EAAIrE,YAAcqE,EAAIg9H,mBACtGD,GAAmB,IAEE,IAArBA,GAA2B7zI,KAAKskF,WAAW06B,qBAAqB60B,IAC7D7zI,KAAKskF,WAAW+6B,yBAAyBw0B,GACxC7zI,KAAKskF,WAAWo/B,4BAA4B1rG,IAC5ChY,KAAKi+G,wBAAwB9/D,SAASnmC,GACtChY,KAAKi+G,wBAAwBtkE,YAC5BnX,KAAKkH,EAAAA,SAAShH,UAAU,WACrBlxB,EAAKuiI,gBAAgB/7H,EAAU67H,EAAiBjkE,MAGpD5vE,KAAK+zI,gBAAgB/7H,EAAU67H,EAAiBjkE,OAEjD,KACGi0C,EAAgB7jH,KAAKskF,WAAWy6B,uBAAuB80B,GAC7D7zI,KAAK0+G,cAAc/kE,YACdnX,KAAKkH,EAAAA,SACLhH,UAAU,WACPlxB,EAAK8yE,WAAWo/B,4BAA4B1rG,IAC5CxG,EAAKysG,wBAAwB9/D,SAASnmC,GACtCxG,EAAKysG,wBAAwBtkE,YAC5BnX,KAAKkH,EAAAA,SAAShH,UAAU,WACrBlxB,EAAKuiI,gBAAgB/7H,EAAU67H,EAAiBjkE,MAGpDp+D,EAAKuiI,gBAAgB/7H,EAAU67H,EAAiBjkE,KAIxD5vE,KAAKskF,WAAWitB,iBAAiBv5F,GAAUmmC,SAAS0lE,KAcrDc,EAAAzkH,UAAA8zI,YAAP,SAAmBC,EAAsBC,EACjC10D,QAAA,IAAAA,IAAAA,EAAA,UACEnjE,EAAUrc,KAAK6V,WAAWY,OAAO,SAAAX,GAAO,OAACA,EAAI03F,aAAmC,GAApB13F,EAAI8R,eAEtE,IAAK5nB,KAAKm0I,gBAAgBF,EAAcC,GACpC,MAAO,CAACl8H,SAAUi8H,EAAcz7H,mBAAoB07H,OAElDE,EAAa50D,EAAWnjE,EAAQ5F,OAAO,SAACX,GAAQ,OAAA0pE,EAAS1pE,KAAMc,IAAI,SAAAy9H,GAAW,OAAAA,EAAQzsH,eAAc1W,KAAK,SAACY,EAAGvS,GAAM,OAAAuS,EAAIvS,IACrG8c,EAAQzF,IAAI,SAAAy9H,GAAW,OAAAA,EAAQzsH,eAAc1W,KAAK,SAACY,EAAGvS,GAAM,OAAAuS,EAAIvS,IAClF+0I,EAAgBF,EAAWp/H,KAAK,SAAAxC,GAAS,OAAQ0hI,EAAR1hI,IAC/C,OAAIxS,KAAKi+G,wBAAwBvjE,SAASh4B,MAAMuxH,EAAcA,EAAe,GACpEj/H,KAAK,SAAA8B,GAAO,OAACA,EAAIrE,aAAeqE,EAAI6sC,YAAc7sC,EAAIg9H,kBAAmBQ,IAAkBtiI,UACzF,CAACgG,SAAUi8H,EAAcz7H,mBAAoB87H,GAE1B,IAAtBF,EAAWzzI,QAAgBX,KAAKu0I,oBAAoBN,KAAkBA,EAC/D,CAACj8H,SAAUi8H,EAAcz7H,mBAAoB07H,GAE7C,CAACl8H,SAAUhY,KAAKu0I,oBAAoBN,GAAez7H,mBAAoB47H,EAAW,KAe9FzvB,EAAAzkH,UAAAs0I,gBAAP,SAAuBP,EAAsBC,EACrC10D,QAAA,IAAAA,IAAAA,EAAA,UACEnjE,EAAWrc,KAAK6V,WAAWY,OAAO,SAAAX,GAAO,OAACA,EAAI03F,aAAmC,GAApB13F,EAAI8R,eAEvE,IAAK5nB,KAAKm0I,gBAAgBF,EAAcC,GACpC,MAAO,CAACl8H,SAAUi8H,EAAcz7H,mBAAoB07H,OAElDE,EAAa50D,EAAWnjE,EAAQ5F,OAAO,SAACX,GAAQ,OAAA0pE,EAAS1pE,KAAMc,IAAI,SAAAy9H,GAAW,OAAAA,EAAQzsH,eAAc1W,KAAK,SAACY,EAAGvS,GAAM,OAAAA,EAAIuS,IACrGuK,EAAQzF,IAAI,SAAAy9H,GAAW,OAAAA,EAAQzsH,eAAc1W,KAAK,SAACY,EAAGvS,GAAM,OAAAA,EAAIuS,IAClF2iI,EAAgBL,EAAWp/H,KAAK,SAAAxC,GAAS,OAAAA,EAAQ0hI,IACvD,OAAIl0I,KAAKi+G,wBAAwBvjE,SAASh4B,MAAMuxH,EAAcA,EAAe,GACpEj/H,KAAK,SAAA8B,GAAO,OAACA,EAAIrE,aAAeqE,EAAI6sC,YAAc7sC,EAAIg9H,kBAAmBW,IAAkBziI,UACzF,CAACgG,SAAUi8H,EAAcz7H,mBAAoBi8H,GAE1B,IAAtBL,EAAWzzI,QAAgBX,KAAK00I,oBAAoBT,KAAkBA,EAC/D,CAACj8H,SAAUi8H,EAAcz7H,mBAAoB07H,GAE7C,CAACl8H,SAAUhY,KAAK00I,oBAAoBT,GAAez7H,mBAAoB47H,EAAW,KAK7FzvB,EAAAzkH,UAAA6zI,gBAAR,SAAwB/7H,EAAU67H,EAAsBjkE,GACpD,QAD8B,IAAAikE,IAAAA,GAAmB,QAAG,IAAAjkE,IAAAA,EAAA,MAC/CA,EAAL,KACIo3B,EAAYhmG,EACV6W,EAAO7X,KAAK6+G,iBAAiBpoG,OAAO,SAAAlW,GAAK,OAAY,IAAZA,EAAEiS,QAAa7P,OAAO3C,KAAKiY,QAAQ5H,WAAW2E,KAAK,SAAA5T,GAAK,OAAAA,EAAEoR,QAAUwF,IACnH,GAAKH,EAAL,CACA,OAAQA,EAAIgmB,cAAcksB,QAAQ73C,eAC9B,IAAK,uBACD80F,EAAa2tC,GAAsB7gI,SACnC9S,EAAS6W,EACT,MACJ,IAAK,uBACDmvF,EAAa2tC,GAAsB1R,YACnCjiI,GAA8B,IAArB6yI,EACLh8H,EAAI+8H,aAAa5/H,KAAK,SAAA7T,GAAK,OAAAA,EAAEqX,qBAAuBq7H,IAAmBh8H,EAAI+8H,aAAalrG,MAC5F,MACJ,IAAK,qBACDs9D,EAAa2tC,GAAsBzR,gBACnCliI,EAAS6W,EACT,MACJ,QACImvF,EAAa2tC,GAAsB3R,SACnChiI,GAA8B,IAArB6yI,EAAyBh8H,EAAIM,MAAMnD,KAAK,SAAA7T,GAAK,OAAAA,EAAEqX,qBAAuBq7H,IAAmBh8H,EAAIM,MAAMuxB,MAIpHkmC,EADa,CAAEo3B,WAAYA,EAAYhmG,OAAQA,OAI3C2jH,EAAAzkH,UAAAw0I,oBAAR,SAA4B5zB,GACxB,GAAIA,GAAmB,EAAK,OAAOA,MAE7B+zB,EAAU70I,KAAKi+G,wBAAwBvjE,SAASh4B,MAAM,EAAGo+F,GAAiBrvG,UAC3EuD,KAAK,SAAA8B,GAAO,OAACA,EAAIrE,aAAeqE,EAAI6sC,YAAc7sC,EAAIg9H,iBAC3D,OAAOe,EAAU70I,KAAKi+G,wBAAwBvjE,SAAS5qC,QAAQ+kI,GAAW/zB,GAGtE6D,EAAAzkH,UAAAq0I,oBAAR,SAA4BzzB,GACxB,GAAIA,IAAoB9gH,KAAKi+G,wBAAwBvjE,SAAS/5C,OAAS,OAAOmgH,MAExEg0B,EAAU90I,KAAKi+G,wBAAwBvjE,SAASh4B,MAAMo+F,EAAkB,EAAG9gH,KAAKi+G,wBAAwBvjE,SAAS/5C,QAClHqU,KAAK,SAAA8B,GAAO,OAACA,EAAIrE,aAAeqE,EAAI6sC,YAAc7sC,EAAIg9H,iBAC3D,OAAOgB,EAAU90I,KAAKi+G,wBAAwBvjE,SAAS5qC,QAAQglI,GAAWh0B,GAGtE6D,EAAAzkH,UAAAi0I,gBAAR,SAAwBn8H,EAAU+mC,OACxB+iE,EAAO9hH,KAAK6+G,iBAAiBpoG,OAAO,SAAAlW,GAAK,OAAY,IAAZA,EAAEiS,QAAa7P,OAAO3C,KAAKiY,QAAQ5H,WAAW1P,OACvF8uB,EAAOzvB,KAAK6V,WAAWY,OAAO,SAAAX,GAAO,OAACA,EAAI03F,aAAmC,GAApB13F,EAAI8R,eAAmBjnB,OACtF,QAAImhH,EAAO,GAAKryF,EAAO,MACP,EAAZzX,GAAiBA,EAAWhY,KAAKi+G,wBAAwBvjE,SAAS/5C,SACrD,EAAbo+C,GAAkBA,GAAY/+C,KAAKyoG,gBAAgBzoG,KAAKyoG,gBAAgB9nG,OAAS,GAAGinB,eASrF+8F,EAAAzkH,UAAAsxG,aAAP,SAAoBujC,QAAA,IAAAA,IAAAA,GAAA,GACZ7vH,SAASg9D,gBAERh9D,SAASg9D,cAAc8yD,wBAAwBh1I,KAAK+jH,MAAMlmF,eAAiB8hB,KAAKs1F,4BAEhF/vH,SAASg9D,cAAc8yD,wBAAwBh1I,KAAKivI,MAAMpxG,eAAiB8hB,KAAKs1F,4BAA8BF,IAC9G7vH,SAAsB,cAAiBm5C,QAOzCsmD,EAAAzkH,UAAAg1I,mBAAP,SAA0B1iI,EAAOsD,GAC7B,OAAOA,EAAIC,MAAQD,EAAIq3F,WAGnBwX,EAAAzkH,UAAA8U,KAAR,SAAastD,EAAc6yE,EAAmBlzE,EAAyBC,EAAsBgb,GACzF,IAAKl9E,KAAKiY,QACN,OAAO,EAKX,GAFAjY,KAAK8b,SAAQ,IAERwmD,EAED,OADAtiE,KAAK6tI,cACE,MAGLtrE,IAAwBN,EACxBO,IAAqBN,EACvBkzE,GAAe,EAoCnB,GAlCIp1I,KAAKwlG,eAAe7hC,aAAerB,GACnCtiE,KAAKwlG,eAAevjC,gBAAkBM,GACtCviE,KAAKwlG,eAAetjC,aAAeM,GACnCxiE,KAAKwlG,eAAiB,CAClB7hC,WAAYrB,EACZ2iE,iBAAkB,EAClBhjE,cAAeM,EACfL,WAAYM,EACZ0iE,eAAgB,IAGpBkQ,GAAe,GAEfp1I,KAAKwlG,eAAey/B,kBAAoBkQ,EAGxCC,IACAp1I,KAAKiY,QAAQ/H,QAAQ,SAAC2H,GACdA,EAAIM,OACJN,EAAIM,MAAMjI,QAAQ,SAAC/O,GACfA,EAAEwmG,cAAcrlC,EAAMC,EAAuBC,OAKzDxiE,KAAK2tI,qBAGL3tI,KAAKwlG,eAAey/B,kBAAoBjlI,KAAKwlG,eAAe0/B,eAAevkI,OAC3EX,KAAKwlG,eAAey/B,iBAAmB,EAChCjlI,KAAKwlG,eAAey/B,iBAAmB,IAC9CjlI,KAAKwlG,eAAey/B,iBAAmBjlI,KAAKwlG,eAAe0/B,eAAevkI,OAAS,GAGnFX,KAAKwlG,eAAe0/B,eAAevkI,OAAQ,KACrC00I,EAAYr1I,KAAKwlG,eAAe0/B,eAAellI,KAAKwlG,eAAey/B,kBACzEjlI,KAAKwlG,eAAcplG,EAAA,GAAOJ,KAAKwlG,iBAEhB,IAAXtoB,GACAl9E,KAAKm+C,SAASk3F,EAAUx9H,IAAKw9H,EAAUj9H,QAG3CyoD,GAA0BW,mBAAmBxhE,KAAKoM,GAAI,CAClDgM,OAAQi9H,EAAUj9H,OAClBP,IAAKw9H,EAAUx9H,IACfrF,MAAO6iI,EAAU7iI,aAIrBquD,GAA0Bc,qBAAqB3hE,KAAKoM,IAGxD,OAAOpM,KAAKwlG,eAAe0/B,eAAevkI,QAU9CnB,OAAAgC,eAAImjH,EAAAzkH,UAAA,qBAAkB,KAAtB,WACI,OAAOF,KAAK8kI,yBAEhB,SAAuB3iI,GACnBnC,KAAK8kI,oBAAsB3iI,EAC3BnC,KAAKsX,eAAc,oCAMbqtG,EAAAzkH,UAAAuqI,YAAV,eACQ6K,EAAqB,EACnB9sC,EAAgB,GAChBC,EAAkB,GAClB8sC,EAAkB,GAExBv1I,KAAKuwI,qBACLvwI,KAAKqzG,cAELrzG,KAAK22G,eAAezmG,QAAQ,SAAA4F,GACpBA,EAAIpC,SACJoC,EAAIpC,OAAOuU,QAAS,GAEpBnS,EAAI03F,aACJ13F,EAAI1F,SAASF,QAAQ,SAAAywB,GAAS,OAAAA,EAAM1Y,QAAS,MAOrD,IAAK,IAAIznB,EAAI,EAAGA,EAAIR,KAAKulI,SAAS5kI,OAAQH,IACtC,GAAIR,KAAKulI,SAAS/kI,GAAGynB,SAAWjoB,KAAKulI,SAAS/kI,GAAGkT,OAAQ,KAE/CmgG,EAAWn+D,SAAS11C,KAAKulI,SAAS/kI,GAAGkP,MAAO,IAC9C4lI,EAAqBzhC,EAAW7zG,KAAKmtG,UAAYntG,KAAKw2G,sBAEtDx2G,KAAKulI,SAAS/kI,GAAGynB,QAAS,EAC1BwgF,EAAgBjmG,KAAKxC,KAAKulI,SAAS/kI,IACnC+0I,EAAgB/yI,KAAKxC,KAAKulI,SAAS/kI,MAGnC80I,GAAsBzhC,EACtBrL,EAAchmG,KAAKxC,KAAKulI,SAAS/kI,UAE9BR,KAAKulI,SAAS/kI,GAAGynB,QAAUjoB,KAAKulI,SAAS/kI,GAAGkT,OAC/C1T,KAAKulI,SAAS/kI,GAAGmqG,eAAe1iF,OAChCugF,EAAchmG,KAAKxC,KAAKulI,SAAS/kI,KAEjCR,KAAKulI,SAAS/kI,GAAGynB,QAAS,EAC1BwgF,EAAgBjmG,KAAKxC,KAAKulI,SAAS/kI,KAGvCioG,EAAgBjmG,KAAKxC,KAAKulI,SAAS/kI,IAIvC+0I,EAAgB50I,QAChBw7B,QAAQC,KACJ,yHAEAm5G,EAAgB3+H,IAAI,SAAAd,GAAO,MAAA,IAAMA,EAAIyR,OAAS,MAAKrY,WAAa,0CAKxElP,KAAK22G,eAAiBnO,EACtBxoG,KAAK02G,iBAAmBjO,EACxBzoG,KAAKwe,IAAIC,gBAMHkmG,EAAAzkH,UAAAi+C,SAAV,SAAmBtmC,EAAmBO,GAAtC,IAAA5G,EAAAxR,KACQw1I,GAAiB,EAErB,GAAIx1I,KAAK+b,QAA0B,iBAAhB,EAA0B,KACnC/D,EAAWhY,KAAK8kH,mBAAmBh1G,QAAQ+H,GAC3CmE,EAAOsG,KAAKmC,MAAMzM,EAAWhY,KAAK2e,SAEpC3e,KAAKgc,OAASA,IACdw5H,GAAiB,EACjBx1I,KAAKgc,KAAOA,GAIhBw5H,EACAx1I,KAAKi+G,wBAAwBrkE,cAAcpX,KAAKkH,EAAAA,SAAShH,UAAU,WAC/DlxB,EAAKikI,gBAAgBjkI,EAAKysG,wBACN,iBAAhB,EAA2BpmG,EAAMrG,EAAKysG,wBAAwBvjE,SAAS5qC,QAAQ+H,MAGvF7X,KAAKy1I,gBAAgBz1I,KAAKi+G,wBACN,iBAAhB,EAA2BpmG,EAAM7X,KAAKi+G,wBAAwBvjE,SAAS5qC,QAAQ+H,IAGvF7X,KAAK01I,qBAAqBt9H,IAMpBusG,EAAAzkH,UAAAw1I,qBAAV,SAA+Bt9H,OACvBE,EAAgC,iBAAXF,EAAsBA,EAASpY,KAAKs+G,gBAAgBlmG,GAAQwP,aAC/E+tH,EAAY31I,KAAKiY,QAAQjD,KAAK,SAAA5T,GAAK,OAAAA,EAAE09G,aACrC/5D,EAAU4wF,EAAYA,EAAU72B,WAAa,KAC/C9+G,KAAKwoG,cAAc7nG,OACf2X,GAAetY,KAAKwoG,cAAc7nG,SAClC2X,GAAetY,KAAKwoG,cAAc7nG,OAClCX,KAAKy1I,gBAAgB1wF,EAASzsC,IAGlCtY,KAAKy1I,gBAAgB1wF,EAASzsC,IAO5BqsG,EAAAzkH,UAAAu1I,gBAAV,SAA0B38F,EAAuC88F,GACxD98F,GAKLA,EAAUqF,SAASy3F,IAGfjxB,EAAAzkH,UAAAytI,kBAAR,WAAA,IAAAn8H,EAAAxR,KACIA,KAAKwlG,eAAe0/B,eAAiB,OAE/BjjE,EAAgBjiE,KAAKwlG,eAAevjC,cACpCC,EAAaliE,KAAKwlG,eAAetjC,WACjCyB,EAAa1B,EAAgBjiE,KAAKwlG,eAAe7hC,WAAa3jE,KAAKwlG,eAAe7hC,WAAWzxD,cAC7Ff,EAAOnR,KAAK8kH,mBACZnK,EAAc36G,KAAKuoG,eAAe9xF,OAAO,SAACtV,GAAM,OAACA,EAAEqsG,cAAat8F,KAAK,SAAC2kI,EAAIC,GAAO,OAAAD,EAAGjuH,aAAekuH,EAAGluH,eAEtGmuH,EAAa,IAAI/jC,GAAwBhyG,KAAKs1E,QAC9CizC,EAAW,IAAI1W,GAAqB7xG,KAAKs1E,QAC/CnkE,EAAKjB,QAAQ,SAAC8lI,GACVr7B,EAAYzqG,QAAQ,SAAC/O,OACXgB,EAAQhB,EAAE4mB,UAAY5mB,EAAE4mB,UAAUiuH,EAAQ70I,EAAE4U,QAC/B,WAAf5U,EAAEkc,SAAwB04H,EAAW9yI,UAAU+yI,EAAQ70I,EAAE4U,OAAQvE,EAAK8jE,QACnD,SAAfn0E,EAAEkc,SAAsBkrG,EAAStlH,UAAU+yI,EAAQ70I,EAAE4U,OAAQvE,EAAK8jE,QAC5D0gE,EAAQ70I,EAAE4U,OACxB,GAAI5T,IAAU6P,WAAuB,OAAV7P,GAAkBhB,EAAEymG,WAAY,KACnD3X,EAAchuB,EAAgBnhD,OAAO3e,GAAS2e,OAAO3e,GAAO+P,cAEhE,GAAIgwD,EACI+tB,IAAgBtsB,GAChBnyD,EAAKg0F,eAAe0/B,eAAe1iI,KAAK,CACpCqV,IAAKm+H,EACL59H,OAAQjX,EAAE4U,MACVvD,MAAO,SAOf,QAHIyjI,EAAiB,EACjBC,EAAcjmD,EAAYngF,QAAQ6zD,IAEd,IAAjBuyE,GACH1kI,EAAKg0F,eAAe0/B,eAAe1iI,KAAK,CACpCqV,IAAKm+H,EACL59H,OAAQjX,EAAE4U,MACVvD,MAAOyjI,MAIXC,GADAjmD,EAAcA,EAAYn1B,UAAUo7E,EAAcvyE,EAAWhjE,SACnCmP,QAAQ6zD,SAWnDghD,EAAAzkH,UAAA49G,gBAAP,SAAuBq4B,GACnB,OAAOnkI,WAMD2yG,EAAAzkH,UAAAk2I,kBAAV,WACI,OAAO,MAGDzxB,EAAAzkH,UAAA8oI,qCAAV,SAA+CnxH,GACtC7X,KAAK+Z,cAAe/Z,KAAKq2I,kBAAkBtqG,YAG3Cl0B,EAGD7X,KAAK6wI,4BAA4Bh5H,GAFjC7X,KAAKs2I,yBAAwB,KAMrC3xB,EAAAzkH,UAAA+gG,eAAA,SAAe70F,GACXpM,KAAKu2I,2BAA2BnqI,EAAIpM,KAAKiY,QAAQtX,QAxmKjB,GA0mKhCX,KAAKq2I,kBAAkBzpI,KAAK5M,KAAKmnI,iBACjCnnI,KAAKknI,2BAA2B90B,qBAAuBpyG,KAAKknI,2BAA2B/0B,MACvFnyG,KAAK+lI,eAAiB/lI,KAAKw2I,uBAAuB/5F,KAAKz8C,MACvDA,KAAKq2I,kBAAkB50G,QAAQU,iBAAiB,QAASniC,KAAK+lI,iBAM3DphB,EAAAzkH,UAAAu2I,uBAAP,WACIz2I,KAAKq2I,kBAAkB50G,QAAQwC,oBAAoB,QAASjkC,KAAK+lI,gBACjE/lI,KAAKknI,2BAA2B90B,qBAAuB,KACvDpyG,KAAKq2I,kBAAkBxpI,QACvB7M,KAAKq2I,kBAAkB50G,QAAQlH,cAAch8B,MAAM+4D,QAAU,IAM1DqtD,EAAAzkH,UAAAo2I,wBAAP,SAA+Bx3G,OACrB43G,EAAW12I,KAAKq2I,kBAAkB50G,QAAQljC,MAE5Cm4I,EAASp/E,QADTx4B,EACmB,QAEA,QAOpB6lF,EAAAzkH,UAAA2wI,4BAAP,SAAmCh5H,GAC/B,IAAK7X,KAAKq2I,kBAAkBtqG,UAAW,KAC7B2qG,EAAW12I,KAAKq2I,kBAAkB50G,QAAQlH,cAAch8B,MAC1DsZ,GACA6+H,EAASp/E,QAAU,GACnBt3D,KAAKu2I,2BAA2B1+H,EAAIhB,OACpC7W,KAAKq2I,kBAAkB53G,cAEvBi4G,EAASp/E,QAAU,SAKvBqtD,EAAAzkH,UAAAq2I,2BAAR,SAAmC1/H,EAAY8/H,QAAA,IAAAA,IAAAA,GAAA,GAC3C32I,KAAKmnI,gBAAgB9kG,OAASs0G,EAAW32I,KAAK42I,yBAA2B52I,KAAKonI,mBAC9EpnI,KAAKknI,2BAA2BpvG,SAASu6E,UAAYryG,KAAK+jH,MAAMlmF,kBAC1D+lF,EAAY5jH,KAAKmgB,QAAQzI,eAAeb,GACzC+sG,IAGL5jH,KAAKknI,2BAA2BpvG,SAAS92B,OAAS4iH,EAAUniF,QAAQ5D,cACpE79B,KAAKs2I,yBAAwB,KAMjC92I,OAAAgC,eAAWmjH,EAAAzkH,UAAA,kBAAe,KAA1B,WACI,IAAKF,KAAKoX,YAAYS,IAClB,OAAO,MAELg/H,EAAa72I,KAAKkW,aAAa4C,mBAAmB9Y,KAAKoX,YAAYS,IAAIzL,IAAI,GACjF,OAAOyqI,EAAar3I,OAAOiP,KAAKooI,GAAYl2I,OAAS,mCAG/CgkH,EAAAzkH,UAAA42I,YAAV,SAAsB9+H,EAAkB7V,GACpC+L,GAAalO,KAAKmgB,QAAQlJ,eAAee,GAAW7V,IAGxDwiH,EAAAzkH,UAAA62I,kBAAA,SAAkB1tG,EAAiBxxB,GAC/BA,EAAI0C,QAAUva,KAAKkW,aAAa4C,mBAAmBjB,EAAIzL,IAAI,OAEvDK,EAAOoL,EAAIkB,sBAEVswB,EAID58B,EAAOzM,KAAKmgB,QAAQxF,WAAW9C,EAAKA,EAAI0C,UAHxCva,KAAK8jI,gBAAgB7qH,KAAKxM,GAC1BzM,KAAKkW,aAAa6E,YAAW,IAI7BtO,EAAKmM,OACL5Y,KAAKkW,aAAaqzB,gBAGtBvpC,KAAKoX,YAAY4pF,aACjBhhG,KAAKy2I,2BAcF9xB,EAAAzkH,UAAA4b,QAAP,SAAeutB,EAAe7I,QAAf,IAAA6I,IAAAA,GAAA,OACLxxB,EAAM7X,KAAKoX,YAAYS,IACvBL,EAAOxX,KAAKoX,YAAYI,KACxBw/H,EAAcx/H,EAAOA,EAAKY,OAAO5F,OAAS,EAC1CykI,EAAKp/H,EAAMA,EAAIrF,OAAS,EAG9B,IAAKqF,GAAQL,KAEb6xB,EAASrpC,KAAKmgB,QAAQ1H,eAAiBzY,KAAKmgB,QAAQhJ,qBAE/CnX,KAAK+Z,aAAe/Z,KAAKq2I,mBAAqBr2I,KAAKq2I,kBAAkBtqG,YAAcl0B,GAAxF,CAIA7X,KAAK+2I,kBAAkB1tG,EAAQxxB,OAEzBq/H,EAAcl3I,KAAKmgB,QAAQ9H,kBAAkB4+H,EAAID,GACnDE,GAAe12G,GACf02G,EAAYr5G,cAAckT,UAM1B4zE,EAAAzkH,UAAAs2I,uBAAR,SAA+Bh2G,GACR,EAAfA,EAAM6U,OACNr1C,KAAKi+G,wBAAwBx/D,aAE7Bz+C,KAAKi+G,wBAAwBt/D,cAOrCn/C,OAAAgC,eAAWmjH,EAAAzkH,UAAA,iCAA8B,KAAzC,eACU+O,EAAcpB,GAAW7N,KAAKmgB,QAAQlJ,gBAO5C,OANIjX,KAAKkW,aAAaC,SAClBlH,EAAOzM,KAAI3B,MAAXoO,EAAMvM,EAAS1C,KAAKkW,aAAaI,sBAAqB,GACjDG,OAAO,SAAAnW,GAAK,OAAAA,EAAEoW,OAASC,GAAgBvB,MACvCwB,IAAI,SAAAtW,GAAK,OAAAA,EAAE4Y,aAGbjK,mCAGXzP,OAAAgC,eAAWmjH,EAAAzkH,UAAA,aAAU,KAArB,WACI,OAAOF,KAAKkW,aAAaC,QAAUnW,KAAK0d,+BAA+B/c,OAASX,KAAKmgB,QAAQlJ,eAAetW,wCAGzGgkH,EAAAzkH,UAAAi3I,oBAAP,WACI,OAA8C,EAAvCn3I,KAAKkgD,WAAalgD,KAAKo3I,eAGxBzyB,EAAAzkH,UAAAm3I,kBAAV,SAA4Bx/H,OAGjBy/H,EAAWz/H,EAAIinG,WACfy4B,EAAcD,EAAS18F,sBAAsB9hB,WAGhDy+G,KAFW7hG,SAAS4hG,EAAS/7F,GAAGvqC,SAAS2hC,eAAelR,QAAQ5D,cAAct/B,MAAM05B,KAAM,IAC7Dq/G,EAASx4F,oBAAoBw4F,EAAStqI,MAAMglC,aAEzEslG,EAAS56F,UAAU66F,IAOjB5yB,EAAAzkH,UAAA2oI,eAAV,WACI,OAAO7oI,KAAKukI,cAMN5f,EAAAzkH,UAAA4oI,aAAV,WACI,OAAO9oI,KAAKwkI,YAMT7f,EAAAzkH,UAAA2hH,aAAP,SAAoB/pG,GAChB,OAAOA,EAAQ6rC,WAAc7rC,EAAQ6rC,qBAAqB50C,KAM9DvP,OAAAgC,eAAcmjH,EAAAzkH,UAAA,kBAAe,KAA7B,WACI,OAAOF,KAAKklB,SAASS,KAAKmY,SAAS99B,KAAK69B,gDAQrC8mF,EAAAzkH,UAAAs3I,iBAAP,SAAwB/qI,GAAxB,IAAA+E,EAAAxR,KACuC,YAA/ByM,EAAK40C,QAAoB,YAAmB50C,EAAK40C,QAAmB,YAAM50C,EAAKgrI,WAAsB,YACrGhrI,EAAK0Z,KAAK8Z,iBACJpoB,EAAM7X,KAAKohH,cAAc30G,EAAK40C,QAAQ7uC,SACjCqF,EAAIM,OACXN,EAAIM,MAAMjI,QAAQ,SAAC/O,GACfA,EAAEwmG,cACEn2F,EAAKg0F,eAAe7hC,WACpBnyD,EAAKg0F,eAAevjC,cACpBzwD,EAAKg0F,eAAetjC,eAIpC,GAAIliE,KAAKm3I,sBAAuB,KACtBO,EAASjrI,EAAK40C,QAAQs2F,WACtBC,EAAQnrI,EAAK40C,QAAQ7uC,MAC3B/F,EAAK0Z,KAAK8Z,oBACJpoB,EAAiB,YAAX6/H,EAAuB13I,KAAKohH,cAAcw2B,GAAS,KACzDC,EAAwB,eAAXH,EAA0B13I,KAAK6+G,iBAAiBxuG,UAAU2E,KAAK,SAAC4oH,GAAO,OAAAA,EAAGC,eAAiB+Z,IAAS,KACnH//H,GAAOA,aAAeowF,GACtBjoG,KAAKq3I,kBAAkBx/H,GAChBggI,GACP73I,KAAKq3I,kBAAkBQ,8CA91K9Bv2C,UAA6Cd,UAhC7CjrF,UAjBAu4B,sCAiiFAnJ,EAAAA,OAAMl4B,KAAA,CAACk2H,aAtjFZ1hG,EAAAA,kBAOA4D,EAAAA,0CAkjFKF,EAAAA,OAAMl4B,KAAA,CAACm4B,EAAAA,mBA7jFZiI,EAAAA,yBACAtI,EAAAA,gCASAgf,EAAAA,uBASA1Q,EAAAA,wBA0CK4rE,UAGAgH,UAzBLnpF,GAAiBv7B,WAAA,CAAA,CAAA2V,KA6hFZiuB,EAAAA,OAAMl4B,KAAA,CAAC6vB,aA7/EPg/F,sCA+/EAxuF,EAAAA,UAAQ,CAAAp2B,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAAC6+C,kDA50EvBl+C,EAAAA,4BAoBAA,EAAAA,iCAYAA,EAAAA,mCAUAA,EAAAA,8BAIAA,EAAAA,wCAyBAA,EAAAA,sBAkDAA,EAAAA,sBAwBAA,EAAAA,oBA8BAA,EAAAA,uBA2BAA,EAAAA,kCA+BAA,EAAAA,4BAWAA,EAAAA,6BAkCAA,EAAAA,4BAuBAA,EAAAA,2BAmCAA,EAAAA,sBA6BA2/B,EAAAA,YAAWtgC,KAAA,CAAC,iBAAc,CAAAiK,KAC1BtJ,EAAAA,qBAgCA2/B,EAAAA,YAAWtgC,KAAA,CAAC,gBAAa,CAAAiK,KACzBtJ,EAAAA,0BA4CAA,EAAAA,yBAUAA,EAAAA,yBAWAA,EAAAA,2BAwBAA,EAAAA,0BAiBAA,EAAAA,gCAUAA,EAAAA,yBAmBAA,EAAAA,wCAkCAA,EAAAA,iCAmBAA,EAAAA,6BAWAA,EAAAA,kCAgCAA,EAAAA,8BAUAA,EAAAA,0BA2CAA,EAAAA,+BAwBAA,EAAAA,sCA2BAA,EAAAA,2BAmCAkc,EAAAA,4BAeAA,EAAAA,qCAeAA,EAAAA,gCAeAA,EAAAA,iCAmCAA,EAAAA,gCAiCAA,EAAAA,2BAmCAA,EAAAA,+BA+BAA,EAAAA,0BAqCAA,EAAAA,gCAmCAA,EAAAA,6BAkBAA,EAAAA,8BAeAA,EAAAA,gCAgBAA,EAAAA,6BAeAA,EAAAA,2BAgBAA,EAAAA,6BAgBAA,EAAAA,8BAUAA,EAAAA,gCAgBAA,EAAAA,8BAgBAA,EAAAA,8BAgBAA,EAAAA,0CAeAA,EAAAA,oCAeAA,EAAAA,+BAgBAA,EAAAA,kCAgBAA,EAAAA,8BAMAA,EAAAA,8BAiBAA,EAAAA,+BAOAA,EAAAA,6BAOAA,EAAAA,2BAMAwpB,EAAAA,UAASrmC,KAAA,CAAC+yH,wBAMV34E,EAAAA,gBAAep6C,KAAA,CAACokG,GAAoB,CAAE99D,KAAM89D,GAAoB9pD,aAAa,gDAM7EH,EAAAA,aAAYn6C,KAAA,CAACohH,GAAuC,CAAE96E,KAAM86E,gDAM5DjnE,EAAAA,aAAYn6C,KAAA,CAACqhH,GAAsC,CAAE/6E,KAAM+6E,gDAM3DlnE,EAAAA,aAAYn6C,KAAA,CAACshH,GAAsC,CAAEh7E,KAAMg7E,iDAM3DnnE,EAAAA,aAAYn6C,KAAA,CAACuhH,GAAuC,CAAEj7E,KAAMi7E,2BAO5Dj8C,EAAAA,aAAYtlE,KAAA,CAAC4pH,GAA6B,CAAEtjF,KAAMsjF,uBAoClDtkD,EAAAA,aAAYtlE,KAAA,CAAC,gCAGbslE,EAAAA,aAAYtlE,KAAA,CAAC,aAAc,CAAEsmC,KAAMirF,2BAsCnCjsD,EAAAA,aAAYtlE,KAAA,CAACw7F,GAAiB,CAAEl1D,KAAMk1D,wCA+BtCn1D,EAAAA,UAASrmC,KAAA,CAAC,oBAAqB,CAAEsmC,KAAMuQ,EAAAA,gDAUvCxQ,EAAAA,UAASrmC,KAAA,CAAC,mBAAoB,CAAEsmC,KAAMuQ,EAAAA,kDAGtCxQ,EAAAA,UAASrmC,KAAA,CAAC,qBAAsB,CAAEsmC,KAAMuQ,EAAAA,qCAMxCxQ,EAAAA,UAASrmC,KAAA,CAAC,kBAAmB,CAAEsmC,KAAMyQ,4CAcrCqD,EAAAA,gBAAep6C,KAAA,CAACixG,GAAsC,CAAE3qE,KAAM2qE,GAAsC32D,aAAa,qCAMjHjU,EAAAA,UAASrmC,KAAA,CAAC,0BAA2B,CAAEsmC,KAAMyQ,6BAM7C1Q,EAAAA,UAASrmC,KAAA,CAAC,uBAAwB,CAAEsmC,KAAMyQ,kBAM1C1Q,EAAAA,UAASrmC,KAAA,CAAC,MAAO,CAAEsmC,KAAM9R,EAAAA,gCAMzB6R,EAAAA,UAASrmC,KAAA,CAAC,YAAa,CAAEsmC,KAAM9R,EAAAA,sCAM/B6R,EAAAA,UAASrmC,KAAA,CAAC,kBAAmB,CAAEsmC,KAAMyQ,sCAMrC1Q,EAAAA,UAASrmC,KAAA,CAAC,wDAMVqmC,EAAAA,UAASrmC,KAAA,CAAC,qDAMVqmC,EAAAA,UAASrmC,KAAA,CAAC,gDAMVqmC,EAAAA,UAASrmC,KAAA,CAAC,iBAAkB,CAAEsmC,KAAMmzC,2BAMpCpzC,EAAAA,UAASrmC,KAAA,CAAC,eAAgB,CAAEsmC,KAAM0sF,uBAMlC3sF,EAAAA,UAASrmC,KAAA,CAAC,2BAMVqmC,EAAAA,UAASrmC,KAAA,CAAC,wBAMVqmC,EAAAA,UAASrmC,KAAA,CAAC,mCAOVqmC,EAAAA,UAASrmC,KAAA,CAAC,4BAA6B,CAAEsmC,KAAMtF,wCAa/CqF,EAAAA,UAASrmC,KAAA,CAAC,6BAA8B,CAAEsmC,KAAMtF,oCAqBhDqF,EAAAA,UAASrmC,KAAA,CAAC,wBAAyB,CAAEsmC,KAAMuQ,EAAAA,8CAM3CxQ,EAAAA,UAASrmC,KAAA,CAAC,yBAA0B,CAAEsmC,KAAMuQ,EAAAA,qCAK5CsD,EAAAA,aAAYn6C,KAAA,CAACu3G,GAA6B,CAAEjxE,KAAMuQ,EAAAA,mCAQlDsD,EAAAA,aAAYn6C,KAAA,CAACw3G,GAAyB,CAAElxE,KAAMuQ,EAAAA,sCAG9CsD,EAAAA,aAAYn6C,KAAA,CAACy3G,GAA4B,CAAEnxE,KAAMuQ,EAAAA,0CA+BjDyuB,EAAAA,aAAYtlE,KAAA,CAAC03G,+BAMbt9D,EAAAA,gBAAep6C,KAAA,CAAC03G,+BAchBrxE,EAAAA,UAASrmC,KAAA,CAAC++B,sBAMVuB,EAAAA,YAAWtgC,KAAA,CAAC,oCAMZsgC,EAAAA,YAAWtgC,KAAA,CAAC,gCAaZsgC,EAAAA,YAAWtgC,KAAA,CAAC,yCAyBZW,EAAAA,iCA8FAA,EAAAA,iCA2BAA,EAAAA,uBAsDA0lC,EAAAA,UAASrmC,KAAA,CAAC,UAAW,CAAEsmC,KAAMyoE,0BAG7B1oE,EAAAA,UAASrmC,KAAA,CAAC,UAAW,CAAEsmC,KAAM9R,EAAAA,kCAW7B7zB,EAAAA,4BA8BAA,EAAAA,2BA8BAA,EAAAA,yBA8BAA,EAAAA,0BA8BAA,EAAAA,+BA8BAA,EAAAA,6BA8BAA,EAAAA,kCAoCAkc,EAAAA,iCAMAA,EAAAA,UA/gEDkkB,EAAAA,CAFC+7E,iGA2BD/7E,EAAAA,CAFC+7E,2GAiND/7E,EAAAA,CAFC+7E,kGA4DD/7E,EAAAA,CAFC+7E,gGAgCD/7E,EAAAA,CAHC+7E,yFAoCD/7E,EAAAA,CAHC+7E,wFAoED/7E,EAAAA,CAFC+7E,4FA0BD/7E,EAAAA,CAFC+7E,8FAmBD/7E,EAAAA,CAFC+7E,+DA+FD/7E,EAAAA,CAFC+7E,gGAuoBD/7E,EAAAA,CADC/R,GAAkB,oIAycnB+R,EAAAA,CAFC+7E,mGAgGD/7E,EAAAA,CAFC+7E,oGA6BD/7E,EAAAA,CAFC+7E,oGAsED/7E,EAAAA,CAFC+7E,gGAgCD/7E,EAAAA,CAFC+7E,+FAgCD/7E,EAAAA,CAFC+7E,gGAgCD/7E,EAAAA,CAFC+7E,8FAgCD/7E,EAAAA,CAFC+7E,6FAgCD/7E,EAAAA,CAFC+7E,kGAgCD/7E,EAAAA,CAFC+7E,gGAm3CD/7E,EAAAA,CADCtS,GAAgB,4OA0DjBsS,EAAAA,CADCtS,GAAgB,+OAovDrBypF,EArsKA,CAAmDn5D,ICjOnDssF,GAAA,WAuBI,SAAAA,EAAmBC,EAA6Cp7G,EAAsBne,GAAnExe,KAAA+3I,kBAAAA,EAA6C/3I,KAAA28B,MAAAA,EAAsB38B,KAAAwe,IAAAA,EAf9Exe,KAAAg4I,kBAAuD,IAAIjpI,IAO5D/O,KAAAi4I,cAAgB,IAAIlxH,EAAAA,aAGpB/mB,KAAAk4I,YAAc,IAAInxH,EAAAA,aAGlB/mB,KAAAm4I,mBAAqB,IAAIpxH,EAAAA,aAgIpC,OA3HI+wH,EAAA53I,UAAA48C,YAAA,SAAYC,GAER,OADyC/8C,KAAKo4I,eAAer7F,IAEzD,KAAKs7F,GAAqBC,WAAYt4I,KAAKu4I,gBAAiB,MAC5D,KAAKF,GAAqBG,SAAUx4I,KAAKy4I,YAAa,MACtD,KAAKJ,GAAqBK,cAAe14I,KAAK24I,iBAAkB,MAChE,KAAKN,GAAqBO,kBAAmB54I,KAAK64I,uBAAuB74I,KAAK84I,4BAI9EhB,EAAA53I,UAAAq4I,cAAR,YAEQv4I,KAAK+4I,UACL/4I,KAAK+3I,kBAAkB98G,OAAOj7B,KAAK+3I,kBAAkBjoI,QAAQ9P,KAAK+4I,WAElE/4I,KAAKg5I,qBACLh5I,KAAK+4I,SAAW/4I,KAAK+3I,kBAAkB57F,mBACnCn8C,KAAKg5I,kBAAmBh5I,KAAK84I,0BACjC94I,KAAKi4I,cAAch/H,KAAK,CAAEq5C,MAAOtyD,KAAMmmB,KAAMnmB,KAAK+4I,SAAU13F,QAASrhD,KAAK84I,2BAC3D94I,KAAK84I,yBAAqC,aAKzC94I,KAAKg4I,kBAAkBzrI,IAAIvM,KAAK84I,yBAAqC,aAE7E94I,KAAKg4I,kBAAkBr3H,IAAI3gB,KAAK84I,yBAAqC,WAAG94I,KAAK+4I,aAMrFjB,EAAA53I,UAAAu4I,UAAR,eAEUtyH,EAAOnmB,KAAK84I,yBAAmC,SAC/CxmF,EAAQtyD,KAAK84I,yBAAgC,MAC/C3yH,IAASnmB,KAAK+4I,YACiC,IAA3CzmF,EAAMylF,kBAAkBjoI,QAAQqW,IAEhCmsC,EAAMylF,kBAAkB98G,OAAOq3B,EAAMylF,kBAAkBjoI,QAAQqW,IAE/DnmB,KAAK+4I,WAA+D,IAAnD/4I,KAAK+3I,kBAAkBjoI,QAAQ9P,KAAK+4I,WACrD/4I,KAAK+3I,kBAAkB98G,OAAOj7B,KAAK+3I,kBAAkBjoI,QAAQ9P,KAAK+4I,WAEtE/4I,KAAK+4I,SAAW5yH,EAChBnmB,KAAK+3I,kBAAkBx2F,OAAOp7B,EAAM,GACpCnmB,KAAK64I,uBAAuB74I,KAAK84I,0BACjC94I,KAAKk4I,YAAYj/H,KAAK,CAAEq5C,MAAOtyD,KAAMmmB,KAAMnmB,KAAK+4I,SAAU13F,QAASrhD,KAAK84I,6BAGxEhB,EAAA53I,UAAAy4I,eAAR,eAEUM,EAASj5I,KAAK84I,yBAAqC,WACnDI,EAAaD,EACfj5I,KAAKg4I,kBAAkBzrI,IAAI0sI,GAC3B,KAIJj5I,KAAK+3I,kBAAkB98G,OAAOj7B,KAAK+3I,kBAAkBjoI,QAAQ9P,KAAK+4I,WAClE/4I,KAAK+4I,SAAWG,MACVzB,EAAaz3I,KAAKm5I,cAAcD,EAAW73F,SACjDrhD,KAAK+3I,kBAAkBx2F,OAAOvhD,KAAK+4I,SAAU,GAC7C/4I,KAAK64I,uBAAuB74I,KAAK84I,0BACjC94I,KAAKm4I,mBAAmBl/H,KAAK,CAAEq5C,MAAOtyD,KAAMmmB,KAAMnmB,KAAK+4I,SAAU13F,QAASrhD,KAAK84I,yBAA0BrB,WAAUA,KAG/GK,EAAA53I,UAAAk5I,oBAAR,SAA4Br8F,OAClBs8F,EAAYt8F,EAAkC,yBACpD,QAASA,EAA2B,mBAAMs8F,GAAar5I,KAAKs5I,wBAAwBD,IAGhFvB,EAAA53I,UAAAo5I,wBAAR,SAAgCD,WACtBE,EAAc/5I,OAAOiP,KAAK4qI,EAAU/iF,eAAiB,IACrDkjF,EAAch6I,OAAOiP,KAAK4qI,EAAUp8F,cAAgB,IAE1D,GAAIs8F,EAAY54I,SAAW64I,EAAY74I,OAQnC,OAAO,MAPP,IAAuB,IAAA84I,EAAAjrI,EAAAgrI,GAAWE,EAAAD,EAAAv3I,QAAAw3I,EAAAt3I,KAAAs3I,EAAAD,EAAAv3I,OAAE,CAA/B,IAAMw2G,EAAQghC,EAAAv3I,MACf,IAAuC,IAAnCo3I,EAAYzpI,QAAQ4oG,GACpB,OAAO,uGAGf,OAAO,GAMPo/B,EAAA53I,UAAA24I,uBAAR,SAA+Bc,eAC3B,IAAuB,IAAAprI,EAAAC,EAAAhP,OAAOiP,KAAKkrI,IAAIjrI,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAApC,IAAMw2G,EAAQhqG,EAAAvM,MACTnC,KAAK+4I,SAAgB,QAAErgC,GAAkB14G,KAA6B,yBAAE04G,0GAI9Eo/B,EAAA53I,UAAAi5I,cAAR,SAAsBQ,WACZj/G,EAAQ,OACd,IAAuB,IAAAnsB,EAAAC,EAAAhP,OAAOiP,KAAKkrI,IAAIjrI,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAApC,IAAMw2G,EAAQhqG,EAAAvM,MACfu4B,EAAMg+E,GAAYihC,EAAIjhC,wGAE1B,OAAOh+E,GAGHo9G,EAAA53I,UAAAk4I,eAAR,SAAuBr7F,OACb68F,EAAY55I,KAAK84I,yBAAmC,SACpDG,EAASj5I,KAAK84I,yBAAqC,WACnDI,EAAaD,EACfj5I,KAAKg4I,kBAAkBzrI,IAAI0sI,GAC3B,KACEY,EAAiB75I,KAAKo5I,oBAAoBr8F,GAChD,OAAI68F,EAEOvB,GAAqBG,SACrBqB,GAAkBX,EAElBb,GAAqBK,eACpB14I,KAAK+4I,UAAYc,EAElBxB,GAAqBC,WACrBt4I,KAAK84I,yBAELT,GAAqBO,uBAFzB,uBAhJd1rI,EAAAA,UAAST,KAAA,CAAC,CAAEU,SAAU,mEARuB0lC,EAAAA,wBAA4BhO,EAAAA,cADxBgI,EAAAA,uEAmB7Cz/B,EAAAA,iCAEAA,EAAAA,6BAEAkc,EAAAA,4BAGAA,EAAAA,mCAGAA,EAAAA,UAiILwuH,EArJA,OAuJIQ,WAAA,EACAE,SAAA,EACAE,cAAA,EACAE,kBAAA,+IAgBJ,IAAAkB,GAAA,WAAA,SAAAA,KAQA,2BARCrsI,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACoqI,IACfjzF,gBAAiB,GACjBl3C,QAAS,CAACmqI,IACVr/F,QAAS,CAACC,EAAAA,kBAIdohG,EARA,GCpLAC,GAAA,WAUI,SAAAA,EAAoB55H,GAAAngB,KAAAmgB,QAAAA,EASxB,OAPI45H,EAAA75I,UAAA+C,UAAA,SAAUmJ,EAAY0qD,QAAA,IAAAA,IAAAA,EAAA,OACZx9C,EAAiBtZ,KAAKmgB,QAAQxM,KAAK2F,eACzC,OAAOA,EAAeojH,mBAClBpjH,EAAekiH,cACfx7H,KAAKmgB,QAAQnK,yCAZxB4K,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,yBACNiL,MAAM,+CALDtL,MAkBTwkI,EAnBA,GCAAC,GAAA,WAOI,SAAAA,EAAmBtqG,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BALCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,mEAJMm2C,EAAAA,eAQpB02F,EARA,OCmBIvyF,MAAQ,QACRwyF,OAAS,SACTvyF,IAAM,WAINwyF,OAAS,SACT1sE,KAAO,OACPE,QAAU,UACVD,QAAU,yBAQd,SAAA0sE,IAIYn6I,KAAAo6I,mBAA6BpoI,UAK3BhS,KAAAq6I,gBA7BI,EAiCJr6I,KAAAs6I,KAAO,IAIPt6I,KAAAi+D,OArCI,EAyCJj+D,KAAAu6I,UAAW,EA4HzB,OA1GI/6I,OAAAgC,eAAW24I,EAAAj6I,UAAA,iBAAc,KAAzB,WACI,OAAOF,KAAKq6I,qBAiBhB,SAA0Bl4I,GACtBnC,KAAKq6I,gBAAkBl4I,mCAMjBg4I,EAAAj6I,UAAAs6I,aAAV,SAAuBl7H,EAAamzD,GAApC,IAAAjhE,EAAAxR,KACIA,KAAKo6I,mBAAqB7hG,sBACtB,WAAM,OAAA/mC,EAAKipI,uBAAuB75I,KAAK4Q,EAAM8N,EAAKmzD,MAMhD0nE,EAAAj6I,UAAAu6I,uBAAV,SAAiCn7H,EAAamzD,GAA9C,IAAAjhE,EAAAxR,KACIA,KAAKi+D,QAAUwU,MACTioE,EAAcC,GAAoBr7H,EAAKtf,KAAKs6I,MAC5CM,EAAgBD,GAAoB36I,KAAKi+D,OAAQj+D,KAAKs6I,MACxDt6I,KAAK66I,iBAAmBH,GACxB16I,KAAK86I,eAAex7H,GACpB22B,qBAAqBj2C,KAAKo6I,qBACnBp6I,KAAK+6I,eAAeH,EAAeF,EAAajoE,IACvDzyE,KAAK86I,eAAex7H,GACpB22B,qBAAqBj2C,KAAKo6I,sBAE1Bp6I,KAAK66I,eAAiBD,EACtB56I,KAAKo6I,mBAAqB7hG,sBAAsB,WAAM,OAAA/mC,EAAKipI,uBAAuB75I,KAAK4Q,EAAM8N,EAAKmzD,OAOhG0nE,EAAAj6I,UAAA86I,uBAAV,SAAiC17H,GAC7Btf,KAAKi+D,OAAS3+C,EACdtf,KAAK66I,eAAiBF,GAAoB36I,KAAKi+D,OAAQj+D,KAAKs6I,OAMtDH,EAAAj6I,UAAA+6I,cAAV,SAAwBh+F,EAAsB8/C,EAAmBtqB,GAC7D,OAAIx1B,EAAe8/C,EACRtqB,GAGHA,GAMJ0nE,EAAAj6I,UAAA66I,eAAR,SAAuBz7H,EAAa47H,EAAoBzoE,GACpD,OAAOzyE,KAAKm7I,sBAAsB77H,EAAK47H,EAAYzoE,IAASzyE,KAAKo7I,sBAAsB97H,EAAK47H,EAAYzoE,IAWpG0nE,EAAAj6I,UAAAi7I,sBAAR,SAA8B77H,EAAa47H,EAAoBzoE,GAC3D,OAAayoE,EAAN57H,GAA2B,EAAPmzD,GAUvB0nE,EAAAj6I,UAAAk7I,sBAAR,SAA8B97H,EAAa47H,EAAoBzoE,GAC3D,OAAOnzD,EAAM47H,GAAczoE,EAAO,GAO9B0nE,EAAAj6I,UAAA46I,eAAR,SAAuBx7H,GACnBtf,KAAKi+D,OAAS3+C,EACdtf,KAAK66I,eAAiBF,GAAoB36I,KAAKi+D,OAAQj+D,KAAKs6I,OAEpEH,KACIkB,GAAiB,EACjBC,GAAmB,EACvBC,GAAA,SAAA1vH,GAyFI,SAAA0vH,IAAA,IAAA/pI,EACIqa,EAAAjrB,KAAAZ,OAAOA,YAIJwR,EAAAgqI,SAAW,EAGXhqI,EAAA8/B,SAAW,iBAUX9/B,EAAAiqI,SAAU,EAUVjqI,EAAA40E,eAAgB,EAShB50E,EAAA69B,KAAO,cASP79B,EAAApF,GAAK,kBAAkBivI,KAiBvB7pI,EAAAkqI,UAA0BC,GAAal0F,MASvCj2C,EAAAoqI,gBAAiB,EASjBpqI,EAAAqqI,SAAU,EAmBVrqI,EAAAkF,KAAO,UA8DGlF,EAAAsqI,kBAAoB,IAAI/0H,EAAAA,eAiC7C,OAxRmDvS,EAAAA,EAAAA,GAQ/ChV,OAAAgC,eACI+5I,EAAAr7I,UAAA,UAAO,KAeX,WACI,OAAOF,KAAKu6I,cAjBhB,SACY97I,GACRuB,KAAKu6I,SAAW97I,mCAwBpBe,OAAAgC,eAEI+5I,EAAAr7I,UAAA,MAAG,KAeP,WACI,OAAOF,KAAKs6I,UAlBhB,SAEQyB,GACJ/7I,KAAKs6I,KAAOyB,mCA6BhBv8I,OAAAgC,eACI+5I,EAAAr7I,UAAA,OAAI,KADR,WAEI,OAAIF,KAAKg8I,MACEh8I,KAAKg8I,MAlPJ,IAqPLh8I,KAAKs6I,UAShB,SAASh7H,GACLtf,KAAKg8I,MAAQz+H,OAAO+B,oCAoHxB9f,OAAAgC,eAEI+5I,EAAAr7I,UAAA,QAAK,KAFT,WAGI,OAAOF,KAAKi+D,YAShB,SAAU3+C,GAEN,GADAA,EAAM/B,OAAO+B,GACTtf,KAAKi+D,SAAW3+C,IAAOtf,KAAKomF,cAAhC,KAIM61D,EAAeC,GAAsB58H,EAAKtf,KAAKuiB,KACrD,IAAIQ,MAAMk5H,GAAV,KAGME,EAAgB,CAClBl/F,aAAcg/F,EACd3lF,cAAet2D,KAAKi+D,QAGlB70B,EAAcvd,EAAA3rB,UAAM+6I,cAAar6I,KAAAZ,KAACA,KAAKi+D,OAAQ3+C,EAAKtf,KAAKyyE,MAC3DzyE,KAAKu6I,UAAYj7H,GAAOtf,KAAKyyE,KAC7B5mD,EAAA3rB,UAAMs6I,aAAY55I,KAAAZ,KAACi8I,EAAc7yG,GAEjCvd,EAAA3rB,UAAM86I,uBAAsBp6I,KAAAZ,KAACi8I,GAGjCj8I,KAAK87I,kBAAkB7iI,KAAKkjI,sCAoBhC38I,OAAAgC,eACW+5I,EAAAr7I,UAAA,SAAM,KADjB,WAEI,OAAOF,KAAK0W,OAAS0lI,GAAgBlC,wCAMzC16I,OAAAgC,eACW+5I,EAAAr7I,UAAA,OAAI,KADf,WAEI,OAAOF,KAAK0W,OAAS0lI,GAAgB5uE,sCAMzChuE,OAAAgC,eACW+5I,EAAAr7I,UAAA,UAAO,KADlB,WAEI,OAAOF,KAAK0W,OAAS0lI,GAAgB1uE,yCAMzCluE,OAAAgC,eACW+5I,EAAAr7I,UAAA,UAAO,KADlB,WAEI,OAAOF,KAAK0W,OAAS0lI,GAAgB3uE,6DA1R5Ch+B,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,iBACVuiC,SAAA,qoBAUCtiC,EAAAA,mBA0BA2/B,EAAAA,YAAWtgC,KAAA,CAAC,uBAAoB,CAAAiK,KAChCtJ,EAAAA,oBA+BAA,EAAAA,wBAuBA2/B,EAAAA,YAAWtgC,KAAA,CAAC,wCAGZsgC,EAAAA,YAAWtgC,KAAA,CAAC,yCASZsgC,EAAAA,YAAWtgC,KAAA,CAAC,kCAA+B,CAAAiK,KAC3CtJ,EAAAA,6BASA2/B,EAAAA,YAAWtgC,KAAA,CAAC,wCAAqC,CAAAiK,KACjDtJ,EAAAA,oBAQA2/B,EAAAA,YAAWtgC,KAAA,CAAC,cAAW,CAAAiK,KACvBtJ,EAAAA,kBAQA2/B,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,yBAiBAA,EAAAA,8BASAA,EAAAA,uBASAA,EAAAA,oBASAA,EAAAA,oBAUAA,EAAAA,qBAcA2/B,EAAAA,YAAWtgC,KAAA,CAAC,uBAAoB,CAAAiK,KAChCtJ,EAAAA,iCAgDAkc,EAAAA,uBAKAyjB,EAAAA,YAAWtgC,KAAA,CAAC,8CAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,+CAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,kDAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,oCAIjB8uI,EA5RA,CAImDpB,mBAwf/C,SAAAkC,EAAoBvsF,GAApB,IAAAt+C,EACIqa,EAAAjrB,KAAAZ,OAAOA,YADSwR,EAAAs+C,SAAAA,EAxNHt+C,EAAA8qI,sBAAwB,IACxB9qI,EAAA+qI,wBAA0B,GAIpC/qI,EAAA8/B,SAAW,mBAeX9/B,EAAAsqI,kBAAoB,IAAI/0H,EAAAA,aAUxBvV,EAAApF,GAAK,oBAAoBkvI,KAUzB9pI,EAAA40E,eAAgB,EAShB50E,EAAAoqI,gBAAiB,EAkKhBpqI,EAAAgrI,cAAgB,GAChBhrI,EAAAirI,eAAiB,EAAIn6H,KAAKo6H,GAAKlrI,EAAKgrI,gBAuDhD,OA7QqDhoI,EAAAA,EAAAA,GAuEjDhV,OAAAgC,eAAW66I,EAAAn8I,UAAA,UAAO,KAAlB,WACI,MAAO,CACHk8C,UAAW,CAAEj6C,MAAOnC,KAAKmC,MAAO04I,eAAgB76I,KAAK66I,eAAgBt4H,IAAKviB,KAAKuiB,uCAUvF/iB,OAAAgC,eACI66I,EAAAn8I,UAAA,UAAO,KAeX,WACI,OAAOF,KAAKu6I,cAjBhB,SACY97I,GACRuB,KAAKu6I,SAAW97I,mCAwBpBe,OAAAgC,eACI66I,EAAAn8I,UAAA,MAAG,KAkBP,WACI,OAAOF,KAAKs6I,UApBhB,SACQyB,GACJ/7I,KAAKs6I,KAAOyB,mCAgChBv8I,OAAAgC,eACI66I,EAAAn8I,UAAA,OAAI,KADR,WAEI,OAAIF,KAAKg8I,MACEh8I,KAAKg8I,MA7lBJ,IAgmBLh8I,KAAKs6I,UAShB,SAASh7H,GACLtf,KAAKg8I,MAAQz+H,OAAO+B,oCAiBxB9f,OAAAgC,eACI66I,EAAAn8I,UAAA,QAAK,KADT,WAEI,OAAOF,KAAKi+D,YAShB,SAAU3+C,GAEN,GADAA,EAAM/B,OAAO+B,GACTtf,KAAKi+D,SAAW3+C,IAAOtf,KAAKomF,cAAhC,KAIMu2D,EAAqBT,GAAsB58H,EAAKtf,KAAKuiB,KAC3D,IAAIQ,MAAM45H,GAAV,KAIMR,EAAgB,CAClBl/F,aAAc0/F,EACdrmF,cAAet2D,KAAKi+D,QAGlB70B,EAAcvd,EAAA3rB,UAAM+6I,cAAar6I,KAAAZ,KAACA,KAAKi+D,OAAQ3+C,EAAKtf,KAAKyyE,MAC3DzyE,KAAKvB,SAAW6gB,GAAOtf,KAAKyyE,KAC5B5mD,EAAA3rB,UAAMs6I,aAAY55I,KAAAZ,KAAC28I,EAAoBvzG,GAEvCppC,KAAKg7I,uBAAuB2B,GAGhC38I,KAAK87I,kBAAkB7iI,KAAKkjI,sCAezBE,EAAAn8I,UAAAu6I,uBAAP,SAA8Bn7H,EAAamzD,OAEjCmqE,EAAS,CAAC,CACZC,iBAAkB78I,KAAK88I,YAAY98I,KAAKi+D,QACxC8+E,cAAgB/8I,KAAKi+D,OAASj+D,KAAKs8I,sBAAyBt8I,KAAKu8I,yBAClE,CACCM,iBAAkB78I,KAAK88I,YAAY98I,KAAK66I,gBACxCkC,cAAgB/8I,KAAK66I,eAAiB76I,KAAKs8I,sBAAyBt8I,KAAKu8I,0BAE7Ev8I,KAAKg9I,WAAWn/G,cAAcp/B,QAAQm+I,EAAQ,CAC1C/9I,OAAQ,WACRy1B,KAAM,aAGVzI,EAAA3rB,UAAMu6I,uBAAsB75I,KAAAZ,KAACsf,EAAKmzD,IAMtCjzE,OAAAgC,eAAW66I,EAAAn8I,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKsiE,sCAMT+5E,EAAAn8I,UAAA86I,uBAAP,SAA8B17H,GAC1BuM,EAAA3rB,UAAM86I,uBAAsBp6I,KAAAZ,KAACsf,GAE7Btf,KAAK8vD,SAAS/qB,SACV/kC,KAAKg9I,WAAWn/G,cAChB,oBACA79B,KAAK88I,YAAY98I,KAAK66I,iBAE1B76I,KAAK8vD,SAAS/qB,SACV/kC,KAAKg9I,WAAWn/G,cAChB,iBACC79B,KAAK66I,eAAiB76I,KAAKs8I,sBAAyBt8I,KAAKu8I,0BAG1DF,EAAAn8I,UAAA48I,YAAR,SAAoBG,GAChB,OAAOj9I,KAAKy8I,eAAkBQ,EAAaj9I,KAAKy8I,eAAiB,yBA/QxEhtG,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,mBACVuiC,SAAA,85BA/cAof,EAAAA,+CAudC/hB,EAAAA,YAAWtgC,KAAA,CAAC,qDAeZ6c,EAAAA,mBASAyjB,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,6BASA2/B,EAAAA,YAAWtgC,KAAA,CAAC,0CAAuC,CAAAiK,KACnDtJ,EAAAA,8BASAA,EAAAA,oBAYAA,EAAAA,4BAGAw5C,EAAAA,aAAYn6C,KAAA,CAACutI,GAAoC,CAAEjnG,KAAMinG,sBAkBzD5sI,EAAAA,mBA0BAA,EAAAA,oBAkCAA,EAAAA,qBAiCAA,EAAAA,0BAwCA0lC,EAAAA,UAASrmC,KAAA,CAAC,aAqDf4vI,GA7QqDlC,IA+QrD,SAAgB+B,GAAsB/5I,EAAeogB,EAAaE,GAC9D,YAD8D,IAAAA,IAAAA,EAAA,GACvDH,KAAKC,IAAID,KAAKG,IAAItgB,EAAOogB,GAAME,GAG1C,SAAgBk4H,GAAoBx4I,EAAeogB,GAC/C,OAAOD,KAAKmC,MAAM,IAAMtiB,EAAQogB,GAMpC,IAAA26H,GAAA,WAAA,SAAAA,KAMA,2BANCzvI,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC6tI,GAA+Bc,GAAiCrC,IAC/ErsI,QAAS,CAAC4tI,GAA+Bc,GAAiCrC,IAC1EvhG,QAAS,CAACC,EAAAA,kBAGdwkG,EANA,iBC9uBA,SAAAC,KAqBA,OAhBIA,EAAAj9I,UAAA+C,UAAA,SAAUgwC,EAAiBgrB,EAAa9sD,EAAW4E,GAC/C,IAAKk9B,EACD,MAAO,OAGLhkC,EAAS,GASf,OAPAzP,OAAO2jG,QAAQlwD,GAAY/iC,QAAQ,SAACvD,OAAA4B,EAAAlM,EAAAsK,EAAA,GAAC2kC,EAAA/iC,EAAA,GAAU6uI,EAAA7uI,EAAA,IACF,mBAApB6uI,EAAiCA,EAAgBjsI,EAAM4E,GAASqnI,IAEjFnuI,EAAOzM,KAAK8uC,KAIbriC,EAAOojB,KAAK,0BAnB1BzR,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,oBAoBVunI,KAMAE,GAAA,WAAA,SAAAA,KAQA,OAHIA,EAAAn9I,UAAA+C,UAAA,SAAUd,GACN,OAAOA,EAAMsU,OAAO,SAAA8M,GAAQ,OAACA,EAAKiqF,mCANzC5sF,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,oBAOVynI,EARA,iBAUA,SAAAC,KAQA,OAHIA,EAAAp9I,UAAA+C,UAAA,SAAUd,GACN,OAAOA,EAAMsU,OAAO,SAAA8M,GAAQ,OAAe,IAAfA,EAAK9P,6BANxCmN,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,kBAOV0nI,KAIAC,GAAA,WAAA,SAAAA,KASA,OAHWA,EAAAr9I,UAAA+C,UAAP,SAAiBd,GACb,OAAOA,EAAMqO,MAAM,aAAa6hB,KAAK,0BAP5CzR,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,kBACNiL,MAAM,MAOV08H,EATA,GAYAC,GAAA,WAMI,SAAAA,EAAoBr9H,GAAAngB,KAAAmgB,QAAAA,EAcxB,OAZIq9H,EAAAt9I,UAAA+C,UAAA,SAAUia,EAAmB9Q,EAAYiU,OAC/B1M,EAA6B3T,KAAKmgB,QAAQxM,KAEhD,OAAIuJ,GAAcvJ,EAAKuC,aAAaC,QACjBC,GAASC,kBACpBxI,GAAWqP,GACXvJ,EAAKuC,aAAaI,sBAAqB,GACvC3C,EAAK4C,YAGN2G,uBAlBd0D,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,kBACNiL,MAAM,+CApEDtL,MAsFTioI,EApBA,GCnEAC,GAAA,WAWA,SAAAA,KAuBkC,2BAvBjChwI,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACVmkG,GACAG,GACAurC,GACAC,GACAH,GACAC,GACAH,IAEJxvI,QAAS,CACLkkG,GACAG,GACAurC,GACAC,GACAH,GACAC,GACAH,IAEJ1kG,QAAS,CACLC,EAAAA,kBAG0B+kG,EAlClC,GCQAC,GAAA,WAiBI,SAAAA,KAqDJ,OAnDIl+I,OAAAgC,eAAYk8I,EAAAx9I,UAAA,iBAAc,KAA1B,WACI,OAAOF,KAAK2T,KAAK40F,eAAe9xF,OAAO,SAAAX,GAAO,QAAEA,aAAeqiG,uCAGnE34G,OAAAgC,eAAIk8I,EAAAx9I,UAAA,iBAAc,KAAlB,WACI,OAAoC,IAA7BF,KAAKoY,OAAOwP,cACqC,IAAnD5nB,KAAK2T,KAAK80F,gBAAgB34F,QAAQ9P,KAAKoY,SAAiBpY,KAAKoY,OAAO44F,gBAC9C,IAAtBhxG,KAAKoY,OAAO3E,QAAgBzT,KAAK29I,WAAW,EAAG39I,KAAKuoG,iDAG7D/oG,OAAAgC,eAAIk8I,EAAAx9I,UAAA,kBAAe,KAAnB,WACI,OAAOF,KAAKoY,OAAOwP,eAAiB5nB,KAAKuoG,eAAe5nG,OAAS,GACtC,IAAtBX,KAAKoY,OAAO3E,QAAgBzT,KAAK29I,WAAW,EAAG39I,KAAKuoG,iDAGtDm1C,EAAAx9I,UAAA09I,oBAAP,SAA2BC,OACnBjnC,EACA52G,KAAKoY,OAAO6P,OACRjoB,KAAKoY,OAAOogG,cAAkC,IAAlBqlC,GAC5BjnC,EAAe52G,KAAK2T,KAAK80F,gBAAgB,GACzCo1C,EAAgB,GAEhBjnC,EAAe52G,KAAK29I,WAAWE,EAAe79I,KAAK2T,KAAK60F,eAEF,IAAnDxoG,KAAK2T,KAAK80F,gBAAgB34F,QAAQ9P,KAAKoY,SAAmC,IAAlBylI,GAC/DjnC,EAAe52G,KAAK2T,KAAK60F,cAAcxoG,KAAK2T,KAAK60F,cAAc7nG,OAAS,GACxEk9I,EAAgB,GAEhBjnC,EAAe52G,KAAK29I,WAAWE,EAAe79I,KAAK2T,KAAK80F,iBAE5DzoG,KAAK2T,KAAKg+F,WAAW3xG,KAAKoY,OAAQw+F,EAAcinC,IAG5CH,EAAAx9I,UAAAy9I,WAAR,SAAmBE,EAAuBxhI,OAClC7J,EAAQ6J,EAAQvM,QAAQ9P,KAAKoY,QACjC,GAAsB,IAAlBylI,GACA,KAAe,EAARrrI,GAEH,GAAI6J,IADJ7J,GACmBiB,QAAUzT,KAAKoY,OAAO3E,OAAS4I,EAAQ7J,GAAOkB,SAAW1T,KAAKoY,OAAO1E,OACpF,OAAO2I,EAAQ7J,QAIvB,KAAOA,EAAQ6J,EAAQ1b,OAAS,GAE5B,GAAI0b,IADJ7J,GACmBiB,QAAUzT,KAAKoY,OAAO3E,OAAS4I,EAAQ7J,GAAOkB,SAAW1T,KAAKoY,OAAO1E,OACpF,OAAO2I,EAAQ7J,wBAjElCi9B,EAAAA,UAAShjC,KAAA,CAAC,CACPq7F,gBAAiBC,EAAAA,wBAAwBC,OACzCthB,qBAAqB,EACrBv5E,SAAU,gCACVuiC,SAAA,ikCAICtiC,EAAAA,oBAGAA,EAAAA,8BAGAA,EAAAA,SAwDLswI,EAtEA,GCAAI,GAAA,SAAAjyH,GAYI,SAAAiyH,EAA+DnxF,GAA/D,IAAAn7C,EACIqa,EAAAjrB,KAAAZ,KAAM2sD,IAAuB3sD,YAD8BwR,EAAAm7C,uBAAAA,IAGnE,OAf0Cn4C,EAAAA,EAAAA,wEAYzBs4B,EAAAA,UAAQ,CAAAp2B,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAAC6+C,SAGpCwyF,EAfA,CAA0CtyF,QAiBZmE,KAAA,EAAMuuE,KAAA,EAAME,MAAA,8DAE1C,IAAA2f,GAAA,WAII,SAAAA,EAAmBruG,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BALCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,8DA5BMm2C,EAAAA,eAgCpBy6F,EALA,iBAWI,SAAAC,EAAmBtuG,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BALCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,gEAnCMm2C,EAAAA,eAuCpB06F,mBAMI,SAAAC,EAAmBvuG,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BALCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,wEA1CMm2C,EAAAA,eA8CpB26F,mBAMI,SAAAC,EAAmBxuG,GAAA1vC,KAAA0vC,SAAAA,EACvB,2BALCxiC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,yEAjDMm2C,EAAAA,eAqDpB46F,KC1CAC,GAAA,WAqBI,SAAAA,EAAoBxhH,EAAyCyhH,GAAzCp+I,KAAA28B,MAAAA,EAAyC38B,KAAAo+I,IAAAA,EAhBnDp+I,KAAAq+I,cAA+B,CAGrCC,WAAY7hE,OAAO8hE,WACnBC,YAAa,CACT,CAAE/hE,OAAOgiE,IAAK,CAAE9hE,UAAW,IAC3B,CAAEF,OAAOiiE,MAAO,CAAEC,QAAQ,IAC1B,CAAEliE,OAAOmiE,OAAQ,CAAED,QAAQ,IAC3B,CAAEliE,OAAOoiE,MAAO,CACZ54I,UAAWw2E,OAAOqiE,yBAKtB9+I,KAAA++I,gBAA4E,GAsHxF,OAjHWZ,EAAAj+I,UAAA8+I,SAAP,SAAgB5qF,GACZ,OAAOA,EAAUliD,cAAcwZ,SAAS,aAOrCyyH,EAAAj+I,UAAAiiC,iBAAP,SAAwBV,EACA2yB,EACA6qF,EACA/3H,GAHxB,IAAA1V,EAAAxR,KAMI,YAHoB,IAAAknB,IAAAA,EAAA,MAGblnB,KAAK28B,MAAM+K,kBAAkB,eAC5Bw3G,EAAoB1tI,EAAK2tI,qBAAqB19G,GACvC,OAAPy9G,IAEAA,EAAK,IAAIziE,OAAOh7C,EAASjwB,EAAK6sI,eAC9B7sI,EAAK4tI,qBAAqB39G,EAASy9G,QAEjCG,EAAU,SAACC,GAAe9tI,EAAKmrB,MAAM+gB,IAAI,WAAQuhG,EAAaK,MAEpE,OADAJ,EAAGK,GAAGnrF,EAAWirF,GACV,WAAQH,EAAGM,IAAIprF,EAAWirF,OAUlClB,EAAAj+I,UAAAu/I,uBAAP,SAA8Bz+I,EAAgBozD,EAAmB6qF,OACvDx9G,EAAUzhC,KAAK0/I,qBAAqB1+I,GAG1C,OAAOhB,KAAKmiC,iBAAgB,EAAyBiyB,EAAW6qF,IAQ7Dd,EAAAj+I,UAAAw/I,qBAAP,SAA4B1+I,GACxB,OAAO2+I,EAAAA,UAASD,qBAAqB1/I,KAAKo+I,IAAKp9I,IAc5Cm9I,EAAAj+I,UAAA0/I,iBAAP,SAAwBn+G,EAAsBjB,EAAetZ,GACzClnB,KAAKm/I,qBAAqB19G,GAClCl1B,IAAIi0B,GAAO7f,IAAIuG,IAQpBi3H,EAAAj+I,UAAAk/I,qBAAP,SAA4B39G,EAAsBo+G,GAC9C7/I,KAAK++I,gBAAgBv8I,KAAK,CAACi/B,QAAOA,EAAEo+G,QAAOA,KAQxC1B,EAAAj+I,UAAAi/I,qBAAP,SAA4B19G,OAClBxyB,EAAUjP,KAAK++I,gBAAgBtoI,OAAO,SAACtU,EAAOqQ,EAAO1E,GACvD,OAAO3L,EAAMs/B,UAAYA,IAE7B,OAAOxyB,EAAOtO,OAASsO,EAAO,GAAG4wI,QAAU,MAQxC1B,EAAAj+I,UAAA4/I,wBAAP,SAA+Br+G,GAE3B,QADIjvB,EAAgB,KACXhS,EAAI,EAAGA,EAAIR,KAAK++I,gBAAgBp+I,OAAQH,IAC7C,GAAIihC,IAAYzhC,KAAK++I,gBAAgBv+I,GAAGihC,QAAS,CAC7CjvB,EAAQhS,EACR,MAGM,OAAVgS,GACaxS,KAAK++I,gBAAgBhoI,OAAOvE,EAAO,GAAG,GAE9CqtI,QAAQngH,WAKdy+G,EAAAj+I,UAAAw/B,QAAP,uBACI,IAAmB,IAAAnxB,EAAAC,EAAAxO,KAAK++I,iBAAerwI,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAA1BwM,EAAAvM,MACN09I,QAAQngH,+GAEjB1/B,KAAK++I,gBAAkB,wBAvI9B//H,EAAAA,sDAX4B6lB,EAAAA,0CAgCWF,EAAAA,OAAMl4B,KAAA,CAACm4B,EAAAA,eAoH/Cu5G,EAzIA,GCuBA4B,GAAA,WA8CI,SAAAA,EACWlV,EACCjtG,EACAoF,GAFDhjC,KAAA6qI,KAAAA,EACC7qI,KAAA49B,WAAAA,EACA59B,KAAAgjC,UAAAA,EAtCJhjC,KAAAggJ,UAA6BC,GAAgBtwF,KAK7C3vD,KAAAkgJ,UAAY,EAKZlgJ,KAAA+vC,OAAiB,KAKjB/vC,KAAAmgJ,WAAaF,GAAgBtwF,KAmD9B3vD,KAAAynB,QAAS,EAkCTznB,KAAA07C,YAAc,QA0SzB,OAnUIl8C,OAAAgC,eACWu+I,EAAA7/I,UAAA,OAAI,KADf,WAEI,OAAOF,KAAKu0B,SAAW,YAAc,4CAgCzC/0B,OAAAgC,eACIu+I,EAAA7/I,UAAA,cAAW,KADf,WAEI,OAAOF,KAAKu0B,0CAUhB/0B,OAAAgC,eACIu+I,EAAA7/I,UAAA,aAAU,KADd,WAEI,OAAQF,KAAKu0B,0CAUjB/0B,OAAAgC,eACIu+I,EAAA7/I,UAAA,UAAO,KADX,WAEI,OAAOF,KAAKynB,OAAS,OAAS,oCAOlCs4H,EAAA7/I,UAAAkwC,QADA,SACQ6D,GACJj0C,KAAK6qI,KAAKuV,cAAcnnI,KAAK,CAAEsK,KAAMvjB,KAAMwgC,MAAOyT,EAAKhuC,UAAWjG,KAAKmgJ,aACvEngJ,KAAKmgJ,WAAaF,GAAgBtwF,MAOtCowF,EAAA7/I,UAAAmgJ,SADA,SACS3iH,GACD19B,KAAKsgJ,OAAOtgJ,KAAKu0B,WAGhBv0B,KAAKsgJ,OAAOtgJ,KAAK6qI,KAAK0V,mBAAsBvgJ,KAAKsgJ,OAAOtgJ,KAAK6qI,KAAK2V,oBAS3ET,EAAA7/I,UAAAugJ,QADA,SACQ/iH,GACJ,IAAI19B,KAAKsgJ,OAAOtgJ,KAAKu0B,YAGhBv0B,KAAKsgJ,OAAOtgJ,KAAK6qI,KAAK0V,mBAAsBvgJ,KAAKsgJ,OAAOtgJ,KAAK6qI,KAAK2V,oBAAvE,KAGME,EAAkBhjH,EAAGwX,OAAS,EAChCwrG,GAAmB1gJ,KAAKsgJ,OAAOtgJ,KAAK6qI,KAAK0V,mBACzCvgJ,KAAK2gJ,sBACL3gJ,KAAK4gJ,sBAAsBt+H,KAAKC,IAAIviB,KAAK6gJ,QAASnjH,EAAGwX,WAC7CwrG,GAAmB1gJ,KAAKsgJ,OAAOtgJ,KAAK6qI,KAAK2V,qBACjDxgJ,KAAK8gJ,uBACL9gJ,KAAK4gJ,sBAAsBt+H,KAAKG,IAAIziB,KAAK+gJ,SAAUrjH,EAAGwX,YAQ9D6qG,EAAA7/I,UAAA8gJ,OADA,SACOtjH,GACH,IAAI19B,KAAKsgJ,OAAOtgJ,KAAKu0B,YAGhBv0B,KAAKsgJ,OAAOtgJ,KAAK6qI,KAAK0V,mBAAsBvgJ,KAAKsgJ,OAAOtgJ,KAAK6qI,KAAK2V,oBAAvE,KAKMS,EAAiBjhJ,KAAKkgJ,UACtBgB,EAAsBlhJ,KAAK0P,MAAQ1P,KAAK6qI,KAAKsW,0BAEnD,GAAuB,IAAnBF,EAAJ,KAIM5vI,EAAuB,EAAjB4vI,EAAqBhB,GAAgB7hB,MAAQ6hB,GAAgB/hB,KACzEl+H,KAAKmgJ,WAAa9uI,MAEZ+vI,EAAcphJ,KAAKggJ,UACzB,GAAI19H,KAAKukB,IAAIo6G,GAAkBC,EAI3B,OAHAlhJ,KAAK4gJ,sBAAsB,GAC3B5gJ,KAAKggJ,UAAYC,GAAgBtwF,UACjC3vD,KAAKqhJ,mCAIH50I,EAAO,CAAE8W,KAAMvjB,KAAMiG,UAAWoL,EAAKiwI,UAAU,GAqBrD,GAnBIjwI,IAAQ4uI,GAAgB/hB,KACxBl+H,KAAK6qI,KAAK0W,UAAUtoI,KAAKxM,GAEzBzM,KAAK6qI,KAAK2W,WAAWvoI,KAAKxM,IAGR,IAAlBA,EAAK60I,UACLthJ,KAAK4gJ,sBAAsB,GAC3B5gJ,KAAKggJ,UAAYC,GAAgBtwF,MAE7Bt+C,IAAQ4uI,GAAgB/hB,MACxBl+H,KAAK4gJ,sBAAsB5gJ,KAAK6gJ,SAChC7gJ,KAAKggJ,UAAYC,GAAgB/hB,OAEjCl+H,KAAK4gJ,sBAAsB5gJ,KAAK+gJ,UAChC/gJ,KAAKggJ,UAAYC,GAAgB7hB,OAIrCgjB,IAAgBphJ,KAAKggJ,UAAW,KAC1ByB,EAAQ,CAAEC,SAAUN,EAAaO,SAAU3hJ,KAAKggJ,UAAWz8H,KAAMvjB,MACvEA,KAAK6qI,KAAK+W,iBAAiB3oI,KAAKwoI,GAEpCzhJ,KAAKqhJ,kCAMDtB,EAAA7/I,UAAAygJ,oBAAR,WACI3gJ,KAAK6hJ,mCAAmC,UAAW,WAM/C9B,EAAA7/I,UAAA4gJ,qBAAR,WACI9gJ,KAAK6hJ,mCAAmC,SAAU,YAM9C9B,EAAA7/I,UAAAmhJ,6BAAR,WAAA,IAAA7vI,EAAAxR,KACIsmD,WAAW,WACP90C,EAAKqwI,mCAAmC,SAAU,WACnD,MAMC9B,EAAA7/I,UAAA2hJ,mCAAR,SAA2CC,EAAgBC,GACnD/hJ,KAAKgiJ,4BAA8BhiJ,KAAKgiJ,2BAA2BnkH,gBACnE79B,KAAKgiJ,2BAA2BnkH,cAAct/B,MAAMgiC,WAAauhH,GAEjE9hJ,KAAKiiJ,6BAA+BjiJ,KAAKiiJ,4BAA4BpkH,gBACrE79B,KAAKiiJ,4BAA4BpkH,cAAct/B,MAAMgiC,WAAawhH,IAW1EviJ,OAAAgC,eAAWu+I,EAAA7/I,UAAA,WAAQ,KAAnB,WACI,OAAOF,KAAKggJ,2CAUhBxgJ,OAAAgC,eACWu+I,EAAA7/I,UAAA,QAAK,KADhB,WAEI,OAAuB,OAAhBF,KAAK+vC,OAAkB/vC,KAAK+vC,OAAS/vC,KAAK6qI,KAAKz6H,SAASC,UAAUP,QAAQ9P,WAUrF,SAAiBmC,GACbnC,KAAK+vC,OAAS5tC,mCAUlB3C,OAAAgC,eAAWu+I,EAAA7/I,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAK49B,WAAWC,+CAU3Br+B,OAAAgC,eAAWu+I,EAAA7/I,UAAA,iBAAc,KAAzB,eACUgiJ,EAAaliJ,KAAKyhC,QAAQ0gH,uBAAuB,0BACvD,OAAQD,GAAkC,EAApBA,EAAWvhJ,OAAcuhJ,EAAW,GAAK,sCAUnE1iJ,OAAAgC,eAAWu+I,EAAA7/I,UAAA,UAAO,KAAlB,WACI,MAAO,CACHk8C,UAAWp8C,uCAWnBR,OAAAgC,eAAWu+I,EAAA7/I,UAAA,QAAK,KAAhB,WACI,GAAIF,KAAKyhC,QACL,OAAOzhC,KAAKyhC,QAAQk9E,6CAW5Bn/G,OAAAgC,eAAWu+I,EAAA7/I,UAAA,UAAO,KAAlB,WACI,OAAQF,KAAK0P,uCAUjBlQ,OAAAgC,eAAWu+I,EAAA7/I,UAAA,WAAQ,KAAnB,WACI,OAAOF,KAAK0P,uCAMRqwI,EAAA7/I,UAAA0gJ,sBAAR,SAA8Bz+I,GAC1BnC,KAAKkgJ,UAAY/9I,EACjBnC,KAAKm6B,eAAe57B,MAAM0E,UAAY,cAAgBd,EAAQ,OAM1D49I,EAAA7/I,UAAAogJ,OAAR,SAAen+I,GACX,MAAuB,kBAAnB,EACOA,EAEU,SAAVA,uBAtZlBstC,EAAAA,UAAShjC,KAAA,CAAC,CACPmB,UAAW,CAACuwI,IACZhxI,SAAU,gBACVuiC,SAAA,+jCACAo4D,gBAAiBC,EAAAA,wBAAwBC,oDAvBzC81C,UAXA78G,EAAAA,kBAIA6tB,EAAAA,iEA4DChc,EAAAA,UAASrmC,KAAA,CAAC,wDASVqmC,EAAAA,UAASrmC,KAAA,CAAC,sCAmBVW,EAAAA,sBAcAA,EAAAA,oBAUA2/B,EAAAA,YAAWtgC,KAAA,CAAC,gCAeZsgC,EAAAA,YAAWtgC,KAAA,CAAC,wCASZsgC,EAAAA,YAAWtgC,KAAA,CAAC,2CAUZsgC,EAAAA,YAAWtgC,KAAA,CAAC,8CAYZsgC,EAAAA,YAAWtgC,KAAA,CAAC,8CAYZsgC,EAAAA,YAAWtgC,KAAA,CAAC,kCAQZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,6BASvBY,EAAAA,aAAYZ,KAAA,CAAC,WAAY,CAAC,4BAa1BY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,2BAqBzBY,EAAAA,aAAYZ,KAAA,CAAC,SAAU,CAAC,0BA6GxBW,EAAAA,SAyGL2yI,EAzZA,GCFI5wG,GAAU,EAqCdizG,GAAA,SAAAv2H,GAOI,SAAAu2H,EAAmB3gH,EACoCkrB,GADvD,IAAAn7C,EAEIqa,EAAAjrB,KAAAZ,KAAM2sD,IAAuB3sD,YAFdwR,EAAAiwB,QAAAA,EACoCjwB,EAAAm7C,uBAAAA,EAoFhDn7C,EAAA2vI,0BAA4B,GAuB5B3vI,EAAApF,GAAK,YAAY+iC,KAcjB39B,EAAA+uI,kBAAmB,EAcnB/uI,EAAAgvI,mBAAoB,EAepBhvI,EAAA6wI,WAAY,EAWZ7wI,EAAA+vI,UAAY,IAAIx6H,EAAAA,aAWhBvV,EAAAgwI,WAAa,IAAIz6H,EAAAA,aAWjBvV,EAAAowI,iBAAmB,IAAI76H,EAAAA,aAWvBvV,EAAA4uI,cAAgB,IAAIr5H,EAAAA,eAmH/B,OAxTsCvS,EAAAA,EAAAA,GAqBlChV,OAAAgC,eAAc4gJ,EAAAliJ,UAAA,iBAAc,KAA5B,WACI,OAAIF,KAAKoQ,WAAa4B,UACXhS,KAAKoQ,SAASC,UAChBa,KAAK,SAACY,EAAyBvS,GAC5B,OAAOuS,EAAEU,MAAQjT,EAAEiT,QAGxB,sCAkLXhT,OAAAgC,eACW4gJ,EAAAliJ,UAAA,OAAI,KADf,WAEI,MAAO,wCAUXV,OAAAgC,eACW4gJ,EAAAliJ,UAAA,cAAW,KADtB,WAEI,OAAQF,KAAKoQ,UAAqC,IAAzBpQ,KAAKoQ,SAASzP,wCAM3CnB,OAAAgC,eACW4gJ,EAAAliJ,UAAA,WAAQ,KADnB,WAEI,OAAQF,KAAKsiJ,aAAetiJ,KAAK4rD,iBAAmBC,GAAeV,6CAMvE3rD,OAAAgC,eACW4gJ,EAAAliJ,UAAA,kBAAe,KAD1B,WAEI,OAAQF,KAAKsiJ,aAAetiJ,KAAK4rD,iBAAmBC,GAAeR,yCAMvE7rD,OAAAgC,eACW4gJ,EAAAliJ,UAAA,eAAY,KADvB,WAEI,OAAQF,KAAKsiJ,aAAetiJ,KAAK4rD,iBAAmBC,GAAeT,sCAUvE5rD,OAAAgC,eAAW4gJ,EAAAliJ,UAAA,QAAK,KAAhB,mBACUiwC,EAAgC,GACtC,GAAInwC,KAAKoQ,WAAa4B,cAClB,IAAoB,IAAAzD,EAAAC,EAAAxO,KAAK+sF,gBAAcr+E,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAApC,IAAMy+B,EAAKjyB,EAAAvM,MACPw+B,EAAMpM,UACP4b,EAAM3tC,KAAKm+B,wGAIvB,OAAOwP,mCAUX3wC,OAAAgC,eAAW4gJ,EAAAliJ,UAAA,UAAO,KAAlB,mBACUqxC,EAAkC,GACxC,GAAIvxC,KAAKoQ,WAAa4B,cAClB,IAAoB,IAAAzD,EAAAC,EAAAxO,KAAKoQ,SAASC,WAAS3B,EAAAH,EAAArM,QAAAwM,EAAAtM,KAAAsM,EAAAH,EAAArM,OAAE,CAAxC,IAAMy+B,EAAKjyB,EAAAvM,MACRw+B,EAAMpM,UACNgd,EAAQ/uC,KAAKm+B,wGAIzB,OAAO4Q,mCAUX/xC,OAAAgC,eAAW4gJ,EAAAliJ,UAAA,UAAO,KAAlB,WACI,MAAO,CACHk8C,UAAWp8C,uCAWnBR,OAAAgC,eAAW4gJ,EAAAliJ,UAAA,WAAQ,KAAnB,WACI,OAAIF,KAAKqiJ,UACEriJ,KAAKuiJ,oBAAsBviJ,KAAKuiJ,oBAAoB7yG,SAAW1vC,KAAKwiJ,2BAEpExiJ,KAAKyiJ,kBAAoBziJ,KAAKyiJ,kBAAkB/yG,SAAW1vC,KAAK0iJ,8EA1TlFjzG,EAAAA,UAAShjC,KAAA,CAAC,CACPU,SAAU,WACVuiC,SAAA,ufACA9hC,UAAW,CAAC,CAAE84C,QAASo3F,GAAan3F,YAAay7F,iDAnEjDnhH,EAAAA,8CAwEK6L,EAAAA,UAAQ,CAAAp2B,KAAIiuB,EAAAA,OAAMl4B,KAAA,CAAC6+C,2CAWvBzE,EAAAA,gBAAep6C,KAAA,CAACq6C,EAAAA,WAAW,WAAM,OAAAi5F,iCAwBjCn5F,EAAAA,aAAYn6C,KAAA,CAACsxI,GAA+B,CAAEhrG,KAAMgrG,kCAUpDn3F,EAAAA,aAAYn6C,KAAA,CAACuxI,GAAiC,CAAEjrG,KAAMirG,0CActDp3F,EAAAA,aAAYn6C,KAAA,CAACwxI,GAAyC,CAAElrG,KAAMkrG,2CAc9Dr3F,EAAAA,aAAYn6C,KAAA,CAACyxI,GAA0C,CAAEnrG,KAAMmrG,wCAU/D9wI,EAAAA,wCAIA0lC,EAAAA,UAASrmC,KAAA,CAAC,mBAAoB,CAAEsmC,KAAMuQ,EAAAA,kDAItCxQ,EAAAA,UAASrmC,KAAA,CAAC,qBAAsB,CAAEsmC,KAAMuQ,EAAAA,0BAcxCvW,EAAAA,YAAWtgC,KAAA,CAAC,YAAS,CAAAiK,KACrBtJ,EAAAA,gCAcAA,EAAAA,iCAcAA,EAAAA,yBAeAA,EAAAA,yBAWAkc,EAAAA,2BAWAA,EAAAA,iCAWAA,EAAAA,8BAWAA,EAAAA,qBAUAyjB,EAAAA,YAAWtgC,KAAA,CAAC,kCAYZsgC,EAAAA,YAAWtgC,KAAA,CAAC,0CAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,2CAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,iDAQZsgC,EAAAA,YAAWtgC,KAAA,CAAC,2BAsEjB21I,EA7TA,CAKsCtE,IA6TtC6E,GAAA,WAAA,SAAAA,KAUA,2BAVCl1I,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC00I,GAAkBrC,GAC7B/B,GAAiCD,GACjCE,GAAyCC,IAC7CvwI,QAAS,CAACy0I,GAAkBrC,GACxB/B,GAAiCD,GACjCE,GAAyCC,IAC7CzlG,QAAS,CAACC,EAAAA,aAAcknB,QAG5B+iF,EAVA,GCjYAC,GAAA,WAAA,SAAAA,KAoBA,OAhBIA,EAAA1iJ,UAAA+C,UAAA,SAAUktC,EAAyBwzB,GAC/B,IAAKxzB,IAAUA,EAAMxvC,OACjB,MAAO,GAGX,IAAKgjE,EACD,OAAOxzB,EAGXwzB,EAAaA,EAAWzxD,kBAClBjD,EAASkhC,EAAM15B,OAAO,SAACosI,EAAIriJ,GAAM,OAAO,IAANA,GAAWqiJ,EAAGzkE,YACjDykE,EAAG1gJ,OAAsB,IAAb0gJ,EAAG1gJ,SACyC,EAAzD0gJ,EAAG1gJ,MAAM+M,WAAWgD,cAAcpC,QAAQ6zD,KAE9C,OAAuB,EAAhB10D,EAAOtO,OAAasO,EAAS,wBAlB3C2R,EAAAA,KAAInU,KAAA,CAAC,CACFmJ,KAAM,6BAmBVgtI,EApBA,GC6BAE,GAAA,WAAA,SAAAA,KAiDA,2BAjDCr1I,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACVugH,GACAX,GACAowB,GACA9zB,GACAkC,GACA9B,GACA4B,GACAiC,GACAE,GACAD,GACAE,GACA40B,IAEJj1I,QAAS,CACLsgH,GACAJ,GACAE,GACAD,GACAE,GACApC,IAEJnzE,QAAS,CACLC,EAAAA,aACAqqC,EAAAA,YACA06D,GACA1uF,GACAijB,GACA8rB,GACA5xB,GACAtM,GACAvS,GACA7F,GACA5C,GACAmiC,GACArwB,GACAhpB,GACAi1G,IAEJ99F,gBAAiB,CACbopE,IAEJrgH,UAAW,CACPkgC,QAKRg1G,EAjDA,GClBAC,GAAA,SAAAl3H,GAAA,SAAAk3H,IAAA,IAAAvxI,EAAA,OAAAqa,GAAAA,EAAAhrB,MAAAb,KAAAU,YAAAV,YAMYwR,EAAAwxI,iBAAkB,EAiHlBxxI,EAAAyxI,mBAAqB,SAAChvG,GACtBziC,EAAK0/C,WACL1/C,EAAK0/C,UAAUjtB,oBAAoB,gBAAiBzyB,EAAKyxI,oBAAoB,GAEjFzxI,EAAK0xI,iBAEb,OA1HyC1uI,EAAAA,EAAAA,GAKrChV,OAAAgC,eACIuhJ,EAAA7iJ,UAAA,OAAI,KAIR,WACI,OAAOF,KAAK6X,SANhB,SACSyH,GACLtf,KAAK6X,IAAMyH,mCAORyjI,EAAA7iJ,UAAAm0C,cAAP,SAAqB7T,GACjBA,EAAMqH,iBACN7nC,KAAKgjJ,iBAAkB,EACvBn3H,EAAA3rB,UAAMm0C,cAAazzC,KAAAZ,KAACwgC,IAGjBuiH,EAAA7iJ,UAAAsxD,cAAP,SAAqBhxB,GAArB,IAAAhvB,EAAAxR,KAEI,GADA6rB,EAAA3rB,UAAMsxD,cAAa5wD,KAAAZ,KAACwgC,GAChBxgC,KAAK2wD,eAAiB3wD,KAAKgjJ,gBAAiB,CAC5ChjJ,KAAKgjJ,iBAAkB,MACjBv2I,EAA+B,CACjC6lD,MAAOtyD,KACPu1D,SAAUv1D,KAAK6X,IACfe,QAAQ,GAIZ,GADA5Y,KAAK6X,IAAIlE,KAAKwwH,eAAelrH,KAAKxM,GAC9BA,EAAKmM,OAKL,OAJA5Y,KAAKkxD,UAAUtwB,WAAW9a,YAAY9lB,KAAKkxD,WAC3ClxD,KAAKkxD,UAAY,KACjBlxD,KAAK2wD,cAAe,OACpB3wD,KAAK6wD,UAAW,GAGpB7wD,KAAK6X,IAAIqwF,UAAW,EACpBloG,KAAK6X,IAAIlE,KAAKg2F,aAAc,EAC5B3pG,KAAK6X,IAAIlE,KAAK8K,eAEdze,KAAK+vG,cAAgBxtE,EAAAA,UAAUviC,KAAK6X,IAAIlE,KAAKuR,SAASif,YAAa,WAAWzB,UAAU,SAAChF,GAC3E,WAANA,EAAGz8B,KAA6B,QAANy8B,EAAGz8B,MAC7BuQ,EAAKs/C,eAAgB,EACrBt/C,EAAK8iC,YAAY9T,QAM1BuiH,EAAA7iJ,UAAAo0C,YAAP,SAAmB9T,GAAnB,IAAAhvB,EAAAxR,KAEI,GAAKA,KAAK6wD,SAAV,KAIMpkD,EAA6B,CAC/B6lD,MAAOtyD,KACPu1D,SAAUv1D,KAAK6X,IACf3Y,WAAW,GAEfc,KAAK6vD,KAAKnS,IAAI,WACVlsC,EAAKqG,IAAIlE,KAAKywH,aAAanrH,KAAKxM,KAGhCA,EAAKvN,YACLc,KAAKkwD,kBAAmB,OAGtBizF,EAAWnjJ,KAAK8wD,cACtBjlC,EAAA3rB,UAAMo0C,YAAW1zC,KAAAZ,KAACwgC,IACb2iH,GAAYnjJ,KAAKkwD,iBAClBlwD,KAAKkxD,UAAU/uB,iBAAiB,gBAAkBniC,KAAKijJ,oBAAoB,GAE3EjjJ,KAAKkjJ,gBAIHH,EAAA7iJ,UAAAuyD,gBAAV,SAA0BjyB,GACtBxgC,KAAK6X,IAAIlE,KAAKmI,SAAQ,GACtB9b,KAAK6X,IAAIlE,KAAK8K,eACdoN,EAAA3rB,UAAMuyD,gBAAe7xD,KAAAZ,KAACwgC,EAAOxgC,KAAK6X,IAAIgmB,mBAEhCulH,EAAQpjJ,KAAKkxD,UAEb0+D,EAAW5vH,KAAK6X,IAAIlE,KAAKkqB,cAAcluB,wBACvC0zI,EAAUrjJ,KAAK6X,IAAIgmB,cAAcluB,wBACvCyzI,EAAM7kJ,MAAM+Q,SAAW,SACvB8zI,EAAM7kJ,MAAMmR,MAAQkgH,EAASlgH,MAAQ,KACrC0zI,EAAM7kJ,MAAMqN,OAASy3I,EAAQz3I,OAAS,KAEtC5L,KAAK8vD,SAASvB,SAAS60F,EAxGF,uBAyGrBpjJ,KAAK8vD,SAASjB,YAAYu0F,EAvGT,0BA0GjB,QADME,EAAaF,EAAMjB,uBA1GX,gBA2GL3vI,EAAQ,EAAGA,EAAQ8wI,EAAW3iJ,OAAQ6R,IAC3CxS,KAAK8vD,SAASjB,YAAYy0F,EAAW9wI,GA1GvB,0BA2GdxS,KAAK8vD,SAASjB,YAAYy0F,EAAW9wI,GA1GzB,yBA8GZuwI,EAAA7iJ,UAAAyvG,aAAR,WACQ3vG,KAAK+vG,gBAAkB/vG,KAAK+vG,cAAcpjE,QAC1C3sC,KAAK+vG,cAAcjkE,eAInBi3G,EAAA7iJ,UAAAgjJ,YAAR,WACIljJ,KAAK2yD,gBAAgB,MACrB3yD,KAAK6X,IAAIqwF,UAAW,EACpBloG,KAAK6X,IAAIlE,KAAKg2F,aAAc,EAC5B3pG,KAAK6X,IAAIlE,KAAK8K,eACdze,KAAK2vG,oCApHZziG,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,iDAOTC,EAAAA,MAAKX,KAAA,CAAC,iBAqHXs2I,EA7HA,CAGyCnzF,IA+HzC2zF,GAAA,WAAA,SAAAA,KAKA,2BALCr2I,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,6BAIdo2I,EALA,iBAOA,SAAAC,KAQA,2BARC/1I,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACq1I,GAAqBQ,IACpC1+F,gBAAiB,GACjBl3C,QAAS,CAACo1I,GAAqBQ,IAC/B9qG,QAAS,OAIb+qG,KC5FAC,GAAA,WAAA,SAAAA,KAmImC,2BAnIlCh2I,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACVm2F,GACAgN,GACAsH,GACAG,GACA+Z,GACA7W,GACAkC,GACA7O,GACAD,GACAE,GACAH,GACAqV,GACAE,GACAD,GACAE,GACAnW,GACAX,GACA+B,GACAoB,GACAoB,GACAwiB,GACAqL,GACAsa,GACA9xC,GACAouB,GACA2H,GACAR,GACAkB,GACAc,GACA9wB,IAEJ7pD,gBAAiB,CACbgsD,GACAsH,GACAG,IAEJ3qG,QAAS,CACLk2F,GACAgN,GACAsH,GACAG,GACA+Z,GACA7W,GACAkC,GACA7O,GACAD,GACAE,GACAH,GACAqV,GACAE,GACAD,GACAE,GACAnW,GACAoB,GACAoB,GACAoB,GACA3J,GACA8xC,GACAhrF,GACA+uC,GACA5xB,GACAtM,GACAvS,GACA3f,GACAkX,GACAk1F,GACA7iF,GACAwN,GACAG,GACAmiB,GACA9Y,GACA4c,GACAp1B,GACAwlD,GACAzzD,GACAwqB,GACAupC,GACA2hC,GACA9oB,GACAqL,GACApJ,GACA2H,GACAR,GACAkB,GACAc,GACA9oE,GACA+mF,GACAqF,GACAp0C,GACA80C,IAEJ/qG,QAAS,CACLC,EAAAA,aACAqqC,EAAAA,YACAh0B,GACA+uC,GACA5xB,GACAtM,GACAvS,GACA3f,GACAkX,GACAk1F,GACA7iF,GACAwN,GACAG,GACAmiB,GACA9Y,GACA4c,GACAp1B,GACAwlD,GACAzzD,GACAwqB,GACAupC,GACA2hC,GACAxmF,GACA+mF,GACAqF,GACAU,IAEJ51I,UAAW,CACP0zF,GACAxzD,GACAihE,GACA0P,GACArU,GACAkxB,GACA,CAAE50E,QAASi8E,GAAoBllD,SAAU90C,SAGd86G,EAnInC,kBC9DA,SAAAC,mDAoJA,OApJuClvI,EAAAA,EAAAA,GAE5BkvI,EAAAxjJ,UAAAwU,QAAP,SAAejC,OACLkxI,EAAgB91I,GAAW7N,KAAK2T,KAAKqxG,qBACrC7pG,EAAetN,GAAW7N,KAAK2T,KAAKyH,oBAC1Cpb,KAAKqb,2BAA2B,CAACF,EAAcw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","sourcesContent":["enum EaseIn {\n    quad = `cubic-bezier(0.550, 0.085, 0.680, 0.530)` as any,\n    cubic = `cubic-bezier(0.550, 0.055, 0.675, 0.190)` as any,\n    quart = `cubic-bezier(0.895, 0.030, 0.685, 0.220)` as any,\n    quint = `cubic-bezier(0.755, 0.050, 0.855, 0.060)` as any,\n    sine = `cubic-bezier(0.470, 0.000, 0.745, 0.715)` as any,\n    expo = `cubic-bezier(0.950, 0.050, 0.795, 0.035)` as any,\n    circ = `cubic-bezier(0.600, 0.040, 0.980, 0.335)` as any,\n    back = `cubic-bezier(0.600, -0.280, 0.735, 0.045)` as any\n}\n\nenum EaseOut {\n    quad = `cubic-bezier(0.250, 0.460, 0.450, 0.940)` as any,\n    cubic = `cubic-bezier(0.215, 0.610, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.165, 0.840, 0.440, 1.000)` as any,\n    quint = `cubic-bezier(0.230, 1.000, 0.320, 1.000)` as any,\n    sine = `cubic-bezier(0.390, 0.575, 0.565, 1.000)` as any,\n    expo = `cubic-bezier(0.190, 1.000, 0.220, 1.000)` as any,\n    circ = `cubic-bezier(0.075, 0.820, 0.165, 1.000)` as any,\n    back = `cubic-bezier(0.175, 0.885, 0.320, 1.275)` as any\n}\n\nenum EaseInOut {\n    quad = `cubic-bezier(0.455, 0.030, 0.515, 0.955)` as any,\n    cubic = `cubic-bezier(0.645, 0.045, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.770, 0.000, 0.175, 1.000)` as any,\n    quint = `cubic-bezier(0.860, 0.000, 0.070, 1.000)` as any,\n    sine = `cubic-bezier(0.445, 0.050, 0.550, 0.950)` as any,\n    expo = `cubic-bezier(1.000, 0.000, 0.000, 1.000)` as any,\n    circ = `cubic-bezier(0.785, 0.135, 0.150, 0.860)` as any,\n    back = `cubic-bezier(0.680, -0.550, 0.265, 1.550)` as any\n}\n\nexport { EaseIn, EaseOut, EaseInOut };\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.sine,\n    endOpacity: 1,\n    startOpacity: 0\n};\n\nconst fadeIn: AnimationReferenceMetadata = animation(base, {\n    params: baseParams\n});\n\nconst fadeOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        delay: '0s',\n        duration: '350ms',\n        easing: EaseOut.sine,\n        endOpacity: 0,\n        startOpacity: 1\n    }\n});\n\nexport { fadeIn, fadeOut };\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        backfaceVisibility: 'hidden',\n        transformStyle: 'preserve-3d'\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)`\n            }),\n            style({\n                offset: 1,\n                transform: `translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 180,\n    endDistance: '0px',\n    rotateX: 1,\n    rotateY: 0,\n    rotateZ: 0,\n    startAngle: 0,\n    startDistance: '0px'\n};\n\nconst flipTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams\n    }\n});\n\nconst flipBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180\n    }\n});\n\nconst flipLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipHorFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px'\n    }\n});\n\nconst flipHorBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px'\n    }\n});\n\nconst flipVerFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipVerBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nexport {\n    flipTop,\n    flipRight,\n    flipBottom,\n    flipLeft,\n    flipHorFwd,\n    flipHorBck,\n    flipVerFwd,\n    flipVerBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            offset: 0,\n            opacity: `{{endOpacity}}`,\n            transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 0,\n    endOpacity: 1,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 1,\n    startAngle: -360,\n    startOpacity: 0,\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    startOpacity: 1\n};\n\nconst rotateInCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseInParams }\n});\n\nconst rotateOutCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseOutParams }\n});\n\nconst rotateInTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateOutTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateInRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateOutRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateInBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateOutBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateInLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateOutLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateInTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateInBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateInDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nexport {\n    rotateInCenter,\n    rotateInTop,\n    rotateInRight,\n    rotateInLeft,\n    rotateInBottom,\n    rotateInTr,\n    rotateInBr,\n    rotateInBl,\n    rotateInTl,\n    rotateInDiagonal1,\n    rotateInDiagonal2,\n    rotateInHor,\n    rotateInVer,\n    rotateOutCenter,\n    rotateOutTop,\n    rotateOutRight,\n    rotateOutLeft,\n    rotateOutBottom,\n    rotateOutTr,\n    rotateOutBr,\n    rotateOutBl,\n    rotateOutTl,\n    rotateOutDiagonal1,\n    rotateOutDiagonal2,\n    rotateOutHor,\n    rotateOutVer\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseInOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            }),\n            style({\n                offset: 0.1,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.2,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n            }),\n            style({\n                offset: 0.3,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.4,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.5,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.6,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.7,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.8,\n                transform: `rotate(-{{endAngle}}deg) translate{{direction}}({{endDistance}})`\n\n            }),\n            style({\n                offset: 0.9,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{endDistance}})`\n\n            }),\n            style({\n                offset: 1,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '800ms',\n    easing: EaseInOut.quad,\n    endAngle: 0,\n    endDistance: '8px',\n    startAngle: 0,\n    startDistance: '10px',\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst shakeHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'X'\n    }\n});\n\nconst shakeVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y'\n    }\n});\n\nconst shakeTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'top'\n    }\n});\n\nconst shakeBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'center'\n    }\n});\n\nconst shakeLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'center'\n    }\n});\n\nconst shakeCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 8,\n        endDistance: '0',\n        startAngle: 10,\n        startDistance: '0',\n        xPos: 'center',\n        yPos: 'center'\n    }\n});\n\nconst shakeTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst shakeBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nexport {\n    shakeHor,\n    shakeVer,\n    shakeTop,\n    shakeBottom,\n    shakeRight,\n    shakeLeft,\n    shakeCenter,\n    shakeTr,\n    shakeBr,\n    shakeBl,\n    shakeTl\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { IAnimationParams } from '../main';\n\nconst heartbeatBase: AnimationMetadata[] = [\n    style({\n        animationTimingFunction: `ease-out`,\n        transform: `scale(1)`,\n        transformOrigin: `center center`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.1,\n                transform: `scale(0.91)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.17,\n                transform: `scale(0.98)`\n            }),\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.33,\n                transform: `scale(0.87)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.45,\n                transform: `scale(1)`\n            })\n        ])\n    )\n];\n\nconst heartbeatParams: IAnimationParams = {\n    delay: '0s',\n    duration: '1.5s',\n    easing: 'ease-in-out'\n};\n\nconst pulsateBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.5,\n                transform: `scale({{toScale}})`\n            }),\n            style({\n                offset: 1,\n                transform: `scale({{fromScale}})`\n            })\n        ])\n    )\n];\n\nconst pulsateParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.5s',\n    easing: 'ease-in-out',\n    fromScale: 1,\n    toScale: 1.1\n};\n\nconst blinkBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                opacity: .8,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.8,\n                opacity: 0,\n                transform: `scale({{midScale}})`\n            }),\n            style({\n                offset: 1,\n                opacity: 0,\n                transform: `scale({{toScale}})`\n            })\n        ])\n    )\n];\n\nconst blinkParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.8s',\n    easing: 'ease-in-out',\n    fromScale: .2,\n    midScale: 1.2,\n    toScale: 2.2\n};\n\nconst pulsateFwd = animation(pulsateBase, {\n    params: {\n        ...pulsateParams\n    }\n});\n\nconst pulsateBck = animation(pulsateBase, {\n    params: {\n        ...pulsateParams,\n        toScale: .9\n    }\n});\n\nconst heartbeat = animation(heartbeatBase, {\n    params: {\n        ...heartbeatParams\n    }\n});\n\nconst blink = animation(blinkBase, {\n    params: {\n        ...blinkParams\n    }\n});\n\nexport {\n    heartbeat,\n    pulsateFwd,\n    pulsateBck,\n    blink\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `scale{{direction}}({{fromScale}})`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `scale{{direction}}({{toScale}})`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    direction: '',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromScale: .5,\n    startOpacity: 0,\n    toScale: 1,\n    xPos: '50%',\n    yPos: '50%'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseOut.sine,\n    endOpacity: 0,\n    fromScale: 1,\n    startOpacity: 1,\n    toScale: .5\n};\n\nconst scaleInCenter: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst scaleInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTr = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutCenter: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst scaleOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nexport {\n    scaleInTop,\n    scaleInRight,\n    scaleInBottom,\n    scaleInLeft,\n    scaleInCenter,\n    scaleInTr,\n    scaleInBr,\n    scaleInBl,\n    scaleInTl,\n    scaleInVerTop,\n    scaleInVerBottom,\n    scaleInVerCenter,\n    scaleInHorCenter,\n    scaleInHorLeft,\n    scaleInHorRight,\n    scaleOutTop,\n    scaleOutRight,\n    scaleOutBottom,\n    scaleOutLeft,\n    scaleOutCenter,\n    scaleOutTr,\n    scaleOutBr,\n    scaleOutBl,\n    scaleOutTl,\n    scaleOutVerTop,\n    scaleOutVerBottom,\n    scaleOutVerCenter,\n    scaleOutHorCenter,\n    scaleOutHorLeft,\n    scaleOutHorRight\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `{{fromPosition}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `{{toPosition}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromPosition: 'translateY(-500px)',\n    startOpacity: 0,\n    toPosition: 'translateY(0)'\n};\n\nconst baseOutParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    fromPosition: 'translateY(0)',\n    startOpacity: 1,\n    toPosition: 'translateY(-500px)'\n};\n\nconst slideInTop: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst slideInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(-500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateY(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideOutTop: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst slideOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseIn.quad,\n            endOpacity: 0,\n            fromPosition: 'translateY(0)',\n            startOpacity: 1,\n            toPosition: 'translateY(500px)'\n        }\n    }\n);\n\nconst slideOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(-500px)'\n        }\n    }\n);\n\nexport {\n    slideInTop,\n    slideInRight,\n    slideInBottom,\n    slideInLeft,\n    slideInTr,\n    slideInBr,\n    slideInBl,\n    slideInTl,\n    slideOutTop,\n    slideOutBottom,\n    slideOutRight,\n    slideOutLeft,\n    slideOutTr,\n    slideOutBr,\n    slideOutBl,\n    slideOutTl\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst swingBase: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate{{direction}}({{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `rotate{{direction}}({{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst swingParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '.5s',\n    easing: EaseOut.back,\n    endAngle: 0,\n    endOpacity: 1,\n    startAngle: -100,\n    startOpacity: 0,\n    xPos: 'top',\n    yPos: 'center'\n};\n\nconst swingOutParams: IAnimationParams = {\n    ...swingParams,\n    duration: '.55s',\n    easing: EaseIn.back,\n    endAngle: 70,\n    endOpacity: 0,\n    startAngle: 0,\n    startOpacity: 1\n};\n\nconst swingInTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams\n    }\n});\n\nconst swingInRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        startAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        startAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingInTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: 70\n    }\n});\n\nconst swingInRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: 70,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams\n    }\n});\n\nconst swingOutRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        endAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLefttFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        endAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: -100\n    }\n});\n\nconst swingOutRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: -100,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nexport {\n    swingInTopFwd,\n    swingInRightFwd,\n    swingInLeftFwd,\n    swingInBottomFwd,\n    swingInTopBck,\n    swingInRightBck,\n    swingInBottomBck,\n    swingInLeftBck,\n    swingOutTopFwd,\n    swingOutRightFwd,\n    swingOutBottomFwd,\n    swingOutLefttFwd,\n    swingOutTopBck,\n    swingOutRightBck,\n    swingOutBottomBck,\n    swingOutLeftBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut, EaseIn } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{ startOpacity }}`,\n        height: `{{ startHeight }}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{ endOpacity }}`,\n            height: `{{ endHeight }}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    startOpacity: 0,\n    endOpacity: 1,\n    startHeight: '',\n    endHeight: ''\n};\n\nconst growVerIn: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 0,\n        endOpacity: 1,\n        startHeight: '0px',\n        endHeight: '*'\n    }\n});\n\nconst growVerOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 1,\n        endOpacity: 0,\n        startHeight: '*',\n        endHeight: '0px'\n    }\n});\n\nexport { growVerIn, growVerOut };\n","import { IToggleView } from './IToggleView';\n\n/**\n * Common service to be injected between components where those implementing common\n * ToggleView interface can register and toggle directives can call their methods.\n * TODO: Track currently active? Events?\n */\nexport class IgxNavigationService {\n    private navs: { [id: string]: IToggleView; };\n\n    constructor() {\n        this.navs = {};\n    }\n\n    public add(id: string, navItem: IToggleView) {\n        this.navs[id] = navItem;\n    }\n\n    public remove(id: string) {\n        delete this.navs[id];\n    }\n\n    public get(id: string): IToggleView {\n        if (id) {\n            return this.navs[id];\n        }\n    }\n\n    public toggle(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].toggle(...args);\n        }\n    }\n    public open(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].open(...args);\n        }\n    }\n    public close(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].close(...args);\n        }\n    }\n}\n","import { Directive, HostListener, Input, NgModule } from '@angular/core';\nimport {IgxNavigationService} from './nav.service';\n\n/**\n * Directive that can toggle targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavToggle=\"ID\"> Toggle </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavToggle]' })\nexport class IgxNavigationToggleDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavToggle') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public toggleNavigationDrawer() {\n        this.state.toggle(this.target, true);\n    }\n}\n\n/**\n * Directive that can close targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavClose=\"ID\"> Close </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavClose]' })\nexport class IgxNavigationCloseDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavClose') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public closeNavigationDrawer() {\n        this.state.close(this.target, true);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxNavigationModule {}\n","/**\n *@hidden\n */\nexport function cloneArray(array, deep?: boolean) {\n    const arr = [];\n    if (!array) {\n        return arr;\n    }\n    let i = array.length;\n    while (i--) {\n        arr[i] = deep ? cloneValue(array[i]) : array[i];\n    }\n    return arr;\n}\n\n/**\n * Doesn't clone leaf items\n * @hidden\n */\nexport function cloneHierarchicalArray(array: any[], childDataKey: any): any[] {\n    const result: any[] = [];\n    if (!array) {\n        return result;\n    }\n\n    for (const item of array) {\n        const clonedItem = cloneValue(item);\n        if (Array.isArray(item[childDataKey])) {\n            clonedItem[childDataKey] = cloneHierarchicalArray(clonedItem[childDataKey], childDataKey);\n        }\n        result.push(clonedItem);\n    }\n    return result;\n}\n\n/**\n * Deep clones all first level keys of Obj2 and merges them to Obj1\n * @param obj1 Object to merge into\n * @param obj2 Object to merge from\n * @returns Obj1 with merged cloned keys from Obj2\n * @hidden\n */\nexport function mergeObjects(obj1: {}, obj2: {}): any {\n    if (!isObject(obj1)) {\n        throw new Error(`Cannot merge into ${obj1}. First param must be an object.`);\n    }\n\n    if (!isObject(obj2)) {\n        return obj1;\n    }\n\n    for (const key of Object.keys(obj2)) {\n        obj1[key] = cloneValue(obj2[key]);\n    }\n\n    return obj1;\n}\n\n/**\n * Creates deep clone of provided value.\n * Supports primitive values, dates and objects.\n * If passed value is array returns shallow copy of the array.\n * @param value value to clone\n * @returns Deep copy of provided value\n *@hidden\n */\nexport function cloneValue(value: any): any {\n    if (isDate(value)) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return [...value];\n    }\n\n    if (value instanceof Map || value instanceof Set) {\n        return value;\n    }\n\n    if (isObject(value)) {\n        const result = {};\n\n        for (const key of Object.keys(value)) {\n            result[key] = cloneValue(value[key]);\n        }\n        return result;\n    }\n    return value;\n}\n\n/**\n * Checks if provided variable is Object\n * @param value Value to check\n * @returns true if provided variable is Object\n *@hidden\n */\nexport function isObject(value: any): boolean {\n    return value && value.toString() === '[object Object]';\n}\n\n/**\n * Checks if provided variable is Date\n * @param value Value to check\n * @returns true if provided variable is Date\n *@hidden\n */\nexport function isDate(value: any) {\n    return Object.prototype.toString.call(value) === '[object Date]';\n}\n\n/**\n * Checks if the two passed arguments are equal\n * Currently supports date objects\n * @param obj1\n * @param obj2\n * @returns: `boolean`\n * @hidden\n */\nexport function isEqual(obj1, obj2): boolean {\n    if (isDate(obj1) && isDate(obj2)) {\n        return obj1.getTime() === obj2.getTime();\n    }\n    return obj1 === obj2;\n}\n\n/**\n *@hidden\n */\nexport const enum KEYCODES {\n    ENTER = 13,\n    SPACE = 32,\n    ESCAPE = 27,\n    LEFT_ARROW = 37,\n    UP_ARROW = 38,\n    RIGHT_ARROW = 39,\n    DOWN_ARROW = 40,\n    F2 = 113,\n    TAB = 9\n}\n\n/**\n *@hidden\n */\nexport const enum KEYS {\n    ENTER = 'Enter',\n    SPACE = ' ',\n    SPACE_IE = 'Spacebar',\n    ESCAPE = 'Escape',\n    ESCAPE_IE = 'Esc',\n    LEFT_ARROW = 'ArrowLeft',\n    LEFT_ARROW_IE = 'Left',\n    UP_ARROW = 'ArrowUp',\n    UP_ARROW_IE = 'Up',\n    RIGHT_ARROW = 'ArrowRight',\n    RIGHT_ARROW_IE = 'Right',\n    DOWN_ARROW = 'ArrowDown',\n    DOWN_ARROW_IE = 'Down',\n    F2 = 'F2',\n    TAB = 'Tab'\n}\n\n/**\n *@hidden\n* Returns the actual size of the node content, using Range\n* ```typescript\n* let range = document.createRange();\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = getNodeSizeViaRange(range, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaRange(range: Range, node: any): number {\n    let overflow = null;\n    if (isIE() || isEdge()) {\n        overflow = node.style.overflow;\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = 'visible';\n    }\n\n    range.selectNodeContents(node);\n    const width = range.getBoundingClientRect().width;\n\n    if (isIE() || isEdge()) {\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = overflow;\n    }\n\n    return width;\n}\n/**\n *@hidden\n* Returns the actual size of the node content, using Canvas\n* ```typescript\n* let ctx = document.createElement('canvas').getContext('2d');\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = valToPxlsUsingCanvas(ctx, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaCanvas(canvas2dCtx: any, node: any): number {\n    const s = this.grid.document.defaultView.getComputedStyle(node);\n\n    // need to set the font to get correct width\n    canvas2dCtx.font = s.fontSize + ' ' + s.fontFamily;\n\n    return canvas2dCtx.measureText(node.textContent).width;\n}\n/**\n *@hidden\n */\nexport function isIE(): boolean {\n    return navigator.appVersion.indexOf('Trident/') > 0;\n}\n/**\n *@hidden\n */\nexport function isEdge(): boolean {\n    const edgeBrowser = /Edge[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return edgeBrowser;\n}\n\n/**\n *@hidden\n */\nexport function isFirefox(): boolean {\n    const firefoxBrowser = /Firefox[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return firefoxBrowser;\n}\n\n/** @hidden */\nexport function isNavigationKey(key: string): boolean {\n    return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright',\n        'home', 'end', 'space', 'spacebar', ' '].indexOf(key) !== -1;\n}\n\n/**\n *@hidden\n */\nexport function flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            const children = Array.isArray(el.children) ? el.children : el.children.toArray();\n            result = result.concat(flatten(children));\n        }\n    });\n    return result;\n}\n\nexport interface CancelableEventArgs {\n    /**\n     * Provides the ability to cancel the event.\n     */\n    cancel: boolean;\n}\n\nexport interface CancelableBrowserEventArgs extends CancelableEventArgs {\n    /** Browser event */\n    event?: Event;\n}\n\nexport const NAVIGATION_KEYS = new Set(['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright',\n                                'home', 'end', 'space', 'spacebar', ' ']);\nexport const ROW_EXPAND_KEYS = new Set('right down arrowright arrowdown'.split(' '));\nexport const ROW_COLLAPSE_KEYS = new Set('left up arrowleft arrowup'.split(' '));\nexport const SUPPORTED_KEYS = new Set([...Array.from(NAVIGATION_KEYS), 'tab', 'enter', 'f2', 'escape', 'esc']);\n","import { ISortingStrategy } from './sorting-strategy';\n\n/**\n * Represents sorting expressions.\n */\nexport enum SortingDirection {\n    None = 0,\n    Asc = 1,\n    Desc = 2\n}\n\nexport interface ISortingExpression {\n   fieldName: string;\n   dir: SortingDirection;\n   ignoreCase?: boolean;\n   strategy?: ISortingStrategy;\n}\n","import { cloneArray } from '../core/utils';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression, SortingDirection } from './sorting-expression.interface';\nimport { IGroupingExpression } from './grouping-expression.interface';\n\nexport interface ISortingStrategy {\n    sort: (data: any[],\n           fieldName: string,\n           dir: SortingDirection,\n           ignoreCase: boolean,\n           valueResolver: (obj: any, key: string) => any) => any[];\n}\n\nexport class DefaultSortingStrategy implements ISortingStrategy {\n    private static _instance: DefaultSortingStrategy = null;\n\n    protected constructor() {}\n\n    public static instance(): DefaultSortingStrategy {\n        return this._instance || (this._instance = new this());\n    }\n\n    public sort(data: any[],\n                fieldName: string,\n                dir: SortingDirection,\n                ignoreCase: boolean,\n                valueResolver: (obj: any, key: string) => any) {\n        const key = fieldName;\n        const reverse = (dir === SortingDirection.Desc ? -1 : 1);\n        const cmpFunc = (obj1, obj2) => {\n            return this.compareObjects(obj1, obj2, key, reverse, ignoreCase, valueResolver);\n        };\n        return this.arraySort(data, cmpFunc);\n    }\n\n    public compareValues(a: any, b: any) {\n        const an = (a === null || a === undefined);\n        const bn = (b === null || b === undefined);\n        if (an) {\n            if (bn) {\n                return 0;\n            }\n            return -1;\n        } else if (bn) {\n            return 1;\n        }\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n\n    protected compareObjects(obj1: object,\n                             obj2: object,\n                             key: string,\n                             reverse: number,\n                             ignoreCase: boolean,\n                             valueResolver: (obj: any, key: string) => any) {\n        let a = valueResolver(obj1, key);\n        let b = valueResolver(obj2, key);\n        if (ignoreCase) {\n            a = a && a.toLowerCase ? a.toLowerCase() : a;\n            b = b && b.toLowerCase ? b.toLowerCase() : b;\n        }\n        return reverse * this.compareValues(a, b);\n    }\n\n    protected arraySort(data: any[], compareFn?): any[] {\n        return data.sort(compareFn);\n    }\n}\n\nexport class IgxSorting {\n    public sort(data: any[], expressions: ISortingExpression[]): any[] {\n        return this.sortDataRecursive(data, expressions);\n    }\n\n    private groupedRecordsByExpression(data: any[],\n            index: number,\n            expression: IGroupingExpression): any[] {\n        let i;\n        let groupval;\n        const res = [];\n        const key = expression.fieldName;\n        const len = data.length;\n        res.push(data[index]);\n        groupval = this.getFieldValue(data[index], key);\n        index++;\n        const comparer = expression.groupingComparer || DefaultSortingStrategy.instance().compareValues;\n        for (i = index; i < len; i++) {\n            if (comparer(this.getFieldValue(data[i], key), groupval) === 0) {\n                res.push(data[i]);\n            } else {\n                break;\n            }\n        }\n        return res;\n    }\n    private sortDataRecursive<T>(data: T[],\n                                 expressions: ISortingExpression[],\n                                 expressionIndex: number = 0): T[] {\n        let i;\n        let j;\n        let expr: ISortingExpression;\n        let gbData;\n        let gbDataLen;\n        const exprsLen = expressions.length;\n        const dataLen = data.length;\n        expressionIndex = expressionIndex || 0;\n        if (expressionIndex >= exprsLen || dataLen <= 1) {\n            return data;\n        }\n        expr = expressions[expressionIndex];\n        if (!expr.strategy) {\n            expr.strategy = DefaultSortingStrategy.instance();\n        }\n        data = expr.strategy.sort(data, expr.fieldName, expr.dir, expr.ignoreCase, this.getFieldValue);\n        if (expressionIndex === exprsLen - 1) {\n            return data;\n        }\n        // in case of multiple sorting\n        for (i = 0; i < dataLen; i++) {\n            gbData = this.groupedRecordsByExpression(data, i, expr);\n            gbDataLen = gbData.length;\n            if (gbDataLen > 1) {\n                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);\n            }\n            for (j = 0; j < gbDataLen; j++) {\n                data[i + j] = gbData[j];\n            }\n            i += gbDataLen - 1;\n        }\n        return data;\n    }\n    protected groupDataRecursive<T>(data: T[], expressions: ISortingExpression[], level: number,\n        parent: IGroupByRecord, metadata: IGroupByRecord[], grid: any = null, groupsRecords: any[] = []): T[] {\n        let i = 0;\n        let result = [];\n        while (i < data.length) {\n            const group = this.groupedRecordsByExpression(data, i, expressions[level]);\n            const groupRow: IGroupByRecord = {\n                expression: expressions[level],\n                level,\n                records: cloneArray(group),\n                value: group[0][expressions[level].fieldName],\n                groupParent: parent,\n                groups: [],\n                height: grid ? grid.rowHeight : null\n            };\n            if (parent) {\n                parent.groups.push(groupRow);\n            } else {\n                groupsRecords.push(groupRow);\n            }\n            if (level < expressions.length - 1) {\n                result = result.concat(this.groupDataRecursive(group, expressions, level + 1, groupRow, metadata, grid, groupsRecords));\n            } else {\n                for (const groupItem of group) {\n                    metadata.push(groupRow);\n                    result.push(groupItem);\n                }\n            }\n            i += group.length;\n        }\n        return result;\n    }\n    protected getFieldValue(obj: any, key: string): any {\n        return obj[key];\n    }\n}\n\nexport class IgxDataRecordSorting extends IgxSorting {\n    protected getFieldValue(obj: any, key: string): any {\n        return obj.data[key];\n    }\n}\n","import { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression } from './sorting-expression.interface';\nimport { IgxSorting } from './sorting-strategy';\n\nexport interface IGroupByResult {\n    data: any[];\n    metadata: IGroupByRecord[];\n}\n\nexport class IgxGrouping extends IgxSorting {\n    public groupBy(data: any[], expressions: ISortingExpression[], grid?: any, groupsRecords?: any[]): IGroupByResult {\n        const metadata: IGroupByRecord[] = [];\n        const grouping = this.groupDataRecursive(data, expressions, 0, null, metadata, grid, groupsRecords);\n        return {\n            data: grouping,\n            metadata: metadata\n        };\n    }\n}\n\n","export enum PagingError {\n    None,\n    IncorrectPageIndex,\n    IncorrectRecordsPerPage\n}\n\nexport declare interface IPagingState {\n    index: number;\n    recordsPerPage: number;\n    metadata?: {\n        countPages: number;\n        error: PagingError;\n        countRecords: number;\n    };\n}\n","import { IFilteringExpression, FilteringLogic } from './filtering-expression.interface';\n\nexport declare interface IFilteringExpressionsTree {\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[];\n    operator: FilteringLogic;\n    fieldName?: string;\n\n    find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression;\n    findIndex(fieldName: string): number;\n}\n\nexport class FilteringExpressionsTree implements IFilteringExpressionsTree {\n\n    /**\n     * Sets/gets the filtering operands.\n     * ```typescript\n     * const gridExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n     * const expression = [\n     * {\n     *   condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *   fieldName: 'Column Field',\n     *   searchVal: 'Value',\n     *   ignoreCase: false\n     * }];\n     * gridExpressionsTree.filteringOperands.push(expression);\n     * this.grid.filteringExpressionsTree = gridExpressionsTree;\n     * ```\n     * ```typescript\n     * let filteringOperands = gridExpressionsTree.filteringOperands;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[] = [];\n\n    /**\n     * Sets/gets the operator.\n     * ```typescript\n     * gridExpressionsTree.operator = FilteringLogic.And;\n     * ```\n     * ```typescript\n     * let operator = gridExpressionsTree.operator;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    operator: FilteringLogic;\n\n    /**\n     * Sets/gets the field name of the column where the filtering expression is placed.\n     * ```typescript\n     *  gridExpressionTree.fieldName = 'Column Field';\n     * ```\n     * ```typescript\n     * let columnField = expressionTree.fieldName;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    fieldName?: string;\n\n    constructor(operator: FilteringLogic, fieldName?: string) {\n        this.operator = operator;\n        this.fieldName = fieldName;\n    }\n\n    /**\n     * Returns the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpression = gridExpressionTree.find('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression {\n        const index = this.findIndex(fieldName);\n\n        if (index > -1) {\n            return this.filteringOperands[index];\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the index of the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpressionIndex = gridExpressionTree.findIndex('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public findIndex(fieldName: string): number {\n        let expr;\n        for (let i = 0; i < this.filteringOperands.length; i++) {\n            expr = this.filteringOperands[i];\n            if (expr instanceof FilteringExpressionsTree) {\n                if (this.isFilteringExpressionsTreeForColumn(expr, fieldName)) {\n                    return i;\n                }\n            } else {\n                if ((expr as IFilteringExpression).fieldName === fieldName) {\n                    return i;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    protected isFilteringExpressionsTreeForColumn(expressionsTree: IFilteringExpressionsTree, fieldName: string): boolean {\n        if (expressionsTree.fieldName === fieldName) {\n            return true;\n        }\n\n        let expr;\n        for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n            expr = expressionsTree.filteringOperands[i];\n            if ((expr instanceof FilteringExpressionsTree)) {\n                return this.isFilteringExpressionsTreeForColumn(expr, fieldName);\n            } else {\n                return (expr as IFilteringExpression).fieldName === fieldName;\n            }\n        }\n\n        return false;\n    }\n}\n","import { EventEmitter } from '@angular/core';\n\nexport enum TransactionType {\n    ADD = 'add',\n    DELETE = 'delete',\n    UPDATE = 'update'\n}\n\nexport interface Transaction {\n    id: any;\n    type: TransactionType;\n    newValue: any;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalTransaction extends Transaction {\n    path: any[];\n}\n\nexport interface State {\n    value: any;\n    recordRef: any;\n    type: TransactionType;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalState extends State {\n    path: any[];\n}\n\nexport interface TransactionService<T extends Transaction, S extends State> {\n    /**\n     * Returns whether transaction is enabled for this service\n     */\n    readonly enabled: boolean;\n\n    /**\n     * Event fired when transaction state has changed - add transaction, commit all transactions, undo and redo\n     */\n    onStateUpdate?: EventEmitter<void>;\n\n    /**\n     * @returns if there are any transactions in the Undo stack\n     */\n    canUndo: boolean;\n\n    /**\n     * @returns if there are any transactions in the Redo stack\n     */\n    canRedo: boolean;\n\n    /**\n     * Adds provided  transaction with recordRef if any\n     * @param transaction Transaction to be added\n     * @param recordRef Reference to the value of the record in the data source related to the changed item\n     */\n    add(transaction: T, recordRef?: any): void;\n\n    /**\n     * Returns all recorded transactions in chronological order\n     * @param id Optional record id to get transactions for\n     * @returns All transaction in the service or for the specified record\n     */\n    getTransactionLog(id?: any): T[];\n\n    /**\n     * Remove the last transaction if any\n     */\n    undo(): void;\n\n    /**\n     * Applies the last undone transaction if any\n     */\n    redo(): void;\n\n    /**\n     * Returns aggregated changes from all transactions\n     * @param mergeChanges If set to true will merge each state's value over relate recordRef\n     * and will record resulting value in the related transaction\n     * @returns Collection of aggregated transactions for each changed record\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[];\n\n    /**\n     * Returns the state of the record with provided id\n     * @param id The id of the record\n     * @returns State of the record if any\n     */\n    getState(id: any): S;\n\n    /**\n     * Returns value of the required id including all uncommitted changes\n     * @param id The id of the record to return value for\n     * @param mergeChanges If set to true will merge state's value over relate recordRef\n     * and will return merged value\n     * @returns Value with changes or **null**\n     */\n    getAggregatedValue(id: any, mergeChanges: boolean): any;\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     */\n    commit(data: any[]): void;\n\n    /**\n     * Clears all transactions\n     */\n    clear(): void;\n\n    /**\n     * Starts pending transactions. All transactions passed after call to startPending\n     * will not be added to transaction log\n     */\n    startPending(): void;\n\n    /**\n     * Clears all pending transactions and aggregated pending state. If commit is set to true\n     * commits pending states as single transaction\n     * @param commit Should commit the pending states\n     */\n    endPending(commit: boolean): void;\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { cloneArray, isEqual, mergeObjects } from '../core/utils';\nimport { DataUtil, DataType } from '../data-operations/data-util';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression, SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxRowComponent } from './row.component';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { Transaction, TransactionType, State } from '../services/transaction/transaction';\nimport { IgxCell, IgxRow } from '../core/grid-selection';\n/**\n *@hidden\n */\n@Injectable()\nexport class GridBaseAPIService <T extends IgxGridBaseComponent & IGridDataBindable> {\n\n    grid: T;\n    protected editCellState: Map<string, any> = new Map<string, any>();\n    protected editRowState: Map<string, { rowID: any, rowIndex: number }> = new Map();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    public get_column_by_name(name: string): IgxColumnComponent {\n        return this.grid.columnList.find((col) => col.field === name);\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        let data = grid.filteredData;\n        if (!data) {\n            if (grid.transactions.enabled) {\n                data = DataUtil.mergeTransactions(\n                    cloneArray(grid.data),\n                    grid.transactions.getAggregatedChanges(true),\n                    grid.primaryKey\n                );\n                const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n                deletedRows.forEach(rowID => {\n                    const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                    const index = tempData.indexOf(rowID);\n                    if (index !== -1) {\n                       data.splice(index, 1);\n                    }\n                });\n            } else {\n                data = grid.data;\n            }\n        }\n        return data;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getRowData(rowID: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(rowID);\n        return data[index];\n    }\n\n    // TODO: Refactor\n    public escape_editMode() {\n        this.grid.crudService.end();\n        this.grid.refreshSearch();\n    }\n\n    // TODO: Refactor\n    public get_cell_inEditMode(): IgxCell {\n        return this.grid.crudService.cell;\n    }\n\n    public get_row_index_in_data(rowID: any): number {\n        const grid = this.grid as IgxGridBaseComponent;\n        if (!grid) {\n            return -1;\n        }\n        const data = this.get_all_data(grid.transactions.enabled);\n        return grid.primaryKey ? data.findIndex(record => record[grid.primaryKey] === rowID) : data.indexOf(rowID);\n    }\n\n    public get_row_by_key(rowSelector: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        const primaryKey = this.grid.primaryKey;\n        if (primaryKey !== undefined && primaryKey !== null) {\n            return this.grid.dataRowList.find((row) => row.rowData[primaryKey] === rowSelector);\n        } else {\n            return this.grid.dataRowList.find((row) => row.rowData === rowSelector);\n        }\n    }\n\n    public get_row_by_index(rowIndex: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.grid.rowList.find((row) => row.index === rowIndex);\n    }\n\n    public get_cell_by_key(rowSelector: any, field: string): IgxGridCellComponent {\n        const row = this.get_row_by_key(rowSelector);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.column.field === field);\n        }\n    }\n\n    public get_cell_by_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.columnIndex === columnIndex);\n        }\n    }\n\n    public get_cell_by_visible_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.visibleColumnIndex === columnIndex);\n        }\n    }\n\n    public submit_value() {\n        const cell = this.grid.crudService.cell;\n        if (cell) {\n            const args = this.update_cell(cell, cell.editValue);\n            if (args.cancel) {\n                return;\n            }\n            this.escape_editMode();\n        }\n    }\n\n    update_cell(cell: IgxCell, value: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(cell.id.rowID);\n\n        cell.editValue = value;\n\n        const valueInTransactions = this.grid.transactions.getAggregatedValue(cell.id.rowID, true);\n        if (valueInTransactions) {\n            cell.value = valueInTransactions[cell.column.field];\n            cell.rowData = valueInTransactions;\n        }\n\n        const args = cell.createEditEventArgs();\n\n\n        this.grid.onCellEdit.emit(args);\n        if (args.cancel) {\n            return args;\n        }\n\n        // Cast to number after emit\n        // TODO: Clean up this\n        args.newValue = cell.castToNumber(args.newValue);\n\n        if (isEqual(args.oldValue, args.newValue)) {\n            return args;\n        }\n        this.grid.summaryService.clearSummaryCache(args);\n        this.updateData(this.grid, cell.id.rowID, data[index], cell.rowData, { [cell.column.field ]: args.newValue });\n        if (this.grid.primaryKey === cell.column.field) {\n            if (this.grid.selection.is_item_selected(this.grid.id, cell.id.rowID)) {\n                this.grid.selection.deselect_item(this.grid.id, cell.id.rowID);\n                this.grid.selection.select_item(this.grid.id, args.newValue);\n            }\n            if (this.grid.hasSummarizedColumns) {\n                this.grid.summaryService.removeSummaries(cell.id.rowID);\n            }\n        }\n        if (!this.grid.rowEditable || !this.grid.crudService.row ||\n                this.grid.crudService.row.id !== cell.id.rowID || !this.grid.transactions.enabled) {\n            this.grid.summaryService.clearSummaryCache(args);\n            (this.grid as any)._pipeTrigger++;\n        }\n\n        return args;\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(grid, rowID, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {[x: string]: any}) {\n        if (grid.transactions.enabled) {\n            const transaction: Transaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    _update_row(row: IgxRow, value?: any) {\n        const grid = this.grid;\n\n        const rowInEditMode = grid.crudService.row;\n        row.newData = value ? value : grid.transactions.getAggregatedValue(row.id, true);\n\n\n        if (rowInEditMode && row.id === rowInEditMode.id) {\n            row.data = { ...row.data, ...rowInEditMode.transactionState };\n        // TODO: Workaround for updating a row in edit mode through the API\n        } else if (this.grid.transactions.enabled) {\n            const lastCommitedValue = grid.transactions.getState(row.id) ?\n                grid.transactions.getState(row.id).value : null;\n            row.data = lastCommitedValue ? Object.assign(row.data, lastCommitedValue) : row.data;\n        }\n    }\n\n    update_row(row: IgxRow, value: any) {\n        const grid = this.grid;\n        const selected = grid.selection.is_item_selected(grid.id, row.id);\n        const rowInEditMode = grid.crudService.row;\n        const data = this.get_all_data(grid.transactions.enabled);\n        const index = this.get_row_index_in_data(row.id);\n        const hasSummarized = grid.hasSummarizedColumns;\n\n        this._update_row(row, value);\n\n        const args = row.createEditEventArgs();\n\n        // If no valid row is found\n        if (index === -1) {\n            return args;\n        }\n\n        grid.onRowEdit.emit(args);\n\n        if (args.cancel) {\n            return args;\n        }\n\n        if (rowInEditMode) {\n            grid.transactions.endPending(false);\n        }\n\n        if (!args.newValue) {\n            return args;\n        }\n\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(args.rowID);\n        }\n\n        this.updateData(grid, row.id, data[index], args.oldValue, args.newValue);\n        const newId = grid.primaryKey ? args.newValue[grid.primaryKey] : args.newValue;\n        if (selected) {\n            grid.selection.deselect_item(grid.id, row.id);\n            grid.selection.select_item(grid.id, newId);\n        }\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(newId);\n        }\n        (grid as any)._pipeTrigger++;\n\n        return args;\n    }\n\n\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        grid.data[index] = value;\n    }\n\n    public sort(expression: ISortingExpression): void {\n        if (expression.dir === SortingDirection.None) {\n            this.remove_grouping_expression(expression.fieldName);\n        }\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState], expression);\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public sort_multiple(expressions: ISortingExpression[]): void {\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            if (each.dir === SortingDirection.None) {\n                this.remove_grouping_expression(each.fieldName);\n            }\n            this.prepare_sorting_expression([sortingState], each);\n        }\n\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public filter(fieldName: string, term, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase: boolean) {\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        const fieldFilterIndex = filteringTree.findIndex(fieldName);\n        if (fieldFilterIndex > -1) {\n            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);\n        }\n\n        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase, fieldFilterIndex);\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public filter_global(term, condition, ignoreCase) {\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        filteringTree.filteringOperands = [];\n        if (condition) {\n            for (const column of grid.columns) {\n                this.prepare_filtering_expression(filteringTree, column.field, term,\n                    condition, ignoreCase || column.filteringIgnoreCase);\n            }\n        }\n\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public clear_filter(fieldName: string) {\n        if (fieldName) {\n            const column = this.get_column_by_name(fieldName);\n            if (!column) {\n                return;\n            }\n        }\n\n        const grid = this.grid;\n        grid.endEdit(false);\n        const filteringState = grid.filteringExpressionsTree;\n        const index = filteringState.findIndex(fieldName);\n\n        if (index > -1) {\n            filteringState.filteringOperands.splice(index, 1);\n        } else if (!fieldName) {\n            filteringState.filteringOperands = [];\n        }\n\n        grid.filteringExpressionsTree = filteringState;\n    }\n\n    public clear_sort(fieldName: string) {\n        const sortingState = this.grid.sortingExpressions;\n        const index = sortingState.findIndex((expr) => expr.fieldName === fieldName);\n        if (index > -1) {\n            sortingState.splice(index, 1);\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    protected prepare_filtering_expression(filteringState: IFilteringExpressionsTree, fieldName: string, searchVal,\n        conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean, insertAtIndex = -1) {\n\n        let newExpressionsTree;\n        const oldExpressionsTreeIndex = filteringState.findIndex(fieldName);\n        const expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            conditionOrExpressionsTree as IFilteringExpressionsTree : null;\n        const condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            null : conditionOrExpressionsTree as IFilteringOperation;\n        const newExpression: IFilteringExpression = { fieldName, searchVal, condition, ignoreCase };\n\n        if (oldExpressionsTreeIndex === -1) {\n            // no expressions tree found for this field\n            if (expressionsTree) {\n                if (insertAtIndex > -1) {\n                    filteringState.filteringOperands.splice(insertAtIndex, 0, expressionsTree);\n                } else {\n                    filteringState.filteringOperands.push(expressionsTree);\n                }\n            } else if (condition) {\n                // create expressions tree for this field and add the new expression to it\n                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);\n                newExpressionsTree.filteringOperands.push(newExpression);\n                filteringState.filteringOperands.push(newExpressionsTree);\n            }\n        }\n    }\n\n    protected prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression) {\n        if (expression.dir === SortingDirection.None) {\n            stateCollections.forEach(state => {\n                state.splice(state.findIndex((expr) => expr.fieldName === expression.fieldName), 1);\n            });\n            return;\n        }\n\n        /**\n         * We need to make sure the states in each collection with same fields point to the same object reference.\n         * If the different state collections provided have different sizes we need to get the largest one.\n         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.\n         */\n        let maxCollection = stateCollections[0];\n        for (let i = 1; i < stateCollections.length; i++) {\n            if (maxCollection.length < stateCollections[i].length) {\n                maxCollection = stateCollections[i];\n            }\n        }\n        const maxExpr = maxCollection.find((expr) => expr.fieldName === expression.fieldName);\n\n        stateCollections.forEach(collection => {\n            const myExpr = collection.find((expr) => expr.fieldName === expression.fieldName);\n            if (!myExpr && !maxExpr) {\n                // Expression with this fieldName is missing from the current and the max collection.\n                collection.push(expression);\n            } else if (!myExpr && maxExpr) {\n                // Expression with this fieldName is missing from the current and but the max collection has.\n                collection.push(maxExpr);\n                Object.assign(maxExpr, expression);\n            } else {\n                // The current collection has the expression so just update it.\n                Object.assign(myExpr, expression);\n            }\n        });\n    }\n\n    protected remove_grouping_expression(fieldName) {\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number;\n    }\n\n    public get_data(): any[] {\n        const grid = this.grid;\n        const data = grid.data ? grid.data : [];\n        return data;\n    }\n\n    public get_all_data(includeTransactions = false): any[] {\n        const grid = this.grid;\n        let data = grid.data ? grid.data : [];\n        data = includeTransactions ? grid.dataWithAddedInTransactionRows : data;\n        return data;\n    }\n\n    public get_filtered_data(): any[] {\n        return this.grid.filteredData;\n    }\n\n    protected getSortStrategyPerColumn(fieldName: string) {\n        return this.get_column_by_name(fieldName) ?\n            this.get_column_by_name(fieldName).sortStrategy : undefined;\n    }\n\n    public addRowToData(rowData: any) {\n        // Add row goes to transactions and if rowEditable is properly implemented, added rows will go to pending transactions\n        // If there is a row in edit - > commit and close\n        const grid = this.grid;\n        if (grid.transactions.enabled) {\n            const transactionId = grid.primaryKey ? rowData[grid.primaryKey] : rowData;\n            const transaction: Transaction = { id: transactionId, type: TransactionType.ADD, newValue: rowData };\n            grid.transactions.add(transaction);\n        } else {\n            grid.data.push(rowData);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        const grid = this.grid;\n        if (index !== -1) {\n            if (grid.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                grid.transactions.add(transaction, grid.data[index]);\n            } else {\n                grid.data.splice(index, 1);\n            }\n        } else {\n            const state: State = grid.transactions.getState(rowID);\n            grid.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    public deleteRowById(rowId: any) {\n        let index: number;\n        const grid = this.grid;\n        const data = this.get_all_data();\n        if (grid.primaryKey) {\n            index = data.map((record) => record[grid.primaryKey]).indexOf(rowId);\n        } else {\n            index = data.indexOf(rowId);\n        }\n        const state: State = grid.transactions.getState(rowId);\n        const hasRowInNonDeletedState = state && state.type !== TransactionType.DELETE;\n\n        //  if there is a row (index !== -1) and the we have cell in edit mode on same row exit edit mode\n        //  if there is no row (index === -1), but there is a row in ADD or UPDATE state do as above\n        //  Otherwise just exit - there is nothing to delete\n        if (index !== -1 || hasRowInNonDeletedState) {\n            // Always exit edit when row is deleted\n            grid.endEdit(true);\n        } else {\n            return;\n        }\n\n        //  TODO: should we emit this when cascadeOnDelete is true for each row?!?!\n        grid.onRowDeleted.emit({ data: data[index] });\n\n        //  first deselect row then delete it\n        if (grid.rowSelectable && grid.selection.is_item_selected(grid.id, rowId)) {\n            grid.deselectRows([rowId]);\n        } else {\n            grid.checkHeaderCheckboxStatus();\n        }\n\n        this.deleteRowFromData(rowId, index);\n        (grid as any)._pipeTrigger++;\n        grid.cdr.markForCheck();\n        // Data needs to be recalculated if transactions are in place\n        // If no transactions, `data` will be a reference to the grid getter, otherwise it will be stale\n        const dataAfterDelete = grid.transactions.enabled ? grid.dataWithAddedInTransactionRows : data;\n        grid.refreshSearch();\n        if (dataAfterDelete.length % grid.perPage === 0 && dataAfterDelete.length / grid.perPage - 1 < grid.page && grid.page !== 0) {\n            grid.page--;\n        }\n    }\n\n    public get_row_id(rowData) {\n        const grid = this.grid;\n        return grid.primaryKey ? rowData[grid.primaryKey] : rowData;\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if (!grid.transactions.enabled) {\n            return false;\n        }\n        const state = grid.transactions.getState(rowID);\n        if (state) {\n            return state.type === TransactionType.DELETE;\n        }\n\n        return false;\n    }\n\n    public atInexistingPage(): Boolean {\n        const grid = this.grid;\n        return grid.data.length % grid.perPage === 0 && grid.isLastPage && grid.page !== 0;\n    }\n}\n","import { IFilteringOperation } from './filtering-condition';\n\nexport enum FilteringLogic {\n    And,\n    Or\n}\n\n/**\n * Represents filtering expressions.\n */\nexport declare interface IFilteringExpression {\n    fieldName: string;\n    condition: IFilteringOperation;\n    searchVal?: any;\n    ignoreCase?: boolean;\n}\n","import { FilteringLogic, IFilteringExpression } from './filtering-expression.interface';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from './filtering-expressions-tree';\n\nexport interface IFilteringStrategy {\n    filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[];\n}\n\nexport abstract class BaseFilteringStrategy implements IFilteringStrategy  {\n    public abstract filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[];\n\n    protected abstract getFieldValue(rec: object, fieldName: string): any;\n\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = this.getFieldValue(rec, expr.fieldName);\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n\n    public matchRecord(rec: object, expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (expressions) {\n            if (expressions instanceof FilteringExpressionsTree) {\n                const expressionsTree = expressions as IFilteringExpressionsTree;\n                const operator = expressionsTree.operator as FilteringLogic;\n                let matchOperand, operand;\n\n                if (expressionsTree.filteringOperands && expressionsTree.filteringOperands.length) {\n                    for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                        operand = expressionsTree.filteringOperands[i];\n                        matchOperand = this.matchRecord(rec, operand);\n\n                        // Return false if at least one operand does not match and the filtering logic is And\n                        if (!matchOperand && operator === FilteringLogic.And) {\n                            return false;\n                        }\n\n                        // Return true if at least one operand matches and the filtering logic is Or\n                        if (matchOperand && operator === FilteringLogic.Or) {\n                            return true;\n                        }\n                    }\n\n                    return matchOperand;\n                }\n\n                return true;\n            } else {\n                const expression = expressions as IFilteringExpression;\n                return this.findMatchByExpression(rec, expression);\n            }\n        }\n\n        return true;\n    }\n}\n\nexport class FilteringStrategy extends BaseFilteringStrategy {\n    public filter<T>(data: T[], expressionsTree: IFilteringExpressionsTree): T[] {\n        let i;\n        let rec;\n        const len = data.length;\n        const res: T[] = [];\n        if (!expressionsTree || !expressionsTree.filteringOperands || expressionsTree.filteringOperands.length === 0 || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = data[i];\n            if (this.matchRecord(rec, expressionsTree)) {\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        return rec[fieldName];\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { BaseFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IFilteringState } from '../../data-operations/filtering-state.interface';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\n\n/** @hidden */\nexport class TreeGridFilteringStrategy extends BaseFilteringStrategy {\n    public filter(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree): ITreeGridRecord[] {\n        return this.filterImpl(data, expressionsTree, undefined);\n    }\n\n    private filterImpl(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree, parent: ITreeGridRecord): ITreeGridRecord[] {\n        let i: number;\n        let rec: ITreeGridRecord;\n        const len = data.length;\n        const res: ITreeGridRecord[] = [];\n        if (!expressionsTree || !expressionsTree.filteringOperands || expressionsTree.filteringOperands.length === 0 || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = DataUtil.cloneTreeGridRecord(data[i]);\n            rec.parent = parent;\n            if (rec.children) {\n                const filteredChildren = this.filterImpl(rec.children, expressionsTree, rec);\n                rec.children = filteredChildren.length > 0 ? filteredChildren : null;\n            }\n\n            if (this.matchRecord(rec, expressionsTree)) {\n                res.push(rec);\n            } else if (rec.children && rec.children.length > 0) {\n                rec.isFilteredOutParent = true;\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        const hierarchicalRecord = <ITreeGridRecord>rec;\n        return hierarchicalRecord.data[fieldName];\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridFiltering',\n    pure: true\n})\nexport class IgxTreeGridFilteringPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(hierarchyData: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const state = {\n            expressionsTree: expressionsTree,\n            strategy: new TreeGridFilteringStrategy()\n        };\n\n        this.resetFilteredOutProperty(grid.records);\n\n        if (!state.expressionsTree ||\n            !state.expressionsTree.filteringOperands ||\n            state.expressionsTree.filteringOperands.length === 0) {\n            grid.filteredData = null;\n            return hierarchyData;\n        }\n\n        const result = this.filter(hierarchyData, state);\n        const filteredData: any[] = [];\n        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);\n        grid.filteredData = filteredData;\n\n        return result;\n    }\n\n    private resetFilteredOutProperty(map: Map<any, ITreeGridRecord>) {\n        const keys = Array.from(map.keys());\n        for (let i = 0; i < keys.length; i++) {\n            map.get(keys[i]).isFilteredOutParent = undefined;\n        }\n    }\n\n    private expandAllRecursive(grid: IgxTreeGridComponent, data: ITreeGridRecord[],\n        expandedStates: Map<any, boolean>, filteredData: any[]) {\n        for (let i = 0; i < data.length; i++) {\n            const rec = data[i];\n            filteredData.push(rec.data);\n            this.updateNonProcessedRecord(grid, rec);\n\n            if (rec.children && rec.children.length > 0) {\n                expandedStates.set(rec.rowID, true);\n                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);\n            }\n        }\n    }\n\n    private updateNonProcessedRecord(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.isFilteredOutParent = record.isFilteredOutParent;\n    }\n\n    private filter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n}\n","import { IFilteringState } from './filtering-state.interface';\n\nimport { IgxSorting, IgxDataRecordSorting } from './sorting-strategy';\nimport { IGroupByResult, IgxGrouping } from './grouping-strategy';\n\nimport { IPagingState, PagingError } from './paging-state.interface';\n\nimport { IGroupByExpandState, IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { TreeGridFilteringStrategy } from '../grids/tree-grid/tree-grid.filtering.pipe';\nimport { ISortingExpression } from './sorting-expression.interface';\nimport { FilteringStrategy } from './filtering-strategy';\nimport { ITreeGridRecord } from '../grids/tree-grid';\nimport { cloneValue, mergeObjects } from '../core/utils';\nimport { Transaction, TransactionType, HierarchicalTransaction } from '../services/transaction/transaction';\n\n/**\n * @hidden\n */\nexport enum DataType {\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n    Date = 'date'\n}\n\n/**\n * @hidden\n */\nexport class DataUtil {\n    public static sort<T>(data: T[], expressions: ISortingExpression[], sorting: IgxSorting = new IgxSorting()): T[] {\n        return sorting.sort(data, expressions);\n    }\n\n    public static treeGridSort(hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        parent?: ITreeGridRecord): ITreeGridRecord[] {\n        let res: ITreeGridRecord[] = [];\n        hierarchicalData.forEach((hr: ITreeGridRecord) => {\n            const rec: ITreeGridRecord = DataUtil.cloneTreeGridRecord(hr);\n            rec.parent = parent;\n            if (rec.children) {\n                rec.children = DataUtil.treeGridSort(rec.children, expressions, rec);\n            }\n            res.push(rec);\n        });\n\n        res = DataUtil.sort(res, expressions, new IgxDataRecordSorting());\n\n        return res;\n    }\n\n    public static cloneTreeGridRecord(hierarchicalRecord: ITreeGridRecord) {\n        const rec: ITreeGridRecord = {\n            rowID: hierarchicalRecord.rowID,\n            data: hierarchicalRecord.data,\n            children: hierarchicalRecord.children,\n            isFilteredOutParent: hierarchicalRecord.isFilteredOutParent,\n            level: hierarchicalRecord.level,\n            expanded: hierarchicalRecord.expanded\n        };\n        return rec;\n    }\n\n    public static group<T>(data: T[], state: IGroupingState, grid: any = null, groupsRecords: any[] = []): IGroupByResult {\n        const grouping = new IgxGrouping();\n        groupsRecords.splice(0, groupsRecords.length);\n        return grouping.groupBy(data, state.expressions, grid, groupsRecords);\n    }\n    public static restoreGroups(groupData: IGroupByResult, state: IGroupingState): any[] {\n        if (state.expressions.length === 0) {\n            return groupData.data;\n        }\n        return this.restoreGroupsIterative(groupData, state);\n    }\n    private static restoreGroupsIterative(groupData: IGroupByResult, state: IGroupingState): any[] {\n        const metadata = groupData.metadata;\n        const result = [], added = [];\n        let chain: any[];\n        let i = 0, j;\n        let pointer: IGroupByRecord;\n        let expanded: boolean;\n        for (i = 0; i < metadata.length;) {\n            chain = [metadata[i]];\n            pointer = metadata[i].groupParent;\n            // break off if the parent is already added\n            while (pointer && added[0] !== pointer) {\n                chain.push(pointer);\n                if (added[0] && added[0].level === pointer.level) {\n                    added.shift();\n                }\n                pointer = pointer.groupParent;\n            }\n            for (j = chain.length - 1; j >= 0; j--) {\n                result.push(chain[j]);\n                added.unshift(chain[j]);\n                const hierarchy = this.getHierarchy(chain[j]);\n                const expandState: IGroupByExpandState = state.expansion.find((s) =>\n                    this.isHierarchyMatch(s.hierarchy || [{ fieldName: chain[j].expression.fieldName, value: chain[j].value }], hierarchy));\n                expanded = expandState ? expandState.expanded : state.defaultExpanded;\n                if (!expanded) {\n                    break;\n                }\n            }\n            added.shift();\n            j = Math.max(j, 0);\n            const start = chain[j].records.findIndex(r => r === groupData.data[i]);\n            const end = Math.min(metadata.length - i + start, chain[j].records.length);\n            if (expanded) {\n                result.push(...chain[j].records.slice(start, end));\n            }\n            i += end - start;\n        }\n        return result;\n    }\n    public static page<T>(data: T[], state: IPagingState): T[] {\n        if (!state) {\n            return data;\n        }\n        const len = data.length;\n        const index = state.index;\n        const res = [];\n        const recordsPerPage = state.recordsPerPage;\n        state.metadata = {\n            countPages: 0,\n            countRecords: data.length,\n            error: PagingError.None\n        };\n        if (index < 0 || isNaN(index)) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {\n            state.metadata.error = PagingError.IncorrectRecordsPerPage;\n            return res;\n        }\n        state.metadata.countPages = Math.ceil(len / recordsPerPage);\n        if (!len) {\n            return data;\n        }\n        if (index >= state.metadata.countPages) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);\n    }\n    public static filter<T>(data: T[], state: IFilteringState): T[] {\n        if (!state.strategy) {\n            state.strategy = new FilteringStrategy();\n        }\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n\n    public static treeGridFilter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        if (!state.strategy) {\n            state.strategy = new TreeGridFilteringStrategy();\n        }\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n\n    public static getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n        const hierarchy: Array<IGroupByKey> = [];\n        if (gRow !== undefined && gRow.expression) {\n            hierarchy.push({ fieldName: gRow.expression.fieldName, value: gRow.value });\n            while (gRow.groupParent) {\n                gRow = gRow.groupParent;\n                hierarchy.unshift({ fieldName: gRow.expression.fieldName, value: gRow.value });\n            }\n        }\n        return hierarchy;\n    }\n\n    public static isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n        if (h1.length !== h2.length) {\n            return false;\n        }\n        return h1.every((level, index): boolean => {\n            return level.fieldName === h2[index].fieldName && level.value === h2[index].value;\n        });\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeTransactions<T>(data: T[], transactions: Transaction[], primaryKey?: any, deleteRows: boolean = false): T[] {\n        data.forEach((item: any, index: number) => {\n            const rowId = primaryKey ? item[primaryKey] : item;\n            const transaction = transactions.find(t => t.id === rowId);\n            if (transaction && transaction.type === TransactionType.UPDATE) {\n                data[index] = transaction.newValue;\n            }\n        });\n\n        if (deleteRows) {\n            transactions\n                .filter(t => t.type === TransactionType.DELETE)\n                .forEach(t => {\n                    const index = primaryKey ? data.findIndex(d => d[primaryKey] === t.id) : data.findIndex(d => d === t.id);\n                    if (0 <= index && index < data.length) {\n                        data.splice(index, 1);\n                    }\n                });\n        }\n\n        data.push(...transactions\n            .filter(t => t.type === TransactionType.ADD)\n            .map(t => t.newValue));\n\n        return data;\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided hierarchical data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param childDataKey Data key of child collections\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeHierarchicalTransactions(\n        data: any[],\n        transactions: HierarchicalTransaction[],\n        childDataKey: any,\n        primaryKey?: any,\n        deleteRows: boolean = false): any[] {\n\n        for (const transaction of transactions) {\n            if (transaction.path) {\n                const parent = this.findParentFromPath(data, primaryKey, childDataKey, transaction.path);\n                let collection: any[] = parent ? parent[childDataKey] : data;\n                switch (transaction.type) {\n                    case TransactionType.ADD:\n                        //  if there is no parent this is ADD row at root level\n                        if (parent && !parent[childDataKey]) {\n                            parent[childDataKey] = collection = [];\n                        }\n                        collection.push(transaction.newValue);\n                        break;\n                    case TransactionType.UPDATE:\n                        const updateIndex = collection.findIndex(x => x[primaryKey] === transaction.id);\n                        if (updateIndex !== -1) {\n                            collection[updateIndex] = mergeObjects(cloneValue(collection[updateIndex]), transaction.newValue);\n                        }\n                        break;\n                    case TransactionType.DELETE:\n                        if (deleteRows) {\n                            const deleteIndex = collection.findIndex(r => r[primaryKey] === transaction.id);\n                            if (deleteIndex !== -1) {\n                                collection.splice(deleteIndex, 1);\n                            }\n                        }\n                        break;\n                }\n            } else {\n                //  if there is no path this is ADD row in root. Push the newValue to data\n                data.push(transaction.newValue);\n            }\n        }\n        return data;\n    }\n\n    private static findParentFromPath(data: any[], primaryKey: any, childDataKey: any, path: any[]): any {\n        let collection: any[] = data;\n        let result: any;\n\n        for (const id of path) {\n            result = collection && collection.find(x => x[primaryKey] === id);\n            if (!result) {\n                break;\n            }\n\n            collection = result[childDataKey];\n        }\n\n        return result;\n    }\n}\n","\n/**\n * @hidden\n */\nexport class ExportUtilities {\n    public static getKeysFromData(data: any[]) {\n        const length = data.length;\n        if (length === 0) {\n            return [];\n        }\n\n        const dataEntry = data[0];\n        const dataEntryMiddle = data[Math.floor(length / 2)];\n        const dataEntryLast = data[length - 1];\n\n        const keys1 = Object.keys(dataEntry);\n        const keys2 = Object.keys(dataEntryMiddle);\n        const keys3 = Object.keys(dataEntryLast);\n\n        const keys = new Set(keys1.concat(keys2).concat(keys3));\n\n        return !ExportUtilities.isSpecialData(data) ? Array.from(keys) : [ 'Column 1' ];\n    }\n\n    public static saveBlobToFile(blob: Blob, fileName) {\n        const a = document.createElement('a');\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(blob, fileName);\n        } else {\n            const url = window.URL.createObjectURL(blob);\n            a.download = fileName;\n\n            a.href = url;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n\n    public static stringToArrayBuffer(s: string): ArrayBuffer {\n        const buf = new ArrayBuffer(s.length);\n        const view = new Uint8Array(buf);\n        for (let i = 0; i !== s.length; ++i) {\n            /* tslint:disable no-bitwise */\n            view[i] = s.charCodeAt(i) & 0xFF;\n            /* tslint:enable no-bitwise */\n        }\n        return buf;\n    }\n\n    public static isSpecialData(data: any[]): boolean {\n        const dataEntry = data[0];\n        return (typeof dataEntry === 'string' ||\n                typeof dataEntry === 'number' ||\n                dataEntry instanceof Date);\n    }\n\n    public static hasValue(value: any): boolean {\n        return value !== undefined && value !== null;\n    }\n\n    public static isNullOrWhitespaces(value: string): boolean {\n        return value === undefined || value === null || !value.trim();\n    }\n}\n","import {\n    EventEmitter,\n    Output\n} from '@angular/core';\n\nimport { cloneValue } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\n\nimport { ExportUtilities } from './export-utilities';\nimport { IgxExporterOptionsBase } from './exporter-options-base';\nimport { ITreeGridRecord } from '../../grids/tree-grid/tree-grid.interfaces';\n\n/**\n * onRowExport event arguments\n * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n * // set args properties here\n * })\n */\nexport interface IRowExportingEventArgs {\n    /**\n     * Contains the exporting row data\n     */\n    rowData: any;\n\n    /**\n     * Contains the exporting row index\n     */\n    rowIndex: number;\n\n    /**\n     * Skip the exporting row when set to true\n     */\n    cancel: boolean;\n}\n\n/**\n    * onColumnExport event arguments\n    * ```typescript\n    * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n    * // set args properties here\n    * });\n    * ```\n    */\nexport interface IColumnExportingEventArgs {\n    /**\n     * Contains the exporting column header\n     */\n    header: string;\n\n    /**\n     * Contains the exporting column field name\n     */\n    field: string;\n\n    /**\n     * Contains the exporting column index\n     */\n    columnIndex: number;\n\n    /**\n     * Skip the exporting column when set to true\n     */\n    cancel: boolean;\n\n    /**\n     * Export the column's data without applying its formatter, when set to true\n     */\n    skipFormatter: boolean;\n}\n\nexport abstract class IgxBaseExporter {\n    private _columnList: any[];\n    private flatRecords = [];\n\n    protected _isTreeGrid = false;\n    protected _indexOfLastPinnedColumn = -1;\n    protected _sort = null;\n\n    /**\n     * This event is emitted when a row is exported.\n     * ```typescript\n     * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onRowExport = new EventEmitter<IRowExportingEventArgs>();\n\n    /**\n     * This event is emitted when a column is exported.\n     * ```typescript\n     * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onColumnExport = new EventEmitter<IColumnExportingEventArgs>();\n\n    /**\n     * Method for exporting IgxGrid component's data.\n     * ```typescript\n     * this.exporterService.export(this.igxGridForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public export(grid: any, options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        const columns = grid.columnList.toArray();\n        this._columnList = new Array<any>(columns.length);\n\n        const hiddenColumns = [];\n        let lastVisbleColumnIndex = -1;\n\n        columns.forEach((column) => {\n            const columnHeader = column.header !== '' ? column.header : column.field;\n            const exportColumn = !column.hidden || options.ignoreColumnsVisibility;\n            const index = options.ignoreColumnsOrder ? column.index : column.visibleIndex;\n\n            const columnInfo = {\n                header: columnHeader,\n                field: column.field,\n                skip: !exportColumn,\n                formatter: column.formatter,\n                skipFormatter: false\n            };\n\n            if (index !== -1) {\n                this._columnList[index] = columnInfo;\n                lastVisbleColumnIndex = Math.max(lastVisbleColumnIndex, index);\n            } else {\n                hiddenColumns.push(columnInfo);\n            }\n\n            if (column.pinned && exportColumn) {\n                this._indexOfLastPinnedColumn = index;\n            }\n        });\n\n        // Append the hidden columns to the end of the list\n        hiddenColumns.forEach((hiddenColumn) => {\n            this._columnList[++lastVisbleColumnIndex] = hiddenColumn;\n        });\n\n        const data = this.prepareData(grid, options);\n        this.exportData(data, options);\n    }\n\n    /**\n     * Method for exporting any kind of array data.\n     * ```typescript\n     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public exportData(data: any[], options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        if (!this._columnList || this._columnList.length === 0) {\n            const keys = ExportUtilities.getKeysFromData(data);\n            this._columnList = keys.map((k) => ({ header: k, field: k, skip: false }));\n        }\n\n        let skippedPinnedColumnsCount = 0;\n        let columnsWithoutHeaderCount = 1;\n        this._columnList.forEach((column, index) => {\n            if (!column.skip) {\n                const columnExportArgs = {\n                    header: ExportUtilities.isNullOrWhitespaces(column.header) ?\n                        'Column' + columnsWithoutHeaderCount++ : column.header,\n                    field: column.field,\n                    columnIndex: index,\n                    cancel: false,\n                    skipFormatter: false\n                };\n                this.onColumnExport.emit(columnExportArgs);\n\n                column.header = columnExportArgs.header;\n                column.skip = columnExportArgs.cancel;\n                column.skipFormatter = columnExportArgs.skipFormatter;\n\n                if (column.skip && index <= this._indexOfLastPinnedColumn) {\n                    skippedPinnedColumnsCount++;\n                }\n\n                if (this._sort && this._sort.fieldName === column.field) {\n                    if (column.skip) {\n                        this._sort = null;\n                    } else {\n                        this._sort.fieldName = column.header;\n                    }\n                }\n            }\n        });\n\n        this._indexOfLastPinnedColumn -= skippedPinnedColumnsCount;\n\n        const dataToExport = new Array<any>();\n        const isSpecialData = ExportUtilities.isSpecialData(data);\n\n        data.forEach((row, index) => {\n            this.exportRow(dataToExport, row, index, isSpecialData);\n        });\n\n        this.exportDataImplementation(dataToExport, options);\n        this.resetDefaults();\n    }\n\n    protected abstract exportDataImplementation(data: any[], options: IgxExporterOptionsBase): void;\n\n    private exportRow(data: any[], rowData: any, index: number, isSpecialData: boolean) {\n        let row;\n\n        if (!isSpecialData) {\n            row = this._columnList.reduce((a, e) => {\n                if (!e.skip) {\n                    const rawValue = this._isTreeGrid ? rowData.data[e.field] : rowData[e.field];\n                    a[e.header] = e.formatter && !e.skipFormatter ? e.formatter(rawValue) : rawValue;\n                }\n                return a;\n            }, {});\n        } else {\n            row = this._isTreeGrid ? rowData.data : rowData;\n        }\n\n        const rowArgs = {\n            rowData: row,\n            rowIndex: index,\n            cancel: false\n        };\n        this.onRowExport.emit(rowArgs);\n\n        if (!rowArgs.cancel) {\n            data.push({ rowData: rowArgs.rowData, originalRowData: rowData });\n        }\n    }\n\n    private prepareData(grid: any, options: IgxExporterOptionsBase): any[] {\n        this.flatRecords = [];\n        let rootRecords = grid.rootRecords;\n        this._isTreeGrid = rootRecords !== undefined;\n\n        if (this._isTreeGrid) {\n            this.prepareHierarchicalData(rootRecords);\n        }\n\n        let data = this._isTreeGrid ? this.flatRecords : grid.data;\n\n        if (grid.filteringExpressionsTree &&\n            grid.filteringExpressionsTree.filteringOperands.length > 0 &&\n            !options.ignoreFiltering) {\n            const filteringState = {\n                expressionsTree: grid.filteringExpressionsTree,\n                logic: grid.filteringLogic\n            };\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                rootRecords = DataUtil.treeGridFilter(rootRecords, filteringState);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.filter(data, filteringState);\n            }\n        }\n\n        if (grid.sortingExpressions &&\n            grid.sortingExpressions.length > 0 &&\n            !options.ignoreSorting) {\n            this._sort = cloneValue(grid.sortingExpressions[0]);\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                rootRecords = DataUtil.treeGridSort(rootRecords, grid.sortingExpressions);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.sort(data, grid.sortingExpressions);\n            }\n        }\n\n        return data;\n    }\n\n    private prepareHierarchicalData(records: ITreeGridRecord[]) {\n        if (!records) {\n            return;\n        }\n        for (let i = 0; i < records.length; i++) {\n            const hierarchicalRecord = records[i];\n\n            this.flatRecords.push(hierarchicalRecord);\n            this.prepareHierarchicalData(hierarchicalRecord.children);\n        }\n    }\n\n    private resetDefaults() {\n        this._columnList = [];\n        this._indexOfLastPinnedColumn = -1;\n        this._sort = null;\n        this.flatRecords = [];\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/**\n * @hidden\n */\nexport class CharSeparatedValueData {\n    private _headerRecord = '';\n    private _dataRecords = '';\n    private _eor = '\\r\\n';\n    private _delimiter;\n    private _escapeCharacters = ['\\r', '\\n', '\\r\\n'];\n    private _delimiterLength = 1;\n    private _isSpecialData = false;\n\n    constructor(private _data: any[], valueDelimiter: string, private _isTreeGridData = false) {\n        this.setDelimiter(valueDelimiter);\n    }\n\n    public prepareData() {\n        if (!this._data || this._data.length === 0) {\n            return '';\n        }\n\n        this._data = this._data.map((item) => item.rowData);\n\n        const keys = ExportUtilities.getKeysFromData(this._data);\n\n        if (keys.length === 0) {\n            return '';\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(this._data);\n        this._escapeCharacters.push(this._delimiter);\n\n        this._headerRecord = this.processHeaderRecord(keys, this._escapeCharacters);\n        this._dataRecords = this.processDataRecords(this._data, keys, this._escapeCharacters);\n\n        return this._headerRecord + this._dataRecords;\n    }\n\n    private processField(value, escapeChars): string {\n        let safeValue = ExportUtilities.hasValue(value) ? String(value) : '';\n        if (escapeChars.some((v) => safeValue.includes(v))) {\n            safeValue = `\"${safeValue}\"`;\n        }\n        return safeValue + this._delimiter;\n    }\n\n    private processHeaderRecord(keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n            recordData += this.processField(keyName, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processRecord(record, keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n\n            const value = (record[keyName] !== undefined) ? record[keyName] : this._isSpecialData ? record : '';\n            recordData += this.processField(value, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processDataRecords(currentData, keys, escapeChars) {\n        let dataRecords = '';\n        for (const row of currentData) {\n            dataRecords += this.processRecord(row, keys, escapeChars);\n        }\n\n        return dataRecords;\n    }\n\n    private setDelimiter(value) {\n        this._delimiter = value;\n        this._delimiterLength = value.length;\n    }\n}\n","export abstract class IgxExporterOptionsBase {\n    private _fileName: string;\n\n    /**\n     * Specifies whether hidden columns should be exported.\n     * ```typescript\n     * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;\n     * this.exportOptions.ignoreColumnsVisibility = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsVisibility = false;\n\n    /**\n     * Specifies whether filtered out rows should be exported.\n     * ```typescript\n     * let ignoreFiltering = this.exportOptions.ignoreFiltering;\n     * this.exportOptions.ignoreFiltering = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreFiltering = false;\n\n    /**\n     * Specifies if the exporter should ignore the current column order in the IgxGrid.\n     * ```typescript\n     * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;\n     * this.exportOptions.ignoreColumnsOrder = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsOrder = false;\n\n    /**\n     * Specifies whether the exported data should be sorted as in the provided IgxGrid.\n     * ```typescript\n     * let ignoreSorting = this.exportOptions.ignoreSorting;\n     * this.exportOptions.ignoreSorting = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreSorting = false;\n\n    constructor(fileName: string, protected _fileExtension: string) {\n        this.setFileName(fileName);\n    }\n\n    private setFileName(fileName: string): void {\n        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');\n    }\n\n    /**\n     * Gets the file name which will be used for the exporting operation.\n     * ```typescript\n     * let fileName = this.exportOptions.fileName;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    get fileName() {\n        return this._fileName;\n    }\n\n    /**\n     * Sets the file name which will be used for the exporting operation.\n     * ```typescript\n     * this.exportOptions.fileName = 'exportedData01';\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    set fileName(value) {\n        this.setFileName(value);\n    }\n\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the CSV exporting process.\n */\nexport class IgxCsvExporterOptions extends IgxExporterOptionsBase {\n\n    private _valueDelimiter;\n    private _fileType;\n\n    constructor(fileName: string, fileType: CsvFileTypes) {\n        super(fileName, IgxCsvExporterOptions.getExtensionFromFileType(fileType));\n        this.setFileType(fileType);\n        this.setDelimiter();\n    }\n\n    private static getExtensionFromFileType(fType: CsvFileTypes) {\n        let extension = '';\n        switch (fType) {\n            case CsvFileTypes.CSV:\n                extension = '.csv';\n                break;\n            case CsvFileTypes.TSV:\n                extension = '.tsv';\n                break;\n            case CsvFileTypes.TAB:\n                extension = '.tab';\n                break;\n            default:\n                throw Error('Unsupported CSV file type!');\n        }\n        return extension;\n    }\n\n    /**\n     * Gets the value delimiter which will be used for the exporting operation.\n     * ```typescript\n     * let delimiter = this.exportOptions.valueDelimiter;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get valueDelimiter() {\n        return this._valueDelimiter;\n    }\n\n    /**\n     * Sets a value delimiter which will overwrite the default delimiter of the selected export format.\n     * ```typescript\n     * this.exportOptions.valueDelimiter = '|';\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set valueDelimiter(value) {\n        this.setDelimiter(value);\n    }\n\n    /**\n     * Gets the CSV export format.\n     * ```typescript\n     * let filetype = this.exportOptions.fileType;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get fileType() {\n        return this._fileType;\n    }\n\n    /**\n     * Sets the CSV export format.\n     * ```typescript\n     * this.exportOptions.fileType = CsvFileTypes.TAB;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set fileType(value) {\n        this.setFileType(value);\n    }\n\n    private setFileType(value) {\n        if (value !== undefined && value !== null && value !== this._fileType) {\n            this._fileType = value;\n            const extension = IgxCsvExporterOptions.getExtensionFromFileType(value);\n            if (!this.fileName.endsWith(extension)) {\n                const oldExt = '.' + this.fileName.split('.').pop();\n                const newName = this.fileName.replace(oldExt, extension);\n                this._fileExtension = extension;\n                this.fileName = newName;\n            }\n        }\n    }\n\n    private setDelimiter(value?) {\n        if (value !== undefined && value !== '' && value !== null) {\n            this._valueDelimiter = value;\n        } else {\n            switch (this.fileType) {\n                case CsvFileTypes.CSV:\n                    this._valueDelimiter = ',';\n                    break;\n                case CsvFileTypes.TSV:\n                case CsvFileTypes.TAB:\n                    this._valueDelimiter = '\\t';\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * This enumeration is used to configure the default value separator\n * as well as the default file extension used when performing CSV exporting.\n */\nexport enum CsvFileTypes {\n    /**\n     * Character Separated Values, default separator is \"comma\", default file extension is .csv\n     */\n    CSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tsv\n     */\n    TSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tab\n     */\n    TAB\n}\n","import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { CharSeparatedValueData } from './char-separated-value-data';\nimport { CsvFileTypes, IgxCsvExporterOptions } from './csv-exporter-options';\n\nexport interface ICsvExportEndedEventArgs {\n    csvData: string;\n}\n\n/**\n * **Ignite UI for Angular CSV Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_csv.html)\n *\n * The Ignite UI for Angular CSV Exporter service can export data in a Character Separated Values format from\n * both raw data (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private csvExportService: IgxCsvExporterService) {\n * }\n *\n * const opt: IgxCsvExporterOptions = new IgxCsvExporterOptions(\"FileName\", CsvFileTypes.CSV);\n * this.csvExportService.exportData(this.localData, opt);\n * ```\n */\n@Injectable()\nexport class IgxCsvExporterService extends IgxBaseExporter {\n    private _stringData: string;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: ICsvExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxCsvExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<ICsvExportEndedEventArgs>();\n\n    protected exportDataImplementation(data: any[], options: IgxCsvExporterOptions) {\n        const csvData = new CharSeparatedValueData(data, options.valueDelimiter);\n        this._stringData = csvData.prepareData();\n\n        this.saveFile(options);\n        this.onExportEnded.emit({ csvData: this._stringData });\n    }\n\n    private saveFile(options: IgxCsvExporterOptions) {\n        switch (options.fileType) {\n            case CsvFileTypes.CSV:\n                this.exportFile(this._stringData, options.fileName, 'text/csv;charset=utf-8;');\n                break;\n            case CsvFileTypes.TSV:\n            case CsvFileTypes.TAB:\n                this.exportFile(this._stringData, options.fileName, 'text/tab-separated-values;charset=utf-8;');\n                break;\n        }\n    }\n\n    private exportFile(data: string, fileName: string, fileType: string): void {\n        const blob = new Blob(['\\ufeff', data], { type: fileType });\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","/**\n * @hidden\n */\nexport enum ExcelFolderTypes {\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    DocPropsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    TablesExcelFolder\n}\n/**\n * @hidden\n */\nexport enum ExcelFileTypes {\n    RootRelsFile,\n    AppFile,\n    CoreFile,\n    WorkbookRelsFile,\n    ThemeFile,\n    WorksheetFile,\n    StyleFile,\n    WorkbookFile,\n    ContentTypesFile,\n    SharedStringsFile,\n    WorksheetRelsFile,\n    TablesFile\n}\n","/** @hidden */\nexport class ExcelStrings {\n    /* tslint:disable max-line-length */\n    private static XML_STRING = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\r\\n';\n    private static SHARED_STRING_RELATIONSHIP = '<Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n\n    public static getRels(): string {\n        return ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/></Relationships>';\n    }\n\n    public static getApp(): string {\n        return ExcelStrings.XML_STRING + '<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>1</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"1\" baseType=\"lpstr\"><vt:lpstr>Sheet1</vt:lpstr></vt:vector></TitlesOfParts><Company></Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>16.0300</AppVersion></Properties>';\n    }\n\n    public static getCore(): string {\n        return ExcelStrings.XML_STRING + '<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><dc:creator></dc:creator><cp:lastModifiedBy></cp:lastModifiedBy><dcterms:created xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:20Z</dcterms:created><dcterms:modified xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:26Z</dcterms:modified></cp:coreProperties>';\n    }\n\n    public static getTheme(): string {\n        return ExcelStrings.XML_STRING + '<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"44546A\"/></a:dk2><a:lt2><a:srgbClr val=\"E7E6E6\"/></a:lt2><a:accent1><a:srgbClr val=\"5B9BD5\"/></a:accent1><a:accent2><a:srgbClr val=\"ED7D31\"/></a:accent2><a:accent3><a:srgbClr val=\"A5A5A5\"/></a:accent3><a:accent4><a:srgbClr val=\"FFC000\"/></a:accent4><a:accent5><a:srgbClr val=\"4472C4\"/></a:accent5><a:accent6><a:srgbClr val=\"70AD47\"/></a:accent6><a:hlink><a:srgbClr val=\"0563C1\"/></a:hlink><a:folHlink><a:srgbClr val=\"954F72\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Calibri Light\" panose=\"020F0302020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯ Light\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿ Light\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\" panose=\"020F0502020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"110000\"/><a:satMod val=\"105000\"/><a:tint val=\"67000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"103000\"/><a:tint val=\"73000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"109000\"/><a:tint val=\"81000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:satMod val=\"103000\"/><a:lumMod val=\"102000\"/><a:tint val=\"94000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:satMod val=\"110000\"/><a:lumMod val=\"100000\"/><a:shade val=\"100000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"99000\"/><a:satMod val=\"120000\"/><a:shade val=\"78000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"6350\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"12700\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"19050\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"57150\" dist=\"19050\" dir=\"5400000\" algn=\"ctr\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"63000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:solidFill><a:schemeClr val=\"phClr\"><a:tint val=\"95000\"/><a:satMod val=\"170000\"/></a:schemeClr></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"93000\"/><a:satMod val=\"150000\"/><a:shade val=\"98000\"/><a:lumMod val=\"102000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:tint val=\"98000\"/><a:satMod val=\"130000\"/><a:shade val=\"90000\"/><a:lumMod val=\"103000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"63000\"/><a:satMod val=\"120000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults/><a:extraClrSchemeLst/><a:extLst><a:ext uri=\"{05A4C25C-085E-4340-85A3-A5531E510DB2}\"><thm15:themeFamily xmlns:thm15=\"http://schemas.microsoft.com/office/thememl/2012/main\" name=\"Office Theme\" id=\"{62F939B6-93AF-4DB8-9C6B-D6C7DFDC589F}\" vid=\"{4A3C46E8-61CC-4603-A589-7422A47A8E4A}\"/></a:ext></a:extLst></a:theme>';\n    }\n\n    public static getStyles(hasNonStringValues: boolean): string {\n        const additionalCellXF = '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" applyNumberFormat=\"1\"/>';\n        const cellXFCount = hasNonStringValues ? 2 : 1;\n        return ExcelStrings.XML_STRING + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac x16r2\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\"><fonts count=\"1\" x14ac:knownFonts=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"' + cellXFCount + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/>' + additionalCellXF + '</cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium2\" defaultPivotStyle=\"PivotStyleLight16\"/><extLst><ext uri=\"{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\"><x14:slicerStyles defaultSlicerStyle=\"SlicerStyleLight1\"/></ext><ext uri=\"{9260A510-F301-46a8-8635-F512D64BE5F5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:timelineStyles defaultTimelineStyle=\"TimeSlicerStyleLight1\"/></ext></extLst></styleSheet>';\n    }\n\n    public static getWorkbook(): string {\n        return ExcelStrings.XML_STRING + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x15\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><fileVersion appName=\"xl\" lastEdited=\"6\" lowestEdited=\"6\" rupBuild=\"14420\"/><workbookPr filterPrivacy=\"1\" defaultThemeVersion=\"164011\"/><bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"22260\" windowHeight=\"12645\"/></bookViews><sheets><sheet name=\"Sheet1\" sheetId=\"1\" r:id=\"rId1\"/></sheets><calcPr calcId=\"162913\"/><extLst><ext uri=\"{140A7094-0E35-4892-8432-C4D2E57EDEB5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:workbookPr chartTrackingRefBase=\"1\"/></ext></extLst></workbook>';\n    }\n\n    public static getWorksheetRels(): string {\n        return ExcelStrings.XML_STRING + `<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/table\" Target=\"../tables/table1.xml\"/></Relationships>`;\n    }\n\n    public static getWorkbookRels(hasSharedStrings): string {\n        let retVal = ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>';\n\n        if (hasSharedStrings) {\n            retVal += ExcelStrings.SHARED_STRING_RELATIONSHIP;\n        }\n\n        retVal += '</Relationships>';\n\n        return retVal;\n    }\n\n    public static getSheetXML(dimension: string, freezePane: string, cols: string, sheetData: string, hasTable: boolean, hasGroupedRows = false, outlineLevel = 0): string {\n        const tableParts = hasTable ? '<tableParts count=\"1\"><tablePart r:id=\"rId1\"/></tableParts>' : '';\n        const sheetOutlineProp = hasGroupedRows ? '<sheetPr><outlinePr summaryBelow=\"0\"/></sheetPr>' : '';\n        const sOutlineLevel = outlineLevel > 0 ? `outlineLevelRow=\"${outlineLevel}\"` : '';\n        // return ExcelStrings.XML_STRING +\n        //     '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\"><dimension ref=\"' + dimension + '\"/><sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">' + freezePane + '</sheetView></sheetViews><sheetFormatPr defaultRowHeight=\"15\" x14ac:dyDescent=\"0.25\"/>' + cols + sheetData + '<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>' + tableParts + '</worksheet>';\n\n        return `${ExcelStrings.XML_STRING}\n<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">\n${sheetOutlineProp}\n<dimension ref=\"${dimension}\"/>\n<sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">${freezePane}</sheetView></sheetViews>\n<sheetFormatPr defaultRowHeight=\"15\" ${sOutlineLevel} x14ac:dyDescent=\"0.25\"/>\n${cols}\n${sheetData}\n<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>\n${tableParts}</worksheet>`;\n\n    }\n\n    public static getSharedStringXML(count: number, uniqueCount: number, table: string): string {\n        return ExcelStrings.XML_STRING + '<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' + count + '\" uniqueCount=\"' + uniqueCount + '\">' + table + '</sst>';\n    }\n\n    public static getContentTypesXML(hasSharedStrings: boolean, hasTable: boolean): string {\n        let contentTypes = ExcelStrings.XML_STRING +\n        `<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\\\">\n            <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n            <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n            <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>\n            <Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>\n            <Override PartName=\"/xl/theme/theme1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.theme+xml\"/>\n            <Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>\n            <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>\n            <Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>`;\n\n        contentTypes += hasSharedStrings ?\n        `\t<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>` : '';\n\n        contentTypes += hasTable ?\n            `<Override PartName=\"/xl/tables/table1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\"/>` : '';\n        contentTypes += `</Types>`;\n\n        return contentTypes;\n    }\n\n    public static getTablesXML(dimension: string, tableColumns: string, sort: string): string {\n        return `${ExcelStrings.XML_STRING}<table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"${dimension}\" totalsRowShown=\"0\">\n    <autoFilter ref=\"${dimension}\"/>${sort}${tableColumns}<tableStyleInfo name=\"TableStyleMedium2\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\n</table>`;\n    }\n    /* tslint:enable max-line-length */\n\n    public static getExcelColumn(index: number): string {\n        // Returns the excel column name for given 0-based index\n        // For example 27 should return \"AB\"\n        let returnString = '';\n        while (index >= 0) {\n            const char = index % 26;\n            returnString = String.fromCharCode(65 + char) + returnString;\n            index = Math.floor(index / 26) - 1;\n        }\n        return returnString;\n    }\n}\n","import { IExcelFile } from './excel-interfaces';\nimport { ExcelStrings } from './excel-strings';\nimport { WorksheetData } from './worksheet-data';\n\nimport * as JSZip from 'jszip/dist/jszip';\n\n/**\n * @hidden\n */\nexport class RootRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('.rels', ExcelStrings.getRels());\n    }\n}\n\n/**\n * @hidden\n */\nexport class AppFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('app.xml', ExcelStrings.getApp());\n    }\n}\n\n/**\n * @hidden\n */\nexport class CoreFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('core.xml', ExcelStrings.getCore());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const hasSharedStrings = worksheetData.isEmpty === false;\n        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));\n    }\n}\n\n/**\n * @hidden\n */\nexport class ThemeFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('theme1.xml', ExcelStrings.getTheme());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetFile implements IExcelFile {\n    private static MIN_WIDTH = 8.34;\n\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const sheetData = [];\n        const cols = [];\n        let dimension: string;\n        const dictionary = worksheetData.dataDictionary;\n        let freezePane = '';\n        let maxOutlineLevel = 0;\n\n        if (worksheetData.isEmpty) {\n            sheetData.push('<sheetData/>');\n            dimension = 'A1';\n        } else {\n            sheetData.push('<sheetData>');\n            const height =  worksheetData.options.rowHeight;\n            const rowHeight = height ? ' ht=\"' + height + '\" customHeight=\"1\"' : '';\n\n            sheetData.push(`<row r=\"1\"${rowHeight}>`);\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const column = ExcelStrings.getExcelColumn(i) + 1;\n                const value = dictionary.saveValue(worksheetData.keys[i], i, true);\n                sheetData.push(`<c r=\"${column}\" t=\"s\"><v>${value}</v></c>`);\n            }\n            sheetData.push('</row>');\n\n            for (let i = 1; i < worksheetData.rowCount; i++) {\n                if (!worksheetData.isTreeGridData) {\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}>`);\n                } else {\n                    const rowData = worksheetData.data[i - 1].originalRowData;\n                    const sCollapsed = (!rowData.expanded) ? '' : (rowData.expanded === true) ? '' : ` collapsed=\"1\"`;\n                    const sHidden = (rowData.parent && this.hasCollapsedParent(rowData)) ? ` hidden=\"1\"` : '';\n                    const rowOutlineLevel = rowData.level ? rowData.level : 0;\n                    const sOutlineLevel = rowOutlineLevel > 0 ? ` outlineLevel=\"${rowOutlineLevel}\"` : '';\n                    maxOutlineLevel = maxOutlineLevel < rowOutlineLevel ? rowOutlineLevel : maxOutlineLevel;\n\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}${sOutlineLevel}${sCollapsed}${sHidden}>`);\n                }\n                for (let j = 0; j < worksheetData.columnCount; j++) {\n                    const cellData = WorksheetFile.getCellData(worksheetData, i, j);\n                    sheetData.push(cellData);\n                }\n                sheetData.push('</row>');\n            }\n            sheetData.push('</sheetData>');\n            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;\n\n            cols.push('<cols>');\n\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const width = dictionary.columnWidths[i];\n                // Use the width provided in the options if it exists\n                const widthInTwips = worksheetData.options.columnWidth ?\n                                    worksheetData.options.columnWidth :\n                                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);\n\n                cols.push(`<col min=\"${(i + 1)}\" max=\"${(i + 1)}\" width=\"${widthInTwips}\" customWidth=\"1\"/>`);\n            }\n\n            cols.push('</cols>');\n\n            if (worksheetData.indexOfLastPinnedColumn !== -1 &&\n                !worksheetData.options.ignorePinning &&\n                !worksheetData.options.ignoreColumnsOrder) {\n                const frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;\n                const firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';\n                freezePane = `<pane xSplit=\"${frozenColumnCount}\" topLeftCell=\"${firstCell}\" activePane=\"topRight\" state=\"frozen\"/>`;\n            }\n        }\n        const hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;\n\n        folder.file('sheet1.xml',\n                    ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable,\n                    worksheetData.isTreeGridData, maxOutlineLevel));\n    }\n\n    private hasCollapsedParent(rowData) {\n        let result = !rowData.parent.expanded;\n        while (rowData.parent) {\n            result = result || !rowData.parent.expanded;\n            rowData = rowData.parent;\n        }\n\n        return result;\n    }\n    /* tslint:disable member-ordering */\n    private static getCellData(worksheetData: WorksheetData, row: number, column: number): string {\n        const dictionary = worksheetData.dataDictionary;\n        const columnName = ExcelStrings.getExcelColumn(column) + (row + 1);\n        const columnHeader = worksheetData.keys[column];\n\n        const rowData = worksheetData.data[row - 1].rowData;\n\n        const cellValue = worksheetData.isSpecialData ? rowData : rowData[columnHeader];\n\n        if (cellValue === undefined || cellValue === null) {\n            return `<c r=\"${columnName}\" s=\"1\"/>`;\n        } else {\n            const savedValue = dictionary.saveValue(cellValue, column, false);\n            const isSavedAsString = savedValue !== -1;\n\n            const value = isSavedAsString ? savedValue : cellValue;\n            const type = isSavedAsString ? ` t=\"s\"` : '';\n            const format = isSavedAsString ? '' : ` s=\"1\"`;\n\n            return `<c r=\"${columnName}\"${type}${format}><v>${value}</v></c>`;\n        }\n    }\n    /* tslint:enable member-ordering */\n}\n\n/**\n * @hidden\n */\nexport class StyleFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('workbook.xml', ExcelStrings.getWorkbook());\n    }\n}\n\n/**\n * @hidden\n */\nexport class ContentTypesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));\n    }\n}\n\n/**\n * @hidden\n */\nexport class SharedStringsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const dict = worksheetData.dataDictionary;\n        const sortedValues = dict.getKeys();\n        const sharedStrings = new Array<string>(sortedValues.length);\n\n        for (const value of sortedValues) {\n            sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';\n        }\n\n        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(\n                        dict.stringsCount,\n                        sortedValues.length,\n                        sharedStrings.join(''))\n                    );\n    }\n}\n\n/**\n * @hidden\n */\nexport class TablesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const columnCount = worksheetData.columnCount;\n        const lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;\n        const dimension = 'A1:' + lastColumn;\n        const values = worksheetData.keys;\n        let sortString = '';\n\n        let tableColumns = '<tableColumns count=\"' + columnCount + '\">';\n        for (let i = 0; i < columnCount; i++) {\n            const value =  values[i];\n            tableColumns += '<tableColumn id=\"' + (i + 1) + '\" name=\"' + value + '\"/>';\n        }\n\n        tableColumns += '</tableColumns>';\n\n        if (worksheetData.sort) {\n            const sortingExpression = worksheetData.sort;\n            const sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));\n            const dir = sortingExpression.dir - 1;\n            sortString = `<sortState ref=\"A2:${lastColumn}\"><sortCondition descending=\"${dir}\" ref=\"${sc}1:${sc}15\"/></sortState>`;\n        }\n\n        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport { IExcelFolder } from './excel-interfaces';\nimport { WorksheetData } from './worksheet-data';\n\n/** @hidden */\nexport class RootExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ContentTypesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [\n            ExcelFolderTypes.RootRelsExcelFolder,\n            ExcelFolderTypes.DocPropsExcelFolder,\n            ExcelFolderTypes.XLExcelFolder\n        ];\n    }\n}\n\n/** @hidden */\nexport class RootRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.RootRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class DocPropsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'docProps';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [\n            ExcelFileTypes.AppFile,\n            ExcelFileTypes.CoreFile\n        ];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class XLExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'xl';\n    }\n\n    childFiles(data: WorksheetData) {\n        const retVal = [\n            ExcelFileTypes.StyleFile,\n            ExcelFileTypes.WorkbookFile\n        ];\n\n        if (!data.isEmpty) {\n            retVal.push(ExcelFileTypes.SharedStringsFile);\n        }\n\n        return retVal;\n    }\n\n    childFolders(data: WorksheetData) {\n        const retVal = [\n            ExcelFolderTypes.XLRelsExcelFolder,\n            ExcelFolderTypes.ThemeExcelFolder,\n            ExcelFolderTypes.WorksheetsExcelFolder\n        ];\n\n        if (!data.isEmpty && data.options.exportAsTable) {\n            retVal.push(ExcelFolderTypes.TablesExcelFolder);\n        }\n\n        return retVal;\n    }\n}\n\n/** @hidden */\nexport class XLRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorkbookRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class ThemeExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'theme';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ThemeFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'worksheets';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return data.isEmpty || !data.options.exportAsTable ? [] : [ExcelFolderTypes.WorksheetsRelsExcelFolder];\n    }\n}\n\n/** @hidden */\nexport class TablesExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return 'tables';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.TablesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport {\n    AppFile,\n    ContentTypesFile,\n    CoreFile,\n    RootRelsFile,\n    SharedStringsFile,\n    StyleFile,\n    TablesFile,\n    ThemeFile,\n    WorkbookFile,\n    WorkbookRelsFile,\n    WorksheetFile,\n    WorksheetRelsFile\n} from './excel-files';\n\nimport {\n    DocPropsExcelFolder,\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    TablesExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder\n} from './excel-folders';\n\nimport {\n    IExcelFile,\n    IExcelFolder\n} from './excel-interfaces';\n\n/** @hidden */\nexport class ExcelElementsFactory {\n\n    public static getExcelFolder(type: ExcelFolderTypes): IExcelFolder {\n        switch (type) {\n            case ExcelFolderTypes.RootExcelFolder:\n                return new RootExcelFolder();\n            case ExcelFolderTypes.RootRelsExcelFolder:\n                return new RootRelsExcelFolder();\n            case ExcelFolderTypes.DocPropsExcelFolder:\n                return new DocPropsExcelFolder();\n            case ExcelFolderTypes.XLExcelFolder:\n                return new XLExcelFolder();\n            case ExcelFolderTypes.XLRelsExcelFolder:\n                return new XLRelsExcelFolder();\n            case ExcelFolderTypes.ThemeExcelFolder:\n                return new ThemeExcelFolder();\n            case ExcelFolderTypes.WorksheetsExcelFolder:\n                return  new WorksheetsExcelFolder();\n            case ExcelFolderTypes.WorksheetsRelsExcelFolder:\n                return new WorksheetsRelsExcelFolder();\n            case ExcelFolderTypes.TablesExcelFolder:\n                return new TablesExcelFolder();\n            default:\n                throw new Error('Unknown excel folder type!');\n        }\n    }\n\n    public static getExcelFile(type: ExcelFileTypes): IExcelFile {\n        switch (type) {\n            case ExcelFileTypes.RootRelsFile:\n                return  new RootRelsFile();\n            case ExcelFileTypes.AppFile:\n                return  new AppFile();\n            case ExcelFileTypes.CoreFile:\n                return new CoreFile();\n            case ExcelFileTypes.WorkbookRelsFile:\n                return new WorkbookRelsFile();\n            case ExcelFileTypes.ThemeFile:\n                return new ThemeFile();\n            case ExcelFileTypes.WorksheetFile:\n                return new WorksheetFile();\n            case ExcelFileTypes.StyleFile:\n                return new StyleFile();\n            case ExcelFileTypes.WorkbookFile:\n                return new WorkbookFile();\n            case ExcelFileTypes.ContentTypesFile:\n                return new ContentTypesFile();\n            case ExcelFileTypes.SharedStringsFile:\n                return new SharedStringsFile();\n            case ExcelFileTypes.WorksheetRelsFile:\n                return new WorksheetRelsFile();\n            case ExcelFileTypes.TablesFile:\n                return new TablesFile();\n            default:\n                throw Error('Unknown excel file type!');\n        }\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/** @hidden */\nexport class WorksheetDataDictionary {\n    private static DEFAULT_FONT = '11pt Calibri';\n    private static TEXT_PADDING = 5;\n\n    private _dictionary: any;\n    private _widthsDictionary: any;\n\n    private _sortedKeysByValue: string[];\n    private _sortedKeysByValueAreValid: boolean;\n\n    private _keys: string[];\n    private _keysAreValid: boolean;\n\n    private _counter: number;\n    private _calculateColumnWidth: boolean;\n    private _columnWidths: number[];\n    private _context: any;\n\n    private _columnTypeInfo: boolean[];\n    public hasNonStringValues = false;\n\n    public stringsCount: number;\n\n    constructor(columnCount: number, columnWidth: number) {\n        this._dictionary = {};\n        this._widthsDictionary = {};\n        this._counter = 0;\n        this.dirtyKeyCollections();\n\n        this._calculateColumnWidth = !columnWidth;\n        this._columnWidths = new Array<number>(columnCount);\n        this._columnTypeInfo = new Array<boolean>(columnCount);\n\n        if (!this._calculateColumnWidth) {\n            this._columnWidths.fill(columnWidth);\n        }\n\n        this.stringsCount = 0;\n    }\n\n    public get columnWidths() {\n        return this._columnWidths;\n    }\n\n    public saveValue(value: any, column: number, isHeader: boolean): number {\n        if (this._columnTypeInfo[column] === undefined && isHeader === false) {\n            this._columnTypeInfo[column] = typeof value === 'string' ||\n                                            typeof value === 'boolean' ||\n                                            value instanceof Date;\n        }\n\n        let sanitizedValue = '';\n        const isSavedAsString = this._columnTypeInfo[column] || isHeader;\n\n        if (isSavedAsString) {\n            sanitizedValue = this.sanitizeValue(value);\n\n            if (this._dictionary[sanitizedValue] === undefined) {\n                this._dictionary[sanitizedValue] = this._counter++;\n                this.dirtyKeyCollections();\n            }\n\n            this.stringsCount ++;\n        } else {\n            this.hasNonStringValues = true;\n        }\n\n        if (this._calculateColumnWidth) {\n            const width = this.getTextWidth(value);\n            const maxWidth = Math.max(this._columnWidths[column] || 0, width);\n            this._columnWidths[column] = maxWidth;\n        }\n\n        return isSavedAsString ? this.getSanitizedValue(sanitizedValue) : -1;\n    }\n\n    public getValue(value: string): number {\n        return this.getSanitizedValue(this.sanitizeValue(value));\n    }\n\n    public getSanitizedValue(sanitizedValue: string): number {\n        return this._dictionary[sanitizedValue];\n    }\n\n    public getKeys(): string[] {\n        if (!this._keysAreValid) {\n            this._keys = Object.keys(this._dictionary);\n            this._keysAreValid = true;\n        }\n\n        return this._keys;\n    }\n\n    private getTextWidth(value: any): number {\n        if (this._widthsDictionary[value] === undefined) {\n            const context = this.getContext();\n            const metrics = context.measureText(value);\n            this._widthsDictionary[value] = metrics.width + WorksheetDataDictionary.TEXT_PADDING;\n        }\n\n        return this._widthsDictionary[value];\n    }\n\n    private getContext(): any {\n        if (!this._context) {\n            const canvas = document.createElement('canvas');\n            this._context = canvas.getContext('2d');\n            this._context.font = WorksheetDataDictionary.DEFAULT_FONT;\n        }\n\n        return this._context;\n    }\n\n    private sanitizeValue(value: any): string {\n        if (ExportUtilities.hasValue(value) === false) {\n            return '';\n        } else {\n            const stringValue = String(value);\n            return stringValue.replace(/&/g, '&amp;')\n                            .replace(/</g, '&lt;')\n                            .replace(/>/g, '&gt;')\n                            .replace(/\"/g, '&quot;')\n                            .replace(/'/g, '&apos;');\n        }\n    }\n\n    private dirtyKeyCollections(): void {\n        this._keysAreValid = false;\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { WorksheetDataDictionary } from './worksheet-data-dictionary';\n\n/** @hidden */\nexport class WorksheetData {\n    private _columnCount: number;\n    private _rowCount: number;\n    private _dataDictionary: WorksheetDataDictionary;\n    private _keys: string[];\n    private _isSpecialData: boolean;\n\n    constructor(private _data: any[], public options: IgxExcelExporterOptions, public indexOfLastPinnedColumn,\n                public sort: any, public isTreeGridData = false) {\n        this.initializeData();\n    }\n\n    public get data() {\n        return this._data;\n    }\n\n    public get columnCount(): number {\n        return this._columnCount;\n    }\n\n    public get rowCount(): number {\n        return this._rowCount;\n    }\n\n    public get isEmpty() {\n        return !this.rowCount || !this._columnCount;\n    }\n\n    public get keys(): string[] {\n        return this._keys;\n    }\n\n    public get isSpecialData(): boolean {\n        return this._isSpecialData;\n    }\n\n    public get dataDictionary() {\n        return this._dataDictionary;\n    }\n\n    private initializeData() {\n        if (!this._data || this._data.length === 0) {\n            return;\n        }\n\n        const actualData = this._data.map((item) => item.rowData);\n\n        this._keys = ExportUtilities.getKeysFromData(actualData);\n        if (this._keys.length === 0) {\n            return;\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(actualData);\n\n        this._columnCount = this._keys.length;\n        this._rowCount = this._data.length + 1;\n\n        this._dataDictionary = new WorksheetDataDictionary(this._columnCount, this.options.columnWidth);\n    }\n}\n","import * as JSZip from 'jszip/dist/jszip';\n\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { ExcelElementsFactory } from './excel-elements-factory';\nimport { ExcelFolderTypes } from './excel-enums';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { IExcelFolder } from './excel-interfaces';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { WorksheetData } from './worksheet-data';\n\nexport interface IExcelExportEndedEventArgs {\n    xlsx: JSZip;\n}\n\n/**\n * **Ignite UI for Angular Excel Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_excel.html)\n *\n * The Ignite UI for Angular Excel Exporter service can export data in MicrosoftÂ® ExcelÂ® format from both raw data\n * (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private excelExportService: IgxExcelExporterService) {\n * }\n *\n * this.excelExportService.exportData(this.localData, new IgxExcelExporterOptions(\"FileName\"));\n * ```\n */\n@Injectable()\nexport class IgxExcelExporterService extends IgxBaseExporter {\n\n    private static ZIP_OPTIONS = { compression: 'DEFLATE', type: 'base64' };\n    private _xlsx: JSZip;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxExcelExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<IExcelExportEndedEventArgs>();\n\n    private static populateFolder(folder: IExcelFolder, zip: JSZip, worksheetData: WorksheetData): any {\n        for (const childFolder of folder.childFolders(worksheetData)) {\n            const folderIntance = ExcelElementsFactory.getExcelFolder(childFolder);\n            const zipFolder = zip.folder(folderIntance.folderName);\n            IgxExcelExporterService.populateFolder(folderIntance, zipFolder, worksheetData);\n        }\n\n        for (const childFile of folder.childFiles(worksheetData)) {\n            const fileInstance = ExcelElementsFactory.getExcelFile(childFile);\n            fileInstance.writeElement(zip, worksheetData);\n        }\n    }\n\n    protected exportDataImplementation(data: any[], options: IgxExcelExporterOptions): void {\n        if (this._isTreeGrid) {\n            let maxLevel = 0;\n            data.forEach((r) => {\n                maxLevel = Math.max(maxLevel, r.originalRowData.level);\n            });\n            if (maxLevel > 7) {\n                throw Error('Can create an outline of up to eight levels!');\n            }\n        }\n\n        const worksheetData = new WorksheetData(data, options, this._indexOfLastPinnedColumn, this._sort, this._isTreeGrid);\n        this._xlsx = new JSZip();\n\n        const rootFolder = ExcelElementsFactory.getExcelFolder(ExcelFolderTypes.RootExcelFolder);\n        IgxExcelExporterService.populateFolder(rootFolder, this._xlsx, worksheetData);\n\n        this._xlsx.generateAsync(IgxExcelExporterService.ZIP_OPTIONS).then((result) => {\n            this.saveFile(result, options.fileName);\n\n            this.onExportEnded.emit({ xlsx: this._xlsx });\n        });\n    }\n\n    private saveFile(data: string, fileName: string): void {\n        const blob = new Blob([ExportUtilities.stringToArrayBuffer(atob(data))], {\n            type: ''\n        });\n\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the Excel exporting process.\n */\nexport class IgxExcelExporterOptions extends IgxExporterOptionsBase {\n    private _columnWidth: number;\n    private _rowHeight: number;\n\n    /**\n     * Specifies if column pinning should be ignored. If ignoreColumnsOrder is set to true,\n     * this option will always be considered as set to true.\n     * ```typescript\n     * let ignorePinning = this.exportOptions.ignorePinning;\n     * this.exportOptions.ignorePinning = true;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public ignorePinning = false;\n\n    /**\n     * Specifies whether the exported data should be formatted as Excel table. (True by default)\n     * ```typescript\n     * let exportAsTable = this.exportOptions.exportAsTable;\n     * this.exportOptions.exportAsTable = false;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public exportAsTable = true;\n\n    constructor(fileName: string) {\n        super(fileName, '.xlsx');\n    }\n\n    /**\n     * Gets the width of the columns in the exported excel file.\n     * ```typescript\n     * let width = this.exportOptions.columnWidth;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get columnWidth(): number {\n        return this._columnWidth;\n    }\n\n    /**\n     * Sets the width of the columns in the exported excel file. If left unspecified or 0,\n     * the width of the largest string in the column will be used.\n     * ```typescript\n     * this.exportOptions.columnWidth = 55;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set columnWidth(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for column width!');\n        }\n\n        this._columnWidth = value;\n    }\n\n    /**\n     * Gets the height of the rows in the exported excel file.\n     * ```typescript\n     * let height = this.exportOptions.rowHeight;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get rowHeight(): number {\n        return this._rowHeight;\n    }\n\n    /**\n     * Sets the height of the rows in the exported excel file. If left unspecified or 0,\n     * the default height of the excel rows will be used.\n     * ```typescript\n     * this.exportOptions.rowHeight = 25;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set rowHeight(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for row height!');\n        }\n\n        this._rowHeight = value;\n    }\n}\n","import { IPositionStrategy } from './position/IPositionStrategy';\n\nimport { IScrollStrategy } from './scroll';\nimport { AnimationReferenceMetadata, AnimationPlayer } from '@angular/animations';\nimport { ComponentRef, ElementRef, NgZone } from '@angular/core';\nimport { IgxOverlayOutletDirective } from '../../directives/toggle/toggle.directive';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, cloneValue } from '../../core/utils';\n\nexport enum HorizontalAlignment {\n    Left = -1,\n    Center = -0.5,\n    Right = 0\n}\n\nexport enum VerticalAlignment {\n    Top = -1,\n    Middle = -0.5,\n    Bottom = 0\n}\n\nexport class Point {\n    constructor(public x: number, public y: number) { }\n}\n\nexport interface PositionSettings {\n    /** Attaching target for the component to show */\n    target?: Point | HTMLElement;\n    /** Direction in which the component should show */\n    horizontalDirection?: HorizontalAlignment;\n    /** Direction in which the component should show */\n    verticalDirection?: VerticalAlignment;\n    /** Target's starting point */\n    horizontalStartPoint?: HorizontalAlignment;\n    /** Target's starting point */\n    verticalStartPoint?: VerticalAlignment;\n    /** Animation applied while overlay opens */\n    openAnimation?: AnimationReferenceMetadata;\n    /** Animation applied while overlay closes */\n    closeAnimation?: AnimationReferenceMetadata;\n    /** The size up to which element may shrink when shown in elastic position strategy */\n    minSize?: Size;\n}\n\nexport interface OverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set if the overlay should be in modal mode */\n    modal?: boolean;\n    /** Set if the overlay should closed on outside click */\n    closeOnOutsideClick?: boolean;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * @hidden @internal\n     * Exclude the position strategy target for outside clicks\n     */\n    excludePositionTarget?: boolean;\n}\n\nexport interface OverlayEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Available when `Type<T>` is provided to the `attach()` method and allows access to the created Component instance */\n    componentRef?: ComponentRef<{}>;\n}\n\nexport interface OverlayCancelableEventArgs extends OverlayEventArgs, CancelableEventArgs {\n}\n\nexport interface OverlayClosingEventArgs extends OverlayEventArgs, CancelableBrowserEventArgs {\n}\n\nexport interface OverlayAnimationEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Animation player that will play the animation */\n    animationPlayer: AnimationPlayer;\n    /** Type of animation to be played. It should be either 'open' or 'close' */\n    animationType: 'open' | 'close';\n}\n\nexport interface Size {\n    /** Gets or sets the horizontal component of Size */\n    width: number;\n\n    /** Gets or sets the vertical component of Size */\n    height: number;\n}\n\n/**\n * @hidden\n * Calculates the rectangle of target for provided overlay settings. Defaults to 0,0,0,0 rectangle\n * if no target is provided\n * @param settings Overlay settings for which to calculate target rectangle\n */\nexport function getTargetRect(settings: PositionSettings): ClientRect {\n    let targetRect: ClientRect = {\n        bottom: 0,\n        height: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n        width: 0\n    };\n\n    if (settings.target instanceof HTMLElement) {\n        targetRect = (settings.target as HTMLElement).getBoundingClientRect();\n    } else if (settings.target instanceof Point) {\n        const targetPoint = settings.target as Point;\n        targetRect = {\n            bottom: targetPoint.y,\n            height: 0,\n            left: targetPoint.x,\n            right: targetPoint.x,\n            top: targetPoint.y,\n            width: 0\n        };\n    }\n\n    return targetRect;\n}\n\n/** @hidden */\nexport interface OverlayInfo {\n    id?: string;\n    elementRef?: ElementRef;\n    componentRef?: ComponentRef<{}>;\n    settings?: OverlaySettings;\n    initialSize?: Size;\n    hook?: HTMLElement;\n    openAnimationPlayer?: AnimationPlayer;\n    closeAnimationPlayer?: AnimationPlayer;\n    openAnimationInnerPlayer?: any;\n    closeAnimationInnerPlayer?: any;\n    ngZone: NgZone;\n}\n\n/** @hidden @internal */\nexport function getViewportRect(document: Document): ClientRect {\n    const width = document.documentElement.clientWidth;\n    const height = document.documentElement.clientHeight;\n    const scrollPosition = getViewportScrollPosition();\n\n    return {\n        top: scrollPosition.y,\n        left: scrollPosition.x,\n        right: scrollPosition.x + width,\n        bottom: scrollPosition.y + height,\n        width: width,\n        height: height,\n    };\n}\n\n/** @hidden @internal */\nexport function getViewportScrollPosition(): Point {\n    const documentElement = document.documentElement;\n    const documentRect = documentElement.getBoundingClientRect();\n\n    const horizontalScrollPosition = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n    const verticalScrollPosition = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n\n    return new Point(horizontalScrollPosition, verticalScrollPosition);\n}\n\n/** @hidden @internal*/\nexport function cloneInstance(object) {\n    const clonedObj = Object.assign(Object.create(Object.getPrototypeOf(object)), object);\n    clonedObj.settings = cloneValue(clonedObj.settings);\n    return clonedObj;\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport { PositionSettings, HorizontalAlignment, VerticalAlignment, Size, cloneInstance } from './../utilities';\nimport { fadeIn, fadeOut } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    private _defaultSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Center,\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut,\n        minSize: { width: 0, height: 0 }\n    };\n\n    /** @inheritdoc */\n    public settings: PositionSettings;\n\n    constructor(settings?: PositionSettings) {\n        this.settings = Object.assign({}, this._defaultSettings, settings);\n    }\n\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex');\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                contentElement.parentElement.style.justifyContent = 'flex-start';\n                break;\n            case HorizontalAlignment.Center:\n                contentElement.parentElement.style.justifyContent = 'center';\n                break;\n            case HorizontalAlignment.Right:\n                contentElement.parentElement.style.justifyContent = 'flex-end';\n                break;\n            default:\n                break;\n        }\n\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                contentElement.parentElement.style.alignItems = 'flex-start';\n                break;\n            case VerticalAlignment.Middle:\n                contentElement.parentElement.style.alignItems = 'center';\n                break;\n            case VerticalAlignment.Bottom:\n                contentElement.parentElement.style.alignItems = 'flex-end';\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @inheritdoc */\n    clone(): IPositionStrategy {\n        return cloneInstance(this);\n    }\n}\n\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport abstract class ScrollStrategy implements IScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) { }\n    /** @inheritdoc */\n    abstract initialize(document: Document, overlayService: IgxOverlayService, id: string);\n\n    /** @inheritdoc */\n    abstract attach(): void;\n\n    /** @inheritdoc */\n    abstract detach(): void;\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Empty scroll strategy. Does nothing.\n */\nexport class NoOpScrollStrategy extends ScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) { }\n\n    /** @inheritdoc */\n    attach(): void { }\n\n    /** @inheritdoc */\n    detach(): void { }\n}\n","import { isDevMode } from '@angular/core';\n\n/**\n * @hidden\n */\nexport function DeprecateMethod(message: string): MethodDecorator {\n    let isMessageShown = false;\n\n    return function (target: any, key: string, descriptor: PropertyDescriptor) {\n        if (descriptor && descriptor.value) {\n            const originalMethod = descriptor.value;\n\n            descriptor.value = function () {\n                const targetName = typeof target === 'function' ? target.name : target.constructor.name;\n                isMessageShown = showMessage(`${targetName}.${key}: ${message}`, isMessageShown);\n\n                return originalMethod.call(this, arguments);\n            };\n\n            return descriptor;\n        }\n    };\n}\n\n/**\n * @hidden\n */\nexport function DeprecateProperty(message: string): PropertyDecorator {\n    return function(target: any, key: string) {\n        let isMessageShown = false;\n        const messageToDisplay = `${target.constructor.name}.${key}: ${message}`;\n\n        // if the target already has the property defined\n        const originalDescriptor = Object.getOwnPropertyDescriptor(target, key);\n        if (originalDescriptor) {\n            let getter, setter;\n            getter = originalDescriptor.get;\n            setter = originalDescriptor.set;\n\n            if (getter) {\n                originalDescriptor.get = function() {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    return getter.call(this);\n                };\n            }\n\n            if (setter) {\n                originalDescriptor.set = function (value) {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    setter.call(this, value);\n                };\n            }\n\n            return originalDescriptor;\n        }\n\n        // the target doesn't contain a descriptor for that property, so create one\n        // use backing field to set/get the value of the property to ensure there won't be infinite recursive calls\n        const newKey = generateUniqueKey(target, key);\n        Object.defineProperty(target, key, {\n            configurable: true,\n            enumerable: true,\n            set: function(value) {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                this[newKey] = value;\n            },\n            get: function() {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                return this[newKey];\n            }\n        });\n    };\n}\n\n/**\n * @hidden\n */\nfunction generateUniqueKey(target: any, key: string): string {\n    let newKey = '_' + key;\n    while (target.hasOwnProperty(newKey)) {\n        newKey = '_' + newKey;\n    }\n\n    return newKey;\n}\n\n/**\n * @hidden\n */\nexport function showMessage(message: string, isMessageShown: boolean): boolean {\n    if (!isMessageShown && isDevMode()) {\n        console.warn(message);\n    }\n\n    return true;\n}\n","import { DOCUMENT } from '@angular/common';\nimport { GlobalPositionStrategy } from './position/global-position-strategy';\nimport { NoOpScrollStrategy } from './scroll/NoOpScrollStrategy';\nimport {\n    OverlaySettings,\n    OverlayEventArgs,\n    OverlayInfo,\n    OverlayAnimationEventArgs,\n    OverlayCancelableEventArgs,\n    OverlayClosingEventArgs\n} from './utilities';\n\nimport {\n    ApplicationRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injectable,\n    Injector,\n    Type,\n    OnDestroy,\n    NgModuleRef,\n    NgZone\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, AnimationMetadataType, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { fromEvent, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { IAnimationParams } from '../../animations/main';\nimport { showMessage } from '../../core/deprecateDecorators';\n\nlet warningShown = false;\n\n/**\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay_main.html)\n * The overlay service allows users to show components on overlay div above all other elements in the page.\n */\n@Injectable({ providedIn: 'root' })\nexport class IgxOverlayService implements OnDestroy {\n    private _componentId = 0;\n    private _overlayInfos: OverlayInfo[] = [];\n    private _overlayElement: HTMLElement;\n    private _document: Document;\n    private destroy$ = new Subject<boolean>();\n\n    private _defaultSettings: OverlaySettings = {\n        positionStrategy: new GlobalPositionStrategy(),\n        scrollStrategy: new NoOpScrollStrategy(),\n        modal: true,\n        closeOnOutsideClick: true\n    };\n\n    /**\n     * Emitted before the component is opened.\n     * ```typescript\n     * onOpening(event: OverlayCancelableEventArgs){\n     *     const onOpening = event;\n     * }\n     * ```\n     */\n    public onOpening = new EventEmitter<OverlayCancelableEventArgs>();\n\n    /**\n     * Emitted after the component is opened and all animations are finished.\n     * ```typescript\n     * onOpened(event: OverlayEventArgs){\n     *     const onOpened = event;\n     * }\n     * ```\n     */\n    public onOpened = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before the component is closed.\n     * ```typescript\n     * onClosing(event: OverlayCancelableEventArgs){\n     *     const onClosing = event;\n     * }\n     * ```\n     */\n    public onClosing = new EventEmitter<OverlayClosingEventArgs>();\n\n    /**\n     * Emitted after the component is closed and all animations are finished.\n     * ```typescript\n     * onClosed(event: OverlayEventArgs){\n     *     const onClosed = event;\n     * }\n     * ```\n     */\n    public onClosed = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before animation is started\n     * ```typescript\n     * onAnimation(event: OverlayAnimationEventArgs){\n     *     const onAnimation = event;\n     * }\n     * ```\n     */\n    public onAnimation = new EventEmitter<OverlayAnimationEventArgs>();\n\n    constructor(\n        private _factoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private builder: AnimationBuilder,\n        @Inject(DOCUMENT) private document: any,\n        private _zone: NgZone) {\n        this._document = <Document>this.document;\n    }\n\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component ElementRef to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(element: ElementRef, settings?: OverlaySettings): string;\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @param moduleRef Optional reference to the NgModule that can resolve the component's factory\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(component: Type<any>, settings?: OverlaySettings, moduleRef?: NgModuleRef<any>): string;\n    attach(component: ElementRef | Type<any>, settings?: OverlaySettings, moduleRef?: NgModuleRef<any>): string {\n        let info: OverlayInfo;\n        info = this.getOverlayInfo(component, moduleRef);\n\n        //  if there is no info most probably wrong type component was provided and we just go out\n        if (!info) {\n            return null;\n        }\n\n        info.id = (this._componentId++).toString();\n        settings = Object.assign({}, this._defaultSettings, settings);\n        info.settings = settings;\n        this._overlayInfos.push(info);\n        return info.id;\n    }\n\n    /**\n     * Shows the overlay for provided id.\n     * @param id Id to show overlay for\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     */\n    show(id: string, settings?: OverlaySettings): string;\n    /**\n     * Shows the provided component.\n     * @param component ElementRef or Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     * ```typescript\n     * this.overlay.show(element, settings);\n     * ```\n     * @deprecated Use `attach(component)` to obtain an Id. Then `show(id, settings?)` with provided Id.\n     */\n    // tslint:disable-next-line:unified-signatures\n    show(component: ElementRef | Type<any>, settings?: OverlaySettings): string;\n    show(compOrId: string | ElementRef | Type<any>, settings?: OverlaySettings): string {\n        let info: OverlayInfo;\n        let id: string;\n        if (typeof compOrId === 'string') {\n            id = compOrId;\n            info = this.getOverlayById(compOrId);\n            if (!info) {\n                console.warn('igxOverlay.show was called with wrong id: ' + compOrId);\n                return null;\n            }\n        } else {\n            warningShown = showMessage(\n                '`show(component, settings?)` overload is deprecated. Use `attach(component)` to obtain an Id.' +\n                'Then `show(id, settings?)` with provided Id.',\n                warningShown);\n            id = (this._componentId++).toString();\n            info = this.getOverlayInfo(compOrId);\n\n            //  if there is no info most probably wrong type component was provided and we just go out\n            if (!info) {\n                return;\n            }\n\n            info.id = id;\n        }\n\n        settings = Object.assign({}, this._defaultSettings, info.settings, settings);\n        info.settings = settings;\n\n        this._show(info);\n        return id;\n    }\n\n    /**\n     * Hides the component with the ID provided as a parameter.\n     * ```typescript\n     * this.overlay.hide(id);\n     * ```\n     */\n    hide(id: string) {\n        this._hide(id);\n    }\n\n    /**\n     * Hides all the components and the overlay.\n     * ```typescript\n     * this.overlay.hideAll();\n     * ```\n     */\n    hideAll() {\n        // since overlays are removed on animation done, que all hides\n        for (let i = this._overlayInfos.length; i--;) {\n            this.hide(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     * Repositions the component with ID provided as a parameter.\n     * ```typescript\n     * this.overlay.reposition(id);\n     * ```\n     */\n    reposition(id: string) {\n        const overlayInfo = this.getOverlayById(id);\n        if (!overlayInfo || !overlayInfo.settings) {\n            console.error('Wrong id provided in overlay.reposition method. Id: ' + id);\n            return;\n        }\n\n        const contentElement = overlayInfo.elementRef.nativeElement.parentElement;\n        const contentElementRect = contentElement.getBoundingClientRect();\n        overlayInfo.settings.positionStrategy.position(\n            contentElement,\n            {\n                width: contentElementRect.width,\n                height: contentElementRect.height\n            },\n            this._document,\n            false);\n    }\n\n    private _show(info: OverlayInfo) {\n        const eventArgs: OverlayCancelableEventArgs = { id: info.id, componentRef: info.componentRef, cancel: false };\n        this.onOpening.emit(eventArgs);\n        if (eventArgs.cancel) {\n            if (info.componentRef) {\n                this._appRef.detachView(info.componentRef.hostView);\n                info.componentRef.destroy();\n            }\n\n            return;\n        }\n\n        //  if there is no close animation player, or there is one but it is not started yet we are in clear\n        //  opening. Otherwise, if there is close animation player playing animation now we should not setup\n        //  overlay this is already done\n        if (!info.closeAnimationPlayer || (info.closeAnimationPlayer && !info.closeAnimationPlayer.hasStarted())) {\n            const elementRect = info.elementRef.nativeElement.getBoundingClientRect();\n            info.initialSize = { width: elementRect.width, height: elementRect.height };\n            info.hook = this.placeElementHook(info.elementRef.nativeElement);\n\n            this.moveElementToOverlay(info);\n            if (info.componentRef) {\n                info.componentRef.changeDetectorRef.detectChanges();\n            }\n            this.updateSize(info);\n            if (this._overlayInfos.indexOf(info) === -1) {\n                this._overlayInfos.push(info);\n            }\n\n            info.settings.positionStrategy.position(\n                info.elementRef.nativeElement.parentElement,\n                { width: info.initialSize.width, height: info.initialSize.height },\n                document,\n                true);\n            info.settings.scrollStrategy.initialize(this._document, this, info.id);\n            info.settings.scrollStrategy.attach();\n        }\n\n        this.addOutsideClickListener(info);\n        this.addResizeHandler(info.id);\n\n        if (info.settings.modal) {\n            this.setupModalWrapper(info);\n        }\n\n        if (info.settings.positionStrategy.settings.openAnimation) {\n            this.playOpenAnimation(info);\n        } else {\n            //  to eliminate flickering show the element just before onOpened fire\n            info.elementRef.nativeElement.parentElement.style.visibility = '';\n            this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n        }\n    }\n\n    private _hide(id: string, event?: Event) {\n        const info: OverlayInfo = this.getOverlayById(id);\n\n        if (!info) {\n            console.warn('igxOverlay.hide was called with wrong id: ' + id);\n            return;\n        }\n\n        const eventArgs = { id, componentRef: info.componentRef, cancel: false, event };\n        this.onClosing.emit(eventArgs);\n        if (eventArgs.cancel) {\n            return;\n        }\n\n        //  TODO: synchronize where these are added/attached and where removed/detached\n        info.settings.scrollStrategy.detach();\n        this.removeOutsideClickListener(info);\n        this.removeResizeHandler(info.id);\n\n        const child: HTMLElement = info.elementRef.nativeElement;\n        if (info.settings.modal) {\n            const parent = child.parentNode.parentNode as HTMLElement;\n            this.applyAnimationParams(parent, info.settings.positionStrategy.settings.closeAnimation);\n            parent.classList.remove('igx-overlay__wrapper--modal');\n            parent.classList.add('igx-overlay__wrapper');\n        }\n\n        if (info.settings.positionStrategy.settings.closeAnimation) {\n            this.playCloseAnimation(info);\n        } else {\n            this.onCloseDone(info);\n        }\n    }\n\n    private getOverlayInfo(component: any, moduleRef?: NgModuleRef<any>): OverlayInfo {\n        const info: OverlayInfo = { ngZone: this._zone };\n        if (component instanceof ElementRef) {\n            info.elementRef = <ElementRef>component;\n        } else {\n            let dynamicFactory: ComponentFactory<{}>;\n            const factoryResolver = moduleRef ? moduleRef.componentFactoryResolver : this._factoryResolver;\n            try {\n                dynamicFactory = factoryResolver.resolveComponentFactory(component);\n            } catch (error) {\n                console.error(error);\n                return null;\n            }\n\n            const injector = moduleRef ? moduleRef.injector : this._injector;\n            const dynamicComponent: ComponentRef<{}> = dynamicFactory.create(injector);\n            this._appRef.attachView(dynamicComponent.hostView);\n\n            // If the element is newly created from a Component, it is wrapped in 'ng-component' tag - we do not want that.\n            const element = dynamicComponent.location.nativeElement;\n            info.elementRef = <ElementRef>{ nativeElement: element };\n            info.componentRef = dynamicComponent;\n        }\n\n        return info;\n    }\n\n    private placeElementHook(element: HTMLElement): HTMLElement {\n        if (!element.parentElement) {\n            return null;\n        }\n\n        const hook = this._document.createElement('div');\n        element.parentElement.insertBefore(hook, element);\n        return hook;\n    }\n\n    private moveElementToOverlay(info: OverlayInfo) {\n        const wrapperElement = this.getWrapperElement();\n        const contentElement = this.getContentElement(wrapperElement, info.settings.modal);\n        this.getOverlayElement(info).appendChild(wrapperElement);\n        const elementScrollTop = info.elementRef.nativeElement.scrollTop;\n        contentElement.appendChild(info.elementRef.nativeElement);\n\n        if (elementScrollTop) {\n            info.elementRef.nativeElement.scrollTop = elementScrollTop;\n        }\n    }\n\n    private getWrapperElement(): HTMLElement {\n        const wrapper: HTMLElement = this._document.createElement('div');\n        wrapper.classList.add('igx-overlay__wrapper');\n        return wrapper;\n    }\n\n    private getContentElement(wrapperElement: HTMLElement, modal: boolean): HTMLElement {\n        const content: HTMLElement = this._document.createElement('div');\n        if (modal) {\n            content.classList.add('igx-overlay__content--modal');\n            content.addEventListener('click', (ev: Event) => {\n                ev.stopPropagation();\n            });\n        } else {\n            content.classList.add('igx-overlay__content');\n        }\n\n        content.addEventListener('scroll', (ev: Event) => {\n            ev.stopPropagation();\n        });\n\n        //  hide element to eliminate flickering. Show the element exactly before animation starts\n        content.style.visibility = 'hidden';\n\n        wrapperElement.appendChild(content);\n        return content;\n    }\n\n    private getOverlayElement(info: OverlayInfo): HTMLElement {\n        if (info.settings.outlet) {\n            return info.settings.outlet.nativeElement;\n        }\n        if (!this._overlayElement) {\n            this._overlayElement = this._document.createElement('div');\n            this._overlayElement.classList.add('igx-overlay');\n            this._document.body.appendChild(this._overlayElement);\n        }\n\n        return this._overlayElement;\n    }\n\n    private updateSize(info: OverlayInfo) {\n        if (info.componentRef) {\n            //  if we are positioning component this is first time it gets visible\n            //  and we can finally get its size\n            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();\n        }\n\n        // set content div width only if element to show has width\n        if (info.initialSize.width !== 0) {\n            info.elementRef.nativeElement.parentElement.style.width = info.initialSize.width + 'px';\n        }\n    }\n\n    private setupModalWrapper(info: OverlayInfo) {\n        const wrapperElement = info.elementRef.nativeElement.parentElement.parentElement;\n        fromEvent(wrapperElement, 'keydown').pipe(\n            filter((ev: KeyboardEvent) => ev.key === 'Escape' || ev.key === 'Esc'),\n            takeUntil(this.destroy$)\n        ).subscribe(() => this.hide(info.id));\n        wrapperElement.classList.remove('igx-overlay__wrapper');\n        this.applyAnimationParams(wrapperElement, info.settings.positionStrategy.settings.openAnimation);\n        wrapperElement.classList.add('igx-overlay__wrapper--modal');\n    }\n\n    private onCloseDone(info: OverlayInfo) {\n        this.cleanUp(info);\n        this.onClosed.emit({ id: info.id, componentRef: info.componentRef });\n    }\n\n    private cleanUp(info: OverlayInfo) {\n        const child: HTMLElement = info.elementRef.nativeElement;\n        const outlet = this.getOverlayElement(info);\n        if (!outlet.contains(child)) {\n            console.warn('Component with id:' + info.id + ' is already removed!');\n            return;\n        }\n\n        outlet.removeChild(child.parentNode.parentNode);\n        if (info.componentRef) {\n            this._appRef.detachView(info.componentRef.hostView);\n            info.componentRef.destroy();\n        }\n\n        if (info.hook) {\n            info.hook.parentElement.insertBefore(info.elementRef.nativeElement, info.hook);\n            info.hook.parentElement.removeChild(info.hook);\n        }\n\n        const index = this._overlayInfos.indexOf(info);\n        this._overlayInfos.splice(index, 1);\n\n        // this._overlayElement.parentElement check just for tests that manually delete the element\n        if (this._overlayInfos.length === 0 && this._overlayElement && this._overlayElement.parentElement) {\n            this._overlayElement.parentElement.removeChild(this._overlayElement);\n            this._overlayElement = null;\n        }\n    }\n\n    private playOpenAnimation(info: OverlayInfo) {\n        if (!info.openAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.openAnimation);\n            info.openAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.openAnimationPlayer)._renderer;\n            info.openAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n            info.openAnimationPlayer.onDone(() => {\n                this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n                if (info.openAnimationPlayer) {\n                    info.openAnimationPlayer.reset();\n                    info.openAnimationPlayer = null;\n                }\n\n                if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n                    info.closeAnimationPlayer.reset();\n                }\n            });\n        }\n\n        //  if there is opening animation already started do nothing\n        if (info.openAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is closing animation already started start open animation from where close one has reached\n        //  and remove close animation\n        if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.closeAnimationInnerPlayer.getPosition();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n            info.openAnimationPlayer.init();\n            info.openAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.openAnimationPlayer, animationType: 'open' });\n\n        //  to eliminate flickering show the element just before animation start\n        info.elementRef.nativeElement.parentElement.style.visibility = '';\n        info.openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(info: OverlayInfo) {\n        if (!info.closeAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.closeAnimation);\n            info.closeAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.closeAnimationPlayer)._renderer;\n            info.closeAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n\n            info.closeAnimationPlayer.onDone(() => {\n                if (info.closeAnimationPlayer) {\n                    info.closeAnimationPlayer.reset();\n                    info.closeAnimationPlayer = null;\n                }\n\n                if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n                    info.openAnimationPlayer.reset();\n                }\n                this.onCloseDone(info);\n            });\n        }\n\n        //  if there is closing animation already started do nothing\n        if (info.closeAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is opening animation already started start close animation from where open one has reached\n        //  and remove open animation\n        if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.openAnimationInnerPlayer.getPosition();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n            info.closeAnimationPlayer.init();\n            info.closeAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.closeAnimationPlayer, animationType: 'close' });\n        info.closeAnimationPlayer.play();\n    }\n\n    //  TODO: check if applyAnimationParams will work with complex animations\n    private applyAnimationParams(wrapperElement: HTMLElement, animationOptions: AnimationReferenceMetadata) {\n        if (!animationOptions) {\n            wrapperElement.style.transitionDuration = '0ms';\n            return;\n        }\n        if (animationOptions.type === AnimationMetadataType.AnimateRef) {\n            animationOptions = (animationOptions as AnimationAnimateRefMetadata).animation;\n        }\n        if (!animationOptions.options || !animationOptions.options.params) {\n            return;\n        }\n        const params = animationOptions.options.params as IAnimationParams;\n        if (params.duration) {\n            wrapperElement.style.transitionDuration = params.duration;\n        }\n        if (params.easing) {\n            wrapperElement.style.transitionTimingFunction = params.easing;\n        }\n    }\n\n    /** @hidden @internal */\n    public getOverlayById(id: string): OverlayInfo {\n        if (!id) {\n            return null;\n        }\n\n        const info = this._overlayInfos.find(e => e.id === id);\n        return info;\n    }\n\n    private documentClicked = (ev: MouseEvent) => {\n        //  if we get to modal overlay just return - we should not close anything under it\n        //  if we get to non-modal overlay do the next:\n        //   1. Check it has close on outside click. If not go on to next overlay;\n        //   2. If true check if click is on the element. If it is on the element we have closed\n        //  already all previous non-modal with close on outside click elements, so we return. If\n        //  not close the overlay and check next\n        for (let i = this._overlayInfos.length; i--;) {\n            const info = this._overlayInfos[i];\n            if (info.settings.modal) {\n                return;\n            }\n            if (info.settings.closeOnOutsideClick) {\n                //  if the click is on the element do not close this overlay\n                if (!info.elementRef.nativeElement.contains(ev.target)) {\n                    // if we should exclude position target check if the click is over it. If so do not close overlay\n                    const positionTarget = info.settings.positionStrategy.settings.target as HTMLElement;\n                    let clickOnPositionTarget = false;\n                    if (positionTarget) {\n                        const positionTargetRect = positionTarget.getBoundingClientRect();\n                        clickOnPositionTarget = ev.clientX >= positionTargetRect.left && ev.clientX <= positionTargetRect.right &&\n                                                ev.clientY >= positionTargetRect.top && ev.clientY <= positionTargetRect.bottom;\n                    }\n\n                    if (!(info.settings.excludePositionTarget && clickOnPositionTarget)) {\n                        //  if the click is outside click, but close animation has started do nothing\n                        if (!(info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted())) {\n                            this._hide(info.id, ev);\n                        }\n                    }\n                } else {\n                    //  TODO: should we return here, or continue with next overlays\n                    return;\n                }\n            }\n        }\n    }\n\n    private addOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.closeOnOutsideClick) {\n            if (info.settings.modal) {\n                fromEvent(info.elementRef.nativeElement.parentElement.parentElement, 'click')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe(() => this.hide(info.id));\n            } else if (\n                //  if all overlays minus closing overlays equals one add the handler\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal).length -\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal &&\n                    x.closeAnimationPlayer &&\n                    x.closeAnimationPlayer.hasStarted()).length === 1) {\n                this._document.addEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private removeOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.modal === false) {\n            let shouldRemoveClickEventListener = true;\n            this._overlayInfos.forEach(o => {\n                if (o.settings.modal === false && o.id !== info.id) {\n                    shouldRemoveClickEventListener = false;\n                }\n            });\n\n            if (shouldRemoveClickEventListener) {\n                this._document.removeEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private addResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.addEventListener('resize', this.repositionAll);\n        }\n    }\n\n    private removeResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.removeEventListener('resize', this.repositionAll);\n        }\n    }\n\n    /** @hidden */\n    public repositionAll = () => {\n        for (let i = this._overlayInfos.length; i--;) {\n            this.reposition(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport {\n  getTargetRect,\n  cloneInstance,\n  HorizontalAlignment,\n  Point,\n  PositionSettings,\n  Size,\n  VerticalAlignment\n} from './../utilities';\nimport { scaleInVerTop, scaleOutVerTop } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions and start point passed in trough PositionSettings.\n * It is possible to either pass a start point or an HTMLElement as a positioning base.\n */\nexport class ConnectedPositioningStrategy implements IPositionStrategy {\n  private _defaultSettings: PositionSettings = {\n    // default Point(0, 0) in getPointFromPositionsSettings\n    target: null,\n    horizontalDirection: HorizontalAlignment.Right,\n    verticalDirection: VerticalAlignment.Bottom,\n    horizontalStartPoint: HorizontalAlignment.Left,\n    verticalStartPoint: VerticalAlignment.Bottom,\n    openAnimation: scaleInVerTop,\n    closeAnimation: scaleOutVerTop,\n    minSize: { width: 0, height: 0 }\n  };\n\n  /** @inheritdoc */\n  public settings: PositionSettings;\n\n  constructor(settings?: PositionSettings) {\n    this.settings = Object.assign({}, this._defaultSettings, settings);\n  }\n\n  /** @inheritdoc */\n  position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n    const targetRect = getTargetRect(this.settings);\n    const contentElementRect = contentElement.getBoundingClientRect();\n    this.setStyle(contentElement, targetRect, contentElementRect);\n  }\n\n  /**\n   * @inheritdoc\n   * Creates clone of this position strategy\n   * @returns clone of this position strategy\n   */\n  clone(): IPositionStrategy {\n    return cloneInstance(this);\n  }\n\n  /**\n   * Sets element's style which effectively positions provided element according\n   * to provided position settings\n   * @param element Element to position\n   * @param targetRect Bounding rectangle of strategy target\n   * @param elementRect Bounding rectangle of the element\n   */\n  protected setStyle(element: HTMLElement, targetRect: ClientRect, elementRect: ClientRect) {\n    const startPoint: Point = {\n      x: targetRect.right + targetRect.width * this.settings.horizontalStartPoint,\n      y: targetRect.bottom + targetRect.height * this.settings.verticalStartPoint,\n    };\n    const wrapperRect: ClientRect = element.parentElement.getBoundingClientRect();\n\n    //  clean up styles - if auto position strategy is chosen we may pass here several times\n    element.style.right = '';\n    element.style.left = '';\n    element.style.bottom = '';\n    element.style.top = '';\n\n    switch (this.settings.horizontalDirection) {\n      case HorizontalAlignment.Left:\n        element.style.right = `${Math.round(wrapperRect.right - startPoint.x)}px`;\n        break;\n      case HorizontalAlignment.Center:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left - elementRect.width / 2)}px`;\n        break;\n      case HorizontalAlignment.Right:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left)}px`;\n        break;\n    }\n\n    switch (this.settings.verticalDirection) {\n      case VerticalAlignment.Top:\n        element.style.bottom = `${Math.round(wrapperRect.bottom - startPoint.y)}px`;\n        break;\n      case VerticalAlignment.Middle:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top - elementRect.height / 2)}px`;\n        break;\n      case VerticalAlignment.Bottom:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top)}px`;\n        break;\n    }\n  }\n}\n","import { ConnectedPositioningStrategy } from './connected-positioning-strategy';\nimport { HorizontalAlignment, VerticalAlignment, PositionSettings, Size, getViewportRect, getTargetRect } from '../utilities';\n\nexport abstract class BaseFitPositionStrategy extends ConnectedPositioningStrategy {\n    protected _initialSize: Size;\n    protected _initialSettings: PositionSettings;\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const targetRect = getTargetRect(this.settings);\n        const contentElementRect = contentElement.getBoundingClientRect();\n        if (initialCall) {\n            const connectedFit: ConnectedFit = {};\n            connectedFit.targetRect = targetRect;\n            connectedFit.contentElementRect = contentElementRect;\n            this._initialSettings = this._initialSettings || Object.assign({}, this.settings);\n            this.settings = Object.assign({}, this._initialSettings);\n            connectedFit.viewPortRect = getViewportRect(document);\n            this.updateViewPortFit(connectedFit);\n            if (!connectedFit.fitHorizontal || !connectedFit.fitVertical) {\n                this.fitInViewport(contentElement, connectedFit);\n            }\n        }\n        this.setStyle(contentElement, targetRect, contentElementRect);\n    }\n\n    /**\n     * Checks if element can fit in viewport and updates provided connectedFit\n     * with the result\n     * @param connectedFit connectedFit to update\n     */\n    protected updateViewPortFit(connectedFit: ConnectedFit) {\n        connectedFit.left = this.calculateLeft(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.horizontalStartPoint,\n            this.settings.horizontalDirection);\n        connectedFit.right = connectedFit.left + connectedFit.contentElementRect.width;\n        connectedFit.fitHorizontal =\n            connectedFit.viewPortRect.left < connectedFit.left && connectedFit.right < connectedFit.viewPortRect.right;\n\n        connectedFit.top = this.calculateTop(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.verticalStartPoint,\n            this.settings.verticalDirection);\n        connectedFit.bottom = connectedFit.top + connectedFit.contentElementRect.height;\n        connectedFit.fitVertical =\n            connectedFit.viewPortRect.top < connectedFit.top && connectedFit.bottom < connectedFit.viewPortRect.bottom;\n    }\n\n    /**\n     * Calculates the position of the left border of the element if it gets positioned\n     * with provided start point and direction\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateLeft(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: HorizontalAlignment, direction: HorizontalAlignment): number {\n        return targetRect.right + targetRect.width * startPoint + elementRect.width * direction;\n    }\n\n    /**\n     * Calculates the position of the top border of the element if it gets positioned\n     * with provided position settings related to the target\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateTop(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: VerticalAlignment, direction: VerticalAlignment): number {\n        return targetRect.bottom + targetRect.height * startPoint + elementRect.height * direction;\n    }\n\n    /**\n     * Fits the element into viewport according to the position settings\n     * @param element element to fit in viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     */\n    protected abstract fitInViewport(\n        element: HTMLElement,\n        connectedFit: ConnectedFit);\n}\n\nexport interface ConnectedFit {\n    contentElementRect?: ClientRect;\n    targetRect?: ClientRect;\n    viewPortRect?: ClientRect;\n    fitHorizontal?: boolean;\n    fitVertical?: boolean;\n    left?: number;\n    right?: number;\n    top?: number;\n    bottom?: number;\n}\n","import { VerticalAlignment, HorizontalAlignment, PositionSettings } from './../utilities';\nimport { BaseFitPositionStrategy, ConnectedFit } from './base-fit-position-strategy';\n\n/**\n * Positions the element as in **Connected** positioning strategy and re-positions the element in\n * the view port (calculating a different start point) in case the element is partially getting out of view\n */\nexport class AutoPositionStrategy extends BaseFitPositionStrategy {\n\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        const transformString: string[] = [];\n        if (!connectedFit.fitHorizontal) {\n            if (this.canFlipHorizontal(connectedFit)) {\n                this.flipHorizontal();\n            } else {\n                const horizontalPush = this.horizontalPush(connectedFit);\n                transformString.push(`translateX(${horizontalPush}px)`);\n            }\n        }\n\n        if (!connectedFit.fitVertical) {\n            if (this.canFlipVertical(connectedFit)) {\n                this.flipVertical();\n            } else {\n                const verticalPush = this.verticalPush(connectedFit);\n                transformString.push(`translateY(${verticalPush}px)`);\n            }\n        }\n\n        element.style.transform = transformString.join(' ').trim();\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipHorizontal(connectedFit: ConnectedFit): boolean {\n        //  HorizontalAlignment can be Left = -1; Center = -0.5 or Right = 0.\n        //  To virtually flip direction and start point (both are HorizontalAlignment) we can do this:\n        //  flippedAlignment = (-1) * (HorizontalAlignment + 1)\n        //  this way:\n        //  (-1) * (Left + 1) = 0 = Right\n        //  (-1) * (Center + 1) = -0.5 = Center\n        //  (-1) * (Right + 1) = -1 = Left\n        const flippedStartPoint = (-1) * (this.settings.horizontalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.horizontalDirection + 1);\n\n        const leftBorder = this.calculateLeft(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection);\n        const rightBorder = leftBorder + connectedFit.contentElementRect.width;\n        return connectedFit.viewPortRect.left < leftBorder && rightBorder < connectedFit.viewPortRect.right;\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipVertical(connectedFit: ConnectedFit): boolean {\n        const flippedStartPoint = (-1) * (this.settings.verticalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.verticalDirection + 1);\n\n        const topBorder = this.calculateTop(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection);\n        const bottomBorder = topBorder + connectedFit.contentElementRect.height;\n        return connectedFit.viewPortRect.top < topBorder && bottomBorder < connectedFit.viewPortRect.bottom;\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipHorizontal() {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalDirection = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalDirection = HorizontalAlignment.Left;\n                break;\n        }\n        switch (this.settings.horizontalStartPoint) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Left;\n                break;\n        }\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipVertical() {\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                this.settings.verticalDirection = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalDirection = VerticalAlignment.Top;\n                break;\n        }\n        switch (this.settings.verticalStartPoint) {\n            case VerticalAlignment.Top:\n                this.settings.verticalStartPoint = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalStartPoint = VerticalAlignment.Top;\n                break;\n        }\n    }\n\n    /**\n     * Calculates necessary horizontal push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private horizontalPush(connectedFit: ConnectedFit): number {\n        const leftExtend = connectedFit.left;\n        const rightExtend = connectedFit.right - connectedFit.viewPortRect.right;\n        //  if leftExtend < 0 overlay goes beyond left end of the screen. We should push it back with exactly\n        //  as much as it is beyond the screen.\n        //  if rightExtend > 0 overlay goes beyond right end of the screen. We should push it back with the\n        //  extend but with amount not bigger than what left between left border of screen and left border of\n        //  overlay, e.g. leftExtend\n        if (leftExtend < 0) {\n            return Math.abs(leftExtend);\n        } else if (rightExtend > 0) {\n            return - Math.min(rightExtend, leftExtend);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Calculates necessary vertical push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private verticalPush(connectedFit: ConnectedFit): number {\n        const topExtend = connectedFit.top;\n        const bottomExtend = connectedFit.bottom - connectedFit.viewPortRect.bottom;\n        if (topExtend < 0) {\n            return Math.abs(topExtend);\n        } else if (bottomExtend > 0) {\n            return - Math.min(bottomExtend, topExtend);\n        } else {\n            return 0;\n        }\n    }\n}\n","import { BaseFitPositionStrategy, ConnectedFit } from './base-fit-position-strategy';\nimport { HorizontalAlignment, VerticalAlignment, PositionSettings } from '../utilities';\n\n/**\n * Positions the element as in **Connected** positioning strategy and resize the element\n * to fit in the view port in case the element is partially getting out of view\n */\nexport class ElasticPositionStrategy extends BaseFitPositionStrategy {\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        element.classList.add('igx-overlay__content--elastic');\n        const transformString: string[] = [];\n        if (!connectedFit.fitHorizontal) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.width - this.settings.minSize.width);\n            const leftExtend = Math.max(0, connectedFit.viewPortRect.left - connectedFit.left);\n            const rightExtend = Math.max(0, connectedFit.right - connectedFit.viewPortRect.right);\n            const reduction = Math.min(maxReduction, leftExtend + rightExtend);\n            element.style.width = `${connectedFit.contentElementRect.width - reduction}px`;\n\n            //  if direction is center and element goes off the screen in left direction we should push the\n            //  element to the right. Prevents left still going out of view when normally positioned\n            if (this.settings.horizontalDirection === HorizontalAlignment.Center) {\n                //  the amount of translation depends on whether element goes off the screen to the left,\n                //  to the right or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between left and right extend\n                //  taken from the reduction\n                const translation = leftExtend * reduction / (leftExtend + rightExtend);\n                if (translation > 0) {\n                    transformString.push(`translateX(${translation}px)`);\n                }\n            }\n        }\n\n        if (!connectedFit.fitVertical) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.height - this.settings.minSize.height);\n            const topExtend = Math.max(0, connectedFit.viewPortRect.top - connectedFit.top);\n            const bottomExtend = Math.max(0, connectedFit.bottom - connectedFit.viewPortRect.bottom);\n            const reduction = Math.min(maxReduction, topExtend + bottomExtend);\n            element.style.height = `${connectedFit.contentElementRect.height - reduction}px`;\n\n            //  if direction is middle and element goes off the screen in top direction we should push the\n            //  element to the bottom. Prevents top still going out of view when normally positioned\n            if (this.settings.verticalDirection === VerticalAlignment.Middle) {\n                //  the amount of translation depends on whether element goes off the screen to the top,\n                //  to the bottom or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between top and bottom extend\n                //  taken from the reduction\n                const translation = topExtend * reduction / (topExtend + bottomExtend);\n                if (translation > 0) {\n                    transformString.push(`translateY(${translation}px)`);\n                }\n            }\n        }\n        element.style.transform = transformString.join(' ').trim();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\nimport { NgZone } from '@angular/core';\n\n/**\n * On scroll reposition the overlay content.\n */\nexport class AbsoluteScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private _scrollContainer: HTMLElement;\n    private _zone: NgZone;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._zone = overlayService.getOverlayById(id).ngZone;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._zone) {\n            this._zone.runOutsideAngular(() => {\n                this.addScrollEventListener();\n            });\n        } else {\n            this.addScrollEventListener();\n        }\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n        }\n\n        this._initialized = false;\n    }\n\n    private addScrollEventListener() {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.addEventListener('scroll', this.onScroll, true);\n        }\n    }\n\n    private onScroll = () => {\n        this._overlayService.repositionAll();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Prevents scrolling while the overlay content is shown.\n */\nexport class BlockScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _initialScrollTop: number;\n    private _initialScrollLeft: number;\n    private _sourceElement: Element;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        this._document.addEventListener('scroll', this.onScroll, true);\n        this._document.addEventListener('wheel', this.onWheel, true);\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        this._document.removeEventListener('scroll', this.onScroll, true);\n        this._document.removeEventListener('wheel', this.onWheel, true);\n        this._sourceElement = null;\n        this._initialScrollTop = 0;\n        this._initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        ev.preventDefault();\n        if (!this._sourceElement || this._sourceElement !== ev.srcElement) {\n            this._sourceElement = ev.srcElement;\n            this._initialScrollTop = this._sourceElement.scrollTop;\n            this._initialScrollLeft = this._sourceElement.scrollLeft;\n        }\n\n        this._sourceElement.scrollTop = this._initialScrollTop;\n        this._sourceElement.scrollLeft = this._initialScrollLeft;\n    }\n\n    private onWheel(ev: WheelEvent) {\n        ev.stopImmediatePropagation();\n        ev.preventDefault();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Uses a tolerance and closes the shown component upon scrolling if the tolerance is exceeded\n */\nexport class CloseScrollStrategy extends ScrollStrategy {\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private initialScrollTop: number;\n    private initialScrollLeft: number;\n    private cumulativeScrollTop: number;\n    private cumulativeScrollLeft: number;\n    private _threshold: number;\n    private _initialized = false;\n    private _sourceElement: Element;\n    private _scrollContainer: HTMLElement;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n        this._threshold = 10;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll);\n            this._sourceElement = this._scrollContainer;\n        } else {\n            this._document.addEventListener('scroll', this.onScroll);\n            if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n                this._sourceElement = document.documentElement as Element;\n            } else if (document.body.scrollHeight > document.body.clientHeight) {\n                this._sourceElement = document.body as Element;\n            }\n        }\n\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = this._sourceElement.scrollTop;\n        this.initialScrollLeft = this._sourceElement.scrollLeft;\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        // TODO: check why event listener removes only on first call and remains on each next!!!\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll);\n        }\n        this._sourceElement = null;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = 0;\n        this.initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop += this._sourceElement.scrollTop;\n        this.cumulativeScrollLeft += this._sourceElement.scrollLeft;\n\n        if (Math.abs(this.cumulativeScrollTop - this.initialScrollTop) > this._threshold ||\n            Math.abs(this.cumulativeScrollLeft - this.initialScrollLeft) > this._threshold) {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n            this._overlayService.hide(this._id);\n        }\n    }\n}\n","import { TransactionService, Transaction, State } from './transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxBaseTransactionService<T extends Transaction, S extends State> implements TransactionService<T, S> {\n    protected _isPending = false;\n    protected _pendingTransactions: T[] = [];\n    protected _pendingStates: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    public get canRedo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get canUndo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return this._isPending;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        if (this._isPending) {\n            this.updateState(this._pendingStates, transaction, recordRef);\n            this._pendingTransactions.push(transaction);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getTransactionLog(id?: any): T[] { return []; }\n\n    /**\n     * @inheritdoc\n     */\n    undo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    redo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._pendingStates.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.getAggregatedValue(key, mergeChanges) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any): S {\n        return this._pendingStates.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._pendingStates.get(id);\n        if (!state) {\n            return null;\n        }\n        if (mergeChanges) {\n            return this.updateValue(state);\n        }\n        return state.value;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    commit(data: any[]): void { }\n\n    /**\n     * @inheritdoc\n     */\n    clear(): void {\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public startPending(): void {\n        this._isPending = true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        if (state) {\n            if (isObject(state.value)) {\n                mergeObjects(state.value, transaction.newValue);\n            } else {\n                state.value = transaction.newValue;\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n    }\n\n    /**\n     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types\n     * @param state State to update value for\n     * @returns updated value including all the changes in provided state\n     */\n    protected updateValue(state: S) {\n        return this.mergeValues(state.recordRef, state.value);\n    }\n\n    /**\n     * Merges second values in first value and the result in empty object. If values are primitive type\n     * returns second value if exists, or first value.\n     * @param first Value to merge into\n     * @param second Value to merge\n     */\n    protected mergeValues<U>(first: U, second: U): U {\n        let result: U;\n        if (isObject(first) || isObject(second)) {\n            result = mergeObjects(mergeObjects({}, first), second);\n        } else {\n            result = second ? second : first;\n        }\n        return result;\n    }\n}\n","import { Transaction, State, TransactionType } from './transaction';\nimport { IgxBaseTransactionService } from './base-transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxTransactionService<T extends Transaction, S extends State> extends IgxBaseTransactionService<T, S> {\n    protected _transactions: T[] = [];\n    protected _redoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _undoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _states: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    get canUndo(): boolean {\n        return this._undoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get canRedo(): boolean {\n        return this._redoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        const states = this._isPending ? this._pendingStates : this._states;\n        this.verifyAddedTransaction(states, transaction, recordRef);\n        this.addTransaction(transaction, states, recordRef);\n    }\n\n    protected addTransaction(transaction: T, states: Map<any, S>, recordRef?: any) {\n        this.updateState(states, transaction, recordRef);\n\n        const transactions = this._isPending ? this._pendingTransactions : this._transactions;\n        transactions.push(transaction);\n\n        if (!this._isPending) {\n            this._undoStack.push([{ transaction, recordRef }]);\n            this._redoStack = [];\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getTransactionLog(id?: any): T[] {\n        if (id) {\n            return this._transactions.filter(t => t.id === id);\n        }\n        return [...this._transactions];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any): S {\n        return this._states.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._states.get(id);\n        const pendingState = super.getState(id);\n\n        //  if there is no state and there is no pending state return null\n        if (!state && !pendingState) {\n            return null;\n        }\n\n        const pendingChange = super.getAggregatedValue(id, false);\n        const change = state && state.value;\n        let aggregatedValue = this.mergeValues(change, pendingChange);\n        if (mergeChanges) {\n            const originalValue = state ? state.recordRef : pendingState.recordRef;\n            aggregatedValue = this.mergeValues(originalValue, aggregatedValue);\n        }\n        return aggregatedValue;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        if (commit) {\n            const actions: { transaction: T, recordRef: any }[] = [];\n            // don't use addTransaction due to custom undo handling\n            for (const transaction of this._pendingTransactions) {\n                const pendingState = this._pendingStates.get(transaction.id);\n                this._transactions.push(transaction);\n                this.updateState(this._states, transaction, pendingState.recordRef);\n                actions.push({ transaction, recordRef: pendingState.recordRef });\n            }\n\n            this._undoStack.push(actions);\n            this._redoStack = [];\n\n            this.onStateUpdate.emit();\n        }\n        super.endPending(commit);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public commit(data: any[]): void {\n        this._states.forEach((s: S) => {\n            const index = data.findIndex(i => JSON.stringify(i) === JSON.stringify(s.recordRef));\n            switch (s.type) {\n                case TransactionType.ADD:\n                    data.push(s.value);\n                    break;\n                case TransactionType.DELETE:\n                    if (0 <= index && index < data.length) {\n                        data.splice(index, 1);\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (0 <= index && index < data.length) {\n                        data[index] = this.updateValue(s);\n                    }\n                    break;\n            }\n        });\n        this.clear();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public clear(): void {\n        this._transactions = [];\n        this._states.clear();\n        this._redoStack = [];\n        this._undoStack = [];\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public undo(): void {\n        if (this._undoStack.length <= 0) {\n            return;\n        }\n\n        const lastActions: { transaction: T, recordRef: any }[] = this._undoStack.pop();\n        this._transactions.splice(this._transactions.length - lastActions.length);\n        this._redoStack.push(lastActions);\n\n        this._states.clear();\n        for (const currentActions of this._undoStack) {\n            for (const transaction of currentActions) {\n                this.updateState(this._states, transaction.transaction, transaction.recordRef);\n            }\n        }\n\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public redo(): void {\n        if (this._redoStack.length > 0) {\n            let actions: { transaction: T, recordRef: any, useInUndo?: boolean }[];\n            actions = this._redoStack.pop();\n            for (const action of actions) {\n                this.updateState(this._states, action.transaction, action.recordRef);\n                this._transactions.push(action.transaction);\n            }\n\n            this._undoStack.push(actions);\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * Verifies if the passed transaction is correct. If not throws an exception.\n     * @param transaction Transaction to be verified\n     */\n    protected verifyAddedTransaction(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        const state = states.get(transaction.id);\n        switch (transaction.type) {\n            case TransactionType.ADD:\n                if (state) {\n                    //  cannot add same item twice\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already added.`);\n                }\n                break;\n            case TransactionType.DELETE:\n            case TransactionType.UPDATE:\n                if (state && state.type === TransactionType.DELETE) {\n                    //  cannot delete or update deleted items\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already deleted.`);\n                }\n                if (!state && !recordRef && !this._isPending) {\n                    //  cannot initially add transaction or delete item with no recordRef\n                    throw new Error(`Cannot add this transaction. This is first transaction of type ${transaction.type} ` +\n                        `for id ${transaction.id}. For first transaction of this type recordRef is mandatory.`);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        //  if TransactionType is ADD simply add transaction to states;\n        //  if TransactionType is DELETE:\n        //    - if there is state with this id of type ADD remove it from the states;\n        //    - if there is state with this id of type UPDATE change its type to DELETE;\n        //    - if there is no state with this id add transaction to states;\n        //  if TransactionType is UPDATE:\n        //    - if there is state with this id of type ADD merge new value and state recordRef into state new value\n        //    - if there is state with this id of type UPDATE merge new value into state new value\n        //    - if there is state with this id and state type is DELETE change its type to UPDATE\n        //    - if there is no state with this id add transaction to states;\n        if (state) {\n            switch (transaction.type) {\n                case TransactionType.DELETE:\n                    if (state.type === TransactionType.ADD) {\n                        states.delete(transaction.id);\n                    } else if (state.type === TransactionType.UPDATE) {\n                        state.value = transaction.newValue;\n                        state.type = TransactionType.DELETE;\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (isObject(state.value)) {\n                        if (state.type === TransactionType.ADD) {\n                            state.value = this.mergeValues(state.value, transaction.newValue);\n                        }\n                        if (state.type === TransactionType.UPDATE) {\n                            mergeObjects(state.value, transaction.newValue);\n                        }\n                    } else {\n                        state.value = transaction.newValue;\n                    }\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n\n        //  should not clean pending state. This will happen automatically on endPending call\n        if (!this._isPending) {\n            this.cleanState(transaction.id, states);\n        }\n    }\n\n    /**\n     * Compares the state with recordRef and clears all duplicated values. If any state ends as\n     * empty object removes it from states.\n     * @param state State to clean\n     */\n    protected cleanState(id: any, states: Map<any, S>): void {\n        const state = states.get(id);\n        //  do nothing if\n        //  there is no state, or\n        //  there is no state value (e.g. DELETED transaction), or\n        //  there is no recordRef (e.g. ADDED transaction)\n        if (state && state.value && state.recordRef) {\n            //  if state's value is object compare each key with the ones in recordRef\n            //  if values in any key are the same delete it from state's value\n            //  if state's value is not object, simply compare with recordRef and remove\n            //  the state if they are equal\n            if (isObject(state.recordRef)) {\n                for (const key of Object.keys(state.value)) {\n                    if (JSON.stringify(state.recordRef[key]) === JSON.stringify(state.value[key])) {\n                        delete state.value[key];\n                    }\n                }\n\n                //  if state's value is empty remove the state from the states, only if state is not DELETE type\n                if (state.type !== TransactionType.DELETE && Object.keys(state.value).length === 0) {\n                    states.delete(id);\n                }\n            } else {\n                if (state.recordRef === state.value) {\n                    states.delete(id);\n                }\n            }\n        }\n    }\n}\n","import { HierarchicalTransaction, HierarchicalState, TransactionType } from './transaction';\nimport { Injectable } from '@angular/core';\nimport { IgxTransactionService } from './igx-transaction';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneValue } from '../../core/utils';\n\n/** @experimental @hidden */\n@Injectable()\nexport class IgxHierarchicalTransactionService<T extends HierarchicalTransaction, S extends HierarchicalState>\n    extends IgxTransactionService<T, S> {\n\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : cloneValue(state.value);\n            this.clearArraysFromObject(value);\n            result.push({ id: key, path: state.path, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        super.updateState(states, transaction, recordRef);\n\n        //  if transaction has no path, e.g. flat data source, get out\n        if (!transaction.path) {\n            return;\n        }\n\n        const currentState = states.get(transaction.id);\n        if (currentState) {\n            currentState.path = transaction.path;\n        }\n\n        //  if transaction has path, Hierarchical data source, and it is DELETE\n        //  type transaction for all child rows remove ADD states and update\n        //  transaction type and value of UPDATE states\n        if (transaction.type === TransactionType.DELETE) {\n            states.forEach((v: S, k: any) => {\n                if (v.path && v.path.indexOf(transaction.id) !== -1) {\n                    switch (v.type) {\n                        case TransactionType.ADD:\n                            states.delete(k);\n                            break;\n                        case TransactionType.UPDATE:\n                            states.get(k).type = TransactionType.DELETE;\n                            states.get(k).value = null;\n                    }\n                }\n            });\n        }\n    }\n\n    public commit(data: any[], primaryKey?: any, childDataKey?: any): void {\n        if (childDataKey) {\n            DataUtil.mergeHierarchicalTransactions(data, this.getAggregatedChanges(true), childDataKey, primaryKey, true);\n        } else {\n            super.commit(data);\n        }\n        this.clear();\n    }\n\n    //  TODO: remove this method. Force cloning to strip child arrays when needed instead\n    private clearArraysFromObject(obj: {}) {\n        if (obj) {\n            for (const prop of Object.keys(obj)) {\n                if (Array.isArray(obj[prop])) {\n                    delete obj[prop];\n                }\n            }\n        }\n    }\n}\n\n","import {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Inject\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../../core/navigation';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { OverlaySettings, OverlayEventArgs, ConnectedPositioningStrategy, AbsoluteScrollStrategy, IPositionStrategy } from '../../services';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subscription, Subject, MonoTypeOperatorFunction } from 'rxjs';\nimport { OverlayClosingEventArgs } from '../../services/overlay/utilities';\nimport { CancelableEventArgs, CancelableBrowserEventArgs } from '../../core/utils';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\n@Directive({\n    exportAs: 'toggle',\n    selector: '[igxToggle]'\n})\nexport class IgxToggleDirective implements IToggleView, OnInit, OnDestroy {\n    protected _overlayId: string;\n    private destroy$ = new Subject<boolean>();\n    private _overlaySubFilter: [MonoTypeOperatorFunction<OverlayEventArgs>, MonoTypeOperatorFunction<OverlayEventArgs>] = [\n        filter(x => x.id === this._overlayId),\n        takeUntil(this.destroy$)\n    ];\n    private _overlayOpenedSub: Subscription;\n    private _overlayClosingSub: Subscription;\n    private _overlayClosedSub: Subscription;\n\n    /**\n     * Emits an event after the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpened(event) {\n     *    alert(\"Toggle opened!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpened)='onToggleOpened($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpening(event) {\n     *  alert(\"Toggle opening!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpening)='onToggleOpening($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emits an event after the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosed(event) {\n     *  alert(\"Toggle closed!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onClosed)='onToggleClosed($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosing(event) {\n     *  alert(\"Toggle closing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *  igxToggle\n     *  (onClosing)='onToggleClosing($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    private _collapsed = true;\n    /**\n     * @hidden\n     */\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n\n    /**\n     * Identifier which is registered into `IgxNavigationService`\n     *\n     * ```typescript\n     * let myToggleId = this.toggle.id;\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle--hidden')\n    @HostBinding('attr.aria-hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(\n        private elementRef: ElementRef,\n        private cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        @Optional() private navigationService: IgxNavigationService) {\n    }\n\n    /**\n     * Opens the toggle.\n     *\n     * ```typescript\n     * this.myToggle.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        //  if there is open animation do nothing\n        //  if toggle is not collapsed and there is no close animation do nothing\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (hasOpenAnimation || !(this._collapsed || hasCloseAnimation)) {\n            return;\n        }\n\n        if (!info) {\n            this._overlayId = this.overlayService.attach(this.elementRef, overlaySettings);\n        }\n\n        this._collapsed = false;\n        this.cdr.detectChanges();\n\n        const openEventArgs: CancelableEventArgs = { cancel: false };\n        this.onOpening.emit(openEventArgs);\n        if (openEventArgs.cancel) {\n            this._collapsed = true;\n            this.cdr.detectChanges();\n            return;\n        }\n\n        this.overlayService.show(this._overlayId, overlaySettings);\n\n        this.unsubscribe();\n        this._overlayOpenedSub = this.overlayService.onOpened.pipe(...this._overlaySubFilter).subscribe(() => {\n            this.onOpened.emit();\n        });\n\n        this._overlayClosingSub = this.overlayService\n            .onClosing\n            .pipe(...this._overlaySubFilter)\n            .subscribe((e: OverlayClosingEventArgs) => {\n                const eventArgs: CancelableBrowserEventArgs = { cancel: false, event: e.event };\n                this.onClosing.emit(eventArgs);\n                e.cancel = eventArgs.cancel;\n\n                //  in case event is not canceled this will close the toggle and we need to unsubscribe.\n                //  Otherwise if for some reason, e.g. close on outside click, close() gets called before\n                //  onClosed was fired we will end with calling onClosing more than once\n                if (!e.cancel) {\n                    this.clearSubscription(this._overlayClosingSub);\n                }\n            });\n\n        this._overlayClosedSub = this.overlayService.onClosed\n            .pipe(...this._overlaySubFilter)\n            .subscribe(this.overlayClosed);\n    }\n\n    /**\n     * Closes the toggle.\n     *\n     * ```typescript\n     * this.myToggle.close();\n     * ```\n     */\n    public close() {\n        //  if toggle is collapsed do nothing\n        //  if there is close animation do nothing, toggle will close anyway\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (this._collapsed || hasCloseAnimation) {\n            return;\n        }\n\n        this.overlayService.hide(this._overlayId);\n    }\n\n    /**\n     * Opens or closes the toggle, depending on its current state.\n     *\n     * ```typescript\n     * this.myToggle.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        //  if toggle is collapsed call open\n        //  if there is close animation call open\n        if (this.collapsed || this.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /** @hidden @internal */\n    public get isClosing() {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        return info ? info.closeAnimationPlayer : false;\n    }\n\n    /**\n     * Repositions the toggle.\n     * ```typescript\n     * this.myToggle.reposition();\n     * ```\n     */\n    public reposition() {\n        this.overlayService.reposition(this._overlayId);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navigationService && this.id) {\n            this.navigationService.add(this.id, this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navigationService && this.id) {\n            this.navigationService.remove(this.id);\n        }\n        if (!this.collapsed && this._overlayId) {\n            this.overlayService.hide(this._overlayId);\n        }\n        this.unsubscribe();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    private overlayClosed = () => {\n        this._collapsed = true;\n        this.cdr.detectChanges();\n        delete this._overlayId;\n        this.unsubscribe();\n        this.onClosed.emit();\n    }\n\n    private unsubscribe() {\n        this.clearSubscription(this._overlayOpenedSub);\n        this.clearSubscription(this._overlayClosingSub);\n        this.clearSubscription(this._overlayClosedSub);\n    }\n\n    private clearSubscription(subscription: Subscription) {\n        if (subscription && !subscription.closed) {\n            subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    exportAs: 'toggle-action',\n    selector: '[igxToggleAction]'\n})\nexport class IgxToggleActionDirective implements OnInit {\n    protected _overlayDefaults: OverlaySettings;\n\n    /**\n     * Provide settings that control the toggle overlay positioning, interaction and scroll behavior.\n     * ```typescript\n     * const settings: OverlaySettings = {\n     *      closeOnOutsideClick: false,\n     *      modal: false\n     *  }\n     * ```\n     * ---\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [overlaySettings]=\"settings\"></div>\n     * ```\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    private _closeOnOutsideClick: boolean;\n    /**\n     * DEPRECATED. Determines whether the toggle should close when you click outside.\n     *\n     * ```typescript\n     * // get\n     * let closesOnOutsideClick = this.toggle.closeOnOutsideClick;\n     * ```\n     */\n    @Input()\n    @DeprecateProperty(`igxToggleAction 'closeOnOutsideClick' input is deprecated. Use 'overlaySettings' input object instead.`)\n    public get closeOnOutsideClick(): boolean {\n        return this._closeOnOutsideClick;\n    }\n    /**\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [closeOnOutsideClick]=\"'true'\"></div>\n     * ```\n     */\n    public set closeOnOutsideClick(v: boolean) {\n        this._closeOnOutsideClick = v;\n    }\n\n    /**\n     * Determines where the toggle element overlay should be attached.\n     *\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [igxToggleOutlet]=\"outlet\"></div>\n     * ```\n     * Where `outlet` in an instance of `IgxOverlayOutletDirective` or an `ElementRef`\n     */\n    @Input('igxToggleOutlet')\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input('igxToggleAction')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this.navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    protected _target: IToggleView | string;\n\n    constructor(private element: ElementRef, @Optional() private navigationService: IgxNavigationService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._overlayDefaults = {\n            positionStrategy: new ConnectedPositioningStrategy({ target: this.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            closeOnOutsideClick: true,\n            modal: false,\n            excludePositionTarget: true\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (this._closeOnOutsideClick !== undefined) {\n            this._overlayDefaults.closeOnOutsideClick = this._closeOnOutsideClick;\n        }\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n\n        const clonedSettings = Object.assign({}, this._overlayDefaults, this.overlaySettings);\n        this.updateOverlaySettings(clonedSettings);\n        this.target.toggle(clonedSettings);\n    }\n\n    /**\n     * Updates provided overlay settings\n     * @param settings settings to update\n     * @returns returns updated copy of provided overlay settings\n     */\n    protected updateOverlaySettings(settings: OverlaySettings): OverlaySettings {\n        if (settings && settings.positionStrategy) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.element.nativeElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n\n        return settings;\n    }\n}\n\n/**\n * Mark an element as an igxOverlay outlet container.\n * Directive instance is exported as `overlay-outlet` to be assigned to templates variables:\n * ```html\n * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n * ```\n */\n@Directive({\n    exportAs: 'overlay-outlet',\n    selector: '[igxOverlayOutlet]'\n})\nexport class IgxOverlayOutletDirective {\n    constructor(public element: ElementRef) { }\n\n    /** @hidden */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    exports: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxToggleModule { }\n","import { CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { IToggleView } from '../core/navigation/IToggleView';\nimport { EventEmitter } from '@angular/core';\n\n/** @hidden */\nexport enum Navigate {\n    Up = -1,\n    Down = 1\n}\n\n/** Key actions that have designated handlers in IgxDropDownComponent */\nexport enum DropDownActionKey {\n    ESCAPE = 'escape',\n    ENTER = 'enter',\n    SPACE = 'space'\n}\n\n/**\n * Interface that encapsulates onSelection event arguments - old selection, new selection and cancel selection.\n * @export\n */\nexport interface ISelectionEventArgs extends CancelableEventArgs {\n    oldSelection: IgxDropDownItemBase;\n    newSelection: IgxDropDownItemBase;\n}\n\n/**\n * Interface for an instance of IgxDropDownNavigationDirective\n * @export\n */\nexport interface IDropDownNavigationDirective {\n    target: any;\n    handleKeyDown(event: KeyboardEvent): void;\n    onArrowDownKeyDown(event?: KeyboardEvent): void;\n    onArrowUpKeyDown(event?: KeyboardEvent): void;\n    onEndKeyDown(event?: KeyboardEvent): void;\n    onHomeKeyDown(event?: KeyboardEvent): void;\n}\n\nexport const IGX_DROPDOWN_BASE = 'IgxDropDownBaseToken';\n\n/**\n * @hidden\n */\nexport interface IDropDownList {\n    onSelection: EventEmitter<ISelectionEventArgs>;\n    width: string;\n    height: string;\n    id: string;\n    maxHeight: string;\n    collapsed: boolean;\n    items: IgxDropDownItemBase[];\n    headers: IgxDropDownItemBase[];\n    focusedItem: IgxDropDownItemBase;\n    navigateFirst(): void;\n    navigateLast(): void;\n    navigateNext(): void;\n    navigatePrev(): void;\n    navigateItem(newIndex: number, direction?: Navigate): void;\n    onItemActionKey(key: DropDownActionKey, event?: Event): void;\n}\n\n/**\n * @hidden\n */\nexport interface IDropDownBase extends IDropDownList, IToggleView {\n    selectedItem: any;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onOpened: EventEmitter<void>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    allowItemsFocus?: boolean;\n    setSelectedItem(index: number): void;\n    selectItem(item: IgxDropDownItemBase, event?: Event): void;\n}\n\n","import { Injectable } from '@angular/core';\n\n/** @hidden */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxSelectionAPIService {\n    /**\n     * If primaryKey is defined, then multiple selection is based on the primaryKey, and it is array of numbers, strings, etc.\n     * If the primaryKey is omitted, then selection is based on the item data\n     */\n    protected selection: Map<string,  Set<any>> = new Map<string, Set<any>>();\n\n    /**\n     * Get current component selection.\n     * @param componentID ID of the component.\n     */\n    public get(componentID: string): Set<any> {\n        return this.selection.get(componentID);\n    }\n\n    /**\n     * Set new component selection.\n     * @param componentID ID of the component.\n     * @param newSelection The new component selection to be set.\n     */\n    public set(componentID: string, newSelection: Set<any>) {\n        if (!componentID) {\n            throw Error('Invalid value for component id!');\n        }\n        this.selection.set(componentID, newSelection);\n    }\n\n    /**\n     * Clears selection for component.\n     * @param componentID ID of the component.\n     */\n    public clear(componentID: string) {\n        this.selection.set(componentID, this.get_empty());\n    }\n\n    /**\n     * Get current component selection length.\n     * @param componentID ID of the component.\n     */\n    public size(componentID: string): number {\n        const sel = this.get(componentID);\n        return sel ? sel.size : 0;\n    }\n\n    /**\n     * Creates new selection that consist of the new item added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_item() one.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (add_items method) to accumulate selection for multiple items.\n     *\n     * @returns Selection after the new item is added.\n     */\n    public add_item(componentID: string, itemID, sel?: Set<any>): Set<any> {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            sel = this.get_empty();\n        }\n        if (!itemID && itemID !== 0) {\n            throw Error('Invalid value for item id!');\n        }\n        sel.add(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_items() one.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     *\n     * @returns Selection after the new items are added.\n     */\n    public add_items(componentID: string, itemIDs: any[], clearSelection?: boolean): Set<any> {\n        let selection: Set<any>;\n        if (clearSelection) {\n            selection = this.get_empty();\n        } else if (itemIDs && itemIDs.length === 0) {\n            selection = new Set(this.get(componentID));\n        }\n        itemIDs.forEach((item) => selection = this.add_item(componentID, item, selection));\n        return selection;\n    }\n\n    /**\n     * Add item to the current component selection.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (select_items method) to accumulate selection for multiple items.\n     */\n    public select_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.add_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Add items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     */\n    public select_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.add_items(componentID, itemID, clearSelection));\n    }\n\n    /**\n     * Creates new selection that consist of the new items excluded from the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_item() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (delete_items method) to accumulate deselected items.\n     *\n     * @returns Selection after the item is removed.\n     */\n    public delete_item(componentID: string, itemID, sel?: Set<any>) {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            return;\n        }\n        sel.delete(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items removed to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_items() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the items to remove from component selection.\n     *\n     * @returns Selection after the items are removed.\n     */\n    public delete_items(componentID: string, itemIDs: any[]): Set<any> {\n        let selection: Set<any>;\n        itemIDs.forEach((deselectedItem) => selection = this.delete_item(componentID, deselectedItem, selection));\n        return selection;\n    }\n\n    /**\n     * Remove item from the current component selection.\n     * @param componentID ID of the component, which we remove item from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (deselect_items method) to accumulate selection for multiple items.\n     */\n    public deselect_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.delete_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Remove items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     */\n    public deselect_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.delete_items(componentID, itemID));\n    }\n\n    /**\n     * Check if the item is selected in the component selection.\n     * @param componentID ID of the component.\n     * @param itemID ID of the item to search.\n     *\n     * @returns If item is selected.\n     */\n    public is_item_selected(componentID: string, itemID): boolean {\n        const sel = this.get(componentID);\n        if (!sel) {\n            return false;\n        }\n        return sel.has(itemID);\n    }\n\n    /**\n     * Get first element in the selection.\n     * This is correct when we have only one item in the collection (for single selection purposes)\n     * and the method returns that item.\n     * @param componentID ID of the component.\n     *\n     * @returns First element in the set.\n     */\n    public first_item(componentID: string) {\n        const sel = this.get(componentID);\n        if (sel && sel.size > 0) {\n            return sel.values().next().value;\n       }\n    }\n\n    /**\n     * Returns whether all items are selected.\n     * @param componentID ID of the component.\n     * @param dataCount: number Number of items in the data.\n     *\n     * @returns If all items are selected.\n     */\n    public are_all_selected(componentID: string, dataCount: number): boolean {\n        return dataCount > 0 && dataCount === this.size(componentID);\n    }\n\n    /**\n     * Returns whether any of the items is selected.\n     * @param componentID ID of the component.\n     * @param data Entire data array.\n     *\n     * @returns If there is any item selected.\n     */\n    public are_none_selected(componentID: string): boolean {\n        return this.size(componentID) === 0;\n    }\n\n    /**\n     * Get all primary key values from a data array. If there isn't a primary key defined that the entire data is returned instead.\n     * @param data Entire data array.\n     * @param primaryKey Data primary key.\n     *\n     * @returns Array of identifiers, either primary key values or the entire data array.\n     */\n    public get_all_ids(data, primaryKey?) {\n        return primaryKey ? data.map((x) => x[primaryKey]) : data;\n    }\n\n    /**\n     * Returns empty selection collection.\n     * @returns empty set.\n    */\n    public get_empty() {\n        return new Set();\n    }\n}\n","import { Component, Input, HostBinding } from '@angular/core';\n\nlet NEXT_ID = 0;\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-drop-down-item\"></ng-content>\n    `\n})\nexport class IgxDropDownGroupComponent {\n    private _id = NEXT_ID++;\n\n    /**\n     * @hidden @internal\n     */\n    public get labelId(): string {\n        return `igx-item-group-label-${this._id}`;\n    }\n\n    @HostBinding(`attr.aria-labelledby`)\n    public get labelledBy(): string {\n        return this.labelId;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'group';\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-drop-down__group')\n    public groupClass = true;\n    /**\n     * Sets/gets if the item group is disabled\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const groupState: boolean = myDropDownGroup.disabled;\n     * ...\n     * //set\n     * ...\n     * myDropDownGroup,disabled = false;\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My Items'\" [disabled]=\"true\">\n     *     <igx-drop-down-item *ngFor=\"let item of items[index]\" [value]=\"item.value\">\n     *         {{ item.text }}\n     *     </igx-drop-down-item>\n     * </igx-drop-down-item-group>\n     * ```\n     *\n     * **NOTE:** All items inside of a disabled drop down group will be treated as disabled\n     */\n    @Input()\n    @HostBinding(`attr.aria-disabled`)\n    @HostBinding('class.igx-drop-down__group--disabled')\n    public disabled = false;\n\n    /**\n     * Sets/gets the label of the item group\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const myLabel: string = myDropDownGroup.label;\n     * ...\n     * // set\n     * ...\n     * myDropDownGroup.label = 'My New Label';\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My new Label'\">\n     *      ...\n     * </igx-drop-down-item-group>\n     * ```\n    */\n    @Input()\n    public label: string;\n}\n","import { IDropDownBase, IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { Input, HostBinding, HostListener, ElementRef, Optional, Inject, DoCheck } from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DeprecateProperty, showMessage } from '../core/deprecateDecorators';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nlet NEXT_ID = 0;\nlet warningShown = false;\n\n/**\n * An abstract class defining a drop-down item:\n * With properties / styles for selection, highlight, height\n * Bindable property for passing data (`value: any`)\n * Parent component (has to be used under a parent with type `IDropDownBase`)\n * Method for handling click on Host()\n */\nexport abstract class IgxDropDownItemBase implements DoCheck {\n    /**\n     * @hidden\n     */\n    protected _focused = false;\n    protected _selected = false;\n    protected _index = null;\n    protected _disabled = false;\n    protected get hasIndex(): boolean {\n        return this._index !== null && this._index !== undefined;\n    }\n\n    /**\n     * Sets/gets the `id` of the item.\n     * ```html\n     * <igx-drop-down-item [id] = 'igx-drop-down-item-0'></igx-drop-down-item>\n     * ```\n     * ```typescript\n     * let itemId =  this.item.id;\n     * ```\n     * @memberof IgxSelectItemComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-drop-down-item-${NEXT_ID++}`;\n\n    /**\n     * @hidden @internal\n     */\n    public get itemID() {\n        return this;\n    }\n\n    /**\n     * The data index of the dropdown item.\n     *\n     * ```typescript\n     * // get the data index of the selected dropdown item\n     * let selectedItemIndex = this.dropdown.selectedItem.index\n     * ```\n     */\n    @Input()\n    public get index(): number {\n        if (this._index === null) {\n            warningShown = showMessage(\n                'IgxDropDownItemBase: Automatic index is deprecated.' +\n                'Bind in the template instead using `<igx-drop-down-item [index]=\"i\"` instead.`',\n                warningShown);\n            return this.itemIndex;\n        }\n        return this._index;\n    }\n\n    public set index(value) {\n        this._index = value;\n    }\n\n    /**\n     * Gets/sets the value of the item if the item is databound\n     *\n     * ```typescript\n     * // usage in IgxDropDownItemComponent\n     * // get\n     * let mySelectedItemValue = this.dropdown.selectedItem.value;\n     *\n     * // set\n     * let mySelectedItem = this.dropdown.selectedItem;\n     * mySelectedItem.value = { id: 123, name: 'Example Name' }\n     *\n     * // usage in IgxComboItemComponent\n     * // get\n     * let myComboItemValue = this.combo.items[0].value;\n     * ```\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item')\n    get itemStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the dropdown\n     *\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-drop-down__item--selected')\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @Input()\n    @DeprecateProperty(`IgxDropDownItemBase \\`isSelected\\` property is deprecated.\\n` +\n        `Use \\`selected\\` instead.`)\n    get isSelected(): boolean {\n        return this.selected;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    set isSelected(value: boolean) {\n        this.selected = value;\n    }\n\n    /**\n     * Sets/gets if the given item is focused\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemFocused = mySelectedItem.focused;\n     * ```\n     */\n    @HostBinding('class.igx-drop-down__item--focused')\n    get focused(): boolean {\n        return (!this.isHeader && !this.disabled) && this._focused;\n    }\n\n    /**\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" focused={{!item.focused}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`IgxDropDownItemBase \\`isFocused\\` property is depracated.\\n` +\n        `Use \\`focused\\` instead.`)\n    get isFocused(): boolean {\n        return this.focused;\n    }\n    /**\n     * @hidden @internal\n     */\n    set isFocused(value: boolean) {\n        this.focused = value;\n    }\n\n    /**\n     * Sets/gets if the given item is header\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemHeader = mySelectedItem.isHeader;\n     * ```\n     *\n     * ```html\n     *  <!--set-->\n     *  <igx-dropdown-item *ngFor=\"let item of items\">\n     *      <div *ngIf=\"items.indexOf(item) === 5; then item.isHeader = true\">\n     *          {{item.field}}\n*           </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-drop-down__header')\n    public isHeader: boolean;\n\n    /**\n     * Sets/gets if the given item is disabled\n     *\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let myItemIsDisabled = mySelectedItem.disabled;\n     * ```\n     *\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" disabled={{!item.disabled}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     * **NOTE:** Drop-down items inside of a disabled `IgxDropDownGroup` will always count as disabled\n     */\n    @Input()\n    @HostBinding('attr.aria-disabled')\n    @HostBinding('class.igx-drop-down__item--disabled')\n    public get disabled(): boolean {\n        return this.group ? this.group.disabled || this._disabled : this._disabled;\n    }\n\n    public set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the item. Default is 'option'.\n     *\n     * ```html\n     *  <igx-drop-down-item [role]=\"customRole\"></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'option';\n\n    /**\n     * Gets item index\n     * @hidden @internal\n     */\n    public get itemIndex(): number {\n        return this.dropDown.items.indexOf(this);\n    }\n\n    /**\n     * Gets item element height\n     * @hidden @internal\n     */\n    public get elementHeight(): number {\n        return this.elementRef.nativeElement.clientHeight;\n    }\n\n    /**\n     * Get item html element\n     * @hidden @internal\n     */\n    public get element(): ElementRef {\n        return this.elementRef;\n    }\n\n    constructor(\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Optional() protected group: IgxDropDownGroupComponent,\n        @Optional() @Inject(IgxSelectionAPIService) protected selection?: IgxSelectionAPIService\n    ) { }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n    }\n\n    ngDoCheck(): void {\n        if (this._selected) {\n            const dropDownSelectedItem = this.dropDown.selectedItem;\n            if (!dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            } else if (this.hasIndex\n                ? this._index !== dropDownSelectedItem.index || this.value !== dropDownSelectedItem.value :\n                this !== dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            }\n        }\n    }\n}\n","import {\n    Component,\n    DoCheck,\n    HostListener,\n    HostBinding\n} from '@angular/core';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\n\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item',\n    templateUrl: 'drop-down-item.component.html'\n})\nexport class IgxDropDownItemComponent extends IgxDropDownItemBase implements DoCheck {\n    /**\n     * @inheritdoc\n     */\n    get focused(): boolean {\n        let focusedState = this._focused;\n        if (this.hasIndex) {\n            const focusedItem = this.selection.first_item(`${this.dropDown.id}-active`);\n            const focusedIndex = focusedItem ? focusedItem.index : -1;\n            focusedState = this._index === focusedIndex;\n        }\n        return !this.isHeader && !this.disabled && focusedState;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n    /**\n     * @inheritdoc\n     */\n    get selected(): boolean {\n        if (this.hasIndex) {\n            const item = this.selection.first_item(`${this.dropDown.id}`);\n            return item ? item.index === this._index && item.value === this.value : false;\n        }\n        return this._selected;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    get setTabIndex() {\n        const shouldSetTabIndex = this.dropDown.allowItemsFocus && !(this.disabled || this.isHeader);\n        if (shouldSetTabIndex) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        if (this.selection) {\n            this.dropDown.selectItem(this, event);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('mousedown', ['$event'])\n    mousedownHandler(event) {\n        event.preventDefault();\n    }\n}\n","import {\n    Input, HostBinding, ElementRef, QueryList, Output, EventEmitter, ChangeDetectorRef\n} from '@angular/core';\n\nimport { Navigate, ISelectionEventArgs } from './drop-down.common';\nimport { IDropDownList } from './drop-down.common';\nimport { DropDownActionKey } from './drop-down.common';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\n\nlet NEXT_ID = 0;\n\n/**\n * An abstract class, defining a drop-down component, with:\n * Properties for display styles and classes\n * A collection items of type `IgxDropDownItemBase`\n * Properties and methods for navigating (highlighting/focusing) items from the collection\n * Properties and methods for selecting items from the collection\n */\nexport abstract class IgxDropDownBase implements IDropDownList {\n    protected _width;\n    protected _height;\n    protected _focusedItem: any = null;\n    protected _id = `igx-drop-down-${NEXT_ID++}`;\n\n    /**\n     * Get dropdown's html element of it scroll container\n     */\n    protected get scrollContainer() {\n        return this.element;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public children: QueryList<IgxDropDownItemBase>;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<ISelectionEventArgs>();\n\n    /**\n     *  Gets/Sets the width of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentWidth = this.dropdown.width;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [width]='160px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public width: string;\n\n    /**\n     * Gets/Sets the height of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentHeight = this.dropdown.height;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [height]='400px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public height: string;\n\n    /**\n     * Gets/Sets the drop down's id\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentId = this.dropdown.id;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [id]='newDropDownId'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * Gets/Sets the drop down's container max height.\n     *\n     * ```typescript\n     * // get\n     * let maxHeight = this.dropdown.maxHeight;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [maxHeight]='200px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    @HostBinding('style.maxHeight')\n    public maxHeight = null;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down')\n    public cssClass = true;\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxDropDownItemBase[] {\n        const items: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * Get all header items\n     *\n     * ```typescript\n     * let myDropDownHeaderItems = this.dropdown.headers;\n     * ```\n     */\n    public get headers(): IgxDropDownItemBase[] {\n        const headers: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n\n        return headers;\n    }\n\n    /**\n     * Get dropdown html element\n     *\n     * ```typescript\n     * let myDropDownElement = this.dropdown.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     */\n    public abstract collapsed: boolean;\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef) { }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n            case DropDownActionKey.SPACE:\n                this.selectItem(this.focusedItem, event);\n                break;\n            case DropDownActionKey.ESCAPE:\n        }\n    }\n\n    /**\n     * Emits onSelection with the target item & event\n     * @hidden @internal\n     * @param newSelection the item selected\n     * @param event the event that triggered the call\n     */\n    public selectItem(newSelection?: IgxDropDownItemBase, event?: Event) {\n        this.onSelection.emit({\n            newSelection,\n            oldSelection: null,\n            cancel: false\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBase {\n        return this._focusedItem;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set focusedItem(item: IgxDropDownItemBase) {\n        this._focusedItem = item;\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        let index = -1;\n        if (this._focusedItem) {\n            index = currentIndex ? currentIndex : this.focusedItem.itemIndex;\n        }\n        const newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);\n        this.navigateItem(newIndex);\n    }\n\n    protected getNearestSiblingFocusableItemIndex(startIndex: number, direction: Navigate): number {\n        let index = startIndex;\n        const items = this.items;\n        while (items[index + direction] && items[index + direction].disabled) {\n            index += direction;\n        }\n\n        index += direction;\n        if (index >= 0 && index < items.length) {\n            return index;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * @param newIndex number - the index of the item in the `items` collection\n     */\n    public navigateItem(newIndex: number) {\n        if (newIndex !== -1) {\n            const oldItem = this._focusedItem;\n            const newItem = this.items[newIndex];\n            if (oldItem) {\n                oldItem.focused = false;\n            }\n            this.focusedItem = newItem;\n            this.scrollToHiddenItem(newItem);\n            this.focusedItem.focused = true;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        this.navigate(Navigate.Down, -1);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        this.navigate(Navigate.Up, this.items.length);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        this.navigate(Navigate.Down);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        this.navigate(Navigate.Up);\n    }\n\n    protected scrollToHiddenItem(newItem: IgxDropDownItemBase) {\n        const elementRect = newItem.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        if (parentRect.top > elementRect.top) {\n            this.scrollContainer.scrollTop -= (parentRect.top - elementRect.top);\n        }\n\n        if (parentRect.bottom < elementRect.bottom) {\n            this.scrollContainer.scrollTop += (elementRect.bottom - parentRect.bottom);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\n@Component({\n    selector: 'igx-display-container',\n    template: `\n        <ng-template\n            #display_container\n            igxScrollInertia\n            [IgxScrollInertiaScrollContainer]=\"scrollContainer\"\n            [IgxScrollInertiaDirection]=\"scrollDirection\">\n        </ng-template>\n    `\n})\nexport class DisplayContainerComponent {\n    @ViewChild('display_container', { read: ViewContainerRef })\n    public _vcr;\n\n    public scrollDirection: string;\n\n    @HostBinding('class')\n    public cssClass = 'igx-display-container';\n\n    @HostBinding('class.igx-display-container--inactive')\n    public notVirtual = true;\n\n    public scrollContainer;\n\n    constructor(public cdr: ChangeDetectorRef, public _viewContainer: ViewContainerRef) { }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-horizontal-virtual-helper',\n    template: '<div #horizontal_container class=\"igx-vhelper__placeholder-content\" [style.width.px]=\"width\"></div>'\n})\nexport class HVirtualHelperComponent {\n    @ViewChild('horizontal_container', { read: ViewContainerRef }) public _vcr;\n    @Input() public width: number;\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--horizontal';\n\n    constructor(public elementRef: ElementRef) { }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, OnDestroy } from '@angular/core';\n\n@Component({\n    selector: 'igx-virtual-helper',\n    template: '<div #container class=\"igx-vhelper__placeholder-content\" [style.height.px]=\"height\"></div>'\n})\nexport class VirtualHelperComponent implements OnDestroy {\n    @HostBinding('scrollTop')\n    public scrollTop;\n\n    @ViewChild('container', { read: ViewContainerRef }) public _vcr;\n    @Input() public itemsLength: number;\n\n    public set height(value) {\n        if (this.destroyed) {\n            return;\n        }\n        this._height = value;\n        this.cdr.detectChanges();\n    }\n\n    public get height() {\n        return this._height;\n    }\n\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--vertical';\n\n    public destroyed;\n    private _height: number;\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    public ngOnDestroy() {\n        this.destroyed = true;\n    }\n\n}\n","import { Directive, Input, ElementRef, NgZone, OnInit, NgModule, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxScrollInertia]' })\nexport class IgxScrollInertiaDirective implements OnInit, OnDestroy {\n\n    constructor(private element: ElementRef, private _zone: NgZone) {\n\n    }\n\n    @Input()\n    public IgxScrollInertiaDirection: string;\n\n    @Input()\n    public IgxScrollInertiaScrollContainer: any;\n\n    @Input()\n    public wheelStep = 50;\n\n    @Input()\n    public inertiaStep = 1.5;\n\n    @Input()\n    public swipeToleranceX = 20;\n\n    @Input()\n    public inertiaDeltaY = 3;\n\n    @Input()\n    public inertiaDeltaX = 2;\n\n    @Input()\n    public inertiaDuration = 0.5;\n\n    private _touchInertiaAnimID;\n    private _startX;\n    private _startY;\n    private _touchStartX;\n    private _touchStartY;\n    private _lastTouchEnd;\n    private _lastTouchX;\n    private _lastTouchY;\n    private _savedSpeedsX = [];\n    private _savedSpeedsY;\n    private _totalMovedX;\n    private _offsetRecorded;\n    private _offsetDirection;\n    private _touchPrevented;\n    private _lastMovedX;\n    private _lastMovedY;\n    private _gestureObject;\n    private setPointerCaptureFName = typeof Element.prototype['msSetPointerCapture'] === 'function' ?\n    'msSetPointerCapture' :\n    'setPointerCapture';\n    private releasePointerCaptureFName = typeof Element.prototype['msReleasePointerCapture'] === 'function' ?\n    'msReleasePointerCapture' :\n    'releasePointerCapture';\n    private _pointer;\n    private _nextX;\n    private _nextY;\n\n    ngOnInit(): void {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.addEventListener('wheel',\n                    (evt) => { this.onWheel(evt); });\n            targetElem.addEventListener('touchstart',\n                    (evt) => { this.onTouchStart(evt); });\n            targetElem.addEventListener('touchmove',\n                    (evt) => { this.onTouchMove(evt); });\n            targetElem.addEventListener('touchend',\n                    (evt) => { this.onTouchEnd(evt); });\n            targetElem.addEventListener('pointerdown',\n                    (evt) => { this.onPointerDown(evt); });\n            targetElem.addEventListener('pointerup',\n                     (evt) => { this.onPointerUp(evt); });\n            targetElem.addEventListener('MSGestureStart',\n                    (evt) => { this.onMSGestureStart(evt); });\n            targetElem.addEventListener('MSGestureChange',\n                    (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n     /**\n     * @hidden\n     * Function that is called when scrolling with the mouse wheel or using touchpad\n     */\n    protected onWheel(evt) {\n        // if no scrollbar return\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        let scrollDeltaX;\n        let scrollDeltaY;\n        const scrollStep = this.wheelStep;\n        const minWheelStep = 1 / this.wheelStep;\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        if (evt.wheelDeltaX) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaX = -evt.wheelDeltaX / 120;\n\n            if (-minWheelStep < scrollDeltaX && scrollDeltaX < minWheelStep) {\n                scrollDeltaX = Math.sign(scrollDeltaX) * minWheelStep;\n            }\n        } else if (evt.deltaX) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaX = this.calcAxisCoords(evt.deltaX, -1, 1);\n        }\n\n        /** Get delta for the Y axis*/\n        if (evt.wheelDeltaY) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaY = -evt.wheelDeltaY / 120;\n\n            if (-minWheelStep < scrollDeltaY && scrollDeltaY < minWheelStep) {\n                scrollDeltaY = Math.sign(scrollDeltaY) * minWheelStep;\n            }\n        } else if (evt.deltaY) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaY = this.calcAxisCoords(evt.deltaY, -1, 1);\n        }\n        if (scrollDeltaX && this.IgxScrollInertiaDirection === 'horizontal') {\n            this._scrollToX(\n                this._startX + scrollDeltaX * scrollStep\n            );\n            const curScrollLeft = this.IgxScrollInertiaScrollContainer.scrollLeft;\n            const maxScrollLeft = parseInt(this.IgxScrollInertiaScrollContainer.children[0].style.width, 10);\n            if (0 < curScrollLeft && curScrollLeft < maxScrollLeft) {\n                // Prevent navigating through pages when scrolling on Mac\n                evt.preventDefault();\n            }\n        } else if (scrollDeltaY && this.IgxScrollInertiaDirection === 'vertical') {\n            this._scrollToY(\n                this._startY + scrollDeltaY * scrollStep\n            );\n            this.preventParentScroll(evt);\n        }\n    }\n\n    /**\n     * @hidden\n     * When there is still room to scroll up/down prevent the parent elements from scrolling too.\n     */\n    protected preventParentScroll(evt) {\n        const curScrollTop = this.IgxScrollInertiaScrollContainer.scrollTop;\n        const maxScrollTop = this.IgxScrollInertiaScrollContainer.children[0].scrollHeight -\n            this.IgxScrollInertiaScrollContainer.offsetHeight;\n        if (0 < curScrollTop && curScrollTop < maxScrollTop) {\n            evt.preventDefault();\n            if (evt.stopPropagation) {\n                evt.stopPropagation();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called the first moment we start interacting with the content on a touch device\n     */\n    protected onTouchStart(event) {\n        if (typeof MSGesture === 'function' || !this.IgxScrollInertiaScrollContainer) {\n            return false;\n        }\n\n        // stops any current ongoing inertia\n        cancelAnimationFrame(this._touchInertiaAnimID);\n\n        const touch = event.touches[ 0 ];\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        this._touchStartX = touch.pageX;\n        this._touchStartY = touch.pageY;\n\n        this._lastTouchEnd = new Date().getTime();\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n        this._savedSpeedsX = [];\n        this._savedSpeedsY = [];\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n\n        this._touchPrevented = false;\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to scroll the content based on touch interactions\n     */\n    protected onTouchMove(event) {\n        if (typeof MSGesture === 'function') {\n            this._touchPrevented = false;\n            return false;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n\n        const touch = event.touches[ 0 ];\n        const destX = this._startX + (this._touchStartX - touch.pageX) * Math.sign(this.inertiaStep);\n        const destY = this._startY + (this._touchStartY - touch.pageY) * Math.sign(this.inertiaStep);\n\n        /* Handle complex touchmoves when swipe stops but the toch doesn't end and then a swipe is initiated again */\n        /* **********************************************************/\n\n\n        const timeFromLastTouch = (new Date().getTime()) - this._lastTouchEnd;\n        if (timeFromLastTouch !== 0 && timeFromLastTouch < 100) {\n            const speedX = (this._lastTouchX - touch.pageX) / timeFromLastTouch;\n            const speedY = (this._lastTouchY - touch.pageY) / timeFromLastTouch;\n\n            // Save the last 5 speeds between two touchmoves on X axis\n            if (this._savedSpeedsX.length < 5) {\n                this._savedSpeedsX.push(speedX);\n            } else {\n                this._savedSpeedsX.shift();\n                this._savedSpeedsX.push(speedX);\n            }\n\n            // Save the last 5 speeds between two touchmoves on Y axis\n            if (this._savedSpeedsY.length < 5) {\n                this._savedSpeedsY.push(speedY);\n            } else {\n                this._savedSpeedsY.shift();\n                this._savedSpeedsY.push(speedY);\n            }\n        }\n        this._lastTouchEnd = new Date().getTime();\n        this._lastMovedX = this._lastTouchX - touch.pageX;\n        this._lastMovedY = this._lastTouchY - touch.pageY;\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n\n        this._totalMovedX += this._lastMovedX;\n\n        let scrolledXY; // Object: {x, y}\n        /*\tDo not scroll using touch untill out of the swipeToleranceX bounds */\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            scrolledXY = this._scrollTo(this._startX, destY);\n        } else {\n            /*\tRecord the direction the first time we are out of the swipeToleranceX bounds.\n\t\t\t*\tThat way we know which direction we apply the offset so it doesn't hickup when moving out of the swipeToleranceX bounds */\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n\n            /*\tScroll with offset ammout of swipeToleranceX in the direction we have exited the bounds and\n            don't change it after that ever until touchend and again touchstart */\n            scrolledXY = this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX,\n                destY);\n        }\n\n        if (scrolledXY.x === 0 && scrolledXY.y === 0) {\n            this._touchPrevented = true;\n        }\n\n        // On Safari preventing the touchmove would prevent default page scroll behaviour even if there is the element doesn't have overflow\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event);\n        }\n    }\n\n    protected onTouchEnd(event) {\n        if (typeof MSGesture === 'function') {\n            return;\n        }\n        let speedX = 0;\n        let speedY = 0;\n\n        // savedSpeedsX and savedSpeedsY have same length\n        for (let i = 0; i < this._savedSpeedsX.length; i++) {\n            speedX += this._savedSpeedsX[ i ];\n            speedY += this._savedSpeedsY[ i ];\n        }\n        speedX = this._savedSpeedsX.length ? speedX / this._savedSpeedsX.length : 0;\n        speedY = this._savedSpeedsX.length ? speedY / this._savedSpeedsY.length : 0;\n\n         // Use the lastMovedX and lastMovedY to determine if the swipe stops without lifting the finger so we don't start inertia\n        if ((Math.abs(speedX) > 0.1 || Math.abs(speedY) > 0.1) &&\n                        (Math.abs(this._lastMovedX) > 2 || Math.abs(this._lastMovedY) > 2)) {\n                    this._inertiaInit(speedX, speedY);\n        }\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch starting on a touch device on IE/Edge\n     */\n    protected onPointerDown(event) {\n        if (!event || (event.pointerType !== 2 && event.pointerType !== 'touch') ||\n            typeof MSGesture !== 'function') {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        // setPointerCaptureFName is the name of the function that is supported\n        event.target[this.setPointerCaptureFName](this._pointer = event.pointerId);\n\n        // create gestureObject only one time to prevent overlapping during intertia\n        if (!this._gestureObject) {\n            this._gestureObject = new MSGesture();\n            this._gestureObject.target = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n        }\n        this._gestureObject.addPointer(this._pointer);\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch ending on a touch device on IE/Edge\n     */\n    protected onPointerUp(event) {\n        if (!this._pointer) {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        /* releasePointerCaptureFName is the name of the function that is supported */\n        event.target[ this.releasePointerCaptureFName ](this._pointer);\n\n        delete this._pointer;\n    }\n\n    /**\n     * @hidden\n     *  Function that is called when a gesture begins on IE/Edge\n     */\n    protected onMSGestureStart(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n\n        this._touchStartX = event.screenX;\n        this._touchStartY = event.screenY;\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n        return false;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge\n     */\n    protected onMSGestureChange(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        const touchPos = event,\n            destX = this._startX + this._touchStartX - touchPos.screenX,\n            destY = this._startY + this._touchStartY - touchPos.screenY;\n        /* Logic regarding x tolerance to prevent accidental horizontal scrolling when scrolling vertically */\n        this._totalMovedX = this._touchStartX - touchPos.screenX;\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            /* Do not scroll horizontally yet while in the tolerance range */\n            this._scrollToY(destY);\n        } else {\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n            /* Once the tolerance is exceeded it can be scrolled horizontally */\n            this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);\n        }\n\n        return false;\n    }\n\n    private calcAxisCoords(target, min, max) {\n        if (target === undefined || target < min) {\n            target = min;\n        } else if (target > max) {\n            target = max;\n        }\n\n        return target;\n    }\n\n    private _scrollTo(destX, destY) {\n        const curPosX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        const curPosY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n         // TODO Trigger scrolling event?\n        const scrolledX = this._scrollToX(destX);\n        const scrolledY = this._scrollToY(destY);\n\n        return { x: scrolledX, y: scrolledY };\n    }\n    private _scrollToX(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollLeft = dest;\n    }\n    private _scrollToY(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollTop = dest;\n    }\n\n   protected _inertiaInit(speedX, speedY) {\n    const stepModifer = this.inertiaStep,\n        inertiaDuration = this.inertiaDuration;\n    let x = 0;\n    this._nextX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n    this._nextY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n    // Sets timeout until executing next movement iteration of the inertia\n    const inertiaStep = () => {\n        if (x > 6) {\n            cancelAnimationFrame(this._touchInertiaAnimID);\n            return;\n        }\n\n        if (Math.abs(speedX) > Math.abs(speedY)) {\n            x += 0.05 / (1 * inertiaDuration);\n        } else {\n            x += 0.05 / (1 * inertiaDuration);\n        }\n\n        if (x <= 1) {\n            // We use constant quation to determine the offset without speed falloff befor x reaches 1\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += 1 * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += 1 * speedY * 15 * stepModifer;\n            }\n        } else {\n            // We use the quation \"y = 2 / (x + 0.55) - 0.3\" to determine the offset\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += Math.abs(2 / (x + 0.55) - 0.3) * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += Math.abs(2 / (x + 0.55) - 0.3) * speedY * 15 * stepModifer;\n            }\n        }\n\n        // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse\n        this._scrollTo(this._nextX, this._nextY);\n\n        this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n    };\n\n    // Start inertia and continue it recursively\n    this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n   }\n\n    ngOnDestroy() {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.removeEventListener('wheel',\n                (evt) => { this.onWheel(evt); });\n            targetElem.removeEventListener('touchstart',\n                (evt) => { this.onTouchStart(evt); });\n            targetElem.removeEventListener('touchmove',\n                (evt) => { this.onTouchMove(evt); });\n            targetElem.removeEventListener('touchend',\n                (evt) => { this.onTouchEnd(evt); });\n            targetElem.removeEventListener('pointerdown',\n                (evt) => { this.onPointerDown(evt); });\n            targetElem.removeEventListener('pointerup',\n                (evt) => { this.onPointerUp(evt); });\n            targetElem.removeEventListener('MSGestureStart',\n                (evt) => { this.onMSGestureStart(evt); });\n            targetElem.removeEventListener('MSGestureChange',\n                (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxScrollInertiaDirective],\n    exports: [IgxScrollInertiaDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxScrollInertiaModule {\n}\n\n","import { Injectable } from '@angular/core';\nimport { IgxGridForOfDirective } from './for_of.directive';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfSyncService {\n\n    private _master: Map<string, IgxGridForOfDirective<any>> = new Map<string, IgxGridForOfDirective<any>>();\n\n    /**\n     * @hidden\n     */\n    public isMaster(directive: IgxGridForOfDirective<any>): boolean {\n        return this._master.get(directive.igxForScrollOrientation) === directive;\n    }\n\n    /**\n     * @hidden\n     */\n    public setMaster(directive: IgxGridForOfDirective<any>, forced = false) {\n        const orientation = directive.igxForScrollOrientation;\n        if (orientation && (forced || !this._master.has(orientation))) {\n            this._master.set(orientation, directive);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public resetMaster() {\n        this._master.clear();\n    }\n\n    /**\n     * @hidden\n     */\n    public sizesCache(dir: string): number[] {\n        return this._master.get(dir).sizesCache;\n    }\n\n    /**\n     * @hidden\n     */\n    public chunkSize(dir: string): number {\n        return this._master.get(dir).state.chunkSize;\n    }\n}\n","import { CommonModule, NgForOfContext } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    DoCheck,\n    EmbeddedViewRef,\n    EventEmitter,\n    Input,\n    IterableChanges,\n    IterableDiffer,\n    IterableDiffers,\n    NgModule,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    TrackByFunction,\n    ViewContainerRef,\n    ViewRef\n} from '@angular/core';\n\nimport { DisplayContainerComponent } from './display.container';\nimport { HVirtualHelperComponent } from './horizontal.virtual.helper.component';\nimport { VirtualHelperComponent } from './virtual.helper.component';\nimport { IgxScrollInertiaModule } from './../scroll-inertia/scroll_inertia.directive';\nimport { IgxForOfSyncService } from './for_of.sync.service';\n\n@Directive({ selector: '[igxFor][igxForOf]' })\nexport class IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck, OnDestroy {\n\n    /**\n     * An @Input property that sets the data to be rendered.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForOf: any[];\n\n    /**\n     * An @Input property that sets the property name from which to read the size in the data object.\n     */\n    @Input()\n    public igxForSizePropName;\n\n    /**\n     * An @Input property that specifies the scroll orientation.\n     * Scroll orientation can be \"vertical\" or \"horizontal\".\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollOrientation: string;\n\n    /**\n     * Optionally pass the parent `igxFor` instance to create a virtual template scrolling both horizontally and vertically.\n     * ```html\n     * <ng-template #scrollContainer igxFor let-rowData [igxForOf]=\"data\"\n     *       [igxForScrollOrientation]=\"'vertical'\"\n     *       [igxForContainerSize]=\"'500px'\"\n     *       [igxForItemSize]=\"'50px'\"\n     *       let-rowIndex=\"index\">\n     *       <div [style.display]=\"'flex'\" [style.height]=\"'50px'\">\n     *           <ng-template #childContainer igxFor let-item [igxForOf]=\"data\"\n     *               [igxForScrollOrientation]=\"'horizontal'\"\n     *               [igxForScrollContainer]=\"parentVirtDir\"\n     *               [igxForContainerSize]=\"'500px'\">\n     *                   <div [style.min-width]=\"'50px'\">{{rowIndex}} : {{item.text}}</div>\n     *           </ng-template>\n     *       </div>\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollContainer: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the container along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the container and for \"vertical\" is the height.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForContainerSize]=\"'500px'\"\n     *      [igxForScrollOrientation]=\"'horizontal'\">\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForContainerSize: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the item along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the column and for \"vertical\" is the height or the row.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForItemSize: any;\n\n    /**\n     * @hidden\n     */\n    public dc: ComponentRef<DisplayContainerComponent>;\n\n    /**\n     * The current state of the directive. It contains `startIndex` and `chunkSize`.\n     * state.startIndex - The index of the item at which the current visible chunk begins.\n     * state.chunkSize - The number of items the current visible chunk holds.\n     * These options can be used when implementing remote virtualization as they provide the necessary state information.\n     * ```typescript\n     * const gridState = this.parentVirtDir.state;\n     * ```\n     */\n    public state: IForOfState = {\n        startIndex: 0,\n        chunkSize: 0\n    };\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * ```typescript\n     * this.parentVirtDir.totalItemCount = data.Count;\n     * ```\n     */\n    public totalItemCount: number = null;\n\n    /**\n     * An event that is emitted after a new chunk has been loaded.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkLoad)=\"chunkLoad($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkLoad(e){\n     * alert(\"chunk loaded!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * An event that is emitted after data has been changed.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onDataChanged)=\"dataChanged($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * dataChanged(e){\n     * alert(\"data changed!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDataChanged = new EventEmitter<any>();\n\n    @Output()\n    public onBeforeViewDestroyed = new EventEmitter<EmbeddedViewRef<any>>();\n\n    /**\n     * An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.\n     * Can be used for implementing remote load on demand for the igxFor data.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkPreload)=\"chunkPreload($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkPreload(e){\n     * alert(\"chunk is loading!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkPreload = new EventEmitter<IForOfState>();\n\n    protected hScroll;\n    protected func;\n    protected _sizesCache: number[] = [];\n    protected vh: ComponentRef<VirtualHelperComponent>;\n    protected hvh: ComponentRef<HVirtualHelperComponent>;\n    protected _differ: IterableDiffer<T> | null = null;\n    protected _trackByFn: TrackByFunction<T>;\n    protected heightCache = [];\n    private _adjustToIndex;\n    private MAX_PERF_SCROLL_DIFF = 4;\n\n    protected get sizesCache(): number[] {\n        return this._sizesCache;\n    }\n    protected set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    private get _isScrolledToBottom() {\n        if (!this.getVerticalScroll()) {\n            return true;\n        }\n        const scrollTop = this.getVerticalScroll().scrollTop;\n        const scrollHeight = this.getVerticalScroll().scrollHeight;\n        // Use === and not >= because `scrollTop + container size` can't be bigger than `scrollHeight`, unless something isn't updated.\n        // Also use Math.round because Chrome has some inconsistencies and `scrollTop + container` can be float when zooming the page.\n        return Math.round(scrollTop + this.igxForContainerSize) === scrollHeight;\n    }\n\n    private get _isAtBottomIndex() {\n        return this.igxForOf && this.state.startIndex + this.state.chunkSize > this.igxForOf.length;\n    }\n\n    // Start properties related to virtual height handling due to browser limitation\n    /** Maximum height for an element of the browser. */\n    private _maxHeight;\n\n    /** Height that is being virtualized. */\n    protected _virtHeight = 0;\n\n    /**\n     * Ratio for height that's being virtualizaed and the one visible\n     * If _virtHeightRatio = 1, the visible height and the virtualized are the same, also _maxHeight > _virtHeight.\n     */\n    private _virtHeightRatio = 1;\n\n    /** Internal track for scroll top that is being virtualized */\n    protected _virtScrollTop = 0;\n\n    /** If the next onScroll event is triggered due to internal setting of scrollTop */\n    protected _bScrollInternal = false;\n    // End properties related to virtual height handling\n\n    protected _embeddedViews: Array<EmbeddedViewRef<any>> = [];\n\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        protected _template: TemplateRef<NgForOfContext<T>>,\n        protected _differs: IterableDiffers,\n        private resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef,\n        protected _zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    protected get isRemote(): boolean {\n        return this.totalItemCount !== null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected removeScrollEventListeners() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._zone.runOutsideAngular(() =>\n                this.getHorizontalScroll().removeEventListener('scroll', this.func)\n            );\n        } else {\n            const vertical = this.getVerticalScroll();\n            if (vertical) {\n                this._zone.runOutsideAngular(() =>\n                    vertical.removeEventListener('scroll', this.verticalScrollHandler)\n                );\n            }\n        }\n    }\n\n    public verticalScrollHandler(event) {\n        this.onScroll(event);\n    }\n\n    public isScrollable() {\n        return this.vh.instance.height > parseInt(this.igxForContainerSize, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        let totalSize = 0;\n        const vc = this.igxForScrollContainer ? this.igxForScrollContainer._viewContainer : this._viewContainer;\n        this.igxForSizePropName = this.igxForSizePropName || 'width';\n\n        const dcFactory: ComponentFactory<DisplayContainerComponent> = this.resolver.resolveComponentFactory(DisplayContainerComponent);\n        this.dc = this._viewContainer.createComponent(dcFactory, 0);\n        this.dc.instance.scrollDirection = this.igxForScrollOrientation;\n        if (typeof MSGesture === 'function') {\n            // On Edge and IE when scrolling on touch the page scroll instead of the grid.\n            this.dc.instance._viewContainer.element.nativeElement.style.touchAction = 'none';\n        }\n        if (this.igxForOf && this.igxForOf.length) {\n            this.dc.instance.notVirtual = !(this.igxForContainerSize && this.state.chunkSize < this.igxForOf.length);\n            totalSize = this.initSizesCache(this.igxForOf);\n            this.hScroll = this.getElement(vc, 'igx-horizontal-virtual-helper');\n            if (this.hScroll) {\n                this.state.startIndex = this.getIndexAt(this.hScroll.scrollLeft, this.sizesCache, 0);\n            }\n            this.state.chunkSize = this._calculateChunkSize();\n            for (let i = 0; i < this.state.chunkSize && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n                    this._template,\n                    { $implicit: input, index: this.igxForOf.indexOf(input) }\n                );\n                this._embeddedViews.push(embeddedView);\n            }\n        }\n\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n            const factory: ComponentFactory<VirtualHelperComponent> = this.resolver.resolveComponentFactory(VirtualHelperComponent);\n            this.vh = vc.createComponent(factory);\n\n            this._maxHeight = this._calcMaxBrowserHeight();\n            this.vh.instance.height = this.igxForOf ? this._calcHeight() : 0;\n            this._zone.runOutsideAngular(() => {\n                this.verticalScrollHandler = this.verticalScrollHandler.bind(this);\n                this.vh.instance.elementRef.nativeElement.addEventListener('scroll', this.verticalScrollHandler);\n                this.dc.instance.scrollContainer = this.vh.instance.elementRef.nativeElement;\n            });\n        }\n\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.func = (evt) => { this.onHScroll(evt); };\n            this.hScroll = this.getElement(vc, 'igx-horizontal-virtual-helper');\n            if (!this.hScroll) {\n                const hvFactory: ComponentFactory<HVirtualHelperComponent> =\n                    this.resolver.resolveComponentFactory(HVirtualHelperComponent);\n                this.hvh = vc.createComponent(hvFactory);\n                this.hvh.instance.width = totalSize;\n                this.hScroll = this.hvh.instance.elementRef.nativeElement;\n                this._zone.runOutsideAngular(() => {\n                    this.hvh.instance.elementRef.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.hScroll;\n                });\n            } else {\n                this._zone.runOutsideAngular(() => {\n                    this.hScroll.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.hScroll;\n                });\n            }\n\n            const scrollOffset = this.hScroll.scrollLeft -\n                (this.sizesCache && this.sizesCache.length ? this.sizesCache[this.state.startIndex] : 0);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.removeScrollEventListeners();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        const forOf = 'igxForOf';\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange && this.igxForScrollOrientation === 'vertical') {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    return;\n                }\n                this._updateSizeCache();\n                this._zone.run(() => {\n                    this._applyChanges();\n                    this.cdr.markForCheck();\n                    this._updateScrollOffset();\n                    this.onDataChanged.emit();\n                });\n            }\n        }\n    }\n\n    /**\n     * Shifts the scroll thumb position.\n     * ```typescript\n     * this.parentVirtDir.addScrollTop(5);\n     * ```\n     * @param addTop negative value to scroll up and positive to scroll down;\n     */\n    public addScrollTop(addTop: number): boolean {\n        if (addTop === 0 && this.igxForScrollOrientation === 'horizontal') {\n            return false;\n        }\n        const originalVirtScrollTop = this._virtScrollTop;\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxVirtScrollTop = this._virtHeight - containerSize;\n\n        this._bScrollInternal = true;\n        this._virtScrollTop += addTop;\n        this._virtScrollTop = this._virtScrollTop > 0 ?\n            (this._virtScrollTop < maxVirtScrollTop ? this._virtScrollTop : maxVirtScrollTop) :\n            0;\n\n        this.vh.instance.elementRef.nativeElement.scrollTop += addTop / this._virtHeightRatio;\n        if (Math.abs(addTop / this._virtHeightRatio) < 1) {\n            // Actual scroll delta that was added is smaller than 1 and onScroll handler doesn't trigger when scrolling < 1px\n            const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n            // scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;\n            this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        }\n\n        const curScrollTop = this.vh.instance.elementRef.nativeElement.scrollTop;\n        const maxRealScrollTop = this.vh.instance.elementRef.nativeElement.scrollHeight - containerSize;\n        if ((this._virtScrollTop > 0 && curScrollTop === 0) ||\n            (this._virtScrollTop < maxVirtScrollTop && curScrollTop === maxRealScrollTop)) {\n            // Actual scroll position is at the top or bottom, but virtual one is not at the top or bottom (there's more to scroll)\n            // Recalculate actual scroll position based on the virtual scroll.\n            this.vh.instance.elementRef.nativeElement.scrollTop = this._virtScrollTop / this._virtHeightRatio;\n        } else if (this._virtScrollTop === 0 && curScrollTop > 0) {\n            // Actual scroll position is not at the top, but virtual scroll is. Just update the actual scroll\n            this.vh.instance.elementRef.nativeElement.scrollTop = 0;\n        } else if (this._virtScrollTop === maxVirtScrollTop && curScrollTop < maxRealScrollTop) {\n            // Actual scroll position is not at the bottom, but virtual scroll is. Just update the acual scroll\n            this.vh.instance.elementRef.nativeElement.scrollTop = maxRealScrollTop;\n        }\n        return this._virtScrollTop !== originalVirtScrollTop;\n    }\n\n    /**\n     * Scrolls to the specified index.\n     * ```typescript\n     * this.parentVirtDir.scrollTo(5);\n     * ```\n     * @param index\n     */\n    public scrollTo(index) {\n        if (index < 0 || index > (this.isRemote ? this.totalItemCount : this.igxForOf.length) - 1) {\n            return;\n        }\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const scr = this.igxForScrollOrientation === 'horizontal' ?\n            this.hScroll.scrollLeft : this.vh.instance.elementRef.nativeElement.scrollTop;\n        const isPrevItem = index < this.state.startIndex || scr > this.sizesCache[index];\n        let nextScroll = isPrevItem ? this.sizesCache[index] : this.sizesCache[index + 1] - containerSize;\n        if (nextScroll < 0) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.hScroll.scrollLeft = nextScroll;\n        } else {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            if (nextScroll > maxVirtScrollTop) {\n                nextScroll = maxVirtScrollTop;\n            }\n            this._bScrollInternal = true;\n            this._virtScrollTop = nextScroll;\n            this.vh.instance.elementRef.nativeElement.scrollTop = this._virtScrollTop / this._virtHeightRatio;\n            this._adjustToIndex = !isPrevItem ? index : null;\n        }\n    }\n\n    /**\n     * Scrolls by one item into the appropriate next direction.\n     * For \"horizontal\" orientation that will be the right column and for \"vertical\" that is the lower row.\n     * ```typescript\n     * this.parentVirtDir.scrollNext();\n     * ```\n     */\n    public scrollNext() {\n        const scr = Math.ceil(this.igxForScrollOrientation === 'horizontal' ?\n            this.hScroll.scrollLeft :\n            this.vh.instance.elementRef.nativeElement.scrollTop);\n        const endIndex = this.getIndexAt(\n            scr + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        this.scrollTo(endIndex);\n    }\n\n    /**\n     * Scrolls by one item into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be the left column and for \"vertical\" that is the upper row.\n     * ```typescript\n     * this.parentVirtDir.scrollPrev();\n     * ```\n     */\n    public scrollPrev() {\n        this.scrollTo(this.state.startIndex - 1);\n    }\n\n    /**\n     * Scrolls by one page into the appropriate next direction.\n     * For \"horizontal\" orientation that will be one view to the right and for \"vertical\" that is one view to the bottom.\n     * ```typescript\n     * this.parentVirtDir.scrollNextPage();\n     * ```\n     */\n    public scrollNextPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.hvh.instance.elementRef.nativeElement.scrollLeft += parseInt(this.igxForContainerSize, 10);\n        } else {\n            this.addScrollTop(parseInt(this.igxForContainerSize, 10));\n        }\n    }\n\n    /**\n     * Scrolls by one page into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be one view to the left and for \"vertical\" that is one view to the top.\n     * ```typescript\n     * this.parentVirtDir.scrollPrevPage();\n     * ```\n     */\n    public scrollPrevPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.hvh.instance.elementRef.nativeElement.scrollLeft -= parseInt(this.igxForContainerSize, 10);\n        } else {\n            const containerSize = (parseInt(this.igxForContainerSize, 10));\n            this.addScrollTop(-containerSize);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnScrollLeft(colIndex) {\n        return this.sizesCache[colIndex];\n    }\n\n    /**\n     * Returns a reference to the vertical scrollbar DOM element.\n     * ```typescript\n     * this.parentVirtDir.getVerticalScroll();\n     * ```\n     */\n    public getVerticalScroll() {\n        if (this.vh) {\n            return this.vh.instance.elementRef.nativeElement;\n        }\n        return null;\n    }\n\n    /**\n     * Returns the total number of items that are fully visible.\n     * ```typescript\n     * this.parentVirtDir.getItemCountInView();\n     * ```\n     */\n    public getItemCountInView() {\n        const position = this.igxForScrollOrientation === 'horizontal' ?\n            this.hScroll.scrollLeft :\n            this.vh.instance.elementRef.nativeElement.scrollTop;\n        let startIndex = this.getIndexAt(\n            position,\n            this.sizesCache,\n            0\n        );\n        if (position - this.sizesCache[startIndex] > 0) {\n            // fisrt item is not fully in view\n            startIndex++;\n        }\n        const endIndex = this.getIndexAt(\n            position + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        return endIndex - startIndex;\n    }\n\n    /**\n     * Returns a reference to the horizontal scrollbar DOM element.\n     * ```typescript\n     * this.parentVirtDir.getHorizontalScroll();\n     * ```\n     */\n    public getHorizontalScroll() {\n        return this.getElement(this._viewContainer, 'igx-horizontal-virtual-helper') || this.hScroll;\n    }\n\n    /**\n     * Returns the size of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getSizeAt(1);\n     * ```\n     */\n    public getSizeAt(index: number) {\n        return this.sizesCache[index + 1] - this.sizesCache[index];\n    }\n\n    /**\n     * Returns the scroll offset of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getScrollForIndex(1);\n     * ```\n     */\n    public getScrollForIndex(index: number, bottom?: boolean) {\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const scroll = bottom ? this.sizesCache[index + 1] - containerSize : this.sizesCache[index];\n        return scroll;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling vertically\n     */\n    protected onScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = event.target.scrollTop / maxRealScrollTop;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        const prevStartIndex = this.state.startIndex;\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        requestAnimationFrame(() => {\n            // check if height/width has changes in views.\n            this.recalcUpdateSizes();\n        });\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that recaculates and updates cache sizes.\n     */\n    public recalcUpdateSizes() {\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n        this.igxForSizePropName : 'height';\n        const diffs = [];\n        let totalDiff = 0;\n        for (let i = 0; i < this._embeddedViews.length; i++) {\n            const view = this._embeddedViews[i];\n            const rNode = view.rootNodes.find((node) => node.nodeType === Node.ELEMENT_NODE);\n            if (rNode) {\n                const h = rNode.offsetHeight ? rNode.offsetHeight : parseInt(this.igxForItemSize, 10);\n                const index = this.state.startIndex + i;\n                if (!this.isRemote && !this.igxForOf[index]) {\n                    continue;\n                }\n                const oldVal = dimension === 'height' ? this.heightCache[index] : this.igxForOf[index][dimension];\n                const newVal = dimension === 'height' ? h : rNode.clientWidth;\n                if (dimension === 'height') {\n                    this.heightCache[index] = newVal;\n                } else {\n                    this.igxForOf[index][dimension] = newVal;\n                }\n                const currDiff = newVal - oldVal;\n                diffs.push(currDiff);\n                totalDiff += currDiff;\n                this.sizesCache[index + 1] += totalDiff;\n            }\n        }\n        // update cache\n        if (Math.abs(totalDiff) > 0) {\n            for (let j = this.state.startIndex + this.state.chunkSize + 1; j < this.sizesCache.length; j++) {\n                this.sizesCache[j] += totalDiff;\n            }\n\n            // update scrBar heights/widths\n            if (this.igxForScrollOrientation === 'horizontal') {\n                const totalWidth = parseInt(this.hScroll.children[0].style.width, 10) + totalDiff;\n                this.hScroll.children[0].style.width = totalWidth + 'px';\n            }\n            const reducer = (acc, val) => acc + val;\n            if (this.igxForScrollOrientation === 'vertical') {\n                const scrToBottom = this._isScrolledToBottom && !this.dc.instance.notVirtual;\n                const hSum = this.heightCache.reduce(reducer);\n                if (hSum > this._maxHeight) {\n                    this._virtHeightRatio = hSum / this._maxHeight;\n                }\n                this.vh.instance.height = Math.min(this.vh.instance.height + totalDiff, this._maxHeight);\n                this._virtHeight = hSum;\n                if (!this.vh.instance.destroyed) {\n                    this.vh.instance.cdr.detectChanges();\n                }\n                if (scrToBottom && !this._isAtBottomIndex) {\n                    const containerSize = parseInt(this.igxForContainerSize, 10);\n                    const scrollOffset = this.fixedUpdateAllElements(this._virtHeight - containerSize);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n                    return;\n                }\n                if (this._adjustToIndex) {\n                    // in case scrolled to specific index where after scroll heights are changed\n                    // need to adjust the offsets so that item is last in view.\n                    const updatesToIndex = this._adjustToIndex - this.state.startIndex + 1;\n                    const sumDiffs = diffs.slice(0, updatesToIndex).reduce(reducer);\n                    const currOffset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = (currOffset - sumDiffs) + 'px';\n                    this._adjustToIndex = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected fixedUpdateAllElements(inScrollTop: number): number {\n        const count = this.isRemote ? this.totalItemCount : this.igxForOf.length;\n        let newStart = this.getIndexAt(\n            inScrollTop,\n            this.sizesCache,\n            0\n        );\n        if (newStart + this.state.chunkSize > count) {\n            newStart = count - this.state.chunkSize;\n        }\n        const prevStart = this.state.startIndex;\n        const diff = newStart - this.state.startIndex;\n        this.state.startIndex = newStart;\n        if (diff) {\n            this.onChunkPreload.emit(this.state);\n            if (!this.isRemote) {\n                /*recalculate and apply page size.*/\n                if (diff > 0 && diff <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollNext(prevStart);\n                } else if (diff < 0 && Math.abs(diff) <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollPrev(prevStart);\n                } else {\n                    this.fixedApplyScroll();\n                }\n            }\n        }\n        return inScrollTop - this.sizesCache[this.state.startIndex];\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling down/right employing context change with view rearrangement\n     */\n    protected moveApplyScrollNext(prevIndex: number): void {\n        const start = prevIndex + this.state.chunkSize;\n        for (let i = start; i < start + this.state.startIndex - prevIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.shift();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            const view: ViewRef = this.dc.instance._vcr.detach(0);\n            this.dc.instance._vcr.insert(view);\n            this._embeddedViews.push(embView);\n        }\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling up/left employing context change with view rearrangement\n     */\n    protected moveApplyScrollPrev(prevIndex: number): void {\n        for (let i = prevIndex - 1; i >= this.state.startIndex  && this.igxForOf[i] !== undefined; i--) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.pop();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            const view: ViewRef = this.dc.instance._vcr.detach(this.dc.instance._vcr.length - 1);\n            this.dc.instance._vcr.insert(view, 0);\n            this._embeddedViews.unshift(embView);\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    protected getContextIndex(input) {\n        return this.isRemote ? this.state.startIndex + this.igxForOf.indexOf(input) : this.igxForOf.indexOf(input);\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change through context change for each view\n     */\n    protected fixedApplyScroll(): void {\n        let j = 0;\n        const endIndex = this.state.startIndex + this.state.chunkSize;\n        for (let i = this.state.startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews[j++];\n            const cntx = (embView as EmbeddedViewRef<any>).context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling horizontally\n     */\n    protected onHScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.hScroll.children[0].style.width, 10)) {\n            return;\n        }\n        const curScrollLeft = event.target.scrollLeft;\n        const prevStartIndex = this.state.startIndex;\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(curScrollLeft);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * Gets the function used to track changes in the items collection.\n     * By default the object references are compared. However this can be optimized if you have unique identifier\n     * value that can be used for the comparison instead of the object ref or if you have some other property values\n     * in the item object that should be tracked for changes.\n     * This option is similar to ngForTrackBy.\n     * ```typescript\n     * const trackFunc = this.parentVirtDir.igxForTrackBy;\n     * ```\n     */\n    @Input()\n    get igxForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\n\n    /**\n     * Sets the function used to track changes in the items collection.\n     * This function can be set in scenarios where you want to optimize or\n     * customize the tracking of changes for the items in the collection.\n     * The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.\n     * ```typescript\n     * this.parentVirtDir.igxForTrackBy = (index, item) => {\n     *      return item.id + item.width;\n     * };\n     * ```\n     */\n    set igxForTrackBy(fn: TrackByFunction<T>) { this._trackByFn = fn; }\n\n    /**\n     * @hidden\n     */\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex = this.state.startIndex;\n            let endIndex = this.state.chunkSize + this.state.startIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            }\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n            }\n            this.dc.changeDetectorRef.detectChanges();\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n            if (this.igxForScrollOrientation === 'vertical') {\n                this.recalcUpdateSizes();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxBrowserHeight(): number {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.position = 'absolute';\n        style.top = '9999999999999999px';\n        document.body.appendChild(div);\n        const size = Math.abs(div.getBoundingClientRect()['top']);\n        document.body.removeChild(div);\n        return size;\n    }\n\n    /**\n     * @hidden\n     * Recalculates the chunkSize based on current startIndex and returns the new size.\n     * This should be called after this.state.startIndex is updated, not before.\n     */\n    protected _calculateChunkSize(): number {\n        let chunkSize = 0;\n        if (this.igxForContainerSize !== null && this.igxForContainerSize !== undefined) {\n            if (!this.sizesCache) {\n                this.initSizesCache(this.igxForOf);\n            }\n            chunkSize = this._calcMaxChunkSize();\n            if (this.igxForOf && chunkSize > this.igxForOf.length) {\n                chunkSize = this.igxForOf.length;\n            }\n        } else {\n            if (this.igxForOf) {\n                chunkSize = this.igxForOf.length;\n            }\n        }\n        return chunkSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElement(viewref, nodeName) {\n        const elem = viewref.element.nativeElement.parentNode.getElementsByTagName(nodeName);\n        return elem.length > 0 ? elem[0] : null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected initSizesCache(items: any[]): number {\n        let totalSize = 0;\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            if (dimension === 'height') {\n                // cols[i][dimension] = parseInt(this.igxForItemSize, 10) || 0;\n                size = parseInt(this.igxForItemSize, 10) || 0;\n                this.heightCache.push(size);\n            } else {\n                size = this._getItemSize(items[i], dimension);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n        const scr = this.vh.instance.elementRef.nativeElement;\n\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        const newHeight =  this.initSizesCache(this.igxForOf);\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0 && scr.scrollTop > 0) {\n            this.recalcUpdateSizes();\n            const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n            scr.scrollTop = this.sizesCache[this.state.startIndex] - offset;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        let i = 0;\n        let length = 0;\n        let maxLength = 0;\n        const arr = [];\n        let sum = 0;\n        const availableSize = parseInt(this.igxForContainerSize, 10);\n        if (!availableSize) {\n            return 0;\n        }\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n        this.igxForSizePropName : 'height';\n        const reducer = (accumulator, currentItem) => accumulator + this._getItemSize(currentItem, dimension);\n        for (i; i < this.igxForOf.length; i++) {\n            let item = this.igxForOf[i];\n            if (dimension === 'height') {\n                item = { value: this.igxForOf[i], height: this.heightCache[i] };\n            }\n            const size = dimension === 'height' ?\n                this.heightCache[i] :\n                this._getItemSize(item, dimension);\n            sum = arr.reduce(reducer, size);\n            if (sum < availableSize) {\n                arr.push(item);\n                length = arr.length;\n                if (i === this.igxForOf.length - 1) {\n                    // reached end without exceeding\n                    // include prev items until size is filled or first item is reached.\n                    let curItem = dimension === 'height' ? arr[0].value : arr[0];\n                    let prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                    while (prevIndex >= 0 && sum <= availableSize) {\n                        curItem = dimension === 'height' ? arr[0].value : arr[0];\n                        prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                        const prevItem = this.igxForOf[prevIndex];\n                        const prevSize = dimension === 'height' ?\n                            this.heightCache[prevIndex] :\n                            parseInt(prevItem[dimension], 10);\n                        sum = arr.reduce(reducer, prevSize);\n                        arr.unshift(prevItem);\n                        length = arr.length;\n                    }\n                }\n            } else {\n                arr.push(item);\n                length = arr.length + 1;\n                arr.shift();\n            }\n            if (length > maxLength) {\n                maxLength = length;\n            }\n        }\n        return maxLength;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getIndexAt(left, set, index) {\n        let start = 0;\n        let end = set.length - 1;\n        if (left === 0) {\n            return 0;\n        }\n        while (start <= end) {\n            const midIdx = Math.floor((start + end) / 2);\n            const midLeft = set[midIdx];\n            const cmp = left - midLeft;\n            if (cmp > 0) {\n                start = midIdx + 1;\n            } else if (cmp < 0) {\n                end = midIdx - 1;\n            } else {\n                return midIdx;\n            }\n        }\n        return end;\n    }\n\n    protected _recalcScrollBarSize() {\n        const count = this.isRemote ? this.totalItemCount : (this.igxForOf ? this.igxForOf.length : 0);\n        this.dc.instance.notVirtual = !(this.igxForContainerSize && this.dc && this.state.chunkSize < count);\n        if (this.igxForScrollOrientation === 'horizontal') {\n            const totalWidth = this.igxForContainerSize ? this.initSizesCache(this.igxForOf) : 0;\n            this.hScroll.style.width = this.igxForContainerSize + 'px';\n            this.hScroll.children[0].style.width = totalWidth + 'px';\n        }\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.vh.instance.elementRef.nativeElement.style.height = parseInt(this.igxForContainerSize, 10) + 'px';\n            this.vh.instance.height = this._calcHeight();\n        }\n    }\n\n    protected _calcHeight(): number {\n        let height;\n        if (this.heightCache) {\n            height = this.heightCache.reduce((acc, val) => acc + val, 0);\n        } else {\n            height = this.initSizesCache(this.igxForOf);\n        }\n        this._virtHeight = height;\n        if (height > this._maxHeight) {\n            this._virtHeightRatio = height / this._maxHeight;\n            height = this._maxHeight;\n        }\n        return height;\n    }\n\n    protected _recalcOnContainerChange(changes: SimpleChanges) {\n        this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n        this.dc.instance._viewContainer.element.nativeElement.style.left = '0px';\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (prevChunkSize !== this.state.chunkSize) {\n            this.onChunkLoad.emit(this.state);\n        }\n        if (this.sizesCache && this.hScroll && this.hScroll.scrollLeft !== 0) {\n            // Updating horizontal chunks and offsets based on the new scrollLeft\n            const scrollOffset = this.fixedUpdateAllElements(this.hScroll.scrollLeft);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     * Removes an elemenet from the embedded views and updates chunkSize.\n     */\n    protected removeLastElem() {\n        const oldElem = this._embeddedViews.pop();\n        this.onBeforeViewDestroyed.emit(oldElem);\n        oldElem.destroy();\n\n        this.state.chunkSize--;\n    }\n\n    /**\n     * @hidden\n     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize\n     */\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            { $implicit: input, index: elemIndex }\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n\n        this._zone.run(() => {\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * Recalculates chunkSize and adds/removes elements if need due to the change.\n     * this.state.chunkSize is updated in @addLastElem() or @removeLastElem()\n     */\n    protected applyChunkSizeChange() {\n        const chunkSize = this.isRemote ? (this.igxForOf ? this.igxForOf.length : 0) : this._calculateChunkSize();\n        if (chunkSize > this.state.chunkSize) {\n            const diff = chunkSize - this.state.chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.addLastElem();\n            }\n        } else if (chunkSize < this.state.chunkSize) {\n            const diff = this.state.chunkSize - chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.removeLastElem();\n            }\n        }\n    }\n\n    protected _updateScrollOffset() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._updateHScrollOffset();\n        } else {\n            this._updateVScrollOffset();\n        }\n    }\n    private _updateVScrollOffset() {\n        let scrollOffset = 0;\n        const vScroll = this.vh.instance.elementRef.nativeElement;\n        scrollOffset = vScroll && parseInt(vScroll.style.height, 10) ?\n            vScroll.scrollTop - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n    }\n    private _updateHScrollOffset() {\n        let scrollOffset = 0;\n        scrollOffset = this.hScroll && parseInt(this.hScroll.children[0].style.width, 10) ?\n            this.hScroll.scrollLeft - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    private _getItemSize(item, dimension: string): number {\n        const hasDimension = (item[dimension] !== null && item[dimension] !== undefined);\n        return hasDimension ? parseInt(item[dimension], 10) : this.igxForItemSize;\n    }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n    const name = 'name';\n    return type[name] || typeof type;\n}\n\nexport interface IForOfState {\n    startIndex?: number;\n    chunkSize?: number;\n}\n\n@Directive({\n    selector: '[igxGridFor][igxGridForOf]'\n})\nexport class IgxGridForOfDirective<T> extends IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck {\n\n    constructor(\n        _viewContainer: ViewContainerRef,\n        _template: TemplateRef<NgForOfContext<T>>,\n        _differs: IterableDiffers,\n        resolver: ComponentFactoryResolver,\n        cdr: ChangeDetectorRef,\n        _zone: NgZone,\n        protected syncService: IgxForOfSyncService) {\n            super(_viewContainer, _template, _differs, resolver, cdr, _zone);\n        }\n\n    @Input()\n    set igxGridForOf(value) {\n        this.igxForOf = value;\n    }\n\n    get igxGridForOf() {\n        return this.igxForOf;\n    }\n\n    ngOnInit() {\n        this.syncService.setMaster(this);\n        super.ngOnInit();\n        this.removeScrollEventListeners();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const forOf = 'igxGridForOf';\n        this.syncService.setMaster(this);\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange && this.igxForScrollOrientation === 'vertical') {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get sizesCache(): number[] {\n        if (this.syncService.isMaster(this)) {\n            return this._sizesCache;\n        }\n        return this.syncService.sizesCache(this.igxForScrollOrientation);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    protected get itemsDimension() {\n        return this.igxForScrollOrientation === 'horizontal' ? this.igxForSizePropName : 'height';\n    }\n\n    protected getItemSize(item) {\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        if (dimension === 'height') {\n            size = parseInt(this.igxForItemSize, 10) || 0;\n            if (item && item.summaries) {\n                size = item.max;\n            } else if (item && item.groups && item.height) {\n                size = item.height;\n            }\n        } else {\n            size = parseInt(item[dimension], 10) || 0;\n        }\n        return size;\n    }\n\n    protected initSizesCache(items: any[]): number {\n        if (!this.syncService.isMaster(this)) {\n            const masterSizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n            return masterSizesCache[masterSizesCache.length - 1];\n        }\n        let totalSize = 0;\n        let size = 0;\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            size = this.getItemSize(items[i]);\n            if (this.itemsDimension === 'height') {\n                this.heightCache.push(size);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache(changes: IterableChanges<T> = null) {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n        const scr = this.vh.instance.elementRef.nativeElement;\n\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        let newHeight = oldHeight;\n        if (changes && !this.isRemote) {\n            newHeight = this.handleCacheChanges(changes);\n        } else {\n            newHeight = this.initSizesCache(this.igxForOf);\n        }\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0) {\n            requestAnimationFrame(() => {\n                this.recalcUpdateSizes();\n                const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                if (scr.scrollTop !== 0) {\n                    scr.scrollTop = this.sizesCache[this.state.startIndex] - offset;\n                } else {\n                    this._updateScrollOffset();\n                }\n            });\n        }\n    }\n\n    protected handleCacheChanges(changes: IterableChanges<T>) {\n        const identityChanges = [];\n        const newHeightCache = [];\n        const newSizesCache = [];\n        newSizesCache.push(0);\n        let newHeight = 0;\n\n        // When there are more than one removed items the changes are not reliable so those with identity change should be default size.\n        let numRemovedItems = 0;\n        changes.forEachRemovedItem(() => numRemovedItems++);\n\n        // Get the identity changes to determine later if those that have changed their indexes should be assigned default item size.\n        changes.forEachIdentityChange((item) => {\n            if (item.currentIndex !== item.previousIndex) {\n                // Filter out ones that have not changed their index.\n                identityChanges[item.currentIndex] = item;\n            }\n        });\n\n        // Processing each item that is passed to the igxForOf so far seem to be most reliable. We parse the updated list of items.\n        changes.forEachItem((item) => {\n            if (item.previousIndex !== null &&\n                (numRemovedItems < 2 || !identityChanges.length || identityChanges[item.currentIndex])) {\n                // Reuse cache on those who have previousIndex.\n                // When there are more than one removed items currently the changes are not readable so ones with identity change\n                // should be racalculated.\n                newHeightCache[item.currentIndex] = this.heightCache[item.previousIndex];\n            } else {\n                // Assign default item size.\n                newHeightCache[item.currentIndex] = this.getItemSize(item.item);\n            }\n            newSizesCache[item.currentIndex + 1] = newSizesCache[item.currentIndex] + newHeightCache[item.currentIndex];\n            newHeight += newHeightCache[item.currentIndex];\n        });\n        this.heightCache = newHeightCache;\n        this.sizesCache = newSizesCache;\n        return newHeight;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public assumeMaster(): void {\n        this._sizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n        this.syncService.setMaster(this, true);\n    }\n\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    return;\n                }\n                /* we need to reset the master dir if all rows are removed\n                (e.g. because of filtering); if all columns are hidden, rows are\n                still rendered empty, so we should not reset master */\n                if (!this.igxForOf.length &&\n                    this.igxForScrollOrientation === 'vertical') {\n                    this.syncService.resetMaster();\n                }\n                this.syncService.setMaster(this);\n                this._updateSizeCache(changes);\n                this._applyChanges();\n                this._updateScrollOffset();\n                this.onDataChanged.emit();\n            }\n        }\n    }\n\n    onScroll(event) {\n        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = event.target.scrollTop / maxRealScrollTop;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        requestAnimationFrame(() => {\n            this.recalcUpdateSizes();\n        });\n    }\n\n    onHScroll(scrollAmount) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!this.hScroll || !parseInt(this.hScroll.children[0].style.width, 10)) {\n            return;\n        }\n\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(scrollAmount);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            { $implicit: input, index: elemIndex }\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n    }\n\n    protected _updateViews(prevChunkSize) {\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex;\n            let endIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            } else {\n                const inScrollTop = this.igxForScrollOrientation === 'horizontal' ?\n                    this.hScroll.scrollLeft :\n                    this.vh.instance.elementRef.nativeElement.scrollTop;\n                startIndex = this.getIndexAt(\n                    inScrollTop,\n                    this.sizesCache,\n                    0\n                );\n                if (startIndex + this.state.chunkSize > this.igxForOf.length) {\n                    startIndex = this.igxForOf.length - this.state.chunkSize;\n                }\n                this.state.startIndex = startIndex;\n                endIndex = this.state.chunkSize + this.state.startIndex;\n            }\n\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n            if (this.igxForScrollOrientation === 'vertical') {\n                requestAnimationFrame(() => {\n                    this.recalcUpdateSizes();\n                });\n            }\n        }\n    }\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        this._updateViews(prevChunkSize);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        if (this.syncService.isMaster(this)) {\n            return super._calcMaxChunkSize();\n        }\n        return this.syncService.chunkSize(this.igxForScrollOrientation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxForOfDirective, IgxGridForOfDirective, DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    entryComponents: [DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    exports: [IgxForOfDirective, IgxGridForOfDirective],\n    imports: [IgxScrollInertiaModule, CommonModule]\n})\n\nexport class IgxForOfModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    forwardRef,\n    QueryList,\n    OnInit,\n    Input,\n    OnDestroy,\n    ViewChild,\n    ContentChild,\n    AfterViewInit,\n    Output,\n    EventEmitter\n} from '@angular/core';\nimport { IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownBase } from './drop-down.base';\nimport { DropDownActionKey, Navigate } from './drop-down.common';\nimport { IGX_DROPDOWN_BASE, IDropDownBase } from './drop-down.common';\nimport { ISelectionEventArgs } from './drop-down.common';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, isIE } from '../core/utils';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { Subject } from 'rxjs';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { OverlaySettings } from '../services';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { take } from 'rxjs/operators';\n\n\n/**\n * **Ignite UI for Angular DropDown** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop_down.html)\n *\n * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and\n * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down\n *\n * Example:\n * ```html\n * <igx-drop-down>\n *   <igx-drop-down-item *ngFor=\"let item of items\" disabled={{item.disabled}} isHeader={{item.header}}>\n *     {{ item.value }}\n *   </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Component({\n    selector: 'igx-drop-down',\n    templateUrl: './drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxDropDownComponent }]\n})\nexport class IgxDropDownComponent extends IgxDropDownBase implements IDropDownBase, OnInit, OnDestroy, AfterViewInit {\n    protected destroy$ = new Subject<boolean>();\n    protected _scrollPosition: number;\n\n    @ContentChild(IgxForOfDirective, { read: IgxForOfDirective })\n    protected virtDir: IgxForOfDirective<any>;\n\n    @ViewChild(IgxToggleDirective)\n    protected toggleDirective: IgxToggleDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(forwardRef(() => IgxDropDownItemComponent), { descendants: true })\n    public children: QueryList<IgxDropDownItemBase>;\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Gets/sets whether items take focus. Disabled by default.\n     * When enabled, drop down items gain tab index and are focused when active -\n     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.\n     *\n     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive\n     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.\n     *\n     * ```typescript\n     * // get\n     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public allowItemsFocus = false;\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBase {\n        if (this.virtDir) {\n            return this._focusedItem && this._focusedItem.index !== -1 ?\n            (this.children.find(e => e.index === this._focusedItem.index) || null) :\n            null;\n        }\n        return this._focusedItem;\n    }\n\n    public set focusedItem(value: IgxDropDownItemBase) {\n        if (!value) {\n            this.selection.clear(`${this.id}-active`);\n            this._focusedItem = null;\n            return;\n        }\n        this._focusedItem = value;\n        if (this.virtDir) {\n            this._focusedItem = {\n                value: value.value,\n                index: value.index\n            } as IgxDropDownItemBase;\n        }\n        this.selection.set(`${this.id}-active`, new Set([this._focusedItem]));\n    }\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n    set id(value: string) {\n        this.toggleDirective.id = value;\n        this.selection.set(value, this.selection.get(this.id));\n        this.selection.clear(this.id);\n        this.selection.set(value, this.selection.get(`${this.id}-active`));\n        this.selection.clear(`${this.id}-active`);\n        this._id = value;\n    }\n\n    /** Id of the internal listbox of the drop down */\n    public get listId() {\n        return this.id + '-list';\n    }\n\n    /**\n     * Get currently selected item\n     *\n     * ```typescript\n     * let currentItem = this.dropdown.selectedItem;\n     * ```\n     */\n    public get selectedItem(): IgxDropDownItemBase {\n        const selectedItem = this.selection.first_item(this.id);\n        if (selectedItem) {\n            return selectedItem;\n        }\n        return null;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     *\n     * ```typescript\n     * let isCollapsed = this.dropdown.collapsed;\n     * ```\n     */\n    public get collapsed(): boolean {\n        return this.toggleDirective.collapsed;\n    }\n\n    protected get scrollContainer() {\n        return this.toggleDirective.element;\n    }\n\n    protected get collectionLength() {\n        if (this.virtDir) {\n            return this.virtDir.totalItemCount || this.virtDir.igxForOf.length;\n        }\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService) {\n        super(elementRef, cdr);\n    }\n\n    /**\n     * Opens the dropdown\n     *\n     * ```typescript\n     * this.dropdown.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        this.toggleDirective.open(overlaySettings);\n        this.updateScrollPosition();\n    }\n\n    /**\n     * Closes the dropdown\n     *\n     * ```typescript\n     * this.dropdown.close();\n     * ```\n     */\n    public close() {\n        this.toggleDirective.close();\n    }\n\n    /**\n     * Toggles the dropdown\n     *\n     * ```typescript\n     * this.dropdown.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        if (this.collapsed || this.toggleDirective.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * Select an item by index\n     * @param index of the item to select; If the drop down uses *igxFor, pass the index in data\n     */\n    public setSelectedItem(index: number) {\n        if (index < 0 || index >= this.items.length) {\n            return;\n        }\n        let newSelection: IgxDropDownItemBase;\n        if (this.virtDir) {\n            newSelection = {\n                value: this.virtDir.igxForOf[index],\n                index\n            } as IgxDropDownItemBase;\n        } else {\n            newSelection = this.items[index];\n        }\n        this.selectItem(newSelection);\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * If the data in the drop-down is virtualized, pass the index of the item in the virtualized data.\n     * @param newIndex number\n     */\n    public navigateItem(index: number) {\n        if (this.virtDir) {\n            if (index === -1 || index >= this.collectionLength) {\n                return;\n            }\n            const direction = index > (this.focusedItem ? this.focusedItem.index : -1) ? Navigate.Down : Navigate.Up;\n            const subRequired = this.isIndexOutOfBounds(index, direction);\n            this.focusedItem = {\n                value: this.virtDir.igxForOf[index],\n                index: index\n            } as IgxDropDownItemBase;\n            if (subRequired) {\n                this.virtDir.scrollTo(index);\n            }\n            if (subRequired) {\n                this.virtDir.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    this.skipHeader(direction);\n                });\n            } else {\n                this.skipHeader(direction);\n            }\n        } else {\n            super.navigateItem(index);\n        }\n        if (this.allowItemsFocus && this.focusedItem) {\n            this.focusedItem.element.nativeElement.focus();\n            this.cdr.markForCheck();\n        }\n    }\n\n    private isIndexOutOfBounds(index: number, direction: Navigate) {\n        const virtState = this.virtDir.state;\n        const currentPosition = this.virtDir.getVerticalScroll().scrollTop;\n        const itemPosition = this.virtDir.getScrollForIndex(index, direction === Navigate.Down);\n        const indexOutOfChunk = index < virtState.startIndex || index > virtState.chunkSize + virtState.startIndex;\n        const scrollNeeded = direction === Navigate.Down ? currentPosition < itemPosition : currentPosition > itemPosition;\n        const subRequired = indexOutOfChunk || scrollNeeded;\n        return subRequired;\n    }\n\n    protected skipHeader(direction: Navigate) {\n        if (!this.focusedItem) {\n            return;\n        }\n        if (this.focusedItem.isHeader || this.focusedItem.disabled) {\n            if (direction === Navigate.Up) {\n                this.navigatePrev();\n            } else {\n                this.navigateNext();\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    updateScrollPosition() {\n        if (!this.virtDir) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.virtDir.scrollTo(0);\n            return;\n        }\n        let targetScroll = this.virtDir.getScrollForIndex(this.selectedItem.index);\n        const itemsInView = this.virtDir.igxForContainerSize / this.virtDir.igxForItemSize;\n        targetScroll -= (itemsInView / 2 - 1) * this.virtDir.igxForItemSize;\n        this.virtDir.getVerticalScroll().scrollTop = targetScroll;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpening(e: CancelableEventArgs) {\n        this.onOpening.emit(e);\n        if (e.cancel) {\n            return;\n        }\n        if (!this.virtDir && this.selectedItem) {\n            this.scrollToItem(this.selectedItem);\n        }\n        if (this.virtDir) {\n            this.virtDir.getVerticalScroll().scrollTop = this._scrollPosition;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        if (this.selectedItem) {\n            this.focusedItem = this.selectedItem;\n            this._focusedItem.focused = true;\n        } else if (this.allowItemsFocus) {\n            this.navigateFirst();\n        }\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosing(e: CancelableBrowserEventArgs) {\n        this.onClosing.emit(e);\n        if (this.virtDir) {\n            this._scrollPosition = this.virtDir.getVerticalScroll().scrollTop;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosed() {\n        if (this._focusedItem) {\n            this._focusedItem.focused = false;\n        }\n        this.onClosed.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.selection.clear(this.id);\n        this.selection.clear(`${this.id}-active`);\n    }\n\n    protected scrollToItem(item: IgxDropDownItemBase) {\n        const itemPosition = this.calculateScrollPosition(item);\n\n        //  in IE11 setting sctrollTop is somehow slow and forces dropdown\n        //  to appear on screen before animation start. As a result dropdown\n        //  flickers badly. This is why we set scrollTop just a little later\n        //  allowing animation to start and prevent dropdown flickering\n        if (isIE()) {\n            setTimeout(() => {\n                this.scrollContainer.scrollTop = (itemPosition);\n            }, 1);\n        } else {\n            this.scrollContainer.scrollTop = (itemPosition);\n        }\n    }\n\n    /** @hidden @internal */\n    public calculateScrollPosition(item: IgxDropDownItemBase): number {\n        if (!item) {\n            return 0;\n        }\n\n        const elementRect = item.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        const scrollDelta = parentRect.top - elementRect.top;\n        let scrollPosition = this.scrollContainer.scrollTop - scrollDelta;\n\n        const dropDownHeight = this.scrollContainer.clientHeight;\n        scrollPosition -= dropDownHeight / 2;\n        scrollPosition += item.elementHeight / 2;\n\n        return Math.floor(scrollPosition);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    ngOnInit() {\n        this.toggleDirective.id = this.id;\n    }\n\n    ngAfterViewInit() {\n        if (this.virtDir) {\n            this.virtDir.igxForItemSize = 32;\n        }\n    }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        super.onItemActionKey(key, event);\n        this.close();\n    }\n\n    /**\n     * Virtual scroll implementation\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        if (this.virtDir) {\n            this.navigateItem(0);\n        } else {\n            super.navigateFirst();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        if (this.virtDir) {\n            this.navigateItem(this.virtDir.totalItemCount ? this.virtDir.totalItemCount - 1 : this.virtDir.igxForOf.length - 1);\n        } else {\n            super.navigateLast();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index + 1 : 0);\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index - 1 : 0);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n    /**\n     * Handles the `onSelection` emit and the drop down toggle when selection changes\n     * @hidden\n     * @internal\n     * @param newSelection\n     * @param event\n     */\n    public selectItem(newSelection?: IgxDropDownItemBase, event?: Event) {\n        const oldSelection = this.selectedItem;\n        if (!newSelection) {\n            newSelection = this.focusedItem;\n        }\n        if (newSelection === null) {\n            return;\n        }\n        if (newSelection instanceof IgxDropDownItemBase && newSelection.isHeader) {\n            return;\n        }\n        if (this.virtDir) {\n            newSelection = {\n                value: newSelection.value,\n                index: newSelection.index\n            } as IgxDropDownItemBase;\n        }\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (!args.cancel) {\n            this.selection.set(this.id, new Set([newSelection]));\n            if (!this.virtDir) {\n                if (oldSelection) {\n                    oldSelection.selected = false;\n                }\n                if (newSelection) {\n                    newSelection.selected = true;\n                }\n            }\n            if (event) {\n                this.toggleDirective.close();\n            }\n        }\n    }\n}\n\n","import { Directive, Optional, Self, Input, HostListener, Inject } from '@angular/core';\nimport { IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { IDropDownNavigationDirective } from './drop-down.common';\nimport { IgxDropDownBase } from './drop-down.base';\nimport { DropDownActionKey } from './drop-down.common';\n\n/**\n * Navigation Directive that handles keyboard events on its host and controls a targeted IgxDropDownBase component\n */\n@Directive({\n    selector: '[igxDropDownItemNavigation]'\n})\nexport class IgxDropDownItemNavigationDirective implements IDropDownNavigationDirective {\n\n    protected _target: IgxDropDownBase = null;\n\n    constructor(@Self() @Optional() @Inject(IGX_DROPDOWN_BASE) public dropdown: IgxDropDownBase) { }\n\n    /**\n     * Gets the target of the navigation directive;\n     *\n     * ```typescript\n     * // Get\n     * export class MyComponent {\n     *  ...\n     *  @ContentChild(IgxDropDownNavigationDirective)\n     *  navDirective: IgxDropDownNavigationDirective = null\n     *  ...\n     *  const navTarget: IgxDropDownBase = navDirective.navTarget\n     * }\n     * ```\n     */\n    get target(): IgxDropDownBase {\n        return this._target;\n    }\n\n    /**\n     * Sets the target of the navigation directive;\n     * If no valid target is passed, it falls back to the drop down context\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxDropDownItemNavigation]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxDropDownItemNavigation')\n    set target(target: IgxDropDownBase) {\n        this._target = target ? target : this.dropdown;\n    }\n\n    /**\n     * Captures keydown events and calls the appropriate handlers on the target component\n     */\n    @HostListener('keydown', ['$event'])\n    handleKeyDown(event: KeyboardEvent) {\n        if (event) {\n            const key = event.key.toLowerCase();\n            if (!this.target.collapsed) { // If dropdown is opened\n                const navKeys = ['esc', 'escape', 'enter', 'space', 'spacebar', ' ',\n            'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];\n                if (navKeys.indexOf(key) === -1) { // If key has appropriate function in DD\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n            } else { // If dropdown is closed, do nothing\n                return;\n            }\n            switch (key) {\n                case 'esc':\n                case 'escape':\n                    this.target.onItemActionKey(DropDownActionKey.ESCAPE, event);\n                    break;\n                case 'enter':\n                    this.target.onItemActionKey(DropDownActionKey.ENTER, event);\n                    break;\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                    this.target.onItemActionKey(DropDownActionKey.SPACE, event);\n                    break;\n                case 'arrowup':\n                case 'up':\n                    this.onArrowUpKeyDown();\n                    break;\n                case 'arrowdown':\n                case 'down':\n                    this.onArrowDownKeyDown();\n                    break;\n                case 'home':\n                    this.onHomeKeyDown();\n                    break;\n                case 'end':\n                    this.onEndKeyDown();\n                    break;\n                default:\n                    return;\n            }\n        }\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowDownKeyDown() {\n        this.target.navigateNext();\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowUpKeyDown() {\n        this.target.navigatePrev();\n    }\n\n    /**\n     * Navigates to target's last item\n     */\n    onEndKeyDown() {\n        this.target.navigateLast();\n    }\n\n    /**\n     * Navigates to target's first item\n     */\n    onHomeKeyDown() {\n        this.target.navigateFirst();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxDropDownComponent } from './drop-down.component';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownItemNavigationDirective } from './drop-down-navigation.directive';\nimport { CommonModule } from '@angular/common';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nexport * from './drop-down.component';\nexport * from './drop-down-item.component';\nexport { ISelectionEventArgs, IDropDownNavigationDirective,  } from './drop-down.common';\nexport * from './drop-down-navigation.directive';\nexport * from './drop-down.base';\nexport * from './drop-down-item.base';\nexport * from './drop-down-group.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective],\n    exports: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective],\n    imports: [CommonModule, IgxToggleModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxDropDownModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nenum IgxHintPosition {\n    START,\n    END\n}\n\n@Directive({\n    selector: 'igx-hint,[igxHint]'\n})\nexport class IgxHintDirective implements OnInit {\n    private _position: IgxHintPosition = IgxHintPosition.START;\n    /**\n     * Sets/gets whether the hint position is at the start.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionStart = true;\n     * ```\n     * ```typescript\n     * let isHintPositionStart = this.igxHint.isPositionStart;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--start')\n    public isPositionStart = false;\n    /**\n     * Sets/gets whether the hint position is at the end.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionEnd = true;\n     * ```\n     * ```typescript\n     * let isHintPositionEnd = this.igxHint.isPositionEnd;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--end')\n    public isPositionEnd = false;\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     * Sets the position of the hint.\n     * ```html\n     * <igx-input-group>\n     *  <input igxInput type=\"text\"/>\n     *  <igx-hint #hint [position]=\"'start'\">IgxHint displayed at the start</igx-hint>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @Input('position')\n    set position(value: string) {\n        const position: IgxHintPosition = (IgxHintPosition as any)[value.toUpperCase()];\n        if (position !== undefined) {\n            this._position = position;\n            this._applyPosition(this._position);\n        }\n    }\n    /**\n     * Gets the position of the hint.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * let hintPosition =  this.igxHint.position;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    get position() {\n        return this._position.toString();\n    }\n    /**\n     *@hidden\n     */\n    ngOnInit() {\n        this._applyPosition(this._position);\n    }\n\n    private _applyPosition(position: IgxHintPosition) {\n        this.isPositionStart = this.isPositionEnd = false;\n        switch (position) {\n            case IgxHintPosition.START:\n                this.isPositionStart = true;\n                break;\n            case IgxHintPosition.END:\n                this.isPositionEnd = true;\n                break;\n            default: break;\n        }\n    }\n}\n","/** @hidden */\nexport abstract class IgxInputGroupBase {\n    disabled: boolean;\n    isFocused: boolean;\n    isRequired: boolean;\n    hasPlaceholder: boolean;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { AbstractControl, FormControlName, NgControl, NgModel } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { IgxInputGroupBase } from '../../input-group/input-group.common';\n\nconst nativeValidationAttributes = ['required', 'pattern', 'minlength', 'maxlength', 'min', 'max', 'step'];\n\nexport enum IgxInputState {\n    INITIAL,\n    VALID,\n    INVALID\n}\n\n@Directive({\n    selector: '[igxInput]',\n    exportAs: 'igxInput'\n})\nexport class IgxInputDirective implements AfterViewInit, OnDestroy {\n    private _valid = IgxInputState.INITIAL;\n    private _statusChanges$: Subscription;\n\n    constructor(\n        public inputGroup: IgxInputGroupBase,\n        @Optional() @Self() @Inject(NgModel) protected ngModel: NgModel,\n        @Optional() @Self() @Inject(FormControlName) protected formControl: FormControlName,\n        protected element: ElementRef,\n        protected cdr: ChangeDetectorRef) { }\n\n    private get ngControl(): NgControl {\n        return this.ngModel ? this.ngModel : this.formControl;\n    }\n    /**\n     * Sets the `value` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [value]=\"'IgxInput Value'\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input('value')\n    set value(value: any) {\n        this.nativeElement.value = value;\n        this.checkValidity();\n    }\n    /**\n     * Gets the `value` propery.\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let inputValue = this.igxInput.value;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    get value() {\n        return this.nativeElement.value;\n    }\n    /**\n     * Sets the `disabled` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [disabled]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set disabled(value: boolean) {\n        this.nativeElement.disabled = value;\n        this.inputGroup.disabled = value;\n    }\n    /**\n     * Gets the `disabled` property\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let isDisabled = this.igxInput.disabled;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get disabled() {\n        return this.nativeElement.hasAttribute('disabled');\n    }\n\n    /**\n     * Sets the `required` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [required]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set required(value: boolean) {\n        if (typeof value === 'boolean') {\n            this.nativeElement.required = this.inputGroup.isRequired = value;\n\n            if (value && !this.nativeElement.checkValidity()) {\n                this._valid = IgxInputState.INVALID;\n            } else {\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * Gets whether the igxInput is required.\n     * ```typescript\n     * let isRequired = this.igxInput.required;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get required() {\n        return this.nativeElement.hasAttribute('required');\n    }\n\n    /**\n     * Sets/gets whether the `\"igx-input-group__input\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isInput = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isInput;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__input')\n    public isInput = false;\n    /**\n     * Sets/gets whether the `\"class.igx-input-group__textarea\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isTextArea = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isTextArea;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__textarea')\n    public isTextArea = false;\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.inputGroup.isFocused = true;\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event'])\n    public onBlur(event) {\n        this.inputGroup.isFocused = false;\n        this._valid = IgxInputState.INITIAL;\n        if (this.ngControl) {\n            if (!this.ngControl.valid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        } else if (this._hasValidators() && !this.nativeElement.checkValidity()) {\n            this._valid = IgxInputState.INVALID;\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('input')\n    public onInput() {\n        this.checkValidity();\n    }\n    /**\n     *@hidden\n     */\n    ngAfterViewInit() {\n        this.inputGroup.hasPlaceholder = this.nativeElement.hasAttribute('placeholder');\n        this.inputGroup.disabled = this.inputGroup.disabled || this.nativeElement.hasAttribute('disabled');\n        this.inputGroup.isRequired = this.nativeElement.hasAttribute('required');\n\n        // Make sure we do not invalidate the input on init\n        if (!this.ngControl) {\n            this._valid = IgxInputState.INITIAL;\n        }\n        // Also check the control's validators for required\n        if (!this.inputGroup.isRequired && this.ngControl && this.ngControl.control.validator) {\n            const validation = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = validation && validation.required;\n        }\n\n\n        const elTag = this.nativeElement.tagName.toLowerCase();\n        if (elTag === 'textarea') {\n            this.isTextArea = true;\n        } else {\n            this.isInput = true;\n        }\n\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n\n        this.cdr.detectChanges();\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n    /**\n     * Sets a focus on the igxInput.\n     * ```typescript\n     * this.igxInput.focus();\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public focus() {\n        this.nativeElement.focus();\n    }\n    /**\n     * Gets the `nativeElement` of the igxInput.\n     * ```typescript\n     * let igxInputNativeElement = this.igxInput.nativeElement;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    protected onStatusChanged() {\n        if (this.ngControl.control.validator || this.ngControl.control.asyncValidator) {\n            if (this.ngControl.control.touched || this.ngControl.control.dirty) {\n                if (this.inputGroup.isFocused) {\n                    // the user is still typing in the control\n                    this._valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n                } else {\n                    // the user had touched the control previosly but now the value is changing due to changes in the form\n                    this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n                }\n            } else if (this._valid !== IgxInputState.INITIAL) {\n                this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            } else if (this._valid === IgxInputState.INITIAL && this.ngControl.value !== undefined && this.ngControl.invalid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        }\n    }\n    /**\n     * Gets whether the igxInput has a placeholder.\n     * ```typescript\n     * let hasPlaceholder = this.igxInput.hasPlaceholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get hasPlaceholder() {\n        return this.nativeElement.hasAttribute('placeholder');\n    }\n    /**\n     * Gets the placeholder element of the igxInput.\n     * ```typescript\n     * let igxInputPlaceholder = this.igxInput.placeholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get placeholder() {\n        return this.nativeElement.placeholder;\n    }\n\n    private _hasValidators(): boolean {\n        for (const nativeValidationAttribute of nativeValidationAttributes) {\n            if (this.nativeElement.hasAttribute(nativeValidationAttribute)) {\n                return true;\n            }\n        }\n\n        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);\n    }\n    /**\n     * Gets whether the igxInput is focused.\n     * ```typescript\n     * let isFocused = this.igxInput.focused;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get focused() {\n        return this.inputGroup.isFocused;\n    }\n    /**\n     * Gets the state of the igxInput.\n     * ```typescript\n     * let igxInputState = this.igxInput.valid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get valid(): IgxInputState {\n        return this._valid;\n    }\n\n    /**\n     * Gets whether the igxInput is valid.\n     * ```typescript\n     * let valid = this.igxInput.isValid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get isValid(): boolean {\n        return this.valid !== IgxInputState.INVALID;\n    }\n\n    /**\n     * Sets the state of the igxInput.\n     * ```typescript\n     * this.igxInput.valid = IgxInputState.INVALID;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public set valid(value: IgxInputState) {\n        this._valid = value;\n    }\n\n    private checkValidity() {\n        if (!this.ngControl && this._hasValidators()) {\n            this._valid = this.nativeElement.checkValidity() ? IgxInputState.VALID : IgxInputState.INVALID;\n        }\n    }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxLabel]'\n})\nexport class IgxLabelDirective {\n    @HostBinding('class.igx-input-group__label')\n    public defaultClass = true;\n\n/**\n * @hidden\n */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-label-${NEXT_ID++}`;\n}\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-prefix,[igxPrefix]'\n})\nexport class IgxPrefixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxPrefixDirective],\n    exports: [IgxPrefixDirective]\n})\nexport class IgxPrefixModule { }\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-suffix,[igxSuffix]'\n})\nexport class IgxSuffixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSuffixDirective],\n    exports: [IgxSuffixDirective]\n})\nexport class IgxSuffixModule { }\n","import { InjectionToken, Input, Output, EventEmitter, DoCheck, OnInit } from '@angular/core';\n\n\n/**\n * Defines the posible values of the components' display density.\n */\nexport enum DisplayDensity {\n    comfortable = 'comfortable',\n    cosy = 'cosy',\n    compact = 'compact'\n}\n\n/**\n * Describes the object used to configure the DisplayDensity in Angular DI.\n */\nexport interface IDisplayDensityOptions {\n    displayDensity: DisplayDensity;\n}\n\nexport interface IDensityChangedEventArgs {\n    oldDensity: DisplayDensity;\n    newDensity: DisplayDensity;\n}\n\n/**\n * Defines the DisplayDensity DI token.\n */\nexport const DisplayDensityToken = new InjectionToken<IDisplayDensityOptions>('DisplayDensity');\n\n/**\n * Base class containing all logic required for implementing DisplayDensity.\n */\nexport class DisplayDensityBase implements DoCheck, OnInit {\n    protected _displayDensity: DisplayDensity;\n\n     /**\n     * @hidden\n     */\n    public initialDensity: DisplayDensity;\n\n    /**\n     * Returns the theme of the component.\n     * The default theme is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let componentTheme = this.component.displayDensity;\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity ||\n            ((this.displayDensityOptions && this.displayDensityOptions.displayDensity) || DisplayDensity.comfortable);\n    }\n\n    /**\n     * Sets the theme of the component.\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        const currentDisplayDensity = this._displayDensity;\n        this._displayDensity = val as DisplayDensity;\n\n        if (currentDisplayDensity !== this._displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: currentDisplayDensity,\n                newDensity: this._displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n        }\n    }\n\n    @Output()\n    public onDensityChanged = new EventEmitter<IDensityChangedEventArgs>();\n\n    protected oldDisplayDensityOptions: IDisplayDensityOptions = { displayDensity: DisplayDensity.comfortable };\n\n\n    constructor(protected displayDensityOptions: IDisplayDensityOptions) {\n        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this.initialDensity = this._displayDensity;\n    }\n\n    public ngDoCheck() {\n        if (!this._displayDensity && this.displayDensityOptions &&\n                this.oldDisplayDensityOptions.displayDensity !== this.displayDensityOptions.displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: this.oldDisplayDensityOptions.displayDensity,\n                newDensity: this.displayDensityOptions.displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);\n        }\n    }\n\n    /**\n     * Given a style class of a component/element returns the modified version of it based\n     * on the current display density.\n     */\n    protected getComponentDensityClass(baseStyleClass: string): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return `${baseStyleClass}--${DisplayDensity.cosy}`;\n            case DisplayDensity.compact:\n                return `${baseStyleClass}--${DisplayDensity.compact}`;\n            default:\n                return baseStyleClass;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    QueryList,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IgxHintDirective } from '../directives/hint/hint.directive';\nimport { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxPrefixDirective, IgxPrefixModule} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixDirective, IgxSuffixModule } from '../directives/suffix/suffix.directive';\nimport { DisplayDensity, IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport { IgxInputGroupBase } from './input-group.common';\n\nlet NEXT_ID = 0;\n\nenum IgxInputGroupType {\n    LINE,\n    BOX,\n    BORDER,\n    SEARCH\n}\n\n@Component({\n    selector: 'igx-input-group',\n    templateUrl: 'input-group.component.html',\n    providers: [{ provide: IgxInputGroupBase, useExisting: IgxInputGroupComponent }]\n})\nexport class IgxInputGroupComponent extends DisplayDensityBase implements IgxInputGroupBase {\n    private _type = IgxInputGroupType.LINE;\n    private _filled = false;\n    private _supressInputAutofocus = false;\n\n    /**\n     * An ElementRef property of the `IgxInputGroupComponent`.\n     */\n    public element: ElementRef;\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-input-group [id]=\"'igx-input-group-55'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-input-group-${NEXT_ID++}`;\n\n    /**\n     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.\n     * By default applied the class is applied.\n     *```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *this.inputGroup.defaultClass = false;\n     *```\n     *}\n     */\n    @HostBinding('class.igx-input-group')\n    public defaultClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--placeholder')\n    public hasPlaceholder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--required')\n    public isRequired = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--focused')\n    public isFocused = false;\n\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--box')\n    public isBox = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--border')\n    public isBorder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--search')\n    public isSearch = false;\n\n    /**\n     * An @Input property that disables the `IgxInputGroupComponent`.\n     * ```html\n     * <igx-input-group [disabled]=\"'true'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('class.igx-input-group--disabled')\n    @Input()\n    public disabled = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.input.valid === IgxInputState.VALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.input.valid === IgxInputState.INVALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--warning')\n    public hasWarning = false;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxHintDirective, { read: IgxHintDirective })\n    protected hints: QueryList<IgxHintDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective })\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this._supressInputAutofocus) {\n            this.input.focus();\n        }\n    }\n\n    /**\n     * An @Input property that sets how the input will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `line`.\n     * ```html\n     *<igx-input-group [type]=\"'search'\">\n     * ```\n     */\n    @Input('type')\n    set type(value: string) {\n        const type: IgxInputGroupType = (IgxInputGroupType as any)[value.toUpperCase()];\n        if (type !== undefined) {\n            this.isBox = this.isBorder = this.isSearch = false;\n            switch (type) {\n                case IgxInputGroupType.BOX:\n                    this.isBox = true;\n                    break;\n                case IgxInputGroupType.BORDER:\n                    this.isBorder = true;\n                    break;\n                case IgxInputGroupType.SEARCH:\n                    this.isSearch = true;\n                    break;\n                default: break;\n            }\n\n            this._type = type;\n        }\n    }\n\n    /**\n     * Returns whether the input element of the input group will be automatically focused on click.\n     * ```typescript\n     * let supressInputAutofocus = this.inputGroup.supressInputAutofocus;\n     * ```\n     */\n    @Input()\n    public get supressInputAutofocus(): boolean {\n        return this._supressInputAutofocus;\n    }\n\n    /**\n     * Sets whether the input element of the input group will be automatically focused on click.\n     * ```html\n     * <igx-input-group [supressInputAutofocus]=\"true\"></igx-input-group>\n     * ```\n     */\n    public set supressInputAutofocus(value: boolean) {\n        this._supressInputAutofocus = value;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--filled')\n    get isFilled() {\n        return this._filled || (this.input && this.input.value);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--cosy')\n    get isDisplayDensityCosy() {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--comfortable')\n    get isDisplayDensityComfortable() {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--compact')\n    get isDisplayDensityCompact() {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.\n     * Values are `line` - 0, `box` - 1, `border` - 2  and `search` - 3. The default is `line`.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputType = this.inputGroup.type;\n     *}\n     * ```\n     */\n    get type() {\n        return this._type.toString();\n    }\n\n    constructor(private _element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) private _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n        this.element = _element;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has hints.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputHints = this.inputGroup.hasHints;\n     *}\n     * ```\n     */\n    get hasHints() {\n        return this.hints.length > 0;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputBroder = this.inputGroup.hasBorder;\n     *}\n     * ```\n     */\n    get hasBorder() {\n        return this._type === IgxInputGroupType.LINE ||\n            this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is line.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeLine = this.inputGroup.isTypeLine;\n     *}\n     * ```\n     */\n    public get isTypeLine(): boolean {\n        return  this._type === IgxInputGroupType.LINE;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is box.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBox = this.inputGroup.isTypeBox;\n     *}\n     *```\n     */\n    get isTypeBox() {\n        return this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBorder = this.inputGroup.isTypeBorder;\n     *}\n     * ```\n     */\n    get isTypeBorder() {\n        return this._type === IgxInputGroupType.BORDER;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is search.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeSearch = this.inputGroup.isTypeSearch;\n     *}\n     * ```\n     */\n    get isTypeSearch() {\n        return  this._type === IgxInputGroupType.SEARCH;\n    }\n\n    get filled() {\n        return this._filled;\n    }\n\n    set filled(val) {\n        this._filled = val;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxInputGroupComponent, IgxHintDirective, IgxInputDirective, IgxLabelDirective],\n    exports: [IgxInputGroupComponent,  IgxHintDirective, IgxInputDirective, IgxLabelDirective, IgxPrefixDirective, IgxSuffixDirective],\n    imports: [CommonModule, IgxPrefixModule, IgxSuffixModule]\n})\nexport class IgxInputGroupModule { }\n","import {\n    Directive, Input, Self, Optional, Inject, HostBinding, Output, EventEmitter,\n    NgModule, ElementRef, HostListener, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NgModel, FormControlName } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { CancelableEventArgs } from '../../core/utils';\nimport { OverlaySettings, AbsoluteScrollStrategy, IScrollStrategy, IPositionStrategy, AutoPositionStrategy } from '../../services/index';\nimport { IgxDropDownModule, IgxDropDownComponent, ISelectionEventArgs, IgxDropDownItemNavigationDirective } from '../../drop-down/index';\nimport { IgxInputGroupComponent } from '../../input-group/index';\nimport { IgxOverlayOutletDirective } from '../toggle/toggle.directive';\n\n/**\n * Interface that encapsulates onItemSelection event arguments - new value and cancel selection.\n * @export\n */\nexport interface AutocompleteItemSelectionEventArgs extends CancelableEventArgs {\n    /**\n     * New value selected from the drop down\n     */\n    value: string;\n}\n\nexport interface AutocompleteOverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n}\n\n/**\n * **Ignite UI for Angular Autocomplete** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/autocomplete.html)\n *\n * The igxAutocomplete directive provides a way to enhance a text input\n * by showing a drop down of suggested options, provided by the developer.\n *\n * Example:\n * ```html\n * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" />\n * <igx-drop-down #townsPanel>\n *     <igx-drop-down-item *ngFor=\"let town of towns | startsWith:townSelected\" [value]=\"town\">\n *         {{town}}\n *     </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Directive({\n    selector: '[igxAutocomplete]'\n})\nexport class IgxAutocompleteDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    constructor(@Self() @Optional() @Inject(NgModel) protected ngModel: NgModel,\n                @Self() @Optional() @Inject(FormControlName) protected formControl: FormControlName,\n                @Optional() protected group: IgxInputGroupComponent,\n                protected elementRef: ElementRef,\n                protected cdr: ChangeDetectorRef) {\n        super(null);\n    }\n\n    private defaultSettings: OverlaySettings = {\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new AutoPositionStrategy({ target: this.parentElement }),\n        excludePositionTarget: true\n    };\n\n    protected id: string;\n    protected dropDownOpened$ = new Subject<boolean>();\n    protected get model() {\n        return this.ngModel || this.formControl;\n    }\n\n    /** @hidden @internal */\n    get nativeElement(): HTMLInputElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /** @hidden @internal */\n    get parentElement(): HTMLElement {\n        return this.group ? this.group.element.nativeElement : this.nativeElement;\n    }\n\n    private get settings(): OverlaySettings {\n        const settings = Object.assign({}, this.defaultSettings, this.autocompleteSettings);\n        if (!settings.positionStrategy.settings.target) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.parentElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n        return settings;\n    }\n\n    /**\n     * Sets the target of the autocomplete directive\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxAutocomplete]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxAutocomplete')\n    public target: IgxDropDownComponent;\n\n    /**\n     * Enables/disables autocomplete component\n     *\n     * ```typescript\n     * // get\n     * let disabled = this.autocomplete.disabled;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteDisabled]=\"disabled\"/>\n     * ```\n     * ```typescript\n     * // set\n     * public disabled = true;\n     * ```\n     */\n    @Input('igxAutocompleteDisabled')\n    public disabled = false;\n\n    /**\n     * Provide overlay settings for the autocomplete drop down\n     *\n     * ```typescript\n     * // get\n     * let settings = this.autocomplete.autocompleteSettings;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteSettings]=\"settings\"/>\n     * ```\n     * ```typescript\n     * // set\n     * this.settings = {\n     *  positionStrategy: new ConnectedPositioningStrategy({\n     *      closeAnimation: null,\n     *      openAnimation: null\n     *  })\n     * };\n     * ```\n     */\n    @Input('igxAutocompleteSettings')\n    autocompleteSettings: AutocompleteOverlaySettings;\n\n    /**\n     * Emitted after item from the drop down is selected\n     *\n     * ```html\n     * <input igxInput [igxAutocomplete]=\"townsPanel\" (onItemSelected)='itemSelected($event)' />\n     * ```\n     */\n    @Output()\n    onItemSelected = new EventEmitter<AutocompleteItemSelectionEventArgs>();\n\n    /** @hidden @internal */\n    @HostBinding('attr.autocomplete')\n    public autofill = 'off';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.role')\n    public role = 'combobox';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded() {\n        return !this.collapsed;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.target.listId;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-activedescendant')\n    public get ariaActiveDescendant() {\n        return !this.target.collapsed && this.target.focusedItem ? this.target.focusedItem.id : null;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-autocomplete')\n    public get ariaAutocomplete() {\n        return 'list';\n    }\n\n    /** @hidden  @internal */\n    @HostListener('input', ['$event'])\n    onInput() {\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    @HostListener('keydown.ArrowUp', ['$event'])\n    @HostListener('keydown.Alt.ArrowUp', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.Tab', ['$event'])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    onTab() {\n        this.close();\n    }\n\n    /** @hidden  @internal */\n    handleKeyDown(event) {\n        if (!this.collapsed) {\n            switch (event.key.toLowerCase()) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'home':\n                case 'end':\n                    return;\n                default:\n                    super.handleKeyDown(event);\n            }\n        }\n    }\n\n    /** @hidden  @internal */\n    onArrowDownKeyDown() {\n        super.onArrowDownKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onArrowUpKeyDown() {\n        super.onArrowUpKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onEndKeyDown() {\n        super.onEndKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onHomeKeyDown() {\n        super.onHomeKeyDown();\n    }\n\n    /**\n     * Closes autocomplete drop down\n     */\n    public close() {\n        if (this.collapsed) {\n            return;\n        }\n        this.target.close();\n        this.dropDownOpened$.next();\n    }\n\n    /**\n     * Opens autocomplete drop down\n     */\n    public open() {\n        if (this.disabled || !this.collapsed) {\n            return;\n        }\n        this.target.width = this.parentElement.clientWidth + 'px';\n        this.target.open(this.settings);\n        this.target.onSelection.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.select);\n        this.target.onOpened.pipe(first()).subscribe(this.highlightFirstItem);\n        this.target.children.changes.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.highlightFirstItem);\n    }\n\n    private get collapsed(): boolean {\n        return this.target ? this.target.collapsed : true;\n    }\n\n    private select = (value: ISelectionEventArgs) => {\n        if (!value.newSelection) {\n            return;\n        }\n        value.cancel = true; // Disable selection in the drop down, because in autocomplete we do not save selection.\n        const newValue = value.newSelection.value;\n        const args: AutocompleteItemSelectionEventArgs = { value: newValue, cancel: false };\n        this.onItemSelected.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        this.close();\n        this.nativeElement.focus();\n\n        // Update model after the input is re-focused, in order to have proper valid styling.\n        // Otherwise when item is selected using mouse (and input is blurred), then valid style will be removed.\n        this.model ? this.model.control.setValue(newValue) : this.nativeElement.value = newValue;\n    }\n\n    private highlightFirstItem = () => {\n        if (this.target.focusedItem) {\n            this.target.focusedItem.focused = false;\n            this.target.focusedItem = null;\n        }\n        this.target.navigateFirst();\n        this.cdr.detectChanges();\n    }\n\n    /** @hidden */\n    public ngOnDestroy() {\n        this.dropDownOpened$.complete();\n    }\n}\n\n/** @hidden */\n@NgModule({\n    imports: [IgxDropDownModule, CommonModule],\n    declarations: [IgxAutocompleteDirective],\n    exports: [IgxAutocompleteDirective]\n})\nexport class IgxAutocompleteModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    NgModule,\n    Renderer2,\n    HostListener,\n    Optional,\n    Inject\n} from '@angular/core';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions, DisplayDensity } from '../../core/density';\n\n@Directive({\n    selector: '[igxButton]'\n})\nexport class IgxButtonDirective extends DisplayDensityBase {\n    /**\n     *@hidden\n     */\n    private _type = 'flat';\n    /**\n     *@hidden\n     */\n    private _cssClass = 'igx-button';\n    /**\n     *@hidden\n     */\n    private _color: string;\n    /**\n     *@hidden\n     */\n    private _label: string;\n    /**\n     *@hidden\n     */\n    private _backgroundColor: string;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /**\n     * Returns the underlying DOM element\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Called when the button is clicked\n     */\n    @Output()\n    public buttonClick = new EventEmitter<any>();\n\n    /**\n     * Sets/gets the `role` attribute.\n     * ```typescript\n     * this.button.role = 'navbutton';\n     * ```\n     * ```typescript\n     * let buttonRole =  this.button.role;\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @HostBinding('attr.role') public role = 'button';\n    /**\n     * Sets the type of the button.\n     * ```html\n     * <button  igxButton= \"icon\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButton') set type(value: string) {\n        this._type = value || this._type;\n        this._renderer.addClass(this.nativeElement, `${this._cssClass}--${this._type}`);\n    }\n    /**\n     * Sets the button text color.\n     * ```html\n     * <button igxButton=\"gradient\" igxButtonColor=\"blue\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonColor') set color(value: string) {\n        this._color = value || this.nativeElement.style.color;\n        this._renderer.setStyle(this.nativeElement, 'color', this._color);\n    }\n    /**\n     * Sets the background color of the button.\n     * ```html\n     * <button igxButton=\"raised\" igxButtonBackground=\"red\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonBackground') set background(value: string) {\n        this._backgroundColor = value || this._backgroundColor;\n        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);\n    }\n    /**\n     * Sets the `aria-label` attribute.\n     * ```html\n     * <button igxButton= \"flat\" igxLabel=\"Label\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxLabel') set label(value: string) {\n        this._label = value || this._label;\n        this._renderer.setAttribute(this.nativeElement, `aria-label`, this._label);\n    }\n    /**\n     * Enables/disables the button.\n     *  ```html\n     * <button igxButton= \"fab\" [disabled]=\"true\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() set disabled(val) {\n        val = !!val;\n        if (val) {\n            this._renderer.addClass(this.nativeElement, `${this._cssClass}--disabled`);\n        } else {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClass}--disabled`);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--cosy')\n    public get cssClassCosy(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--compact')\n    public get cssClassCompact(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--fab-cosy')\n    public get cssClassCosyFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--fab-compact')\n    public get cssClassCompactFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * Gets or sets whether the button is selected.\n     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.\n     * ```html\n     * <button igxButton=\"flat\" [selected]=\"button.selected\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() public selected = false;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click',  ['$event'])\n    public onClick(ev) {\n        this.buttonClick.emit(ev);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonDirective],\n    exports: [IgxButtonDirective]\n})\nexport class IgxButtonModule { }\n","import { Directive, HostBinding, NgModule, Input } from '@angular/core';\n\nexport enum IgxDividerType {\n    DEFAULT = 'default',\n    DASHED = 'dashed'\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-divider'\n})\nexport class IgxDividerDirective {\n    /**\n     * Sets/gets the `id` of the divider.\n     * If not set, `id` will have value `\"igx-divider-0\"`;\n     * ```html\n     * <igx-divider id=\"my-divider\"></igx-divider>\n     * ```\n     * ```typescript\n     * let dividerId =  this.divider.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-divider-${NEXT_ID++}`;\n\n\n    /**\n     * An @Input property that sets the value of the `inset` attribute.\n     * If not provided it will be set to `'0'`.\n     * ```html\n     * <igx-divider inset=\"16px\"></igx-divider>\n     * ```\n     */\n    @Input('inset')\n    private _inset = '0';\n\n    /**\n     * An @Input property that sets the value of `role` attribute.\n     * If not the default value of `separator` will be used.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'separator';\n\n    /**\n     * Sets the type of the divider. The default value\n     * is `default`. The divider can also be `dashed`;\n     * ```html\n     * <igx-divider type=\"dashed\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider')\n    @Input()\n    public type: IgxDividerType | string = IgxDividerType.DEFAULT;\n\n    @HostBinding('class.igx-divider--dashed')\n    get isDashed() {\n        return this.type === IgxDividerType.DASHED;\n    }\n\n    /**\n     * An @Input that sets the `middle` attribute of the divider.\n     * If set to `true` and an `inset` value has been provided,\n     * the divider will start shrinking from both ends.\n     * ```html\n     * <igx-divider [middle]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--inset')\n    @Input()\n    public middle = false;\n\n    /**\n     * A getter that returns `true` if the type of the divider is `default`;\n     * ```typescript\n     * const isDefault = this.divider.isDefault;\n     * ```\n     */\n    get isDefault() {\n        return this.type === IgxDividerType.DEFAULT;\n    }\n\n    /**\n     * An @Input that sets the vertical attribute of the divider.\n     * ```html\n     * <igx-divider [vertical]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets the inset of the divider from the side(s).\n     * If the divider attribute `middle` is set to `true`,\n     * it will inset the divider on both sides.\n     * ```typescript\n     * this.divider.inset = '32px';\n     * ```\n     */\n    @HostBinding('style.margin')\n    set inset(value: string) {\n        this._inset = value;\n    }\n\n    /**\n     * Gets the current divider inset in terms of\n     * margin representation as applied to the divider.\n     * ```typescript\n     * const inset = this.divider.inset;\n     * ```\n     */\n    get inset() {\n        const baseMargin = '0';\n\n        if (this.middle) {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin}`;\n            }\n            return `${baseMargin} ${this._inset}`;\n        } else {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin} 0 ${baseMargin}`;\n            }\n            return `${baseMargin} 0 ${baseMargin} ${this._inset}`;\n        }\n    }\n}\n\n@NgModule({\n    declarations: [IgxDividerDirective],\n    exports: [IgxDividerDirective]\n})\nexport class IgxDividerModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    ChangeDetectorRef\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';\nimport { takeUntil, throttle } from 'rxjs/operators';\n\nexport enum RestrictDrag {\n    VERTICALLY,\n    HORIZONTALLY,\n    NONE\n}\n\nexport interface IgxDragCustomEventDetails {\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n    owner: IgxDragDirective;\n    originalEvent: any;\n}\n\nexport interface IgxDropEnterEventArgs {\n        /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n    /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\n\nexport interface IgxDropLeaveEventArgs {\n    /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n        /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\n\nexport interface IgxDropEventArgs {\n    /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n    /**\n     * Whether the default drop behavior of the igxDrop directive should be canceled.\n     * Note: If you implement custom behavior and you use `animateOnRelease` for the igxDrag make sure to call 'event.drag.dropFinished();'\n     * to notify the igxDrag directive that it has been dropped so it animates properly.\n     */\n    cancel: boolean;\n}\n\nexport interface IDragBaseEventArgs {\n    /**\n     * Reference to the original event that caused the interaction with the element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: PointerEvent | MouseEvent | TouchEvent;\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n}\nexport interface IDragStartEventArgs extends IDragBaseEventArgs {\n    /** Set if the the dragging should be canceled. */\n    cancel: boolean;\n}\n\n@Directive({\n    selector: '[igxDrag]'\n})\nexport class IgxDragDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrag` directive. This can be set when instancing `igxDrag` on an element.\n     * ```html\n     * <div [igxDrag]=\"{ source: myElement }\"></div>\n     * ```\n     */\n    @Input('igxDrag')\n    public data: any;\n\n    /**\n     * An @Input property that indicates when the drag should start\n     * By default the drag starts after the draggable element is moved by 5px\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public dragTolerance = 5;\n\n    /**\n     * Sets a custom class that will be added to the `dragGhost` element.\n     * ```html\n     * <div igxDrag [ghostImageClass]=\"'dragGhost'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public ghostImageClass = '';\n\n    /**\n     * An @Input property that hides the draggable element.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\" [hideBaseOnDrag]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public hideBaseOnDrag = false;\n\n    /**\n     * An @Input property that enables/disables the draggable element animation\n     * when the element is released.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public animateOnRelease = false;\n\n    /**\n     * An @Input property that sets the element to which the dragged element will be appended.\n     * By default it's set to null and the dragged element is appended to the body.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [dragGhostHost]=\"hostDiv\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public dragGhostHost = null;\n\n    /**\n     * Event triggered when the draggable element drag starts.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragStart)=\"onDragStart()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragStart(){\n     *      alert(\"The drag has stared!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragStart = new EventEmitter<IDragStartEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is released.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragEnd)=\"onDragEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragEnd(){\n     *      alert(\"The drag has ended!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered after the draggable element is released and after its animation has finished.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (returnMoveEnd)=\"onMoveEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onMoveEnd(){\n     *      alert(\"The move has ended!\");\n     * }\n     * ```\n     */\n    @Output()\n    public returnMoveEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is clicked.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragClicked)=\"dragClicked()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public dragClicked(){\n     *      alert(\"The elemented has been clicked!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragClicked = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.touchAction')\n    public touch = 'none';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.transitionProperty')\n    public transitionProperty = 'top, left';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.visibility')\n    public _visibility = 'visible';\n\n    /**\n     * Sets the visibility of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     this.myDrag.visible = false;\n     * }\n     * ```\n     */\n    public set visible(bVisible) {\n        this._visibility = bVisible ? 'visible' : 'hidden';\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the visibility state of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let dragVisibilty = this.myDrag.visible;\n     * }\n     * ```\n     */\n    public get visible() {\n        return this._visibility === 'visible';\n    }\n\n    /**\n     * @hidden\n     */\n    public set left(val: number) {\n        requestAnimationFrame(() => {\n            if (this.dragGhost) {\n                this.dragGhost.style.left = val + 'px';\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public get left() {\n        return parseInt(this.dragGhost.style.left, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public set top(val: number) {\n        requestAnimationFrame(() => {\n            if (this.dragGhost) {\n                this.dragGhost.style.top = val + 'px';\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public get top() {\n        return parseInt(this.dragGhost.style.top, 10);\n    }\n\n    /**\n     * Returns if the browser supports pointer events.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let pointerEvents = this.myDrag.pointerEventsEnabled;\n     * }\n     * ```\n     */\n    public get pointerEventsEnabled() {\n        return typeof PointerEvent !== 'undefined';\n    }\n\n    /**\n     * Returns if the browser supports touch events.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let touchEvents = this.myDrag.pointerEventsEnabled;\n     * }\n     * ```\n     */\n    public get touchEventsEnabled() {\n        return 'ontouchstart' in window;\n    }\n\n    /**\n     * @hidden\n     */\n    public defaultReturnDuration = '0.5s';\n\n    /**\n     * @hidden\n     */\n    protected _startX = 0;\n    /**\n     * @hidden\n     */\n    protected _startY = 0;\n\n    /**\n     * @hidden\n     */\n    protected dragGhost;\n    /**\n     * @hidden\n     */\n    protected _dragStarted = false;\n    /**\n     * @hidden\n     */\n    protected _dragOffsetX;\n    /**\n     * @hidden\n     */\n    protected _dragOffsetY;\n    /**\n     * @hidden\n     */\n    protected _dragStartX;\n    /**\n     * @hidden\n     */\n    protected _dragStartY;\n    /**\n     * @hidden\n     */\n    protected _pointerDownId = null;\n\n    /**\n     * @hidden\n     */\n    protected _clicked = false;\n    /**\n     * @hidden\n     */\n    protected _lastDropArea = null;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    protected _removeOnDestroy = true;\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef, public zone: NgZone, public renderer: Renderer2) {\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            if (this.pointerEventsEnabled) {\n                fromEvent(this.element.nativeElement, 'pointerdown').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(this.element.nativeElement, 'pointermove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(this.element.nativeElement, 'pointerup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else if (this.touchEventsEnabled) {\n                fromEvent(this.element.nativeElement, 'touchstart').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(document.defaultView, 'touchmove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'touchend').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else {\n                // We don't have pointer events and touch events. Use then mouse events.\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(document.defaultView, 'mousemove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n\n        if (this.dragGhost && this._removeOnDestroy) {\n            this.dragGhost.parentNode.removeChild(this.dragGhost);\n            this.dragGhost = null;\n        }\n    }\n\n    /**\n     * @hidden\n     * Method bound to the PointerDown event of the base element igxDrag is initialized.\n     * @param event PointerDown event captured\n     */\n    public onPointerDown(event) {\n        this._clicked = true;\n        this._pointerDownId = event.pointerId;\n\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            this._startX = event.pageX;\n            this._startY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            this._startX = event.touches[0].pageX;\n            this._startY = event.touches[0].pageY;\n        }\n\n        // Take margins because getBoundingClientRect() doesn't include margins of the element\n        const marginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n        const marginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n\n        this._dragOffsetX =\n            (this._startX - this.element.nativeElement.getBoundingClientRect().left - this.getWindowScrollLeft()) + marginLeft;\n        this._dragOffsetY =\n            (this._startY - this.element.nativeElement.getBoundingClientRect().top - this.getWindowScrollTop()) + marginTop;\n        this._dragStartX = this._startX - this._dragOffsetX;\n        this._dragStartY = this._startY - this._dragOffsetY;\n\n        // Set pointer capture so we detect pointermove even if mouse is out of bounds until dragGhost is created.\n        if (this.pointerEventsEnabled) {\n            this.element.nativeElement.setPointerCapture(this._pointerDownId);\n        } else {\n            this.element.nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     * Perfmorm drag move logic when dragging and dispatching events if there is igxDrop under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the dragGhost is rendered the pointerId is reassigned to the dragGhost. Then this method is bound to it.\n     * @param event PointerMove event captured\n     */\n    public onPointerMove(event) {\n        if (this._clicked) {\n            const dragStartArgs: IDragStartEventArgs = {\n                originalEvent: event,\n                owner: this,\n                cancel: false\n            };\n            let pageX, pageY;\n            if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n                // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n                pageX = event.pageX;\n                pageY = event.pageY;\n            } else if (this.touchEventsEnabled) {\n                pageX = event.touches[0].pageX;\n                pageY = event.touches[0].pageY;\n\n                // Prevent scrolling on touch while dragging\n                event.preventDefault();\n            }\n\n            const totalMovedX = pageX - this._startX;\n            const totalMovedY = pageY - this._startY;\n            if (!this._dragStarted &&\n                (Math.abs(totalMovedX) > this.dragTolerance || Math.abs(totalMovedY) > this.dragTolerance)) {\n                this.zone.run(() => {\n                    this.dragStart.emit(dragStartArgs);\n                });\n\n                if (!dragStartArgs.cancel) {\n                    this._dragStarted = true;\n                    // We moved enough so dragGhost can be rendered and actual dragging to start.\n                    this.createDragGhost(event);\n                }\n                return;\n            } else if (!this._dragStarted) {\n                return;\n            }\n\n            this.left = this._dragStartX + totalMovedX;\n            this.top = this._dragStartY + totalMovedY;\n\n            this.dispatchDragEvents(pageX, pageY, event);\n        }\n    }\n\n    /**\n     * @hidden\n     * Perform drag end logic when releasing the dragGhost and dispatching drop event if igxDrop is under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the dragGhost is rendered the pointerId is reassigned to the dragGhost. Then this method is bound to it.\n     * @param event PointerUp event captured\n     */\n    public onPointerUp(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        const eventArgs = {\n            originalEvent: event,\n            owner: this\n        };\n        this._clicked = false;\n        if (this._dragStarted) {\n            if (this._lastDropArea && this._lastDropArea !== this.element.nativeElement) {\n                if (!this.animateOnRelease) {\n                    this.onTransitionEnd(null);\n                }\n\n                // dragging ended over a drop area. Call this after transition because onDrop might remove the element.\n                this.dispatchDropEvent(event.pageX, event.pageY, event);\n                // else the drop directive needs to call the dropFinished() method so the animation can perform\n            } else if (this.animateOnRelease &&\n                    (this.left !== Math.floor(this._dragStartX) || this.top !== Math.floor(this._dragStartY))) {\n                // If the start positions are the same as the current the transition will not execute.\n                // return the ghost to start position before removing it. See onTransitionEnd.\n                this.dragGhost.style.transitionDuration = this.defaultReturnDuration;\n                this.left = this._dragStartX;\n                this.top = this._dragStartY;\n            } else {\n                this.onTransitionEnd(null);\n            }\n\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n        } else {\n            this.zone.run(() => {\n                this.dragClicked.emit(eventArgs);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * Create dragGhost element - if a Node object is provided it creates a clone of that node,\n     * otherwise it clones the host element.\n     * Bind all needed events.\n     * @param event Pointer event required when the dragGhost is being initialized.\n     * @param node The Node object to be cloned.\n     */\n    protected createDragGhost(event, node: any = null) {\n        this.dragGhost = node ? node.cloneNode(true) : this.element.nativeElement.cloneNode(true);\n        this.dragGhost.style.transitionDuration = '0.0s';\n        this.dragGhost.style.position = 'absolute';\n        const hostLeft = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().left : 0;\n        const hostTop = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().top : 0;\n        this.dragGhost.style.top = this._dragStartY - hostTop + 'px';\n        this.dragGhost.style.left = this._dragStartX - hostLeft + 'px';\n\n        if (this.ghostImageClass) {\n            this.renderer.addClass(this.dragGhost, this.ghostImageClass);\n        }\n\n        if (this.dragGhostHost) {\n            this.dragGhostHost.appendChild(this.dragGhost);\n        } else {\n            document.body.appendChild(this.dragGhost);\n        }\n\n        if (this.pointerEventsEnabled) {\n            // The dragGhost takes control for moving and dragging after it has been shown.\n            this.dragGhost.setPointerCapture(this._pointerDownId);\n            this.dragGhost.addEventListener('pointermove', (args) => {\n                this.onPointerMove(args);\n            });\n            this.dragGhost.addEventListener('pointerup', (args) => {\n                this.onPointerUp(args);\n            });\n        }\n\n        if (this.animateOnRelease) {\n            // Transition animation when the dragGhost is released and it returns to it's original position.\n            this.dragGhost.addEventListener('transitionend', (args) => {\n                this.onTransitionEnd(args);\n            });\n        }\n\n        // Hide the base after the dragGhost is created, because otherwise the dragGhost will be not visible.\n        if (this.hideBaseOnDrag) {\n            this.visible = false;\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDragEnter/igxDragLeave events based on current pointer position and if drop area is under.\n     */\n    protected dispatchDragEvents(pageX: number, pageY: number, originalEvent) {\n        let topDropArea;\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        const elementsFromPoint = this.getElementsAtPoint(pageX, pageY);\n        for (let i = 0; i < elementsFromPoint.length; i++) {\n            if (elementsFromPoint[i].getAttribute('droppable') === 'true' && elementsFromPoint[i] !== this.dragGhost) {\n                topDropArea = elementsFromPoint[i];\n                break;\n            }\n        }\n\n        if (topDropArea) {\n            this.dispatchEvent(topDropArea, 'igxDragOver', eventArgs);\n        }\n\n        if (topDropArea &&\n            (!this._lastDropArea || (this._lastDropArea && this._lastDropArea !== topDropArea))) {\n            if (this._lastDropArea) {\n                this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n            }\n\n            this._lastDropArea = topDropArea;\n            this.dispatchEvent(this._lastDropArea, 'igxDragEnter', eventArgs);\n        } else if (!topDropArea && this._lastDropArea) {\n            this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n            this._lastDropArea = null;\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDrop event based on current pointer position if there is last recorder drop area under the pointer.\n     * Last recorder drop area is updated in @dispatchDragEvents method.\n     */\n    protected dispatchDropEvent(pageX: number, pageY: number, originalEvent) {\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        this.dispatchEvent(this._lastDropArea, 'igxDrop', eventArgs);\n        this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n        this._lastDropArea = null;\n    }\n\n    /**\n     * @hidden\n     * Update relative positions\n     */\n    public updateDragRelativePos() {\n        if (!this.dragGhost) {\n            return;\n        }\n\n        // Calculate the new dragGhost position to remain where the mouse is, so it doesn't jump\n        const totalDraggedX = this.left - this._dragStartX;\n        const totalDraggedY = this.top - this._dragStartY;\n        const newPosX = this.element.nativeElement.getBoundingClientRect().left;\n        const newPosY = this.element.nativeElement.getBoundingClientRect().top;\n        const diffStartX = this._dragStartX - newPosX;\n        const diffStartY = this._dragStartY - newPosY;\n        this.top = newPosX + totalDraggedX - diffStartX;\n        this.left = newPosY + totalDraggedY - diffStartY;\n    }\n\n    /**\n     * Informs the `igxDrag` directive that it has been dropped/released.\n     * This should usully be called when `animateOnRelease` is set to `true`.\n     * When canceling or defining custom drop logic this tells the igxDrag to update it's positions and\n     * animate correctly to the new position.\n     * ```typescript\n     * public onDropElem(event) {\n     *     // Function bound to the igxDrop directive event `onDrop`\n     *     // This cancels the default drop logic of the `igxDrop`\n     *     event.cancel = true;\n     *     event.drag.dropFinished();\n     * }\n     * ```\n     */\n    public dropFinished() {\n        if (this.animateOnRelease && this.dragGhost) {\n            this.updateDragRelativePos();\n\n            // Return the dragged element to the start. See onTransitionEnd next.\n            // Take margins becuase getBoundingClientRect() doesn't include margins\n            const marginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n            const marginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n            const newPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n            const newPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n\n            this.dragGhost.style.transitionDuration = this.defaultReturnDuration;\n            this.left = newPosX - marginLeft;\n            this.top = newPosY - marginTop;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onTransitionEnd(event) {\n        if (this._dragStarted && !this._clicked) {\n            if (this.hideBaseOnDrag) {\n                this.visible = true;\n            }\n            this.dragGhost.parentNode.removeChild(this.dragGhost);\n            this.dragGhost = null;\n\n            this.element.nativeElement.style.transitionDuration = '0.0s';\n            this._dragStarted = false;\n            this.zone.run(() => {\n                this.returnMoveEnd.emit({\n                    originalEvent: event,\n                    owner: this\n                });\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElementsAtPoint(pageX: number, pageY: number) {\n        // correct the coordinates with the current scroll position, because\n        // document.elementsFromPoint conider position within the current viewport\n        // window.pageXOffset == window.scrollX; // always true\n        // using window.pageXOffset for IE9 compatibility\n        const viewPortX = pageX - window.pageXOffset;\n        const viewPortY = pageY - window.pageYOffset;\n        if (document['msElementsFromPoint']) {\n            // Edge and IE special snowflakes\n            return document['msElementsFromPoint'](viewPortX, viewPortY);\n        } else {\n            // Other browsers like Chrome, Firefox, Opera\n            return document.elementsFromPoint(viewPortX, viewPortY);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected dispatchEvent(target, eventName: string, eventArgs: IgxDragCustomEventDetails) {\n        // This way is IE11 compatible.\n        const dragLeaveEvent = document.createEvent('CustomEvent');\n        dragLeaveEvent.initCustomEvent(eventName, false, false, eventArgs);\n        target.dispatchEvent(dragLeaveEvent);\n        // Othersie can be used `target.dispatchEvent(new CustomEvent(eventName, eventArgs));`\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n}\n\n@Directive({\n    selector: '[igxDrop]'\n})\nexport class IgxDropDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrop` directive. This can be set when instancing `igxDrop` on an element.\n     * ```html\n     * <div [igxDrop]=\"{ source: myElement }\"></div>\n     * ```\n     */\n    @Input('igxDrop')\n    public data: any;\n\n    /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onEnter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable elemente has entered the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onEnter = new EventEmitter<IgxDropEnterEventArgs>();\n\n    /** Event triggered when dragged element leaves the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onLeave)=\"dragLeave()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragLeave(){\n     *     alert(\"A draggable elemente has left the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onLeave = new EventEmitter<IgxDropLeaveEventArgs>();\n\n    /** Event triggered when dragged element is dropped in the area of the element.\n     * Since the `igxDrop` has default logic that appends the dropped element as a child, it can be canceled here.\n     * To cancel the default logic the `cancel` property of the event needs to be set to true.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onDrop)=\"dragDrop()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragDrop(){\n     *     alert(\"A draggable elemente has been dropped in the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDrop = new EventEmitter<IgxDropEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.droppable')\n    public droppable = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.dragOver')\n    public dragover = false;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, private _renderer: Renderer2, private _zone: NgZone) {\n    }\n\n    ngOnInit() {\n        this._zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'igxDragEnter').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onDragEnter(res as CustomEvent<IgxDragCustomEventDetails>));\n\n            fromEvent(this.element.nativeElement, 'igxDragLeave').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragLeave(res));\n            fromEvent(this.element.nativeElement, 'igxDragOver').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragOver(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragOver(event) { }\n\n    /**\n     * @hidden\n     */\n    public onDragEnter(event: CustomEvent<IgxDragCustomEventDetails>) {\n        this.dragover = true;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IgxDropEnterEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.onEnter.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragLeave(event) {\n        this.dragover = false;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IgxDropLeaveEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.onLeave.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('igxDrop', ['$event'])\n    public onDragDrop(event) {\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const args: IgxDropEventArgs = {\n            owner: this,\n            originalEvent: event.detail.originalEvent,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            cancel: false\n        };\n        this._zone.run(() => {\n            this.onDrop.emit(args);\n        });\n\n        if (!args.cancel) {\n            // To do for generic scenario\n            this._renderer.removeChild(event.detail.owner.element.nativeElement.parentNode, event.detail.owner.element.nativeElement);\n            this._renderer.appendChild(this.element.nativeElement, event.detail.owner.element.nativeElement);\n\n            setTimeout(() => {\n                event.detail.owner.dropFinished();\n            }, 0);\n        }\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n}\n\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDragDirective, IgxDropDirective],\n    exports: [IgxDragDirective, IgxDropDirective]\n})\nexport class IgxDragDropModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    SimpleChanges\n} from '@angular/core';\n\nexport class IgxFilterOptions {\n    // Input text value that will be used as a filtering pattern (matching condition is based on it)\n    public inputValue = '';\n\n    // Item property, which value should be used for filtering\n    public key: string;\n\n    // Represent items of the list. It should be used to handle decalaratevely defined widgets\n    public items: any[];\n\n    // Function - get value to be tested from the item\n    // item - single item of the list to be filtered\n    // key - property name of item, which value should be tested\n    // Default behavior - returns \"key\"- named property value of item if key si provided,\n    // otherwise textContent of the item's html element\n    public get_value(item: any, key: string): string {\n        let result = '';\n\n        if (key && item[key]) {\n            result = item[key].toString();\n        } else if (item.element) {\n            if (item.element.nativeElement) {\n                result = item.element.nativeElement.textContent.trim();\n            // Check if element doesn't return the DOM element directly\n            } else if (item.element.textContent) {\n                result = item.element.textContent.trim();\n            }\n        }\n\n        return result;\n    }\n\n    // Function - formats the original text before matching process\n    // Default behavior - returns text to lower case\n    public formatter(valueToTest: string): string {\n        return valueToTest.toLowerCase();\n    }\n\n    // Function - determines whether the item met the condition\n    // valueToTest - text value that should be tested\n    // inputValue - text value from input that condition is based on\n    // Default behavior - \"contains\"\n    public matchFn(valueToTest: string, inputValue: string): boolean {\n        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;\n    }\n\n    // Function - executed after matching test for every matched item\n    // Default behavior - shows the item\n    public metConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = false;\n        }\n    }\n\n    // Function - executed for every NOT matched item after matching test\n    // Default behavior - hides the item\n    public overdueConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = true;\n        }\n    }\n}\n\n\n@Directive({\n    selector: '[igxFilter]'\n})\nexport class IgxFilterDirective implements OnChanges {\n    @Output() public filtering = new EventEmitter(false); // synchronous event emitter\n    @Output() public filtered = new EventEmitter();\n\n    @Input('igxFilter') public filterOptions: IgxFilterOptions;\n\n    constructor(private element: ElementRef, renderer: Renderer2) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        // Detect only changes of input value\n        if (changes.filterOptions &&\n            changes.filterOptions.currentValue &&\n            changes.filterOptions.currentValue.inputValue !== undefined &&\n            changes.filterOptions.previousValue &&\n            changes.filterOptions.currentValue.inputValue !== changes.filterOptions.previousValue.inputValue) {\n            this.filter();\n        }\n    }\n\n    private filter() {\n        if (!this.filterOptions.items) {\n            return;\n        }\n\n        const args = { cancel: false, items: this.filterOptions.items };\n        this.filtering.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        const pipe = new IgxFilterPipe();\n\n        const filtered = pipe.transform(this.filterOptions.items, this.filterOptions);\n        this.filtered.emit({ filteredItems: filtered });\n    }\n}\n\n@Pipe({\n    name: 'igxFilter',\n    pure: false\n})\n\nexport class IgxFilterPipe implements PipeTransform {\n    public transform(items: any[],\n                     // options - initial settings of filter functionality\n                     options: IgxFilterOptions) {\n\n        let result = [];\n\n        if (!items || !items.length || !options) {\n            return;\n        }\n\n        if (options.items) {\n            items = options.items;\n        }\n\n        result = items.filter((item: any) => {\n            const match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);\n\n            if (match) {\n                if (options.metConditionFn) {\n                    options.metConditionFn(item);\n                }\n            } else {\n                if (options.overdueConditionFn) {\n                    options.overdueConditionFn(item);\n                }\n            }\n\n            return match;\n        });\n\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFilterDirective, IgxFilterPipe],\n    exports: [IgxFilterDirective, IgxFilterPipe],\n    imports: [CommonModule]\n})\nexport class IgxFilterModule {\n}\n","import { Directive, ElementRef, Input, NgModule, Optional, Inject, Self } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../../core/edit-provider';\n\n@Directive({\n    exportAs: 'igxFocus',\n    selector: '[igxFocus]'\n})\nexport class IgxFocusDirective {\n\n    private focusState = true;\n    /**\n     * Returns the state of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let isFocusOn = this.igxFocus.focused;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    @Input('igxFocus')\n    get focused(): boolean {\n        return this.focusState;\n    }\n    /**\n     * Sets the state of the igxFocus.\n     * ```html\n     * <igx-input-group >\n     *  <input #focusContainer igxInput [igxFocus]=\"true\"/>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    set focused(val: boolean) {\n        this.focusState = val;\n        this.trigger();\n    }\n    /**\n     * Gets the native element of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let igxFocusNativeElement = this.igxFocus.nativeElement;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    get nativeElement() {\n        if (this.comp && this.comp[0] && this.comp[0].getEditElement) {\n            return (this.comp[0] as EditorProvider).getEditElement();\n        }\n        return this.element.nativeElement;\n    }\n\n    constructor(private element: ElementRef, @Inject(NG_VALUE_ACCESSOR) @Self() @Optional() private comp?: any[]) { }\n    /**\n     * Triggers the igxFocus state.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * this.igxFocus.trigger();\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    trigger() {\n        if (this.focusState) {\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFocusDirective],\n    exports: [IgxFocusDirective]\n})\nexport class IgxFocusModule { }\n","import { Directive, HostBinding, Input, NgModule } from '@angular/core';\n\n@Directive({\n    selector: '[igxLayout]'\n})\nexport class IgxLayoutDirective {\n    /**\n     * Sets the default flow direction of the container's children.\n     *\n     * Defaults to `rows`.\n     *\n     * ```html\n     *  <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     *  </div>\n     * ```\n     */\n    @Input('igxLayoutDir') public dir = 'row';\n\n    /**\n     * Defines the direction flex children are placed in the flex container.\n     *\n     * When set to `true`, the `rows` direction goes right to left and `columns` goes bottom to top.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutReverse=\"true\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutReverse') public reverse = false;\n\n    /**\n     * By default the immediate children will all try to fit onto one line.\n     *\n     * The default value `nowrap` sets this behavior.\n     *\n     * Other accepted values are `wrap` and `wrap-reverse`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\"\n     *   igxLayoutWrap=\"wrap\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutWrap') public wrap = 'nowrap';\n\n    /**\n     * Defines the alignment along the main axis.\n     *\n     * Defaults to `flex-start` which packs the children toward the start line.\n     *\n     * Other possible values are `flex-end`, `center`, `space-between`, `space-around`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutJustify=\"space-between\">\n     *    <div>1</div>\n     *    <div>2</div>\n     *    <div>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutJustify') public justify = 'flex-start';\n\n    /**\n     * Defines the default behavior for how children are laid out along the corss axis of the current line.\n     *\n     * Defaults to `flex-start`.\n     *\n     * Other possible values are `flex-end`, `center`, `baseline`, and `stretch`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutItemAlign=\"start\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutItemAlign') public itemAlign = 'stretch';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display') public display = 'flex';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-wrap') get flexwrap() { return this.wrap; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.justify-content') get justifycontent() { return this.justify; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.align-items') get align() { return this.itemAlign; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-direction')\n    get direction() {\n        if (this.reverse) {\n            return (this.dir === 'row') ? 'row-reverse' : 'column-reverse';\n        }\n        return (this.dir === 'row') ? 'row' : 'column';\n    }\n}\n\n@Directive({\n    selector: '[igxFlex]'\n})\nexport class IgxFlexDirective {\n\n    /**\n     * Applies the `grow` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content1</div>\n     *    <div igxFlex igxFlexGrow=\"1\">Content2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexGrow') public grow = 1;\n\n    /**\n     * Applies the `shrink` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content1</div>\n     *    <div igxFlex igxFlexShrink=\"0\">Content2</div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexShrink') public shrink = 1;\n\n    /**\n     * Applies the directive to an element.\n     *\n     * Possible values include `igxFlexGrow`, `igxFlexShrink`, `igxFlexOrder`, `igxFlexBasis`.\n     *\n     * ```html\n     * <div igxFlex>Content</div>\n     * ```\n     */\n    @Input('igxFlex') public flex = '';\n\n    /**\n     * Applies the `order` attribute to an element that uses the directive.\n     *\n     * Default value is `0`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexOrder=\"1\">Content1</div>\n     *    <div igxFlex igxFlexOrder=\"0\">Content2</div>\n     *    <div igxFlex igxFlexOrder=\"2\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexOrder') public order = 0;\n\n    /**\n     * Applies the `flex-basis` attribute to an element that uses the directive.\n     *\n     * Default value is `auto`.\n     *\n     * Other possible values include `content`, `max-content`, `min-content`, `fit-content`.\n     *\n     * ```html\n     * <div igxFlex igxFlexBasis=\"fit-content\">Content</div>\n     * ```\n     */\n    @Input('igxFlexBasis') public basis = 'auto';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex')\n    get style() {\n        if (this.flex) {\n            return `${this.flex}`;\n        }\n        return `${this.grow} ${this.shrink} ${this.basis}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.order')\n    get itemorder() {\n        return this.order || 0;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFlexDirective, IgxLayoutDirective],\n    exports: [IgxFlexDirective, IgxLayoutDirective]\n})\nexport class IgxLayoutModule { }\n","/**\n * @hidden\n */\nexport const MASK_FLAGS = [ 'C', '&', 'a', 'A', '?', 'L', '9', '0', '#' ];\n\n/**\n * @hidden\n */\nexport const KEYS = {\n    Ctrl : 17,\n    Z : 90,\n    Y : 89,\n    X : 88,\n    BACKSPACE : 8,\n    DELETE : 46\n  };\n\n\n/**\n * @hidden\n */\nexport class MaskHelper {\n    private _cursor;\n    public get cursor() {\n        return this._cursor;\n    }\n    public data: boolean;\n\n    public parseValueByMask(value, maskOptions, cursor): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (inputValue.length < mask.length) { // BACKSPACE, DELETE\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (nonLiteralIndeces.indexOf(cursor + 1) !== -1) {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, maskOptions.promptChar);\n                this._cursor = cursor + 1;\n            } else {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, mask[cursor + 1]);\n                this._cursor = cursor + 1;\n                for (let i = this._cursor; i < 0; i--) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor--;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        } else {\n            const char = inputValue[cursor];\n            let isCharValid = this.validateCharOnPostion(char, cursor, mask);\n            if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, cursor, char);\n                    this._cursor = cursor + 1;\n                } else {\n                    this._cursor = cursor;\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                this._cursor = ++cursor;\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor = ++cursor;\n                    } else {\n                        isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, cursor, char);\n                            this._cursor = ++cursor;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseMask(maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        return outputVal;\n    }\n\n    public parseValueByMaskOnInit(inputVal, maskOptions): string {\n        let outputVal = '';\n        let value = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n        const literalValues: string[] = Array.from(literals.values());\n\n        if (inputVal != null) {\n            value = inputVal.toString();\n        }\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        if (!value) {\n            return outputVal;\n        }\n\n        const nonLiteralValues: string[] = this.getNonLiteralValues(value, literalValues);\n\n        for (let i = 0; i < nonLiteralValues.length; i++) {\n            const char = nonLiteralValues[i];\n            const isCharValid = this.validateCharOnPostion(char, nonLiteralIndeces[i], mask);\n\n            if (!isCharValid && char !== maskOptions.promptChar) {\n                nonLiteralValues[i] = maskOptions.promptChar;\n            }\n        }\n\n        if (nonLiteralValues.length > nonLiteralIndeces.length) {\n            nonLiteralValues.splice(nonLiteralIndeces.length);\n        }\n\n        let pos = 0;\n        for (const nonLiteralValue of nonLiteralValues) {\n            const char = nonLiteralValue;\n            outputVal = this.replaceCharAt(outputVal, nonLiteralIndeces[pos++], char);\n        }\n\n        return outputVal;\n    }\n\n    public restoreValueFromMask(value, maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalValues: string[] = Array.from(literals.values());\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                if (val !== maskOptions.promptChar) {\n                    outputVal += val;\n                }\n            }\n        }\n\n        return outputVal;\n    }\n\n    public parseValueByMaskUponSelection(value, maskOptions, cursor, selection): string {\n        let isCharValid: boolean;\n        let inputValue: string = value;\n        const char: string = inputValue[cursor];\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (!this.data) {\n            this._cursor = cursor < 0 ? ++cursor : cursor;\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                inputValue = isCharValid ? this.replaceCharAt(inputValue, this._cursor++, char) :\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                selection--;\n                if (selection > 0) {\n                    for (let i = 0; i < selection; i++) {\n                        cursor++;\n                        inputValue = nonLiteralIndeces.indexOf(cursor) !== -1 ?\n                            this.insertCharAt(inputValue, cursor, maskOptions.promptChar) :\n                            this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    }\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, this._cursor, mask[this._cursor]);\n                this._cursor++;\n                selection--;\n                let isMarked = false;\n                if (selection > 0) {\n                    cursor = this._cursor;\n                    for (let i = 0; i < selection; i++) {\n                        if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                            isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                            if (isCharValid && !isMarked) {\n                                inputValue = this.insertCharAt(inputValue, cursor, char);\n                                cursor++;\n                                this._cursor++;\n                                isMarked = true;\n                            } else {\n                                inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                                cursor++;\n                            }\n                        } else {\n                            inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                            if (cursor === this._cursor) {\n                                this._cursor++;\n                            }\n                            cursor++;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (this._cursor < 0) {\n                this._cursor++;\n                cursor++;\n            }\n            cursor++;\n            this._cursor = cursor;\n            for (let i = 0; i < selection; i++) {\n                if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                    inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                    cursor++;\n                } else {\n                    inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    cursor++;\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseValueByMaskUponCopyPaste(value, maskOptions, cursor, clipboardData, selection): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        const selectionEnd = cursor + selection;\n\n        this._cursor = cursor;\n        for (const clipboardSym of clipboardData) {\n            const char = clipboardSym;\n\n            if (this._cursor > mask.length) {\n                return inputValue;\n            }\n\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                }\n            } else {\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor++;\n                    } else {\n                        const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                        }\n                        break;\n                    }\n                }\n            }\n\n            selection--;\n        }\n\n        if (selection > 0) {\n            for (let i = this._cursor; i < selectionEnd; i++) {\n                if (literalKeys.indexOf(this._cursor) !== -1) {\n                    this._cursor++;\n                } else {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    private validateCharOnPostion(inputChar: string, position: number, mask: string): boolean {\n        let regex: RegExp;\n        let isValid: boolean;\n        const letterOrDigitRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letterDigitOrSpaceRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const letterRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letteSpaceRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const digitRegEx = '[\\\\d]';\n        const digitSpaceRegEx = '[\\\\d\\\\u0020]';\n        const digitSpecialRegEx = '[\\\\d-\\\\+]';\n\n        switch (mask.charAt(position)) {\n            case 'C':\n                isValid = inputChar !== '';\n                break;\n            case '&':\n                regex = new RegExp('[\\\\u0020]');\n                isValid = !regex.test(inputChar);\n                break;\n            case 'a':\n                regex = new RegExp(letterDigitOrSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'A':\n                regex = new RegExp(letterOrDigitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '?':\n                regex = new RegExp(letteSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'L':\n                regex = new RegExp(letterRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '0':\n                regex = new RegExp(digitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '9':\n                regex = new RegExp(digitSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '#':\n                regex = new RegExp(digitSpecialRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            default: {\n                isValid = null;\n            }\n        }\n\n        return isValid;\n    }\n    private replaceCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index + 1);\n        }\n    }\n    private insertCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index);\n        }\n    }\n    private getMaskLiterals(mask: string): Map<number, string> {\n        const literals = new Map<number, string>();\n\n        for (let i = 0; i < mask.length; i++) {\n            const char = mask.charAt(i);\n            if (MASK_FLAGS.indexOf(char) === -1) {\n                literals.set(i, char);\n            }\n        }\n\n        return literals;\n    }\n    private getNonLiteralIndeces(mask: string, literalKeys: number[]): number[] {\n        const nonLiteralsIndeces: number[] = new Array();\n\n        for (let i = 0; i < mask.length; i++) {\n            if (literalKeys.indexOf(i) === -1) {\n                nonLiteralsIndeces.push(i);\n            }\n        }\n\n        return nonLiteralsIndeces;\n    }\n    private getNonLiteralValues(value: string, literalValues: string[]): string[] {\n        const nonLiteralValues: string[] = new Array();\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                nonLiteralValues.push(val);\n            }\n        }\n\n        return nonLiteralValues;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    NgModule,\n    OnInit,\n    Output,\n    PipeTransform\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { KEYS, MaskHelper } from './mask-helper';\nimport { isIE } from '../../core/utils';\n\nconst noop = () => { };\n\n@Directive({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],\n    selector: '[igxMask]'\n})\nexport class IgxMaskDirective implements OnInit, ControlValueAccessor {\n    /**\n     * Sets the input mask.\n     * ```html\n     * <input [igxMask] = \"'00/00/0000'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input('igxMask')\n    public mask: string;\n\n    /**\n     * Sets the character representing a fillable spot in the input mask.\n     * Default value is \"'_'\".\n     * ```html\n     * <input [promptChar] = \"'/'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public promptChar: string;\n\n    /**\n     * Specifies if the bound value includes the formatting symbols.\n     * ```html\n     * <input [includeLiterals] = \"true\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public includeLiterals: boolean;\n\n    /**\n     * Specifies a placeholder.\n     * ```html\n     * <input placeholder = \"enter text...\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public placeholder: string;\n\n    /**\n     * Specifies a pipe to be used on blur.\n     * ```html\n     * <input [displayValuePipe] = \"displayFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public displayValuePipe: PipeTransform;\n\n    /**\n     * Specifies a pipe to be used on focus.\n     * ```html\n     * <input [focusedValuePipe] = \"inputFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public focusedValuePipe: PipeTransform;\n\n    /**\n     *@hidden\n     */\n    @Input()\n    private dataValue: string;\n\n    /**\n     * Emits an event each time the value changes.\n     * Provides `rawValue: string` and `formattedValue: string` as event arguments.\n     * ```html\n     * <input (onValueChange) = \"onValueChange(rawValue: string, formattedValue: string)\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<IMaskEventArgs>();\n\n    /**\n     *@hidden\n     */\n    private get value() {\n        return this.nativeElement.value;\n    }\n\n    /**\n     *@hidden\n     */\n    private set value(val) {\n        this.nativeElement.value = val;\n    }\n\n    /**\n     *@hidden\n     */\n    private get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionStart() {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionEnd() {\n        return this.nativeElement.selectionEnd;\n    }\n\n    /**\n     *@hidden\n     */\n    private _ctrlDown: boolean;\n\n    /**\n     *@hidden\n     */\n    private _paste: boolean;\n\n    /**\n     *@hidden\n     */\n    private _selection: number;\n\n    /**\n     *@hidden\n     */\n    private _maskOptions = {\n        format: '',\n        promptChar: ''\n    };\n\n    /**\n     *@hidden\n     */\n    private _key;\n\n    /**\n     *@hidden\n     */\n    private _cursorOnPaste;\n\n    /**\n     *@hidden\n     */\n    private _valOnPaste;\n\n    private _stopPropagation: boolean;\n\n    /**\n     *@hidden\n     */\n    private maskHelper: MaskHelper;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    constructor(private elementRef: ElementRef) {\n        this.maskHelper = new MaskHelper();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this._maskOptions.format = this.mask ? this.mask : 'CCCCCCCCCC';\n        this._maskOptions.promptChar = this.promptChar ? this.promptChar : '_';\n        this.nativeElement.setAttribute('placeholder', this.placeholder ? this.placeholder : this._maskOptions.format);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n        }\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = true;\n        }\n\n        if ((this._ctrlDown && key === KEYS.Z) || (this._ctrlDown && key === KEYS.Y)) {\n            event.preventDefault();\n        }\n\n        this._key = key;\n        this._selection = Math.abs(this.selectionEnd - this.selectionStart);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keyup', ['$event'])\n    public onKeyup(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = false;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('paste', ['$event'])\n    public onPaste(event): void {\n        this._paste = true;\n\n        this._valOnPaste = this.value;\n        this._cursorOnPaste = this.getCursorPosition();\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('input', ['$event'])\n    public onInputChanged(event): void {\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n            return;\n        }\n\n        if (this._paste) {\n            this._paste = false;\n\n            const clipboardData = this.value.substring(this._cursorOnPaste, this.getCursorPosition());\n            this.value = this.maskHelper.parseValueByMaskUponCopyPaste(\n                this._valOnPaste, this._maskOptions, this._cursorOnPaste, clipboardData, this._selection);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        } else {\n            const currentCursorPos = this.getCursorPosition();\n\n            this.maskHelper.data = (this._key === KEYS.BACKSPACE) || (this._key === KEYS.DELETE);\n\n            this.value = this._selection && this._selection !== 0 ?\n                this.maskHelper.parseValueByMaskUponSelection(this.value, this._maskOptions, currentCursorPos - 1, this._selection) :\n                this.maskHelper.parseValueByMask(this.value, this._maskOptions, currentCursorPos - 1);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        }\n\n        const rawVal = this.maskHelper.restoreValueFromMask(this.value, this._maskOptions);\n\n        this.dataValue = this.includeLiterals ? this.value : rawVal;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event.target.value'])\n    public onFocus(value) {\n        if (this.focusedValuePipe) {\n            if (isIE()) {\n                this._stopPropagation = true;\n            }\n            this.value = this.focusedValuePipe.transform(value);\n        } else {\n            this.value = this.maskHelper.parseValueByMaskOnInit(this.value, this._maskOptions);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event.target.value'])\n    public onBlur(value) {\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(value);\n        } else if (value === this.maskHelper.parseMask(this._maskOptions)) {\n            this.value = '';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private getCursorPosition(): number {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private setCursorPosition(start: number, end: number = start): void {\n        this.nativeElement.setSelectionRange(start, end);\n    }\n\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this.value = value ? this.maskHelper.parseValueByMaskOnInit(value, this._maskOptions) : '';\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(this.value);\n        }\n\n        this.dataValue = this.includeLiterals ? this.value : value;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: value, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\n/**\n * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.\n */\nexport interface IMaskEventArgs {\n    rawValue: string;\n    formattedValue: string;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxMaskDirective],\n    exports: [IgxMaskDirective],\n    imports: [CommonModule]\n})\nexport class IgxMaskModule { }\n","import {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport interface IChangeRadioEventArgs {\n    value: any;\n    radio: IgxRadioComponent;\n}\n\nexport enum RadioLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nlet nextId = 0;\nconst noop = () => { };\n/**\n * **Ignite UI for Angular Radio Button** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Button allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio>\n *   Simple radio button\n * </igx-radio>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioComponent, multi: true }],\n    selector: 'igx-radio',\n    templateUrl: 'radio.component.html'\n})\n\nexport class IgxRadioComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * Returns reference to native radio element.\n     * ```typescript\n     * let radioElement =  this.radio.nativeRadio;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('radio') public nativeRadio: ElementRef;\n    /**\n     * Returns reference to native label element.\n     * ```typescript\n     * let labelElement =  this.radio.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('nativeLabel') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.radio.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the radio component.\n     * If not set, the `id` of the first radio component will be `\"igx-radio-0\"`.\n     * ```html\n     * <igx-radio id = \"my-first-radio\"></igx-radio>\n     * ```\n     * ```typescript\n     * let radioId =  this.radio.id;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-radio-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the radio component.\n     * If not set, the id of the `label` in the first radio component will be `\"igx-radio-0-label\"`.\n     * ```html\n     * <igx-radio labelId = \"Label1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelId =  this.radio.labelId;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the position of the `label` in the radio component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio labelPosition = \"before\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radio.labelPosition;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio [value] = \"'radioButtonValue'\"></igx-radio>\n     * ```\n     * ```typescript\n     * let value =  this.radio.value;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the radio component.\n     * ```html\n     * <igx-radio name = \"Radio1\"></igx-radio>\n     *  ```\n     * ```typescript\n     * let name =  this.radio.name;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-radio [tabindex] = \"1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.radio.tabindex;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Enables/disables the ripple effect on the radio button..\n     * If not set, the `disableRipple` will have value `false`.\n     * ```html\n     * <igx-radio [disableRipple] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabledRipple =  this.radio.disableRipple;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the radio button is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio [required] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radio.required;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute of the radio component.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-radio aria-labelledby = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.radio.ariaLabelledBy;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the `aria-label` attribute of the radio component.\n     * ```html\n     * <igx-radio aria-label = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.radio.ariaLabel;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the radio `value` is changed.\n     * Provides references to the `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n    /**\n     * Returns the class of the radio component.\n     * ```typescript\n     * let radioClass = this.radio.cssClass;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio')\n    public cssClass = 'igx-radio';\n    /**\n     * Sets/gets  the `checked` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [checked] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isChecked =  this.radio.checked;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets  the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [disabled] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.radio.disabled;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the radio component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.radio.focus = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.radio.focused;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    protected _value: any = null;\n\n    constructor() { }\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    public _onRadioChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onRadioClick(event) {\n        event.stopPropagation();\n        this.select();\n\n        if (isIE()) {\n            this.nativeRadio.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick() {\n        this.select();\n    }\n    /**\n     * Selects the current radio button.\n     * ```typescript\n     * this.radio.select();\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    public select() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = true;\n        this.focused = false;\n        this.change.emit({ value: this.value, radio: this });\n        this._onChangeCallback(this.value);\n    }\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true`;\n     * ```typescript\n     * this.radio.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this._value = value;\n        this.checked = (this._value === this.value);\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeRadio.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case RadioLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case RadioLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n","import { Directive, ElementRef, HostListener, Input, NgModule, NgZone, Renderer2 } from '@angular/core';\nimport { AnimationBuilder, style, animate } from '@angular/animations';\n\n@Directive({\n    selector: '[igxRipple]'\n})\nexport class IgxRippleDirective {\n    /**\n     * Sets/gets the ripple target.\n     * ```html\n     * <div  #rippleContainer class=\"div-1\" igxRipple [igxRippleTarget] = \"'.div-1'\"></div>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleTarget = this.ripple.rippleTarget;\n     * ```\n     * Can set the ripple to activate on a child element inside the parent where igxRipple is defined.\n     * ```html\n     * <div #rippleContainer [igxRippleTarget] = \"'#child\"'>\n     *  <button id=\"child\">Click</button>\n     * </div>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleTarget')\n    public rippleTarget = '';\n    /**\n     * Sets/gets the ripple color.\n     * ```html\n     * <button #rippleContainer [igxRipple] = \"'red'\" ></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleColor = this.ripple.rippleColor;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRipple')\n    public rippleColor: string;\n    /**\n     * Sets/gets the ripple duration(in milliseconds).\n     * Default value is `600`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDuration] = \"800\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleDuration = this.ripple.rippleDuration;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDuration')\n    public rippleDuration = 600;\n    /**\n     * Enables/disables the ripple to be centered.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleCentered] = \"true\"></button>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleCentered') set centered(value: boolean) {\n        this._centered = value || this.centered;\n    }\n    /**\n     * Sets/gets whether the ripple is disabled.\n     * Default value is `false`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDisabled] = \"true\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let isRippleDisabled = this.ripple.rippleDisabled;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDisabled')\n    public rippleDisabled = false;\n\n    protected get nativeElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    private rippleElementClass = 'igx-ripple__inner';\n    private rippleHostClass = 'igx-ripple';\n    private _centered = false;\n    private animationQueue = [];\n\n    constructor(\n        protected builder: AnimationBuilder,\n        protected elementRef: ElementRef,\n        protected renderer: Renderer2,\n        private zone: NgZone) { }\n    /**\n     *@hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event) {\n        this.zone.runOutsideAngular(() => this._ripple(event));\n    }\n\n    private setStyles(rippleElement: HTMLElement, styleParams: any) {\n        this.renderer.addClass(rippleElement, this.rippleElementClass);\n        this.renderer.setStyle(rippleElement, 'width', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'height', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'top', `${styleParams.top}px`);\n        this.renderer.setStyle(rippleElement, 'left', `${styleParams.left}px`);\n        if (this.rippleColor) {\n            this.renderer.setStyle(rippleElement, 'background', this.rippleColor);\n        }\n    }\n\n    private _ripple(event) {\n        if (this.rippleDisabled) {\n            return;\n        }\n\n        const target = (this.rippleTarget ? this.nativeElement.querySelector(this.rippleTarget) || this.nativeElement : this.nativeElement);\n\n        const rectBounds = target.getBoundingClientRect();\n        const radius = Math.max(rectBounds.width, rectBounds.height);\n        let left = event.clientX - rectBounds.left - radius / 2;\n        let top = event.clientY - rectBounds.top - radius / 2;\n\n        if (this._centered) {\n            left = top = 0;\n        }\n\n        const dimensions = {\n            radius,\n            top,\n            left\n        };\n\n        const rippleElement = this.renderer.createElement('span');\n\n        this.setStyles(rippleElement, dimensions);\n        this.renderer.addClass(target, this.rippleHostClass);\n        this.renderer.appendChild(target, rippleElement);\n\n        const animation = this.builder.build([\n            style({ opacity: 0.5, transform: 'scale(.3)' }),\n            animate(this.rippleDuration, style({ opacity: 0, transform: 'scale(2)' }))\n        ]).create(rippleElement);\n\n        this.animationQueue.push(animation);\n\n        animation.onDone(() => {\n            this.animationQueue.splice(this.animationQueue.indexOf(animation), 1);\n            target.removeChild(rippleElement);\n            if (this.animationQueue.length < 1) {\n                this.renderer.removeClass(target, this.rippleHostClass);\n            }\n        });\n\n        animation.play();\n\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRippleDirective],\n    exports: [IgxRippleDirective]\n})\nexport class IgxRippleModule { }\n","import {\n    Directive,\n    NgModule,\n    Input,\n    QueryList,\n    Output,\n    EventEmitter,\n    AfterContentInit,\n    ContentChildren,\n    OnDestroy,\n    HostBinding\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRadioComponent, RadioLabelPosition, IChangeRadioEventArgs } from '../../radio/radio.component';\nimport { IgxRippleModule } from '../ripple/ripple.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nconst noop = () => { };\nlet nextId = 0;\n\n/**\n * **Ignite UI for Angular Radio Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Group allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio-group name=\"radioGroup\">\n *   <igx-radio *ngFor=\"let item of ['Foo', 'Bar', 'Baz']\" value=\"{{item}}\">\n *      {{item}}\n *   </igx-radio>\n * </igx-radio-group>\n * ```\n */\n@Directive({\n    selector: 'igx-radio-group, [igxRadioGroup]',\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioGroupDirective, multi: true }]\n})\nexport class IgxRadioGroupDirective implements AfterContentInit, ControlValueAccessor, OnDestroy {\n    /**\n     * Returns reference to the child radio buttons.\n     * ```typescript\n     * let radioButtons =  this.radioGroup.radioButtons;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @ContentChildren(IgxRadioComponent) public radioButtons: QueryList<IgxRadioComponent>;\n\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio-group [value] = \"'radioButtonValue'\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let value =  this.radioGroup.value;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            this._value = newValue;\n            this._selectRadioButton();\n        }\n    }\n\n    /**\n     * Sets/gets the `name` attribute of the radio group component. All child radio buttons inherits this name.\n     * ```html\n     * <igx-radio-group name = \"Radio1\"></igx-radio-group>\n     *  ```\n     * ```typescript\n     * let name =  this.radioGroup.name;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get name(): string { return this._name; }\n    set name(newValue: string) {\n        if (this._name !== newValue) {\n            this._name = newValue;\n            this._setRadioButtonNames();\n        }\n    }\n\n    /**\n     * Sets/gets whether the radio group is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio-group [required] = \"true\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radioGroup.required;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(newValue: boolean) {\n        if (this._required !== newValue) {\n            this._required = newValue;\n            this._setRadioButtonsRequired();\n        }\n    }\n\n    /**\n     * An @Input property that allows you to disable the radio group. By default it's false.\n     * ```html\n     * <igx-radio-group [disabled]=\"true\"></igx-radio-group>\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(newValue: boolean) {\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._disableRadioButtons();\n        }\n    }\n\n    /**\n     * Sets/gets the position of the `label` in the child radio buttons.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio-group labelPosition = \"before\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radioGroup.labelPosition;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get labelPosition(): RadioLabelPosition | string { return this._labelPosition; }\n    set labelPosition(newValue: RadioLabelPosition | string) {\n        if (this._labelPosition !== newValue) {\n            this._labelPosition = newValue === RadioLabelPosition.BEFORE ? RadioLabelPosition.BEFORE : RadioLabelPosition.AFTER;\n            this._setRadioButtonLabelPosition();\n        }\n    }\n\n    /**\n     * Sets/gets the selected child radio button.\n     * ```typescript\n     * let selectedButton = this.radioGroup.selected;\n     * this.radioGroup.selected = selectedButton;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: IgxRadioComponent | null) {\n        if (this._selected !== selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n        }\n    }\n\n    /**\n     * An event that is emitted after the radio group `value` is changed.\n     * Provides references to the selected `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioGroupDirective\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-radio-group')\n    public cssClass = 'igx-radio-group';\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    private _name = `igx-radio-group-${nextId++}`;\n    /**\n     *@hidden\n     */\n    private _value: any = null;\n    /**\n     *@hidden\n     */\n    private _selected: IgxRadioComponent | null = null;\n    /**\n     *@hidden\n     */\n    private _isInitialized = false;\n    /**\n     *@hidden\n     */\n    private _labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     *@hidden\n     */\n    private _disabled = false;\n    /**\n     *@hidden\n     */\n    private _required = false;\n    /**\n     *@hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    ngAfterContentInit() {\n        // The initial value can possibly be set by NgModel and it is possible that\n        // the OnInit of the NgModel occurs after the OnInit of this class.\n        this._isInitialized = true;\n\n        setTimeout(() => { this._initRadioButtons(); });\n    }\n\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true` and selected property will contain the selected `IgxRadioComponent`.\n     * ```typescript\n     * this.radioGroup.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this.value = value;\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.registerOnTouched(fn);\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    private _initRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n                button.labelPosition = this._labelPosition;\n                button.disabled = this._disabled;\n                button.required = this._required;\n\n                if (this._value && button.value === this._value) {\n                    button.checked = true;\n                    this._selected = button;\n                }\n\n                button.change.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._selectedRadioButtonChanged(ev));\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectedRadioButtonChanged(args: IChangeRadioEventArgs) {\n        if (this._selected !== args.radio) {\n            if (this._selected) {\n                this._selected.checked = false;\n            }\n            this._selected = args.radio;\n        }\n\n        this._value = args.value;\n\n        if (this._isInitialized) {\n            this.change.emit(args);\n            this._onChangeCallback(this.value);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonNames() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectRadioButton() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                if (!this._value) {\n                    // no value - uncheck all radio buttons\n                    if (button.checked) {\n                        button.checked = false;\n                    }\n                } else {\n                    if (this._value === button.value) {\n                        // selected button\n                        if (this._selected !== button) {\n                            this._selected = button;\n                        }\n\n                        if (!button.checked) {\n                            button.select();\n                        }\n                    } else {\n                        // non-selected button\n                        if (button.checked) {\n                            button.checked = false;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonLabelPosition() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.labelPosition = this._labelPosition;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _disableRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.disabled = this._disabled;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonsRequired() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.required = this._required;\n            });\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRadioGroupDirective, IgxRadioComponent],\n    exports: [IgxRadioGroupDirective, IgxRadioComponent],\n    imports: [IgxRippleModule]\n})\nexport class IgxRadioModule { }\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    OnDestroy,\n    Renderer2,\n    SimpleChanges,\n    AfterViewChecked\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\ninterface ISearchInfo {\n    searchedText: string;\n    content: string;\n    matchCount: number;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n}\n\n/**\n * An interface describing information for the active highlight.\n */\nexport interface IActiveHighlightInfo {\n    /**\n     * The row index of the highlight. This property is deprecated, use `row` instead.\n     */\n    rowIndex?: number;\n    /**\n     * The column index of the highlight. This property is deprecated, use `column` instead.\n     */\n    columnIndex?: number;\n    /**\n     * The page index of the highlight. This property is deprecated.\n     */\n    page?: number;\n    /**\n     * The row of the highlight.\n     */\n    row?: any;\n    /**\n     * The column of the highlight.\n     */\n    column?: any;\n    /**\n     * The index of the highlight.\n     */\n    index: number;\n}\n\n@Directive({\n    selector: '[igxTextHighlight]'\n})\nexport class IgxTextHighlightDirective implements AfterViewInit, AfterViewChecked, OnDestroy, OnChanges {\n    private static onActiveElementChanged = new EventEmitter<string>();\n    public static highlightGroupsMap = new Map<string, IActiveHighlightInfo>();\n\n    private _lastSearchInfo: ISearchInfo;\n    private _div = null;\n    private _observer: MutationObserver = null;\n    private _nodeWasRemoved = false;\n    private _forceEvaluation = false;\n    private _activeElementIndex = -1;\n    private _valueChanged: boolean;\n\n    /**\n     * Determines the `CSS` class of the highlight elements.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [cssClass]=\"myClass\">\n     * </div>\n     * ```\n     */\n    @Input('cssClass')\n    public cssClass: string;\n\n    /**\n     * Determines the `CSS` class of the active highlight element.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [activeCssClass]=\"activeHighlightClass\">\n     * </div>\n     * ```\n     */\n    @Input('activeCssClass')\n    public activeCssClass: string;\n\n    /**\n     * @hidden\n     */\n    @Input('containerClass')\n    public containerClass: string;\n\n    /**\n     * Identifies the highlight within a unique group.\n     * This allows it to have several different highlight groups,\n     * with each of them having their own active highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [groupName]=\"myGroupName\">\n     * </div>\n     * ```\n     */\n    @Input('groupName')\n    public groupName = '';\n\n    private _value = '';\n\n    /**\n     * The underlying value of the element that will be highlighted.\n     *\n     * ```typescript\n     * // get\n     * const elementValue = this.textHighlight.value;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <div\n     *   igxTextHighlight\n     *   [value]=\"newValue\">\n     * </div>\n     * ```\n     */\n    @Input('value')\n    public get value(): any {\n        return this._value;\n    }\n    public set value(value: any) {\n        if (value === undefined || value === null) {\n            this._value = '';\n        } else {\n            this._value = value;\n        }\n    }\n\n    /**\n     * The identifier of the row on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [row]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('row')\n    public row: any;\n\n    /**\n     * The identifier of the column on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [column]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('column')\n    public column: any;\n\n    @Input('page')\n    @DeprecateProperty(`IgxTextHighlightDirective 'page' input property is deprecated.`)\n    public page: number;\n\n    /**\n     * @hidden\n     */\n    public get lastSearchInfo(): ISearchInfo {\n        return this._lastSearchInfo;\n    }\n\n    /**\n     * @hidden\n     */\n    public parentElement: any;\n\n    private _container: any;\n\n    private destroy$ = new Subject<boolean>();\n\n    /**\n     * Activates the highlight at a given index.\n     * (if such index exists)\n     */\n    public static setActiveHighlight(groupName: string, highlight: IActiveHighlightInfo) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, highlight);\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public static clearActiveHighlight(groupName) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, {\n            index: -1\n        });\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    constructor(private element: ElementRef, public renderer: Renderer2) {\n        IgxTextHighlightDirective.onActiveElementChanged.pipe(takeUntil(this.destroy$)).subscribe((groupName) => {\n            if (this.groupName === groupName) {\n                if (this._activeElementIndex !== -1) {\n                    this.deactivate();\n                }\n                this.activateIfNecessary();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this.clearHighlight();\n\n        if (this._observer !== null) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.value && !changes.value.firstChange) {\n            this._valueChanged = true;\n        } else if ((changes.row !== undefined && !changes.row.firstChange) ||\n            (changes.column !== undefined && !changes.column.firstChange) ||\n            (changes.page !== undefined && !changes.page.firstChange)) {\n            if (this._activeElementIndex !== -1) {\n                this.deactivate();\n            }\n            this.activateIfNecessary();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.parentElement = this.renderer.parentNode(this.element.nativeElement);\n\n        if (IgxTextHighlightDirective.highlightGroupsMap.has(this.groupName) === false) {\n            IgxTextHighlightDirective.highlightGroupsMap.set(this.groupName, {\n                index: -1\n            });\n        }\n\n        this._lastSearchInfo = {\n            searchedText: '',\n            content: this.value,\n            matchCount: 0,\n            caseSensitive: false,\n            exactMatch: false\n        };\n\n        this._container = this.parentElement.firstElementChild;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewChecked() {\n        if (this._valueChanged) {\n            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);\n            this.activateIfNecessary();\n            this._valueChanged = false;\n        }\n    }\n\n    /**\n     * Clears the existing highlight and highlights the searched text.\n     * Returns how many times the element contains the searched text.\n     */\n    public highlight(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n\n        if (this.searchNeedsEvaluation(text, caseSensitiveResolved, exactMatchResolved)) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n            this._lastSearchInfo.content = this.value;\n\n            if (text === '' || text === undefined || text === null) {\n                this.clearHighlight();\n            } else {\n                this.clearChildElements(true);\n                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive, exactMatch);\n            }\n        } else if (this._nodeWasRemoved) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n        }\n\n        return this._lastSearchInfo.matchCount;\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public clearHighlight(): void {\n        this.clearChildElements(false);\n\n        this._lastSearchInfo.searchedText = '';\n        this._lastSearchInfo.matchCount = 0;\n    }\n\n    /**\n     * Activates the highlight if it is on the currently active row, column and page.\n     */\n    public activateIfNecessary(): void {\n        const group = IgxTextHighlightDirective.highlightGroupsMap.get(this.groupName);\n        const column = group.columnIndex === undefined ? group.column : group.columnIndex;\n        const row = group.rowIndex === undefined ? group.row : group.rowIndex;\n\n        if (column === this.column && row === this.row && group.page === this.page) {\n            this.activate(group.index);\n        }\n    }\n\n    /**\n     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.\n     * Should be used only when necessary as using many observers may lead to performance degradation.\n     */\n    public observe(): void {\n        if (this._observer === null) {\n            const callback = (mutationList) => {\n                mutationList.forEach((mutation) => {\n                    const removedNodes = Array.from(mutation.removedNodes);\n                    removedNodes.forEach((n) => {\n                        if (n === this._container) {\n                            this._nodeWasRemoved = true;\n                            this.clearChildElements(false);\n                        }\n                    });\n\n                    const addedNodes = Array.from(mutation.addedNodes);\n                    addedNodes.forEach((n) => {\n                        if (n === this.parentElement.firstElementChild && this._nodeWasRemoved) {\n                            this._container = this.parentElement.firstElementChild;\n                            this._nodeWasRemoved = false;\n\n                            this._forceEvaluation = true;\n                            this.highlight(this._lastSearchInfo.searchedText,\n                                this._lastSearchInfo.caseSensitive,\n                                this._lastSearchInfo.exactMatch);\n                            this._forceEvaluation = false;\n\n                            this.activateIfNecessary();\n                            this._observer.disconnect();\n                            this._observer = null;\n                        }\n                    });\n                });\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.parentElement, {childList: true});\n        }\n    }\n\n    private activate(index: number) {\n        this.deactivate();\n\n        if (this._div !== null) {\n            const spans = this._div.querySelectorAll('span');\n            this._activeElementIndex = index;\n\n            if (spans.length <= index) {\n                return;\n            }\n\n            const elementToActivate = spans[index];\n            this.renderer.addClass(elementToActivate, this.activeCssClass);\n            this.renderer.setAttribute(elementToActivate, 'style', 'background:orange;color:black');\n        }\n    }\n\n    private deactivate() {\n        if (this._activeElementIndex === -1) {\n            return;\n        }\n\n        const spans = this._div.querySelectorAll('span');\n\n        if (spans.length <= this._activeElementIndex) {\n            this._activeElementIndex = -1;\n            return;\n        }\n\n        const elementToDeactivate = spans[this._activeElementIndex];\n        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);\n        this.renderer.setAttribute(elementToDeactivate, 'style', 'background:yellow;color:black');\n        this._activeElementIndex = -1;\n    }\n\n    private clearChildElements(originalContentHidden: boolean): void {\n        this.renderer.setProperty(this.element.nativeElement, 'hidden', originalContentHidden);\n\n        if (this._div !== null) {\n            this.renderer.removeChild(this.parentElement, this._div);\n\n            this._div = null;\n            this._activeElementIndex = -1;\n        }\n    }\n\n    private getHighlightedText(searchText: string, caseSensitive: boolean, exactMatch: boolean) {\n        this.appendDiv();\n\n        const stringValue = String(this.value);\n        const contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;\n        const searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;\n\n        let matchCount = 0;\n\n        if (exactMatch) {\n            if (contentStringResolved === searchTextResolved) {\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this.cssClass}\" style=\"background:yellow;color:black\">${stringValue}</span>`);\n                matchCount++;\n            } else {\n                this.appendText(stringValue);\n            }\n        } else {\n            let foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);\n            let previousMatchEnd = 0;\n\n            while (foundIndex !== -1) {\n                const start = foundIndex;\n                const end = foundIndex + searchTextResolved.length;\n\n                this.appendText(stringValue.substring(previousMatchEnd, start));\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this.cssClass}\" style=\"background:yellow;color:black\">${stringValue.substring(start, end)}</span>`);\n\n                previousMatchEnd = end;\n                matchCount++;\n\n                foundIndex = contentStringResolved.indexOf(searchTextResolved, end);\n            }\n\n            this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));\n        }\n\n        return matchCount;\n    }\n\n    private appendText(text: string) {\n        const textElement = this.renderer.createText(text);\n        this.renderer.appendChild(this._div, textElement);\n    }\n\n    private appendSpan(outerHTML: string) {\n        const span = this.renderer.createElement('span');\n        this.renderer.appendChild(this._div, span);\n        this.renderer.setProperty(span, 'outerHTML', outerHTML);\n    }\n\n    private appendDiv() {\n        this._div = this.renderer.createElement('div');\n        if ( this.containerClass) {\n            this.renderer.addClass(this._div, this.containerClass);\n        }\n        this.renderer.appendChild(this.parentElement, this._div);\n    }\n\n    private searchNeedsEvaluation(text: string, caseSensitive: boolean, exactMatch: boolean): boolean {\n        const searchedText = this._lastSearchInfo.searchedText;\n\n        return !this._nodeWasRemoved &&\n            (searchedText === null ||\n                searchedText !== text ||\n                this._lastSearchInfo.content !== this.value ||\n                this._lastSearchInfo.caseSensitive !== caseSensitive ||\n                this._lastSearchInfo.exactMatch !== exactMatch ||\n                this._forceEvaluation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextHighlightDirective],\n    exports: [IgxTextHighlightDirective]\n})\nexport class IgxTextHighlightModule { }\n","import { Directive, ElementRef, HostListener, Input, NgModule } from '@angular/core';\n\n@Directive({\n    exportAs: 'igxTextSelection',\n    selector: '[igxTextSelection]'\n})\nexport class IgxTextSelectionDirective {\n\n    private selectionState = true;\n\n    /**\n     * Returns whether the input element is selectable through the directive.\n     *\n     * ```typescript\n     * // get\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public firstName: IgxTextSelectionDirective;\n     *\n     * public getFirstNameSelectionStatus() {\n     *  return this.firstName.selected;\n     * }\n     * ```\n     */\n    @Input('igxTextSelection')\n    get selected(): boolean {\n        return this.selectionState;\n    }\n\n    /**\n     *  Determines whether the input element could be selected through the directive.\n     *\n     *```html\n     * <!--set-->\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   [igxTextSelection]=\"true\">\n     * </input>\n     *\n     * <input\n     *   type=\"text\"\n     *   id=\"lastName\"\n     *   igxTextSelection\n     *   [selected]=\"true\">\n     * </input>\n     * ```\n     */\n    set selected(val: boolean) {\n        this.selectionState = val;\n    }\n\n    /**\n     * Returns the nativeElement of the element where the directive was applied.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n    *    id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public getNativeElement() {\n     *  return this.inputElement.nativeElement;\n     * }\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    onFocus() {\n        this.trigger();\n    }\n\n    constructor(private element: ElementRef) { }\n\n    /**\n     * Triggers the selection of the element if it is marked as selectable.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public triggerElementSelection() {\n     *  this.inputElement.trigger();\n     * }\n     * ```\n     */\n    trigger() {\n        if (this.selected && this.nativeElement.value.length) {\n            requestAnimationFrame(() => this.nativeElement.setSelectionRange(0, this.nativeElement.value.length));\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextSelectionDirective],\n    exports: [IgxTextSelectionDirective]\n})\nexport class IgxTextSelectionModule { }\n","import {\n    Directive, ElementRef, HostListener, Input, NgModule, ChangeDetectorRef, OnInit,\n    Output, EventEmitter, Optional, HostBinding, OnDestroy, Inject\n} from '@angular/core';\nimport { useAnimation } from '@angular/animations';\nimport { scaleInCenter } from '../../animations/scale/index';\nimport { fadeOut } from '../../animations/fade/index';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { HorizontalAlignment, AutoPositionStrategy, PositionSettings, OverlaySettings } from '../../services';\nimport { CommonModule } from '@angular/common';\nimport { IgxNavigationService } from '../../core/navigation';\nimport { IgxToggleDirective, IgxToggleActionDirective } from '../toggle/toggle.directive';\nimport { Subscription } from 'rxjs';\n\nexport interface ITooltipShowEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\nexport interface ITooltipHideEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\n\n/**\n * **Ignite UI for Angular Tooltip Target** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip Target directive is used to mark an HTML element in the markup as one that has a tooltip.\n * The tooltip target is used in combination with the Ignite UI for Angular Tooltip by assigning the exported tooltip reference to the\n * target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltipTarget',\n    selector: '[igxTooltipTarget]'\n})\nexport class IgxTooltipTargetDirective extends IgxToggleActionDirective implements OnInit {\n    /**\n     * Gets/sets the amount of milliseconds that should pass before showing the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipShowDelay = this.tooltipTarget.showDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" showDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('showDelay')\n    public showDelay = 500;\n\n    /**\n     * Gets/sets the amount of milliseconds that should pass before hiding the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipHideDelay = this.tooltipTarget.hideDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" hideDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('hideDelay')\n    public hideDelay = 500;\n\n    /**\n     * Specifies if the tooltip should not show when hovering its target with the mouse. (defaults to false)\n     * While setting this property to 'true' will disable the user interactions that shows/hides the tooltip,\n     * the developer will still be able to show/hide the tooltip through the API.\n     *\n     * ```typescript\n     * // get\n     * let tooltipDisabledValue = this.tooltipTarget.tooltipDisabled;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" [tooltipDisabled]=\"true\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('tooltipDisabled')\n    public tooltipDisabled = false;\n\n    /**\n     * @hidden\n     */\n    @Input('igxTooltipTarget')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this._navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    /**\n     * Gets the respective native element of the directive.\n     *\n     * ```typescript\n     * let tooltipTargetElement = this.tooltipTarget.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * Indicates if the tooltip that is is associated with this target is currently hidden.\n     *\n     * ```typescript\n     * let tooltipHiddenValue = this.tooltipTarget.tooltipHidden;\n     * ```\n     */\n    public get tooltipHidden(): boolean {\n        return !this.target || this.target.collapsed;\n    }\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts showing.\n     * This event is fired before the start of the countdown to showing the tooltip.\n     *\n     * ```typescript\n     * tooltipShowing(args: ITooltipShowEventArgs) {\n     *    alert(\"Tooltip started showing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipShow)='tooltipShowing($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipShow = new EventEmitter<ITooltipShowEventArgs>();\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts hiding.\n     * This event is fired before the start of the countdown to hiding the tooltip.\n     *\n     * ```typescript\n     * tooltipHiding(args: ITooltipHideEventArgs) {\n     *    alert(\"Tooltip started hiding!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipHide)='tooltipHiding($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipHide = new EventEmitter<ITooltipHideEventArgs>();\n\n    constructor(private _element: ElementRef,\n        @Optional() private _navigationService: IgxNavigationService) {\n        super(_element, _navigationService);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        const positionSettings: PositionSettings = {\n            target: this.nativeElement,\n            horizontalDirection: HorizontalAlignment.Center,\n            horizontalStartPoint: HorizontalAlignment.Center,\n            openAnimation: useAnimation(scaleInCenter, { params: { duration: '150ms' } }),\n            closeAnimation: useAnimation(fadeOut, { params: { duration: '75ms' } })\n        };\n\n        this._overlayDefaults.positionStrategy = new AutoPositionStrategy(positionSettings);\n        this._overlayDefaults.closeOnOutsideClick = false;\n    }\n\n    private checkOutletAndOutsideClick() {\n        if (this.closeOnOutsideClick !== undefined) {\n            this._overlayDefaults.closeOnOutsideClick = this.closeOnOutsideClick;\n        }\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n    }\n\n    private get mergedOverlaySettings() {\n        return Object.assign({}, this._overlayDefaults, this.overlaySettings);\n    }\n\n    // Return true if the execution in onMouseEnter should be terminated after this method\n    private preMouseEnterCheck() {\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n            this.target.toBeShown = false;\n        }\n\n        // If Tooltip is opened or about to be hidden\n        if (!this.target.collapsed || this.target.toBeHidden) {\n            clearTimeout(this.target.timeoutId);\n\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return true;\n            }\n\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        return false;\n    }\n\n    // Return true if the execution in onMouseLeave should be terminated after this method\n    private preMouseLeaveCheck(): boolean {\n        clearTimeout(this.target.timeoutId);\n\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            this.target.toBeShown = false;\n            this.target.toBeHidden = false;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:keydown.escape', ['$event'])\n    public onKeydownEscape() {\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.close();\n        this.target.toBeHidden = false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n\n            this.target.forceClose(this.mergedOverlaySettings);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseenter')\n    public onMouseEnter() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseEnterCheck();\n        if (shouldReturn) {\n            return;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseleave')\n    public onMouseLeave() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseLeaveCheck();\n        if (shouldReturn || this.target.collapsed) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('touchstart', ['$event'])\n    public onTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        event.preventDefault();\n        this.showTooltip();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:touchstart', ['$event'])\n    public onDocumentTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        if (this.nativeElement !== event.target &&\n            !this.nativeElement.contains(event.target)\n        ) {\n            this.hideTooltip();\n        }\n    }\n\n    /**\n     * Shows the tooltip by respecting the 'showDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.showTooltip();\n     * ```\n     */\n    public showTooltip() {\n        clearTimeout(this.target.timeoutId);\n\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * Hides the tooltip by respecting the 'hideDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.hideTooltip();\n     * ```\n     */\n    public hideTooltip() {\n        if (this.target.collapsed && this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n        }\n\n        if (this.target.collapsed || this.target.toBeHidden) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n}\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Tooltip** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.\n * The tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the\n * respective target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltip',\n    selector: '[igxTooltip]'\n})\nexport class IgxTooltipDirective extends IgxToggleDirective {\n\n    /**\n     * @hidden\n     */\n    public timeoutId;\n\n    /**\n     * @hidden\n     * Returns whether close time out has started\n     */\n    public toBeHidden = false;\n\n    /**\n     * @hidden\n     * Returns whether open time out has started\n     */\n    public toBeShown = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--desktop')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * Gets/sets any tooltip related data.\n     * The 'context' can be used for storing any information that is necessary\n     * to access when working with the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipContext = this.tooltip.context;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.tooltip.context = \"Tooltip's context\";\n     * ```\n     */\n    @Input('context')\n    public context;\n\n    /**\n     * Identifier for the tooltip.\n     * If this is property is not explicitly set, it will be automatically generated.\n     *\n     * ```typescript\n     * let tooltipId = this.tooltip.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-tooltip-${NEXT_ID++}`;\n\n    /**\n     * Get the role attribute of the tooltip.\n     *\n     * ```typescript\n     * let tooltipRole = this.tooltip.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'tooltip';\n    }\n\n    /** @hidden */\n    constructor(\n        elementRef: ElementRef,\n        cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) overlayService: IgxOverlayService,\n        @Optional() navigationService: IgxNavigationService) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(elementRef, cdr, overlayService, navigationService);\n    }\n\n    /**\n     * If there is open animation in progress this method will finish is.\n     * If there is no open animation in progress this method will open the toggle with no animation.\n     * @param overlaySettings setting to use for opening the toggle\n     */\n    protected forceOpen(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        if (hasOpenAnimation) {\n            info.openAnimationPlayer.finish();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n        } else if (this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.openAnimation;\n            overlaySettings.positionStrategy.settings.openAnimation = null;\n            this.open(overlaySettings);\n            overlaySettings.positionStrategy.settings.openAnimation = animation;\n        }\n    }\n\n    /**\n     * If there is close animation in progress this method will finish is.\n     * If there is no close animation in progress this method will close the toggle with no animation.\n     * @param overlaySettings settings to use for closing the toggle\n     */\n    protected forceClose(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n\n        if (hasCloseAnimation) {\n            info.closeAnimationPlayer.finish();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n        } else if (!this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.closeAnimation;\n            overlaySettings.positionStrategy.settings.closeAnimation = null;\n            this.close();\n            overlaySettings.positionStrategy.settings.closeAnimation = animation;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    exports: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    imports: [CommonModule],\n    providers: [IgxOverlayService]\n})\nexport class IgxTooltipModule { }\n\n","/**\n * Provides base filtering operations\n * Implementations should be Singleton\n *\n * @export\n */\nexport class IgxFilteringOperand {\n    public operations: IFilteringOperation[];\n\n    public constructor() {\n        this.operations = [{\n            name: 'null',\n            isUnary: true,\n            iconName: 'is_null',\n            logic: (target: any) => {\n                return target === null;\n            }\n        }, {\n            name: 'notNull',\n            isUnary: true,\n            iconName: 'is_not_null',\n            logic: (target: any) => {\n                return target !== null;\n            }\n        }];\n    }\n\n    public conditionList(): string[] {\n        return this.operations.map((element) => element.name);\n    }\n\n    public condition(name: string): IFilteringOperation {\n        return this.operations.find((element) => element.name === name);\n    }\n\n    public append(operation: IFilteringOperation) {\n        this.operations.push(operation);\n    }\n}\n\n/**\n * Provides filtering operations for booleans\n *\n * @export\n */\nexport class IgxBooleanFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxBooleanFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'all',\n            isUnary: true,\n            iconName: 'all',\n            logic: (target: boolean) => {\n                return true;\n            }\n        }, {\n            name: 'true',\n            isUnary: true,\n            iconName: 'is_true',\n            logic: (target: boolean) => {\n                return !!(target && target !== null && target !== undefined);\n            }\n        }, {\n            name: 'false',\n            isUnary: true,\n            iconName: 'is_false',\n            logic: (target: boolean) => {\n                return !target && target !== null && target !== undefined;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: boolean) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: boolean) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxBooleanFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n}\n\n/**\n * Provides filtering operations for Dates\n *\n * @export\n */\nexport class IgxDateFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxDateFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year === searchp.year &&\n                    targetp.month === searchp.month &&\n                    targetp.day === searchp.day;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return true;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year !== searchp.year ||\n                    targetp.month !== searchp.month ||\n                    targetp.day !== searchp.day;\n            }\n        }, {\n            name: 'before',\n            isUnary: false,\n            iconName: 'is_before',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target < searchVal;\n            }\n        }, {\n            name: 'after',\n            isUnary: false,\n            iconName: 'is_after',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target > searchVal;\n            }\n        }, {\n            name: 'today',\n            isUnary: true,\n            iconName: 'today',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yMd');\n                return d.year === now.year &&\n                    d.month === now.month &&\n                    d.day === now.day;\n            }\n        }, {\n            name: 'yesterday',\n            isUnary: true,\n            iconName: 'yesterday',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const td = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const y = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date());\n                const yesterday = IgxDateFilteringOperand.getDateParts(y, 'yMd');\n                return td.year === yesterday.year &&\n                    td.month === yesterday.month &&\n                    td.day === yesterday.day;\n            }\n        }, {\n            name: 'thisMonth',\n            isUnary: true,\n            iconName: 'this_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'lastMonth',\n            isUnary: true,\n            iconName: 'last_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (!now.month) {\n                    now.month = 11;\n                    now.year -= 1;\n                } else {\n                    now.month--;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'nextMonth',\n            isUnary: true,\n            iconName: 'next_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (now.month === 11) {\n                    now.month = 0;\n                    now.year += 1;\n                } else {\n                    now.month++;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'thisYear',\n            isUnary: true,\n            iconName: 'this_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year;\n            }\n        }, {\n            name: 'lastYear',\n            isUnary: true,\n            iconName: 'last_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year - 1;\n            }\n        }, {\n            name: 'nextYear',\n            isUnary: true,\n            iconName: 'next_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year + 1;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: Date) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: Date) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxDateFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * Splits a Date object into parts\n     *\n     * @memberof IgxDateFilteringOperand\n     */\n    public static getDateParts(date: Date, dateFormat?: string): IDateParts {\n        const res = {\n            day: null,\n            hours: null,\n            milliseconds: null,\n            minutes: null,\n            month: null,\n            seconds: null,\n            year: null\n        };\n        if (!date || !dateFormat) {\n            return res;\n        }\n        if (dateFormat.indexOf('y') >= 0) {\n            res.year = date.getFullYear();\n        }\n        if (dateFormat.indexOf('M') >= 0) {\n            res.month = date.getMonth();\n        }\n        if (dateFormat.indexOf('d') >= 0) {\n            res.day = date.getDate();\n        }\n        if (dateFormat.indexOf('h') >= 0) {\n            res.hours = date.getHours();\n        }\n        if (dateFormat.indexOf('m') >= 0) {\n            res.minutes = date.getMinutes();\n        }\n        if (dateFormat.indexOf('s') >= 0) {\n            res.seconds = date.getSeconds();\n        }\n        if (dateFormat.indexOf('f') >= 0) {\n            res.milliseconds = date.getMilliseconds();\n        }\n        return res;\n    }\n\n    private validateInputData(target: Date) {\n        if (!(target instanceof Date)) {\n            throw new Error('Could not perform filtering on \\'date\\' column because the datasource object type is not \\'Date\\'.');\n        }\n    }\n}\n\n/**\n * Provides filtering operations for numbers\n *\n * @export\n */\nexport class IgxNumberFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxNumberFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: number, searchVal: number) => {\n                return target === searchVal;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: number, searchVal: number) => {\n                return target !== searchVal;\n            }\n        }, {\n            name: 'greaterThan',\n            isUnary: false,\n            iconName: 'greater_than',\n            logic: (target: number, searchVal: number) => {\n                return target > searchVal;\n            }\n        }, {\n            name: 'lessThan',\n            isUnary: false,\n            iconName: 'less_than',\n            logic: (target: number, searchVal: number) => {\n                return target < searchVal;\n            }\n        }, {\n            name: 'greaterThanOrEqualTo',\n            isUnary: false,\n            iconName: 'greater_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target >= searchVal;\n            }\n        }, {\n            name: 'lessThanOrEqualTo',\n            isUnary: false,\n            iconName: 'less_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target <= searchVal;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: number) => {\n                return target === null || target === undefined || isNaN(target);\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: number) => {\n                return target !== null && target !== undefined && !isNaN(target);\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxNumberFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n}\n\n/**\n * Provides filtering operations for strings\n *\n * @export\n */\nexport class IgxStringFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxStringFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'contains',\n            isUnary: false,\n            iconName: 'contains',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) !== -1;\n            }\n        }, {\n            name: 'doesNotContain',\n            isUnary: false,\n            iconName: 'does_not_contain',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) === -1;\n            }\n        }, {\n            name: 'startsWith',\n            isUnary: false,\n            iconName: 'starts_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.startsWith(search);\n            }\n        }, {\n            name: 'endsWith',\n            isUnary: false,\n            iconName: 'ends_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.endsWith(search);\n            }\n        }, {\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target === search;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target !== search;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: string) => {\n                return target === null || target === undefined || target.length === 0;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: string) => {\n                return target !== null && target !== undefined && target.length > 0;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxStringFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * Applies case sensitivity on strings if provided\n     *\n     * @memberof IgxStringFilteringOperand\n     */\n    public static applyIgnoreCase(a: string, ignoreCase: boolean): string {\n        a = a || '';\n        // bulletproof\n        return ignoreCase ? ('' + a).toLowerCase() : a;\n    }\n}\n\n/**\n * Interface describing filtering operations\n *\n * @export\n */\nexport interface IFilteringOperation {\n    name: string;\n    isUnary: boolean;\n    iconName: string;\n    logic: (value: any, searchVal?: any, ignoreCase?: boolean) => boolean;\n}\n\n/**\n * Interface describing Date object in parts\n *\n * @export\n */\nexport interface IDateParts {\n    year: number;\n    month: number;\n    day: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n    milliseconds: number;\n}\n\n/**\n * @hidden\n */\nexport class InFilteringOperation implements IFilteringOperation {\n    name = 'in';\n    isUnary = false;\n    iconName = 'is_in';\n    logic = (target: any, searchVal: Set<any>) => {\n        return searchVal.has(target);\n    }\n}\n\n/**\n * @hidden\n */\nexport class InDateFilteringOperation extends InFilteringOperation {\n    logic = (target: any, searchVal: Set<any>) => {\n        if (target instanceof Date) {\n            return searchVal.has(new Date(target.getFullYear(), target.getMonth(), target.getDate()).toISOString());\n        }\n        return searchVal.has(target);\n    }\n}\n","import { IFilteringExpressionsTree } from './filtering-expressions-tree';\nimport { FilteringStrategy, IFilteringStrategy } from './filtering-strategy';\n\nexport const filteringStateDefaults = {\n    strategy: new FilteringStrategy()\n};\n\nexport declare interface IFilteringState {\n    expressionsTree: IFilteringExpressionsTree;\n    strategy?: IFilteringStrategy;\n}\n","import { ISortingExpression } from './sorting-expression.interface';\n\n/**\n * @hidden\n */\nexport class GroupedRecords extends Array<any> {}\n\nexport interface IGroupByRecord {\n    expression: ISortingExpression;\n    level: number;\n    records: GroupedRecords;\n    value: any;\n    groupParent: IGroupByRecord;\n    groups?: IGroupByRecord[];\n    height: number;\n }\n","import { Injectable, SecurityContext, Inject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { HttpClient } from '@angular/common/http';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * **Ignite UI for Angular Icon Service** -\n *\n * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.\n * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given fontSet.\n *\n * Example:\n * ```typescript\n * this.iconService.registerFontSetAlias('material', 'material-icons');\n * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n * ```\n */\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class IgxIconService {\n    private _fontSet = 'material-icons';\n    private _fontSetAliases = new Map<string, string>();\n    private _svgContainer: HTMLElement;\n    private _cachedSvgIcons: Set<string> = new Set<string>();\n\n    constructor (private _sanitizer: DomSanitizer, private _httpClient: HttpClient, @Inject(DOCUMENT) private _document: any) { }\n\n    /**\n     *  Returns the default font set.\n     *```typescript\n     *   const defaultFontSet = this.iconService.defaultFontSet;\n     * ```\n     */\n    get defaultFontSet(): string {\n        return this._fontSet;\n    }\n\n    /**\n     *  Sets the default font set.\n     *```typescript\n     *   this.iconService.defaultFontSet = 'svg-flags';\n     * ```\n     */\n    set defaultFontSet(className: string) {\n        this._fontSet = className;\n    }\n\n    /**\n     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.\n     *```typescript\n     *   this.iconService.registerFontSetAlias('material', 'material-icons');\n     * ```\n     */\n    public registerFontSetAlias(alias: string, className: string = alias): this {\n        this._fontSetAliases.set(alias, className);\n        return this;\n    }\n\n    /**\n     *  Returns the custom class, if any, associated to a given fontSet.\n     *```typescript\n     *   const fontSetClass = this.iconService.fontSetClassName('material');\n     * ```\n     */\n    public fontSetClassName(alias: string): string {\n        return this._fontSetAliases.get(alias) || alias;\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is an url.\n     *```typescript\n     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n     * ```\n     */\n    public addSvgIcon(iconName: string, url: string, fontSet: string = '') {\n        if (iconName && url) {\n            const safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);\n            if (!safeUrl) {\n                throw new Error(`The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: \"${url}\".`);\n            }\n\n            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n            if (!sanitizedUrl) {\n                throw new Error(`The URL provided was not trusted as a resource URL: \"${url}\".`);\n            }\n\n            this.fetchSvg(iconName, url, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `url` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is its text.\n     *```typescript\n     *   this.iconService.addSvgIcon('simple', '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\">\n     *   <path d=\"M74 74h54v54H74\" /></svg>', 'svg-flags');\n     * ```\n     */\n    public addSvgIconFromText(iconName: string, iconText: string, fontSet: string = '') {\n        if (iconName && iconText) {\n            this.cacheSvgIcon(iconName, iconText, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `iconText` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Returns wheather a given SVG image is present in the cache.\n     *```typescript\n     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');\n     * ```\n     */\n    public isSvgIconCached(iconName: string, fontSet: string = ''): boolean {\n        const iconKey = this.getSvgIconKey(iconName, fontSet);\n        return this._cachedSvgIcons.has(iconKey);\n    }\n\n    /**\n     *  Returns the key of a cached SVG image.\n     *```typescript\n     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');\n     * ```\n     */\n    public getSvgIconKey(iconName: string, fontSet: string = '') {\n        return fontSet + '_' + iconName;\n    }\n\n    /**\n     * @hidden\n     */\n    private fetchSvg(iconName: string, url: string, fontSet: string = '') {\n        const request = this._httpClient.get(url, { responseType: 'text' });\n        const subscription = request.subscribe((value: string) => {\n            this.cacheSvgIcon(iconName, value, fontSet);\n        }, (error) => {\n            throw new Error(`Could not fetch SVG from url: ${url}; error: ${error.message}`);\n        }, () => {\n            subscription.unsubscribe();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    private cacheSvgIcon(iconName: string, value: string, fontSet: string = '') {\n        if (iconName && value) {\n            this.ensureSvgContainerCreated();\n\n            const div = this._document.createElement('DIV');\n            div.innerHTML = value;\n            const svg = div.querySelector('svg') as SVGElement;\n\n            if (svg) {\n                const iconKey = this.getSvgIconKey(iconName, fontSet);\n\n                svg.setAttribute('id', iconKey);\n                svg.setAttribute('fit', '');\n                svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n                svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n                if (this._cachedSvgIcons.has(iconKey)) {\n                    const oldChild = this._svgContainer.querySelector(`svg[id='${iconKey}']`);\n                    this._svgContainer.removeChild(oldChild);\n                }\n\n                this._svgContainer.appendChild(svg);\n                this._cachedSvgIcons.add(iconKey);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private ensureSvgContainerCreated() {\n        if (!this._svgContainer) {\n            this._svgContainer = this._document.documentElement.querySelector('.igx-svg-container');\n            if (!this._svgContainer) {\n                this._svgContainer = this._document.createElement('DIV');\n                this._svgContainer.classList.add('igx-svg-container');\n                this._document.documentElement.appendChild(this._svgContainer);\n            }\n        }\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { IgxIconService } from './icon.service';\n\n/**\n * **Ignite UI for Angular Icon** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/icon.html)\n *\n * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons\n * support custom colors and can be marked as active or disabled using the `isActive` property. This will change the appearence\n * of the icon.\n *\n * Example:\n * ```html\n * <igx-icon color=\"#00ff00\" isActive=\"true\">home</igx-icon>\n * ```\n */\nlet NEXT_ID = 0;\n\n@Component({\n    selector: 'igx-icon',\n    templateUrl: 'icon.component.html'\n})\n\nexport class IgxIconComponent implements OnInit {\n    @ViewChild('noLigature', { read: TemplateRef })\n    private noLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('explicitLigature', { read: TemplateRef })\n    private explicitLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('svgImage', { read: TemplateRef })\n    private svgImage: TemplateRef<HTMLElement>;\n\n    /**\n     *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.cssClass = \"\";\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('class.igx-icon')\n    public cssClass = 'igx-icon';\n\n    /**\n     *  This allows you to disable the `aria-hidden` attribute. By default it's applied.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.ariaHidden = false;\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('attr.aria-hidden')\n    public ariaHidden = true;\n\n    /**\n    *  An @Input property that sets the value of the `id` attribute.\n    *```html\n    *<igx-icon id=\"igx-icon-1\" fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-icon-${NEXT_ID++}`;\n\n    /**\n    *  An @Input property that sets the value of the `fontSet`. By default it's \"material\".\n    *```html\n    *<igx-icon fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @Input('fontSet')\n    public font: string;\n\n    /**\n    *  An @Input property that allows you to disable the `active` property. By default it's applied.\n    *```html\n    *<igx-icon [isActive]=\"false\" fontSet=\"material\" color=\"blue\">settings</igx-icon>\n    *```\n    */\n    @Input('isActive')\n    public active = true;\n\n    /**\n    *  An @Input property that allows you to change the `iconColor` of the icon.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">settings</igx-icon>\n    *```\n    */\n    @Input('color')\n    public iconColor: string;\n\n    /**\n    *  An @Input property that allows you to set the `iconName` of the icon.\n    *  The `iconName` can be set using the `name` property.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">question_answer</igx-icon>\n    *```\n    */\n    @Input('name')\n    public iconName: string;\n\n    /**\n     * An ElementRef property of the `igx-icon` component.\n     */\n    public el: ElementRef;\n\n    constructor(private _el: ElementRef, private iconService: IgxIconService) {\n        this.el = _el;\n        this.font = this.iconService.defaultFontSet;\n        this.iconService.registerFontSetAlias('material', 'material-icons');\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.updateIconClass();\n    }\n\n    /**\n     *  An accessor that returns the value of the font property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconFont = this.icon.getFontSet;\n     * }\n     * ```\n     */\n    get getFontSet(): string {\n        return this.font;\n    }\n\n    /**\n     *  An accessor that returns the value of the active property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getActive;\n     * }\n     * ```\n     */\n    get getActive(): boolean {\n        return this.active;\n    }\n\n    /**\n     *  An accessor that returns inactive property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getInactive;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-icon--inactive')\n    get getInactive(): boolean {\n        return !this.active;\n    }\n\n    /**\n     *  An accessor that returns the opposite value of the `iconColor` property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconColor = this.icon.getIconColor;\n     * }\n     * ```\n     */\n    @HostBinding('style.color')\n    get getIconColor(): string {\n        return this.iconColor;\n    }\n\n    /**\n     *  An accessor that returns the value of the iconName property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconName = this.icon.getIconName;\n     * }\n     * ```\n     */\n    get getIconName(): string {\n        return this.iconName;\n    }\n\n    /**\n     *  An accessor that returns the key of the SVG image.\n     *  The key consists of the fontSet and the iconName separated by underscore.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let svgKey = this.icon.getSvgKey;\n     * }\n     * ```\n     */\n    get getSvgKey(): string {\n        if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            return '#' + this.iconService.getSvgIconKey(this.iconName, this.font);\n        }\n\n        return null;\n    }\n\n    /**\n     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconTemplate = this.icon.template;\n     * }\n     * ```\n     */\n    get template(): TemplateRef<HTMLElement> {\n        if (this.iconName) {\n            if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n                return this.svgImage;\n            }\n\n            return this.noLigature;\n        }\n\n        return this.explicitLigature;\n    }\n\n    /**\n     * @hidden\n     */\n    private updateIconClass() {\n        const className = this.iconService.fontSetClassName(this.font);\n        this.el.nativeElement.classList.add(className);\n\n        if (this.iconName && !this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            this.el.nativeElement.classList.add(this.iconName);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { IgxIconComponent } from './icon.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { DeprecateMethod } from '../core/deprecateDecorators';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxIconComponent],\n    exports: [IgxIconComponent],\n    imports: [CommonModule, HttpClientModule]\n})\nexport class IgxIconModule {\n    @DeprecateMethod('IgxIconModule.forRoot method is deprecated. Use IgxIconModule instead.')\n    public static forRoot() {\n        return {\n            ngModule: IgxIconModule\n        };\n    }\n}\n\nexport * from './icon.component';\nexport * from './icon.service';\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Size {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large'\n}\n\nexport enum AvatarType {\n    DEFAULT = 'default',\n    INITIALS = 'initials',\n    IMAGE = 'image',\n    ICON = 'icon'\n}\n\n/**\n * **Ignite UI for Angular Avatar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/avatar.html)\n *\n * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an\n * image, someone's initials or a material icon from the google material icon set.\n *\n * Example:\n * ```html\n * <igx-avatar initials=\"MS\" roundShape=\"true\" size=\"large\">\n * </igx-avatar>\n * ```\n */\n@Component({\n    selector: 'igx-avatar',\n    templateUrl: 'avatar.component.html'\n})\nexport class IgxAvatarComponent implements OnInit, AfterViewInit {\n\n    /**\n     * This is a reference to the avatar `image` element in the DOM.\n     *\n     * ```typescript\n     *  let image =  this.avatar.image;\n     * ```\n     * @memberof IgxAvatarComponent\n     */\n    @ViewChild('image')\n    public image: ElementRef;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('defaultTemplate', { read: TemplateRef })\n    protected defaultTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('imageTemplate', { read: TemplateRef })\n    protected imageTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('initialsTemplate', { read: TemplateRef })\n    protected initialsTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('iconTemplate', { read: TemplateRef })\n    protected iconTemplate: TemplateRef<any>;\n\n    /**\n     * Returns the `aria-label` of the avatar.\n     *\n     * ```typescript\n     * let ariaLabel = this.avatar.ariaLabel;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = 'avatar';\n\n    /**\n     * Returns the `role` attribute of the avatar.\n     *\n     * ```typescript\n     * let avatarRole = this.avatar.role;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'img';\n\n    /**\n     * Returns the class of the avatar.\n     *\n     * ```typescript\n     * let avatarCLass =  this.avatar.cssClass;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('class.igx-avatar')\n    public cssClass = 'igx-avatar';\n\n    /**\n     * Returns the type of the avatar.\n     * The avatar can be: `\"initials type avatar\"`, `\"icon type avatar\"` or `\"image type avatar\"`.\n     *\n     * ```typescript\n     * let avatarDescription = this.avatar.roleDescription;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('attr.aria-roledescription')\n    public roleDescription: string;\n\n    /**\n     * @hidden\n     */\n    private _size: string | Size = 'small';\n\n    /**\n     * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `\"igx-avatar-0\"`.\n     *\n     * ```html\n     * <igx-avatar id=\"my-first-avatar\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-avatar-${NEXT_ID++}`;\n\n    /**\n     * Sets a round shape to the avatar if `roundShape` is `\"true\"`.\n     * By default the shape of the avatar is a square.\n     *\n     * ```html\n     * <igx-avatar roundShape = \"true\" ></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('class.igx-avatar--rounded')\n    @Input()\n    public roundShape = false;\n\n    /**\n     * Sets the avatar's `initials`/`icon` color.\n     *\n     *```html\n     *<igx-avatar color=\"blue\"></igx-avatar>\n     *```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.color')\n    @Input()\n    public color: string;\n\n    /**\n     * Sets the background color of the avatar.\n     *\n     * ```html\n     * <igx-avatar bgColor=\"yellow\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.background')\n    @Input()\n    public bgColor: string;\n\n    /**\n     * Sets `initials` to the avatar.\n     *\n     * ```html\n     * <igx-avatar initials=\"MN\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public initials: string;\n\n    /**\n     * Sets an `icon` to the avatar. All icons from the material icon set are supported.\n     *\n     * ```html\n     * <igx-avatar icon=\"phone\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * Sets the `image` source of the avatar.\n     *\n     * ```html\n     * <igx-avatar src=\"images/picture.jpg\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public src: string;\n\n    /**\n     * Returns the `size` of the avatar.\n     *\n     * ```typescript\n     *let avatarSize =  this.avatar.size;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public get size(): string | Size {\n        return this._size;\n    }\n\n    /**\n     * Sets the `size`  of the avatar.\n     * By default the `size` is `\"small\"`. It can be set to `\"medium\"` or `\"large\"`.\n     *\n     * ```\n     * <igx-avatar size=\"large\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public set size(value: string | Size) {\n        switch (value) {\n            case 'small':\n            case 'medium':\n            case 'large':\n                this._size = value;\n                break;\n            default:\n                this._size = 'small';\n        }\n    }\n\n    /**\n     * Returns the type of the avatar.\n     *\n     * ```typescript\n     * let avatarType = this.avatar.type;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get type(): AvatarType {\n        if (this.src) {\n            return AvatarType.IMAGE;\n        }\n\n        if (this.icon) {\n            return AvatarType.ICON;\n        }\n\n        if (this.initials) {\n            return AvatarType.INITIALS;\n        }\n\n        return AvatarType.DEFAULT;\n    }\n\n    /**\n     * Returns the template of the avatar.\n     *\n     * ```typescript\n     * let template = this.avatar.template;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get template(): TemplateRef<any> {\n        switch (this.type) {\n            case AvatarType.IMAGE:\n                return this.imageTemplate;\n            case AvatarType.INITIALS:\n                return this.initialsTemplate;\n            case AvatarType.ICON:\n                return this.iconTemplate;\n            default:\n                return this.defaultTemplate;\n        }\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.roleDescription = this.getRole();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        this.elementRef.nativeElement.classList\n            .add(`igx-avatar--${this._size}`, `igx-avatar--${this.type}`);\n    }\n\n    /**\n     * @hidden\n     */\n    private getRole(): string {\n        switch (this.type) {\n            case AvatarType.IMAGE:\n                return 'image avatar';\n            case AvatarType.ICON:\n                return 'icon avatar';\n            case AvatarType.INITIALS:\n                return 'initials avatar';\n            default:\n                return 'custom avatar';\n        }\n    }\n\n    /**\n     * Returns the url of the `image`.\n     *\n     * ```typescript\n     * let imageSourceUrl = this.avatar.getSrcUrl();\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public getSrcUrl() {\n        return `url(${this.src})`;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxAvatarComponent],\n    exports: [IgxAvatarComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxAvatarModule { }\n","import { CommonModule } from '@angular/common';\nimport { Component, HostBinding, Input, NgModule } from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Type {\n    DEFAULT = 'default',\n    INFO = 'info',\n    SUCCESS = 'success',\n    WARNING = 'warning',\n    ERROR = 'error'\n}\n/**\n * **Ignite UI for Angular Badge** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/badge.html)\n *\n * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the\n * application when visual notification is needed. They are usually designed as icons with a predefined\n * style to communicate information, success, warnings, or errors.\n *\n * Example:\n * ```html\n * <igx-avatar icon=\"person\" roundShape=\"true\" size=\"small\">\n *   <igx-badge icon=\"check\" type=\"success\" class=\"badge-style\">\n *   </igx-badge>\n * </igx-avatar>\n * ```\n * The `badge-style` class is used to position the badge:\n * ```css\n * .badge-style {\n *   position: absolute;\n *   bottom: -6px;\n *   right:-50px;\n * }\n * ```\n */\n@Component({\n    selector: 'igx-badge',\n    templateUrl: 'badge.component.html'\n})\nexport class IgxBadgeComponent {\n\n    /**\n    * An @Input property that sets the value of the `id` attribute.\n    * ```html\n    *<igx-badge id=\"igx-badge-2\" icon=\"check\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-badge-${NEXT_ID++}`;\n\n    /**\n    * An @Input property controlling the type of the badge.\n    * Allowed values are `default`, `info`, `success`, `warning`, `error`.\n    * Providing an invalid value won't display a badge.\n    * ```html\n    *<igx-badge type=\"success\" icon=\"check\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public type: string | Type = 'default';\n\n    /**\n    * An @Input property that sets the value to be displayed inside the badge.\n    * If an `icon` property is already set the `icon` will be displayed.\n    * If neither a `value` nor an `icon` is set the contentent of the badge will be empty.\n    * ```html\n    *<igx-badge value=\"11\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public value = '';\n\n    /**\n     * Set an icon for the badge from the material icons set.\n     * Has priority over the `value` property.\n     * If neither a `value` nor an `icon` is set the content of the badge will be empty.\n     * Providing an invalid value won't display anything.\n     * ```html\n     *<igx-badge icon=\"check\" type=\"success\" class=\"badge-style\" value=\"11\"></igx-badge>\n     * ```\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * This allows you to set value to role attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"badge-status\";\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'status';\n\n    /**\n     * This allows you to disable igx-badge class. The default it's applied.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.cssClass = false;\n     * ```\n     */\n    @HostBinding('class.igx-badge')\n    public cssClass = 'igx-badge';\n\n    /**\n     * This allows you to set value to aria-label attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"icon-badge\";\n     * ```\n     */\n    @HostBinding('attr.aria-label')\n    public label = 'badge';\n\n    /**\n     * @hidden\n     * Defines a human-readable, accessor, author-localized description for the `type` and the `icon` or `value` of the element.\n     */\n    get roleDescription() {\n        let message;\n\n        // tslint:disable-next-line:prefer-conditional-expression\n        if (this.icon) {\n            message = this.type + ' type badge with icon type ' + this.icon;\n        } else if (this.value) {\n            message = this.type + ' badge type with value ' + this.value;\n        } else {\n            message = this.type + ' badge type without value';\n        }\n\n        return message;\n    }\n\n    /**\n     * @hidden\n     * Method which makes the name of the class more descriptive.\n     * This helps the styling of the badges.\n     */\n    public setClasses() {\n        let classes = {};\n\n        switch (Type[this.type.toUpperCase()]) {\n            case Type.DEFAULT:\n                classes = {\n                    [`${this.cssClass}__circle--default`]: true\n                };\n                break;\n            case Type.INFO:\n                classes = {\n                    [`${this.cssClass}__circle--info`]: true\n                };\n                break;\n            case Type.SUCCESS:\n                classes = {\n                    [`${this.cssClass}__circle--success`]: true\n                };\n                break;\n            case Type.WARNING:\n                classes = {\n                    [`${this.cssClass}__circle--warning`]: true\n                };\n                break;\n            case Type.ERROR:\n                classes = {\n                    [`${this.cssClass}__circle--error`]: true\n                };\n                break;\n        }\n\n        return classes;\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBadgeComponent],\n    exports: [IgxBadgeComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxBadgeModule {\n}\n","import { EventEmitter } from '@angular/core';\nimport { AnimationReferenceMetadata } from '@angular/animations';\n\nexport interface IgxExpansionPanelBase {\n    id: string;\n    cssClass: string;\n    /** @hidden @internal */\n    headerId: string;\n    collapsed: boolean;\n    animationSettings: { openAnimation: AnimationReferenceMetadata, closeAnimation: AnimationReferenceMetadata };\n    onCollapsed: EventEmitter<any>;\n    onExpanded: EventEmitter<any>;\n    collapse(evt?: Event);\n    expand(evt?: Event);\n    toggle(evt?: Event);\n}\n\n/** @hidden */\nexport const IGX_EXPANSION_PANEL_COMPONENT = 'IgxExpansionPanelToken';\n\nexport interface IExpansionPanelEventArgs {\n    event: Event;\n    panel: IgxExpansionPanelBase;\n}\n","import { Component, HostBinding, ElementRef, Input, ChangeDetectorRef, OnInit, Inject } from '@angular/core';\nimport { IgxExpansionPanelBase, IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';\n\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-body',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxExpansionPanelBodyComponent implements OnInit {\n    private _labelledBy = '';\n    private _label = '';\n    constructor(\n        @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase,\n        public element: ElementRef, public cdr: ChangeDetectorRef) {\n    }\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel__body')\n    public cssClass = `igx-expansion-panel__body`;\n\n    /**\n     * Gets the `aria-label` attribute of the panel body\n     * Defaults to the panel id with '-region' in the end;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.label;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-label')\n    public get label(): string {\n        return this._label || this.panel.id + '-region';\n    }\n    /**\n     * Sets the `aria-label` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.label = 'my-custom-label';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [label]=\"'my-custom-label'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set label(val: string) {\n        this._label = val;\n    }\n\n    /**\n     * Gets the `aria-labelledby` attribute of the panel body\n     * Defaults to the panel header id;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.labelledBy;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public get labelledBy(): string {\n        return this._labelledBy;\n    }\n    /**\n     * Sets the `aria-labelledby` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.labelledBy = 'my-custom-id';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [labelledBy]=\"'my-custom-id'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set labelledBy(val: string) {\n        this._labelledBy = val;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the panel body\n     * Default is 'region';\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.body.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.body.role = 'content';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [role]=\"'custom'\"></igx-expansion-panel-body>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'region';\n\n    ngOnInit() {\n        this.labelledBy = this.panel.headerId;\n        this.label = this.panel.id + '-region';\n    }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-title'\n})\nexport class IgxExpansionPanelTitleDirective {\n    @HostBinding('class.igx-expansion-panel__header-title')\n    public cssClass = `igx-expansion-panel__header-title`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-description'\n})\nexport class IgxExpansionPanelDescriptionDirective {\n    @HostBinding('class.igx-expansion-panel__header-description')\n    public cssClass = `igx-expansion-panel__header-description`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-icon'\n})\nexport class IgxExpansionPanelIconDirective {\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Host,\n    EventEmitter,\n    Output,\n    ContentChild,\n    Inject\n} from '@angular/core';\nimport { IgxExpansionPanelIconDirective } from './expansion-panel.directives';\nimport { IExpansionPanelEventArgs, IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase } from './expansion-panel.common';\n\n/**\n * @hidden\n */\nexport enum ICON_POSITION {\n    LEFT = 'left',\n    NONE = 'none',\n    RIGHT = 'right'\n}\n\n\n@Component({\n    selector: 'igx-expansion-panel-header',\n    templateUrl: 'expansion-panel-header.component.html'\n})\nexport class IgxExpansionPanelHeaderComponent {\n     // properties section\n    private _iconTemplate = false;\n    /**\n     * Sets/gets the `id` of the expansion panel header.\n     * ```typescript\n     * let panelHeaderId =  this.panel.header.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    public id = '';\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelIconDirective)\n    public set iconTemplate(val: any) {\n        this._iconTemplate = <boolean>val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get iconTemplate(): any {\n        return this._iconTemplate;\n    }\n\n    /**\n     * Gets/sets the `aria-level` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentAriaLevel = this.panel.header.lv;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.lv = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [lv]=\"myCustomLevel\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.aria-level')\n    @Input()\n    public lv = '3';\n\n    /**\n     * Gets/sets the `role` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.header.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.role = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [role]=\"'custom'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'heading';\n\n    /**\n     * @hidden\n     */\n    public get controls (): string {\n        return this.panel.id;\n    }\n\n    /**\n     * Gets/sets the position of the expansion-panel-header expand/collapse icon\n     * Accepts `left`, `right` or `none`\n     * ```typescript\n     *  const currentIconPosition = this.panel.header.iconPosition;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.iconPosition = 'left';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [iconPosition]=\"'right'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    public iconPosition: ICON_POSITION = ICON_POSITION.LEFT;\n\n    /**\n     * Emitted whenever a user interacts with the header host\n     * ```typescript\n     *  handleInteraction(event: IExpansionPanelEventArgs) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header (onInteraction)=\"handleInteraction($event)\">\n     *      ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Output()\n    public onInteraction = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header')\n     public cssClass = 'igx-expansion-panel__header';\n\n     /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header--expanded')\n     public get isExpanded () {\n            return !this.panel.collapsed;\n         }\n\n    /**\n     * Gets/sets the whether the header is disabled\n     * When disabled, the header will not handle user events and will stop their propagation\n     *\n     * ```typescript\n     *  const isDisabled = this.panel.header.disabled;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.disabled = true;\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [disabled]=\"true\">\n     *     ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-expansion-panel--disabled')\n    public disabled = false;\n\n    constructor(@Host() @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase, public cdr: ChangeDetectorRef,\n     public elementRef: ElementRef) {\n         this.id = `${this.panel.id}-header`;\n     }\n\n     /**\n     * @hidden\n     */\n     @HostListener('keydown.Enter', ['$event'])\n     @HostListener('keydown.Space', ['$event'])\n     @HostListener('keydown.Spacebar', ['$event'])\n     @HostListener('click', ['$event'])\n     public onAction(evt?: Event) {\n         if (this.disabled) {\n            evt.stopPropagation();\n            return;\n         }\n         this.onInteraction.emit({ event: evt, panel: this.panel });\n         this.panel.toggle(evt);\n         evt.preventDefault();\n     }\n\n    /** @hidden @internal */\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    public openPanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.expand(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /** @hidden @internal */\n     @HostListener('keydown.Alt.ArrowUp', ['$event'])\n     public closePanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.collapse(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /**\n     * @hidden\n     */\n     public get iconPositionClass(): string {\n        switch (this.iconPosition) {\n            case (ICON_POSITION.LEFT):\n                return `igx-expansion-panel__header-icon--start`;\n            case (ICON_POSITION.RIGHT):\n                return `igx-expansion-panel__header-icon--end`;\n            case (ICON_POSITION.NONE):\n                return `igx-expansion-panel__header-icon--none`;\n            default:\n                return '';\n        }\n     }\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ContentChild,\n    forwardRef,\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, useAnimation, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { growVerOut, growVerIn } from '../animations/main';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase, IExpansionPanelEventArgs } from './expansion-panel.common';\n\nlet NEXT_ID = 0;\n\nexport interface AnimationSettings {\n    openAnimation: AnimationReferenceMetadata;\n    closeAnimation: AnimationReferenceMetadata;\n}\n@Component({\n    selector: 'igx-expansion-panel',\n    templateUrl: 'expansion-panel.component.html',\n    providers: [{ provide: IGX_EXPANSION_PANEL_COMPONENT, useExisting: IgxExpansionPanelComponent }]\n})\nexport class IgxExpansionPanelComponent implements IgxExpansionPanelBase {\n\n    /**\n     * Sets/gets the animation settings of the expansion panel component\n     * Open and Close animation should be passed\n     *\n     * Get\n     * ```typescript\n     *  const currentAnimations = this.panel.animationSettings;\n     * ```\n     * Set\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  this.panel.animationsSettings = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```\n     * or via template\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  myCustomAnimationObject = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```html\n     *  <igx-expansion-panel [animationSettings]='myCustomAnimationObject'>\n     *  ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public animationSettings: AnimationSettings = {\n        openAnimation: growVerIn,\n        closeAnimation: growVerOut\n    };\n\n    /**\n     * Sets/gets the `id` of the expansion panel component.\n     * If not set, `id` will have value `\"igx-expansion-panel-0\"`;\n     * ```html\n     * <igx-expansion-panel id = \"my-first-expansion-panel\"></igx-expansion-panel>\n     * ```\n     * ```typescript\n     * let panelId =  this.panel.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-expansion-panel-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel')\n    public cssClass = 'igx-expansion-panel';\n\n    /**\n     * Gets/sets whether the component is collapsed (its content is hidden)\n     * Get\n     * ```typescript\n     *  const myPanelState: boolean = this.panel.collapsed;\n     * ```\n     * Set\n     * ```html\n     *  this.panel.collapsed = true;\n     * ```\n     */\n    @Input()\n    public collapsed = true;\n\n    /**\n     * Emitted when the expansion panel finishes collapsing\n     * ```typescript\n     *  handleCollapsed(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onCollapsed)=\"handleCollapsed($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onCollapsed = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * Emitted when the expansion panel finishes expanding\n     * ```typescript\n     *  handleExpanded(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onExpanded)=\"handleExpanded($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onExpanded = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public get headerId() {\n        return this.header ? `${this.id}-header` : '';\n    }\n    constructor(private cdr: ChangeDetectorRef, private builder: AnimationBuilder) { }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxExpansionPanelBodyComponent), { read: forwardRef(() => IgxExpansionPanelBodyComponent) })\n    public body: IgxExpansionPanelBodyComponent;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxExpansionPanelHeaderComponent), { read: forwardRef(() => IgxExpansionPanelHeaderComponent) })\n    public header: IgxExpansionPanelHeaderComponent;\n\n\n    private playOpenAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.openAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const openAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n\n        openAnimationPlayer.onDone(() => {\n            cb();\n            openAnimationPlayer.reset();\n        });\n\n        openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.closeAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const closeAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n        closeAnimationPlayer.onDone(() => {\n            cb();\n            closeAnimationPlayer.reset();\n        });\n\n        closeAnimationPlayer.play();\n    }\n\n    /**\n     * Collapses the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.collapse($event)\">Collpase Panel</button>\n     * ```\n     */\n    collapse(evt?: Event) {\n        if (this.collapsed) { // If expansion panel is already collapsed, do nothing\n            return;\n        }\n        this.playCloseAnimation(\n            () => {\n                this.onCollapsed.emit({ event: evt, panel: this });\n                this.collapsed = true;\n            }\n        );\n    }\n\n    /**\n     * Expands the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.expand($event)\">Expand Panel</button>\n     * ```\n     */\n    expand(evt?: Event) {\n        if (!this.collapsed) { // If the panel is already opened, do nothing\n            return;\n        }\n        this.collapsed = false;\n        this.cdr.detectChanges();\n        this.playOpenAnimation(\n            () => {\n                this.onExpanded.emit({ event: evt, panel: this });\n            }\n        );\n    }\n\n    /**\n     * Toggles the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.toggle($event)\">Expand Panel</button>\n     * ```\n     */\n    toggle(evt?: Event) {\n        if (this.collapsed) {\n            this.open(evt);\n        } else {\n            this.close(evt);\n        }\n    }\n\n    open(evt?: Event) {\n        this.expand(evt);\n    }\n    close(evt?: Event) {\n        this.collapse(evt);\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelDescriptionDirective, IgxExpansionPanelTitleDirective,\n  IgxExpansionPanelIconDirective } from './expansion-panel.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n    IgxExpansionPanelIconDirective\n  ],\n  entryComponents: [\n  ],\n  exports: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n      IgxExpansionPanelIconDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule\n  ]\n})\nexport class IgxExpansionPanelModule {\n}\n","import { Directive } from '@angular/core';\n\n// tslint:disable:directive-selector\n@Directive({\n    selector: 'igx-banner-actions'\n})\nexport class IgxBannerActionsDirective {\n}\n","import { Component, NgModule, EventEmitter, Output, Input, ViewChild, ElementRef,\n    ContentChild, HostBinding } from '@angular/core';\nimport { IgxExpansionPanelModule } from '../expansion-panel/expansion-panel.module';\nimport { AnimationSettings } from '../expansion-panel/expansion-panel.component';\nimport { IgxExpansionPanelComponent } from '../expansion-panel';\nimport { IgxIconModule, IgxIconComponent } from '../icon/index';\nimport { IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxBannerActionsDirective } from './banner.directives';\nimport { CommonModule } from '@angular/common';\nimport { CancelableEventArgs } from '../core/utils';\n\nexport interface BannerEventArgs {\n    banner: IgxBannerComponent;\n    event?: Event;\n}\n\nexport interface BannerCancelEventArgs extends BannerEventArgs, CancelableEventArgs {\n}\n/**\n * **Ignite UI for Angular Banner** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/banner.html)\n *\n * The Ignite UI Banner provides a highly templateable and easy to use banner that can be shown in your application.\n *\n * Usage:\n *\n * ```html\n * <igx-banner #banner>\n *   Our privacy settings have changed.\n *  <igx-banner-actions>\n *      <button igxButton=\"raised\">Read More</button>\n *      <button igxButton=\"raised\">Accept and Continue</button>\n *  </igx-banner-actions>\n * </igx-banner>\n * ```\n */\n@Component({\n    selector: 'igx-banner',\n    templateUrl: 'banner.component.html'\n})\nexport class IgxBannerComponent implements IToggleView {\n    private _bannerEvent: BannerEventArgs;\n    private _animationSettings: AnimationSettings;\n\n    @ViewChild('expansionPanel')\n    private _expansionPanel: IgxExpansionPanelComponent;\n\n    @ContentChild(IgxBannerActionsDirective)\n    private _bannerActionTemplate: any;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxIconComponent)\n    public bannerIcon: any;\n\n    /**\n     * Fires after the banner shows up\n     * ```typescript\n     * public handleOpened(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpened)=\"handleOpened($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner shows up\n     * ```typescript\n     * public handleOpening(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpening)=\"handleOpening($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<BannerCancelEventArgs>();\n\n    /**\n     * Fires after the banner hides\n     * ```typescript\n     * public handleClosed(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosed)=\"handleClosed($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner hides\n     * ```typescript\n     * public handleClosing(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosing)=\"handleClosing($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<BannerCancelEventArgs>();\n\n    /** @hidden */\n    public get useDefaultTemplate(): boolean {\n        return !this._bannerActionTemplate;\n    }\n\n    /**\n     * Get the animation settings used by the banner open/close methods\n     * ```typescript\n     * let currentAnimations: AnimationSettings = banner.animationSettings\n     * ```\n     */\n    @Input()\n    public get animationSettings(): AnimationSettings {\n        return this._animationSettings ? this._animationSettings : this._expansionPanel.animationSettings;\n    }\n\n    /**\n     * Set the animation settings used by the banner open/close methods\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * banner.animationSettings: AnimationSettings = { openAnimation: slideInLeft, closeAnimation: slideOutRight };\n     * ```\n     */\n    public set animationSettings(settings: AnimationSettings) {\n        this._animationSettings = settings;\n    }\n    /**\n     * Gets whether banner is collapsed\n     *\n     * ```typescript\n     * const isCollapsed: boolean = banner.collapsed;\n     * ```\n     */\n    public get collapsed() {\n        return this._expansionPanel.collapsed;\n    }\n\n    /**\n     * Returns the native element of the banner component\n     * ```typescript\n     *  const myBannerElement: HTMLElement = banner.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display')\n    public get displayStyle(): string {\n        return this.collapsed ? '' : 'block';\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * Opens the banner\n     *\n     * ```typescript\n     *  myBanner.open();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.open()\">Open Banner</button>\n     * ```\n     */\n    public open(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const openingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onOpening.emit(openingArgs);\n        if (openingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.open(event);\n    }\n\n    /**\n     * Closes the banner\n     *\n     * ```typescript\n     *  myBanner.close();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.close()\">Close Banner</button>\n     * ```\n     */\n    public close(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const closingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onClosing.emit(closingArgs);\n        if (closingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.close(event);\n    }\n\n    /**\n     * Toggles the banner\n     *\n     * ```typescript\n     *  myBanner.toggle();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.toggle()\">Toggle Banner</button>\n     * ```\n     */\n    toggle(event?: Event) {\n        if (this.collapsed) {\n            this.open(event);\n        } else {\n            this.close(event);\n        }\n    }\n\n    /** @hidden */\n    public onExpansionPanelOpen() {\n        this.onOpened.emit(this._bannerEvent);\n    }\n\n    /** @hidden */\n    public onExpansionPanelClose() {\n        this.onClosed.emit(this._bannerEvent);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBannerComponent, IgxBannerActionsDirective],\n    exports: [IgxBannerComponent, IgxBannerActionsDirective],\n    imports: [CommonModule, IgxExpansionPanelModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxBannerModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    NgModule,\n    Output,\n    Optional,\n    QueryList,\n    Renderer2,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IgxButtonDirective, IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions, DisplayDensity } from '../core/density';\n\nexport enum ButtonGroupAlignment { horizontal, vertical }\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Button Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/buttongroup.html)\n *\n * The Ignite UI Button Group displays a group of buttons either vertically or horizontally.  The group supports\n * single, multiple and toggle selection.\n *\n * Example:\n * ```html\n * <igx-buttongroup multiSelection=\"true\" [values]=\"fontOptions\">\n * </igx-buttongroup>\n * ```\n * The `fontOptions` value shown above is defined as:\n * ```typescript\n * this.fontOptions = [\n *   { icon: 'format_bold', selected: false },\n *   { icon: 'format_italic', selected: false },\n *   { icon: 'format_underlined', selected: false }];\n * ```\n */\n@Component({\n    selector: 'igx-buttongroup',\n    templateUrl: 'buttongroup-content.component.html'\n})\n\nexport class IgxButtonGroupComponent extends DisplayDensityBase implements AfterContentInit, AfterViewInit, OnDestroy {\n\n    private _disabled = false;\n    protected buttonClickNotifier$ = new Subject<boolean>();\n    protected queryListNotifier$ = new Subject<boolean>();\n\n    @ViewChildren(IgxButtonDirective) private viewButtons: QueryList<IgxButtonDirective>;\n    @ContentChildren(IgxButtonDirective) private templateButtons: QueryList<IgxButtonDirective>;\n\n    /**\n     * A collection containing all buttons inside the button group.\n     */\n    public get buttons(): IgxButtonDirective[] {\n        return [...this.viewButtons.toArray(), ...this.templateButtons.toArray()];\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not set it will be automatically generated.\n     * ```html\n     *  <igx-buttongroup [id]=\"'igx-dialog-56'\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-buttongroup-${NEXT_ID++}`;\n\n    /**\n     * Allows you to set a style using the `itemContentCssClass` input.\n     * The value should be the CSS class name that will be applied to the button group.\n     *```typescript\n     *public style1 = \"styleClass\";\n     * //..\n     *```\n     * ```html\n     *<igx-buttongroup [itemContentCssClass]=\"style1\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     *```\n     */\n    @Input() set itemContentCssClass(value: string) {\n        this._itemContentCssClass = value || this._itemContentCssClass;\n    }\n\n    /**\n     * Returns the CSS class of the item content of the `IgxButtonGroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *   let buttonSelect = this.buttonG.itemContentCssClass;\n     *}\n     *```\n     */\n    get itemContentCssClass(): string {\n        return this._itemContentCssClass;\n    }\n\n    /**\n     * An @Input property that enables selecting multiple buttons. By default, multi-selection is false.\n     * ```html\n     * <igx-buttongroup [multiSelection]=\"false\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public multiSelection = false;\n    /**\n     * An @Input property that allows setting the buttons in the button group.\n     * ```typescript\n     *  public ngOnInit() {\n     *      this.cities = [\n     *        new Button({\n     *          label: \"Sofia\"\n     *      }),\n     *        new Button({\n     *          label: \"London\"\n     *      }),\n     *        new Button({\n     *          label: \"New York\",\n     *          selected: true\n     *      }),\n     *        new Button({\n     *          label: \"Tokyo\"\n     *      })\n     *  ];\n     *  }\n     *  //..\n     * ```\n     * ```html\n     *  <igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public values: any;\n    /**\n     * An @Input property that allows you to disable the `igx-buttongroup` component. By default it's false.\n     * ```html\n     * <igx-buttongroup [disabled]=\"true\" [multiSelection]=\"multi\" [values]=\"fontOptions\"></igx-buttongroup>\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n    public set disabled(value: boolean) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this.viewButtons && this.templateButtons) {\n                this.buttons.forEach((b) => b.disabled = this._disabled);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectedIndexes: number[] = [];\n\n    /**\n     * Allows you to set the button group alignment.\n     * Available options are `ButtonGroupAlignment.horizontal` (default) and `ButtonGroupAlignment.vertical`.\n     * ```typescript\n     *public alignment = ButtonGroupAlignment.vertical;\n     * //..\n     * ```\n     * ```html\n     *<igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() set alignment(value: ButtonGroupAlignment) {\n        this._isVertical = value === ButtonGroupAlignment.vertical;\n    }\n    /**\n     * Returns the alignment of the `igx-buttongroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let buttonAlignment = this.buttonG.alignment;\n     *}\n     *```\n     */\n    get alignment(): ButtonGroupAlignment {\n        return this._isVertical ? ButtonGroupAlignment.vertical : ButtonGroupAlignment.horizontal;\n    }\n\n    /**\n     * An @Ouput property that emits an event when a button is selected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onSelect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * <igx-buttongroup #MyChild [multiSelection]=\"!multi\" (onSelect)=\"onSelect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have made a selection!\"></igx-toast>\n     *```\n     */\n    @Output() public onSelect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * An @Ouput property that emits an event when a button is deselected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onUnselect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * igx-buttongroup #MyChild [multiSelection]=\"multi\" (onUnselect)=\"onUnselect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have deselected a button!\"></igx-toast>\n     *```\n     */\n    @Output() public onUnselect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * Returns true if the `igx-buttongroup` alignment is vertical.\n     * Note that in order for the accessor to work correctly the property should be set explicitly.\n     * ```html\n     * <igx-buttongroup #MyChild [alignment]=\"alignment\" [values]=\"alignOptions\">\n     * ```\n     * ```typescript\n     * //...\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let orientation = this.buttonG.isVertical;\n     *}\n     *```\n     */\n    public get isVertical(): boolean {\n        return this._isVertical;\n    }\n    private _isVertical: boolean;\n    private _itemContentCssClass: string;\n\n    constructor(private _cdr: ChangeDetectorRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n    }\n\n    /**\n     * Gets the selected button/buttons.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let selectedButton = this.buttonG.selectedButtons;\n     *}\n     *```\n     */\n    get selectedButtons(): IgxButtonDirective[] {\n        return this.buttons.filter((b, i) => {\n            return this.selectedIndexes.indexOf(i) !== -1;\n        });\n\n    }\n\n    /**\n     * Selects a button by its index.\n     * @memberOf {@link IgxButtonGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.selectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     *```\n     */\n    public selectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        if (buttonElement.classList.contains('igx-button--disabled')) {\n            return;\n        }\n\n        this.selectedIndexes.push(index);\n        button.selected = true;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'true');\n        this._renderer.addClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onSelect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = true;\n        }\n\n        // deselect other buttons if multiSelection is not enabled\n        if (!this.multiSelection && this.selectedIndexes.length > 1) {\n            this.buttons.forEach((b, i) => {\n                if (i !== index && this.selectedIndexes.indexOf(i) !== -1) {\n                    this.deselectButton(i);\n                }\n            });\n        }\n    }\n\n    /**\n     * Deselects a button by its index.\n     * @memberOf {@link IgxButtonGroupComponent}\n     * ```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.deselectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     * ```\n     */\n    public deselectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        if (buttonElement.classList.contains('igx-button--disabled')) {\n            return;\n        }\n\n        this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);\n        button.selected = false;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'false');\n        this._renderer.removeClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onUnselect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.templateButtons.forEach( (button) => {\n            if (!button.initialDensity) {\n                button.displayDensity = this.displayDensity;\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        const initButtons = () => {\n            // Cancel any existing buttonClick subscriptions\n            this.buttonClickNotifier$.next();\n\n            this.selectedIndexes.splice(0, this.selectedIndexes.length);\n\n            // initial configuration\n            this.buttons.forEach((button, index) => {\n                const buttonElement = button.nativeElement;\n\n                if (this.disabled) {\n                    button.disabled = true;\n                }\n\n                if (!button.disabled && button.selected) {\n                    this.selectButton(index);\n                }\n\n                button.buttonClick.pipe(takeUntil(this.buttonClickNotifier$)).subscribe((ev) => this._clickHandler(ev, index));\n                this._renderer.addClass(buttonElement, 'igx-button-group__item');\n            });\n        };\n\n        this.viewButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        this.templateButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        initButtons();\n\n        this._cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.buttonClickNotifier$.next();\n        this.buttonClickNotifier$.complete();\n\n        this.queryListNotifier$.next();\n        this.queryListNotifier$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    public _clickHandler(event, i) {\n        if (this.selectedIndexes.indexOf(i) !== -1) {\n            this.deselectButton(i);\n        } else {\n            this.selectButton(i);\n        }\n    }\n}\n\nexport interface IButtonGroupEventArgs {\n    button: IgxButtonDirective;\n    index: number;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonGroupComponent],\n    exports: [IgxButtonGroupComponent],\n    imports: [IgxButtonModule, CommonModule, IgxRippleModule, IgxIconModule]\n})\n\nexport class IgxButtonGroupModule {\n}\n","export interface DateRangeDescriptor {\n    type: DateRangeType;\n    dateRange?: Date[];\n}\n\nexport enum DateRangeType {\n    After,\n    Before,\n    Between,\n    Specific,\n    Weekdays,\n    Weekends\n}\n","import { DateRangeDescriptor, DateRangeType } from '../core/dates';\n\nconst MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst FEBRUARY = 1;\n\nexport function range(start = 0, stop, step = 1) {\n    const res = [];\n    const cur = (stop === undefined) ? 0 : start;\n    const max = (stop === undefined) ? start : stop;\n    for (let i = cur; step < 0 ? i > max : i < max; i += step) {\n        res.push(i);\n    }\n    return res;\n}\n\n/**\n * Returns true for leap years, false for non-leap years.\n *\n * @export\n * @param year\n * @returns\n */\nexport function isLeap(year: number): boolean {\n    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));\n}\n\nexport function weekDay(year: number, month: number, day: number): number {\n    return new Date(year, month, day).getDay();\n}\n\n/**\n * Return weekday and number of days for year, month.\n *\n * @export\n * @param year\n * @param month\n * @returns\n */\nexport function monthRange(year: number, month: number): number[] {\n    if ((month < 0) || (month > 11)) {\n        throw new Error('Invalid month specified');\n    }\n    const day = weekDay(year, month, 1);\n    let nDays = MDAYS[month];\n    if ((month === FEBRUARY) && (isLeap(year))) {\n        nDays++;\n    }\n    return [day, nDays];\n}\n\nexport function isDateInRanges(date: Date, ranges: DateRangeDescriptor[]): boolean {\n    date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    const dateInMs = date.getTime();\n\n    for (const descriptor of ranges) {\n        const dRanges = descriptor.dateRange ? descriptor.dateRange.map(\n            r => new Date(r.getFullYear(), r.getMonth(), r.getDate())) : undefined;\n        switch (descriptor.type) {\n            case (DateRangeType.After):\n                if (dateInMs > dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Before):\n                if (dateInMs < dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Between):\n                const dRange = dRanges.map(d => d.getTime());\n                const min = Math.min(dRange[0], dRange[1]);\n                const max = Math.max(dRange[0], dRange[1]);\n                if (dateInMs >= min && dateInMs <= max) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Specific):\n                const datesInMs = dRanges.map(d => d.getTime());\n                for (const specificDateInMs of datesInMs) {\n                    if (dateInMs === specificDateInMs) {\n                        return true;\n                    }\n                }\n\n                break;\n            case (DateRangeType.Weekdays):\n                const day = date.getDay();\n                if (day % 6 !== 0) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Weekends):\n                const weekday = date.getDay();\n                if (weekday % 6 === 0) {\n                    return true;\n                }\n\n                break;\n            default:\n                return false;\n        }\n    }\n\n    return false;\n}\n\nexport interface ICalendarDate {\n    date: Date;\n    isCurrentMonth: boolean;\n    isPrevMonth: boolean;\n    isNextMonth: boolean;\n}\n\nexport interface IFormattedParts {\n    value: string;\n    literal?: string;\n    combined: string;\n}\n\nexport interface IFormattingOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n\nexport interface IFormattingViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\nexport enum WEEKDAYS {\n    SUNDAY = 0,\n    MONDAY = 1,\n    TUESDAY = 2,\n    WEDNESDAY = 3,\n    THURSDAY = 4,\n    FRIDAY = 5,\n    SATURDAY = 6\n}\n\nexport class Calendar {\n\n    private _firstWeekDay: number | WEEKDAYS;\n\n    constructor(firstWeekDay: number | WEEKDAYS = WEEKDAYS.SUNDAY) {\n        this._firstWeekDay = firstWeekDay;\n    }\n\n    public get firstWeekDay(): number {\n        return this._firstWeekDay % 7;\n    }\n\n    public set firstWeekDay(value: number) {\n        this._firstWeekDay = value;\n    }\n\n    /**\n     * Returns an array of weekdays for one week starting\n     * with the currently set `firstWeekDay`\n     *\n     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]\n     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]\n     *\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public weekdays(): number[] {\n        const res = [];\n        for (const i of range(this.firstWeekDay, this.firstWeekDay + 7)) {\n            res.push(i % 7);\n        }\n        return res;\n    }\n\n    /**\n     * Returns the date values for one month. It will always iterate throught\n     * complete weeks, so it will contain dates outside the specified month.\n     *\n     * @param year\n     * @param month\n     * @param boolean\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdates(year: number, month: number, extraWeek: boolean = false): ICalendarDate[] {\n        let date = new Date(year, month, 1);\n        let days = (date.getDay() - this.firstWeekDay) % 7;\n        if (days < 0) {\n            days = 7 - Math.abs(days);\n        }\n        date = this.timedelta(date, 'day', -days);\n        const res = [];\n        let value: ICalendarDate;\n\n        while (true) {\n\n            value = this.generateICalendarDate(date, year, month);\n            res.push(value);\n\n            date = this.timedelta(date, 'day', 1);\n\n            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {\n                if (extraWeek && res.length <= 35) {\n                    for (const i of range(0, 7)) {\n                        value = this.generateICalendarDate(date, year, month);\n                        res.push(value);\n                        date = this.timedelta(date, 'day', 1);\n                    }\n                }\n                break;\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Returns a matrix (array of arrays) representing a month's calendar.\n     * Each row represents a full week; week entries are ICalendarDate objects.\n     *\n     * @param year\n     * @param month\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdatescalendar(year: number, month: number, extraWeek: boolean = false): ICalendarDate[][] {\n        const dates = this.monthdates(year, month, extraWeek);\n        const res = [];\n        for (const i of range(0, dates.length, 7)) {\n            res.push(dates.slice(i, i + 7));\n        }\n        return res;\n    }\n\n    public timedelta(date: Date, interval: string, units: number): Date {\n        const ret = new Date(date);\n\n        const checkRollover = () => {\n            if (ret.getDate() !== date.getDate()) {\n                ret.setDate(0);\n            }\n        };\n\n        switch (interval.toLowerCase()) {\n            case 'year':\n                ret.setFullYear(ret.getFullYear() + units);\n                checkRollover();\n                break;\n            case 'quarter':\n                ret.setMonth(ret.getMonth() + 3 * units);\n                checkRollover();\n                break;\n            case 'month':\n                ret.setMonth(ret.getMonth() + units);\n                checkRollover();\n                break;\n            case 'week':\n                ret.setDate(ret.getDate() + 7 * units);\n                break;\n            case 'day':\n                ret.setDate(ret.getDate() + units);\n                break;\n            case 'hour':\n                ret.setTime(ret.getTime() + units * 3600000);\n                break;\n            case 'minute':\n                ret.setTime(ret.getTime() + units * 60000);\n                break;\n            case 'second':\n                ret.setTime(ret.getTime() + units * 1000);\n                break;\n            default:\n                throw new Error('Invalid interval specifier');\n        }\n        return ret;\n    }\n\n    public formatToParts(date: Date, locale: string, options: any, parts: string[]) {\n        const formatter = new Intl.DateTimeFormat(locale, options);\n        const result = {\n            date,\n            full: formatter.format(date)\n        };\n\n        if ((formatter as any).formatToParts) {\n            const formattedParts = (formatter as any).formatToParts(date);\n\n            const toType = (partType: string) => {\n                const index = formattedParts.findIndex(({ type }) => type === partType);\n                const o: IFormattedParts = { value: '', literal: '', combined: ''};\n\n                if (partType === 'era' && index > -1) {\n                    o.value = formattedParts[index].value;\n                    return o;\n                } else if (partType === 'era' && index === -1) {\n                    return o;\n                }\n\n                o.value = formattedParts[index].value;\n                o.literal = formattedParts[index + 1] ? formattedParts[index + 1].value : '';\n                o.combined = [o.value, o.literal].join('');\n                return o;\n            };\n\n            for (const each of parts) {\n                result[each] = toType(each);\n            }\n        } else {\n            for (const each of parts) {\n                result[each] = { value: '', literal: '', combined: ''};\n            }\n        }\n        return result;\n    }\n\n    private generateICalendarDate(date: Date, year: number, month: number): ICalendarDate {\n        return {\n            date,\n            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,\n            isNextMonth: this.isNextMonth(date, year, month),\n            isPrevMonth: this.isPreviousMonth(date, year, month)\n        };\n    }\n\n    private isPreviousMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() < month;\n        }\n        return date.getFullYear() < year;\n    }\n\n    private isNextMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() > month;\n        }\n\n        return date.getFullYear() > year;\n    }\n}\n","/**\n * This file contains all the directives used by the @link IgxCalendarComponent.\n * Except for the directives which are used for templating the calendar itself\n * you should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    Output,\n    TemplateRef,\n    ElementRef,\n    AfterViewInit,\n    OnDestroy,\n    NgZone\n} from '@angular/core';\nimport { fromEvent, Subject, interval } from 'rxjs';\nimport { takeUntil, debounce, tap } from 'rxjs/operators';\nimport { KEYS } from '../core/utils';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarYear]'\n})\nexport class IgxCalendarYearDirective {\n\n    @Input('igxCalendarYear')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Output()\n    public onYearSelection = new EventEmitter<Date>();\n\n    @HostBinding('class.igx-calendar__year')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentYear;\n    }\n\n    @HostBinding('class.igx-calendar__year--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentYear;\n    }\n\n    public get isCurrentYear(): boolean {\n        return this.date.getFullYear() === this.value.getFullYear();\n    }\n\n    @HostListener('click')\n    public onClick() {\n        this.onYearSelection.emit(this.value);\n    }\n}\n\n@Directive({\n    selector: '[igxCalendarMonth]'\n})\nexport class IgxCalendarMonthDirective {\n\n    @Input('igxCalendarMonth')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Input()\n    public index;\n\n    @Output()\n    public onMonthSelection = new EventEmitter<Date>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__month')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentMonth;\n    }\n\n    @HostBinding('class.igx-calendar__month--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentMonth;\n    }\n\n    public get isCurrentMonth(): boolean {\n        return this.date.getMonth() === this.value.getMonth();\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    constructor(public elementRef: ElementRef) {}\n\n    @HostListener('click')\n    public onClick() {\n        const date = new Date(this.value.getFullYear(), this.value.getMonth(), this.date.getDate());\n        this.onMonthSelection.emit(date);\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarHeader]'\n})\nexport class IgxCalendarHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarSubheader]'\n})\nexport class IgxCalendarSubheaderTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarScrollMonth]'\n})\nexport class IgxCalendarScrollMonthDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * A callback function to be invoked when month increment/decrement starts.\n     * @hidden\n     */\n    @Input()\n    public startScroll: (keydown?: boolean) => {};\n\n    /**\n     * A callback function to be invoked when month increment/decrement stops.\n     * @hidden\n     */\n    @Input()\n    public stopScroll: (event: any) => {};\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private element: ElementRef, private zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n\n        fromEvent(this.element.nativeElement, 'keyup').pipe(\n            debounce(() => interval(100)),\n            takeUntil(this.destroy$)\n        ).subscribe((event: KeyboardEvent) => {\n            this.stopScroll(event);\n        });\n\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'keydown').pipe(\n                tap((event: KeyboardEvent) => {\n                    if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                    }\n                }),\n                debounce(() => interval(100)),\n                takeUntil(this.destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                    this.zone.run(() => this.startScroll(true));\n                }\n            });\n        });\n\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown')\n    public onMouseDown() {\n        this.startScroll();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseup', ['$event'])\n    public onMouseUp(event: MouseEvent) {\n        this.stopScroll(event);\n    }\n}\n","import { Input, Output, EventEmitter } from '@angular/core';\nimport { WEEKDAYS, Calendar, isDateInRanges, IFormattingOptions, IFormattingViews } from './calendar';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DateRangeDescriptor } from '../core/dates';\nimport { Subject } from 'rxjs';\n\n/**\n * Sets the selction type - single, multi or range.\n */\nexport enum CalendarSelection {\n    SINGLE = 'single',\n    MULTI = 'multi',\n    RANGE = 'range'\n}\n\nexport enum ScrollMonth {\n    PREV = 'prev',\n    NEXT = 'next',\n    NONE = 'none'\n}\n\nexport class IgxCalendarBase implements ControlValueAccessor {\n    /**\n     * Gets the start day of the week.\n     * Can return a numeric or an enum representation of the week day.\n     * Defaults to `Sunday` / `0`.\n     */\n    @Input()\n    public get weekStart(): WEEKDAYS | number {\n        return this.calendarModel.firstWeekDay;\n    }\n\n    /**\n     * Sets the start day of the week.\n     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.\n     */\n    public set weekStart(value: WEEKDAYS | number) {\n        this.calendarModel.firstWeekDay = value;\n    }\n\n    /**\n     * Gets the `locale` of the calendar.\n     * Default value is `\"en\"`.\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the calendar.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initFormatters();\n    }\n\n    /**\n     * Gets the date format options of the days view.\n     */\n    @Input()\n    public get formatOptions(): IFormattingOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Sets the date format options of the days view.\n     * Default is { day: 'numeric', month: 'short', weekday: 'short', year: 'numeric' }\n     */\n    public set formatOptions(formatOptions: IFormattingOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n        this.initFormatters();\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    @Input()\n    public get formatViews(): IFormattingViews {\n        return this._formatViews;\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    public set formatViews(formatViews: IFormattingViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     *\n     * Gets the selection type.\n     * Default value is `\"single\"`.\n     * Changing the type of selection resets the currently\n     * selected values if any.\n     */\n    @Input()\n    public get selection(): string {\n        return this._selection;\n    }\n\n    /**\n     * Sets the selection.\n     */\n    public set selection(value: string) {\n        switch (value) {\n            case CalendarSelection.SINGLE:\n                this.selectedDates = null;\n                break;\n            case CalendarSelection.MULTI:\n            case CalendarSelection.RANGE:\n                this.selectedDates = [];\n                break;\n            default:\n                throw new Error('Invalid selection value');\n        }\n        this._onChangeCallback(this.selectedDates);\n        this.rangeStarted = false;\n        this._selection = value;\n    }\n\n    /**\n     * Gets the selected date(s).\n     *\n     * When selection is set to `single`, it returns\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    @Input()\n    public get value(): Date | Date[] {\n        return this.selectedDates;\n    }\n\n    /**\n     * Sets the selected date(s).\n     *\n     * When selection is set to `single`, it accepts\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    public set value(value: Date | Date[]) {\n        this.selectDate(value);\n    }\n\n    /**\n     * Gets the date that is presented.\n     * By default it is the current date.\n     */\n    @Input()\n    public get viewDate(): Date {\n        return this._viewDate;\n    }\n\n    /**\n     * Sets the date that will be presented in the default view when the component renders.\n     */\n    public set viewDate(value: Date) {\n        this._viewDate = this.getDateOnly(value);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n     * Emits an event when a date is selected.\n     * Provides reference the `selectedDates` property.\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date | Date[]>();\n\n    /**\n     *@hidden\n     */\n    private _selection: CalendarSelection | string = CalendarSelection.SINGLE;\n\n    /**\n     *@hidden\n     */\n    private rangeStarted = false;\n\n    /**\n    *@hidden\n    */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _viewDate: Date;\n\n    /**\n     *@hidden\n     */\n    private _disabledDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _specialDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _formatOptions: IFormattingOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n\n    /**\n     *@hidden\n     */\n    private _formatViews: IFormattingViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n\n    /**\n     *@hidden\n     */\n    protected formatterWeekday;\n\n    /**\n     *@hidden\n     */\n    protected formatterDay;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonth;\n\n    /**\n     *@hidden\n     */\n    protected formatterYear;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonthday;\n\n    /**\n     *@hidden\n     */\n    public calendarModel: Calendar;\n\n    /**\n     * @hidden\n     */\n    public monthScrollDirection = ScrollMonth.NONE;\n\n    /**\n     *@hidden\n     */\n    public scrollMonth$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public stopMonthScroll$ = new Subject<boolean>();\n\n    /**\n     *@hidden\n     */\n    public startMonthScroll$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public selectedDates;\n\n    /**\n     *@hidden\n     */\n    protected _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    protected _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n     */\n    constructor() {\n        this.calendarModel = new Calendar();\n\n        this.viewDate = this.viewDate ? this.viewDate : new Date();\n\n        this.calendarModel.firstWeekDay = this.weekStart;\n        this.initFormatters();\n    }\n\n    /**\n     *@hidden\n     */\n    private getDateOnlyInMs(date: Date) {\n        return this.getDateOnly(date).getTime();\n    }\n\n    /**\n     *@hidden\n     */\n    private generateDateRange(start: Date, end: Date): Date[] {\n        const result = [];\n        start = this.getDateOnly(start);\n        end = this.getDateOnly(end);\n        while (start.getTime() !== end.getTime()) {\n            start = this.calendarModel.timedelta(start, 'day', 1);\n            result.push(start);\n        }\n\n        return result;\n    }\n\n    /**\n     * Performs a single selection.\n     * @hidden\n     */\n    private selectSingle(value: Date) {\n        this.selectedDates = this.getDateOnly(value);\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a multiple selection\n     * @hidden\n     */\n    private selectMultiple(value: Date | Date[]) {\n        if (Array.isArray(value)) {\n            this.selectedDates = this.selectedDates.concat(value.map(v => this.getDateOnly(v)));\n        } else {\n            const valueDateOnly = this.getDateOnly(value);\n            const newSelection = [];\n            if (this.selectedDates.every((date: Date) => date.getTime() !== valueDateOnly.getTime())) {\n                newSelection.push(valueDateOnly);\n            } else {\n                this.selectedDates = this.selectedDates.filter(\n                    (date: Date) => date.getTime() !== valueDateOnly.getTime()\n                );\n            }\n\n            if (newSelection.length > 0) {\n                this.selectedDates = this.selectedDates.concat(newSelection);\n            }\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     *@hidden\n     */\n    private selectRange(value: Date | Date[], excludeDisabledDates: boolean = false) {\n        let start: Date;\n        let end: Date;\n\n        if (Array.isArray(value)) {\n            // this.rangeStarted = false;\n            value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n            start = this.getDateOnly(value[0]);\n            end = this.getDateOnly(value[value.length - 1]);\n            this.selectedDates = [start, ...this.generateDateRange(start, end)];\n        } else {\n            if (!this.rangeStarted) {\n                this.rangeStarted = true;\n                this.selectedDates = [value];\n            } else {\n                this.rangeStarted = false;\n\n                if (this.selectedDates[0].getTime() === value.getTime()) {\n                    this.selectedDates = [];\n                    this._onChangeCallback(this.selectedDates);\n                    return;\n                }\n\n                this.selectedDates.push(value);\n                this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n\n                start = this.selectedDates.shift();\n                end = this.selectedDates.pop();\n                this.selectedDates = [start, ...this.generateDateRange(start, end)];\n            }\n        }\n\n        if (excludeDisabledDates) {\n            this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a single deselection.\n     * @hidden\n     */\n    private deselectSingle(value: Date) {\n        if (this.selectedDates !== null &&\n            this.getDateOnlyInMs(value as Date) === this.getDateOnlyInMs(this.selectedDates)) {\n            this.selectedDates = null;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a multiple deselection.\n     * @hidden\n     */\n    private deselectMultiple(value: Date[]) {\n        value = value.filter(v => v !== null);\n        const selectedDatesCount = this.selectedDates.length;\n        const datesInMsToDeselect: Set<number> = new Set<number>(\n            value.map(v => this.getDateOnlyInMs(v)));\n\n        for (let i = this.selectedDates.length - 1; i >= 0; i--) {\n            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {\n                this.selectedDates.splice(i, 1);\n            }\n        }\n\n        if (this.selectedDates.length !== selectedDatesCount) {\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a range deselection.\n     * @hidden\n     */\n    private deselectRange(value: Date[]) {\n        value = value.filter(v => v !== null);\n        if (value.length < 1) {\n            return;\n        }\n\n        value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const valueStart = this.getDateOnlyInMs(value[0]);\n        const valueEnd = this.getDateOnlyInMs(value[value.length - 1]);\n\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);\n        const selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);\n\n        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {\n            this.selectedDates = [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected initFormatters() {\n        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });\n        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });\n        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });\n        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });\n        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });\n    }\n\n    /**\n     *@hidden\n     */\n    protected getDateOnly(date: Date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date | Date[]) {\n        this.selectedDates = value;\n    }\n\n    /**\n     * Checks whether a date is disabled.\n     * @hidden\n     */\n    public isDateDisabled(date: Date) {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(date, this.disabledDates);\n    }\n\n    /**\n     * Selects date(s) (based on the selection type).\n     */\n    public selectDate(value: Date | Date[]) {\n        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {\n            return new Date();\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                this.selectSingle(value as Date);\n                break;\n            case CalendarSelection.MULTI:\n                this.selectMultiple(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     */\n    public deselectDate(value?: Date | Date[]) {\n        if (this.selectedDates === null || this.selectedDates === []) {\n            return;\n        }\n\n        if (value === null || value === undefined) {\n            this.selectedDates = this.selection === CalendarSelection.SINGLE ? null : [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                this.deselectSingle(value as Date);\n                break;\n            case CalendarSelection.MULTI:\n                this.deselectMultiple(value as Date[]);\n                break;\n            case CalendarSelection.RANGE:\n                this.deselectRange(value as Date[]);\n                break;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDateFromClient(value: Date) {\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n            case CalendarSelection.MULTI:\n                if (!this.isDateDisabled(value)) {\n                    this.selectDate(value);\n                }\n\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n}\n","import { IgxCalendarBase } from './calendar-base';\nimport { ViewChild, ElementRef, HostBinding } from '@angular/core';\nimport { KEYS } from '../core/utils';\n\n/**\n * Sets the calender view - days, months or years.\n */\nexport enum CalendarView {\n    DEFAULT,\n    YEAR,\n    DECADE\n}\nexport class IgxMonthPickerBase extends IgxCalendarBase {\n\n    /**\n     * @hidden\n     */\n    @ViewChild('yearsBtn')\n    public yearsBtn: ElementRef;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Gets the current active view.\n     */\n    public get activeView(): CalendarView {\n        return this._activeView;\n    }\n\n    /**\n     * Sets the current active view.\n     */\n    public set activeView(val: CalendarView) {\n        this._activeView = val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDefaultView(): boolean {\n        return this._activeView === CalendarView.DEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDecadeView(): boolean {\n        return this._activeView === CalendarView.DECADE;\n    }\n\n    /**\n     *@hidden\n     */\n    private _activeView = CalendarView.DEFAULT;\n\n    /**\n     * @hidden\n     */\n    public changeYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), this.viewDate.getMonth());\n        this._activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            this.yearsBtn.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade(): void {\n        this._activeView = CalendarView.DECADE;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewDecade();\n        }\n    }\n\n    /**\n     * Returns the locale representation of the year in the year view if enabled,\n     * otherwise returns the default `Date.getFullYear()` value.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatViews.year) {\n            return this.formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostBinding,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { Calendar } from '../calendar';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxCalendarMonthDirective } from '../calendar.directives';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMonthsViewComponent, multi: true }],\n    selector: 'igx-months-view',\n    templateUrl: 'months-view.component.html'\n})\nexport class IgxMonthsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the months view.\n     * If not set, the `id` will have value `\"igx-months-view-0\"`.\n     * ```html\n     * <igx-months-view id=\"my-months-view\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let monthsViewId =  this.monthsView.id;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-months-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the months view.\n     * By default it is the current date.\n     * ```html\n     * <igx-months-view [date]=\"myDate\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let date =  this.monthsView.date;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the month format option of the months view.\n     * ```typescript\n     * let monthFormat = this.monthsView.monthFormat.\n     * ```\n     */\n    @Input()\n    public get monthFormat(): string {\n        return this._monthFormat;\n    }\n\n    /**\n     * Sets the month format option of the months view.\n     * ```html\n     * <igx-months-view> [monthFormat] = \"short'\"</igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set monthFormat(value: string) {\n        this._monthFormat = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the months view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.monthsView.locale;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the months view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-months-view [locale]=\"de\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and monthFormat, if any.\n     */\n    @Input()\n    public formatView = true;\n\n    /**\n     * Emits an event when a selection is made in the months view.\n     * Provides reference the `date` property in the `IgxMonthsViewComponent`.\n     * ```html\n     * <igx-months-view (onSelection)=\"onSelection($event)\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxCalendarMonthDirective, { read: IgxCalendarMonthDirective })\n    public dates: QueryList<IgxCalendarMonthDirective>;\n\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to\n     * properly render the month names.\n     *\n     * Used in the template of the component\n     *\n     * @hidden\n     */\n    get months(): Date[] {\n        let start = new Date(this.date.getFullYear(), 0, 1);\n        const result = [];\n\n        for (let i = 0; i < 12; i++) {\n            result.push(start);\n            start = this._calendarModel.timedelta(start, 'month', 1);\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterMonth: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _monthFormat = 'short';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initMonthFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the month in the months view.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatView) {\n            return this._formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectMonth(event) {\n        this.onSelection.emit(event);\n\n        this.date = event;\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public monthTracker(index, item): string {\n        return `${item.getMonth()}}`;\n    }\n\n    /**\n     *@hidden\n     */\n    private initMonthFormatter() {\n        this._formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this.monthFormat });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.dates.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) - 1; index >= 0; index--) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            if (nodeRect.top !== nextNodeRect.top && nodeRect.left === nextNodeRect.left) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.dates.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) + 1; index < months.length; index++) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            if (nodeRect.top !== nextNodeRect.top && nodeRect.left === nextNodeRect.left) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.dates.toArray();\n        if (months.indexOf(node) + 1 < months.length) {\n            const month = months[months.indexOf(node) + 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.dates.toArray();\n        if (months.indexOf(node) - 1 >= 0) {\n            const month = months[months.indexOf(node) - 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const month = this.dates.toArray()[0];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const months = this.dates.toArray();\n        const month = months[months.length - 1];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event) {\n        const value = this.dates.find((date) => date.nativeElement === event.target).value;\n        this.date = new Date(value.getFullYear(), value.getMonth(), this.date.getDate());\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n}\n","import { Component, Output, EventEmitter, Input, HostBinding, HostListener, ElementRef, Injectable} from '@angular/core';\nimport { range, Calendar } from '../calendar';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\nlet NEXT_ID = 0;\n\n@Injectable()\nexport class CalendarHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxYearsViewComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: CalendarHammerConfig\n        }\n    ],\n    selector: 'igx-years-view',\n    templateUrl: 'years-view.component.html'\n})\nexport class IgxYearsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the years view.\n     * If not set, the `id` will have value `\"igx-years-view-0\"`.\n     * ```html\n     * <igx-years-view id = \"my-years-view\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let yearsViewId =  this.yearsView.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-years-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the years view.\n     * By default it is the current date.\n     * ```html\n     * <igx-years-view [date]=\"myDate\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let date =  this.yearsView.date;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the year format option of the years view.\n     * ```typescript\n     * let yearFormat = this.yearsView.yearFormat.\n     * ```\n     */\n    @Input()\n    public get yearFormat(): string {\n        return this._yearFormat;\n    }\n\n    /**\n     * Sets the year format option of the years view.\n     * ```html\n     * <igx-years-view [yearFormat]=\"numeric\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set yearFormat(value: string) {\n        this._yearFormat = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the years view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.yearsView.locale;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the years view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-years-view [locale]=\"de\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and yearFormat, if any.\n     */\n    @Input()\n    public formatView: boolean;\n\n    /**\n     * Emits an event when a selection is made in the years view.\n     * Provides reference the `date` property in the `IgxYearsViewComponent`.\n     * ```html\n     * <igx-years-view (onSelection)=\"onSelection($event)\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to properly\n     * render the years.\n     *\n     * Used in the template of the component.\n     *\n     * @hidden\n     */\n    get decade(): number[] {\n        const result = [];\n        const start = this.date.getFullYear() - 3;\n        const end = this.date.getFullYear() + 4;\n\n        for (const year of range(start, end)) {\n            result.push(new Date(year, this.date.getMonth(), this.date.getDate()));\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterYear: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _yearFormat = 'numeric';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initYearFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the year in the years view.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatView) {\n            return this._formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectYear(event) {\n        this.date = event;\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    public scroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const delta = event.deltaY < 0 ? -1 : 1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     *@hidden\n     */\n    public pan(event) {\n        const delta = event.deltaY < 0 ? 1 : -1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public yearTracker(index, item): string {\n        return `${item.getFullYear()}}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(-1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter')\n    public onKeydownEnter() {\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    private initYearFormatter() {\n        this._formatterYear = new Intl.DateTimeFormat(this._locale, { year: this.yearFormat });\n    }\n\n    /**\n     *@hidden\n     */\n    private generateYearRange(delta: number) {\n        const currentYear = new Date().getFullYear();\n\n        if ((delta > 0 && this.date.getFullYear() - currentYear >= 95) ||\n            (delta < 0 && currentYear - this.date.getFullYear() >= 95)) {\n            return;\n        }\n        this.date = this._calendarModel.timedelta(this.date, 'year', delta);\n    }\n}\n","import { Component, Input, Output, EventEmitter, HostBinding, ElementRef, HostListener } from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../calendar';\nimport { DateRangeDescriptor } from '../../core/dates';\nimport { CalendarSelection } from '../calendar-base';\n\n/**\n *@hidden\n*/\n@Component({\n    selector: 'igx-day-item',\n    templateUrl: 'day-item.component.html'\n})\nexport class IgxDayItemComponent {\n    @Input()\n    public date: ICalendarDate;\n\n    @Input()\n    public selection: string;\n\n    @Input()\n    public value: Date | Date[];\n\n    @Input()\n    public disabledDates: DateRangeDescriptor[];\n\n    @Input()\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    @Input()\n    public specialDates: DateRangeDescriptor[];\n\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    public get selected(): boolean {\n        const date = this.date.date;\n\n        if (!this.value) {\n            return;\n        }\n\n        if (this.selection === CalendarSelection.SINGLE) {\n        this._selected = (this.value as Date).getTime() === date.getTime();\n        } else {\n        this._selected = (this.value as Date[])\n            .some((each) => each.getTime() === date.getTime());\n        }\n\n        return this._selected;\n    }\n\n    public set selected(value: boolean) {\n        this._selected = value;\n    }\n\n    public get isCurrentMonth(): boolean {\n        return this.date.isCurrentMonth;\n    }\n\n    public get isPreviousMonth(): boolean {\n        return this.date.isPrevMonth;\n    }\n\n    public get isNextMonth(): boolean {\n        return this.date.isNextMonth;\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    public get isInactive(): boolean {\n        return this.date.isNextMonth || this.date.isPrevMonth;\n    }\n\n    public get isToday(): boolean {\n        const today = new Date(Date.now());\n        const date = this.date.date;\n        return (date.getFullYear() === today.getFullYear() &&\n            date.getMonth() === today.getMonth() &&\n            date.getDate() === today.getDate()\n        );\n    }\n\n    public get isWeekend(): boolean {\n        const day = this.date.date.getDay();\n        return day === 0 || day === 6;\n    }\n\n    public get isDisabled(): boolean {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.disabledDates);\n    }\n\n    public get isOutOfRange(): boolean {\n        if (!this.outOfRangeDates) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.outOfRangeDates);\n    }\n\n    public get isSpecial(): boolean {\n        if (this.specialDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.specialDates);\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__date')\n    public get defaultCSS(): boolean {\n        return this.date.isCurrentMonth && !(this.isWeekend && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--inactive')\n    public get isInactiveCSS(): boolean {\n        return this.isInactive;\n    }\n\n    @HostBinding('class.igx-calendar__date--current')\n    public get isTodayCSS(): boolean {\n        return this.isToday && !this.selected;\n    }\n\n    @HostBinding('class.igx-calendar__date--selected')\n    public get isSelectedCSS(): boolean {\n        return this.selected;\n    }\n\n    @HostBinding('class.igx-calendar__date--weekend')\n    public get isWeekendCSS(): boolean {\n        return this.isWeekend;\n    }\n\n    @HostBinding('class.igx-calendar__date--disabled')\n    public get isDisabledCSS(): boolean {\n        return this.isDisabled || this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--special')\n    public get isSpecialCSS(): boolean {\n        return this.isSpecial;\n    }\n\n    private _selected = false;\n\n    constructor(private elementRef: ElementRef) { }\n\n    @HostListener('click')\n    @HostListener('keydown.enter')\n    public onSelect() {\n        this.onDateSelection.emit(this.date);\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    DoCheck\n} from '@angular/core';\nimport { ICalendarDate } from '../../calendar';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { slideInLeft, slideInRight } from '../../animations/main';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { DateRangeDescriptor, DateRangeType } from '../../core/dates';\nimport { IgxCalendarBase, ScrollMonth } from '../calendar-base';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDaysViewComponent\n        }\n    ],\n    animations: [\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-days-view',\n    templateUrl: 'days-view.component.html'\n})\nexport class IgxDaysViewComponent extends IgxCalendarBase implements DoCheck {\n    /**\n     * Sets/gets the `id` of the days view.\n     * If not set, the `id` will have value `\"igx-days-view-0\"`.\n     * ```html\n     * <igx-days-view id=\"my-days-view\"></igx-days-view>\n     * ```\n     * ```typescript\n     * let daysViewId =  this.daysView.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-days-view-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public animationAction: any = '';\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public changeDaysView = false;\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onViewChanged = new EventEmitter<Date>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxDayItemComponent, { read: IgxDayItemComponent })\n    public dates: QueryList<IgxDayItemComponent>;\n\n    /**\n     * @hidden\n     */\n    public nextDate: Date;\n\n    /**\n     * @hidden\n     */\n    public callback: (dates?, next?) => void;\n\n    /**\n     * @hidden\n     */\n    public isKeydownTrigger = false;\n\n    /**\n     * @hidden\n     */\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    public get getCalendarMonth(): ICalendarDate[][] {\n        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        if (!this.changeDaysView && this.dates) {\n            this.disableOutOfRangeDates();\n        }\n    }\n\n    /**\n     * Returns the locale representation of the date in the days view.\n     *\n     * @hidden\n     */\n    public formattedDate(value: Date): string {\n        if (this.formatViews.day) {\n            return this.formatterDay.format(value);\n        }\n        return `${value.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public generateWeekHeader(): string[] {\n        const dayNames = [];\n        const rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];\n        for (const day of rv) {\n            dayNames.push(this.formatterWeekday.format(day.date));\n        }\n\n        return dayNames;\n    }\n\n    /**\n     * @hidden\n     */\n    public rowTracker(index, item): string {\n        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public dateTracker(index, item): string {\n        return `${item.date.getMonth()}--${item.date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentMonth(value: Date): boolean {\n        return this.viewDate.getMonth() === value.getMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentYear(value: Date): boolean {\n        return this.viewDate.getFullYear() === value.getFullYear();\n    }\n\n    /**\n     *@hidden\n     */\n    public focusActiveDate() {\n        let date = this.dates.find((d) => d.selected);\n\n        if (!date) {\n            date = this.dates.find((d) => d.isToday);\n        }\n\n        if (date) {\n            date.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDay(event) {\n        this.selectDateFromClient(event.date);\n        this.onDateSelection.emit(event);\n\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public animationDone(event, isLast: boolean) {\n        if (isLast) {\n            if (this.monthScrollDirection !== ScrollMonth.NONE) {\n                this.scrollMonth$.next();\n            }\n\n            const date = this.dates.find((d) => d.selected);\n            if (date && !this.isKeydownTrigger) {\n                setTimeout(() => {\n                    date.nativeElement.focus();\n                }, parseInt(slideInRight.options.params.duration, 10));\n            } else if (this.callback && (event.toState === 'next' || event.toState === 'prev')) {\n                this.callback(this.dates, this.nextDate);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusPreviousUpDate(target, prevView = false) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index - 7 > -1; index -= 7) {\n            const date = prevView ? dates[index] : dates[index - 7];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) - 7 < 0) {\n            const dayItem = dates[dates.indexOf(node)];\n            this.nextDate = new Date(dayItem.date.date);\n\n            this.nextDate.setDate(this.nextDate.getDate() - 7);\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'prev';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusPreviousUpDate(day.nativeElement, true);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusNextDownDate(target, nextView = false) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index + 7 < this.dates.length; index += 7) {\n            const date = nextView ? dates[index] : dates[index + 7];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) + 7 > this.dates.length - 1) {\n            const dayItem = dates[dates.indexOf(node)];\n            this.nextDate = new Date(dayItem.date.date);\n\n            this.nextDate.setDate(this.nextDate.getDate() + 7);\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'next';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusNextDownDate(day.nativeElement, true);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusPreviousDate(target) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index > 0; index--) {\n            const date = dates[index - 1];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) === 0) {\n            const dayItem = dates[0];\n            if (dayItem.isCurrentMonth) {\n                this.nextDate = this.calendarModel.timedelta(dayItem.date.date, 'day', -1);\n            } else {\n                this.nextDate = new Date(dayItem.date.date);\n            }\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'prev';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusPreviousDate(day.nativeElement);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusNextDate(target) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n\n        for (let index = dates.indexOf(node); index < this.dates.length - 1; index++) {\n            const date = dates[index + 1];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) === this.dates.length - 1) {\n            const dayItem = dates[this.dates.length - 1];\n            this.nextDate = new Date(dayItem.date.date);\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'next';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusNextDate(day.nativeElement);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private disableOutOfRangeDates() {\n        const dateRange = [];\n        this.dates.toArray().forEach((date) => {\n            if (!date.isCurrentMonth) {\n                dateRange.push(date.date.date);\n            }\n        });\n\n        this.outOfRangeDates = [{\n            type: DateRangeType.Specific,\n            dateRange: dateRange\n        }];\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusPreviousUpDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusNextDownDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusPreviousDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusNextDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const dates = this.dates.filter(d => d.isCurrentMonth);\n        for (let i = 0; i < dates.length; i++) {\n            if (!dates[i].isDisabled) {\n                dates[i].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const dates = this.dates.filter(d => d.isCurrentMonth);\n        for (let i = dates.length - 1; i >= 0; i--) {\n            if (!dates[i].isDisabled) {\n                dates[i].nativeElement.focus();\n                break;\n            }\n        }\n    }\n}\n","import { transition, trigger, useAnimation } from '@angular/animations';\nimport {\n    Component,\n    ContentChild,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    ElementRef,\n    AfterViewInit\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { fadeIn, scaleInCenter } from '../animations/main';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarSubheaderTemplateDirective\n} from './calendar.directives';\nimport { KEYS } from '../core/utils';\nimport { ICalendarDate, monthRange } from './calendar';\nimport { CalendarView, IgxMonthPickerBase } from './month-picker-base';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { interval } from 'rxjs';\nimport { takeUntil, debounce, skipLast, switchMap } from 'rxjs/operators';\nimport { ScrollMonth } from './calendar-base';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Calendar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/calendar.html)\n *\n * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple\n * or range selection.\n *\n * Example:\n * ```html\n * <igx-calendar selection=\"range\"></igx-calendar>\n * ```\n */\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxCalendarComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-calendar',\n    templateUrl: 'calendar.component.html'\n})\nexport class IgxCalendarComponent extends IgxMonthPickerBase implements AfterViewInit {\n    /**\n     * Sets/gets the `id` of the calendar.\n     * If not set, the `id` will have value `\"igx-calendar-0\"`.\n     * ```html\n     * <igx-calendar id = \"my-first-calendar\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let calendarId =  this.calendar.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-calendar-${NEXT_ID++}`;\n\n    @Input()\n    public hasHeader = true;\n\n    /**\n     * Sets/gets whether the calendar header will be in vertical position.\n     * Default value is `false`.\n     * ```html\n     * <igx-calendar [vertical] = \"true\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let isVertical = this.calendar.vertical;\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * The default aria role attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'grid';\n\n    /**\n     * The default aria lebelled by attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy = 'calendar';\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar--vertical')\n    get styleVerticalClass(): boolean {\n        return this.vertical;\n    }\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('monthsBtn')\n    public monthsBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', {read: IgxDaysViewComponent})\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('prevMonthBtn')\n    public prevMonthBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('nextMonthBtn')\n    public nextMonthBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    get isYearView(): boolean {\n        return this.activeView === CalendarView.YEAR;\n    }\n\n    /**\n     * @hidden\n     */\n    get monthAction(): string {\n        return this._monthAction;\n    }\n    /**\n     * @hidden\n     */\n    set monthAction(val: string) {\n        this._monthAction = val;\n    }\n\n    /**\n     * Gets the header template.\n     * ```typescript\n     * let headerTemplate =  this.calendar.headerTeamplate;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    get headerTemplate(): any {\n        if (this.headerTemplateDirective) {\n            return this.headerTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the header template.\n     * ```html\n     * <igx-calendar headerTemplateDirective = \"igxCalendarHeader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set headerTemplate(directive: any) {\n        this.headerTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the subheader template.\n     * ```typescript\n     * let subheaderTemplate = this.calendar.subheaderTemplate;\n     * ```\n     */\n    get subheaderTemplate(): any {\n        if (this.subheaderTemplateDirective) {\n            return this.subheaderTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the subheader template.\n     * ```html\n     * <igx-calendar subheaderTemplate = \"igxCalendarSubheader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set subheaderTemplate(directive: any) {\n        this.subheaderTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the context for the template marked with the `igxCalendarHeader` directive.\n     * ```typescript\n     * let headerContext =  this.calendar.headerContext;\n     * ```\n     */\n    get headerContext() {\n        const date: Date = this.headerDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n     * or `igxCalendarSubHeaderYear` directive.\n     * ```typescript\n     * let context =  this.calendar.context;\n     * ```\n     */\n    get context() {\n        const date: Date = this.viewDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * @hidden\n     */\n    get headerDate(): Date {\n        return this.selectedDates ? this.selectedDates : new Date();\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxCalendarHeaderTemplateDirective), { read: IgxCalendarHeaderTemplateDirective })\n    private headerTemplateDirective: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:max-line-length\n    @ContentChild(forwardRef(() => IgxCalendarSubheaderTemplateDirective), { read: IgxCalendarSubheaderTemplateDirective })\n    private subheaderTemplateDirective: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    private _monthAction = '';\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n\n        this.startMonthScroll$.pipe(\n            takeUntil(this.stopMonthScroll$),\n            switchMap(() => this.daysView.scrollMonth$.pipe(\n                skipLast(1),\n                debounce(() => interval(300)),\n                takeUntil(this.stopMonthScroll$)\n            ))).subscribe(() => {\n                switch (this.daysView.monthScrollDirection) {\n                    case ScrollMonth.PREV:\n                        this.previousMonth();\n                        break;\n                    case ScrollMonth.NEXT:\n                        this.nextMonth();\n                        break;\n                    case ScrollMonth.NONE:\n                    default:\n                        break;\n                }\n        });\n    }\n\n    /**\n     * Returns the locale representation of the month in the month view if enabled,\n     * otherwise returns the default `Date.getMonth()` value.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatViews.month) {\n            return this.formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public previousMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'month', -1);\n        this._monthAction = 'prev';\n\n        if (this.daysView) {\n            this.daysView.isKeydownTrigger = isKeydownTrigger;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'month', 1);\n        this._monthAction = 'next';\n\n        if (this.daysView) {\n            this.daysView.isKeydownTrigger = isKeydownTrigger;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public startPrevMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.daysView.monthScrollDirection = ScrollMonth.PREV;\n\n        this.previousMonth(isKeydownTrigger);\n    }\n\n    /**\n     * @hidden\n     */\n    public startNextMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.daysView.monthScrollDirection = ScrollMonth.NEXT;\n\n        this.nextMonth(isKeydownTrigger);\n    }\n\n    /**\n     * @hidden\n     */\n    public stopMonthScroll = (event) => {\n        event.stopPropagation();\n\n        this.daysView.stopMonthScroll$.next(true);\n        this.daysView.stopMonthScroll$.complete();\n\n\n        if (this.daysView.monthScrollDirection === ScrollMonth.PREV) {\n            this.prevMonthBtn.nativeElement.focus();\n        } else if (this.daysView.monthScrollDirection === ScrollMonth.NEXT) {\n            this.nextMonthBtn.nativeElement.focus();\n        }\n\n        this.daysView.monthScrollDirection = ScrollMonth.NONE;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade() {\n        super.activeViewDecade();\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        super.activeViewDecadeKB(event);\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public getFormattedDate(): { weekday: string, monthday: string } {\n\n        const date = this.headerDate;\n\n        return {\n            monthday: this.formatterMonthday.format(date),\n            weekday: this.formatterWeekday.format(date),\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public childClicked(instance: ICalendarDate) {\n        if (instance.isPrevMonth) {\n            this.previousMonth();\n        }\n\n        if (instance.isNextMonth) {\n            this.nextMonth();\n        }\n\n        this.selectDateFromClient(instance.date);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public viewChanged(event) {\n        this.viewDate = this.calendarModel.timedelta(event, 'month', 0);\n    }\n\n    /**\n     * @hidden\n     */\n    public changeMonth(event: Date) {\n        this.viewDate = new Date(this.viewDate.getFullYear(), event.getMonth());\n        this.activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            this.monthsBtn.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewYear(): void {\n        this.activeView = CalendarView.YEAR;\n        requestAnimationFrame(() => {\n            this.monthsView.dates.find((date) => date.isCurrentMonth).nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewYearKB(event): void {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewYear();\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     *```typescript\n     * this.calendar.deselectDate(new Date(`2018-06-12`));\n     *````\n     */\n    public deselectDate(value?: Date | Date[]) {\n        super.deselectDate(value);\n\n        this.daysView.selectedDates = this.selectedDates;\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            let year = this.daysView.nextDate.getFullYear();\n\n            let month = this.daysView.nextDate.getMonth() - 1;\n            if (month < 0) { month = 11; year -= 1; }\n\n            const range = monthRange(this.daysView.nextDate.getFullYear(), month);\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setMonth(month);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n\n        this.previousMonth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextMonth(true);\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            let year = this.daysView.nextDate.getFullYear();\n\n            let month = this.daysView.nextDate.getMonth() + 1;\n            if (month > 11) { month = 0; year += 1; }\n\n            const range = monthRange(this.daysView.nextDate.getFullYear(), month);\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setMonth(month);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.shift.pageup', ['$event'])\n    public onKeydownShiftPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n\n        this.daysView.animationAction = 'prev';\n        this.daysView.isKeydownTrigger = true;\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            const year = this.daysView.nextDate.getFullYear() - 1;\n\n            const range = monthRange(year, this.daysView.nextDate.getMonth());\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.shift.pagedown', ['$event'])\n    public onKeydownShiftPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n\n        this.daysView.animationAction = 'next';\n        this.daysView.isKeydownTrigger = true;\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            const year = this.daysView.nextDate.getFullYear() + 1;\n\n            const range = monthRange(year, this.daysView.nextDate.getMonth());\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownEnd(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:mouseup', ['$event'])\n    public onMouseUp(event: KeyboardEvent) {\n        if (this.daysView && this.daysView.monthScrollDirection !== ScrollMonth.NONE) {\n            this.stopMonthScroll(event);\n        }\n    }\n\n    /**\n     * Helper method building and returning the context object inside\n     * the calendar templates.\n     * @hidden\n     */\n    private generateContext(value: Date) {\n        const formatObject = {\n            monthView: () => this.activeViewYear(),\n            yearView: () => this.activeViewDecade(),\n            ...this.calendarModel.formatToParts(value, this.locale, this.formatOptions,\n                ['era', 'year', 'month', 'day', 'weekday'])\n        };\n        return { $implicit: formatObject };\n    }\n}\n","import {\n    Component,\n    HostListener,\n    ViewChild,\n    HostBinding,\n    Input\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../../animations/main';\nimport { KEYS } from '../../core/utils';\nimport { IgxMonthsViewComponent } from '../months-view/months-view.component';\nimport { IgxMonthPickerBase, CalendarView } from '../month-picker-base';\nimport { IgxYearsViewComponent } from '../years-view/years-view.component';\nimport { IgxDaysViewComponent } from '../days-view/days-view.component';\n\nlet NEXT_ID = 0;\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxMonthPickerComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-month-picker',\n    templateUrl: 'month-picker.component.html'\n})\nexport class IgxMonthPickerComponent extends IgxMonthPickerBase {\n    /**\n     * Sets/gets the `id` of the month picker.\n     * If not set, the `id` will have value `\"igx-month-picker-0\"`.\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-month-picker-${NEXT_ID++}`;\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', {read: IgxMonthsViewComponent})\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', {read: IgxDaysViewComponent})\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    public yearAction = '';\n\n    /**\n     * @hidden\n     */\n    public animationDone() {\n        this.yearAction = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        super.activeViewDecadeKB(event);\n\n        if (event.key === KEYS.RIGHT_ARROW || event.key === KEYS.RIGHT_ARROW_IE) {\n            event.preventDefault();\n            this.nextYear();\n        }\n\n        if (event.key === KEYS.LEFT_ARROW || event.key === KEYS.LEFT_ARROW_IE) {\n            event.preventDefault();\n            this.previousYear();\n        }\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) { this.dacadeView.el.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade() {\n        super.activeViewDecade();\n\n        requestAnimationFrame(() => {\n            this.dacadeView.el.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYear() {\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.nextYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYear() {\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.previousYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), event.getMonth(), event.getDate());\n        this.activeView = CalendarView.DEFAULT;\n\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n\n        requestAnimationFrame(() => {\n            this.yearsBtn.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public selectMonth(event: Date) {\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * Selects a date.\n     *```typescript\n     * this.monPicker.selectDate(new Date(`2018-06-12`));\n     *```\n     */\n    public selectDate(value: Date) {\n        if (!value) {\n            return new Date();\n        }\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        super.selectDate(value);\n        this.viewDate = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        if (value) {\n            this.viewDate = this.selectedDates = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownEnd(event);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxCalendarComponent } from './calendar.component';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarMonthDirective,\n    IgxCalendarSubheaderTemplateDirective,\n    IgxCalendarYearDirective,\n    IgxCalendarScrollMonthDirective\n} from './calendar.directives';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { IgxDayItemComponent } from './days-view/day-item.component';\nimport { IgxMonthPickerComponent } from './month-picker/month-picker.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxDayItemComponent,\n        IgxDaysViewComponent,\n        IgxCalendarComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective,\n        IgxCalendarScrollMonthDirective,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent\n    ],\n    exports: [\n        IgxCalendarComponent,\n        IgxDaysViewComponent,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective\n    ],\n    imports: [CommonModule, FormsModule, IgxIconModule]\n})\nexport class IgxCalendarModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    Directive,\n    HostBinding,\n    Optional,\n    Inject,\n    Input,\n    NgModule,\n    OnInit,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nlet NEXT_ID = 0;\n\n/**\n * IgxCardMedia is container for the card media section.\n * Use it to wrap images and videos.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-media'\n})\nexport class IgxCardMediaDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card__media')\n    public cssClass = 'igx-card__media';\n\n    /**\n     * An @Input property that sets the `width` and `min-width` style property\n     * of the media container. If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media width=\"300px\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.width')\n    @HostBinding('style.min-width')\n    @Input()\n    public width = 'auto';\n\n    /**\n     * An @Input property that sets the `height` style property of the media container.\n     * If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media height=\"50%\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.height')\n    @Input()\n    public height = 'auto';\n\n    /**\n     * An @Input property that sets the `role` attribute of the media container.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'img';\n}\n\n/**\n * IgxCardHeader is container for the card header\n */\n@Component({\n    selector: 'igx-card-header',\n    templateUrl: 'card-header.component.html'\n})\nexport class IgxCardHeaderComponent {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header')\n    public cssClass = 'igx-card-header';\n\n    /**\n     * An @Input property that sets the layout style of the header.\n     * By default the header elements(thumbnail and title/subtitle) are aligned horizontally.\n     * ```html\n     * <igx-card-header [vertical]=\"true\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('class.igx-card-header--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card header.\n     * By default the value is set to `header`.\n     * ```html\n     * <igx-card-header role=\"header\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'header';\n}\n\n/**\n * IgxCardThumbnail is container for the card thumbnail section.\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    selector: '[igxCardThumbnail]'\n})\nexport class IgxCardThumbnailDirective { }\n\n/**\n * igxCardHeaderTitle is used to denote the header title in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderTitle]'\n})\nexport class IgxCardHeaderTitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__title')\n    public cssClass = 'igx-card__header__title';\n}\n\n/**\n * igxCardHeaderSubtitle is used to denote the header subtitle in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderSubtitle]'\n})\nexport class IgxCardHeaderSubtitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__subtitle')\n    public cssClass = 'igx-card-header__subtitle';\n}\n/**\n * IgxCardContent is container for the card content.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-content'\n})\nexport class IgxCardContentDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-content')\n    public cssClass = 'igx-card-content';\n}\n\n/**\n * IgxCardFooter is container for the card footer\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-footer'\n})\nexport class IgxCardFooterDirective {\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card footer.\n     * By default the value is set to `footer`.\n     * ```html\n     * <igx-card-footer role=\"footer\"></igx-card-footer>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'footer';\n}\n\n/**\n * **Ignite UI for Angular Card** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/card.html)\n *\n * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way. There are\n * five sections in a card that you can use to organize your content. These are header, media, content, actions, and footer.\n *\n * Example:\n * ```html\n * <igx-card>\n *   <igx-card-header>\n *     <h3 igxCardHeaderTitle>{{title}}</h3>\n *     <h5 igxCardHeaderSubtitle>{{subtitle}}</h5>\n *   </igx-card-header>\n *   <igx-card-actions>\n *       <button igxButton igxRipple>Share</button>\n *       <button igxButton igxRipple>Play Album</button>\n *   </igx-card-actions>\n * </igx-card>\n * ```\n */\n\nexport enum IgxCardType {\n    DEFAULT = 'default',\n    OUTLINED = 'outlined'\n}\n\n@Component({\n    selector: 'igx-card',\n    templateUrl: 'card.component.html'\n})\nexport class IgxCardComponent {\n    /**\n     * Sets/gets the `id` of the card.\n     * If not set, `id` will have value `\"igx-card-0\"`;\n     * ```html\n     * <igx-card id = \"my-first-card\"></igx-card>\n     * ```\n     * ```typescript\n     * let cardId =  this.card.id;\n     * ```\n     * @memberof IgxCardComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-card-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card.\n     * By default the value is set to `group`.\n     * ```html\n     * <igx-card role=\"group\"></igx-card>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'group';\n\n    /**\n     * An @Input property that sets the value of the `type` attribute of the card.\n     * By default the value is set to `default`. You can make the card use the\n     * outlined style by setting the value to `outlined`.\n     * ```html\n     * <igx-card type=\"outlined\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card')\n    @Input()\n    public type: IgxCardType | string = IgxCardType.DEFAULT;\n\n    /**\n     * A getter which will return true if the card type is `outlined`.\n     */\n    @HostBinding('class.igx-card--outlined')\n    get isOutlinedCard() {\n        return this.type === IgxCardType.OUTLINED;\n    }\n\n    /**\n     * An @Input property that sets the value of the `horizontal` attribute of the card.\n     * Setting this to `true` will make the different card sections align horizontally,\n     * essentially flipping the card to the side.\n     * ```html\n     * <igx-card [horizontal]=\"true\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card--horizontal')\n    @Input()\n    public horizontal = false;\n}\n\nexport enum IgxCardActionsLayout {\n    DEFAULT = 'default',\n    JUSTIFY = 'justify',\n}\n\n/**\n * IgxCardActions is container for the card actions.\n */\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-actions',\n    templateUrl: 'card-actions.component.html'\n})\nexport class IgxCardActionsComponent implements OnInit, OnChanges {\n    private isVerticalSet = false;\n\n    constructor(@Optional() @Inject(IgxCardComponent) public card: IgxCardComponent) { }\n\n    /**\n     * An @Input property that sets the layout style of the actions.\n     * By default icons and icon buttons, as well as regular buttons\n     * are split into two containers, which are then positioned on both ends\n     * of the card-actions area.\n     * You can justify the elements in those groups so they are positioned equally\n     * from one another taking up all the space available along the card actions axis.\n     * ```html\n     * <igx-card-actions layout=\"justify\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions')\n    @Input()\n    public layout: IgxCardActionsLayout | string = 'default';\n\n    /**\n     * An @Input property that sets the vertical attribute of the actions.\n     * When set to `true` the actions will be layed out vertically.\n     */\n    @HostBinding('class.igx-card-actions--vertical')\n    @Input()\n    public vertical: boolean;\n\n    /**\n     * A getter that returns `true` when the layout has been\n     * set to `justify`.\n     */\n    @HostBinding('class.igx-card-actions--justify')\n    get isJustifyLayout() {\n        return this.layout === IgxCardActionsLayout.JUSTIFY;\n    }\n\n    /**\n     * An @Input property that sets order of the buttons the actions area.\n     * By default all icons/icon buttons are placed at the end of the action\n     * area. Any regular buttons(flat, raised) will appear before the icons/icon buttons\n     * placed in the actions area.\n     * If you want to reverse their positions so that icons appear first, use the `reverse`\n     * attribute.\n     * ```html\n     * <igx-card-actions [reverse]=\"true\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions--reverse')\n    @Input()\n    public reverse = false;\n\n    ngOnChanges(changes: SimpleChanges) {\n        for (const prop in changes) {\n            if (prop === 'vertical') {\n                this.isVerticalSet = true;\n            }\n        }\n    }\n\n    ngOnInit() {\n        this.vertical = !this.isVerticalSet && this.card.horizontal;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    exports: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    imports: [CommonModule, IgxButtonModule]\n})\nexport class IgxCardModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Direction { NONE, NEXT, PREV }\n\n/**\n * **Ignite UI for Angular Carousel** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/carousel.html)\n *\n * The Ignite UI Carousel is used to browse or navigate through a collection of slides. Slides can contain custom\n * content such as images or cards and be used for things such as on-boarding tutorials or page-based interfaces.\n * It can be used as a separate fullscreen element or inside another component.\n *\n * Example:\n * ```html\n * <igx-carousel>\n *   <igx-slide>\n *     <h3>First Slide Header</h3>\n *     <p>First slide Content</p>\n *   <igx-slide>\n *   <igx-slide>\n *     <h3>Second Slide Header</h3>\n *     <p>Second Slide Content</p>\n * </igx-carousel>\n * ```\n */\n@Component({\n    selector: 'igx-carousel',\n    templateUrl: 'carousel.component.html',\n    styles: [`\n    :host {\n        display: block;\n        outline-style: none;\n    }`]\n})\n\nexport class IgxCarouselComponent implements OnDestroy {\n    /**\n     * Returns the `role` attribute of the carousel.\n     * ```typescript\n     * let carouselRole =  this.carousel.role;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.role') public role = 'region';\n\n    /**\n     * Sets the `id` of the carousel.\n     * If not set, the `id` of the first carousel component will be `\"igx-carousel-0\"`.\n     * ```html\n     * <igx-carousel id=\"my-first-carousel\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-carousel-${NEXT_ID++}`;\n\n    /**\n     * Sets whether the carousel should `loop` back to the first slide after reaching the last slide.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [loop]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public loop = true;\n\n    /**\n     * Sets whether the carousel will `pause` the slide transitions on user interactions.\n     * Default value is `true`.\n     * ```html\n     *  <igx-carousel [pause]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public pause = true;\n\n    /**\n     * Returns the time `interval` in milliseconds before the slide changes.\n     * ```typescript\n     * let timeInterval = this.carousel.interval;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @Input()\n    get interval(): number {\n        return this._interval;\n    }\n\n    /**\n     * Sets the time `interval` in milliseconds before the slide changes.\n     * If not set, the carousel will not change `slides` automatically.\n     * ```html\n     * <igx-carousel [interval] = \"1000\"></carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    set interval(value: number) {\n        this._interval = +value;\n        this._restartInterval();\n    }\n    /**\n     * Returns the `tabIndex` of the carousel component.\n     * ```typescript\n     * let tabIndex =  this.carousel.tabIndex;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.tabindex')\n    get tabIndex() {\n        return 0;\n    }\n\n    /**\n     * Controls whether the carousel should render the left/right `navigation` buttons.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [navigation] = \"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public navigation = true;\n\n    /**\n     * An event that is emitted after a slide transition has happened.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideChanged)=\"onSlideChanged($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideChanged = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been added to the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideAdded)=\"onSlideAdded($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideAdded = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been removed from the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideRemoved)=\"onSlideRemoved($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideRemoved = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after the carousel has been paused.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPaused)=\"onCarouselPaused($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPaused = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * An event that is emitted after the carousel has resumed transitioning between `slides`.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPlaying)=\"onCarouselPlaying($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPlaying = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * The collection of `slides` currently in the carousel.\n     * ```typescript\n     * let slides: IgxSlideComponent[] = this.carousel.slides;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public slides: IgxSlideComponent[] = [];\n    private _interval: number;\n    private _lastInterval: any;\n    private _playing: boolean;\n    private _currentSlide: IgxSlideComponent;\n    private _destroyed: boolean;\n    private _total = 0;\n\n    constructor(private element: ElementRef) { }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this._destroyed = true;\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n        }\n    }\n    /**\n     * @hidden\n     * @memberof IgxCarouselComponent\n     */\n    public setAriaLabel(slide) {\n        return `Item ${slide.index + 1} of ${this.total}`;\n    }\n\n    /**\n     * Returns the total number of `slides` in the carousel.\n     * ```typescript\n     * let slideCount =  this.carousel.total;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get total(): number {\n        return this._total;\n    }\n\n    /**\n     * The index of the slide being currently shown.\n     * ```typescript\n     * let currentSlideNumber =  this.carousel.current;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get current(): number {\n        return !this._currentSlide ? 0 : this._currentSlide.index;\n    }\n\n    /**\n     * Returns a boolean indicating if the carousel is playing.\n     * ```typescript\n     * let isPlaying =  this.carousel.isPlaying;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isPlaying(): boolean {\n        return this._playing;\n    }\n\n    /**\n     * Returns Ð° boolean indicating if the carousel is destroyed.\n     * ```typescript\n     * let isDestroyed =  this.carousel.isDestroyed;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isDestroyed(): boolean {\n        return this._destroyed;\n    }\n    /**\n     * Returns a reference to the carousel element in the DOM.\n     * ```typescript\n     * let nativeElement =  this.carousel.nativeElement;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the slide corresponding to the provided `index` or null.\n     * ```typescript\n     * let slide1 =  this.carousel.get(1);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get(index: number): IgxSlideComponent {\n        for (const each of this.slides) {\n            if (each.index === index) {\n                return each;\n            }\n        }\n    }\n\n    /**\n     * Adds a new slide to the carousel.\n     * ```typescript\n     * this.carousel.add(newSlide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public add(slide: IgxSlideComponent) {\n        slide.index = this.total;\n        this.slides.push(slide);\n        this._total += 1;\n\n        if (this.total === 1 || slide.active) {\n            this.select(slide);\n            if (this.total === 1) {\n                this.play();\n            }\n        } else {\n            slide.active = false;\n        }\n\n        this.onSlideAdded.emit({ carousel: this, slide });\n    }\n\n    /**\n     * Removes a slide from the carousel.\n     * ```typescript\n     * this.carousel.remove(slide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public remove(slide: IgxSlideComponent) {\n        if (slide && slide === this.get(slide.index)) { // check if the requested slide for delete is present in the carousel\n            if (slide.index === this.current) {\n                slide.active = false;\n                this.next();\n            }\n\n            this.slides.splice(slide.index, 1);\n            this._total -= 1;\n\n            if (!this.total) {\n                this._currentSlide = null;\n                return;\n            }\n\n            for (let i = 0; i < this.total; i++) {\n                this.slides[i].index = i;\n            }\n\n            this.onSlideRemoved.emit({ carousel: this, slide });\n        }\n    }\n\n    /**\n     * Kicks in a transition for a given slide with a given `direction`.\n     * ```typescript\n     * this.carousel.select(this.carousel.get(2), Direction.NEXT);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public select(slide: IgxSlideComponent, direction: Direction = Direction.NONE) {\n        const newIndex = slide.index;\n        if (direction === Direction.NONE) {\n            direction = newIndex > this.current ? Direction.NEXT : Direction.PREV;\n        }\n\n        if (slide && slide !== this._currentSlide) {\n            this._moveTo(slide, direction);\n        }\n    }\n\n    /**\n     * Transitions to the next slide in the carousel.\n     * ```typescript\n     * this.carousel.next();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public next() {\n        const index = (this.current + 1) % this.total;\n\n        if (index === 0 && !this.loop) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.NEXT);\n    }\n\n    /**\n     * Transitions to the previous slide in the carousel.\n     * ```typescript\n     * this.carousel.prev();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public prev() {\n        const index = this.current - 1 < 0 ?\n            this.total - 1 : this.current - 1;\n\n        if (!this.loop && index === this.total - 1) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.PREV);\n    }\n\n    /**\n     * Resumes playing of the carousel if in paused state.\n     * No operation otherwise.\n     * ```typescript\n     * this.carousel.play();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public play() {\n        if (!this._playing) {\n            this._playing = true;\n            this.onCarouselPlaying.emit(this);\n            this._restartInterval();\n        }\n    }\n\n    /**\n     * Stops slide transitions if the `pause` option is set to `true`.\n     * No operation otherwise.\n     * ```typescript\n     *  this.carousel.stop();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public stop() {\n        if (this.pause) {\n            this._playing = false;\n            this.onCarouselPaused.emit(this);\n            this._resetInterval();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _moveTo(slide: IgxSlideComponent, direction: Direction) {\n        if (this._destroyed) {\n            return;\n        }\n\n        slide.direction = direction;\n        slide.active = true;\n\n        if (this._currentSlide) {\n            this._currentSlide.direction = direction;\n            this._currentSlide.active = false;\n        }\n\n        this._currentSlide = slide;\n\n        this.onSlideChanged.emit({ carousel: this, slide });\n        this._restartInterval();\n    }\n    /**\n     *@hidden\n     */\n    private _resetInterval() {\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n            this._lastInterval = null;\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _restartInterval() {\n        this._resetInterval();\n\n        if (!isNaN(this.interval) && this.interval > 0) {\n            this._lastInterval = setInterval(() => {\n                const tick = +this.interval;\n                if (this._playing && this.total && !isNaN(tick) && tick > 0) {\n                    this.next();\n                } else {\n                    this.stop();\n                }\n            }, this.interval);\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowright')\n    public onKeydownArrowRight() {\n        this.next();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowleft')\n    public onKeydownArrowLeft() {\n        this.prev();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n}\n\n/**\n * A slide component that usually holds an image and/or a caption text.\n * IgxSlideComponent is usually a child component of an IgxCarouselComponent.\n *\n * ```\n * <igx-slide [input bindings] >\n *    <ng-content></ng-content>\n * </igx-slide>\n * ```\n *\n * @export\n */\n@Component({\n    selector: 'igx-slide',\n    templateUrl: 'slide.component.html'\n})\n\nexport class IgxSlideComponent implements OnInit, OnDestroy {\n\n    /**\n     * Gets/sets the `index` of the slide inside the carousel.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide index = \"1\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public index: number;\n\n    /**\n     * Gets/sets the target `direction` for the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide direction=\"NEXT\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public direction: Direction;\n    /**\n     * Gets/sets the `active` state of the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [active] =\"false\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('class.active')\n    @Input() public active: boolean;\n\n    constructor(private carousel: IgxCarouselComponent) { }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        this.carousel.add(this);\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this.carousel.remove(this);\n    }\n}\n\nexport interface ISlideEventArgs {\n    carousel: IgxCarouselComponent;\n    slide: IgxSlideComponent;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCarouselComponent, IgxSlideComponent],\n    exports: [IgxCarouselComponent, IgxSlideComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxCarouselModule {\n}\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum LabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeCheckboxEventArgs {\n    checked: boolean;\n    checkbox: IgxCheckboxComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Checkbox** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/checkbox.html)\n *\n * The Ignite UI Checkbox is a selection control that allows users to make a binary choice. It behaves similarly\n * to the native browser checkbox.\n *\n * Example:\n * ```html\n * <igx-checkbox checked=\"true\">\n *   simple checkbox\n * </igx-checkbox>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxCheckboxComponent, multi: true }],\n    selector: 'igx-checkbox',\n    preserveWhitespaces: false,\n    templateUrl: 'checkbox.component.html'\n})\nexport class IgxCheckboxComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.checkbox.checkboxElement;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox') public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.checkbox.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.checkbox.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n    /**\n     * Sets/gets the `id` of the checkbox component.\n     * If not set, the `id` of the first checkbox component will be `\"igx-checkbox-0\"`.\n     * ```html\n     * <igx-checkbox id=\"my-first-checkbox\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let checkboxId =  this.checkbox.id;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-checkbox-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element.\n     * If not set, the id of the `label` in the first checkbox component will be `\"igx-checkbox-0-label\"`.\n     * ```html\n     * <igx-checkbox labelId = \"Label1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelId =  this.checkbox.labelId;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-checkbox [value] = \"'CheckboxValue'\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let value =  this.checkbox.value;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute.\n     * ```html\n     * <igx-checkbox name = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let name =  this.checkbox.name;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-checkbox [tabindex] = \"1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.checkbox.tabindex;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     *  Sets/gets the position of the `label`.\n     *  If not set, the `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-checkbox labelPosition = \"before\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.checkbox.labelPosition;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelPosition: LabelPosition | string = LabelPosition.AFTER;\n    /**\n     * Enables/Disables the ripple effect.\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-checkbox [disableRipple] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.checkbox.desableRipple;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the checkbox is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-checkbox [required] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRequired =  this.checkbox.required;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-checkbox aria-labelledby = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy =  this.checkbox.ariaLabelledBy;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-checkbox aria-label = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabel = this.checkbox.aruaLabel;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the checkbox state is changed.\n     * Provides references to the `IgxCheckboxComponent` and the `checked` property as event arguments.\n     * @memberof IgxCheckboxComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeCheckboxEventArgs> = new EventEmitter<IChangeCheckboxEventArgs>();\n    /**\n     * Returns the class of the checkbox component.\n     * ```typescript\n     * let class =  this.checkbox.cssClass;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox')\n    public cssClass = 'igx-checkbox';\n    /**\n     * Sets/gets whether the checkbox component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.checkbox.focused =  true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.checkbox.focused;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--focused')\n    public focused = false;\n    /**\n     * Sets/gets the checkbox indeterminate visual state.\n     * Default value is `false`;\n     * ```html\n     * <igx-checkbox [indeterminate] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isIndeterminate = this.checkbox.indeterminate;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--indeterminate')\n    @Input() public indeterminate = false;\n    /**\n     * Sets/gets whether the checkbox is checked.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [checked] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isChecked =  this.checkbox.checked;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets whether the checkbox is disabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disabled] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isDesabled = this.checkbox.disabled;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the checkbox should disable all css transitions.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disableTransitions]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let disableTransitions = this.checkbox.disableTransitions;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--plain')\n    @Input() public disableTransitions = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     * @hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * If `disabled` is `false`, switches the `checked` state.\n     * ```typescript\n     * this.checkbox.toggle();\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.indeterminate = false;\n        this.focused = false;\n        this.checked = !this.checked;\n\n        this.change.emit({ checked: this.checked, checkbox: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxChange(event) {\n        // We have to stop the original checkbox change event\n        // from bubbling up since we emit our own change event\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxClick(event) {\n        // Since the original checkbox is hidden and the label\n        // is used for styling and to change the checked state of the checkbox,\n        // we need to prevent the checkbox click event from bubbling up\n        // as it gets triggered on label click\n        event.stopPropagation();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        // We use a span element as a placeholder label\n        // in place of the native label, we need to emit\n        // the change event separately here alongside\n        // the click event emitted on click\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case LabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case LabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n}\n\nexport const IGX_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxCheckboxRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-checkbox[required][formControlName],\n    igx-checkbox[required][formControl],\n    igx-checkbox[required][ngModel]`,\n    providers: [IGX_CHECKBOX_REQUIRED_VALIDATOR]\n})\nexport class IgxCheckboxRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    exports: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxCheckboxModule { }\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    Renderer2,\n    TemplateRef,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { DisplayDensity, IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    IgxDragDirective,\n    IDragBaseEventArgs,\n    IDragStartEventArgs,\n    IgxDropEnterEventArgs,\n    IgxDropEventArgs\n} from '../directives/dragdrop/dragdrop.directive';\n\n\nexport interface IBaseChipEventArgs {\n    originalEvent: PointerEvent | MouseEvent | TouchEvent | KeyboardEvent | IgxDropEnterEventArgs;\n    owner: IgxChipComponent;\n}\n\nexport interface IChipClickEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n}\n\nexport interface IChipKeyDownEventArgs extends IBaseChipEventArgs {\n    originalEvent: KeyboardEvent;\n    cancel: boolean;\n}\n\nexport interface IChipEnterDragAreaEventArgs extends IBaseChipEventArgs {\n    dragChip: IgxChipComponent;\n}\n\nexport interface IChipSelectEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n    selected: boolean;\n}\n\nlet CHIP_ID = 0;\n\n@Component({\n    selector: 'igx-chip',\n    templateUrl: 'chip.component.html'\n})\nexport class IgxChipComponent extends DisplayDensityBase {\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\"></igx-chip>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-chip-${CHIP_ID++}`;\n\n    /**\n     * An @Input property that stores data related to the chip.\n     * ```html\n     * <igx-chip [data]=\"{ value: 'Country' }\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public data: any;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public draggable = false;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [removable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public removable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies to the remove button.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [removable]=\"true\" [removeIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>delete</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public removeIcon: TemplateRef<any>;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\" [removable]=\"true\" [selectable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public selectable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies when it is selected.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [selectable]=\"true\" [selectIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>done_outline</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public selectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions\n     * like focusing on click or tab, selection on click or Space, dragging.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [disabled]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * Sets the `IgxChipComponent` selected state.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [selected]=\"true\">\n     * ```\n     */\n    @Input()\n    public set selected(newValue: boolean) {\n        this.changeSelection(newValue);\n    }\n\n    /**\n     * Returns if the `IgxChipComponent` is selected.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * selectedChip(){\n     *     let selectedChip = this.chip.selected;\n     * }\n     * ```\n     */\n    public get selected() {\n        return this._selected;\n    }\n\n    /**\n     * An @Input property that sets the `IgxChipComponent` background color.\n     * The `color` property supports string, rgb, hex.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [color]=\"'#ff0000'\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public set color(newColor) {\n        this.chipArea.nativeElement.style.backgroundColor = newColor;\n    }\n\n    /**\n     * Returns the background color of the `IgxChipComponent`.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * ngAfterViewInit(){\n     *     let chipColor = this.chip.color;\n     * }\n     * ```\n     */\n    public get color() {\n        return this.chipArea.nativeElement.style.backgroundColor;\n    }\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving starts.\n     * Returns the moving `IgxChipComponent`.\n     * ```typescript\n     * moveStarted(event: IBaseChipEventArgs){\n     *     let movingChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveStart)=\"moveStarted($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving ends.\n     * Returns the moved `IgxChipComponent`.\n     * ```typescript\n     * moveEnded(event: IBaseChipEventArgs){\n     *     let movedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveEnd)=\"moveEnded($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is removed.\n     * Returns the removed `IgxChipComponent`.\n     * ```typescript\n     * remove(event: IBaseChipEventArgs){\n     *     let removedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onRemove)=\"remove($event)\">\n     * ```\n     */\n    @Output()\n    public onRemove = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is clicked.\n     * Returns the clicked `IgxChipComponent`, whether the event should be canceled.\n     * ```typescript\n     * chipClick(event: IChipClickEventArgs){\n     *     let clickedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onClick)=\"chipClick($event)\">\n     * ```\n     */\n    @Output()\n    public onClick = new EventEmitter<IChipClickEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected.\n     * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and\n     * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.\n     * ```typescript\n     * chipSelect(event: IChipSelectEventArgs){\n     *     let selectedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onSelection)=\"chipSelect($event)\">\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipSelectEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` keyboard navigation is being used.\n     * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,\n     * if the `alt`, `shift` or `control` key is pressed and the pressed key name.\n     * ```typescript\n     * chipKeyDown(event: IChipKeyDownEventArgs){\n     *     let keyDown = event.key;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onKeyDown)=\"chipKeyDown($event)\">\n     * ```\n     */\n    @Output()\n    public onKeyDown = new EventEmitter<IChipKeyDownEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.\n     * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as\n     * the original drop event arguments.\n     * ```typescript\n     * chipEnter(event: IChipEnterDragAreaEventArgs){\n     *     let targetChip = event.targetChip;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onDragEnter)=\"chipEnter($event)\">\n     * ```\n     */\n    @Output()\n    public onDragEnter = new EventEmitter<IChipEnterDragAreaEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        const classes = [this.getComponentDensityClass('igx-chip')];\n        classes.push(this.disabled ? 'igx-chip--disabled' : '');\n        // The custom classes should be at the end.\n        classes.push(this.class);\n        return classes.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('chipArea', { read: ElementRef })\n    public chipArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('chipArea', { read: IgxDragDirective })\n    public dragDir: IgxDragDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRemoveIcon', { read: TemplateRef })\n    public defaultRemoveIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultSelectIcon', { read: TemplateRef })\n    public defaultSelectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get removeButtonTemplate() {\n        return this.removeIcon || this.defaultRemoveIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get selectIconTemplate() {\n        return this.selectIcon || this.defaultSelectIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get ghostClass(): string {\n        return this.getComponentDensityClass('igx-chip__ghost');\n    }\n\n    public get chipTabindex() {\n        return !this.disabled ? 0 : '';\n    }\n\n    protected _selected = false;\n    protected _selectedItemClass = 'igx-chip__item--selected';\n    protected _movedWhileRemoving = false;\n\n    constructor(public cdr: ChangeDetectorRef, public elementRef: ElementRef, private renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /**\n     * @hidden\n     */\n    public selectClass(condition: boolean): object {\n        const SELECT_CLASS = 'igx-chip__select';\n\n        return {\n            [SELECT_CLASS]: condition,\n            [`${SELECT_CLASS}--hidden`]: !condition\n        };\n    }\n\n    protected changeSelection(newValue: boolean, srcEvent = null) {\n        const onSelectArgs: IChipSelectEventArgs = {\n            originalEvent: srcEvent,\n            owner: this,\n            selected: false,\n            cancel: false\n        };\n\n        if (newValue && !this._selected) {\n            onSelectArgs.selected = true;\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.addClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n            }\n        } else if (!newValue && this._selected) {\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.removeClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: KeyboardEvent) {\n        const keyDownArgs: IChipKeyDownEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n\n        this.onKeyDown.emit(keyDownArgs);\n        if (keyDownArgs.cancel) {\n            return;\n        }\n\n        if ((event.key === 'Delete' || event.key === 'Del') && this.removable) {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n        }\n\n        if ((event.key === ' ' || event.key === 'Spacebar') && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n\n        if (event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveBtnKeyDown(event: KeyboardEvent) {\n        if (event.key === ' ' || event.key === 'Spacebar' || event.key === 'Enter') {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    public onRemoveMouseDown(event: PointerEvent | MouseEvent) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveClick(event: MouseEvent | TouchEvent) {\n        this.onRemove.emit({\n            originalEvent: event,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchMove() {\n        // We don't remove chip if user starting touch interacting on the remove button moves the chip\n        this._movedWhileRemoving = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchEnd(event: TouchEvent) {\n        if (!this._movedWhileRemoving) {\n            this.onRemoveClick(event);\n        }\n        this._movedWhileRemoving = false;\n    }\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrag behaviour\n    public onChipDragStart(event: IDragStartEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n        event.cancel = !this.draggable || this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragEnd() {\n        this.dragDir.dropFinished();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipMoveEnd(event: IDragBaseEventArgs) {\n        // moveEnd is triggered after return animation has finished. This happen when we drag and release the chip.\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n\n        if (this.selected) {\n            this.chipArea.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragClicked(event: IDragBaseEventArgs) {\n        const clickEventArgs: IChipClickEventArgs = {\n            originalEvent: event.originalEvent,\n            owner: this,\n            cancel: false\n        };\n        this.onClick.emit(clickEventArgs);\n\n        if (!clickEventArgs.cancel && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event.originalEvent);\n        }\n    }\n    // End chip igxDrag behaviour\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrop behaviour\n    public onChipDragEnterHandler(event: IgxDropEnterEventArgs) {\n        if (this.dragDir === event.drag || !event.dragData || !event.dragData.chip) {\n            return;\n        }\n\n        const eventArgs: IChipEnterDragAreaEventArgs = {\n            owner: this,\n            dragChip: event.dragData.chip,\n            originalEvent: event\n        };\n        this.onDragEnter.emit(eventArgs);\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDrop(event: IgxDropEventArgs) {\n        // Cancel the default drop logic\n        event.cancel = true;\n    }\n    // End chip igxDrop behaviour\n}\n","import {\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    DoCheck,\n    AfterViewInit,\n    OnDestroy,\n    ElementRef\n} from '@angular/core';\nimport {\n    IgxChipComponent,\n    IChipSelectEventArgs,\n    IChipKeyDownEventArgs,\n    IChipEnterDragAreaEventArgs,\n    IBaseChipEventArgs\n} from './chip.component';\nimport {\n    IgxDropEnterEventArgs\n} from '../directives/dragdrop/dragdrop.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/internal/Subject';\n\nexport interface IBaseChipsAreaEventArgs {\n    originalEvent: PointerEvent | MouseEvent | TouchEvent | KeyboardEvent | IgxDropEnterEventArgs;\n    owner: IgxChipsAreaComponent;\n}\n\nexport interface IChipsAreaReorderEventArgs extends IBaseChipsAreaEventArgs {\n    chipsArray: IgxChipComponent[];\n}\n\nexport interface IChipsAreaSelectEventArgs extends IBaseChipsAreaEventArgs {\n    newSelection: IgxChipComponent[];\n}\n\n@Component({\n    selector: 'igx-chips-area',\n    templateUrl: 'chips-area.component.html',\n})\nexport class IgxChipsAreaComponent implements DoCheck, AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass() {\n        const classes = ['igx-chip-area'];\n        classes.push(this.class);\n\n        return classes.join(' ');\n    }\n\n    /**\n     * An @Input property that sets the width of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.width.px')\n    @Input()\n    public width: number;\n\n    /**\n     * An @Input property that sets the height of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.height.px')\n    @Input()\n    public height: number;\n\n    /**\n     * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.\n     * Returns an array of `IgxChipComponent`s.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"changedOrder($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public changedOrder(event: IChipsAreaReorderEventArgs){\n     *      let chips: IgxChipComponent[] = event.chipsArray;\n     * }\n     * ```\n     */\n    @Output()\n    public onReorder = new EventEmitter<IChipsAreaReorderEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.\n     * Fired after the chips area is initialized if there are initially selected chips as well.\n     * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onSelection)=\"selection($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public selection(event: IChipsAreaSelectEventArgs){\n     *      let selectedChips: IgxChipComponent[] = event.newSelection;\n     * }\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipsAreaSelectEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveStart)=\"moveStart($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveStart(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveEnd)=\"moveEnd($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveEnd(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Holds the `IgxChipComponent` in the `IgxChipsAreaComponent`.\n     * ```typescript\n     * ngAfterViewInit(){\n     *    let chips = this.chipsArea.chipsList;\n     * }\n     * ```\n     */\n    @ContentChildren(IgxChipComponent)\n    public chipsList: QueryList<IgxChipComponent>;\n\n    private modifiedChipsArray: IgxChipComponent[];\n    private _differ: IterableDiffer<IgxChipComponent> | null = null;\n    private selectedChips: IgxChipComponent[] = [];\n    protected destroy$ = new Subject<boolean>();\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef,\n        private _iterableDiffers: IterableDiffers) {\n        this._differ = this._iterableDiffers.find([]).create(null);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        // If we have initially selected chips through their inputs, we need to get them, because we cannot listen to their events yet.\n        if (this.chipsList.length) {\n            this.selectedChips = this.chipsList.filter((item: IgxChipComponent) => item.selected);\n            if (this.selectedChips.length) {\n                this.onSelection.emit({\n                    originalEvent: null,\n                    newSelection: this.selectedChips,\n                    owner: this\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this.chipsList) {\n            const changes = this._differ.diff(this.chipsList.toArray());\n            if (changes) {\n                changes.forEachAddedItem((addedChip) => {\n                    addedChip.item.onMoveStart.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveStart(args);\n                    });\n                    addedChip.item.onMoveEnd.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveEnd(args);\n                    });\n                    addedChip.item.onDragEnter.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipDragEnter(args);\n                    });\n                    addedChip.item.onKeyDown.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipKeyDown(args);\n                    });\n                    if (addedChip.item.selectable) {\n                        addedChip.item.onSelection.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                            this.onChipSelectionChange(args);\n                        });\n                    }\n                });\n                this.modifiedChipsArray = this.chipsList.toArray();\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipKeyDown(event: IChipKeyDownEventArgs) {\n        let orderChanged = false;\n        const chipsArray = this.chipsList.toArray();\n        const dragChipIndex = chipsArray.findIndex((el) => el === event.owner);\n        if (event.originalEvent.shiftKey === true) {\n            if (event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex - 1, false, event.originalEvent);\n                if (orderChanged) {\n                    setTimeout(() => {\n                        this.chipsList.toArray()[dragChipIndex - 1].chipArea.nativeElement.focus();\n                    });\n                }\n            } else if (event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex + 1, true, event.originalEvent);\n            }\n        } else {\n            if ((event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') && dragChipIndex > 0) {\n                chipsArray[dragChipIndex - 1].chipArea.nativeElement.focus();\n            } else if ((event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') &&\n                dragChipIndex < chipsArray.length - 1) {\n                chipsArray[dragChipIndex + 1].chipArea.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveStart(event: IBaseChipEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveEnd(event: IBaseChipEventArgs) {\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipDragEnter(event: IChipEnterDragAreaEventArgs) {\n        const dropChipRect = event.owner.elementRef.nativeElement.getBoundingClientRect();\n        const dropChipIndex = this.chipsList.toArray().findIndex((el) => el === event.owner);\n        const dragChipIndex = this.chipsList.toArray().findIndex((el) => el === event.dragChip);\n        if (dragChipIndex < dropChipIndex) {\n            // from the left to right\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, true, event.originalEvent);\n        } else {\n            // from the right to left\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, false, event.originalEvent);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected positionChipAtIndex(chipIndex, targetIndex, shiftRestLeft, originalEvent) {\n        if (chipIndex < 0 || this.chipsList.length <= chipIndex ||\n            targetIndex < 0 || this.chipsList.length <= targetIndex) {\n            return false;\n        }\n\n        const chipsArray = this.chipsList.toArray();\n        const result: IgxChipComponent[] = [];\n        for (let i = 0; i < chipsArray.length; i++) {\n            if (shiftRestLeft) {\n                if (chipIndex <= i && i < targetIndex) {\n                    result.push(chipsArray[i + 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            } else {\n                if (targetIndex < i && i <= chipIndex) {\n                    result.push(chipsArray[i - 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            }\n        }\n        this.modifiedChipsArray = result;\n\n        const eventData: IChipsAreaReorderEventArgs = {\n            chipsArray: this.modifiedChipsArray,\n            originalEvent: originalEvent,\n            owner: this\n        };\n        this.onReorder.emit(eventData);\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipSelectionChange(event: IChipSelectEventArgs) {\n        if (event.selected) {\n            this.selectedChips.push(event.owner);\n        } else if (!event.selected) {\n            this.selectedChips = this.selectedChips.filter((chip) => {\n                return chip.id !== event.owner.id;\n            });\n        }\n        this.onSelection.emit({\n            originalEvent: event.originalEvent,\n            newSelection: this.selectedChips,\n            owner: this\n        });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxChipComponent } from './chip.component';\nimport { IgxChipsAreaComponent } from './chips-area.component';\nimport { IgxDragDropModule } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxPrefixModule, IgxPrefixDirective} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixModule, IgxSuffixDirective } from '../directives/suffix/suffix.directive';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxChipsAreaComponent,\n    IgxChipComponent\n  ],\n  exports: [\n    IgxChipsAreaComponent,\n    IgxChipComponent,\n    IgxPrefixDirective,\n    IgxSuffixDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule,\n    IgxDragDropModule,\n    IgxPrefixModule,\n    IgxSuffixModule\n  ]\n})\nexport class IgxChipsModule { }\n","import { Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeader]'\n})\nexport class IgxComboHeaderDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboFooter]'\n})\nexport class IgxComboFooterDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboItem]'\n})\nexport class IgxComboItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboEmpty]'\n})\nexport class IgxComboEmptyDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeaderItem]'\n})\n\nexport class IgxComboHeaderItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboAddItem]'\n})\nexport class IgxComboAddItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboToggleIcon]'\n})\nexport class IgxComboToggleIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboClearIcon]'\n})\nexport class IgxComboClearIconDirective {\n}\n\n","import { IgxComboBase } from './combo.common';\n\n/**\n * @hidden\n */\nexport class IgxComboAPIService {\n    protected combo: IgxComboBase;\n\n    public disableTransitions = false;\n\n    public register(combo: IgxComboBase) {\n        this.combo = combo;\n    }\n\n\n    public clear(): void {\n        this.combo = null;\n    }\n\n\n    public get item_focusable(): boolean {\n        return false;\n    }\n    public get isRemote(): boolean {\n        return this.combo.isRemote;\n    }\n\n    public add_custom_item(): void {\n        if (!this.combo) {\n            return;\n        }\n        this.combo.addItemToCollection();\n    }\n\n    public get comboID(): string {\n        return this.combo.id;\n    }\n\n    public set_selected_item(itemID: any, event?: Event): void {\n        const selected = this.combo.isItemSelected(itemID);\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (!selected) {\n            this.combo.selectItems([itemID], false, event);\n        } else {\n            this.combo.deselectItems([itemID], event);\n        }\n    }\n\n    public is_item_selected(itemID: any): boolean {\n        return this.combo.isItemSelected(itemID);\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    HostBinding,\n    Inject,\n    Input,\n    DoCheck,\n    Host,\n    HostListener\n} from '@angular/core';\nimport { IgxDropDownItemComponent } from '../drop-down/drop-down-item.component';\nimport { IGX_DROPDOWN_BASE, IDropDownBase, Navigate } from '../drop-down/drop-down.common';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxSelectionAPIService } from '../core/selection';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-item',\n    templateUrl: 'combo-item.component.html'\n})\nexport class IgxComboItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    /**\n     * Gets the height of a list item\n     * @hidden\n     */\n    @Input()\n    @HostBinding('style.height.px')\n    public itemHeight = '';\n\n    /**\n     * @hidden\n     */\n    public get itemID() {\n        return this.comboAPI.isRemote ? JSON.stringify(this.value) : this.value;\n    }\n\n    /**\n     * @hidden\n     */\n    public get comboID() {\n        return this.comboAPI.comboID;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get disableTransitions() {\n        return this.comboAPI.disableTransitions;\n    }\n\n    constructor(\n        protected comboAPI: IgxComboAPIService,\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Inject(IgxSelectionAPIService) protected selection: IgxSelectionAPIService\n    ) {\n        super(dropDown, elementRef, null, selection);\n    }\n\n    /**\n     * @hidden\n     */\n    get selected(): boolean {\n        return this.comboAPI.is_item_selected(this.itemID);\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n\n    /**\n     * @hidden\n     */\n    isVisible(direction: Navigate): boolean {\n        const rect = this.element.nativeElement.getBoundingClientRect();\n        const parentDiv = this.element.nativeElement.parentElement.parentElement.getBoundingClientRect();\n        if (direction === Navigate.Down) {\n            return rect.y + rect.height <= parentDiv.y + parentDiv.height;\n        }\n        return rect.y >= parentDiv.y;\n    }\n\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        this.comboAPI.disableTransitions = false;\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        this.dropDown.navigateItem(this.index);\n        this.comboAPI.set_selected_item(this.itemID, event);\n    }\n\n    ngDoCheck() {\n    }\n}\n","import { ElementRef, EventEmitter } from '@angular/core';\nimport { CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\n\nexport const IGX_COMBO_COMPONENT = 'IgxComboComponentToken';\n\n/** @hidden @internal TODO: Evaluate */\nexport interface IgxComboBase {\n    id: string;\n    data: any[];\n    valueKey: string;\n    groupKey: string;\n    isRemote: boolean;\n    filteredData: any[];\n    filteringExpressions: IFilteringExpression[];\n    totalItemCount: number;\n    itemsMaxHeight: number;\n    itemHeight: number;\n    searchValue: string;\n    searchInput: ElementRef<HTMLInputElement>;\n    comboInput: ElementRef<HTMLInputElement>;\n    onOpened: EventEmitter<void>;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    focusSearchInput(opening?: boolean): void;\n    triggerCheck(): void;\n    addItemToCollection(): void;\n    isAddButtonVisible(): boolean;\n    handleInputChange(event?: string): void;\n    isItemSelected(itemID: any): boolean;\n    selectItems(itemIDs: any[], clearSelection?: boolean, event?: Event): void;\n    deselectItems(itemIDs: any[], event?: Event): void;\n}\n","import { IgxComboItemComponent } from './combo-item.component';\nimport { Component } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-combo-add-item',\n    template: '<ng-content></ng-content>',\n    providers: [{ provide: IgxComboItemComponent, useExisting: IgxComboAddItemComponent}]\n})\nexport class IgxComboAddItemComponent extends IgxComboItemComponent {\n    get selected(): boolean {\n        return false;\n    }\n    set selected(value: boolean) {\n    }\n\n    clicked(event?) {\n        this.comboAPI.disableTransitions = false;\n        this.comboAPI.add_custom_item();\n    }\n}\n","import {\n    ChangeDetectorRef, Component, ElementRef, Inject, QueryList, OnDestroy, AfterViewInit, ContentChildren\n} from '@angular/core';\nimport { IgxComboBase, IGX_COMBO_COMPONENT } from './combo.common';\nimport { IDropDownBase, IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { DropDownActionKey } from '../drop-down/drop-down.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxDropDownItemBase } from '../drop-down/drop-down-item.base';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxComboItemComponent } from './combo-item.component';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-drop-down',\n    templateUrl: '../drop-down/drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxComboDropDownComponent }]\n})\nexport class IgxComboDropDownComponent extends IgxDropDownComponent implements IDropDownBase, OnDestroy, AfterViewInit {\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase,\n        protected comboAPI: IgxComboAPIService) {\n        super(elementRef, cdr, selection);\n    }\n\n    protected get scrollContainer() {\n        return this.virtDir.dc.location.nativeElement;\n    }\n\n    protected get isScrolledToLast(): boolean {\n        const scrollTop = this.virtDir.getVerticalScroll().scrollTop;\n        const scrollHeight = this.virtDir.getVerticalScroll().scrollHeight;\n        return Math.floor(scrollTop + this.virtDir.igxForContainerSize) === scrollHeight;\n    }\n\n    protected get lastVisibleIndex(): number {\n        return this.combo.totalItemCount ?\n            Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :\n            this.items.length - 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxComboItemComponent, { descendants: true })\n    public children: QueryList<IgxDropDownItemBase> = null;\n\n    /**\n     * @hidden @internal\n     */\n    public onFocus() {\n        this.focusedItem = this._focusedItem || this.items[0];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur(evt?) {\n        this.focusedItem = null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    public navigateFirst() {\n        this.navigateItem(this.virtDir.igxForOf.findIndex(e => !e.isHeader));\n    }\n\n    /**\n     * @hidden\n     */\n    public navigatePrev() {\n        if (this._focusedItem && this._focusedItem.index === 0 && this.virtDir.state.startIndex === 0) {\n            this.combo.focusSearchInput(false);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n\n    /**\n     * @hidden\n     */\n    public navigateNext() {\n        const lastIndex = this.combo.totalItemCount ? this.combo.totalItemCount - 1 : this.virtDir.igxForOf.length - 1;\n        if (this._focusedItem && this._focusedItem.index === lastIndex) {\n            this.focusAddItemButton();\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectItem(item: IgxDropDownItemBase) {\n        if (item === null || item === undefined) {\n            return;\n        }\n        this.comboAPI.set_selected_item(item.itemID);\n        this._focusedItem = item;\n    }\n\n    private focusAddItemButton() {\n        if (this.combo.isAddButtonVisible()) {\n            this.focusedItem = this.items[this.items.length - 1];\n        }\n    }\n\n    protected scrollToHiddenItem(newItem: any): void { }\n\n    protected scrollHandler = () => {\n        this.comboAPI.disableTransitions = true;\n    }\n\n    protected get sortedChildren(): IgxDropDownItemBase[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxDropDownItemBase, b: IgxDropDownItemBase) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxComboItemComponent[] {\n        const items: IgxComboItemComponent[] = [];\n        if (this.children !== undefined) {\n            const sortedChildren = this.sortedChildren as IgxComboItemComponent[];\n            for (const child of sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public updateScrollPosition() {\n        this.virtDir.getVerticalScroll().scrollTop = this._scrollPosition;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onItemActionKey(key: DropDownActionKey) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n                this.handleEnter();\n                break;\n            case DropDownActionKey.SPACE:\n                this.handleSpace();\n                break;\n            case DropDownActionKey.ESCAPE:\n                this.close();\n        }\n    }\n\n    private handleEnter() {\n        if (this.isAddItemFocused()) {\n            this.combo.addItemToCollection();\n        } else {\n            this.close();\n        }\n    }\n\n    private handleSpace() {\n        if (this.isAddItemFocused()) {\n            return;\n        } else {\n            this.selectItem(this.focusedItem);\n        }\n    }\n\n    private isAddItemFocused(): boolean {\n        return this.focusedItem instanceof IgxComboAddItemComponent;\n    }\n\n    public ngAfterViewInit() {\n        this.virtDir.getVerticalScroll().addEventListener('scroll', this.scrollHandler);\n    }\n\n    /**\n     *@hidden @internal\n     */\n    public ngOnDestroy(): void {\n        this.virtDir.getVerticalScroll().removeEventListener('scroll', this.scrollHandler);\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../core/utils';\nimport { DataUtil } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IFilteringState } from '../data-operations/filtering-state.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\n\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboFiltering'\n})\nexport class IgxComboFilteringPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], expressions: IFilteringExpression[],\n                     logic: FilteringLogic) {\n        const filteringExpressionsTree =  new FilteringExpressionsTree(logic);\n        filteringExpressionsTree.filteringOperands = expressions;\n        const state: IFilteringState = { expressionsTree: filteringExpressionsTree, strategy: new SimpleFilteringStrategy()};\n        state.expressionsTree.filteringOperands = this.combo.filteringExpressions;\n\n        if (!state.expressionsTree.filteringOperands.length) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        return result;\n    }\n}\n\n/** @hidden */\nexport class SimpleFilteringStrategy extends FilteringStrategy {\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = expr.fieldName === undefined ? rec : rec[expr.fieldName];\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboSorting',\n    pure: true\n})\nexport class IgxComboSortingPipe implements PipeTransform {\n    constructor() { }\n\n    public transform(collection: any[], expressions: ISortingExpression []) {\n        if (!expressions.length) {\n            return collection;\n        }\n        const result = DataUtil.sort(cloneArray(collection), expressions);\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboGrouping'\n})\nexport class IgxComboGroupingPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], groupKey: any) {\n        this.combo.filteredData = collection;\n        if ((!groupKey && groupKey !== 0) || !collection.length) {\n            return collection;\n        }\n        const data = cloneArray(collection);\n        let inserts = 0;\n        let currentHeader = null;\n        for (let i = 0; i < collection.length; i++) {\n            let insertFlag = 0;\n            if (currentHeader !== collection[i][groupKey]) {\n                currentHeader = collection[i][groupKey];\n                insertFlag = 1;\n            }\n            if (insertFlag) {\n                data.splice(i + inserts, 0, {\n                    [this.combo.valueKey]: currentHeader,\n                    [this.combo.groupKey]: currentHeader,\n                    isHeader: true\n                });\n                inserts++;\n            }\n        }\n        return data;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\n\nexport class IgxComboFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n","import { ConnectedPositioningStrategy } from './../services/overlay/position/connected-positioning-strategy';\nimport { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener,\n    Input, NgModule, OnInit, OnDestroy, Output, TemplateRef, ViewChild, Optional, Inject, Injector, forwardRef\n} from '@angular/core';\nimport {\n    IgxComboItemDirective,\n    IgxComboEmptyDirective,\n    IgxComboHeaderItemDirective,\n    IgxComboHeaderDirective,\n    IgxComboFooterDirective,\n    IgxComboAddItemDirective,\n    IgxComboToggleIconDirective,\n    IgxComboClearIconDirective\n} from './combo.directives';\nimport { FormsModule, ReactiveFormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { SortingDirection, ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IgxForOfModule, IForOfState, IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { IgxComboDropDownComponent } from './combo-dropdown.component';\nimport { IgxComboFilterConditionPipe, IgxComboFilteringPipe, IgxComboGroupingPipe, IgxComboSortingPipe } from './combo.pipes';\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services';\nimport { Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { DefaultSortingStrategy, ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { EditorProvider } from '../core/edit-provider';\nimport { take } from 'rxjs/operators';\n\n/** Custom strategy to provide the combo with callback on initial positioning */\nclass ComboConnectedPositionStrategy extends ConnectedPositioningStrategy {\n    private _callback: () => void;\n    constructor(callback: () => void) {\n        super();\n        this._callback = callback;\n    }\n\n    position(contentElement, size, document?, initialCall?) {\n        if (initialCall) {\n            this._callback();\n        }\n        super.position(contentElement, size);\n    }\n}\n\n/**\n * @hidden\n */\nenum DataTypes {\n    EMPTY = 'empty',\n    PRIMITIVE = 'primitive',\n    COMPLEX = 'complex',\n    PRIMARYKEY = 'valueKey'\n}\n\nexport enum IgxComboState {\n    /**\n     * Combo with initial state.\n     */\n    INITIAL,\n    /**\n     * Combo with valid state.\n     */\n    VALID,\n    /**\n     * Combo with invalid state.\n     */\n    INVALID\n}\n\nexport interface IComboSelectionChangeEventArgs extends CancelableEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    event?: Event;\n}\n\nexport interface IComboItemAdditionEvent {\n    oldCollection: any[];\n    addedItem: any;\n    newCollection: any[];\n}\n\nlet NEXT_ID = 0;\nconst noop = () => { };\n\n@Component({\n    selector: 'igx-combo',\n    templateUrl: 'combo.component.html',\n    providers: [\n        IgxComboAPIService,\n        { provide: IGX_COMBO_COMPONENT, useExisting: IgxComboComponent },\n        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => IgxComboComponent), multi: true }\n    ]\n})\nexport class IgxComboComponent extends DisplayDensityBase implements IgxComboBase, AfterViewInit, ControlValueAccessor, OnInit,\n OnDestroy, EditorProvider {\n    /**\n     * @hidden @internal\n     */\n    public customValueFlag = true;\n    /**\n     * @hidden @internal\n     */\n    public defaultFallbackGroup = 'Other';\n    protected stringFilters = IgxStringFilteringOperand;\n    protected booleanFilters = IgxBooleanFilteringOperand;\n    protected _filteringLogic = FilteringLogic.Or;\n    protected _filteringExpressions: IFilteringExpression[] = [];\n    protected _sortingExpressions: ISortingExpression[] = [];\n    protected _groupKey = '';\n    protected _displayKey: string;\n    protected _prevInputValue = '';\n    private _dataType = '';\n    private ngControl: NgControl = null;\n    private destroy$ = new Subject<any>();\n    private _data = [];\n    private _filteredData = [];\n    private _positionCallback: () => void;\n    private _onChangeCallback: (_: any) => void = noop;\n    private overlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n    private _value = '';\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        @Optional() private injector: Injector) {\n        super(_displayDensityOptions);\n        this.comboAPI.register(this);\n    }\n\n    @ViewChild(IgxForOfDirective, { read: IgxForOfDirective })\n    protected virtDir: IgxForOfDirective<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxComboDropDownComponent, { read: IgxComboDropDownComponent })\n    public dropdown: IgxComboDropDownComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('searchInput')\n    public searchInput: ElementRef<HTMLInputElement> = null;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('comboInput')\n    public comboInput: ElementRef<HTMLInputElement> = null;\n\n    /**\n     * @hidden @internal\n     */\n    get displaySearchInput(): boolean {\n        return this.filterable || this.allowCustomValues;\n    }\n\n    /**\n     * The custom template, if any, that should be used when rendering ITEMS in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.itemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboItem>\n     *          <div class=\"custom-item\" let-item let-key=\"valueKey\">\n     *              <div class=\"custom-item__name\">{{ item[key] }}</div>\n     *              <div class=\"custom-item__cost\">{{ item.cost }}</div>\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboItemDirective, { read: TemplateRef })\n    public itemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the HEADER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeader>\n     *          <div class=\"combo__header\">\n     *              This is a custom header\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderDirective, { read: TemplateRef })\n    public headerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the FOOTER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.footerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboFooter>\n     *          <div class=\"combo__footer\">\n     *              This is a custom footer\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboFooterDirective, { read: TemplateRef })\n    public footerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering HEADER ITEMS for groups in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeaderItem let-item let-key=\"groupKey\">\n     *          <div class=\"custom-item--group\">Group header for {{ item[key] }}</div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderItemDirective, { read: TemplateRef })\n    public headerItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.addItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboAddItem>\n     *          <button class=\"combo__add-button\">\n     *              Click to add item\n     *          </button>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboAddItemDirective, { read: TemplateRef })\n    public addItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.emptyTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboEmpty>\n     *          <div class=\"combo--emtpy\">\n     *              There are no items to display\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboEmptyDirective, { read: TemplateRef })\n    public emptyTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboToggleIconDirective, { read: TemplateRef })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo CLEAR button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.clearIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboClearIcon>\n     *          <igx-icon>clear</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboClearIconDirective, { read: TemplateRef })\n    public clearIconTemplate: TemplateRef<any> = null;\n\n    @ViewChild('primitive', { read: TemplateRef })\n    protected primitiveTemplate: TemplateRef<any>;\n\n    @ViewChild('complex', { read: TemplateRef })\n    protected complexTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxForOfDirective)\n    public virtualScrollContainer: IgxForOfDirective<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#emptyTemplate' is deprecated.\\n` +\n        `Use \\`igxComboEmpty\\` directive instead.`)\n    @ContentChild('emptyTemplate', { read: TemplateRef })\n    private set oldEmptyTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.emptyTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#headerTemplate' is deprecated.\\n` +\n        `Use \\`igxComboHeader\\` directive instead.`)\n    @ContentChild('headerTemplate', { read: TemplateRef })\n    private set oldHeaderTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.headerTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#footerTemplate' is deprecated.\\n` +\n        `Use \\`igxComboFooter\\` directive instead.`)\n    @ContentChild('footerTemplate', { read: TemplateRef })\n    private set oldFooterTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.footerTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#itemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboItem\\` directive instead.`)\n    @ContentChild('itemTemplate', { read: TemplateRef })\n    private set oldItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.itemTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#addItemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboAddItem\\` directive instead.`)\n    @ContentChild('addItemTemplate', { read: TemplateRef })\n    private set oldAddItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.addItemTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#headerItemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboHeaderItem\\` directive instead.`)\n    @ContentChild('headerItemTemplate', { read: TemplateRef })\n    private set oldHeaderItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.headerItemTemplate = template;\n        }\n    }\n\n    @ViewChild('dropdownItemContainer')\n    protected dropdownContainer: ElementRef = null;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSelectionChange = new EventEmitter<IComboSelectionChangeEventArgs>();\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-combo onOpening='handleOpening($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-combo (onOpened)='handleOpened()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosed)='handleClosed()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Emitted when an item is being added to the data collection\n     *\n     * ```html\n     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onAddition = new EventEmitter<IComboItemAdditionEvent>();\n\n    /**\n     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)\n     *\n     * ```html\n     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSearchInput = new EventEmitter();\n\n    /**\n     * Emitted when new chunk of data is loaded from the virtualization\n     *\n     * ```html\n     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<any>();\n\n    /**\n     * Gets/gets combo id.\n     *\n     * ```typescript\n     * // get\n     * let id = this.combo.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [id]='combo1'></igx-combo>\n     * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-combo-${NEXT_ID++}`;\n\n    /**\n     * Sets the style width of the element\n     *\n     * ```typescript\n     * // get\n     * let myComboWidth = this.combo.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [width]='250px'></igx-combo>\n     * ```\n     */\n    @HostBinding('style.width')\n    @Input()\n    public width: string;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.valid === IgxComboState.VALID;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.valid === IgxComboState.INVALID;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-combo')\n    public cssClass = 'igx-combo'; // Independent of display density, at the time being\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding(`attr.role`)\n    public role = 'combobox';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded(): boolean {\n        return !this.dropdown.collapsed;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.dropdown.id;\n    }\n\n    /**\n     * Controls whether custom values can be added to the collection\n     *\n     * ```typescript\n     * // get\n     * let comboAllowsCustomValues = this.combo.allowCustomValues;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [allowCustomValues]='true'></igx-combo>\n     * ```\n     */\n    @Input()\n    public allowCustomValues = false;\n\n    /**\n     * Configures the drop down list height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsMaxHeight]='320'></igx-combo>\n     * ```\n    */\n    @Input()\n    public itemsMaxHeight = 480;\n\n    /**\n     * Configures the drop down list width\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsWidth = this.combo.itemsWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsWidth] = '\"180px\"'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemsWidth: string;\n\n    /**\n     * Configures the drop down list item height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemHeight = this.combo.itemHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemHeight]='32'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemHeight = 48;\n\n    /**\n     * @hidden @internal\n     */\n    public filteringLogic = FilteringLogic.Or;\n\n    /**\n     * Defines the placeholder value for the combo value field\n     *\n     * ```typescript\n     * // get\n     * let myComboPlaceholder = this.combo.placeholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public placeholder = '';\n\n    /**\n     * @hidden @internal\n     */\n    public get inputEmpty(): boolean {\n        return !this.value && !this.placeholder;\n    }\n\n    /**\n     * Defines the placeholder value for the combo dropdown search field\n     *\n     * ```typescript\n     * // get\n     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public searchPlaceholder = 'Enter a Search Term';\n\n    /**\n     * Combo data source.\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [data]='items'></igx-combo>\n     * ```\n     */\n    @Input()\n    get data(): any[] {\n        return this._data;\n    }\n    set data(val: any[]) {\n        this._data = (val) ? val : [];\n    }\n\n    /**\n     * Combo value data source propery.\n     *\n     * ```typescript\n     * // get\n     * let myComboValueKey = this.combo.valueKey;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [valueKey]='myKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public valueKey: string;\n\n    @Input()\n    set displayKey(val: string) {\n        this._displayKey = val;\n    }\n\n    /**\n     * Combo text data source propery.\n     *\n     * ```typescript\n     * // get\n     * let myComboDisplayKey = this.combo.displayKey;\n     *\n     * // set\n     * this.combo.displayKey = 'val';\n     *\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [displayKey]='mydisplayKey'></igx-combo>\n     * ```\n     */\n    get displayKey() {\n        return this._displayKey ? this._displayKey : this.valueKey;\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [groupKey]='newGroupKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public set groupKey(val: string) {\n        this.clearSorting(this._groupKey);\n        this._groupKey = val;\n        this.sort(this._groupKey);\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```typescript\n     * // get\n     * let currentGroupKey = this.combo.groupKey;\n     * ```\n     */\n    public get groupKey(): string {\n        return this._groupKey;\n    }\n\n    /**\n     * An @Input property that enabled/disables filtering in the list. The default is `true`.\n     * ```html\n     *<igx-combo [filterable]=\"'false'\">\n     * ```\n     */\n    @Input()\n    public filterable = true;\n\n    /**\n     * An @Input property that set aria-labelledby attribute\n     * ```html\n     *<igx-combo [ariaLabelledBy]=\"'label1'\">\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy: string;\n\n    /**\n     * An @Input property that enabled/disables combo. The default is `false`.\n     * ```html\n     *<igx-combo [disabled]=\"'true'\">\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An @Input property that sets how the combo will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.\n     * ```html\n     *<igx-combo [type]=\"'line'\">\n     * ```\n     */\n    @Input()\n    public type = 'box';\n\n    /**\n     * Gets/Sets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // get\n     * let valid = this.combo.valid;\n     * ```\n     * ```typescript\n     * // set\n     * this.combo.valid = IgxComboState.INVALID;\n     * ```\n    */\n    public valid: IgxComboState = IgxComboState.INITIAL;\n\n    /**\n     * @hidden @internal\n     */\n    public searchValue = '';\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.open();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    onInputClick(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.toggle();\n    }\n\n    /**\n     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`\n     *\n     * ```typescript\n     * // get\n     * let state = this.combo.virtualizationState;\n     * ```\n    */\n    get virtualizationState(): IForOfState {\n        return this.virtDir.state;\n    }\n    /**\n     * Sets the current state of the virtualized data.\n     *\n     * ```typescript\n     * // set\n     * this.combo.virtualizationState(state);\n     * ```\n     */\n    set virtualizationState(state: IForOfState) {\n        this.virtDir.state = state;\n    }\n\n    /**\n     * Gets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // get\n     * let count = this.combo.totalItemCount;\n     * ```\n    */\n    get totalItemCount(): number {\n        return this.virtDir.totalItemCount;\n    }\n    /**\n     * Sets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // set\n     * this.combo.totalItemCount(remoteService.count);\n     * ```\n     */\n    set totalItemCount(count: number) {\n        this.virtDir.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteringExpressions(): IFilteringExpression[] {\n        return this.filterable ? this._filteringExpressions : [];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteringExpressions(value: IFilteringExpression[]) {\n        this._filteringExpressions = value;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = value;\n        this.cdr.markForCheck();\n    }\n\n    protected clearSorting(field?: string | number) {\n        if (field === undefined || field === null) {\n            this.sortingExpressions = [];\n            return;\n        }\n        const currentState = cloneArray(this.sortingExpressions);\n        const index = currentState.findIndex((expr) => expr.fieldName === field);\n        if (index > -1) {\n            currentState.splice(index, 1);\n            this.sortingExpressions = currentState;\n        }\n    }\n\n    /**\n     * The text displayed in the combo input\n     *\n     * ```typescript\n     * // get\n     * let comboValue = this.combo.value;\n     * ```\n     */\n    get value(): string {\n        return this._value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteredData(): any[] {\n        return this.filterable ? this._filteredData : this.data;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteredData(val: any[]) {\n        this._filteredData = this.groupKey ? (val || []).filter((e) => e.isHeader !== true) : val;\n        this.checkMatch();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyUp(event: KeyboardEvent): void {\n        if (event.key === 'ArrowDown' || event.key === 'Down') {\n            this.dropdown.focusedItem = this.dropdown.items[0];\n            this.dropdownContainer.nativeElement.focus();\n        } else if (event.key === 'Escape' || event.key === 'Esc') {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyDown(event: KeyboardEvent) {\n        if (event.key === 'ArrowUp' || event.key === 'Up') {\n            event.preventDefault();\n            event.stopPropagation();\n            this.close();\n        }\n    }\n\n    private checkMatch(): void {\n        const displayKey = this.displayKey;\n        const matchFn = (e) => {\n            const value = displayKey ? e[displayKey] : e;\n            return value.toString().toLowerCase() === this.searchValue.trim().toLowerCase();\n        };\n        const itemMatch = this.filteredData.some(matchFn);\n        this.customValueFlag = this.allowCustomValues && !itemMatch;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleInputChange(event?: string) {\n        let cdrFlag = false;\n        const vContainer = this.virtDir;\n        if (event !== undefined && this._prevInputValue === event) {\n            // Nothing has changed\n            return;\n        } else {\n            this._prevInputValue = event !== undefined ? event : '';\n        }\n        if (event !== undefined) {\n            // Do not scroll if not scrollable\n            if (vContainer.isScrollable()) {\n                vContainer.scrollTo(0);\n            } else {\n                cdrFlag = true;\n            }\n            this.onSearchInput.emit(event);\n        } else {\n            cdrFlag = true;\n        }\n        if (this.filterable) {\n            this.filter();\n            // If there was no scroll before filtering, check if there is after and detect changes\n            if (cdrFlag) {\n                vContainer.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    if (vContainer.isScrollable()) {\n                        this.cdr.detectChanges();\n                    }\n                });\n            }\n        } else {\n            this.checkMatch();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public sort(fieldName: string, dir: SortingDirection = SortingDirection.Asc, ignoreCase: boolean = true,\n        strategy: ISortingStrategy = DefaultSortingStrategy.instance()): void {\n        if (!fieldName) {\n            return;\n        }\n        const sortingState = cloneArray(this.sortingExpressions, true);\n\n        this.prepare_sorting_expression(sortingState, fieldName, dir, ignoreCase, strategy);\n        this.sortingExpressions = sortingState;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getValueByValueKey(val: any): any {\n        if (!val && val !== 0) {\n            return undefined;\n        }\n        return this.valueKey ?\n            this.data.filter((e) => e[this.valueKey] === val)[0] :\n            this.data.filter((e) => e === val);\n    }\n\n    protected prepare_sorting_expression(state: ISortingExpression[], fieldName: string, dir: SortingDirection, ignoreCase: boolean,\n        strategy: ISortingStrategy) {\n\n        if (dir === SortingDirection.None) {\n            state.splice(state.findIndex((expr) => expr.fieldName === fieldName), 1);\n            return;\n        }\n\n        const expression = state.find((expr) => expr.fieldName === fieldName);\n\n        if (!expression) {\n            state.push({ fieldName, dir, ignoreCase, strategy });\n        } else {\n            Object.assign(expression, { fieldName, dir, ignoreCase });\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get dataType(): string {\n        if (this.valueKey) {\n            return DataTypes.COMPLEX;\n        }\n        return DataTypes.PRIMITIVE;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isRemote() {\n        return this.totalItemCount > 0 &&\n            this.valueKey &&\n            this.dataType === DataTypes.COMPLEX;\n    }\n\n    /**\n     * If the data source is remote, returns JSON.stringify(itemID)\n     * @hidden\n     * @internal\n     */\n    private _stringifyItemID(itemID: any) {\n        return this.isRemote && typeof itemID === 'object' ? JSON.stringify(itemID) : itemID;\n    }\n\n    private _parseItemID(itemID) {\n        return this.isRemote && typeof itemID === 'string' ? JSON.parse(itemID) : itemID;\n    }\n\n    /**\n     * Returns if the specified itemID is selected\n     * @hidden\n     * @internal\n     */\n    public isItemSelected(item: any): boolean {\n        return this.selection.is_item_selected(this.id, this._stringifyItemID(item));\n    }\n\n    /**\n     * Triggers change detection on the combo view\n     */\n    public triggerCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isAddButtonVisible(): boolean {\n        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;\n        return this.searchValue !== '' && this.customValueFlag;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleSelectAll(evt) {\n        if (evt.checked) {\n            this.selectAllItems();\n        } else {\n            this.deselectAllItems();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addItemToCollection() {\n        if (!this.searchValue) {\n            return;\n        }\n        const newValue = this.searchValue.trim();\n        const addedItem = this.displayKey ? {\n            [this.valueKey]: newValue,\n            [this.displayKey]: newValue\n        } : newValue;\n        if (this.groupKey) {\n            Object.assign(addedItem, { [this.groupKey]: this.defaultFallbackGroup });\n        }\n        const oldCollection = this.data;\n        const newCollection = [...this.data];\n        newCollection.push(addedItem);\n        const args: IComboItemAdditionEvent = {\n            oldCollection, addedItem, newCollection\n        };\n        this.onAddition.emit(args);\n        this.data.push(addedItem);\n        // If you mutate the array, no pipe is invoked and the display isn't updated;\n        // if you replace the array, the pipe executes and the display is updated.\n        this.data = cloneArray(this.data);\n        this.selectItems([addedItem], false);\n        this.customValueFlag = false;\n        this.searchInput.nativeElement.focus();\n        this.dropdown.focusedItem = null;\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public focusSearchInput(opening?: boolean): void {\n        if (this.displaySearchInput && this.searchInput) {\n            this.searchInput.nativeElement.focus();\n        } else {\n            if (opening) {\n                this.dropdownContainer.nativeElement.focus();\n            } else {\n                this.comboInput.nativeElement.focus();\n                this.toggle();\n            }\n        }\n    }\n\n\n    protected prepare_filtering_expression(searchVal, condition, ignoreCase, fieldName?) {\n        const newArray = [...this.filteringExpressions];\n        const expression = newArray.find((expr) => expr.fieldName === fieldName);\n        const newExpression = { fieldName, searchVal, condition, ignoreCase };\n        if (!expression) {\n            newArray.push(newExpression);\n        } else {\n            Object.assign(expression, newExpression);\n        }\n        if (this.groupKey) {\n            const expression2 = newArray.find((expr) => expr.fieldName === 'isHeader');\n            const headerExpression = {\n                fieldName: 'isHeader', searchVale: '',\n                condition: IgxBooleanFilteringOperand.instance().condition('true'), ignoreCase: true\n            };\n            if (!expression2) {\n                newArray.push(headerExpression);\n            } else {\n                Object.assign(expression2, headerExpression);\n            }\n        }\n        this.filteringExpressions = newArray;\n    }\n\n    protected onStatusChanged = () => {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            this.valid = this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur() {\n        if (this.collapsed) {\n            if (this.ngControl && !this.ngControl.valid) {\n                this.valid = IgxComboState.INVALID;\n            } else {\n                this.valid = IgxComboState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filter() {\n        this.prepare_filtering_expression(this.searchValue.trim(), IgxStringFilteringOperand.instance().condition('contains'),\n            true, this.dataType === DataTypes.PRIMITIVE ? undefined : this.displayKey);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this.injector.get(NgControl, null);\n        this._positionCallback = () => this.dropdown.updateScrollPosition();\n        this.overlaySettings.positionStrategy = new ComboConnectedPositionStrategy(this._positionCallback);\n        this.overlaySettings.positionStrategy.settings.target = this.elementRef.nativeElement;\n        this.selection.set(this.id, new Set());\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        this.filteredData = [...this.data];\n\n        if (this.ngControl) {\n            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged);\n    }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n        this.comboAPI.clear();\n        this.selection.clear(this.id);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public writeValue(value: any): void {\n        // selectItems can handle Array<any>, no valueKey is needed;\n        this.selectItems(value, true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnTouched(fn: any): void { }\n\n    /**\n     * @hidden @internal\n     */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public getEditElement(): HTMLElement {\n        return this.comboInput.nativeElement;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get template(): TemplateRef<any> {\n        this._dataType = this.dataType;\n        if (this.itemTemplate) {\n            return this.itemTemplate;\n        }\n        if (this._dataType === DataTypes.COMPLEX) {\n            return this.complexTemplate;\n        }\n        return this.primitiveTemplate;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClearItems(event: Event): void {\n        this.deselectAllItems(true, event);\n        event.stopPropagation();\n    }\n\n    /**\n     * A method that opens/closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.toggle()\">Toggle Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public toggle(): void {\n        this.dropdown.toggle(this.overlaySettings);\n    }\n\n    /**\n     * A method that opens the combo.\n     *\n     *```html\n     *<button (click)=\"combo.open()\">Open Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public open(): void {\n        this.dropdown.open(this.overlaySettings);\n    }\n\n    /**\n     * A method that closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.close()\">Close Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public close(): void {\n        this.dropdown.close();\n    }\n\n    /**\n     * Gets drop down state.\n     *\n     * ```typescript\n     * let state = this.combo.collapsed;\n     * ```\n    */\n    public get collapsed(): boolean {\n        return this.dropdown.collapsed;\n    }\n\n    /**\n     * Get current selection state\n     * @returns Array of selected items\n     * ```typescript\n     * let selectedItems = this.combo.selectedItems();\n     * ```\n     */\n    public selectedItems() {\n        const items = Array.from(this.selection.get(this.id));\n        return this.isRemote ? items.map(item => this._parseItemID(item)) : items;\n    }\n\n    /**\n     * Select defined items\n     * @param newItems new items to be selected\n     * @param clearCurrentSelection if true clear previous selected items\n     * ```typescript\n     * this.combo.selectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public selectItems(newItems: Array<any>, clearCurrentSelection?: boolean, event?: Event) {\n        if (newItems) {\n            const newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Deselect defined items\n     * @param items items to deselected\n     * ```typescript\n     * this.combo.deselectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public deselectItems(items: Array<any>, event?: Event) {\n        if (items) {\n            const newSelection = this.selection.delete_items(this.id, items);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Select all (filtered) items\n     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.\n     * ```typescript\n     * this.combo.selectAllItems();\n     * ```\n     */\n    public selectAllItems(ignoreFilter?: boolean, event?: Event) {\n        const allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData);\n        const newSelection = this.selection.add_items(this.id, allVisible);\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Deselect all (filtered) items\n     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.\n     * ```typescript\n     * this.combo.deselectAllItems();\n     * ```\n     */\n    public deselectAllItems(ignoreFilter?: boolean, event?: Event): void {\n        let newSelection = this.selection.get_empty();\n        if (this.filteredData.length !== this.data.length && !ignoreFilter) {\n            newSelection = this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData));\n        }\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Selects/Deselects an item using it's valueKey value\n     * @param itemID the valueKey of the specified item\n     * @param select If the item should be selected (true) or deselcted (false)\n     *\n     * ```typescript\n     * items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem('Connecticut', true);\n     * // combo.valueKey === 'field'\n     * // items[n] === { field: 'Connecticut', state: 'New England'}\n     * ```\n     */\n    public setSelectedItem(itemID: any, select = true, event?: Event): void {\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        const itemValue = this.getValueByValueKey(itemID);\n        if (itemValue !== null && itemValue !== undefined) {\n            if (select) {\n                this.selectItems([itemValue], false, event);\n            } else {\n                this.deselectItems([itemValue], event);\n            }\n        }\n    }\n\n    protected setSelection(newSelection: Set<any>, event?: Event): void {\n        const oldSelectionEmit = Array.from(this.selection.get(this.id) || []);\n        const newSelectionEmit = Array.from(newSelection || []);\n        const args: IComboSelectionChangeEventArgs = {\n            newSelection: newSelectionEmit,\n            oldSelection: oldSelectionEmit,\n            event,\n            cancel: false\n        };\n        this.onSelectionChange.emit(args);\n        if (!args.cancel) {\n            this.selection.select_items(this.id, args.newSelection, true);\n            this._value = this.dataType !== DataTypes.PRIMITIVE ?\n                args.newSelection.map((id) => this._parseItemID(id)[this.displayKey]).join(', ') :\n                args.newSelection.join(', ');\n            this._onChangeCallback(args.newSelection);\n        }\n    }\n    /**\n     * Event handlers\n     * @hidden\n     * @internal\n     */\n    public handleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleOpened() {\n        this.triggerCheck();\n        this.focusSearchInput(true);\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosing(event) {\n        this.onClosing.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.searchValue = '';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosed() {\n        this.comboInput.nativeElement.focus();\n        this.onClosed.emit();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboFilterConditionPipe, IgxComboGroupingPipe,\n        IgxComboFilteringPipe, IgxComboSortingPipe, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxComboModule { }\n","import { isIE } from '../core/utils';\n\n/**\n * This enum is used to keep the date validation result.\n *\n *@hidden\n */\nexport const enum DateState {\n    Valid = 'valid',\n    Invalid = 'invalid',\n}\n\n/**\n *@hidden\n */\nconst enum FormatDesc {\n    Numeric = 'numeric',\n    TwoDigits = '2-digit'\n}\n\n/**\n *@hidden\n */\nconst enum DateChars {\n    YearChar = 'y',\n    MonthChar = 'M',\n    DayChar = 'd'\n}\n\n/**\n *@hidden\n */\nconst enum DateParts {\n    Day = 'day',\n    Month = 'month',\n    Year = 'year'\n}\n\n/**\n *@hidden\n */\nexport abstract class DatePickerUtil {\n    private static readonly SHORT_DATE_MASK = 'MM/dd/yy';\n    private static readonly SEPARATOR = 'literal';\n    private static readonly NUMBER_OF_MONTHS = 12;\n    private static readonly PROMPT_CHAR = '_';\n    private static readonly DEFAULT_LOCALE = 'en';\n\n    /**\n     * This method generates date parts structure based on editor mask and locale.\n     * @param maskValue: string\n     * @param locale: string\n     * @returns array containing information about date parts - type, position, format\n     */\n    public static parseDateFormat(maskValue: string, locale: string = DatePickerUtil.DEFAULT_LOCALE): any[] {\n        let dateStruct = [];\n        if (maskValue === undefined && !isIE()) {\n            dateStruct = DatePickerUtil.getDefaultLocaleMask(locale);\n        } else {\n            const mask = (maskValue) ? maskValue : DatePickerUtil.SHORT_DATE_MASK;\n            const maskArray = Array.from(mask);\n            const monthInitPosition = mask.indexOf(DateChars.MonthChar);\n            const dayInitPosition = mask.indexOf(DateChars.DayChar);\n            const yearInitPosition = mask.indexOf(DateChars.YearChar);\n\n            if (yearInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Year,\n                    initialPosition: yearInitPosition,\n                    formatType: DatePickerUtil.getYearFormatType(mask)\n                });\n            }\n\n            if (monthInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Month,\n                    initialPosition: monthInitPosition,\n                    formatType: DatePickerUtil.getMonthFormatType(mask)\n                });\n            }\n\n            if (dayInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Day,\n                    initialPosition: dayInitPosition,\n                    formatType: DatePickerUtil.getDayFormatType(mask)\n                });\n            }\n\n            for (let i = 0; i < maskArray.length; i++) {\n                if (!DatePickerUtil.isDateChar(maskArray[i])) {\n                    dateStruct.push({\n                        type: DatePickerUtil.SEPARATOR,\n                        initialPosition: i,\n                        value: maskArray[i]\n                    });\n                }\n            }\n\n            dateStruct.sort((a, b) => a.initialPosition - b.initialPosition);\n            DatePickerUtil.fillDatePartsPositions(dateStruct);\n        }\n        return dateStruct;\n    }\n\n    /**\n     * This method generates input mask based on date parts.\n     * @param dateStruct array\n     * @returns input mask\n     */\n    public static getInputMask(dateStruct: any[]): string {\n        const inputMask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                inputMask.push(dateStruct[i].value);\n            } else if (dateStruct[i].type === DateParts.Day || dateStruct[i].type === DateParts.Month) {\n                inputMask.push('00');\n            } else if (dateStruct[i].type === DateParts.Year) {\n                switch (dateStruct[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        inputMask.push('0000');\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        inputMask.push('00');\n                        break;\n                    }\n                }\n            }\n        }\n        return inputMask.join('');\n    }\n\n    /**\n     * This method generates editor mask.\n     * @param dateStruct\n     * @returns editor mask\n     */\n    public static getMask(dateStruct: any[]): string {\n        const mask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].formatType) {\n                case FormatDesc.Numeric: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('d');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('M');\n                    } else {\n                        mask.push('yyyy');\n                    }\n                    break;\n                }\n                case FormatDesc.TwoDigits: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('dd');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('MM');\n                    } else {\n                        mask.push('yy');\n                    }\n                }\n            }\n\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                mask.push(dateStruct[i].value);\n            }\n        }\n\n        return mask.join('');\n    }\n    /**\n     * This method parses an input string base on date parts and returns a date and its validation state.\n     * @param dateFormatParts\n     * @param prevDateValue\n     * @param inputValue\n     * @returns object containing a date and its validation state\n     */\n    public static parseDateArray(dateFormatParts: any[], prevDateValue: Date, inputValue: string): any {\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, inputValue);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue);\n        const yearStr = DatePickerUtil.getYearValueFromInput(dateFormatParts, inputValue);\n        const yearFormat = DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType;\n        const day = (dayStr !== '') ? parseInt(dayStr, 10) : 1;\n        const month = (monthStr !== '') ? parseInt(monthStr, 10) - 1 : 0;\n\n        let year;\n        if (yearStr === '') {\n            year = (yearFormat === FormatDesc.TwoDigits) ? '00' : '2000';\n        } else {\n            year = yearStr;\n        }\n        let yearPrefix;\n        if (prevDateValue) {\n            const originalYear = prevDateValue.getFullYear().toString();\n            if (originalYear.length === 4) {\n                yearPrefix = originalYear.substring(0, 2);\n            }\n        } else {\n            yearPrefix = '20';\n        }\n        const fullYear = (yearFormat === FormatDesc.TwoDigits) ? yearPrefix.concat(year) : year;\n\n        if ((month < 0) || (month > 11) || (month === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        if ((day < 1) || (day > DatePickerUtil.daysInMonth(fullYear, month + 1)) || (day === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        return { state: DateState.Valid, date: new Date(fullYear, month, day) };\n    }\n\n    public static maskToPromptChars(mask: string): string {\n        const result = mask.replace(/0|L/g, DatePickerUtil.PROMPT_CHAR);\n        return result;\n    }\n\n    /**\n     * This method replaces prompt chars with empty string.\n     * @param value\n     */\n    public static trimUnderlines(value: string): string {\n        const result = value.replace(/_/g, '');\n        return result;\n    }\n\n    /**\n     * This method is used for spinning date parts.\n     * @param dateFormatParts\n     * @param inputValue\n     * @param position\n     * @param delta\n     * @param isSpinLoop\n     * @return modified text input\n     */\n    public static getModifiedDateInput(dateFormatParts: any[],\n        inputValue: string,\n        position: number,\n        delta: number,\n        isSpinLoop: boolean): string {\n        const datePart = DatePickerUtil.getDatePartOnPosition(dateFormatParts, position);\n        const datePartType = datePart.type;\n        const datePartFormatType = datePart.formatType;\n        let newValue;\n\n        const datePartValue = DatePickerUtil.getDateValueFromInput(dateFormatParts, datePartType, inputValue);\n        newValue = parseInt(datePartValue, 10);\n\n        let maxValue, minValue;\n        const minMax = DatePickerUtil.getMinMaxValue(dateFormatParts, datePart, inputValue);\n        minValue = minMax.min;\n        maxValue = minMax.max;\n\n        if (isNaN(newValue)) {\n            if (minValue === 'infinite') {\n                newValue = 2000;\n            } else {\n                newValue = minValue;\n            }\n        }\n        let tempValue = newValue;\n        tempValue += delta;\n\n        // Infinite loop for full years\n        if (maxValue === 'infinite' && minValue === 'infinite') {\n            newValue = tempValue;\n        }\n\n        if (isSpinLoop) {\n            if (tempValue > maxValue) {\n                tempValue = minValue;\n            }\n            if (tempValue < minValue) {\n                tempValue = maxValue;\n            }\n            newValue = tempValue;\n        } else {\n            if (tempValue <= maxValue && tempValue >= minValue) {\n                newValue = tempValue;\n            }\n        }\n\n        const startIdx = datePart.position[0];\n        const endIdx = datePart.position[1];\n        const start = inputValue.slice(0, startIdx);\n        const end = inputValue.slice(endIdx, inputValue.length);\n        let changedPart: string;\n\n        const prefix = DatePickerUtil.getNumericFormatPrefix(datePartFormatType);\n        changedPart = (newValue < 10) ? `${prefix}${newValue}` : `${newValue}`;\n\n        return `${start}${changedPart}${end}`;\n    }\n\n    /**\n     * This method returns date input with prompt chars.\n     * @param dateFormatParts\n     * @param date\n     * @param inputValue\n     * @returns date input including prompt chars\n     */\n    public static addPromptCharsEditMode(dateFormatParts: any[], date: Date, inputValue: string): string {\n        const dateArray = Array.from(inputValue);\n        for (let i = 0; i < dateFormatParts.length; i++) {\n            if (dateFormatParts[i].formatType === FormatDesc.Numeric) {\n                if ((dateFormatParts[i].type === DateParts.Day && date.getDate() < 10)\n                    || (dateFormatParts[i].type === DateParts.Month && date.getMonth() + 1 < 10)) {\n                    dateArray.splice(dateFormatParts[i].position[0], 0, DatePickerUtil.PROMPT_CHAR);\n                    dateArray.join('');\n                }\n            }\n        }\n        return dateArray.join('');\n    }\n\n    /**\n     * This method checks if date input is done.\n     * @param dateFormatParts\n     * @param input\n     * @returns input completeness\n     */\n    public static checkForCompleteDateInput(dateFormatParts: any[], input: string): string {\n        const dayValue = DatePickerUtil.getDayValueFromInput(dateFormatParts, input);\n        const monthValue = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input);\n        const yearValue = DatePickerUtil.getYearValueFromInput(dateFormatParts, input);\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, input, false);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input, false);\n\n        if (DatePickerUtil.isFullInput(dayValue, dayStr)\n            && DatePickerUtil.isFullInput(monthValue, monthStr)\n            && DatePickerUtil.isFullYearInput(dateFormatParts, yearValue)) {\n            return 'complete';\n        } else if (dayValue === '' && monthValue === '' && yearValue === '') {\n            return 'empty';\n        } else if (dayValue === '' || monthValue === '' || yearValue === '') {\n            return 'partial';\n        }\n        return '';\n    }\n\n    private static getYearFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.YearChar, 'g')).length) {\n            case 1: {\n                // y (2020)\n                return FormatDesc.Numeric;\n            }\n            case 4: {\n                // yyyy (2020)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // yy (20)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getMonthFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.MonthChar, 'g')).length) {\n            case 1: {\n                // M (8)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // MM (08)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDayFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.DayChar, 'g')).length) {\n            case 1: {\n                // d (6)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // dd (06)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDefaultLocaleMask(locale: string) {\n        const dateStruct = [];\n        const formatter = new Intl.DateTimeFormat(locale);\n        const formatToParts = formatter.formatToParts(new Date());\n        for (let i = 0; i < formatToParts.length; i++) {\n            if (formatToParts[i].type === DatePickerUtil.SEPARATOR) {\n                dateStruct.push({\n                    type: DatePickerUtil.SEPARATOR,\n                    value: formatToParts[i].value\n                });\n            } else {\n                dateStruct.push({\n                    type: formatToParts[i].type,\n                });\n            }\n        }\n        const formatterOptions = formatter.resolvedOptions();\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].type) {\n                case DateParts.Day: {\n                    dateStruct[i].formatType = formatterOptions.day;\n                    break;\n                }\n                case DateParts.Month: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n                case DateParts.Year: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n            }\n        }\n        DatePickerUtil.fillDatePartsPositions(dateStruct);\n        return dateStruct;\n    }\n\n    private static isDateChar(char: string): boolean {\n        return (char === DateChars.YearChar || char === DateChars.MonthChar || char === DateChars.DayChar);\n    }\n\n    private static getNumericFormatPrefix(formatType: string): string {\n        switch (formatType) {\n            case FormatDesc.TwoDigits: {\n                return '0';\n            }\n            case FormatDesc.Numeric: {\n                return DatePickerUtil.PROMPT_CHAR;\n            }\n        }\n    }\n\n    private static getMinMaxValue(dateFormatParts: any[], datePart, inputValue: string): any {\n        let maxValue, minValue;\n        switch (datePart.type) {\n            case DateParts.Month: {\n                minValue = 1;\n                maxValue = DatePickerUtil.NUMBER_OF_MONTHS;\n                break;\n            }\n            case DateParts.Day: {\n                minValue = 1;\n                maxValue = DatePickerUtil.daysInMonth(\n                    DatePickerUtil.getFullYearFromString(DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year), inputValue),\n                    parseInt(DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue), 10));\n                break;\n            }\n            case DateParts.Year: {\n                if (datePart.formatType === FormatDesc.TwoDigits) {\n                    minValue = 0;\n                    maxValue = 99;\n                } else {\n                    // Infinite loop\n                    minValue = 'infinite';\n                    maxValue = 'infinite';\n                }\n                break;\n            }\n        }\n        return { min: minValue, max: maxValue };\n    }\n\n    private static daysInMonth(fullYear: number, month: number): number {\n        return new Date(fullYear, month, 0).getDate();\n    }\n\n    private static getDateValueFromInput(dateFormatParts: any[], type: DateParts, inputValue: string, trim: boolean = true): string {\n        const partPosition = DatePickerUtil.getDateFormatPart(dateFormatParts, type).position;\n        const result = inputValue.substring(partPosition[0], partPosition[1]);\n        return (trim) ? DatePickerUtil.trimUnderlines(result) : result;\n    }\n\n    private static getDayValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Day, inputValue, trim);\n    }\n\n    private static getMonthValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Month, inputValue, trim);\n    }\n\n    private static getYearValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Year, inputValue, trim);\n    }\n\n    private static getDateFormatPart(dateFormatParts: any[], type: DateParts): any {\n        const result = dateFormatParts.filter((datePart) => (datePart.type === type))[0];\n        return result;\n    }\n\n    private static isFullInput(value: any, input: string): boolean {\n        return (value !== '' && input.length === 2 && input.charAt(1) !== DatePickerUtil.PROMPT_CHAR);\n    }\n\n    private static isFullYearInput(dateFormatParts: any[], value: any): boolean {\n        switch (DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType) {\n            case FormatDesc.Numeric: {\n                return (value !== '' && value.length === 4);\n            }\n            case FormatDesc.TwoDigits: {\n                return (value !== '' && value.length === 2);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n\n    private static getDatePartOnPosition(dateFormatParts: any[], position: number) {\n        const result = dateFormatParts.filter((element) =>\n            element.position[0] <= position && position <= element.position[1] && element.type !== DatePickerUtil.SEPARATOR)[0];\n        return result;\n    }\n\n    private static getFullYearFromString(yearPart, inputValue): number {\n        return parseInt(inputValue.substring(yearPart.position[0], yearPart.position[1]), 10);\n    }\n\n    private static fillDatePartsPositions(dateArray: any[]): void {\n        let currentPos = 0;\n\n        for (let i = 0; i < dateArray.length; i++) {\n            // Day|Month part positions\n            if (dateArray[i].type === DateParts.Day || dateArray[i].type === DateParts.Month) {\n                // Offset 2 positions for number\n                dateArray[i].position = [currentPos, currentPos + 2];\n                currentPos += 2;\n            } else if (dateArray[i].type === DateParts.Year) {\n                // Year part positions\n                switch (dateArray[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        // Offset 4 positions for full year\n                        dateArray[i].position = [currentPos, currentPos + 4];\n                        currentPos += 4;\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        // Offset 2 positions for short year\n                        dateArray[i].position = [currentPos, currentPos + 2];\n                        currentPos += 2;\n                        break;\n                    }\n                }\n            } else if (dateArray[i].type === DatePickerUtil.SEPARATOR) {\n                // Separator positions\n                dateArray[i].position = [currentPos, currentPos + 1];\n                currentPos++;\n            }\n        }\n    }\n}\n\n\n","/** @hidden */\nexport const IGX_DATE_PICKER_COMPONENT = 'IgxDatePickerComponentToken';\n\n/** @hidden */\nexport interface IDatePicker {\n    value: Date;\n    mask: string;\n    inputMask: string;\n    rawDateString: string;\n    dateFormatParts: any[];\n    invalidDate: string;\n}\n","import { PipeTransform, Pipe, Inject } from '@angular/core';\nimport { IGX_DATE_PICKER_COMPONENT, IDatePicker } from './date-picker.common';\nimport { DatePickerUtil } from './date-picker.utils';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'displayValue'\n})\nexport class DatePickerDisplayValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (value !== '') {\n            if (value === DatePickerUtil.maskToPromptChars(this._datePicker.inputMask)) {\n                return '';\n            }\n            this._datePicker.rawDateString = value;\n            return DatePickerUtil.trimUnderlines(value);\n        }\n        return '';\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'inputValue'\n})\nexport class DatePickerInputValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (this._datePicker.invalidDate !== '') {\n            return this._datePicker.invalidDate;\n        } else {\n            if (this._datePicker.value === null || this._datePicker.value === undefined) {\n                return DatePickerUtil.maskToPromptChars(this._datePicker.inputMask);\n            } else {\n                return DatePickerUtil.addPromptCharsEditMode(this._datePicker.dateFormatParts, this._datePicker.value, value);\n            }\n        }\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDatePickerTemplate]'\n})\n\n/**\n * IgxDatePickerTemplateDirective can be used to re-template the date-picker input-group.\n *\n * @hidden\n */\nexport class IgxDatePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * This enumeration is used to configure whether the date/time picker has an editable input with drop down\n * or is readonly - the date/time is selected only through a dialog.\n */\nexport enum InteractionMode {\n    DropDown = 'dropdown',\n    Dialog = 'dialog'\n}\n","import { Component, ViewChild, Input, Output, EventEmitter, HostListener, HostBinding } from '@angular/core';\nimport { IgxCalendarComponent } from '../calendar';\nimport { InteractionMode } from '../core/enums';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-calendar-container',\n    styles: [':host {display: block;}'],\n    templateUrl: 'calendar-container.component.html'\n})\nexport class IgxCalendarContainerComponent {\n    @ViewChild('calendar')\n    public calendar: IgxCalendarComponent;\n\n    @Input()\n    public mode: InteractionMode = InteractionMode.Dialog;\n\n    @Input()\n    public vertical = false;\n\n    @Input()\n    public cancelButtonLabel: string;\n\n    @Input()\n    public todayButtonLabel: string;\n\n    @Output()\n    public onClose = new EventEmitter();\n\n    @Output()\n    public onTodaySelection = new EventEmitter();\n\n    @HostBinding('class.igx-date-picker')\n    public styleClass = 'igx-date-picker';\n\n    @HostBinding('class.igx-date-picker--dropdown')\n    get dropdownCSS(): boolean {\n        return this.mode === InteractionMode.DropDown;\n    }\n\n    @HostBinding('class.igx-date-picker--vertical')\n    get verticalCSS(): boolean {\n        return this.vertical && this.mode === InteractionMode.Dialog;\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    @HostListener('keydown.alt.arrowup', ['$event'])\n    public onEscape(event) {\n        event.preventDefault();\n        this.onClose.emit();\n    }\n\n    /**\n     * Returns whether the date-picker is in readonly dialog mode.\n     *\n     * @hidden\n    */\n    public get isReadonly() {\n        return this.mode === InteractionMode.Dialog;\n    }\n\n    /**\n     * Emits close event for the calendar.\n     */\n    public closeCalendar() {\n        this.onClose.emit();\n    }\n\n    /**\n    * Emits today selection event for the calendar.\n    */\n    public triggerTodaySelection() {\n        this.onTodaySelection.emit();\n    }\n}\n","import { CommonModule, formatDate } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    ViewChild,\n    ElementRef,\n    TemplateRef,\n    Inject,\n    ChangeDetectorRef,\n    HostListener,\n    NgModuleRef,\n    AfterViewInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    IgxCalendarComponent,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarModule,\n    IgxCalendarSubheaderTemplateDirective,\n    WEEKDAYS,\n    isDateInRanges\n} from '../calendar/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputDirective } from '../input-group/index';\nimport { Subject, fromEvent, animationFrameScheduler, interval } from 'rxjs';\nimport { filter, takeUntil, throttle } from 'rxjs/operators';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport {\n    OverlaySettings,\n    IgxOverlayService,\n    PositionSettings,\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy\n} from '../services/index';\nimport { DateRangeDescriptor } from '../core/dates/dateRange';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport {\n    DatePickerUtil,\n    DateState\n} from './date-picker.utils';\nimport { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';\nimport { IDatePicker } from './date-picker.common';\nimport { KEYS } from '../core/utils';\nimport { IgxDatePickerTemplateDirective } from './date-picker.directives';\nimport { IgxCalendarContainerComponent } from './calendar-container.component';\nimport { InteractionMode } from '../core/enums';\nimport { getViewportRect } from '../services/overlay/utilities';\nimport { fadeIn, fadeOut } from '../animations/fade';\n\nlet NEXT_ID = 0;\n\n/**\n * This interface is used to provide information about date picker reference and its current value\n * when onDisabledDate event is fired.\n */\nexport interface IDatePickerDisabledDateEventArgs {\n    datePicker: IgxDatePickerComponent;\n    currentValue: Date;\n}\n\n/**\n * This interface is used to provide information about date picker reference and its previously valid value\n * when onValidationFailed event is fired.\n */\nexport interface IDatePickerValidationFailedEventArgs {\n    datePicker: IgxDatePickerComponent;\n    prevValue: Date;\n}\n\n/**\n * This interface is used to configure calendar format view options.\n */\nexport interface IFormatViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\n/**\n * This interface is used to configure calendar format options.\n */\nexport interface IFormatOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n/**\n * This enumeration is used to configure the date picker to operate with pre-defined format option used in Angular DatePipe.\n * 'https://angular.io/api/common/DatePipe'\n * 'shortDate': equivalent to 'M/d/yy' (6/15/15).\n * 'mediumDate': equivalent to 'MMM d, y' (Jun 15, 2015).\n * 'longDate': equivalent to 'MMMM d, y' (June 15, 2015).\n * 'fullDate': equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).\n */\nexport enum PredefinedFormatOptions {\n    ShortDate = 'shortDate',\n    MediumDate = 'mediumDate',\n    LongDate = 'longDate',\n    FullDate = 'fullDate'\n}\n\n/**\n * **Ignite UI for Angular Date Picker** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/date_picker.html)\n *\n * The Ignite UI Date Picker displays a popup calendar that lets users select a single date.\n *\n * Example:\n * ```html\n * <igx-date-picker [(ngModel)]=\"selectedDate\"></igx-date-picker>\n * ```\n */\n@Component({\n    providers:\n        [{\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDatePickerComponent,\n            multi: true\n        }],\n    // tslint:disable-next-line:component-selector\n    selector: 'igx-date-picker',\n    templateUrl: 'date-picker.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxDatePickerComponent implements IDatePicker, ControlValueAccessor, EditorProvider, OnInit, AfterViewInit, OnDestroy {\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label.\n     * The default label is 'Date'.\n     * ```html\n     * <igx-date-picker [label]=\"Calendar\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public label = 'Date';\n\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label visibility.\n     * By default the visibility is set to true.\n     * <igx-date-picker [labelVisibility]=\"false\"></igx-date-picker>\n     */\n    @Input()\n    public labelVisibility = true;\n\n    /**\n     *An @Input property that sets locales. Default locale is en.\n     *```html\n     *<igx-date-picker locale=\"ja-JP\" [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input() public locale: 'en';\n\n    /**\n     *An @Input property that sets on which day the week starts.\n     *```html\n     *<igx-date-picker [weekStart]=\"WEEKDAYS.FRIDAY\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input() public weekStart: WEEKDAYS | number = WEEKDAYS.SUNDAY;\n\n    /**\n     *Returns the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatOptions = this.datePicker.formatOptions;\n     *}\n     *```\n     */\n    @Input()\n    public get formatOptions(): IFormatOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     *Sets the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Options;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Options = {\n     *        day: \"numeric\",\n     *        month: \"long\",\n     *        weekday: \"long\",\n     *        year: \"numeric\"\n     *    }\n     *this.datePicker.formatOptions = this.Options;\n     *}\n     *```\n     */\n    public set formatOptions(formatOptions: IFormatOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n    }\n\n    /**\n     *Returns the date display format of the `IgxDatePickerComponent` in dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let format = this.datePicker.format;\n     *}\n     *```\n     */\n    @Input()\n    public get format(): string {\n        return (this._format === undefined) ? PredefinedFormatOptions.ShortDate : this._format;\n    }\n\n    /**\n    *Sets the date format of the `IgxDatePickerComponent` when in editable dropdown mode.\n    *```typescript\n    *@ViewChild(\"MyDatePicker\")\n    *public datePicker: IgxDatePickerComponent;\n    *this.datePicker.format = 'yyyy-M-d';\n    *}\n    *```\n    */\n    public set format(format: string) {\n        this._format = format;\n    }\n\n    /**\n     *Returns the date mask of the `IgxDatePickerComponent` when in editable dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let mask = this.datePicker.mask;\n     *}\n     *```\n     */\n    @Input()\n    public mask: string;\n\n    /**\n     *Returns the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatViews = this.datePicker.formatViews;\n     *}\n     *```\n     */\n    @Input()\n    public get formatViews(): IFormatViews {\n        return this._formatViews;\n    }\n\n    /**\n     *Sets the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Views;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Views = {day:false, month: false, year:false};\n     *    this.datePicker.formatViews = this.Views;\n     *}\n     *```\n     */\n    public set formatViews(formatViews: IFormatViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     * ```typescript\n     * let disabledDates = this.datepicker.disabledDates;\n     * ```\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     * ```typescript\n     * let specialDates = this.datepicker.specialDates;\n     * ```\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    @Input()\n    public get modalOverlaySettings(): OverlaySettings {\n        return this._modalOverlay;\n    }\n\n    public set modalOverlaySettings(value: OverlaySettings) {\n        this._modalOverlay = value;\n    }\n\n    @Input()\n    public get dropDownOverlaySettings(): OverlaySettings {\n        return this._dropDownOverlay;\n    }\n\n    public set dropDownOverlaySettings(value: OverlaySettings) {\n        this._dropDownOverlay = value;\n    }\n\n    /**\n     *Returns the formatted date when `IgxDatePickerComponent` is in dialog mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *public selection(event){\n     *    let selectedDate = this.datePicker.displayData;\n     *    alert(selectedDate);\n     *}\n     *```\n     *```html\n     *<igx-date-picker #MyDatePicker (onSelection)=\"selection()\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    public get displayData(): string {\n        if (this.value) {\n            return this._customFormatChecker(this.formatter, this.value);\n        }\n        return '';\n    }\n\n    /**\n     hidden\n     */\n    public get transformedDate(): string {\n        if (this._value) {\n            this._transformedDate = (this._isInEditMode) ? this._getEditorDate(this._value) : this._getDisplayDate(this._value);\n            this.isEmpty = false;\n        } else {\n            this._transformedDate = (this._isInEditMode) ? DatePickerUtil.maskToPromptChars(this.inputMask) : '';\n        }\n        return this._transformedDate;\n    }\n\n    public set transformedDate(value) {\n        this._transformedDate = value;\n    }\n\n    constructor(@Inject(IgxOverlayService) private _overlayService: IgxOverlayService, public element: ElementRef,\n        private _cdr: ChangeDetectorRef, private _moduleRef: NgModuleRef<any>) { }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxDatePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.datePickerTemplateDirective) {\n            return this.datePickerTemplateDirective.template;\n        }\n        return (this.mode === InteractionMode.Dialog) ? this.readOnlyDatePickerTemplate : this.editableDatePickerTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxDatePickerComponent\n     */\n    get context() {\n        return {\n            disabled: this.disabled,\n            disabledDates: this.disabledDates,\n            displayData: this.displayData,\n            format: this.format,\n            isSpinLoop: this.isSpinLoop,\n            label: this.label,\n            labelVisibility: this.labelVisibility,\n            locale: this.locale,\n            mask: this.mask,\n            mode: this.mode,\n            specialDates: this.specialDates,\n            value: this.value,\n            openDialog: () => { this.openDialog(); }\n        };\n    }\n\n    /**\n     *An @Input property that gets/sets the selected date.\n     *```typescript\n     *public date: Date = new Date();\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public get value(): Date {\n        return this._value;\n    }\n\n    public set value(date: Date) {\n        this._value = date;\n        this._onChangeCallback(date);\n    }\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-date-picker [id]=\"'igx-date-picker-3'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-date-picker-${NEXT_ID++}`;\n\n    /**\n     *An @Input property that applies a custom formatter function on the selected or passed date.\n     *```typescript\n     *public date: Date = new Date();\n     *private dayFormatter = new Intl.DateTimeFormat(\"en\", { weekday: \"long\" });\n     *private monthFormatter = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n     *public formatter = (date: Date) => { return `You selected\n     *                     ${this.dayFormatter.format(date)},\n     *                     ${date.getDate()} ${this.monthFormatter.format(date)},\n     *                     ${date.getFullYear()}`;\n     *}\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\" [formatter]=\"formatter\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public formatter: (val: Date) => string;\n\n    /**\n     *An @Input property that disables the `IgxDatePickerComponent`.\n     *```html\n     *<igx-date-picker [disabled]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     *An @Input property that sets the orientation of the `IgxDatePickerComponent` header.\n     *```html\n     *<igx-date-picker [vertical]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     *An @Input property that renders today button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"cancel\" todayButtonLabel=\"Tomorrow\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public todayButtonLabel: string;\n\n    /**\n     *An @Input property that renders cancel button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"Close\" todayButtonLabel=\"Today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public cancelButtonLabel: string;\n\n    /**\n     *An @Input property that sets whether `IgxDatePickerComponent` is in dialog or drop down mode.\n     *```html\n     *<igx-date-picker mode=\"dropdown\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     *An @Input property that sets whether the `IgxDatePickerComponent` date parts would spin continuously or stop when min/max is reached.\n     *```html\n     *<igx-date-picker [isSpinLoop]=\"false\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n    *@hidden\n    */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n     *```typescript\n     *public open(event){\n     *    alert(\"The date-picker calendar has been opened!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onOpen)=\"open($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     *\"An event that is emitted when the `IgxDatePickerComponent` is closed.\n     *```typescript\n     *public close(event){\n     *    alert(\"The date-picker has been closed!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onClose)=\"close($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IgxDatePickerComponent>();\n    /**\n     *An @Output property that is fired when selection is made in the calendar.\n     *```typescript\n     *public selection(event){\n     *    alert(\"A date has been selected!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onSelection)=\"selection($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n    *An @Output property that fires when the user types/spins to a disabled date in the date-picker editor.\n    *```typescript\n    *public onDisabledDate(event){\n    *    alert(\"This date is disabled!\");\n    *}\n    *```\n    *```html\n    *<igx-date-picker (onDisabledDate)=\"onDisabledDate($event)\"></igx-date-picker>\n    *```\n    */\n    @Output()\n    public onDisabledDate = new EventEmitter<IDatePickerDisabledDateEventArgs>();\n\n    /**\n    *An @Output property that fires when the user types/spins invalid date in the date-picker editor.\n    *```typescript\n    *public onValidationFailed(event){\n        *    alert(\"This date is not valid!\");\n        *}\n        *```\n        *```html\n        *<igx-date-picker (onValidationFailed)=\"onValidationFailed($event)\"></igx-date-picker>\n        *```\n        */\n    @Output()\n    public onValidationFailed = new EventEmitter<IDatePickerValidationFailedEventArgs>();\n\n    /**\n    * @hidden\n    */\n    @ViewChild('datePickerOutlet', { read: ElementRef })\n    public outletDirective: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('readOnlyDatePickerTemplate', { read: TemplateRef })\n    protected readOnlyDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableDatePickerTemplate', { read: TemplateRef })\n    protected editableDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableInputGroup', { read: ElementRef })\n    protected editableInputGroup: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ContentChild('dropDownTarget', { read: ElementRef })\n    protected templateDropDownTarget: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableInput', { read: ElementRef })\n    protected editableInput: ElementRef;\n\n    /*\n    * @hidden\n    */\n    @ViewChild('readonlyInput', { read: ElementRef })\n    protected readonlyInput: ElementRef;\n\n    /*\n    * @hidden\n    */\n    @ContentChild(IgxInputDirective)\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective })\n    protected datePickerTemplateDirective: IgxDatePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective })\n    public headerTemplate: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective })\n    public subheaderTemplate: IgxCalendarSubheaderTemplateDirective;\n\n    public calendar: IgxCalendarComponent;\n    public hasHeader = true;\n    public collapsed = true;\n    public displayValuePipe = new DatePickerDisplayValuePipe(this);\n    public inputValuePipe = new DatePickerInputValuePipe(this);\n    public dateFormatParts = [];\n    public rawDateString: string;\n    public inputMask: string;\n    public isEmpty = true;\n    public invalidDate = '';\n\n    private readonly spinDelta = 1;\n    private readonly defaultLocale = 'en';\n    private readonly calendarHeight = 400;\n\n    private _formatOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n    private _formatViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n    private _destroy$ = new Subject<boolean>();\n    private _componentID: string;\n    private _format: string;\n    private _value: Date;\n    private _isInEditMode: boolean;\n    private _disabledDates: DateRangeDescriptor[] = null;\n    private _specialDates: DateRangeDescriptor[] = null;\n    private _modalOverlay: OverlaySettings;\n    private _dropDownOverlay: OverlaySettings;\n    private _positionSettings: PositionSettings;\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _modalOverlaySettings: OverlaySettings;\n    private _transformedDate;\n\n    /**\n    * @hidden\n    */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onSpaceClick(event: KeyboardEvent) {\n        this.openDialog();\n        event.preventDefault();\n    }\n\n    /**\n     *Method that sets the selected date.\n     *```typescript\n     *public date = new Date();\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.writeValue(this.date);\n     *}\n     *```\n     *@param value The date you want to select.\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public writeValue(value: Date) {\n        this.value = value;\n        this._cdr.markForCheck();\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    public getEditElement() {\n        let inputElement;\n        if (this.mode === InteractionMode.DropDown) {\n            inputElement = (this.editableInput) ? this.editableInput : this.input;\n        } else {\n            inputElement = (this.readonlyInput) ? this.readonlyInput : this.input;\n        }\n        return (inputElement) ? inputElement.nativeElement : null;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        this._positionSettings = {\n            openAnimation: fadeIn,\n            closeAnimation: fadeOut\n        };\n\n        const outlet = (this.outlet !== undefined) ? this.outlet : this.outletDirective;\n        this._dropDownOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy(this._positionSettings),\n            outlet: outlet\n        };\n\n        this._modalOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: true,\n            outlet: outlet\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this._onOpening(eventArgs);\n            });\n\n        this._overlayService.onOpened.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this._onOpened(eventArgs);\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onClosed();\n            });\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.dateFormatParts = DatePickerUtil.parseDateFormat(this.mask, this.locale);\n            if (this.mask === undefined) {\n                this.mask = DatePickerUtil.getMask(this.dateFormatParts);\n            }\n            this.inputMask = DatePickerUtil.getInputMask(this.dateFormatParts);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        if (this.mode === InteractionMode.DropDown && this.editableInput) {\n            fromEvent(this.editableInput.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((res) => this.onKeyDown(res));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._componentID) {\n            this._overlayService.hide(this._componentID);\n        }\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     *Selects today's date from calendar and change the input field value, @calendar.viewDate and @calendar.value.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.triggerTodaySelection();\n     *}\n     *```\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public triggerTodaySelection(): void {\n        const today = new Date(Date.now());\n        this.handleSelection(today);\n    }\n\n    /**\n     * Change the calendar selection and calling this method will emit the @calendar.onSelection event,\n     * which will fire @handleSelection method.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.selectDate(this.date);\n     *}\n     * ```\n     * @param date passed date that has to be set to the calendar.\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public selectDate(date: Date): void {\n        this.value = date;\n        this.onSelection.emit(date);\n        this._onChangeCallback(date);\n    }\n\n    /**\n     * Deselects the calendar date.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.deselectDate();\n     *}\n     * ```\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public deselectDate(): void {\n        this.value = null;\n        if (this.calendar) {\n            this.calendar.deselectDate();\n        }\n        this._onChangeCallback(null);\n    }\n\n    /**\n     * Open the calendar.\n     *\n     * @hidden\n     */\n    public openDialog(): void {\n        if (!this.collapsed) {\n            return;\n        }\n        switch (this.mode) {\n            case InteractionMode.Dialog: {\n                this.hasHeader = true;\n                const modalOverlay = (this.modalOverlaySettings !== undefined) ? this._modalOverlay : this._modalOverlaySettings;\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, modalOverlay, this._moduleRef);\n                this._overlayService.show(this._componentID, modalOverlay);\n                break;\n            }\n            case InteractionMode.DropDown: {\n                this.hasHeader = false;\n                let dropDownOverlay;\n\n                // dropdown overlay settings are modified via input\n                if (this.dropDownOverlaySettings !== undefined) {\n                    dropDownOverlay = this._dropDownOverlay;\n                } else {\n                    dropDownOverlay = this._dropDownOverlaySettings;\n                    let dropDownTarget;\n\n                    if (this.editableInputGroup) {\n                        dropDownTarget = this.editableInputGroup.nativeElement;\n                    } else {\n                        if (this.templateDropDownTarget) {\n                            // if the date picker is re-templated, set an element marked with #dropDownTarget as a target to the drop-down\n                            dropDownTarget = this.templateDropDownTarget.nativeElement;\n                        } else {\n                            throw new Error('There is no target element for the dropdown to attach. Mark an element with #dropDownTarget.');\n                        }\n                    }\n\n                    dropDownOverlay.positionStrategy.settings.target = dropDownTarget;\n                }\n\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, dropDownOverlay, this._moduleRef);\n                this._overlayService.show(this._componentID, dropDownOverlay);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Close the calendar.\n     *\n     * @hidden\n     */\n    public closeCalendar(): void {\n        this._overlayService.hide(this._componentID);\n    }\n\n    /**\n     * Clear the input field, date picker value and calendar selection.\n     *\n     * @hidden\n     */\n    public clear(): void {\n        this.isEmpty = true;\n        this.invalidDate = '';\n        this.deselectDate();\n        this._setCursorPosition(0);\n    }\n\n    /**\n     * Evaluates when @calendar.onSelection event was fired\n     * and update the input value.\n     *\n     * @param event selected value from calendar.\n     *\n     * @hidden\n     */\n    public handleSelection(date: Date): void {\n        if (this.value) {\n            date.setHours(this.value.getHours());\n            date.setMinutes(this.value.getMinutes());\n            date.setSeconds(this.value.getSeconds());\n            date.setMilliseconds(this.value.getMilliseconds());\n        }\n\n        this.value = date;\n        this.calendar.viewDate = date;\n        this._onChangeCallback(date);\n        this.closeCalendar();\n        this.onSelection.emit(date);\n    }\n\n    /**\n    * Evaluates when the input blur event was fired\n    * and re-calculate the date picker value.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onBlur(event): void {\n        this._isInEditMode = false;\n        this.calculateDate(event.target.value, event.type);\n    }\n\n    /**\n    * Evaluates when the input focus event was fired\n    * and re-calculate the editor text.\n    *\n    * @param event\n    * @hidden\n    */\n    public onFocus(): void {\n        this._isInEditMode = true;\n        if (this.value && this.invalidDate === '') {\n            this._transformedDate = this._getEditorDate(this.value);\n        }\n    }\n\n    /**\n    * Evaluates when the keydown event was fired for up/down keys\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onKeyDown(event) {\n        switch (event.key) {\n            case KEYS.UP_ARROW:\n            case KEYS.UP_ARROW_IE:\n                event.preventDefault();\n                event.stopPropagation();\n                this.spinValue(event.target.value, 1, event.type);\n                break;\n            case KEYS.DOWN_ARROW:\n            case KEYS.DOWN_ARROW_IE:\n                if (event.altKey) {\n                    this.openDialog();\n                } else {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.spinValue(event.target.value, -1, event.type);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n    * Evaluates when the mouse wheel event was fired\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onWheel(event) {\n        if (this._isInEditMode) {\n            event.preventDefault();\n            event.stopPropagation();\n            const sign = (event.deltaY > 0) ? -1 : 1;\n            this.spinValue(event.target.value, sign, event.type);\n        }\n    }\n\n    /**\n    * Evaluates when input event was fired in editor.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onInput(event) {\n        const targetValue = event.target.value;\n        const cursorPosition = this._getCursorPosition();\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, targetValue);\n        this._isInEditMode = true;\n\n        if (targetValue !== DatePickerUtil.maskToPromptChars(this.inputMask)) {\n            this.isEmpty = false;\n        }\n\n        // If all date parts are completed, change the date-picker value, stay in edit mode\n        if (checkInput === 'complete' && event.inputType !== 'deleteContentBackward') {\n            this._transformedDate = targetValue;\n            this.calculateDate(targetValue, event.type);\n            this._setCursorPosition(cursorPosition);\n        } else if (checkInput === 'partial') {\n            // While editing, if one date part is deleted, date-picker value is set to null, the remaining input stays intact.\n            this.deselectDate();\n            requestAnimationFrame(() => {\n                this.getEditElement().value = targetValue;\n                this._setCursorPosition(cursorPosition);\n            });\n        } else if (checkInput === 'empty') {\n            // Total clean-up as input is deleted.\n            this.isEmpty = true;\n            this.deselectDate();\n        }\n    }\n\n    private calculateDate(dateString: string, invokedByEvent: string): void {\n        if (dateString !== '') {\n            const prevDateValue = this.value;\n            const inputValue = (invokedByEvent === 'blur') ? this.rawDateString : dateString;\n            const newDateArray = DatePickerUtil.parseDateArray(this.dateFormatParts, prevDateValue, inputValue);\n\n            if (newDateArray.state === DateState.Valid) {\n                const newValue = newDateArray.date;\n                // Restore the time part if any\n                if (prevDateValue) {\n                    newValue.setHours(prevDateValue.getHours());\n                    newValue.setMinutes(prevDateValue.getMinutes());\n                    newValue.setSeconds(prevDateValue.getSeconds());\n                    newValue.setMilliseconds(prevDateValue.getMilliseconds());\n                }\n\n                if (this.disabledDates === null\n                    || (this.disabledDates !== null && !isDateInRanges(newValue, this.disabledDates))) {\n                    this.value = newValue;\n                    this.invalidDate = '';\n                    this._onChangeCallback(newValue);\n                } else {\n                    const args: IDatePickerDisabledDateEventArgs = {\n                        datePicker: this,\n                        currentValue: newValue,\n                    };\n                    this.onDisabledDate.emit(args);\n                }\n            } else {\n                const args: IDatePickerValidationFailedEventArgs = {\n                    datePicker: this,\n                    prevValue: prevDateValue\n                };\n                this.invalidDate = dateString;\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    private spinValue(inputValue: string, sign: number, eventType: string): void {\n        this._isInEditMode = true;\n        this.isEmpty = false;\n        const cursorPosition = this._getCursorPosition();\n\n        const modifiedInputValue =\n            DatePickerUtil.getModifiedDateInput(this.dateFormatParts, inputValue, cursorPosition, this.spinDelta * sign, this.isSpinLoop);\n\n        this.getEditElement().value = modifiedInputValue;\n        this._setCursorPosition(cursorPosition);\n\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, modifiedInputValue);\n        if (checkInput === 'complete') {\n            this._isInEditMode = true;\n            this.calculateDate(modifiedInputValue, eventType);\n            this._setCursorPosition(cursorPosition);\n        }\n    }\n\n    private _onOpening(event) {\n        this._initializeCalendarContainer(event.componentRef.instance);\n        this.collapsed = false;\n    }\n\n    private _onOpened(event): void {\n        this._onTouchedCallback();\n        this.onOpen.emit(this);\n\n        if (this.calendar) {\n            this._focusCalendarDate();\n        }\n    }\n\n    private _onClosed(): void {\n        this.collapsed = true;\n        this._componentID = null;\n        this.onClose.emit(this);\n\n        if (this.getEditElement()) {\n            this.getEditElement().focus();\n        }\n    }\n\n    private _initializeCalendarContainer(componentInstance: IgxCalendarContainerComponent) {\n        this.calendar = componentInstance.calendar;\n        const isVertical = (this.vertical && this.mode === InteractionMode.Dialog);\n        this.calendar.hasHeader = this.hasHeader;\n        this.calendar.formatOptions = this.formatOptions;\n        this.calendar.formatViews = this.formatViews;\n        this.calendar.locale = this.locale;\n        this.calendar.vertical = isVertical;\n        this.calendar.weekStart = this.weekStart;\n        this.calendar.specialDates = this.specialDates;\n        this.calendar.disabledDates = this.disabledDates;\n        this.calendar.headerTemplate = this.headerTemplate;\n        this.calendar.subheaderTemplate = this.subheaderTemplate;\n        this.calendar.onSelection.pipe(takeUntil(this._destroy$)).subscribe((ev: Date) => this.handleSelection(ev));\n\n        if (this.value) {\n            this.calendar.value = this.value;\n            this.calendar.viewDate = this.value;\n        }\n\n        componentInstance.mode = this.mode;\n        componentInstance.vertical = isVertical;\n        componentInstance.cancelButtonLabel = this.cancelButtonLabel;\n        componentInstance.todayButtonLabel = this.todayButtonLabel;\n\n        componentInstance.onClose.pipe(takeUntil(this._destroy$)).subscribe(() => this.closeCalendar());\n        componentInstance.onTodaySelection.pipe(takeUntil(this._destroy$)).subscribe(() => this.triggerTodaySelection());\n    }\n\n    // Focus a date, after the calendar appearance into DOM.\n    private _focusCalendarDate(): void {\n        requestAnimationFrame(() => {\n            this.calendar.daysView.focusActiveDate();\n        });\n    }\n\n    private _setLocaleToDate(value: Date): string {\n        return value.toLocaleDateString(this.locale);\n    }\n\n    private _getCursorPosition(): number {\n        return this.getEditElement().selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        requestAnimationFrame(() => {\n            this.getEditElement().setSelectionRange(start, end);\n        });\n    }\n\n    /**\n     * Apply custom user formatter upon date.\n     * @param formatter custom formatter function.\n     * @param date passed date\n     */\n    private _customFormatChecker(formatter: (_: Date) => string, date: Date) {\n        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date);\n    }\n\n    /*\n    * Transforms the date according to the specified format when `IgxDatePickerComponent` is in edit mode\n    * using @angular/common formatDate method: https://angular.io/api/common/formatDate\n    * @param  value: string | number | Date\n    * @returns formatted string\n    */\n    private _getDisplayDate(value: any): string {\n        if (this.format && !this.formatter) {\n            const locale = this.locale || this.defaultLocale;\n            return formatDate(value, this.format, locale);\n        } else {\n            return this._customFormatChecker(this.formatter, value);\n        }\n    }\n\n    private _getEditorDate(value: any) {\n        const locale = this.locale || this.defaultLocale;\n        const changedValue = (value) ? formatDate(value, this.mask, locale) : '';\n        return DatePickerUtil.addPromptCharsEditMode(this.dateFormatParts, this.value, changedValue);\n    }\n\n    private _onTouchedCallback: () => void = () => { };\n\n    private _onChangeCallback: (_: Date) => void = () => { };\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDatePickerComponent, IgxCalendarContainerComponent,\n        IgxDatePickerTemplateDirective, DatePickerDisplayValuePipe, DatePickerInputValuePipe],\n    exports: [IgxDatePickerComponent, IgxDatePickerTemplateDirective, DatePickerDisplayValuePipe, DatePickerInputValuePipe],\n    imports: [CommonModule, IgxIconModule, IgxInputGroupModule, IgxCalendarModule, IgxButtonModule, IgxRippleModule, IgxMaskModule],\n    entryComponents: [IgxCalendarContainerComponent]\n})\nexport class IgxDatePickerModule { }\n","import { DOCUMENT } from '@angular/common';\nimport { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-title,[igxDialogTitle]'\n})\nexport class IgxDialogTitleDirective {\n\n    @HostBinding('class.igx-dialog__window-title')\n    public defaultStyle = true;\n }\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-actions,[igxDialogActions]'\n})\nexport class IgxDialogActionsDirective {\n\n    @HostBinding('class.igx-dialog__window-actions')\n    public defaultClass = true;\n }\n","import { useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    AfterContentInit\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxDialogActionsDirective, IgxDialogTitleDirective } from './dialog.directives';\nimport { IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, GlobalPositionStrategy, NoOpScrollStrategy, PositionSettings } from '../services';\nimport { slideInBottom, slideOutTop } from '../animations/slide/index';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\n\nlet DIALOG_ID = 0;\n/**\n * **Ignite UI for Angular Dialog Window** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/dialog.html)\n *\n * The Ignite UI Dialog Window presents a dialog window to the user which can simply display messages or display\n * more complicated visuals such as a user sign-in form.  It also provides a right and left button\n * which can be used for custom actions.\n *\n * Example:\n * ```html\n * <button (click)=\"form.open()\">Show Dialog</button>\n * <igx-dialog #form title=\"Sign In\" rightButtonLabel=\"OK\">\n *   <div>\n *     <input type=\"text\" igxInput/>\n *     <label igxLabel>Username</label>\n *   </div>\n *   <div>\n *     <input type=\"password\" igxInput/>\n *     <label igxLabel>Password</label>\n *   </div>\n * </igx-dialog>\n * ```\n */\n@Component({\n    selector: 'igx-dialog',\n    templateUrl: 'dialog-content.component.html'\n})\nexport class IgxDialogComponent implements IToggleView, OnInit, OnDestroy, AfterContentInit {\n    private static NEXT_ID = 1;\n    private static readonly DIALOG_CLASS = 'igx-dialog';\n\n    @ViewChild(IgxToggleDirective)\n    public toggleRef: IgxToggleDirective;\n\n    /**\n    * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n    *```html\n    *<igx-dialog [id]=\"'igx-dialog-56'\" #alert title=\"Notification\" leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-dialog-${DIALOG_ID++}`;\n\n    @Input()\n    get isModal() {\n        return this._isModal;\n    }\n\n    set isModal(val: boolean) {\n        this._overlayDefaultSettings.modal = val;\n        this._isModal = val;\n    }\n\n    /**\n    * An @Input property controlling the `title` of the dialog.\n    *```html\n    *<igx-dialog title=\"Notification\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @Input()\n    public title = '';\n\n    /**\n     *  An @Input property controlling the `message` of the dialog.\n     *```html\n     *<igx-dialog message=\"Your email was sent!\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public message = '';\n\n    /**\n     * An @Input property to set the `label` of the left button of the dialog.\n     *```html\n     *<igx-dialog leftButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonLabel = '';\n\n    /**\n     * An @Input property to set the left button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog leftButtonType=\"raised\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonType = 'flat';\n    /**\n     * An @Input property to set the left button color. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonColor=\"yellow\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonColor = '';\n\n    /**\n     * An @Input property to set the left button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonBackgroundColor=\"black\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the left button `ripple`. The `ripple` animates a click/tap to a component as a series of fading waves.\n     * The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonRipple=\"green\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonRipple = '';\n\n    /**\n     * An @Input property to set the `label` of the right button of the dialog.\n     *```html\n     *<igx-dialog rightButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonLabel = '';\n\n    /**\n     * An @Input property to set the right button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog rightButtonType=\"fab\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonType = 'flat';\n\n    /**\n     * An @Input property to set the right button `color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonColor=\"yellow\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonColor = '';\n\n    /**\n     * An @Input property to set the right button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonBackgroundColor=\"black\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the right button `ripple`.\n     *```html\n     *<igx-dialog rightButtonRipple=\"green\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonRipple = '';\n\n    /**\n     * An @Input property that allows you to enable the \"close on click outside the dialog\". By default it's disabled.\n     *```html\n     *<igx-dialog closeOnOutsideSelect=\"true\" leftButtonLabel=\"Cancel\" (onLeftButtonSelect)=\"dialog.close()\"\n     *rightButtonLabel=\"OK\" rightButtonRipple=\"#4CAF50\" (onRightButtonSelect)=\"onDialogOKSelected($event)\">\n     *</igx-dialog>\n     *```\n     */\n    @Input()\n    get closeOnOutsideSelect() {\n        return this._closeOnOutsideSelect;\n    }\n\n    set closeOnOutsideSelect(val: boolean) {\n        this._overlayDefaultSettings.closeOnOutsideClick = val;\n        this._closeOnOutsideSelect = val;\n    }\n\n    /**\n     * An event that is emitted when the dialog is opened.\n     *```html\n     *<igx-dialog (onOpen)=\"onDialogOpenHandler($event)\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the dialog is closed.\n     *```html\n     *<igx-dialog (onClose)=\"onDialogCloseHandler($event)\" title=\"Confirmation\" leftButtonLabel=\"Cancel\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the left button is clicked.\n     *```html\n     *<igx-dialog (onLeftButtonSelect)=\"onDialogOKSelected($event)\" #dialog leftButtonLabel=\"OK\" rightButtonLabel=\"Cancel\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onLeftButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the right button is clicked.\n     * ```html\n     *<igx-dialog (onRightButtonSelect)=\"onDialogOKSelected($event)\"\n     *#dialog title=\"Confirmation\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\"\n     *rightButtonRipple=\"#4CAF50\" closeOnOutsideSelect=\"true\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onRightButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    private _animaitonSettings: PositionSettings = {\n        openAnimation: useAnimation(slideInBottom, { params: { fromPosition: 'translateY(100%)' } }),\n        closeAnimation: useAnimation(slideOutTop, { params: { toPosition: 'translateY(-100%)' } })\n    };\n\n    private _overlayDefaultSettings: OverlaySettings;\n    private _closeOnOutsideSelect = false;\n    private _isModal = true;\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * The default `tabindex` attribute for the component\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    private _titleId: string;\n\n    /**\n     * Returns the value of state. Possible state values are \"open\" or \"close\".\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogState = this.dialog.state;\n     *}\n     *```\n     */\n    get state(): string {\n        return this.isOpen ? 'open' : 'close';\n    }\n\n    /**\n     * Returns whether the dialog is visible to the end user.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogOpen = this.dialog.isOpen;\n     *}\n     * ```\n     */\n    @Input()\n    get isOpen() {\n        return !this.toggleRef.collapsed;\n    }\n\n    @HostBinding('class.igx-dialog--hidden')\n    get isCollapsed() {\n        return this.toggleRef.collapsed;\n    }\n\n    /**\n     *Returns the value of the role of the dialog. The valid values are `dialog`, `alertdialog`, `alert`.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogRole = this.dialog.role;\n     *}\n     * ```\n     */\n    @Input()\n    get role() {\n        if (this.leftButtonLabel !== '' && this.rightButtonLabel !== '') {\n            return 'dialog';\n        } else if (\n            this.leftButtonLabel !== '' ||\n            this.rightButtonLabel !== ''\n        ) {\n            return 'alertdialog';\n        } else {\n            return 'alert';\n        }\n    }\n\n    /**\n     *Returns the value of the title id.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogTitle = this.dialog.titleId;\n     *}\n     * ```\n     */\n    @Input()\n    get titleId() {\n        return this._titleId;\n    }\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService\n    ) {\n        this._titleId = IgxDialogComponent.NEXT_ID++ + '_title';\n\n        this._overlayDefaultSettings = {\n            positionStrategy: new GlobalPositionStrategy(this._animaitonSettings),\n            scrollStrategy: new NoOpScrollStrategy(),\n            modal: this.isModal,\n            closeOnOutsideClick: this.closeOnOutsideSelect\n        };\n    }\n\n    ngAfterContentInit() {\n        this.toggleRef.onClosing.pipe(takeUntil(this.destroy$)).subscribe(() => this.emitCloseFromDialog());\n    }\n\n    private emitCloseFromDialog() {\n        this.onClose.emit({ dialog: this, event: null });\n    }\n\n    /**\n     * A method that opens the dialog.\n     * @memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.open() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public open(overlaySettings: OverlaySettings = this._overlayDefaultSettings) {\n        this.toggleRef.open(overlaySettings);\n        this.onOpen.emit({ dialog: this, event: null });\n        if (!this.leftButtonLabel && !this.rightButtonLabel) {\n            this.toggleRef.element.focus();\n        }\n    }\n\n    /**\n     *A method that that closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.close() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public close() {\n        // `onClose` will emit from `toggleRef.onClosing` subscription\n        this.toggleRef.close();\n    }\n\n\n    /**\n     * A method that opens/closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.toggle() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public toggle() {\n        this.isOpen ? this.close() : this.open();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDialogSelected(event) {\n        event.stopPropagation();\n        if (\n            this.isOpen &&\n            this.closeOnOutsideSelect &&\n            event.target.classList.contains(IgxDialogComponent.DIALOG_CLASS)\n        ) {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalLeftButtonSelect(event) {\n        this.onLeftButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalRightButtonSelect(event) {\n        this.onRightButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n\n    }\n\n}\n\nexport interface IDialogEventArgs {\n    dialog: IgxDialogComponent;\n    event: Event;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    exports: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    imports: [CommonModule, IgxToggleModule, IgxButtonModule, IgxRippleModule, IgxFocusModule]\n})\nexport class IgxDialogModule { }\n","import { Injectable, EventEmitter, NgZone } from '@angular/core';\nimport { IGridEditEventArgs } from '../grids/grid-base.component';\n\n\nexport interface GridSelectionRange {\n    rowStart: number;\n    rowEnd: number;\n    columnStart: string | number;\n    columnEnd: string | number;\n}\n\nexport interface ISelectionNode {\n    row: number;\n    column: number;\n}\n\ninterface ISelectionKeyboardState {\n    node: null | ISelectionNode;\n    shift: boolean;\n    range: GridSelectionRange;\n    active: boolean;\n}\n\ninterface ISelectionPointerState extends ISelectionKeyboardState {\n    ctrl: boolean;\n}\n\ntype SelectionState = ISelectionKeyboardState | ISelectionPointerState;\n\n\n// TODO: Refactor - export in a separate file\n\nexport class IgxRow {\n    transactionState: any;\n    state: any;\n    newData: any;\n\n    constructor(public id: any, public index: number, public data: any) {}\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id,\n            oldValue: { ... this.data },\n            newValue: this.newData,\n            cancel: false\n        };\n    }\n}\n\nexport class IgxCell {\n\n    primaryKey: any;\n    state: any;\n\n    constructor(\n        public id,\n        public rowIndex: number,\n        public column,\n        public value: any,\n        public editValue: any,\n        public rowData: any) {}\n\n    castToNumber(value: any): any {\n        if (this.column.dataType === 'number' && !this.column.inlineEditorTemplate) {\n            const v = parseFloat(value);\n            return !isNaN(v) && isFinite(v) ? v : 0;\n        }\n        return value;\n    }\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id.rowID,\n            cellID: this.id,\n            oldValue: this.value,\n            newValue: this.editValue,\n            cancel: false\n        };\n    }\n}\n\n@Injectable()\nexport class IgxGridCRUDService {\n\n    grid;\n    cell: IgxCell | null = null;\n    row: IgxRow | null = null;\n\n    createCell(cell): IgxCell {\n        return new IgxCell(cell.cellID, cell.rowIndex, cell.column, cell.value, cell.value, cell.row.rowData);\n    }\n\n    createRow(cell: IgxCell): IgxRow {\n        return new IgxRow(cell.id.rowID, cell.rowIndex, cell.rowData);\n    }\n\n    sameRow(rowID): boolean {\n        return this.row.id === rowID;\n    }\n\n    sameCell(cell: IgxCell): boolean {\n        return (this.cell.id.rowID === cell.id.rowID &&\n            this.cell.id.columnID === cell.id.columnID);\n    }\n\n    get inEditMode(): boolean {\n        return !!this.cell;\n    }\n\n    get rowEditing(): boolean {\n        return this.grid.rowEditable;\n    }\n\n    get primaryKey(): any {\n        return this.grid.primaryKey;\n    }\n\n    beginRowEdit() {\n        this.row = this.createRow(this.cell);\n        const args = {\n            rowID: this.row.id,\n            oldValue: this.row.data,\n            cancel: false\n        };\n        this.grid.onRowEditEnter.emit(args);\n        if (args.cancel) {\n            this.endRowEdit();\n            return;\n        }\n        this.row.transactionState = this.grid.transactions.getAggregatedValue(this.row.id, true);\n        this.grid.transactions.startPending();\n        this.grid.openRowOverlay(this.row.id);\n    }\n\n\n    endRowEdit() {\n        this.row = null;\n    }\n\n    begin(cell): void {\n        this.cell = this.createCell(cell);\n        this.cell.primaryKey = this.primaryKey;\n        const args = {\n            cellID: this.cell.id,\n            rowID: this.cell.id.rowID,\n            oldValue: this.cell.value,\n            cancel: false\n        };\n\n        this.grid.onCellEditEnter.emit(args);\n\n        if (args.cancel) {\n            this.end();\n            return;\n        }\n\n\n        if (this.rowEditing) {\n            if (!this.row) {\n                this.beginRowEdit();\n                return;\n            }\n\n            if (this.row && !this.sameRow(this.cell.id.rowID)) {\n                this.grid.endEdit(true);\n                this.cell = this.createCell(cell);\n                this.beginRowEdit();\n                return;\n            }\n        }\n    }\n\n    end(): void {\n        this.cell = null;\n    }\n\n\n    isInEditMode(rowIndex: number, columnIndex: number): boolean {\n        if (!this.cell) {\n            return false;\n        }\n        return this.cell.column.index === columnIndex && this.cell.rowIndex === rowIndex;\n    }\n}\n\n\n@Injectable()\nexport class IgxGridSelectionService {\n\n    dragMode = false;\n    activeElement: ISelectionNode | null;\n    keyboardState = {} as ISelectionKeyboardState;\n    pointerState = {} as ISelectionPointerState;\n\n\n    selection = new Map<number, Set<number>>();\n    temp = new Map<number, Set<number>>();\n    _ranges: Set<string> = new Set<string>();\n\n\n    /**\n     * Returns the current selected ranges in the grid from both\n     * keyboard and pointer interactions\n     */\n    get ranges(): GridSelectionRange[] {\n\n        // The last action was keyboard + shift selection -> add it\n        if (this.keyboardState.range) {\n            this._ranges.add(JSON.stringify(this.keyboardState.range));\n        }\n\n        const ranges = Array.from(this._ranges).map(range => JSON.parse(range));\n\n        // No ranges but we have a focused cell -> add it\n        if (!ranges.length && this.activeElement) {\n            ranges.push(this.generateRange(this.activeElement));\n        }\n\n        return ranges;\n    }\n\n    constructor(private zone: NgZone) {\n        this.initPointerState();\n        this.initKeyboardState();\n    }\n\n    /**\n     * Resets the keyboard state\n     */\n    initKeyboardState(): void {\n        this.keyboardState.node = null;\n        this.keyboardState.shift = false;\n        this.keyboardState.range = null;\n        this.keyboardState.active = false;\n    }\n\n    /**\n     * Resets the pointer state\n     */\n    initPointerState(): void {\n        this.pointerState.node = null;\n        this.pointerState.ctrl = false;\n        this.pointerState.shift = false;\n        this.pointerState.range = null;\n    }\n\n    /**\n     * Adds a single node.\n     * Single clicks | Ctrl + single clicks on cells is the usual case.\n     */\n    add(node: ISelectionNode): void {\n        this.selection.has(node.row) ? this.selection.get(node.row).add(node.column) :\n            this.selection.set(node.row, new Set<number>()).get(node.row).add(node.column);\n\n        this._ranges.add(JSON.stringify(this.generateRange(node)));\n    }\n\n    remove(node: ISelectionNode): void {\n        if (this.selection.has(node.row)) {\n            this.selection.get(node.row).delete(node.column);\n        }\n        if (this.isActiveNode(node)) {\n            this.activeElement = null;\n        }\n        this._ranges.delete(JSON.stringify(this.generateRange(node)));\n    }\n\n    isInMap(node: ISelectionNode): boolean {\n        return (this.selection.has(node.row) && this.selection.get(node.row).has(node.column)) ||\n            (this.temp.has(node.row) && this.temp.get(node.row).has(node.column));\n    }\n\n    selected(node: ISelectionNode): boolean {\n        return this.isActiveNode(node) || this.isInMap(node);\n    }\n\n    isActiveNode(node: ISelectionNode): boolean {\n        if (this.activeElement) {\n            return this.activeElement.column === node.column && this.activeElement.row === node.row;\n        }\n        return false;\n    }\n\n    addRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.add(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    removeRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.delete(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    /**\n     * Generates a new selection range from the given `node`.\n     * If `state` is passed instead it will generate the range based on the passed `node`\n     * and the start node of the `state`.\n     */\n    generateRange(node: ISelectionNode, state?: SelectionState): GridSelectionRange {\n        if (!state) {\n            return {\n                rowStart: node.row,\n                rowEnd: node.row,\n                columnStart: node.column,\n                columnEnd: node.column\n            };\n        }\n\n        const { row, column } = state.node;\n        const rowStart = Math.min(node.row, row);\n        const rowEnd = Math.max(node.row, row);\n        const columnStart = Math.min(node.column, column);\n        const columnEnd = Math.max(node.column, column);\n\n        return { rowStart, rowEnd, columnStart, columnEnd };\n    }\n\n    /**\n     *\n     */\n    keyboardStateOnKeydown(node: ISelectionNode, shift: boolean, shiftTab: boolean) {\n        this.keyboardState.active = true;\n        this.initPointerState();\n        this.keyboardState.shift = shift && !shiftTab;\n\n        // Kb navigation with shift and no previous node.\n        // Clear the current selection init the start node.\n        if (this.keyboardState.shift && !this.keyboardState.node) {\n            this.clear();\n            this.keyboardState.node = node;\n        }\n    }\n\n    keyboardStateOnFocus(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>): void {\n        const kbState = this.keyboardState;\n\n        // Focus triggered by keyboard navigation\n        if (kbState.active) {\n            // Start generating a range if shift is hold\n            if (kbState.shift) {\n                this.dragSelect(node, kbState);\n                kbState.range = this.generateRange(node, kbState);\n                emitter.emit(this.generateRange(node, kbState));\n                return;\n            }\n\n            this.initKeyboardState();\n            this.clear();\n            this.add(node);\n        }\n    }\n\n    pointerDown(node: ISelectionNode, shift: boolean, ctrl: boolean): void {\n\n        if (this.keyboardState.range) {\n            this._ranges.add(JSON.stringify(this.keyboardState.range));\n        }\n\n        this.initKeyboardState();\n        this.pointerState.ctrl = ctrl;\n        this.pointerState.shift = shift;\n\n        // No ctrl key pressed - no multiple selection\n        if (!ctrl) {\n            this.clear();\n        }\n\n        if (shift) {\n            // No previously 'clicked' node. Use the last active node.\n            if (!this.pointerState.node) {\n                this.pointerState.node = this.activeElement;\n            }\n            this.pointerDownShiftKey(node);\n            this.clearTextSelection();\n            return;\n        }\n\n        this.removeRangeMeta(node);\n        this.pointerState.node = node;\n    }\n\n    pointerDownShiftKey(node: ISelectionNode): void {\n        this.clear();\n        this.selectRange(node, this.pointerState);\n    }\n\n    mergeMap(target: Map<number, Set<number>>, source: Map<number, Set<number>>): void {\n        const iterator = source.entries();\n        let pair = iterator.next();\n        let key: number;\n        let value: Set<number>;\n\n        while (!pair.done) {\n            [key, value] = pair.value;\n            if (target.has(key)) {\n                const newValue = target.get(key);\n                value.forEach(record => newValue.add(record));\n                target.set(key, newValue);\n            } else {\n                target.set(key, value);\n            }\n            pair = iterator.next();\n        }\n    }\n\n    pointerEnter(node: ISelectionNode, dragEnabled: boolean): boolean {\n        this.dragMode = dragEnabled;\n        if (!this.dragMode) {\n            return false;\n        }\n        this.clearTextSelection();\n\n        // If the users triggers a drag-like event by first clicking outside the grid cells\n        // and then enters in the grid body we may not have a initial pointer starting node.\n        // Assume the first pointerenter node is where we start.\n        if (!this.pointerState.node) {\n            this.pointerState.node = node;\n        }\n\n        this.pointerState.ctrl ? this.blah(node, this.pointerState) :\n            this.dragSelect(node, this.pointerState);\n        return true;\n    }\n\n    pointerUp(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>): boolean {\n        if (this.dragMode) {\n            this.addRangeMeta(node, this.pointerState);\n            this.mergeMap(this.selection, this.temp);\n            this.zone.runTask(() => emitter.emit(this.generateRange(node, this.pointerState)));\n            this.temp.clear();\n            this.dragMode = false;\n            return true;\n        }\n\n        if (this.pointerState.shift) {\n            this.clearTextSelection();\n            emitter.emit(this.generateRange(node, this.pointerState));\n            this.addRangeMeta(node, this.pointerState);\n            return true;\n        }\n\n        this.add(node);\n        return false;\n    }\n\n    selectRange(node: ISelectionNode, state: SelectionState) {\n        const { rowStart, rowEnd, columnStart, columnEnd } = this.generateRange(node, state);\n        for (let i = rowStart; i <= rowEnd; i++) {\n            for (let j = columnStart as number; j <= columnEnd; j++) {\n                this.selection.has(i) ? this.selection.get(i).add(j) :\n                    this.selection.set(i, new Set<number>()).get(i).add(j);\n            }\n        }\n    }\n\n    blah(node: ISelectionNode, state: SelectionState) {\n        this.temp.clear();\n        const { rowStart, rowEnd, columnStart, columnEnd } = this.generateRange(node, state);\n        for (let i = rowStart; i <= rowEnd; i++) {\n            for (let j = columnStart as number; j <= columnEnd; j++) {\n                this.temp.has(i) ? this.temp.get(i).add(j) :\n                    this.temp.set(i, new Set<number>()).get(i).add(j);\n            }\n        }\n    }\n\n    dragSelect(node: ISelectionNode, state: SelectionState): void {\n        if (!this.pointerState.ctrl) {\n            this.selection.clear();\n        }\n        this.selectRange(node, state);\n    }\n\n    clear(): void {\n        this.selection.clear();\n        this.temp.clear();\n        this._ranges.clear();\n    }\n\n    clearTextSelection() {\n        const selection = window.getSelection();\n        if (selection) {\n            selection.removeAllRanges();\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    OnInit,\n    OnDestroy,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { getNodeSizeViaRange, ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS, NAVIGATION_KEYS, isIE } from '../core/utils';\nimport { State } from '../services/index';\nimport { IgxGridBaseComponent, IGridEditEventArgs, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, ISelectionNode, IgxGridCRUDService } from '../core/grid-selection';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\n/**\n * Providing reference to `IgxGridCellComponent`:\n * ```typescript\n * @ViewChild('grid', { read: IgxGridComponent })\n *  public grid: IgxGridComponent;\n * ```\n * ```typescript\n *  let column = this.grid.columnList.first;\n * ```\n * ```typescript\n *  let cell = column.cells[0];\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-grid-cell',\n    templateUrl: './cell.component.html'\n})\nexport class IgxGridCellComponent implements OnInit, OnChanges, OnDestroy {\n\n    /**\n     * Gets the column of the cell.\n     * ```typescript\n     *  let cellColumn = this.cell.column;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the row of the cell.\n     * ```typescript\n     * let cellRow = this.cell.row;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public row: any;\n\n    /**\n     * Gets the data of the row of the cell.\n     * ```typescript\n     * let rowData = this.cell.rowData;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public rowData: any;\n\n    /**\n     * Sets/gets the template of the cell.\n     * ```html\n     * <ng-template #cellTemplate igxCell let-value>\n     *   <div style=\"font-style: oblique; color:blueviolet; background:red\">\n     *       <span>{{value}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild('cellTemplate',{read: TemplateRef})\n     * cellTemplate: TemplateRef<any>;\n     * ```\n     * ```typescript\n     * this.cell.cellTemplate = this.cellTemplate;\n     * ```\n     * ```typescript\n     * let template =  this.cell.cellTemplate;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public cellTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the cell value.\n     * ```typescript\n     * this.cell.value = \"Cell Value\";\n     * ```\n     * ```typescript\n     * let cellValue = this.cell.value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * Sets/gets the highlight class of the cell.\n     * Default value is `\"igx-highlight\"`.\n     * ```typescript\n     * let highlightClass = this.cell.highlightClass;\n     * ```\n     * ```typescript\n     * this.cell.highlightClass = 'igx-cell-highlight';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightClass = 'igx-highlight';\n\n    /**\n     * Sets/gets the active highlight class class of the cell.\n     * Default value is `\"igx-highlight__active\"`.\n     * ```typescript\n     * let activeHighlightClass = this.cell.activeHighlightClass;\n     * ```\n     * ```typescript\n     * this.cell.activeHighlightClass = 'igx-cell-highlight_active';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public activeHighlightClass = 'igx-highlight__active';\n\n    /**\n     * Gets the cell formatter.\n     * ```typescript\n     * let cellForamatter = this.cell.formatter;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    formatter: (value: any) => any;\n\n    /**\n     * Gets the cell template context object.\n     * ```typescript\n     *  let context = this.cell.context();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get context(): any {\n        return {\n            $implicit: this.value,\n            cell: this\n        };\n    }\n\n    /**\n     * Gets the cell template.\n     * ```typescript\n     * let template = this.cell.template;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.editMode) {\n            const inlineEditorTemplate = this.column.inlineEditorTemplate;\n            return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;\n        }\n        if (this.cellTemplate) {\n            return this.cellTemplate;\n        }\n        return this.defaultCellTemplate;\n    }\n\n    /**\n     * Gets the `id` of the grid in which the cell is stored.\n     * ```typescript\n     * let gridId = this.cell.gridID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get gridID(): any {\n        return this.row.gridID;\n    }\n\n    /**\n     * Gets the grid of the cell.\n     * ```typescript\n     * let grid = this.cell.grid;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the `index` of the row where the cell is stored.\n     * ```typescript\n     * let rowIndex = this.cell.rowIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-rowIndex')\n    get rowIndex(): number {\n        return this.row.index;\n    }\n\n    /**\n     * Gets the `index` of the cell column.\n     * ```typescript\n     * let columnIndex = this.cell.columnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get columnIndex(): number {\n        return this.column.index;\n    }\n\n    /**\n     * Gets the visible `index` of the in which the cell is stored.\n     * ```typescript\n     * let visibleColumnIndex = this.cell.visibleColumnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-visibleIndex')\n    @Input()\n    visibleColumnIndex = -1;\n\n    /**\n     * Gets the ID of the cell.\n     * ```typescript\n     * let cellID = this.cell.cellID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get cellID() {\n        const primaryKey = this.grid.primaryKey;\n        const rowID = primaryKey ? this.rowData[primaryKey] : this.rowData;\n        return { rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };\n    }\n\n    /**\n     * Returns a reference to the nativeElement of the cell.\n     * ```typescript\n     * let cellNativeElement = this.cell.nativeElement;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get nativeElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @deprecated\n     * Use `cell.editMode` as a getter and\n     * `cell.setEditMode(true | false)` to start/exit edit mode.\n     *\n     * Gets/sets whether the cell is in edit mode.\n     * ```typescript\n     * let isCellInEditMode = this.cell.inEditMode;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @DeprecateProperty(`'inEditMode' is deprecated\\nUse 'editMode' to get the current state and 'setEditMode(boolean)' as a setter`)\n    get inEditMode(): boolean {\n        return this.editMode;\n    }\n\n    set inEditMode(value: boolean) {\n        this.setEditMode(value);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--pinned-last')\n    lastPinned = false;\n\n    /**\n     * Returns whether the cell is in edit mode.\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--editing')\n    editMode = false;\n\n    /**\n     * Sets/get the `tabindex` property of the cell.\n     * Default value is `0`.\n     * ```typescript\n     * this.cell.tabindex = 1;\n     * ```\n     * ```typescript\n     * let cellTabIndex = this.cell.tabindex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Sets/get the `role` property of the cell.\n     * Default value is `\"gridcell\"`.\n     * ```typescript\n     * this.cell.role = 'grid-cell';\n     * ```\n     * ```typescript\n     * let cellRole = this.cell.role;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'gridcell';\n\n    /**\n     * Gets whether the cell is editable.\n     * ```typescript\n     * let isCellReadonly = this.cell.readonly;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-readonly')\n    get readonly(): boolean {\n        return !this.column.editable;\n    }\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n    /**\n     * Returns a string containing the grid `id` and the column `field` concatenated by \"_\".\n     * ```typescript\n     * let describedBy = this.cell.describedBy;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedby(): string {\n        return `${this.row.gridID}_${this.column.field}`;\n    }\n\n    /**\n     * Gets the width of the cell.\n     * ```typescript\n     * let cellWidth = this.cell.width;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    @Input()\n    width = '';\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isSelected = this.cell.selected;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-grid__td--selected')\n    get selected() {\n        return this.isCellSelected();\n    }\n\n    /**\n     * Selects/deselects the cell.\n     * ```typescript\n     * this.cell.selected = true.\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    set selected(val: boolean) {\n        const node = this.selectionNode;\n        val ? this.selectionService.add(node) : this.selectionService.remove(node);\n    }\n\n    @HostBinding('class.igx-grid__td--edited')\n    get dirty() {\n        if (this.grid.rowEditable) {\n            const rowCurrentState = this.grid.transactions.getAggregatedValue(this.row.rowID, false);\n            if (rowCurrentState) {\n                return rowCurrentState[this.column.field] !== undefined && rowCurrentState[this.column.field] !== null;\n            }\n        } else {\n            const rowTransaction: State = this.grid.transactions.getState(this.row.rowID);\n            return rowTransaction && rowTransaction.value && rowTransaction.value[this.column.field];\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * this.cell.editValue = value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public set editValue(value) {\n        if (this.crudService.inEditMode) {\n            this.crudService.cell.editValue = value;\n        }\n    }\n\n    /**\n     * Gets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * let editValue = this.cell.editValue;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get editValue() {\n        if (this.crudService.inEditMode) {\n            return this.crudService.cell.editValue;\n        }\n    }\n\n    /**\n     * Returns whether the cell is editable.\n     */\n    get editable(): boolean {\n        return this.column.editable;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-grid__td--active')\n    public focused = false;\n\n    @ViewChild('defaultCell', { read: TemplateRef })\n    protected defaultCellTemplate: TemplateRef<any>;\n\n    @ViewChild('inlineEditor', { read: TemplateRef })\n    protected inlineEditorTemplate: TemplateRef<any>;\n\n    @ViewChild(IgxTextHighlightDirective, { read: IgxTextHighlightDirective })\n    protected set highlight(value: IgxTextHighlightDirective) {\n        this._highlight = value;\n\n        if (this._highlight && this.grid.lastSearchInfo.searchText) {\n            this._highlight.highlight(this.grid.lastSearchInfo.searchText,\n                this.grid.lastSearchInfo.caseSensitive,\n                this.grid.lastSearchInfo.exactMatch);\n            this._highlight.activateIfNecessary();\n        }\n    }\n\n    protected get highlight() {\n        return this._highlight;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return { row: this.rowIndex, column: this.visibleColumnIndex };\n    }\n\n    protected isInCompositionMode = false;\n    protected compositionStartHandler;\n    protected compositionEndHandler;\n    protected focusHandlerIE;\n    protected focusOut;\n    private _highlight: IgxTextHighlightDirective;\n\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public selection: IgxSelectionAPIService,\n        public cdr: ChangeDetectorRef,\n        private element: ElementRef,\n        protected zone: NgZone) { }\n\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerdown', this.pointerdown);\n            this.nativeElement.addEventListener('pointerenter', this.pointerenter);\n            this.nativeElement.addEventListener('pointerup', this.pointerup);\n\n            // IE 11 workarounds\n            if (isIE()) {\n                this.compositionStartHandler = () => this.isInCompositionMode = true;\n                this.compositionEndHandler = () => this.isInCompositionMode = false;\n                // Hitting Enter with IME submits and exits from edit mode instead of first closing the IME dialog\n                this.nativeElement.addEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.addEventListener('compositionend', this.compositionEndHandler);\n\n                // https://stackoverflow.com/q/51404782\n                this.focusHandlerIE = (e: FocusEvent) => this.onFocus(e);\n                this.focusOut = () => this.onBlur();\n                this.nativeElement.addEventListener('focusin', this.focusHandlerIE);\n                this.nativeElement.addEventListener('focusout', this.focusOut);\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerdown', this.pointerdown);\n            this.nativeElement.removeEventListener('pointerenter', this.pointerenter);\n            this.nativeElement.removeEventListener('pointerup', this.pointerup);\n\n            if (isIE()) {\n                this.nativeElement.removeEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.removeEventListener('compositionend', this.compositionEndHandler);\n                this.nativeElement.removeEventListener('focusin', this.focusHandlerIE);\n                this.nativeElement.removeEventListener('focusout', this.focusOut);\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    _updateCRUDStatus() {\n        if (this.editable && this.crudService.inEditMode && !this.row.deleted) {\n            this.gridAPI.update_cell(this.crudService.cell, this.crudService.cell.editValue);\n            this.crudService.end();\n            this.grid.cdr.markForCheck();\n            this.crudService.begin(this);\n        } else if (this.crudService.inEditMode) {\n            this.grid.endEdit(true);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public _updateCellSelectionStatus() {\n        if (this.editMode) {\n            return;\n        }\n\n        const node = this.selectionNode;\n\n        this._updateCRUDStatus();\n        this.selectionService.keyboardStateOnFocus(node, this.grid.onRangeSelection);\n    }\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isCellSelected = thid.cell.isCellSelected();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public isCellSelected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.value && !changes.value.firstChange) {\n            if (this.highlight) {\n                this.highlight.lastSearchInfo.searchedText = this.grid.lastSearchInfo.searchText;\n                this.highlight.lastSearchInfo.caseSensitive = this.grid.lastSearchInfo.caseSensitive;\n                this.highlight.lastSearchInfo.exactMatch = this.grid.lastSearchInfo.exactMatch;\n            }\n        }\n    }\n\n    /**\n     * Starts/ends edit mode for the cell.\n     *\n     * ```typescript\n     * cell.setEditMode(true);\n     * ```\n     */\n    setEditMode(value: boolean): void {\n        if (this.row.deleted) {\n            return;\n        }\n        if (this.editable && value) {\n            this.gridAPI.submit_value();\n            this.crudService.begin(this);\n        } else {\n            this.gridAPI.escape_editMode();\n        }\n        this.grid.cdr.markForCheck();\n    }\n\n    /**\n     * Sets new value to the cell.\n     * ```typescript\n     * this.cell.update('New Value');\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    // TODO: Refactor\n    public update(val: any) {\n        if (this.row.deleted) {\n            return;\n        }\n        const cell = this.crudService.createCell(this);\n        const args = this.gridAPI.update_cell(cell, val);\n        if (this.crudService.cell && this.crudService.sameCell(cell)) {\n            if (args.cancel) {\n                return;\n            }\n            this.gridAPI.escape_editMode();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerdown = (event: PointerEvent) => {\n        this.selectionService.pointerDown(this.selectionNode,\n            event.shiftKey, event.ctrlKey);\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerenter = (event: PointerEvent) => {\n        const dragMode = this.selectionService.pointerEnter(this.selectionNode, event.buttons === 1);\n        if (dragMode) {\n            this.grid.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    pointerup = () => {\n        if (this.selectionService.pointerUp(this.selectionNode, this.grid.onRangeSelection)) {\n            this.grid.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('dblclick', ['$event'])\n    public onDoubleClick(event: MouseEvent) {\n        if (this.editable && !this.editMode && !this.row.deleted) {\n            this.crudService.begin(this);\n        }\n\n        this.grid.onDoubleClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        this.grid.onCellClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('contextmenu', ['$event'])\n    public onContextMenu(event: MouseEvent) {\n        this.grid.onContextMenu.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event: FocusEvent) {\n        this.focused = true;\n        this.row.focused = true;\n        this._updateCellSelectionStatus();\n        if (!this.selectionService.isActiveNode(this.selectionNode)) {\n            this.grid.onSelection.emit({ cell: this, event });\n        }\n        this.selectionService.activeElement = this.selectionNode;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n        this.row.focused = false;\n    }\n\n    protected handleAlt(key: string, event: KeyboardEvent) {\n        if (this.row.nativeElement.tagName.toLowerCase() === 'igx-tree-grid-row' && this.isToggleKey(key)) {\n            const collapse = (this.row as any).expanded && ROW_COLLAPSE_KEYS.has(key);\n            const expand = !(this.row as any).expanded && ROW_EXPAND_KEYS.has(key);\n            if (collapse) {\n                (this.gridAPI as any).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n            } else if (expand) {\n                (this.gridAPI as any).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n            }\n        }\n    }\n\n    protected handleTab(shift: boolean) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.row.nativeElement, this.rowIndex, this.visibleColumnIndex);\n        } else {\n            this.grid.navigation.performTab(this.row.nativeElement, this.rowIndex, this.visibleColumnIndex);\n        }\n    }\n\n    protected handleEnd(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToLastCell();\n        } else {\n            this.grid.navigation.onKeydownEnd(this.rowIndex);\n        }\n    }\n\n    protected handleHome(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToFirstCell();\n        } else {\n            this.grid.navigation.onKeydownHome(this.rowIndex);\n        }\n    }\n\n    // TODO: Refactor\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        const shift = event.shiftKey;\n        const ctrl = event.ctrlKey;\n        const node = this.selectionNode;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n\n        const keydownArgs = { targetType: 'dataCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            this.selectionService.keyboardStateOnKeydown(node, shift, shift && key === 'tab');\n            return;\n        }\n\n        if (event.altKey) {\n            event.preventDefault();\n            this.handleAlt(key, event);\n            return;\n        }\n\n        this.selectionService.keyboardStateOnKeydown(node, shift, shift && key === 'tab');\n\n\n        if (key === 'tab') {\n            event.preventDefault();\n        }\n\n        if (this.editMode) {\n            if (NAVIGATION_KEYS.has(key)) {\n                if (this.column.inlineEditorTemplate) { return; }\n                if (['date', 'boolean'].indexOf(this.column.dataType) > -1) { return; }\n                return;\n            }\n        }\n\n        if (NAVIGATION_KEYS.has(key)) {\n            event.preventDefault();\n        }\n\n        // TODO: to be deleted when onFocusChange event is removed #4054\n        const args = { cell: this, groupRow: null, event: event, cancel: false };\n        this.grid.onFocusChange.emit(args);\n        if (args.cancel) {\n            return;\n        }\n\n        switch (key) {\n            case 'tab':\n                this.handleTab(shift);\n                break;\n            case 'end':\n                this.handleEnd(ctrl);\n                break;\n            case 'home':\n                this.handleHome(ctrl);\n                break;\n            case 'arrowleft':\n            case 'left':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownHome(node.row);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, node.row, node.column);\n                break;\n            case 'arrowright':\n            case 'right':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownEnd(node.row);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, node.row, node.column);\n                break;\n            case 'arrowup':\n            case 'up':\n                if (ctrl) {\n                    this.grid.navigation.navigateTop(node.column);\n                    break;\n                }\n                this.grid.navigation.navigateUp(this.row.nativeElement, node.row, node.column);\n                break;\n            case 'arrowdown':\n            case 'down':\n                if (ctrl) {\n                    this.grid.navigation.navigateBottom(node.column);\n                    break;\n                }\n                this.grid.navigation.navigateDown(this.row.nativeElement, node.row, node.column);\n                break;\n            case 'enter':\n            case 'f2':\n                this.onKeydownEnterEditMode();\n                break;\n            case 'escape':\n            case 'esc':\n                this.onKeydownExitEditMode();\n                break;\n            case ' ':\n            case 'spacebar':\n            case 'space':\n                if (this.row.rowSelectable) {\n                    this.row.checkboxElement.toggle();\n                }\n                break;\n            default:\n                return;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownEnterEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n        if (this.column.editable && !this.row.deleted) {\n            if (this.editMode) {\n                this.grid.endEdit(true);\n                this.nativeElement.focus();\n            } else {\n                this.crudService.begin(this);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownExitEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n\n        if (this.editMode) {\n            const v = this.crudService.cell;\n            const args = {\n                cellID: v.id,\n                rowID: v.id.rowID,\n                oldValue: v.value,\n                newValue: v.editValue,\n                cancel: false\n            } as IGridEditEventArgs;\n            this.grid.onCellEditCancel.emit(args);\n            if (args.cancel) {\n                return;\n            }\n            this.grid.endEdit(false);\n            this.nativeElement.focus();\n        }\n    }\n\n    /**\n     * If the provided string matches the text in the cell, the text gets highlighted.\n     * ```typescript\n     * this.cell.highlightText('Cell Value', true);\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightText(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.highlight && this.column.searchable ? this.highlight.highlight(text, caseSensitive, exactMatch) : 0;\n    }\n\n    /**\n     * Clears the highlight of the text in the cell.\n     * ```typescript\n     * this.cell.clearHighLight();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public clearHighlight() {\n        if (this.highlight && this.column.searchable) {\n            this.highlight.clearHighlight();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public calculateSizeToFit(range: any): number {\n        return Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n    }\n\n    private isToggleKey(key: string): boolean {\n        return ROW_COLLAPSE_KEYS.has(key) || ROW_EXPAND_KEYS.has(key);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    Input,\n    QueryList,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxCheckboxComponent } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { TransactionType, State } from '../services';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, IgxGridCRUDService, IgxRow } from '../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-row',\n    templateUrl: './grid/grid-row.component.html'\n})\nexport class IgxRowComponent<T extends IgxGridBaseComponent & IGridDataBindable> implements DoCheck {\n\n    private _rowData: any;\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public get rowData(): any {\n        if (this.inEditMode) {\n            return Object.assign({}, this._rowData, this.grid.transactions.getAggregatedValue(this.rowID, false));\n        }\n        return this._rowData;\n    }\n\n    public set rowData(v: any) {\n        this._rowData = v;\n    }\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(forwardRef(() => IgxCheckboxComponent), { read: IgxCheckboxComponent })\n    public checkboxElement: IgxCheckboxComponent;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxGridCellComponent))\n    public cells: QueryList<IgxGridCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return this.resolveClasses();\n    }\n\n    /**\n     * @hidden\n     */\n    get columns(): IgxColumnComponent[] {\n        return this.grid.visibleColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowSelectable(): boolean {\n        return this.grid.rowSelectable;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showRowCheckboxes(): boolean {\n        return this.grid.showRowCheckboxes;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-selected')\n    public isSelected: boolean;\n\n    /** @hidden */\n    public get dirty(): boolean {\n        const row: State = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD || row.type === TransactionType.UPDATE;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowDraggable(): boolean {\n        return this.grid.rowDraggable;\n    }\n\n    /** @hidden */\n    public get added(): boolean {\n        const row: State = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD;\n        }\n\n         return false;\n    }\n\n    /** @hidden */\n    public get deleted(): boolean {\n        return this.gridAPI.row_deleted_transaction(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    public dragging = false;\n\n    // TODO: Refactor\n    public get inEditMode(): boolean {\n        if (this.grid.rowEditable) {\n            const editRowState = this.crudService.row;\n            return (editRowState && editRowState.id === this.rowID) || false;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    get grid(): T {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the ID of the row.\n     * A row in the grid is identified either by:\n     * - primaryKey data value,\n     * - the whole rowData, if the primaryKey is omitted.\n     *\n     * ```typescript\n     * let rowID = this.grid.selectedRows[2].rowID;\n     * ```\n     */\n    public get rowID() {\n        const primaryKey = this.grid.primaryKey;\n        return primaryKey ? this._rowData[primaryKey] : this._rowData;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public focused = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public defaultCssClass = 'igx-grid__tr';\n\n    /**\n     * @hidden\n     */\n    protected _rowSelection = false;\n\n    constructor(public gridAPI: GridBaseAPIService<T>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        private selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n\n    /**\n     * @hidden\n     */\n    public onCheckboxClick(event) {\n        const newSelection = (event.checked) ?\n            this.selection.add_item(this.gridID, this.rowID) :\n            this.selection.delete_item(this.gridID, this.rowID);\n        this.grid.triggerRowSelectionChange(newSelection, this, event);\n    }\n\n    /**\n     * Updates the specified row object and the data source record with the passed value.\n     * This method emits `onEditDone` event.\n     *\n     * ```typescript\n     * // update the second selected row's value\n     * let newValue = \"Apple\";\n     * this.grid.selectedRows[1].update(newValue);\n     * ```\n     */\n    public update(value: any) {\n        const crudService = this.crudService;\n        if (crudService.inEditMode && crudService.cell.id.rowID === this.rowID) {\n            this.grid.endEdit(false);\n        }\n        const row = new IgxRow(this.rowID, this.index, this.rowData);\n        this.gridAPI.update_row(row, value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Removes the specified row from the grid's data source.\n     * This method emits `onRowDeleted` event.\n     *\n     * ```typescript\n     * // delete the third selected row from the grid\n     * this.grid.selectedRows[2].delete();\n     * ```\n     */\n    public delete() {\n        this.grid.deleteRowById(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    get rowCheckboxAriaLabel() {\n        return this.grid.primaryKey ?\n            this.isSelected ? 'Deselect row with key ' + this.rowID : 'Select row with key ' + this.rowID :\n            this.isSelected ? 'Deselect row' : 'Select row';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isSelected = this.rowSelectable ?\n            this.grid.allRowsSelected ? true : this.selection.is_item_selected(this.gridID, this.rowID) :\n            this.selection.is_item_selected(this.gridID, this.rowID);\n        this.cdr.markForCheck();\n        if (this.checkboxElement) {\n            this.checkboxElement.checked = this.isSelected;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const indexClass = this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS;\n        const selectedClass = this.isSelected ? 'igx-grid__tr--selected' : '';\n        const editClass = this.inEditMode ? 'igx-grid__tr--edit' : '';\n        const dirtyClass = this.dirty ? 'igx-grid__tr--edited' : '';\n        const deletedClass = this.deleted ? 'igx-grid__tr--deleted' : '';\n        const mrlClass = this.grid.hasColumnLayouts ? 'igx-grid__tr--mrl' : '';\n        const dragClass = this.dragging ? 'igx-grid__tr--drag' : '';\n        return `${this.defaultCssClass} ${indexClass} ${selectedClass} ${editClass} ${dirtyClass}\n         ${deletedClass} ${mrlClass} ${dragClass}`.trim();\n    }\n\n    /**\n     * @hidden\n     */\n    public get resolveDragIndicatorClasses(): string {\n        const defaultDragIndicatorCssClass = 'igx-grid__drag-indicator';\n        const dragIndicatorOff = this.grid.rowDragging && !this.dragging ? 'igx-grid__drag-indicator--off' : '';\n        return `${defaultDragIndicatorCssClass} ${dragIndicatorOff}`;\n    }\n}\n","export interface ISummaryExpression {\n    fieldName: string;\n    customSummary?: any;\n}\nexport interface IgxSummaryResult {\n    key: string;\n    label: string;\n    summaryResult: any;\n}\n\nexport interface ISummaryRecord {\n    summaries: Map<string, IgxSummaryResult[]>;\n    max?: number;\n    cellIndentation?: number;\n}\n\nconst clear = (el) => el === 0 || Boolean(el);\nconst first = (arr) => arr[0];\nconst last = (arr) => arr[arr.length - 1];\n\nexport class IgxSummaryOperand {\n    /**\n     * Counts all the records in the data source.\n     * If filtering is applied, counts only the filtered records.\n     * ```typescript\n     * IgxSummaryOperand.count(dataSource);\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public static count(data: any[]): number {\n        return data.length;\n    }\n    /**\n     * Executes the static `count` method and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomSummary extends IgxSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"test\",\n     *       label: \"Test\",\n     *       summaryResult: IgxSummaryOperand.count(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomSummary;\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        return [{\n            key: 'count',\n            label: 'Count',\n            summaryResult: IgxSummaryOperand.count(data)\n        }];\n    }\n}\n\n// @dynamic\nexport class IgxNumberSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the minimum numeric value in the provided data records.\n     * If filtering is applied, returns the minimum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.min(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static min(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.min(a, b)) : 0;\n    }\n    /**\n     * Returns the maximum numeric value in the provided data records.\n     * If filtering is applied, returns the maximum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.max(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static max(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.max(a, b)) : 0;\n    }\n    /**\n     * Returns the sum of the numeric values in the provided data records.\n     * If filtering is applied, returns the sum of the numeric values in the data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.sum(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static sum(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => +a + +b) : 0;\n    }\n    /**\n     * Returns the average numeric value in the data provided data records.\n     * If filtering is applied, returns the average numeric value in the filtered data records.\n     * ```typescript\n     * IgxSummaryOperand.average(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static average(data: any[]): number {\n        return data.length && data.filter(clear).length ? this.sum(data) / this.count(data) : 0;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomNumberSummary extends IgxNumberSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"avg\",\n     *       label: \"Avg\",\n     *       summaryResult: IgxNumberSummaryOperand.average(data)\n     *     });\n     *     result.push({\n     *       key: \"max\",\n     *       label: \"Max\",\n     *       summaryResult: IgxNumberSummaryOperand.max(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomNumberSummary;\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        const result = super.operate(data);\n        result.push({\n            key: 'min',\n            label: 'Min',\n            summaryResult: IgxNumberSummaryOperand.min(data)\n        });\n        result.push({\n            key: 'max',\n            label: 'Max',\n            summaryResult: IgxNumberSummaryOperand.max(data)\n        });\n        result.push({\n            key: 'sum',\n            label: 'Sum',\n            summaryResult: IgxNumberSummaryOperand.sum(data)\n        });\n        result.push({\n            key: 'average',\n            label: 'Avg',\n            summaryResult: IgxNumberSummaryOperand.average(data)\n        });\n        return result;\n    }\n}\n\n// @dynamic\nexport class IgxDateSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the latest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.latest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static latest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            first(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Returns the earliest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.earliest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static earliest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            last(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomDateSummary extends IgxDateSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"latest\",\n     *       label: \"Latest Date\",\n     *       summaryResult: IgxDateSummaryOperand.latest(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomDateSummary;\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        const result = super.operate(data);\n        result.push({\n            key: 'earliest',\n            label: 'Earliest',\n            summaryResult: IgxDateSummaryOperand.earliest(data)\n        });\n        result.push({\n            key: 'latest',\n            label: 'Latest',\n            summaryResult: IgxDateSummaryOperand.latest(data)\n        });\n        return result;\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\n\n/** @hidden */\n@Injectable()\nexport class IgxColumnResizingService {\n\n    private pinnedMaxWidth: string;\n\n    /**\n     *@hidden\n     */\n    public startResizePos: number;\n    /**\n     * Indicates that a column is currently being resized.\n     */\n    public isColumnResizing: boolean;\n    /**\n     *@hidden\n     */\n    public resizeCursor: string = null;\n    /**\n     *@hidden\n     */\n    public showResizer = false;\n    /**\n     * The column being resized.\n     */\n    public column: IgxColumnComponent;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     *@hidden\n     */\n    get resizerHeight(): number {\n        let height = this.column.grid.getVisibleContentHeight();\n\n        // Column height multiplier in case there are Column Layouts. The resizer height need to take into account rowStart.\n        let columnHeightMultiplier = 1;\n        if (this.column.parent && this.column.parent.columnLayout) {\n            columnHeightMultiplier = this.column.grid.multiRowLayoutRowSize - this.column.rowStart + 1;\n        }\n\n        if (this.column.level !== 0) {\n            height -= this.column.topLevelParent.headerGroup.height - this.column.headerGroup.height * columnHeightMultiplier;\n        }\n\n        return height;\n    }\n\n    /**\n     * Returns the minimal possible width to which the column can be resized.\n     */\n    get restrictResizeMin(): number {\n        const columnLayoutMultiplier = this.column.grid.hasColumnLayouts ? this.column.gridColumnSpan : 1;\n        const actualMinWidth = parseFloat(this.column.minWidth);\n        const defaultMinWidth = parseFloat(this.column.defaultMinWidth) * columnLayoutMultiplier;\n\n        let minWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;\n        minWidth = minWidth < parseFloat(this.column.width) ? minWidth : parseFloat(this.column.width);\n\n        return this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width - minWidth;\n    }\n\n    /**\n     * Returns the maximal possible width to which the column can be resized.\n     */\n    get restrictResizeMax(): number {\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        if (this.column.pinned) {\n            const pinnedMaxWidth = this.pinnedMaxWidth =\n                this.column.grid.calcPinnedContainerMaxWidth - this.column.grid.getPinnedWidth(true) + actualWidth;\n\n            if (this.column.maxWidth && parseFloat(this.column.maxWidth) < pinnedMaxWidth) {\n                this.pinnedMaxWidth = this.column.maxWidth;\n\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return pinnedMaxWidth - actualWidth;\n            }\n        } else {\n            if (this.column.maxWidth) {\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return Number.MAX_SAFE_INTEGER;\n            }\n        }\n    }\n\n    /**\n     * Autosizes the column to the longest currently visible cell value, including the header cell.\n     * If the column has a predifined maxWidth and the autosized column width will become bigger than it,\n     * then the column is sized to its maxWidth.\n     * If the column is pinned and the autosized column width will cause the pinned area to become bigger\n     * than the maximum allowed pinned area width (80% of the total grid width), autosizing will be deismissed.\n     */\n    public autosizeColumnOnDblClick() {\n        const currentColWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        const size = this.column.getLargestCellWidth();\n\n        if (this.column.pinned) {\n            const newPinnedWidth = this.column.grid.getPinnedWidth(true) - currentColWidth + parseFloat(size);\n\n            if (newPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                this.column.width = size;\n            }\n        } else if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {\n            this.column.width = parseFloat(this.column.maxWidth) + 'px';\n        } else if (parseFloat(size) < parseFloat(this.column.defaultMinWidth)) {\n            this.column.width = this.column.defaultMinWidth + 'px';\n        } else {\n            this.column.width = size;\n        }\n\n        this.zone.run(() => {});\n\n        this.column.grid.reflow();\n        this.column.grid.onColumnResized.emit({\n            column: this.column,\n            prevWidth: currentColWidth.toString(),\n            newWidth: this.column.width\n        });\n    }\n\n    /**\n     * Resizes the column regaridng to the column minWidth and maxWidth.\n     */\n    public resizeColumn(event: MouseEvent) {\n        this.showResizer = false;\n        const diff = event.clientX - this.startResizePos;\n\n        let currentColWidth = parseFloat(this.column.width);\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const colMinWidth = this.getColMinWidth(this.column);\n        const colMaxWidth = this.getColMaxWidth(this.column);\n        if (this.column.grid.hasColumnLayouts) {\n            this.resizeColumnLayoutFor(this.column, diff);\n        } else {\n            if (currentColWidth + diff < colMinWidth) {\n                this.column.width = colMinWidth + 'px';\n            } else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {\n                this.column.width = colMaxWidth + 'px';\n            } else {\n                this.column.width = (currentColWidth + diff) + 'px';\n            }\n        }\n\n        this.zone.run(() => {});\n        this.column.grid.reflow();\n\n        if (currentColWidth !== parseFloat(this.column.width)) {\n            this.column.grid.onColumnResized.emit({\n                column: this.column,\n                prevWidth: currentColWidth.toString(),\n                newWidth: this.column.width\n            });\n        }\n\n        this.isColumnResizing = false;\n    }\n\n    protected getColMinWidth(column: IgxColumnComponent) {\n        let currentColWidth = parseFloat(column.width);\n        const actualWidth = column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const columnLayoutMultiplier = column.grid.hasColumnLayouts ? column.gridColumnSpan : 1;\n        const actualMinWidth = parseFloat(column.minWidth);\n        const defaultMinWidth = parseFloat(column.defaultMinWidth) * columnLayoutMultiplier;\n        const colMinWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;\n        return colMinWidth < currentColWidth ? colMinWidth : currentColWidth;\n    }\n\n    protected getColMaxWidth(column: IgxColumnComponent) {\n        return column.pinned ? parseFloat(this.pinnedMaxWidth) : parseFloat(column.maxWidth);\n    }\n\n    protected resizeColumnLayoutFor(column: IgxColumnComponent, diff: number) {\n        const relativeColumns = column.getResizableColUnderEnd();\n        const combinedSpan = relativeColumns.reduce((acc, col) =>  acc + col.spanUsed, 0);\n\n        if (column.pinned) {\n            const pinnedWidth = this.column.grid.getPinnedWidth(true);\n            const maxPinnedWidth = this.column.grid.calcPinnedContainerMaxWidth;\n\n            if (pinnedWidth + diff > maxPinnedWidth) {\n                diff = maxPinnedWidth - pinnedWidth;\n            }\n        }\n\n        // Resize first those who might reach min/max width\n        let columnsToResize = [...relativeColumns];\n        let updatedDiff = diff;\n        let updatedCombinedSpan = combinedSpan;\n        let setMinMaxCols = false;\n        do {\n            // Cycle them until there are not ones that reach min/max size, because the diff accumulates after each cycle.\n            // This is because we can have at first 2 cols reaching min width and then after\n            // recalculating the diff there might be 1 more that reaches min width.\n            setMinMaxCols = false;\n            let newCombinedSpan = updatedCombinedSpan;\n            const newColsToResize = [];\n            columnsToResize.forEach((col) => {\n                const currentResizeWidth = parseFloat(col.target.calcWidth);\n                const resizeScaled = (diff / updatedCombinedSpan) * col.target.gridColumnSpan;\n\n                const minWidth = this.getColMinWidth(col.target);\n                const maxWidth = this.getColMaxWidth(col.target);\n                if (currentResizeWidth + resizeScaled < minWidth) {\n                    col.target.width = minWidth + 'px';\n                    updatedDiff += (currentResizeWidth - minWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else if (maxWidth && (currentResizeWidth + resizeScaled > maxWidth)) {\n                    col.target.width = maxWidth + 'px';\n                    updatedDiff -= (maxWidth - currentResizeWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else {\n                    // Save new ones that can be resized\n                    newColsToResize.push(col);\n                }\n            });\n\n            updatedCombinedSpan = newCombinedSpan;\n            columnsToResize = newColsToResize;\n        } while (setMinMaxCols);\n\n        // Those left that don't reach min/max size resize them normally.\n        columnsToResize.forEach((col) => {\n            const currentResizeWidth = parseFloat(col.target.calcWidth);\n            const resizeScaled = (updatedDiff / updatedCombinedSpan) * col.target.gridColumnSpan;\n            col.target.width = (currentResizeWidth + resizeScaled) + 'px';\n        });\n    }\n}\n","import { DOCUMENT, DatePipe, DecimalPipe } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    Inject,\n    Injectable,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    TemplateRef,\n    LOCALE_ID,\n    AfterViewInit,\n    HostListener\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject, Subscription } from 'rxjs';\nimport { map, switchMap, takeUntil, throttle, debounceTime } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxDragDirective, IgxDropDirective } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { ConnectedPositioningStrategy } from '../services';\nimport { VerticalAlignment, PositionSettings } from '../services/overlay/utilities';\nimport { scaleInVerBottom, scaleInVerTop } from '../animations/main';\nimport { KEYS } from '../core/utils';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';\n\nconst DEFAULT_DATE_FORMAT = 'mediumDate';\nconst DEBOUNCE_TIME = 200;\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizeHandle]'\n})\nexport class IgxResizeHandleDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input('igxResizeHandle')\n    public column: IgxColumnComponent;\n\n    /**\n     * @hidden\n     */\n    private _dblClick = false;\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private zone: NgZone,\n               private element: ElementRef,\n               public colResizingService: IgxColumnResizingService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (!this.column.columnGroup && this.column.resizable) {\n            this.zone.runOutsideAngular(() => {\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(\n                    debounceTime(DEBOUNCE_TIME),\n                    takeUntil(this.destroy$)\n                ).subscribe((event: MouseEvent) => {\n\n                    if (this._dblClick) {\n                        this._dblClick = false;\n                        return;\n                    }\n\n                    if (event.button === 0) {\n                        this._onResizeAreaMouseDown(event);\n                        this.column.grid.resizeLine.resizer.onMousedown(event);\n                    }\n                });\n            });\n\n            fromEvent(this.element.nativeElement, 'mouseup').pipe(\n                debounceTime(DEBOUNCE_TIME),\n                takeUntil(this.destroy$)\n            ).subscribe(() => {\n                this.colResizingService.showResizer = false;\n                this.column.grid.cdr.detectChanges();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onMouseOver() {\n        this.colResizingService.resizeCursor = 'col-resize';\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('dblclick')\n    public onDoubleClick() {\n        this._dblClick = true;\n        this.colResizingService.column = this.column;\n        this.colResizingService.autosizeColumnOnDblClick();\n    }\n\n    /**\n     * @hidden\n     */\n    private _onResizeAreaMouseDown(event) {\n        this.colResizingService.column = this.column;\n        this.colResizingService.isColumnResizing = true;\n        this.colResizingService.startResizePos = event.clientX;\n\n        this.colResizingService.showResizer = true;\n        this.column.grid.cdr.detectChanges();\n    }\n}\n\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizer]'\n})\nexport class IgxColumnResizerDirective implements OnInit, OnDestroy {\n\n    @Input()\n    public restrictHResizeMin: number = Number.MIN_SAFE_INTEGER;\n\n    @Input()\n    public restrictHResizeMax: number = Number.MAX_SAFE_INTEGER;\n\n    @Output()\n    public resizeEnd = new Subject<any>();\n\n    @Output()\n    public resizeStart = new Subject<any>();\n\n    @Output()\n    public resize = new Subject<any>();\n\n    private _left;\n    private _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, @Inject(DOCUMENT) public document, public zone: NgZone) {\n\n        this.resizeStart.pipe(\n            map((event) => event.clientX),\n            takeUntil(this._destroy),\n            switchMap((offset) => this.resize.pipe(\n                map((event) => event.clientX - offset),\n                takeUntil(this.resizeEnd),\n                takeUntil(this._destroy)\n            ))\n        ).subscribe((pos) => {\n\n            const left = this._left + pos;\n\n            const min = this._left - this.restrictHResizeMin;\n            const max = this._left + this.restrictHResizeMax;\n\n            this.left = left < min ? min : left;\n\n            if (left > max) {\n                this.left = max;\n            }\n        });\n\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.document.defaultView, 'mousemove').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy)\n            ).subscribe((res) => this.onMousemove(res));\n\n            fromEvent(this.document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onMouseup(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    public set left(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.left = val + 'px');\n    }\n\n    public set top(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.top = val + 'px');\n    }\n\n    onMouseup(event) {\n        this.resizeEnd.next(event);\n        this.resizeEnd.complete();\n    }\n\n    onMousedown(event) {\n        event.preventDefault();\n        const parent = this.element.nativeElement.parentElement.parentElement;\n\n        this.left = this._left = event.clientX - parent.getBoundingClientRect().left;\n        this.top = event.target.getBoundingClientRect().top - parent.getBoundingClientRect().top;\n\n        this.resizeStart.next(event);\n    }\n\n    onMousemove(event) {\n        event.preventDefault();\n        this.resize.next(event);\n    }\n}\n\n@Directive({\n    selector: '[igxFilterCellTemplate]'\n})\nexport class IgxFilterCellTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxCell]'\n})\nexport class IgxCellTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxHeader]'\n})\nexport class IgxCellHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxFooter]'\n})\nexport class IgxCellFooterTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxCellEditor]'\n})\nexport class IgxCellEditorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * @hidden\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxColumnMovingService {\n    private _icon: any;\n    private _column: IgxColumnComponent;\n\n    public cancelDrop: boolean;\n    public isColumnMoving: boolean;\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n    set column(val: IgxColumnComponent) {\n        if (val) {\n            this._column = val;\n        }\n    }\n\n    get icon(): any {\n        return this._icon;\n    }\n    set icon(val: any) {\n        if (val) {\n            this._icon = val;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport enum DropPosition {\n    BeforeDropTarget,\n    AfterDropTarget,\n    None\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrag]'\n})\nexport class IgxColumnMovingDragDirective extends IgxDragDirective implements OnDestroy {\n\n    @Input('igxColumnMovingDrag')\n    set data(val) {\n        this._column = val;\n    }\n\n    get column() {\n        return this._column;\n    }\n\n    get draggable(): boolean {\n        return this.column && (this.column.movable || (this.column.groupable && !this.column.columnGroup));\n    }\n\n    public get icon(): HTMLElement {\n        return this.cms.icon;\n    }\n\n    private subscription$: Subscription;\n    private _column: IgxColumnComponent;\n    private _ghostImageClass = 'igx-grid__drag-ghost-image';\n    private dragGhostImgIconClass = 'igx-grid__drag-ghost-image-icon';\n    private dragGhostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';\n\n    constructor(\n        _element: ElementRef,\n        _zone: NgZone,\n        _renderer: Renderer2,\n        _cdr: ChangeDetectorRef,\n        private cms: IgxColumnMovingService,\n    ) {\n        super(_cdr, _element, _zone, _renderer);\n    }\n\n    public ngOnDestroy() {\n        this._unsubscribe();\n    }\n\n    public onEscape(event) {\n        this.cms.cancelDrop = true;\n        this.onPointerUp(event);\n    }\n\n    public onPointerDown(event) {\n        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._removeOnDestroy = false;\n        this.cms.column = this.column;\n        this.ghostImageClass = this._ghostImageClass;\n\n        super.onPointerDown(event);\n\n        this.cms.isColumnMoving = true;\n        this.column.grid.cdr.detectChanges();\n\n        const args = {\n            source: this.column\n        };\n        this.column.grid.onColumnMovingStart.emit(args);\n\n        this.subscription$ = fromEvent(this.column.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n            if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                this.onEscape(ev);\n            }\n        });\n    }\n\n    public onPointerMove(event) {\n        event.preventDefault();\n        super.onPointerMove(event);\n\n        if (this._dragStarted && this.dragGhost && !this.column.grid.draggedColumn) {\n            this.column.grid.draggedColumn = this.column;\n            this.column.grid.cdr.detectChanges();\n        }\n\n        if (this.cms.isColumnMoving) {\n            const args = {\n                source: this.column,\n                cancel: false\n            };\n            this.column.grid.onColumnMoving.emit(args);\n\n            if (args.cancel) {\n                this.onEscape(event);\n            }\n        }\n    }\n\n    public onPointerUp(event) {\n        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.\n        this.zone.run(() => {\n            super.onPointerUp(event);\n\n            this.cms.isColumnMoving = false;\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        });\n\n        this._unsubscribe();\n    }\n\n    protected createDragGhost(event) {\n        super.createDragGhost(event);\n\n        let pageX, pageY;\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            pageX = event.pageX;\n            pageY = event.pageY;\n        } else {\n            pageX = event.touches[0].pageX;\n            pageY = event.touches[0].pageY;\n        }\n\n        this.dragGhost.style.height = null;\n        this.dragGhost.style.minWidth = null;\n        this.dragGhost.style.flexBasis = null;\n        this.dragGhost.style.position = null;\n\n        const icon = document.createElement('i');\n        const text = document.createTextNode('block');\n        icon.appendChild(text);\n\n        icon.classList.add('material-icons');\n        this.cms.icon = icon;\n\n        const hostElemLeft = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().left : 0;\n        const hostElemTop = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().top : 0;\n\n        if (!this.column.columnGroup) {\n            this.renderer.addClass(icon, this.dragGhostImgIconClass);\n\n            this.dragGhost.insertBefore(icon, this.dragGhost.firstElementChild);\n\n            this.left = this._dragStartX = pageX - ((this.dragGhost.getBoundingClientRect().width / 3) * 2) - hostElemLeft;\n            this.top = this._dragStartY = pageY - ((this.dragGhost.getBoundingClientRect().height / 3) * 2) - hostElemTop;\n        } else {\n            this.dragGhost.insertBefore(icon, this.dragGhost.childNodes[0]);\n\n            this.renderer.addClass(icon, this.dragGhostImgIconGroupClass);\n            this.dragGhost.children[0].style.paddingLeft = '0px';\n\n            this.left = this._dragStartX = pageX - ((this.dragGhost.getBoundingClientRect().width / 3) * 2) - hostElemLeft;\n            this.top = this._dragStartY = pageY - ((this.dragGhost.getBoundingClientRect().height / 3) * 2) - hostElemTop;\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$) {\n            this.subscription$.unsubscribe();\n            this.subscription$ = null;\n        }\n    }\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrop]'\n})\nexport class IgxColumnMovingDropDirective extends IgxDropDirective implements OnDestroy {\n    @Input('igxColumnMovingDrop')\n    set data(val: any) {\n        if (val instanceof IgxColumnComponent) {\n            this._column = val;\n        }\n\n        if (val instanceof IgxGridForOfDirective) {\n            this._hVirtDir = val;\n        }\n    }\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    get isDropTarget(): boolean {\n        return this._column && this._column.grid.hasMovableColumns && this.cms.column.movable && !this.cms.column.disablePinning;\n    }\n\n    get horizontalScroll(): any {\n        if (this._hVirtDir) {\n            return this._hVirtDir;\n        }\n    }\n\n    private _dropPos: DropPosition;\n    private _dropIndicator: any = null;\n    private _lastDropIndicator: any = null;\n    private _column: IgxColumnComponent;\n    private _hVirtDir: IgxGridForOfDirective<any>;\n    private _dragLeave = new Subject<boolean>();\n    private _dropIndicatorClass = 'igx-grid__th-drop-indicator--active';\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone, private cms: IgxColumnMovingService) {\n        super(elementRef, renderer, zone);\n    }\n\n    public ngOnDestroy() {\n        this._dragLeave.next(true);\n        this._dragLeave.complete();\n    }\n\n    public onDragOver(event) {\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n            if (this._lastDropIndicator) {\n                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n\n            const clientRect = this.elementRef.nativeElement.getBoundingClientRect();\n            const pos = clientRect.left + clientRect.width / 2;\n\n            const parent = this.elementRef.nativeElement.parentElement;\n            if (event.detail.pageX < pos) {\n                this._dropPos = DropPosition.BeforeDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.firstElementChild;\n            } else {\n                this._dropPos = DropPosition.AfterDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.lastElementChild;\n            }\n\n            if (this.cms.icon.innerText !== 'block') {\n                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n        }\n    }\n\n    public onDragEnter(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && this.cms.column.grid.id !== this.column.grid.id) {\n            this.cms.icon.innerText = 'block';\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n                if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {\n                    this.cms.icon.innerText = 'swap_horiz';\n                }\n\n                if (!this.cms.column.pinned && this.column.pinned) {\n                    const nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n\n                    if (nextPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                        this.cms.icon.innerText = 'lock';\n                    } else {\n                        this.cms.icon.innerText = 'block';\n                    }\n                }\n            } else {\n                this.cms.icon.innerText = 'block';\n            }\n\n            if (this.horizontalScroll) {\n                this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';\n\n                interval(100).pipe(takeUntil(this._dragLeave)).subscribe(() => {\n                    this.cms.column.grid.wheelHandler();\n                    event.target.id === 'right' ? this.horizontalScroll.getHorizontalScroll().scrollLeft += 15 :\n                        this.horizontalScroll.getHorizontalScroll().scrollLeft -= 15;\n                });\n            }\n    }\n\n    public onDragLeave(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        this.cms.icon.innerText = 'block';\n\n        if (this._dropIndicator) {\n            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n    }\n\n    public onDragDrop(event) {\n        event.preventDefault();\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && (this.cms.column.grid.id !== this.column.grid.id)) {\n            return;\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n\n        if (this.isDropTarget) {\n            const args = {\n                source: this.cms.column,\n                target: this.column\n            };\n\n            let nextPinnedWidth;\n            if (this.column.pinned && !this.cms.column.pinned) {\n                nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n            }\n\n            if ((nextPinnedWidth && nextPinnedWidth > this.column.grid.calcPinnedContainerMaxWidth) ||\n                this.column.level !== this.cms.column.level ||\n                this.column.parent !== this.cms.column.parent ||\n                this.cms.cancelDrop) {\n                    this.cms.cancelDrop = false;\n                    this.column.grid.onColumnMovingEnd.emit(args);\n                    return;\n            }\n\n            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);\n\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        }\n    }\n}\n@Directive({\n    selector: '[igxGridBody]',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxGridBodyDirective {}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdate'\n})\nexport class IgxDatePipeComponent extends DatePipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && value instanceof Date) {\n            if (locale) {\n                return super.transform(value, DEFAULT_DATE_FORMAT, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdecimal'\n})\nexport class IgxDecimalPipeComponent extends DecimalPipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && typeof value === 'number') {\n            if (locale) {\n                return super.transform(value, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport interface ContainerPositionSettings extends PositionSettings {\n    container?: HTMLElement;\n}\n\n/**\n * @hidden\n */\nexport class ContainerPositioningStrategy extends ConnectedPositioningStrategy {\n    isTop = false;\n    isTopInitialPosition = null;\n    public settings: ContainerPositionSettings;\n    position(contentElement: HTMLElement, size: { width: number, height: number }, document?: Document, initialCall?: boolean): void {\n        const container = this.settings.container; // grid.tbody\n        const target = <HTMLElement>this.settings.target; // current grid.row\n\n        // Position of the overlay depends on the available space in the grid.\n        // If the bottom space is not enough then the the row overlay will show at the top of the row.\n        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),\n        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).\n        this.isTop = this.isTopInitialPosition !== null ?\n            this.isTopInitialPosition :\n            container.getBoundingClientRect().bottom <\n                target.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;\n\n        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.\n        contentElement.style.width = target.clientWidth + 'px';\n        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;\n        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;\n\n        super.position(contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Input,\n    QueryList,\n    TemplateRef,\n    forwardRef\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxDateSummaryOperand, IgxNumberSummaryOperand, IgxSummaryOperand } from './summaries/grid-summary';\nimport { IgxRowComponent } from './row.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './grid.common';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { DefaultSortingStrategy, ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { getNodeSizeViaRange, flatten } from '../core/utils';\nimport {\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand,\n    IgxStringFilteringOperand,\n    IgxFilteringOperand } from '../data-operations/filtering-condition';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { MRLColumnSizeInfo, MRLResizeColumnInfo } from '../data-operations/multi-row-layout.interfaces';\n\n/**\n * **Ignite UI for Angular Column** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html#columns-configuration)\n *\n * The Ignite UI Column is used within an `igx-grid` element to define what data the column will show. Features such as sorting,\n * filtering & editing are enabled at the column level.  You can also provide a template containing custom content inside\n * the column using `ng-template` which will be used for all cells within the column.\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-column',\n    template: ``\n})\nexport class IgxColumnComponent implements AfterContentInit {\n    /**\n     * Sets/gets the `field` value.\n     * ```typescript\n     * let columnField = this.column.field;\n     * ```\n     * ```html\n     * <igx-column [field] = \"'ID'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public field: string;\n    /**\n     * Sets/gets the `header` value.\n     * ```typescript\n     * let columnHeader = this.column.header;\n     * ```\n     * ```html\n     * <igx-column [header] = \"'ID'\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public header = '';\n    /**\n     * Sets/gets whether the column is sortable.\n     * Default value is `false`.\n     * ```typescript\n     * let isSortable = this.column.sortable;\n     * ```\n     * ```html\n     * <igx-column [sortable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public sortable = false;\n    /**\n     * Sets/gets whether the column is groupable.\n     * Default value is `false`.\n     * ```typescript\n     * let isGroupable = this.column.groupable;\n     * ```\n     * ```html\n     * <igx-column [groupable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public groupable = false;\n    /**\n     * Sets/gets whether the column is editable.\n     * Default value is `false`.\n     * ```typescript\n     * let isEditable = this.column.editable;\n     * ```\n     * ```html\n     * <igx-column [editable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public editable = null;\n    /**\n     * Sets/gets whether the column is filterable.\n     * Default value is `true`.\n     * ```typescript\n     * let isFilterable = this.column.filterable;\n     * ```\n     * ```html\n     * <igx-column [filterable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public filterable = true;\n    /**\n     * Sets/gets whether the column is resizable.\n     * Default value is `false`.\n     * ```typescript\n     * let isResizable = this.column.resizable;\n     * ```\n     * ```html\n     * <igx-column [resizable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public resizable = false;\n    /**\n     * Gets a value indicating whether the summary for the column is enabled.\n     * ```typescript\n     * let hasSummary = this.column.hasSummary;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get hasSummary() {\n        return this._hasSummary;\n    }\n    /**\n     * Sets a value indicating whether the summary for the column is enabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hasSummary] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hasSummary(value) {\n        this._hasSummary = value;\n\n        if (this.grid) {\n            this.grid.summaryService.recalculateSummaries();\n        }\n    }\n    /**\n     * Gets whether the column is hidden.\n     * ```typescript\n     * let isHidden = this.column.hidden;\n     * ```\n     *@memberof IgxColumnComponent\n     */\n    @Input()\n    get hidden(): boolean {\n        return this._hidden;\n    }\n    /**\n     * Sets the column hidden property.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hidden(value: boolean) {\n        if (this._hidden !== value) {\n            this._hidden = value;\n            if (this.grid) {\n                this.grid.resetCaches();\n                this.grid.endEdit(false);\n            }\n            // TODO: Simplify\n            this.check();\n            if (this.grid) {\n                this.grid.refreshSearch(true);\n                this.grid.summaryService.resetSummaryHeight();\n                this.grid.reflow();\n                this.grid.filteringService.refreshExpressions();\n            }\n\n            if (this.parent && this.parent.columnLayout && this.parent.hidden !== value) {\n                this.parent.hidden = value;\n            }\n        }\n    }\n    /**\n     * Gets whether the hiding is disabled.\n     * ```typescript\n     * let isHidingDisabled =  this.column.disableHiding;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get disableHiding(): boolean {\n        return this._disableHiding;\n    }\n    /**\n     * Enables/disables hiding for the column.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set disableHiding(value: boolean) {\n        if (this._disableHiding !== value) {\n            this._disableHiding = value;\n            this.check();\n        }\n    }\n    /**\n     * Gets whether the pinning is disabled.\n     * ```typescript\n     * let isPinningDisabled =  this.column.disablePinning;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get disablePinning(): boolean {\n        return this._disablePinning;\n    }\n    /**\n     * Enables/disables pinning for the column.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set disablePinning(value: boolean) {\n        if (this._disablePinning !== value) {\n            this._disablePinning = value;\n            this.check();\n        }\n    }\n    /**\n     * Sets/gets whether the column is movable.\n     * Default value is `false`.\n     * ```typescript\n     * let isMovable = this.column.movable;\n     * ```\n     * ```html\n     * <igx-column [movable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public movable = false;\n    /**\n     * Gets the `width` of the column.\n     * ```typescript\n     * let columnWidth = this.column.width;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get width(): string {\n        return this.widthSetByUser ? this._width : this.defaultWidth;\n    }\n    /**\n     * Sets the `width` of the column.\n     * ```html\n     * <igx-column [width] = \"'25%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set width(value: string) {\n        if (value) {\n            this.widthSetByUser = true;\n            this._width = value;\n        }\n    }\n\n    public get calcWidth(): any {\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n        if (isPercentageWidth) {\n            return parseInt(colWidth, 10) / 100 * (this.grid.calcWidth - this.grid.featureColumnsWidth);\n        } else if (!colWidth) {\n            // no width\n            return this.defaultWidth || this.grid.getPossibleColumnWidth();\n        } else {\n            return this.width;\n        }\n    }\n\n    /**\n     * Sets/gets the maximum `width` of the column.\n     * ```typescript\n     * let columnMaxWidth = this.column.width;\n     * ```\n     * ```html\n     * <igx-column [maxWidth] = \"'75%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public maxWidth: string;\n    /**\n     * Sets/gets the minimum `width` of the column.\n     * Default value is `88`;\n     * ```typescript\n     * let columnMinWidth = this.column.minWidth;\n     * ```\n     * ```html\n     * <igx-column [minWidth] = \"'15%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public minWidth = this.defaultMinWidth;\n    /**\n     * Sets/gets the class selector of the column header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerClasses;\n     * ```\n     * ```html\n     * <igx-column [headerClasses] = \"'column-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public headerClasses = '';\n\n    /**\n     * Sets/gets the class selector of the column group header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerGroupClasses;\n     * ```\n     * ```html\n     * <igx-column [headerGroupClasses] = \"'column-group-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public headerGroupClasses = '';\n    /**\n     * Sets a conditional class selector of the column cells.\n     * Accepts an object literal, containing key-value pairs,\n     * where the key is the name of the CSS class, while the\n     * value is either a callback function that returns a boolean,\n     * or boolean, like so:\n     * ```typescript\n     * callback = (rowData, columnKey) => { return rowData[columnKey] > 6; }\n     * cellClasses = { 'className' : this.callback };\n     * ```\n     * ```html\n     * <igx-column [cellClasses] = \"cellClasses\"></igx-column>\n     * <igx-column [cellClasses] = \"{'class1' : true }\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public cellClasses: any;\n    /**\n     * Gets the column index.\n     * ```typescript\n     * let columnIndex = this.column.index;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get index(): number {\n        return this.grid.columns.indexOf(this);\n    }\n    /**\n     * Gets formatter for the column.\n     * ```typescript\n     * let columnFormatter = this.column.formatter;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    formatter: (value: any) => any;\n    /**\n     * Sets/gets whether the column filtering should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let filteringIgnoreCase = this.column.filteringIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [filteringIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public filteringIgnoreCase = true;\n    /**\n     * Sets/gets whether the column sorting should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let sortingIgnoreCase = this.column.sortingIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [sortingIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public sortingIgnoreCase = true;\n    /**\n     * Sets/gets the data type of the column values.\n     * Default value is `string`.\n     * ```typescript\n     * let columnDataType = this.column.dataType;\n     * ```\n     * ```html\n     * <igx-column [dataType] = \"'number'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public dataType: DataType = DataType.String;\n    /**\n     * Gets whether the column is `pinned`.\n     * ```typescript\n     * let isPinned = this.column.pinned;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get pinned(): boolean {\n        return this._pinned;\n    }\n    /**\n     * Sets whether the column is pinned.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set pinned(value: boolean) {\n        if (this._pinned !== value) {\n            if (this.grid && this.width && !isNaN(parseInt(this.width, 10))) {\n                value ? this.pin() : this.unpin();\n                return;\n            }\n            /* No grid/width available at initialization. `initPinning` in the grid\n               will re-init the group (if present)\n            */\n            this._pinned = value;\n        }\n    }\n    /**\n     * @deprecated\n     * Gets/Sets the `id` of the `igx-grid`.\n     * ```typescript\n     * let columnGridId = this.column.gridID;\n     * ```\n     * ```typescript\n     * this.column.gridID = 'grid-1';\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @DeprecateProperty(`The property is deprecated. Please, use \\`column.grid.id\\` instead.`)\n    public gridID: string;\n    /**\n     * Gets the column `summaries`.\n     * ```typescript\n     * let columnSummaries = this.column.summaries;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column `summaries`.\n     * ```typescript\n     * this.column.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set summaries(classRef: any) {\n        this._summaries = new classRef();\n\n        if (this.grid) {\n            this.grid.summaryService.removeSummariesCachePerColumn(this.field);\n            (this.grid as any)._summaryPipeTrigger++;\n            this.grid.summaryService.recalculateSummaries();\n        }\n    }\n    /**\n     * Sets/gets whether the column is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.column.searchable';\n     * ```\n     * ```html\n     *  <igx-column [searchable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column `filters`.\n     * ```typescript\n     * let columnFilters = this.column.filters'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get filters(): IgxFilteringOperand {\n        return this._filters;\n    }\n    /**\n     * Sets the column `filters`.\n     * ```typescript\n     * this.column.filters = IgxBooleanFilteringOperand.instance().\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set filters(instance: IgxFilteringOperand) {\n        this._filters = instance;\n    }\n    /**\n     * Gets the column `sortStrategy`.\n     * ```typescript\n     * let sortStrategy = this.column.sortStrategy'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get sortStrategy(): ISortingStrategy {\n        return this._sortStrategy;\n    }\n    /**\n     * Sets the column `sortStrategy`.\n     * ```typescript\n     * this.column.sortStrategy = new CustomSortingStrategy().\n     *\n     * class CustomSortingStrategy extends SortingStrategy {\n     * ...\n     * }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set sortStrategy(classRef: ISortingStrategy) {\n        this._sortStrategy = classRef;\n    }\n    /**\n    * Gets the function that compares values for grouping.\n    * ```typescript\n    * let groupingComparer = this.column.groupingComparer'\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    @Input()\n    public get groupingComparer(): (a: any, b: any) => number {\n        return this._groupingComparer;\n    }\n    /**\n     * Sets a custom function to compare values for grouping.\n     * Subsequent values in the sorted data that the function returns 0 for are grouped.\n     * ```typescript\n     * this.column.groupingComparer = (a: any, b: any) => { return a === b ? 0 : -1; }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set groupingComparer(funcRef: (a: any, b: any) => number) {\n        this._groupingComparer = funcRef;\n    }\n    /**\n     * Gets the default minimum `width` of the column.\n     * ```typescript\n     * let defaultMinWidth =  this.column.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get defaultMinWidth(): string {\n        return this._defaultMinWidth;\n    }\n    /**\n     * The reference to the `igx-grid` owner.\n     * ```typescript\n     * let gridComponent = this.column.grid;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public grid: IgxGridBaseComponent;\n    /**\n     * Returns a reference to the `bodyTemplate`.\n     * ```typescript\n     * let bodyTemplate = this.column.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input('cellTemplate')\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * Sets the body template.\n     * ```html\n     * <ng-template #bodyTemplate igxCell let-val>\n     *    <div style = \"background-color: yellowgreen\" (click) = \"changeColor(val)\">\n     *       <span> {{val}} </span>\n     *    </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'bodyTemplate'\", {read: TemplateRef })\n     * public bodyTemplate: TemplateRef<any>;\n     * this.column.bodyTemplate = this.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set bodyTemplate(template: TemplateRef<any>) {\n        this._bodyTemplate = template;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.column.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * Sets the header template.\n     * ```html\n     * <ng-template #headerTemplate>\n     *   <div style = \"background-color:black\" (click) = \"changeColor(val)\">\n     *       <span style=\"color:red\" >{{column.field}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'headerTemplate'\", {read: TemplateRef })\n     * public headerTemplate: TemplateRef<any>;\n     * this.column.headerTemplate = this.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) {\n        this._headerTemplate = template;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.column.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input('cellEditorTemplate')\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * Sets the inline editor template.\n     * ```html\n     * <ng-template #inlineEditorTemplate igxCellEditor let-cell=\"cell\">\n     *     <input type=\"string\" [(ngModel)]=\"cell.value\"/>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'inlineEditorTemplate'\", {read: TemplateRef })\n     * public inlineEditorTemplate: TemplateRef<any>;\n     * this.column.inlineEditorTemplate = this.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) {\n        this._inlineEditorTemplate = template;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Returns a reference to the `filterCellTemplate`.\n     * ```typescript\n     * let filterCellTemplate = this.column.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input('filterCellTemplate')\n    get filterCellTemplate(): TemplateRef<any> {\n        return this._filterCellTemplate;\n    }\n    /**\n     * Sets the quick filter template.\n     * ```html\n     * <ng-template #filterCellTemplate IgxFilterCellTemplate let-column=\"column\">\n     *    <input (input)=\"onInput()\">\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'filterCellTemplate'\", {read: TemplateRef })\n     * public filterCellTemplate: TemplateRef<any>;\n     * this.column.filterCellTemplate = this.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set filterCellTemplate(template: TemplateRef<any>) {\n        this._filterCellTemplate = template;\n    }\n    /**\n     * Gets the cells of the column.\n     * ```typescript\n     * let columnCells =  this.column.cells;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return this.grid.rowList.filter((row) => row instanceof IgxRowComponent)\n            .map((row) => {\n                if (row.cells) {\n                    return row.cells.filter((cell) => cell.columnIndex === this.index);\n                }\n            }).reduce((a, b) => a.concat(b), []);\n    }\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => !c.columnGroup);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => !c.columnGroup);\n        let col = this;\n        let vIndex = -1;\n\n        if (this.columnGroup) {\n            col = this.allChildren.filter(c => !c.columnGroup)[0] as any;\n        }\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(col);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(col);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnGroup() {\n        return false;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n\n    /**\n     * Returns the children columns collection.\n     * Returns an empty array if the column does not contain children columns.\n     * ```typescript\n     * let childrenColumns =  this.column.allChildren;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return [];\n    }\n    /**\n     * Returns the level of the column in a column group.\n     * Returns `0` if the column doesn't have a `parent`.\n     * ```typescript\n     * let columnLevel =  this.column.level;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get level() {\n        let ptr = this.parent;\n        let lvl = 0;\n\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parent;\n        }\n        return lvl;\n    }\n\n    get isLastPinned(): boolean {\n        return this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1] === this;\n    }\n    get gridRowSpan(): number {\n        return this.rowEnd && this.rowStart ? this.rowEnd - this.rowStart : 1;\n    }\n    get gridColumnSpan(): number {\n        return this.colEnd && this.colStart ? this.colEnd - this.colStart : 1;\n    }\n\n    /**\n     * Row index where the current field should end.\n     * The amount of rows between rowStart and rowEnd will determine the amount of spanning rows to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowEnd]=\"2\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public rowEnd: number;\n\n    /**\n     * Column index where the current field should end.\n     * The amount of columns between colStart and colEnd will determine the amount of spanning columns to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colEnd]=\"3\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public colEnd: number;\n\n    /**\n     * Row index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() rowStart: number;\n\n    /**\n     * Column index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colStart]=\"1\" [rowStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() colStart: number;\n\n    /**\n     * hidden\n     */\n    public defaultWidth: string;\n\n    /**\n     * hidden\n     */\n    public widthSetByUser: boolean;\n\n    /**\n     * Returns the filteringExpressionsTree of the column.\n     * ```typescript\n     * let tree =  this.column.filteringExpressionsTree;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get filteringExpressionsTree(): FilteringExpressionsTree {\n        return this.grid.filteringExpressionsTree.find(this.field) as FilteringExpressionsTree;\n    }\n    /**\n     * Sets/gets the parent column.\n     * ```typescript\n     * let parentColumn = this.column.parent;\n     * ```\n     * ```typescript\n     * this.column.parent = higherLevelColumn;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    parent = null;\n    /**\n     * Sets/gets the children columns.\n     * ```typescript\n     * let columnChildren = this.column.children;\n     * ```\n     * ```typescript\n     * this.column.children = childrenColumns;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    children: QueryList<IgxColumnComponent>;\n    /**\n     *@hidden\n     */\n    protected _unpinnedIndex;\n    /**\n     *@hidden\n     */\n    protected _pinned = false;\n    /**\n     *@hidden\n     */\n    protected _bodyTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _headerTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _inlineEditorTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _filterCellTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _summaries = null;\n    /**\n     *@hidden\n     */\n    protected _filters = null;\n    /**\n     *@hidden\n     */\n    protected _sortStrategy: ISortingStrategy = DefaultSortingStrategy.instance();\n    /**\n     *@hidden\n     */\n    protected _groupingComparer: (a: any, b: any) => number;\n    /**\n     *@hidden\n     */\n    protected _hidden = false;\n    /**\n     *@hidden\n     */\n    protected _index: number;\n    /**\n     *@hidden\n     */\n    protected _disableHiding = false;\n    /**\n     *@hidden\n     */\n    protected _disablePinning = false;\n    /**\n     *@hidden\n     */\n    protected _width: string;\n    /**\n     *@hidden\n     */\n    protected _defaultMinWidth = '80';\n    /**\n     *@hidden\n     */\n    protected _hasSummary = false;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellTemplateDirective, { read: IgxCellTemplateDirective })\n    protected cellTemplate: IgxCellTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellHeaderTemplateDirective, { read: IgxCellHeaderTemplateDirective })\n    protected headTemplate: IgxCellHeaderTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellEditorTemplateDirective, { read: IgxCellEditorTemplateDirective })\n    protected editorTemplate: IgxCellEditorTemplateDirective;\n\n    private _vIndex = NaN;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxFilterCellTemplateDirective, { read: IgxFilterCellTemplateDirective })\n    public filterCellTemplateDirective: IgxFilterCellTemplateDirective;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetVisibleIndex() {\n        this._vIndex = NaN;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.cellTemplate) {\n            this._bodyTemplate = this.cellTemplate.template;\n        }\n        if (this.headTemplate) {\n            this._headerTemplate = this.headTemplate.template;\n        }\n        if (this.editorTemplate) {\n            this._inlineEditorTemplate = this.editorTemplate.template;\n        }\n        if (this.filterCellTemplateDirective) {\n            this._filterCellTemplate = this.filterCellTemplateDirective.template;\n        }\n        if (!this.summaries) {\n            switch (this.dataType) {\n                case DataType.String:\n                case DataType.Boolean:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n                case DataType.Number:\n                    this.summaries = IgxNumberSummaryOperand;\n                    break;\n                case DataType.Date:\n                    this.summaries = IgxDateSummaryOperand;\n                    break;\n                default:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n            }\n        }\n        if (!this.filters) {\n            switch (this.dataType) {\n                case DataType.Boolean:\n                    this.filters = IgxBooleanFilteringOperand.instance();\n                    break;\n                case DataType.Number:\n                    this.filters = IgxNumberFilteringOperand.instance();\n                    break;\n                case DataType.Date:\n                    this.filters = IgxDateFilteringOperand.instance();\n                    break;\n                case DataType.String:\n                default:\n                    this.filters = IgxStringFilteringOperand.instance();\n                    break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getGridTemplate(isRow: boolean, isIE: boolean): string {\n        const colSpanAccum = (acc, val) => Math.max(val.colStart + val.gridColumnSpan - 1, acc);\n        const templateItems = !isRow ?\n            this.children && this.children.reduce(colSpanAccum, 1) || 1 :\n            this.grid.multiRowLayoutRowSize;\n        const generatedSizes = !isRow ? this.getColumnSizesString(this.children) : null;\n        return isIE ?\n        generatedSizes || `(1fr)[${templateItems}]` :\n            generatedSizes || `repeat(${templateItems},1fr)`;\n    }\n\n    public getInitialChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<MRLColumnSizeInfo> {\n        const columnSizes: MRLColumnSizeInfo[] = [];\n        // find the smallest col spans\n        children.forEach(col => {\n            if (!col.colStart) {\n                return;\n            }\n            const newWidthSet =  col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n            const newSpanSmaller = columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].colSpan > col.gridColumnSpan;\n            const bothWidthsSet = col.widthSetByUser && columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].widthSetByUser;\n            const bothWidthsNotSet = !col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n\n            if (columnSizes[col.colStart - 1] === undefined) {\n                // If nothing is defined yet take any column at first\n                // We use colEnd to know where the column actually ends, because not always it starts where we have it set in columnSizes.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (newWidthSet || (newSpanSmaller && ((bothWidthsSet) || (bothWidthsNotSet)))) {\n                // If a column is set already it should either not have width defined or have width with bigger span than the new one.\n\n                /**\n                 *  If replaced column has bigger span, we want to fill the remaining columns\n                 *  that the replacing column does not fill with the old one.\n                 **/\n                if (bothWidthsSet && newSpanSmaller) {\n                    // Start from where the new column set would end and apply the old column to the rest depending on how much it spans.\n                    // We have not yet replaced it so we can use it directly from the columnSizes collection.\n                    // This is where colEnd is used because the colStart of the old column is not actually i + 1.\n                    for (let i = col.colStart - 1 + col.gridColumnSpan; i < columnSizes[col.colStart - 1].colEnd - 1; i++) {\n                        if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                            columnSizes[i] = columnSizes[col.colStart - 1];\n                        } else {\n                            break;\n                        }\n                    }\n                }\n\n                // Replace the old column with the new one.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (bothWidthsSet && columnSizes[col.colStart - 1].colSpan < col.gridColumnSpan) {\n                // If the column already in the columnSizes has smaller span, we still need to fill any empty places with the current col.\n                // Start from where the smaller column set would end and apply the bigger column to the rest depending on how much it spans.\n                // Since here we do not have it in columnSizes we set it as a new column keeping the same colSpan.\n                for (let i = col.colStart - 1 + columnSizes[col.colStart - 1].colSpan; i < col.colStart - 1 + col.gridColumnSpan; i++) {\n                    if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                        columnSizes[i] = {\n                            ref: col,\n                            width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                            colSpan: col.gridColumnSpan,\n                            colEnd: col.colStart + col.gridColumnSpan,\n                            widthSetByUser: col.widthSetByUser\n                        };\n                    } else {\n                        break;\n                    }\n                }\n            }\n        });\n\n        // Flatten columnSizes so there are not columns with colSpan > 1\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && columnSizes[i].colSpan > 1) {\n                let j = 1;\n\n                // Replace all empty places depending on how much the current column spans starting from next col.\n                for (; j < columnSizes[i].colSpan && i + j + 1 < columnSizes[i].colEnd; j++) {\n                    if (columnSizes[i + j] &&\n                        ((!columnSizes[i].width && columnSizes[i + j].width) ||\n                         (!columnSizes[i].width && !columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan) ||\n                        (!!columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan))) {\n                        // If we reach an already defined column that has width and the current doesn't have or\n                        // if the reached column has bigger colSpan we stop.\n                        break;\n                    } else {\n                        const width = columnSizes[i].widthSetByUser ?\n                            columnSizes[i].width / columnSizes[i].colSpan :\n                            columnSizes[i].width;\n                        columnSizes[i + j] = {\n                            ref: columnSizes[i].ref,\n                            width: width,\n                            colSpan: 1,\n                            colEnd: columnSizes[i].colEnd,\n                            widthSetByUser: columnSizes[i].widthSetByUser\n                        };\n                    }\n                }\n\n                // Update the current column width so it is divided between all columns it spans and set it to 1.\n                columnSizes[i].width = columnSizes[i].widthSetByUser ?\n                    columnSizes[i].width / columnSizes[i].colSpan :\n                    columnSizes[i].width;\n                columnSizes[i].colSpan = 1;\n\n                // Update the index based on how much we have replaced. Subtract 1 because we started from 1.\n                i += j - 1;\n            }\n        }\n\n        return columnSizes;\n    }\n\n    protected getFilledChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<string> {\n        const columnSizes = this.getInitialChildColumnSizes(children);\n\n        // fill the gaps if there are any\n        const result: string[] = [];\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && !!columnSizes[i].width) {\n                result.push(columnSizes[i].width + 'px');\n            } else {\n                result.push(parseInt(this.grid.getPossibleColumnWidth(), 10) + 'px');\n            }\n        }\n        return result;\n    }\n\n    protected getColumnSizesString(children: QueryList<IgxColumnComponent>): string {\n       const res = this.getFilledChildColumnSizes(children);\n       return res.join(' ');\n    }\n\n    public getResizableColUnderEnd(): MRLResizeColumnInfo[] {\n        if (this.columnLayout || !this.parent.columnLayout || this.columnGroup) {\n            return [{ target: this, spanUsed: 1 }];\n        }\n\n        const columnSized = this.getInitialChildColumnSizes(this.parent.children);\n        const targets: MRLResizeColumnInfo[] = [];\n        const colEnd = this.colEnd ? this.colEnd : this.colStart + 1;\n\n        for (let i = 0; i < columnSized.length; i++) {\n            if (this.colStart <= i + 1 && i + 1 < colEnd) {\n                targets.push({ target: columnSized[i].ref, spanUsed: 1});\n            }\n        }\n\n        const targetsSquashed: MRLResizeColumnInfo[] = [];\n        for (let j = 0; j < targets.length; j++) {\n            if (targetsSquashed.length && targetsSquashed[targetsSquashed.length - 1].target.field === targets[j].target.field) {\n                targetsSquashed[targetsSquashed.length - 1].spanUsed++;\n            } else {\n                targetsSquashed.push(targets[j]);\n            }\n        }\n\n        return targetsSquashed;\n    }\n\n    /**\n     * Pins the column at the provided index in the pinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully pinned. Returns `false` if the column cannot be pinned.\n     * Column cannot be pinned if:\n     * - Is already pinned\n     * - index argument is out of range\n     * - The pinned area exceeds 80% of the grid width\n     * ```typescript\n     * let success = this.column.pin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public pin(index?: number): boolean {\n        // TODO: Probably should the return type of the old functions\n        // should be moved as a event parameter.\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (this._pinned) {\n            return false;\n        }\n\n        if (this.parent && !this.parent.pinned) {\n            return this.topLevelParent.pin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid.pinnedColumns.length)) {\n            return false;\n        }\n\n        const width = parseInt(this.width, 10);\n\n        if (!this.parent && (grid.getUnpinnedWidth(true) - width < grid.unpinnedAreaMinWidth)) {\n            return false;\n        }\n\n        this._pinned = true;\n        this._unpinnedIndex = grid._unpinnedColumns.indexOf(this);\n        index = index !== undefined ? index : grid._pinnedColumns.length;\n        const targetColumn = grid._pinnedColumns[index];\n        const args = { column: this, insertAtIndex: index, isPinned: true };\n        grid.onColumnPinning.emit(args);\n\n        if (grid._pinnedColumns.indexOf(this) === -1) {\n            grid._pinnedColumns.splice(args.insertAtIndex, 0, this);\n\n            if (grid._unpinnedColumns.indexOf(this) !== -1) {\n                grid._unpinnedColumns.splice(grid._unpinnedColumns.indexOf(this), 1);\n            }\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.pin());\n            grid.reinitPinStates();\n        }\n\n        grid.resetCaches();\n        grid.cdr.detectChanges();\n        this.grid.filteringService.refreshExpressions();\n        this.grid.refreshSearch(true);\n        return true;\n    }\n    /**\n     * Unpins the column and place it at the provided index in the unpinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully unpinned. Returns `false` if the column cannot be unpinned.\n     * Column cannot be unpinned if:\n     * - Is already unpinned\n     * - index argument is out of range\n     * ```typescript\n     * let success = this.column.unpin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public unpin(index?: number): boolean {\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (!this._pinned) {\n            return false;\n        }\n\n        if (this.parent && this.parent.pinned) {\n            return this.topLevelParent.unpin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid._unpinnedColumns.length)) {\n            return false;\n        }\n\n        index = (index !== undefined ? index :\n            this._unpinnedIndex !== undefined ? this._unpinnedIndex : this.index);\n        this._pinned = false;\n\n        const targetColumn = grid._unpinnedColumns[index];\n\n        grid._unpinnedColumns.splice(index, 0, this);\n        if (grid._pinnedColumns.indexOf(this) !== -1) {\n            grid._pinnedColumns.splice(grid._pinnedColumns.indexOf(this), 1);\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.unpin());\n        }\n\n        grid.reinitPinStates();\n        grid.resetCaches();\n\n        const insertAtIndex = grid._unpinnedColumns.indexOf(this);\n        const args = { column: this, insertAtIndex, isPinned: false };\n        grid.onColumnPinning.emit(args);\n\n        grid.cdr.detectChanges();\n        this.grid.filteringService.refreshExpressions();\n        this.grid.refreshSearch(true);\n\n        return true;\n    }\n    /**\n     * Returns a reference to the top level parent column.\n     * ```typescript\n     * let topLevelParent =  this.column.topLevelParent;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get topLevelParent() {\n        let parent = this.parent;\n        while (parent && parent.parent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n    /**\n     *@hidden\n     */\n    protected check() {\n        if (this.grid) {\n            this.grid.markForCheck();\n        }\n    }\n\n    /**\n     * Returns a reference to the header of the column.\n     * ```typescript\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let headerCell = column.headerCell;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get headerCell(): IgxGridHeaderComponent {\n        return this.grid.headerCellList.find((header) => header.column === this);\n    }\n\n    /**\n    * Returns a reference to the filter cell of the column.\n    * ```typescript\n    * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n    * let filterell = column.filterell;\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    get filterCell(): IgxGridFilteringCellComponent {\n        return this.grid.filterCellList.find((filterCell) => filterCell.column === this);\n    }\n\n    /**\n     * Returns a reference to the header group of the column.\n     * @memberof IgxColumnComponent\n     */\n    get headerGroup(): IgxGridHeaderGroupComponent {\n        return this.grid.headerGroupsList.find((headerGroup) => headerGroup.column === this);\n    }\n\n    /**\n     * Autosize the column to the longest currently visible cell value, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * column.autosize();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public autosize() {\n        if (!this.columnGroup) {\n\n            this.width = this.getLargestCellWidth();\n\n            this.grid.markForCheck();\n            this.grid.reflow();\n        }\n    }\n\n    /**\n     * @hidden\n     * Returns the size (in pixels) of the longest currently visible cell, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let size = column.getLargestCellWidth();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public getLargestCellWidth(): string {\n        const range = this.grid.document.createRange();\n        const largest = new Map<number, number>();\n\n        if (this.cells.length > 0) {\n            let cellsContentWidths = [];\n            if (this.cells[0].nativeElement.children.length > 0) {\n                this.cells.forEach((cell) => cellsContentWidths.push(cell.calculateSizeToFit(range)));\n            } else {\n                cellsContentWidths = this.cells.map((cell) => getNodeSizeViaRange(range, cell.nativeElement));\n            }\n\n            const index = cellsContentWidths.indexOf(Math.max(...cellsContentWidths));\n            const cellStyle = this.grid.document.defaultView.getComputedStyle(this.cells[index].nativeElement);\n            const cellPadding = parseFloat(cellStyle.paddingLeft) + parseFloat(cellStyle.paddingRight) +\n                parseFloat(cellStyle.borderRightWidth);\n\n            largest.set(Math.max(...cellsContentWidths), cellPadding);\n        }\n\n        if (this.headerCell) {\n            let headerCell;\n            if (this.headerTemplate && this.headerCell.elementRef.nativeElement.children[0].children.length > 0) {\n                headerCell =  Math.max(...Array.from(this.headerCell.elementRef.nativeElement.children[0].children)\n                    .map((child) => getNodeSizeViaRange(range, child)));\n            } else {\n                headerCell = getNodeSizeViaRange(range, this.headerCell.elementRef.nativeElement.children[0]);\n            }\n\n            if (this.sortable || this.filterable) {\n                headerCell += this.headerCell.elementRef.nativeElement.children[1].getBoundingClientRect().width;\n            }\n\n            const headerStyle = this.grid.document.defaultView.getComputedStyle(this.headerCell.elementRef.nativeElement);\n            const headerPadding = parseFloat(headerStyle.paddingLeft) + parseFloat(headerStyle.paddingRight) +\n                parseFloat(headerStyle.borderRightWidth);\n            largest.set(headerCell, headerPadding);\n\n        }\n\n        const largestCell = Math.max(...Array.from(largest.keys()));\n        const width = Math.ceil(largestCell + largest.get(largestCell));\n\n        if (Number.isNaN(width)) {\n            return this.width;\n        } else {\n            return width + 'px';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public getCellWidth() {\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (this.parent && this.parent.columnLayout) {\n            return '';\n        }\n\n        if (colWidth && !isPercentageWidth) {\n\n            let cellWidth = colWidth;\n            if (typeof cellWidth !== 'string' || cellWidth.endsWith('px') === false) {\n                cellWidth += 'px';\n            }\n\n            return cellWidth;\n        } else {\n            return colWidth;\n        }\n    }\n}\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnGroupComponent) }],\n    selector: 'igx-column-group',\n    template: ``\n})\nexport class IgxColumnGroupComponent extends IgxColumnComponent implements AfterContentInit {\n\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent })\n    children = new QueryList<IgxColumnComponent>();\n    /**\n     * Gets the column group `summaries`.\n     * ```typescript\n     * let columnGroupSummaries = this.columnGroup.summaries;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column group `summaries`.\n     * ```typescript\n     * this.columnGroup.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set summaries(classRef: any) { }\n    /**\n     * Sets/gets whether the column group is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.columnGroup.searchable;\n     * ```\n     * ```html\n     *  <igx-column-group [searchable] = \"false\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column group `filters`.\n     * ```typescript\n     * let columnGroupFilters = this.columnGroup.filters;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get filters(): any {\n        return this._filters;\n    }\n    /**\n     * Sets the column group `filters`.\n     * ```typescript\n     * this.columnGroup.filters = IgxStringFilteringOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set filters(classRef: any) { }\n    /**\n     * Gets the default minimum `width` of the column group.\n     * ```typescript\n     * let defaultMinWidth = this.columnGroup.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get defaultMinWidth(): string {\n        return this._defaultMinWidth;\n    }\n    /**\n     * Returns a reference to the body template.\n     * ```typescript\n     * let bodyTemplate = this.columnGroup.bodyTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set bodyTemplate(template: TemplateRef<any>) { }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.columnGroup.headerTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * @hidden\n     * @memberof IgxColumnGroupComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) { }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.columnGroup.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) { }\n    /**\n     * Gets the column group cells.\n     * ```typescript\n     * let columnCells = this.columnGroup.cells;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return [];\n    }\n    /**\n     * Gets whether the column group is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this.allChildren.every(c => c.hidden);\n    }\n    /**\n     * Sets the column group hidden property.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n    }\n    /**\n     *@hidden\n     */\n    ngAfterContentInit() {\n        /*\n            @ContentChildren with descendants still returns the `parent`\n            component in the query list.\n        */\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parent = this;\n        });\n    }\n    /**\n     * Returns the children columns collection.\n     * ```typescript\n     * let columns =  this.columnGroup.allChildren;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return flatten(this.children.toArray());\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let isColumnGroup =  this.columnGroup.columnGroup\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get columnGroup() {\n        return true;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n    /**\n     * Gets the width of the column group.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width() {\n        let isChildrenWidthInPercent = false, width;\n        width = `${this.children.reduce((acc, val) => {\n            if (val.hidden) {\n                return acc;\n            }\n            if (typeof val.width === 'string' && val.width.indexOf('%') !== -1) {\n                   isChildrenWidthInPercent = true;\n            }\n            return acc + parseInt(val.width, 10);\n        }, 0)}`;\n        return isChildrenWidthInPercent ? width + '%' : width;\n    }\n\n    set width(val) { }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, public cdr: ChangeDetectorRef) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(gridAPI, cdr);\n    }\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnLayoutComponent) }],\n    selector: 'igx-column-layout',\n    template: ``\n})\nexport class IgxColumnLayoutComponent extends IgxColumnGroupComponent implements AfterContentInit {\n    /**\n     * Gets the width of the column layout.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width() {\n        const width = this.getFilledChildColumnSizes(this.children).reduce((acc, val) => acc + parseInt(val, 10), 0);\n        return width;\n    }\n\n    set width(val) { }\n\n    get columnLayout() {\n        return true;\n    }\n\n    /**\n     * Gets whether the column layout is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this._hidden;\n    }\n\n    /**\n     * Sets the column layout hidden property.\n     * ```typescript\n     * <igx-column-layout [hidden] = \"true\"></igx-column->\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n    }\n\n    /**\n     *@hidden\n    */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n        if (!this.hidden) {\n            this.hidden = this.allChildren.some(x => x.hidden);\n        } else {\n            this.children.forEach(child => child.hidden = this.hidden);\n        }\n\n        this.children.forEach(child => {\n            child.disableHiding = true;\n            child.disablePinning = true;\n        });\n    }\n\n    /*\n     * Gets whether the group contains the last pinned child column of the column layout.\n     * ```typescript\n     * let columsHasLastPinned = this.columnLayout.hasLastPinnedChildColumn;\n     * ```\n     * @memberof IgxColumnLayoutComponent\n     */\n    get hasLastPinnedChildColumn() {\n        return this.children.some(child => child.isLastPinned);\n    }\n\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nexport interface IValueChangedEventArgs {\n    oldValue: any;\n    newValue: any;\n}\n\n/**\n *@hidden\n */\nexport abstract class ItemPropertyValueChanged {\n    private _object: any;\n    private _propName: string;\n\n    get object() {\n        return this._object;\n    }\n\n    set object(value) {\n        if (value) {\n            this._object = value;\n        }\n    }\n\n    @Input()\n    get value() {\n        return (this.object) ? this.object[this._propName] : null;\n    }\n\n    set value(value) {\n        this.onValueChanged(value);\n    }\n\n    @Output()\n    public valueChanged = new EventEmitter<IValueChangedEventArgs>();\n\n    constructor(propName: string) {\n        this._propName = propName;\n    }\n\n    protected onValueChanged(value) {\n        const currentValue = this.value;\n        if (value !== currentValue) {\n            this.object[this._propName] = value;\n            this.valueChanged.emit({ oldValue: currentValue, newValue: value });\n        }\n    }\n}\n\n/** @hidden */\nexport class ColumnChooserItemBase extends ItemPropertyValueChanged {\n    @Input()\n    get column() {\n        return this.object;\n    }\n\n    set column(value) {\n        if (value) {\n            this.object = value;\n        }\n    }\n\n    @Input()\n    public indentation = 30;\n\n    @Input()\n    public container: any;\n\n    constructor(public prop: string) {\n        super(prop);\n    }\n\n    get name() {\n        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';\n    }\n\n    get level() {\n        return this.column.level;\n    }\n\n    get calcIndent() {\n        return this.indentation * this.level;\n    }\n}\n","\nimport { Directive } from '@angular/core';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport interface IColumnVisibilityChangedEventArgs {\n    column: any;\n    newValue: boolean;\n}\n\n/** @hidden */\n@Directive({\n    selector: '[igxColumnHidingItem]'\n})\nexport class IgxColumnHidingItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('hidden');\n    }\n\n    get disabled() {\n        return this.column.disableHiding;\n    }\n}\n","import { ChangeDetectorRef, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { IgxStringFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport enum ColumnDisplayOrder {\n    Alphabetical = 'Alphabetical',\n    DisplayOrder = 'DisplayOrder'\n}\n\nclass CustomFilteringStrategy extends FilteringStrategy {\n    public filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[] {\n        const res: ColumnChooserItemBase[] = [];\n        data.forEach((item: ColumnChooserItemBase) => {\n            if (this.matchRecord(item, expressionsTree.filteringOperands[0] as IFilteringExpression)) {\n                res.push(item);\n            } else if (item.column.columnGroup) {\n                if (item.column.allChildren.findIndex((child) =>\n                    this.matchRecord(child, expressionsTree.filteringOperands[1] as IFilteringExpression) ||\n                    this.matchRecord(child, expressionsTree.filteringOperands[2] as IFilteringExpression)) > -1) {\n                    res.push(item);\n                }\n            }\n        });\n\n        return res;\n    }\n}\n\n/** @hidden */\nexport abstract class ColumnChooserBase implements OnDestroy {\n    /**\n     * Gets the grid columns that are going to be manipulated.\n     * ```typescript\n     * let gridColumns = this.columnHidingUI.columns;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n\n    @Input()\n    get columns() {\n        return this._gridColumns;\n    }\n    /**\n     * Sets the the grid columns that are going to be manipulated.\n     * ```html\n     * <igx-column-hiding [columns]=\"grid.columns\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columns(value) {\n        if (value) {\n            this._gridColumns = value;\n            this.createColumnItems();\n            if (this.filterCriteria) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Sets/gets the title of the column chooser.\n     * ```typescript\n     * let title =  this.columnHidingUI.title;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get title() {\n        return this._title;\n    }\n    /**\n     * ```html\n     * <igx-column-hiding [title]=\"'IgxColumnHidingComponent Title'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set title(value) {\n        this._title = (value) ? value : '';\n    }\n    /**\n     * Gets the prompt that is displayed in the filter input.\n     * ```typescript\n     * let filterColumnsPrompt =  this.columnHidingUI.filterColumnsPrompt;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n    /**\n     * Sets the prompt that is going to be displayed in the filter input.\n     * ```html\n     * <igx-column-hiding [filterColumnsPrompt]=\"'Type here to search'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterColumnsPrompt(value) {\n        this._filterColumnsPrompt = (value) ? value : '';\n    }\n    /**\n     * Hides/ shows the filtering columns input from the UI.\n     */\n    @Input()\n    public disableFilter = false;\n    /**\n     * Gets the items of the selected columns.\n     * ```typescript\n     * let columnItems =  this.columnHidingUI.columnItems;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnItems() {\n        return this._currentColumns;\n    }\n    /**\n     * Gets the value which filters the columns list.\n     * ```typescript\n     * let filterCriteria =  this.columnHidingUI.filterCriteria;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterCriteria() {\n        return this._filterCriteria;\n    }\n\n    /**\n     * Sets the value which filters the columns list.\n     * ```html\n     *  <igx-column-hiding [filterCriteria]=\"'ID'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterCriteria(value) {\n        if (!value || value.length === 0) {\n            this.clearFiltering();\n            this._filterCriteria = '';\n            this.cdr.detectChanges();\n            return;\n        } else if (this._filterCriteria && this._filterCriteria.length > value.length) {\n            this.clearFiltering();\n        }\n\n        this._filterCriteria = value;\n        this.filter();\n        this.cdr.detectChanges();\n    }\n    /**\n     * Gets the display order of the columns.\n     * ```typescript\n     * let columnDisplayOrder  =  this.columnHidingUI.columnDisplayOrder;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnDisplayOrder() {\n        return this._columnDisplayOrder;\n    }\n    /**\n     * Sets the display order of the columns.\n     * ```typescript\n     * this.columnHidingUI.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columnDisplayOrder(value: ColumnDisplayOrder) {\n        if (value !== undefined) {\n            this.orderColumns(value);\n            if (this._filterCriteria.length > 0) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Access to the columnHidingUI:\n     * ```typescript\n     * @ViewChild('column-hiding-component')\n     *  public columnHidingUI: IgxColumnHidingComponent;\n     * ```\n     * Sets/gets the max height of the column area.\n     * ```typescript\n     * let columnsAreaMaxHeight =  this.columnHidingUI.columnsAreaMaxHeight;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [columnsAreaMaxHeight]=\"200px\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    public columnsAreaMaxHeight = '100%';\n    /**\n     * Sets/Gets the css class selector.\n     * By default the value of the `class` attribute is `\"igx-column-hiding\"`.\n     * ```typescript\n     * let cssCLass =  this.columnHidingUI.cssClass;\n     * ```\n     * ```typescript\n     * this.columnHidingUI.cssClass = 'column-chooser';\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @HostBinding('attr.class')\n    public cssClass = 'igx-column-hiding';\n    /**\n     *@hidden\n     */\n    private _currentColumns = [];\n    /**\n     *@hidden\n     */\n    private _gridColumns = [];\n    /**\n     *@hidden\n     */\n    private _rawColumns = [];\n    /**\n     *@hidden\n     */\n    private _columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;\n    /**\n     *@hidden\n     */\n    private _filterCriteria = '';\n    /**\n     *@hidden\n     */\n    private _filterColumnsPrompt = '';\n    /**\n     *@hidden\n     */\n    private _title = '';\n\n    constructor(public cdr: ChangeDetectorRef) {\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        for (const item of this._currentColumns) {\n            item.valueChanged.unsubscribe();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private createColumnItems() {\n        if (this._gridColumns.length > 0) {\n            this._rawColumns = [];\n            this._gridColumns.forEach((column) => {\n                const item = this.createColumnItem(this, column);\n                if (item) {\n                    this._rawColumns.push(item);\n                }\n            });\n            this._currentColumns = this._rawColumns.slice(0);\n            this.orderColumns(this._columnDisplayOrder);\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected abstract createColumnItem(container: any, column: any);\n    /**\n     *@hidden\n     */\n    private orderColumns(value) {\n        this._columnDisplayOrder = value;\n        if (value === ColumnDisplayOrder[ColumnDisplayOrder.Alphabetical] ||\n            value === ColumnDisplayOrder.Alphabetical) {\n            this._currentColumns = this._rawColumns.slice(0).sort((current, next) => {\n                return current.name.toLowerCase().localeCompare(next.name.toLowerCase());\n            });\n        } else {\n            this._currentColumns = this._rawColumns;\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected filter() {\n        const filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.Or);\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('name'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('field'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('header'));\n\n        const strategy = new CustomFilteringStrategy();\n        this._currentColumns = strategy.filter(this._currentColumns, filteringExpressionsTree);\n    }\n    /**\n     *@hidden\n     */\n    protected createFilteringExpression(fieldName: string): IFilteringExpression {\n        return {\n            condition: IgxStringFilteringOperand.instance().condition('contains'),\n            fieldName: fieldName,\n            ignoreCase: true,\n            searchVal: this._filterCriteria\n        };\n    }\n    /**\n     *@hidden\n     */\n    protected clearFiltering() {\n        this.createColumnItems();\n    }\n}\n\n\n","import { CommonModule } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    NgModule,\n    Output,\n    OnDestroy\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IColumnVisibilityChangedEventArgs, IgxColumnHidingItemDirective } from './column-hiding-item.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-hiding',\n    templateUrl: './column-hiding.component.html'\n})\nexport class IgxColumnHidingComponent extends ColumnChooserBase implements OnDestroy {\n    /**\n     * Returns a boolean indicating whether the `HIDE ALL` button is disabled.\n     * ```html\n     * <igx-column-hiding #columnHidingUI\n     *     [columns]=\"grid.columns\" [title]=\"'Column Hiding'\">\n     * </igx-column-hiding>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'columnHidingUI'\")\n     * public columnHiding: IgxColumnHidingComponent;\n     * let isHideAlldisabled =  this.columnHiding.disableHideAll;\n     * ```\n     *@memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableHideAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount === this.columns.length) {\n            return true;\n        } else if (this.hidableColumns.length < 1 ||\n            this.hidableColumns.length === this.hidableColumns.filter((col) => col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Returns a boolean indicating whether the `SHOW ALL` button is disabled.\n     * ```typescript\n     * let isShowAlldisabled =  this.columnHiding.disableShowAll;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableShowAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount < 1 || this.hidableColumns.length < 1) {\n            return true;\n        } else if (this.hidableColumns.length === this.hidableColumns.filter((col) => !col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Sets/gets the text of the button that shows all columns if they are hidden.\n     * ```typescript\n     * let showAllButtonText =  this.columnHiding.showAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [showAllText] = \"'Show Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public showAllText = 'Show All';\n    /**\n     * Sets/gets the text of the button that hides all columns if they are shown.\n     * ```typescript\n     * let hideAllButtonText =  this.columnHiding.hideAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [hideAllText] = \"'Hide Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public hideAllText = 'Hide All';\n    /**\n     * An event that is emitted after the columns visibility is changed.\n     * Provides references to the `column` and the `newValue` properties as event arguments.\n     * ```html\n     *  <igx-column-hiding (onColumnVisibilityChanged) = \"onColumnVisibilityChanged($event)\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n    /**\n     * Gets the count of the hidden columns.\n     * ```typescript\n     * let hiddenColumnsCount =  this.columnHiding.hiddenColumnsCount;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public get hiddenColumnsCount() {\n        return (this.columns) ? this.columns.filter((col) => col.hidden).length : 0;\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     *@hidden\n     */\n    public get hidableColumns() {\n        return this.columnItems.filter((col) => !col.disabled);\n    }\n\n    private destroy$ = new Subject<boolean>();\n    /**\n     *@hidden\n     */\n    protected createColumnItem(container: any, column: any) {\n        if (column.grid.hasColumnLayouts && !column.columnLayout) {\n            return null;\n        }\n        const item = new IgxColumnHidingItemDirective();\n        item.container = container;\n        item.column = column;\n\n        item.valueChanged.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.onVisibilityChanged({ column: item.column, newValue: args.newValue });\n        });\n\n        return item;\n    }\n    /**\n     * Shows all columns in the grid.\n     * ```typescript\n     * this.columnHiding.showAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public showAllColumns() {\n        for (const col of this.hidableColumns) {\n            col.value = false;\n        }\n    }\n    /**\n     * Hides all columns in the grid.\n     * ```typescript\n     * this.columnHiding.hideAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public hideAllColumns() {\n        for (const col of this.hidableColumns) {\n            col.value = true;\n        }\n    }\n    /**\n     * @hidden\n     */\n    public onVisibilityChanged(args: IColumnVisibilityChangedEventArgs) {\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxColumnHidingComponent, IgxColumnHidingItemDirective],\n    exports: [IgxColumnHidingComponent],\n    imports: [\n        IgxButtonModule,\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule,\n    ]\n})\nexport class IgxColumnHidingModule {\n}\n","\nimport { CommonModule } from '@angular/common';\nimport { Directive, Component, EventEmitter, Output, NgModule, ChangeDetectorRef } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\n\n@Directive({\n    selector: '[igxColumnPinningItem]'\n})\nexport class IgxColumnPinningItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('pinned');\n    }\n\n    /**\n     * Returns whether a column could be pinned.\n     * It's not possible to pin a column if there is not enough space for the unpinned area.\n     * ```typescript\n     * const columnItem: IgxColumnPinningItemDirective;\n     * this.columnItem.pinnable;\n     * ```\n     */\n    get pinnable() {\n        if (this.column.grid.getUnpinnedWidth(true) - this.column.width < this.column.grid.unpinnedAreaMinWidth) {\n            return false;\n        }\n        return true;\n    }\n}\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-pinning',\n    templateUrl: './column-pinning.component.html'\n})\nexport class IgxColumnPinningComponent extends ColumnChooserBase {\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     * @hidden\n     */\n    createColumnItem(container: any, column: any) {\n        if (column.level !== 0 || column.disablePinning) {\n            return null;\n        }\n        const item = new IgxColumnPinningItemDirective();\n        item.container = container;\n        item.column = column;\n        return item;\n    }\n\n    /**\n     * @hidden\n     */\n    public checkboxValueChange(event, columnItem: IgxColumnPinningItemDirective) {\n        if (event.checked && !columnItem.pinnable) {\n            event.checkbox.checked = false;\n            return false;\n        }\n        columnItem.value = !columnItem.value;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxColumnPinningComponent, IgxColumnPinningItemDirective],\n    exports: [IgxColumnPinningComponent],\n    imports: [\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule\n    ]\n})\nexport class IgxColumnPinningModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    HostBinding,\n    Input,\n    Optional,\n    ViewChild,\n    Inject,\n    TemplateRef\n} from '@angular/core';\n\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    CsvFileTypes,\n    IgxBaseExporter,\n    IgxCsvExporterOptions,\n    IgxCsvExporterService,\n    IgxExcelExporterOptions,\n    IgxExcelExporterService,\n    AbsoluteScrollStrategy\n} from '../services/index';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { IgxColumnHidingComponent } from './column-hiding.component';\nimport { IgxColumnPinningComponent } from './column-pinning.component';\nimport { OverlaySettings, PositionSettings, HorizontalAlignment, VerticalAlignment } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position';\n\n/**\n * This class encapsulates the Toolbar's logic and is internally used by\n * the `IgxGridComponent`, `IgxTreeGridComponent` and `IgxHierarchicalGridComponent`.\n */\n@Component({\n    selector: 'igx-grid-toolbar',\n    templateUrl: './grid-toolbar.component.html'\n})\nexport class IgxGridToolbarComponent extends DisplayDensityBase {\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid-toolbar')\n    @Input()\n    public gridID: string;\n\n    /**\n     * Gets the default text shown in the filtering box.\n     * ```typescript\n     * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    public get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n\n    /**\n     * Sets the default text shown in the filtering box.\n     * ```typescript\n     * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');\n     * ```\n     */\n    public set filterColumnsPrompt(value: string) {\n        this._filterColumnsPrompt = value;\n    }\n\n    private _filterColumnsPrompt = 'Filter columns list ...';\n\n    /**\n     * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.\n     * ```typescript\n     * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;\n     * ```\n     */\n    @Input()\n    get defaultDropDownsMaxHeight() {\n        const gridHeight = this.grid.calcHeight;\n        return (gridHeight) ? gridHeight * 0.7 + 'px' : '100%';\n    }\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Hiding UI.\n     * ```typescript\n     * const dropdownHiding = this.grid.toolbar.columnHidingDropdown;\n     * ```\n     */\n    @ViewChild('columnHidingDropdown', { read: IgxDropDownComponent })\n    public columnHidingDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnHidingComponent`.\n     * ```typescript\n     * const hidingUI = this.grid.toolbar.columnHidingUI;\n     * ```\n     */\n    @ViewChild(IgxColumnHidingComponent)\n    public columnHidingUI: IgxColumnHidingComponent;\n\n    /**\n     * Provides a reference to the Column Hiding button.\n     * ```typescript\n     * const hidingButton = this.grid.toolbar.columnHidingButton;\n     * ```\n     */\n    @ViewChild('columnHidingButton')\n    public columnHidingButton;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Export button.\n     * ```typescript\n     * const exportDropdown = this.grid.toolbar.exportDropdown;\n     * ```\n     */\n    @ViewChild('exportDropdown', { read: IgxDropDownComponent })\n    public exportDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the Export button.\n     * ```typescript\n     * const exportBtn = this.grid.toolbar.exportButton;\n     * ```\n     */\n    @ViewChild('btnExport')\n    public exportButton;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Pinning UI.\n     * ```typescript\n     * const dropdownPinning = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild('columnPinningDropdown', { read: IgxDropDownComponent })\n    public columnPinningDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnPinningComponent`.\n     * ```typescript\n     * const pinningUI = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild(IgxColumnPinningComponent)\n    public columnPinningUI: IgxColumnPinningComponent;\n\n    /**\n     * Provides a reference to the Column Pinning button.\n     * ```typescript\n     * const pinningButton = this.grid.toolbar.columnPinningButton;\n     * ```\n     */\n    @ViewChild('columnPinningButton')\n    public columnPinningButton;\n\n    /**\n     * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const grid = this.igxGrid1.toolbar.grid;\n     * ```\n     */\n    public get grid(): IgxGridBaseComponent {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an export button.\n     * ```typescript\n     * const exportButton = this.igxGrid1.toolbar.shouldShowExportButton;\n     * ```\n     */\n    public get shouldShowExportButton(): boolean {\n        return (this.grid != null && (this.grid.exportExcel || this.grid.exportCsv));\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an Excel export button.\n     * ```typescript\n     * const exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;\n     * ```\n     */\n    public get shouldShowExportExcelButton(): boolean {\n        return (this.grid != null && this.grid.exportExcel);\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an CSV export button.\n     * ```typescript\n     * const exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;\n     * ```\n     */\n    public get shouldShowExportCsvButton(): boolean {\n        return (this.grid != null && this.grid.exportCsv);\n    }\n\n    /**\n     * Returns how many columns are pinned.\n     * ```typescript\n     * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;\n     * ```\n     */\n    public get pinnedColumnsCount() {\n        return this.grid.pinnedColumns.filter(col => !col.columnLayout).length;\n    }\n\n    /**\n     * Returns the theme of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTheme = this.grid.toolbar.hostClass;\n     * ```\n     */\n\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid-toolbar');\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public cdr: ChangeDetectorRef,\n        @Optional() public excelExporter: IgxExcelExporterService,\n        @Optional() public csvExporter: IgxCsvExporterService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n    }\n\n    private _positionSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Left,\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _overlaySettings: OverlaySettings = {\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n\n\n    /**\n     * Returns the title of `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getTitle(): string {\n        return this.grid != null ? this.grid.toolbarTitle : '';\n    }\n\n    /**\n     * Returns the text of the export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getExportText(): string {\n        return this.grid != null ? this.grid.exportText : '';\n    }\n\n    /**\n     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();\n     * ```\n     */\n    public getExportExcelText(): string {\n        return this.grid != null ? this.grid.exportExcelText : '';\n    }\n\n    /**\n     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();\n     * ```\n     */\n    public getExportCsvText(): string {\n        return this.grid != null ? this.grid.exportCsvText : '';\n    }\n\n    /**\n     * Toggles the export button's dropdown menu.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportClicked();\n     * ```\n     */\n    public exportClicked() {\n        this._overlaySettings.positionStrategy.settings.target = this.exportButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.exportDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Exports the grid to excel.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToExcelClicked();\n     * ```\n     */\n    public exportToExcelClicked() {\n        this.performExport(this.excelExporter, 'excel');\n    }\n\n    /**\n     * Exports the grid to CSV.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToCsvClicked();\n     * ```\n     */\n    public exportToCsvClicked() {\n        this.performExport(this.csvExporter, 'csv');\n    }\n\n    private performExport(exp: IgxBaseExporter, exportType: string) {\n        this.exportClicked();\n\n        const fileName = 'ExportedData';\n        const options = exportType === 'excel' ?\n            new IgxExcelExporterOptions(fileName) :\n            new IgxCsvExporterOptions(fileName, CsvFileTypes.CSV);\n\n        const args = { grid: this.grid, exporter: exp, options: options, cancel: false };\n\n        this.grid.onToolbarExporting.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        exp.export(this.grid, options);\n    }\n\n    /**\n     * Toggles the Column Hiding UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnHidingUI();\n     * ```\n     */\n    public toggleColumnHidingUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnHidingButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnHidingDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Toggles the Column Pinning UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnPinningUI();\n     * ```\n     */\n    public toggleColumnPinningUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnPinningButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnPinningDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the\n     * `toolbar custom container` by providing references to the parent IgxGird and the toolbar itself.\n     * ```typescript\n     * const context =  this.igxGrid.toolbar.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            // $implicit: this\n            grid: this.grid,\n            toolbar: this\n        };\n    }\n\n    /** @hidden */\n    public get customContentTemplate(): TemplateRef<any> {\n        if (this.grid != null && this.grid.toolbarCustomContentTemplate != null) {\n            return this.grid.toolbarCustomContentTemplate.template;\n        } else {\n            return null;\n        }\n    }\n}\n\n/**\n * The IgxGridToolbarCustomContentDirective directive is used to mark an 'ng-template' (with\n * the 'igxToolbarCustomContent' selector) defined in the IgxGrid which is used to provide\n * custom content for cener part of the IgxGridToolbar.\n */\n@Directive({\n    selector: '[igxToolbarCustomContent]'\n})\nexport class IgxGridToolbarCustomContentDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n} from '@angular/core';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridSelectionService } from '../../core/grid-selection';\nimport { ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-groupby-row',\n    templateUrl: './groupby-row.component.html'\n})\nexport class IgxGridGroupByRowComponent {\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        private gridSelection: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    protected defaultCssClass = 'igx-grid__group-row';\n\n    /**\n     * @hidden\n     */\n    protected paddingIndentationCssClass = 'igx-grid__group-row--padding-level';\n\n    /**\n     * @hidden\n     */\n    @Input()\n    protected isFocused = false;\n\n    /**\n     * Returns whether the row is focused.\n     * ```\n     * let gridRowFocused = this.grid1.rowList.first.focused;\n     * ```\n     */\n    get focused(): boolean {\n        return this.isFocused;\n    }\n\n    /**\n     * An @Input property that sets the index of the row.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * An @Input property that sets the id of the grid the row belongs to.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * An @Input property that specifies the group record the component renders for.\n     * ```typescript\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public groupRow: IGroupByRecord;\n\n    /**\n     * Returns a reference of the content of the group.\n     * ```typescript\n     * const groupRowContent = this.grid1.rowList.first.groupContent;\n     * ```\n     */\n    @ViewChild('groupContent')\n    public groupContent: ElementRef;\n\n    /**\n     * Returns whether the group row is expanded.\n     * ```typescript\n     * const groupRowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this.grid.isExpandedGroup(this.groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedBy(): string {\n        const grRowExpr = this.groupRow.expression !== undefined ? this.groupRow.expression.fieldName : '';\n        return this.gridID + '_' + grRowExpr;\n    }\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * Returns a reference to the underlying HTML element.\n     * ```typescript\n     * const groupRowElement = this.nativeElement;\n     * ```\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the style classes applied to the group rows.\n     * ```typescript\n     * const groupCssStyles = this.grid1.rowList.first.styleClasses;\n     * ```\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return `${this.defaultCssClass} ` + `${this.paddingIndentationCssClass}-` + this.groupRow.level +\n            (this.focused ? ` ${this.defaultCssClass}--active` : '');\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.isFocused = true;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.isFocused = false;\n    }\n\n    /**\n     * Toggles the group row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        const isVirtualized = !this.grid.verticalScrollContainer.dc.instance.notVirtual;\n        const groupRowIndex = this.index;\n        this.grid.toggleGroup(this.groupRow);\n        if (isVirtualized) {\n            const groupRow = this.grid.nativeElement.querySelector(`[data-rowIndex=\"${groupRowIndex}\"]`);\n            if (groupRow) {\n                groupRow.focus();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const keydownArgs = { targetType: 'groupRow', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInGroupRow(key, event.shiftKey, event.altKey) || event.ctrlKey) { return; }\n\n        if (this.isToggleKey(key, event.altKey)) {\n            if ((this.expanded && ROW_COLLAPSE_KEYS.has(key)) || (!this.expanded && ROW_EXPAND_KEYS.has(key))) {\n                this.toggle();\n            }\n            return;\n        }\n        // TODO: to be deleted when onFocusChange event is removed #4054\n        const args = { cell: this, groupRow: null, event: event, cancel: false };\n        this.grid.onFocusChange.emit(args);\n        if (args.cancel) { return; }\n\n        const selection = this.gridSelection;\n        selection.keyboardState.shift = event.shiftKey && !(key === 'tab');\n\n        const visibleColumnIndex = selection.activeElement && this.grid.columnList.filter(col => !col.hidden).map(c => c.visibleIndex)\n                .indexOf(selection.activeElement.column) !== -1 ? selection.activeElement.column : 0;\n        switch (key) {\n            case 'arrowdown':\n            case 'down':\n                this.grid.navigation.navigateDown(this.nativeElement, this.index, visibleColumnIndex);\n                break;\n            case 'arrowup':\n            case 'up':\n                this.grid.navigation.navigateUp(this.nativeElement, this.index, visibleColumnIndex);\n                break;\n            case 'tab':\n                this.handleTabKey(event.shiftKey);\n                break;\n        }\n    }\n\n    /**\n     * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.\n     * ```typescript\n     * this.grid1.rowList.first.grid;\n     * ```\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * @hidden\n     */\n    get dataType(): any {\n        return this.grid.getColumnByName(this.groupRow.expression.fieldName).dataType;\n    }\n\n    private handleTabKey(shift) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.nativeElement, this.index, 0);\n        } else {\n            if (this.index === this.grid.verticalScrollContainer.igxForOf.length - 1 && this.grid.rootSummariesEnabled) {\n                this.grid.navigation.onKeydownHome(0, true);\n            } else {\n                this.grid.navigation.navigateDown(this.nativeElement, this.index, 0);\n            }\n        }\n    }\n\n    private isKeySupportedInGroupRow(key, shift = false, alt = false) {\n        if (shift) {\n            return ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n        }\n        return this.isToggleKey(key, alt) ? true : ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n    }\n\n    private isToggleKey(key, altKey) {\n        return altKey && ['left', 'right', 'up', 'down', 'arrowleft', 'arrowright', 'arrowup', 'arrowdown'].indexOf(key) !== -1;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { IgxGridBaseComponent, FilterMode } from './grid-base.component';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridGroupByRowComponent } from './grid/groupby-row.component';\n\nenum MoveDirection {\n    LEFT = 'left',\n    RIGHT = 'right'\n}\n\n/** @hidden */\n@Injectable()\nexport class IgxGridNavigationService {\n    public grid: IgxGridBaseComponent;\n\n    get displayContainerWidth() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);\n    }\n\n    get displayContainerScrollLeft() {\n        return parseInt(this.grid.parentVirtDir.getHorizontalScroll().scrollLeft, 10);\n    }\n\n    get verticalDisplayContainerElement() {\n        return this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public horizontalScroll(rowIndex) {\n        let rowComp = this.grid.dataRowList.find((row) => row.index === rowIndex) ?\n        this.grid.dataRowList.find((row) => row.index === rowIndex) : this.grid.dataRowList.first;\n        if (!rowComp) {\n            rowComp = this.grid.summariesRowList.find((row) => row.index === rowIndex);\n        }\n        return rowComp.virtDirRow;\n    }\n\n    public getColumnUnpinnedIndex(visibleColumnIndex: number) {\n        const column = this.grid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    public isColumnFullyVisible(visibleColumnIndex: number) {\n        let forOfDir;\n        if (this.grid.dataRowList.length > 0) {\n            forOfDir = this.grid.dataRowList.first.virtDirRow;\n        } else {\n            forOfDir = this.grid.headerContainer;\n        }\n        const horizontalScroll = forOfDir.getHorizontalScroll();\n        if (!horizontalScroll.clientWidth ||\n            this.grid.columnList.filter(c => !c.columnGroup).find((column) => column.visibleIndex === visibleColumnIndex).pinned) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft;\n    }\n\n    public isColumnLeftFullyVisible(visibleColumnIndex) {\n        let forOfDir;\n        if (this.grid.dataRowList.length > 0) {\n            forOfDir = this.grid.dataRowList.first.virtDirRow;\n        } else {\n            forOfDir = this.grid.headerContainer;\n        }\n        const horizontalScroll = forOfDir.getHorizontalScroll();\n        if (!horizontalScroll.clientWidth ||\n            this.grid.columnList.filter(c => !c.columnGroup).find((column) => column.visibleIndex === visibleColumnIndex).pinned) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        return this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup);\n    }\n\n    public isRowInEditMode(rowIndex): boolean {\n        return this.grid.rowEditable && (this.grid.rowInEditMode && this.grid.rowInEditMode.index === rowIndex);\n    }\n\n    public isColumnEditable(visibleColumnIndex: number): boolean {\n        const column = this.gridOrderedColumns.find(c => c.visibleIndex === visibleColumnIndex);\n        return column ? column.editable : false;\n    }\n\n    public findNextEditable(direction: string, visibleColumnIndex: number) {\n        const gridColumns = this.gridOrderedColumns;\n        if (direction === MoveDirection.LEFT) {\n            return gridColumns.splice(0, visibleColumnIndex + 1).reverse().findIndex(e => e.editable);\n        } else if (direction === MoveDirection.RIGHT) {\n            return gridColumns.splice(visibleColumnIndex, gridColumns.length - 1).findIndex(e => e.editable);\n        }\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        return this.grid.nativeElement.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public onKeydownArrowRight(element, rowIndex, visibleColumnIndex, isSummary = false) {\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n        if (this.isColumnFullyVisible(visibleColumnIndex + 1)) { // if next column is fully visible or is pinned\n            if (element.classList.contains('igx-grid__td--pinned-last') || element.classList.contains('igx-grid-summary--pinned-last')) {\n                if (this.isColumnLeftFullyVisible(visibleColumnIndex + 1)) {\n                    element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                } else {\n                    this.grid.nativeElement.focus({ preventScroll: true });\n                    this.grid.parentVirtDir.onChunkLoad\n                        .pipe(first())\n                        .subscribe(() => {\n                            element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                        });\n                    this.horizontalScroll(rowIndex).scrollTo(0);\n                }\n            } else {\n                element.nextElementSibling.focus({ preventScroll: true });\n            }\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex + 1, isSummary);\n        }\n    }\n\n    public onKeydownArrowLeft(element, rowIndex, visibleColumnIndex, isSummary = false) {\n        if (visibleColumnIndex === 0) {\n            return;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex - 1);\n        if (!element.previousElementSibling && this.grid.pinnedColumns.length && index === - 1) {\n            element.parentNode.previousElementSibling.focus({ preventScroll: true });\n        } else if (!this.isColumnLeftFullyVisible(visibleColumnIndex - 1)) {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex - 1, isSummary);\n        } else {\n            element.previousElementSibling.focus({ preventScroll: true });\n        }\n\n    }\n\n    public movePreviousEditable(rowIndex, visibleColumnIndex) {\n        const addedIndex = this.isColumnEditable(visibleColumnIndex - 1) ?\n            0 :\n            this.findNextEditable(MoveDirection.LEFT, visibleColumnIndex - 1);\n        if (addedIndex === -1) {\n            this.grid.rowEditTabs.last.element.nativeElement.focus();\n            return;\n        }\n        const editableIndex = visibleColumnIndex - 1 - addedIndex;\n        if (this.getColumnUnpinnedIndex(editableIndex) === -1 && this.grid.pinnedColumns.length) {\n            // if target is NOT pinned and there are pinned columns\n            // since addedIndex !== -1, there will always be a target\n            this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus();\n        } else if (!this.isColumnLeftFullyVisible(editableIndex)) {  // if not fully visible, perform scroll\n            this.performHorizontalScrollToCell(rowIndex, editableIndex);\n        } else {\n            this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus(); // if fully visible, just focus\n        }\n    }\n\n    public moveNextEditable(element, rowIndex, visibleColumnIndex) {\n        let addedIndex = 0;\n        addedIndex = this.isColumnEditable(visibleColumnIndex + 1) ?\n            0 :\n            this.findNextEditable(MoveDirection.RIGHT, visibleColumnIndex + 1);\n        if (addedIndex === -1 && this.grid.rowEditTabs) { // no previous edit column -> go to RE buttons\n            this.grid.rowEditTabs.first.element.nativeElement.focus();\n            return;\n        }\n        const editableIndex = visibleColumnIndex + 1 + addedIndex;\n        if (this.isColumnFullyVisible(editableIndex)) { // If column is fully visible\n            if (element.classList.contains('igx-grid__td--pinned-last')) { // If this is pinned\n                if (this.isColumnLeftFullyVisible(editableIndex)) { // If next column is fully visible LEFT\n                    this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus(); // focus\n                } else { // if NOT fully visible, perform scroll\n                    this.performHorizontalScrollToCell(rowIndex, editableIndex);\n                }\n            } else { // cell is next cell\n                this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus();\n            }\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, editableIndex);\n        }\n    }\n\n    public onKeydownHome(rowIndex, isSummary = false) {\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        const cellSelector = this.getCellSelector(0, isSummary);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        let firstCell =  rowElement.querySelector(cellSelector);\n        if (this.grid.pinnedColumns.length || this.displayContainerScrollLeft === 0) {\n            firstCell.focus({ preventScroll: true });\n        } else {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    firstCell = rowElement.querySelector(cellSelector);\n                    firstCell.focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(0);\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        const index = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex;\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        if (this.isColumnFullyVisible(index)) {\n            const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n            allCells[allCells.length - 1].focus({ preventScroll: true });\n        } else {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n                    allCells[allCells.length - 1].focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(this.getColumnUnpinnedIndex(index));\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        if (verticalScroll.scrollTop === 0) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            cells[0].focus();\n        } else {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(0);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[0].focus(); }\n                });\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            cells[cells.length - 1].focus();\n        } else {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                });\n        }\n    }\n\n    public navigateUp(rowElement, currentRowIndex, visibleColumnIndex) {\n        if (currentRowIndex === 0) {\n            return;\n        }\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        if (!rowElement.previousElementSibling ||\n            rowElement.previousElementSibling.offsetTop < Math.abs(containerTopOffset)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(currentRowIndex - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const tag = rowElement.tagName.toLowerCase();\n                    const rowSelector = this.getRowSelector();\n                    if (tag === rowSelector || tag === 'igx-grid-summary-row') {\n                        rowElement = this.getRowByIndex(currentRowIndex, tag);\n                    } else {\n                        rowElement = this.grid.nativeElement.querySelector(\n                            `igx-grid-groupby-row[data-rowindex=\"${currentRowIndex}\"]`);\n                    }\n                    this.focusPreviousElement(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusPreviousElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusPreviousElement(currentRowEl, visibleColumnIndex) {\n        this.focusElem(currentRowEl.previousElementSibling, visibleColumnIndex);\n    }\n\n    public navigateDown(rowElement, currentRowIndex, visibleColumnIndex) {\n        if (currentRowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1 ||\n            (currentRowIndex === 0 && rowElement.tagName.toLowerCase() === 'igx-grid-summary-row')) { // check if this is rootSummary row\n            return;\n        }\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(currentRowIndex + 1);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = rowElement.nextElementSibling ?\n            rowElement.nextElementSibling.offsetTop + rowHeight + parseInt(this.verticalDisplayContainerElement.style.top, 10) :\n            containerHeight + rowHeight;\n        this.grid.nativeElement.focus({ preventScroll: true });\n        if (containerHeight && containerHeight < targetEndTopOffset) {\n            const nextIndex = currentRowIndex + 1;\n            this.grid.verticalScrollContainer.scrollTo(nextIndex);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    rowElement = this.getNextRowByIndex(nextIndex);\n                    this.focusElem(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusNextElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusElem(rowElement, visibleColumnIndex) {\n        if (rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n            rowElement.focus();\n        } else {\n            const isSummaryRow = rowElement.tagName.toLowerCase() === 'igx-grid-summary-row';\n            if (this.isColumnFullyVisible(visibleColumnIndex) && this.isColumnLeftFullyVisible(visibleColumnIndex)) {\n                const cellSelector = this.getCellSelector(visibleColumnIndex, isSummaryRow);\n                const cell = rowElement.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cell.focus();\n                return cell;\n            }\n            this.performHorizontalScrollToCell(parseInt(\n            rowElement.getAttribute('data-rowindex'), 10), visibleColumnIndex, isSummaryRow);\n        }\n    }\n\n    protected focusNextElement(rowElement, visibleColumnIndex) {\n        return  this.focusElem(rowElement.nextElementSibling, visibleColumnIndex);\n    }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();\n        if (verticalScroll.scrollTop === 0) {\n            this.onKeydownHome(this.grid.dataRowList.first.index);\n        } else {\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n                this.grid.nativeElement.focus({ preventScroll: true });\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        }\n    }\n\n    public goToLastCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rows = this.getAllRows();\n            const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n            this.onKeydownEnd(rowIndex);\n        } else {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rows = this.getAllRows();\n                    if (rows.length > 0) {\n                        const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n                        this.onKeydownEnd(rowIndex);\n                    }\n                });\n        }\n    }\n\n    public goToLastBodyElement() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rowIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n            const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`);\n            if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n                row.focus();\n                return;\n            }\n            const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n            this.onKeydownEnd(rowIndex, isSummary);\n        } else {\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rowIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n                    const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`);\n                    if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n                        row.focus();\n                        return;\n                    }\n                    const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n                    this.onKeydownEnd(rowIndex, isSummary);\n                });\n        }\n    }\n\n    public performTab(currentRowEl, rowIndex, visibleColumnIndex, isSummaryRow = false) {\n        if (isSummaryRow && rowIndex === 0 &&\n            this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n                return;\n\n        }\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            if (this.isRowInEditMode(rowIndex)) {\n                this.grid.rowEditTabs.first.element.nativeElement.focus();\n                return;\n            }\n            const rowEl = this.grid.rowList.find(row => row.index === rowIndex + 1) ?\n                this.grid.rowList.find(row => row.index === rowIndex + 1) :\n                this.grid.summariesRowList.find(row => row.index === rowIndex + 1);\n            if (rowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1 && this.grid.rootSummariesEnabled) {\n                this.onKeydownHome(0, true);\n                return;\n            }\n            if (rowEl) {\n                this.navigateDown(currentRowEl, rowIndex, 0);\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummaryRow);\n            if (cell) {\n                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {\n                    this.moveNextEditable(cell, rowIndex, visibleColumnIndex);\n                    return;\n                }\n                this.onKeydownArrowRight(cell, rowIndex, visibleColumnIndex, isSummaryRow);\n            }\n        }\n    }\n\n    public moveFocusToFilterCell(toStart?: boolean) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            this.grid.filteringService.focusFilterRowCloseButton();\n            return;\n        }\n\n        const columns = this.grid.filteringService.unpinnedFilterableColumns;\n        const targetIndex = toStart ? 0 : columns.length - 1;\n        const visibleIndex = columns[targetIndex].visibleIndex;\n        const isVisible = toStart ? this.isColumnLeftFullyVisible(visibleIndex) : this.isColumnFullyVisible(visibleIndex);\n        if (isVisible) {\n            this.grid.filteringService.focusFilterCellChip(columns[targetIndex], false);\n        } else {\n            this.grid.filteringService.scrollToFilterCell(columns[targetIndex], false);\n        }\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const prevFilterableIndex = cols.indexOf(column) - 1;\n        const visibleIndex = column.visibleIndex;\n        if (visibleIndex === 0 || prevFilterableIndex < 0) {\n            // prev is not filter cell\n            const firstFiltarableCol = this.getFirstPinnedFilterableColumn();\n            if (!firstFiltarableCol || column === firstFiltarableCol) {\n                eventArgs.preventDefault();\n            }\n            return;\n        }\n        const prevColumn = cols[prevFilterableIndex];\n        const prevVisibleIndex = prevColumn.visibleIndex;\n\n        if (prevFilterableIndex >= 0 && visibleIndex > 0 && !this.isColumnLeftFullyVisible(prevVisibleIndex) && !column.pinned) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(prevColumn, false);\n        }\n    }\n\n    public navigateFirstCellIfPossible(eventArgs) {\n        if (this.grid.rowList.length > 0) {\n            if (this.grid.rowList.filter(row => row instanceof IgxGridGroupByRowComponent).length > 0 ) {\n                eventArgs.stopPropagation();\n                return;\n            }\n            this.goToFirstCell();\n        } else if (this.grid.rootSummariesEnabled) {\n            this.onKeydownHome(0, true);\n        }\n        eventArgs.preventDefault();\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            this.navigateFirstCellIfPossible(eventArgs);\n            return;\n        }\n        const nextColumn = cols[nextFilterableIndex];\n        const nextVisibleIndex = nextColumn.visibleIndex;\n        if (!column.pinned && !this.isColumnFullyVisible(nextVisibleIndex)) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(nextColumn, true);\n        } else if (column === this.getLastPinnedFilterableColumn() && !this.isColumnFullyVisible(nextVisibleIndex)) {\n            this.grid.filteringService.scrollToFilterCell(nextColumn, false);\n            eventArgs.stopPropagation();\n        }\n    }\n\n    private getLastPinnedFilterableColumn(): IgxColumnComponent {\n        const pinnedFilterableColums =\n            this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable);\n        return pinnedFilterableColums[pinnedFilterableColums.length - 1];\n    }\n\n    private getFirstPinnedFilterableColumn(): IgxColumnComponent {\n        return this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable)[0];\n    }\n\n    public performShiftTabKey(currentRowEl, rowIndex, visibleColumnIndex, isSummary = false) {\n        if (isSummary && rowIndex === 0 && visibleColumnIndex === 0 && this.grid.rowList.length) {\n            this.goToLastBodyElement();\n            return;\n        }\n        if (visibleColumnIndex === 0) {\n            if (this.isRowInEditMode(rowIndex)) {\n                this.grid.rowEditTabs.last.element.nativeElement.focus();\n                return;\n            }\n            if (rowIndex === 0 && this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                this.navigateUp(currentRowEl, rowIndex,\n                    this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex);\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);\n            if (cell) {\n                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {\n                    this.movePreviousEditable(rowIndex, visibleColumnIndex);\n                    return;\n                }\n                this.onKeydownArrowLeft(cell, rowIndex, visibleColumnIndex, isSummary);\n            }\n        }\n    }\n\n    public shouldPerformVerticalScroll(targetRowIndex): boolean {\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n            .concat(this.grid.rowList.toArray()).find(r => r.index === targetRowIndex);\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(targetRowIndex);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = targetRow ? targetRow.nativeElement.offsetTop + rowHeight + containerTopOffset :\n                containerHeight + rowHeight;\n        if (!targetRow || targetRow.nativeElement.offsetTop < Math.abs(containerTopOffset)\n                || containerHeight && containerHeight < targetEndTopOffset) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private performHorizontalScrollToCell(rowIndex, visibleColumnIndex, isSummary = false) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        this.grid.nativeElement.focus({ preventScroll: true });\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary).focus({ preventScroll: true });\n            });\n        this.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);\n    }\n    protected getRowByIndex(index, selector = this.getRowSelector()) {\n        return this.grid.nativeElement.querySelector(\n                `${selector}[data-rowindex=\"${index}\"]`);\n    }\n\n    protected getNextRowByIndex(nextIndex) {\n        return this.grid.tbody.nativeElement.querySelector(\n            `[data-rowindex=\"${nextIndex}\"]`);\n    }\n\n    private getAllRows() {\n        const selector = this.getRowSelector();\n        return this.grid.nativeElement.querySelectorAll(selector);\n    }\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-grid-cell';\n    }\n\n    protected getRowSelector(): string {\n        return 'igx-grid-row';\n    }\n}\n","import { Directive, ElementRef, forwardRef, HostListener, Inject, QueryList } from '@angular/core';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { first, tap } from 'rxjs/operators';\nimport { IgxGridNavigationService } from './grid-navigation.service';\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEdit]'\n})\nexport class IgxRowEditTemplateDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditText]'\n})\nexport class IgxRowEditTextDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditActions]'\n})\nexport class IgxRowEditActionsDirective { }\n\n\n// TODO: Refactor circular ref, deps and logic\n/** @hidden */\n@Directive({\n    selector: `[igxRowEditTabStop]`\n})\nexport class IgxRowEditTabStopDirective {\n    private get allTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.grid.rowEditTabs;\n    }\n\n    private grid: IgxGridBaseComponent;\n    private navigationService: IgxGridNavigationService;\n\n    constructor(\n        @Inject(forwardRef(() => IgxGridBaseComponent)) grid,\n        public element: ElementRef,\n        @Inject(forwardRef(() => IgxGridNavigationService)) navigationService) {\n            this.grid = grid;\n            this.navigationService = navigationService;\n            this.navigationService.grid = grid;\n        }\n    @HostListener('keydown.Tab', [`$event`])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    public handleTab(event: KeyboardEvent): void {\n        event.stopPropagation();\n        if (this.allTabs.length > 1) {\n            if ((this.allTabs.last ===  this && !event.shiftKey) ||\n                (this.allTabs.first ===  this && event.shiftKey)\n            ) {\n                this.move(event);\n            }\n        } else {\n            this.move(event);\n        }\n    }\n    private focusNextCell(rowIndex, cellIndex) {\n        const grid = this.grid as any;\n        grid.parentVirtDir.onChunkLoad.pipe(first(), tap(() => grid.markForCheck())).subscribe(() => {\n            grid.rowInEditMode.cells.find(c => c.visibleColumnIndex === cellIndex).element.nativeElement.focus();\n        });\n    }\n    private move(event: KeyboardEvent) {\n        event.preventDefault();\n        const horizontalScroll = this.grid.parentVirtDir.getHorizontalScroll();\n        const targetIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;\n        const targetCell = this.grid.rowInEditMode.cells.find(e => e.visibleColumnIndex === targetIndex);\n        if (!targetCell ||\n            !this.navigationService.isColumnFullyVisible(targetIndex)\n            || !this.navigationService.isColumnLeftFullyVisible(targetIndex)) {\n            this.focusNextCell(this.grid.rowInEditMode.index, targetIndex);\n            horizontalScroll.scrollLeft =\n            this.grid.rowInEditMode.virtDirRow.getColumnScrollLeft(this.navigationService.getColumnUnpinnedIndex(targetIndex));\n        } else {\n            targetCell.nativeElement.focus();\n        }\n    }\n}\n","/* tslint:disable */\nexport default [\n    {\n        name: 'add_filter',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 15v-3h-2v3h-3v2h3v3h2v-3h3v-2h-3zM5 10h10v2H5zM2 5h16v2H2zM8 15h4v2H8z\"/>\n      </svg>`\n    },\n    {\n        name: 'contains',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 3v18h18V3zm16 16H5V5h14z\"/>\n        <path d=\"M12 11.3a4.39 4.39 0 0 0-2.54.63 2.07 2.07 0 0 0-.9 1.78 2.29 2.29 0 0 0 .66 1.74 2.63 2.63 0 0 0 1.89.63 2.39 2.39 0 0 0 1.32-.37 3.05 3.05 0 0 0 1-.93 3.72 3.72 0 0 0 .08.57c0 .19.1.38.16.58h1.79a4.51 4.51 0 0 1-.21-.88 5.57 5.57 0 0 1-.07-.93v-3.5a2.44 2.44 0 0 0-.84-2 3.34 3.34 0 0 0-2.22-.7 3.54 3.54 0 0 0-2.3.72A1.93 1.93 0 0 0 9 10.29h1.71a.93.93 0 0 1 .29-.71 1.5 1.5 0 0 1 1-.29 1.45 1.45 0 0 1 1 .35 1.3 1.3 0 0 1 .37 1v.69zm1.4 1.08v1.17a1.61 1.61 0 0 1-.71.77 2.27 2.27 0 0 1-1.21.34 1.18 1.18 0 0 1-.84-.27.92.92 0 0 1-.3-.72 1.16 1.16 0 0 1 .44-.9 1.76 1.76 0 0 1 1.22-.39z\"/>\n      </svg>`\n    },\n    {\n        name: 'does_not_contain',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21,19.74V3H4.26L2.89,1.63,1.63,2.92,3,4.29V21H19.73l1.37,1.37,1.27-1.26ZM5,19V6.28l5.28,5.27a3.19,3.19,0,0,0-.81.38,2.07,2.07,0,0,0-.9,1.78,2.29,2.29,0,0,0,.66,1.74,2.63,2.63,0,0,0,1.89.63,2.39,2.39,0,0,0,1.32-.37,3.05,3.05,0,0,0,1-.93,3.72,3.72,0,0,0,.08.57c0,.19.1.38.16.58h1L17.73,19Zm5.79-6.23a1.31,1.31,0,0,1,.45-.25l1.37,1.36.28.29a1.57,1.57,0,0,1-.19.15,2.27,2.27,0,0,1-1.21.34,1.18,1.18,0,0,1-.84-.27.92.92,0,0,1-.3-.72A1.16,1.16,0,0,1,10.79,12.77Zm2.6-1.47h-.83L10.94,9.68l.08-.1a1.5,1.5,0,0,1,1-.29,1.45,1.45,0,0,1,1,.35,1.3,1.3,0,0,1,.37,1ZM19,17.74l-3.85-3.85V10.62a2.44,2.44,0,0,0-.84-2,3.34,3.34,0,0,0-2.22-.7,3.64,3.64,0,0,0-2.24.67L6.26,5H19Z\"/>\n    </svg>`\n    },\n    {\n        name: 'all',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M2 14h8v2H2zM2 6h12v2H2zM16 17l-3-3-1.5 1.5L16 20l7-7-1.5-1.5L16 17zM2 10h12v2H2z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 17h2v2H5zM13 17h2v2h-2zM5 13h2v2H5zM17 17h2v2h-2zM13 5h2v2h-2zM9 17h2v2H9zM17 9h2v2h-2zM17 13h2v2h-2zM17 5h2v2h-2zM5 9h2v2H5zM5 5h2v2H5zM9 5h2v2H9z\"/>\n      </svg>`\n    },\n    {\n        name: 'end_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M13.14 6.76L17.49 12l-4.35 5.24 1.54 1.28L20.09 12l-5.41-6.52-1.54 1.28z\"/>\n        <path d=\"M11.91 11h2v2h-2zM7.91 11h2v2h-2zM3.91 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'ends_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 14.5h2v2H3zM11 14.5h2v2h-2zM7 14.5h2v2H7zM20.8 14.8v-3A2.1 2.1 0 0 0 20 10a3 3 0 0 0-2-.6 3 3 0 0 0-2 .6 1.7 1.7 0 0 0-.7 1.5h1.5a.8.8 0 0 1 .3-.7 1.3 1.3 0 0 1 .9-.3 1.3 1.3 0 0 1 .9.4 1.1 1.1 0 0 1 .3.8v.6H18a3.8 3.8 0 0 0-2.2.6 1.8 1.8 0 0 0-.8 1.5 2 2 0 0 0 .6 1.6 2.3 2.3 0 0 0 1.6.6 2.1 2.1 0 0 0 1.2-.4 2.8 2.8 0 0 0 .8-.8 4.3 4.3 0 0 0 .1.5l.1.5H21a4.1 4.1 0 0 1-.2-.7 5.4 5.4 0 0 1 0-1zm-1.6-.5a1.5 1.5 0 0 1-.6.7 2 2 0 0 1-1 .2 1.1 1.1 0 0 1-.8-.2.8.8 0 0 1-.2-.6 1 1 0 0 1 .3-.8 1.5 1.5 0 0 1 1.1-.3h1.2z\"/>\n      </svg>`\n    },\n    {\n        name: 'equals',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 13.5h14v2H5zM5 8.5h14v2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 9.47L6 3v2.11L15.09 10 6 14.9v2.11l12-6.47V9.47z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 7.11L15.09 12 6 16.89V19l12-6.46v-1.08L6 5v2.11z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'is_after',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 7h4v10h-4v2h6V5h-6v2zM11 3h2v18h-2zM7 5h2v2H7zM3 5h2v2H3zM3 17h2v2H3zM3 13h2v2H3zM3 9h2v2H3zM7 17h2v2H7z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_before',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 19h6v-2H5V7h4V5H3v14zM11 3h2v18h-2zM15 5h2v2h-2zM19 5h2v2h-2zM19 13h2v2h-2zM15 17h2v2h-2zM19 17h2v2h-2zM19 9h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_false',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm4.31 9.79l-1.52 1.52L8 13.52l-2.79 2.79-1.52-1.52L6.48 12 3.69 9.21l1.52-1.52L8 10.48l2.79-2.79 1.52 1.52L9.52 12zM18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7z\"/>\n        <path d=\"M17.52 13.85l2.91-2.92-.78-.78-2.13 2.12-1.17-1.15-.38.37-.41.41.42.42L17 13.34l.52.51z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_not_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M16.58 6.07l.79-1.36-1.74-1-.78 1.35a7.5 7.5 0 0 0-7.43 12.87l-.79 1.36 1.74 1 .78-1.35a7.5 7.5 0 0 0 7.43-12.87zM6.5 12A5.5 5.5 0 0 1 12 6.5a5.65 5.65 0 0 1 1.84.32l-5.41 9.36A5.49 5.49 0 0 1 6.5 12zm5.5 5.5a5.65 5.65 0 0 1-1.84-.32l5.41-9.36A5.5 5.5 0 0 1 12 17.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M12 4.5a7.5 7.5 0 1 0 7.5 7.5A7.5 7.5 0 0 0 12 4.5zm0 13a5.5 5.5 0 1 1 5.5-5.5 5.5 5.5 0 0 1-5.5 5.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_true',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19.44 14.22zM16.56 14.22zM16.56 14.22L18 12.79l1.44 1.43.78-.78L18.79 12l1.43-1.44-.78-.78L18 11.21l-1.44-1.43-.78.78L17.21 12l-1.43 1.44.78.78z\"/>\n        <path d=\"M18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7zM8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm-.93 10.18l-3.38-3.37 1.13-1.12 2.25 2.25 4.11-4.12 1.13 1.12z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.5 14a4.48 4.48 0 1 0 4.5 4.5 4.47 4.47 0 0 0-4.5-4.5zm3.5 5.5h-4v2l-3-3 3-3v2h4zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 10v11H7v2h14a2 2 0 0 0 2-2V10z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.87 9l-2.99 3 2.99 3v-2.25h5.26v-1.5H8.87V9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 14.9L8.91 10 18 5.11V3L6 9.47v1.07l12 6.47V14.9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 12.54L18 19v-2.11L8.91 12 18 7.11V5L6 11.46v1.08z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M20 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2 6.74v-2h-4v-2h4v-2l3 3zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M11.13 11.25H5.88v1.5h5.25V15l3-3-3-3v2.25z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 9h2v2H5zM9 17h2v2H9zM13 17h2v2h-2zM17 9h2v2h-2zM17 5h2v2h-2zM5 17h2v2H5zM13 5h2v2h-2zM5 13h2v2H5zM19 15v-2h-2v.47L18.53 15H19zM11 7V5H9v.46L10.54 7H11zM2.76 1.76L1.5 3.06 20.97 22.5l1.26-1.26-8.89-8.89L2.76 1.76z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.37 4.71l-1.74-1-2.76 4.79H5v2h6.71l-1.73 3H5v2h3.82l-2.19 3.79 1.74 1 2.76-4.79H19v-2h-6.71l1.73-3H19v-2h-3.82l2.19-3.79z\"/>\n      </svg>`\n    },\n    {\n        name: 'start_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M18.1 11h2v2h-2zM10.1 11h2v2h-2z\"/>\n        <path d=\"M10.9 6.8L9.3 5.5 4 12l5.4 6.5 1.6-1.3L6.5 12 11 6.8zM14.1 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'starts_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M4.97 13.23h3.06L6.5 9.12l-1.53 4.11z\"/>\n        <path d=\"M5.89 7.5L2 16.5h1.72l.73-1.8h4.1l.73 1.8H11l-3.89-9zM5 13.23l1.5-4.11L8 13.23zM12 14.5h2v2h-2zM20 14.5h2v2h-2zM16 14.5h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 9h2v2H6zM6 13h2v2H6zM11 13h2v2h-2zM6 17h2v2H6zM11 17h2v2h-2zM11 9h2v2h-2zM16 9h2v2h-2zM21 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2.94 5.41l-1.75-1.76.69-.71 1.05 1L20 16.83l.71.71z\"/>\n        <path d=\"M5 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.85 13.15l-1.77-1.77-.88.89 2.65 2.65 4.95-4.96-.88-.88-4.07 4.07z\"/>\n      </svg>`\n    },\n    {\n        name: 'today',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n        <path d=\"M16.53 12.06L15.47 11l-4.88 4.88-2.12-2.12-1.06 1.06L10.59 18l5.94-5.94z\"/>\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 15h5v5h-5zM6 13h5v5H6zM13 6h5v5h-5zM6 6h5v5H6z\"/>\n        <path d=\"M20 2H4a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h9v-2H4V4h16v9h2V4a2 2 0 0 0-2-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'yesterday',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M10.68 15.38h6.13v-1.75h-6.13V11l-3.49 3.5 3.49 3.5v-2.62z\"/>\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n      </svg>`\n    },\n    {\n        name: 'pin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15.18 2.25l7.07 7.07-2.83-.01-3.54 3.55.01 4.24-3.53-3.54-5.66 5.66H5.28V17.8l5.66-5.66L7.4 8.61l4.24.01 3.55-3.54-.01-2.83z\"/>\n      </svg>`\n    },\n    {\n        name: 'unpin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M0 0h24v25H0V0z\"/>\n        <path d=\"M11.84 14.08L6.7 19.22H5.28V17.8l5.14-5.14L2 4.26 3.29 3l18 18L20 22.21zm4-.49l-5-5h.73l3.55-3.54v-2.8l7.07 7.07h-2.77l-3.54 3.54z\" />\n      </svg>`\n    }\n];\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-strategy';\nimport { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridSort',\n    pure: true\n})\nexport class IgxGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expressions: ISortingExpression[], id: string, pipeTrigger: number): any[] {\n        const grid = this.gridAPI.grid;\n        let result: any[];\n\n        if (!expressions.length) {\n            result = collection;\n        } else {\n            result = DataUtil.sort(cloneArray(collection), expressions);\n        }\n        grid.filteredSortedData = result;\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPreGroupBy',\n    pure: true\n})\nexport class IgxGridPreGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expression: IGroupingExpression | IGroupingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, groupsRecords: any[], pipeTrigger: number): IGroupByResult {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        state.expressions = grid.groupingExpressions;\n\n        if (!state.expressions.length) {\n            // empty the array without changing reference\n            groupsRecords.splice(0, groupsRecords.length);\n            return {\n                data: collection,\n                metadata: collection\n            };\n        }\n\n        state.expansion = grid.groupingExpansionState;\n        state.defaultExpanded = grid.groupsExpanded;\n\n        return DataUtil.group(cloneArray(collection), state, grid, groupsRecords);\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPostGroupBy',\n    pure: true\n})\nexport class IgxGridPostGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: IGroupByResult, expression: IGroupingExpression | IGroupingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, pipeTrigger: number): any[] {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        state.expressions = grid.groupingExpressions;\n\n        if (!state.expressions.length) {\n            return collection.data;\n        }\n\n        state.expansion = grid.groupingExpansionState;\n        state.defaultExpanded = grid.groupsExpanded;\n\n        return DataUtil.restoreGroups({\n            data: cloneArray(collection.data),\n            metadata: cloneArray(collection.metadata)\n        }, state);\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPaging',\n    pure: true\n})\nexport class IgxGridPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    public transform(collection: IGroupByResult, page = 0, perPage = 15, id: string, pipeTrigger: number): IGroupByResult {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: IGroupByResult = {\n            data: DataUtil.page(cloneArray(collection.data), state),\n            metadata: DataUtil.page(cloneArray(collection.metadata), state)\n        };\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridFiltering',\n    pure: true\n})\nexport class IgxGridFilteringPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    public transform(collection: any[], expressionsTree: IFilteringExpressionsTree,\n        id: string, pipeTrigger: number) {\n        const grid = this.gridAPI.grid;\n        const state = { expressionsTree: expressionsTree };\n\n        if (!state.expressionsTree ||\n            !state.expressionsTree.filteringOperands ||\n            state.expressionsTree.filteringOperands.length === 0) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        grid.filteredData = result;\n        return result;\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { IgxIconService } from '../../icon/icon.service';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IgxGridBaseComponent, IColumnResizeEventArgs, IGridDataBindable } from '../grid-base.component';\nimport icons from './svgIcons';\nimport { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\nimport { IgxGridSortingPipe } from '../grid/grid.pipes';\nimport { IgxDatePipeComponent } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { GridBaseAPIService } from '../api.service';\n\nconst FILTERING_ICONS_FONT_SET = 'filtering-icons';\n\n/**\n *@hidden\n */\nexport class ExpressionUI {\n    public expression: IFilteringExpression;\n    public beforeOperator: FilteringLogic;\n    public afterOperator: FilteringLogic;\n    public isSelected = false;\n    public isVisible = true;\n}\n\n/**\n *@hidden\n */\n@Injectable()\nexport class IgxFilteringService implements OnDestroy {\n\n    private columnsWithComplexFilter = new Set<string>();\n    private areEventsSubscribed = false;\n    private destroy$ = new Subject<boolean>();\n    private isFiltering = false;\n    private columnToExpressionsMap = new Map<string, ExpressionUI[]>();\n    private _datePipe: IgxDatePipeComponent;\n    private columnStartIndex = -1;\n\n    public gridId: string;\n    public isFilterRowVisible = false;\n    public filteredColumn: IgxColumnComponent = null;\n    public selectedExpression: IFilteringExpression = null;\n    public columnToFocus: IgxColumnComponent = null;\n    public shouldFocusNext = false;\n    public columnToMoreIconHidden = new Map<string, boolean>();\n\n    grid: IgxGridBaseComponent;\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, private iconService: IgxIconService) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public get displayContainerWidth() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);\n    }\n\n    public get displayContainerScrollLeft() {\n        return parseInt(this.grid.parentVirtDir.getHorizontalScroll().scrollLeft, 10);\n    }\n\n    public get areAllColumnsInView() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10) === 0;\n    }\n\n    public get unpinnedFilterableColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup && col.filterable);\n    }\n\n    public get unpinnedColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup);\n    }\n\n    public get datePipe(): IgxDatePipeComponent {\n        if (!this._datePipe) {\n            this._datePipe = new IgxDatePipeComponent(this.grid.locale);\n        }\n        return this._datePipe;\n    }\n\n    /**\n     * Subscribe to grid's events.\n     */\n    public subscribeToEvents() {\n        if (!this.areEventsSubscribed) {\n            this.areEventsSubscribed = true;\n\n            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IColumnResizeEventArgs) => {\n                this.updateFilteringCell(eventArgs.column);\n            });\n\n            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IForOfState) => {\n                if (eventArgs.startIndex !== this.columnStartIndex) {\n                    this.columnStartIndex = eventArgs.startIndex;\n                    this.grid.filterCellList.forEach((filterCell) => {\n                        filterCell.updateFilterCellArea();\n                    });\n                }\n                if (this.columnToFocus) {\n                    this.focusFilterCellChip(this.columnToFocus, false);\n                    this.columnToFocus = null;\n                }\n            });\n\n            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.grid.filterCellList.forEach((filterCell) => {\n                    filterCell.updateFilterCellArea();\n                });\n            });\n        }\n    }\n\n    /**\n     * Internal method to create expressionsTree and filter grid used in both filter modes.\n     */\n    public filterInternal(field: string, expressions: FilteringExpressionsTree | Array<ExpressionUI> = null): void {\n        this.isFiltering = true;\n\n        let expressionsTree;\n        if (expressions instanceof FilteringExpressionsTree) {\n            expressionsTree = expressions;\n        } else {\n            expressionsTree = this.createSimpleFilteringTree(field, expressions);\n        }\n\n        if (expressionsTree.filteringOperands.length === 0) {\n            this.clearFilter(field);\n        } else {\n            this.filter(field, null, expressionsTree);\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Execute filtering on the grid.\n     */\n    public filter(field: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        const col = this.gridAPI.get_column_by_name(field);\n        const filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);\n\n        if (conditionOrExpressionTree) {\n            this.gridAPI.filter(field, value, conditionOrExpressionTree, filteringIgnoreCase);\n        } else {\n            const expressionsTreeForColumn = this.grid.filteringExpressionsTree.find(field);\n            if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {\n                this.gridAPI.filter(field, value, expressionsTreeForColumn, filteringIgnoreCase);\n            } else {\n                const expressionForColumn = expressionsTreeForColumn as IFilteringExpression;\n                this.gridAPI.filter(field, value, expressionForColumn.condition, filteringIgnoreCase);\n            }\n        }\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(col.filteringExpressionsTree));\n    }\n\n    /**\n     * Clear the filter of a given column.\n     */\n    public clearFilter(field: string): void {\n        if (field) {\n            const column = this.gridAPI.get_column_by_name(field);\n            if (!column) {\n                return;\n            }\n        }\n\n        this.isFiltering = true;\n\n        this.gridAPI.clear_filter(field);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(null));\n\n        if (field) {\n            const expressions = this.getExpressions(field);\n            expressions.length = 0;\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     */\n    public filterGlobal(value: any, condition?, ignoreCase?) {\n        this.gridAPI.filter_global(value, condition, ignoreCase);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(this.grid.filteringExpressionsTree));\n    }\n\n    /**\n     * Register filtering SVG icons in the icon service.\n     */\n    public registerSVGIcons(): void {\n        for (const icon of icons) {\n            if (!this.iconService.isSvgIconCached(icon.name, FILTERING_ICONS_FONT_SET)) {\n                this.iconService.addSvgIconFromText(icon.name, icon.value, FILTERING_ICONS_FONT_SET);\n            }\n        }\n    }\n\n    /**\n     * Returns the ExpressionUI array for a given column.\n     */\n    public getExpressions(columnId: string): ExpressionUI[] {\n        if (!this.columnToExpressionsMap.has(columnId)) {\n            const column = this.grid.columns.find((col) => col.field === columnId);\n            const expressionUIs = new Array<ExpressionUI>();\n\n            this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);\n            this.columnToExpressionsMap.set(columnId, expressionUIs);\n\n            return expressionUIs;\n        }\n\n        return this.columnToExpressionsMap.get(columnId);\n    }\n\n    /**\n     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.\n     */\n    public refreshExpressions() {\n        if (!this.isFiltering) {\n            this.columnsWithComplexFilter.clear();\n\n            this.columnToExpressionsMap.forEach((value: ExpressionUI[], key: string) => {\n                const column = this.grid.columns.find((col) => col.field === key);\n                if (column) {\n                    value.length = 0;\n\n                    this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, value);\n\n                    const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n                    if (isComplex) {\n                        this.columnsWithComplexFilter.add(key);\n                    }\n\n                    this.updateFilteringCell(column);\n                } else {\n                    this.columnToExpressionsMap.delete(key);\n                }\n            });\n        }\n    }\n\n    /**\n     * Remove an ExpressionUI for a given column.\n     */\n    public removeExpression(columnId: string, indexToRemove: number) {\n        const expressionsList = this.getExpressions(columnId);\n\n        if (indexToRemove === 0 && expressionsList.length > 1) {\n            expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === expressionsList.length - 1) {\n            expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;\n            expressionsList[0].beforeOperator = null;\n            expressionsList[expressionsList.length - 1].afterOperator = null;\n        }\n\n        expressionsList.splice(indexToRemove, 1);\n    }\n\n    /**\n     * Generate filtering tree for a given column from existing ExpressionUIs.\n     */\n    public createSimpleFilteringTree(columnId: string, expressionUIList = null): FilteringExpressionsTree {\n        const expressionsList = expressionUIList ? expressionUIList : this.getExpressions(columnId);\n        const expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);\n        let currAndBranch: FilteringExpressionsTree;\n        let currExpressionUI: ExpressionUI;\n\n        for (let i = 0; i < expressionsList.length; i++) {\n            currExpressionUI = expressionsList[i];\n\n            if (!currExpressionUI.expression.condition.isUnary && currExpressionUI.expression.searchVal === null) {\n                if (currExpressionUI.afterOperator === FilteringLogic.And && !currAndBranch) {\n                    currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                    expressionsTree.filteringOperands.push(currAndBranch);\n                }\n                continue;\n            }\n\n            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||\n                 currExpressionUI.beforeOperator === FilteringLogic.Or) &&\n                currExpressionUI.afterOperator === FilteringLogic.And) {\n\n                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                expressionsTree.filteringOperands.push(currAndBranch);\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n\n            } else if (currExpressionUI.beforeOperator === FilteringLogic.And) {\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n            } else {\n                expressionsTree.filteringOperands.push(currExpressionUI.expression);\n                currAndBranch = null;\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * Returns whether a complex filter is applied to a given column.\n     */\n    public isFilterComplex(columnId: string) {\n        if (this.columnsWithComplexFilter.has(columnId)) {\n            return true;\n        }\n\n        const column = this.grid.columns.find((col) => col.field === columnId);\n        const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n        if (isComplex) {\n            this.columnsWithComplexFilter.add(columnId);\n        }\n\n        return isComplex;\n    }\n\n    /**\n     * Returns the string representation of the FilteringLogic operator.\n     */\n    public getOperatorAsString(operator: FilteringLogic): any {\n        if (operator === 0) {\n            return this.grid.resourceStrings.igx_grid_filter_operator_and;\n        } else {\n            return this.grid.resourceStrings.igx_grid_filter_operator_or;\n        }\n    }\n\n    /**\n     * Generate the label of a chip from a given filtering expression.\n     */\n    public getChipLabel(expression: IFilteringExpression): any {\n        if (expression.condition.isUnary) {\n            return this.grid.resourceStrings[`igx_grid_filter_${expression.condition.name}`] || expression.condition.name;\n        } else if (expression.searchVal instanceof Date) {\n            return this.datePipe.transform(expression.searchVal, this.grid.locale);\n        } else {\n            return expression.searchVal;\n        }\n    }\n\n    /**\n     * Updates the content of a filterCell.\n     */\n    public updateFilteringCell(column: IgxColumnComponent) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.updateFilterCellArea();\n        }\n    }\n\n    /**\n     * Focus a chip in a filterCell.\n     */\n    public focusFilterCellChip(column: IgxColumnComponent, focusFirst: boolean) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.focusChip(focusFirst);\n        }\n    }\n\n    /**\n     * Focus the close button in the filtering row.\n     */\n    public focusFilterRowCloseButton() {\n        this.grid.filteringRow.closeButton.nativeElement.focus();\n    }\n\n    public get filteredData() {\n        return this.grid.filteredData;\n    }\n\n    public get sortedData() {\n        const sortData = new IgxGridSortingPipe((this.grid as any).gridAPI)\n            .transform(this.grid.data, this.grid.sortingExpressions, this.gridId, 0);\n        return sortData;\n    }\n\n    /**\n     * Scrolls to a filterCell.\n     */\n    public scrollToFilterCell(column: IgxColumnComponent, shouldFocusNext: boolean) {\n        this.grid.nativeElement.focus({preventScroll: true});\n        this.columnToFocus = column;\n        this.shouldFocusNext = shouldFocusNext;\n\n        let currentColumnRight = 0;\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.unpinnedColumns[index].width, 10);\n            if (this.unpinnedColumns[index] === column) {\n                currentColumnLeft = currentColumnRight - parseInt(this.unpinnedColumns[index].width, 10);\n                break;\n            }\n        }\n\n        const forOfDir = this.grid.headerContainer;\n        const width = this.displayContainerWidth + this.displayContainerScrollLeft;\n        if (shouldFocusNext) {\n            forOfDir.getHorizontalScroll().scrollLeft += currentColumnRight - width;\n        } else {\n            forOfDir.getHorizontalScroll().scrollLeft = currentColumnLeft;\n        }\n    }\n\n    private isFilteringTreeComplex(expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (!expressions) {\n            return false;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            if (expressionsTree.operator === FilteringLogic.Or) {\n                const andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);\n\n                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.\n                return andOperatorsCount > 1;\n            }\n\n            let isComplex = false;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);\n            }\n\n            return isComplex;\n        }\n\n        return false;\n    }\n\n    private getChildAndOperatorsCount(expressions: IFilteringExpressionsTree): number {\n        let count = 0;\n        let operand;\n        for (let i = 0; i < expressions.filteringOperands.length; i++) {\n            operand = expressions[i];\n            if (operand instanceof FilteringExpressionsTree) {\n                if (operand.operator === FilteringLogic.And) {\n                    count++;\n                }\n\n                count = count + this.getChildAndOperatorsCount(operand);\n            }\n        }\n\n        return count;\n    }\n\n    public generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression,\n        operator: FilteringLogic,\n        expressionsUIs: ExpressionUI[]): void {\n        this.generateExpressionsListRecursive(expressions, operator, expressionsUIs);\n\n        // The beforeOperator of the first expression and the afterOperator of the last expression should be null\n        if (expressionsUIs.length) {\n            expressionsUIs[expressionsUIs.length - 1].afterOperator = null;\n        }\n    }\n\n    private generateExpressionsListRecursive(expressions: IFilteringExpressionsTree | IFilteringExpression,\n                                    operator: FilteringLogic,\n                                    expressionsUIs: ExpressionUI[]): void {\n        if (!expressions) {\n            return;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                this.generateExpressionsListRecursive(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);\n            }\n            if (expressionsUIs.length) {\n                expressionsUIs[expressionsUIs.length - 1].afterOperator = operator;\n            }\n        } else {\n            const exprUI = new ExpressionUI();\n            exprUI.expression = expressions as IFilteringExpression;\n            exprUI.afterOperator = operator;\n\n            const prevExprUI = expressionsUIs[expressionsUIs.length - 1];\n            if (prevExprUI) {\n                exprUI.beforeOperator = prevExprUI.afterOperator;\n            }\n\n            expressionsUIs.push(exprUI);\n        }\n    }\n\n    public isFilteringExpressionsTreeEmpty(): boolean {\n        const expressionTree = this.grid.filteringExpressionsTree;\n        if (!expressionTree.filteringOperands || !expressionTree.filteringOperands.length) {\n            return true;\n        }\n\n        let expr: any;\n\n        for (let i = 0; i < expressionTree.filteringOperands.length; i++) {\n            expr = expressionTree.filteringOperands[i];\n\n            if ((expr instanceof FilteringExpressionsTree)) {\n                const exprTree = expr as FilteringExpressionsTree;\n                if (exprTree.filteringOperands && exprTree.filteringOperands.length) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","import { SimpleChanges, SimpleChange } from '@angular/core';\n\n/**\n* @hidden\n*/\nexport function WatchChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const oldValue = this[key];\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                originalSetter.call(this, val);\n                if (this.ngOnChanges) {\n                    // in case wacthed prop changes trigger ngOnChanges manually\n                    const changes: SimpleChanges = {\n                        [key]: new SimpleChange(oldValue, val, false)\n                    };\n                    this.ngOnChanges(changes);\n               }\n            }\n        };\n        return propDesc;\n    };\n}\n","import {\n    AfterViewInit,\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ViewChild\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxFilterOptions } from '../../../directives/filter/filter.directive';\nimport { IChangeCheckboxEventArgs } from '../../../checkbox/checkbox.component';\nimport { IgxInputDirective } from '../../../directives/input/input.directive';\nimport { DisplayDensity } from '../../../core/density';\nimport { IgxForOfDirective } from '../../../directives/for-of/for_of.directive';\nimport { FilterListItem } from './grid.excel-style-filtering.component';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-search',\n    templateUrl: './excel-style-search.component.html'\n})\nexport class IgxExcelStyleSearchComponent implements AfterViewInit {\n\n    public searchValue: any;\n\n    @Input()\n    public data: FilterListItem[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('input', { read: IgxInputDirective })\n    public searchInput: IgxInputDirective;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild(IgxForOfDirective)\n    protected virtDir: IgxForOfDirective<any>;\n\n    constructor() {}\n\n    public ngAfterViewInit() {\n        requestAnimationFrame(() => {\n            this.virtDir.recalcUpdateSizes();\n        });\n    }\n\n    public clearInput() {\n        this.searchValue = null;\n    }\n\n    public onCheckboxChange(eventArgs: IChangeCheckboxEventArgs) {\n        const selectedIndex = this.data.indexOf(eventArgs.checkbox.value);\n        if (selectedIndex === 0) {\n            this.data.forEach(element => {\n                element.isSelected = eventArgs.checked;\n                this.data[0].indeterminate = false;\n            });\n        } else {\n            eventArgs.checkbox.value.isSelected = eventArgs.checked;\n            if (!this.data.slice(1, this.data.length).find(el => el.isSelected === false)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = true;\n            } else if (!this.data.slice(1, this.data.length).find(el => el.isSelected === true)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = false;\n            } else {\n                this.data[0].indeterminate = true;\n            }\n        }\n        eventArgs.checkbox.nativeCheckbox.nativeElement.blur();\n    }\n\n    public get itemSize() {\n        let itemSize = '48px';\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy: itemSize = '32px'; break;\n            case DisplayDensity.compact: itemSize = '28px'; break;\n            default: break;\n        }\n        return itemSize;\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    AfterViewInit,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectorRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { ExpressionUI } from '../grid-filtering.service';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDropDownItemComponent, IgxDropDownComponent } from '../../../drop-down/index';\nimport { IgxInputGroupComponent, IgxInputDirective } from '../../../input-group/index';\nimport { DataType } from '../../../data-operations/data-util';\nimport { IFilteringOperation } from '../../../data-operations/filtering-condition';\nimport { OverlaySettings, ConnectedPositioningStrategy, CloseScrollStrategy } from '../../../services/index';\nimport { KEYS } from '../../../core/utils';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\nexport interface ILogicOperatorChangedArgs {\n    target: ExpressionUI;\n    newValue: FilteringLogic;\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-default-expression',\n    templateUrl: './excel-style-default-expression.component.html'\n})\nexport class IgxExcelStyleDefaultExpressionComponent implements AfterViewInit {\n\n    private _dropDownOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(),\n        scrollStrategy: new CloseScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public expressionUI: ExpressionUI;\n\n    @Input()\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @Output()\n    public onExpressionRemoved = new EventEmitter<ExpressionUI>();\n\n    @Output()\n    public onLogicOperatorChanged = new EventEmitter<ILogicOperatorChangedArgs>();\n\n    @ViewChild('inputGroupConditions', { read: IgxInputGroupComponent })\n    protected inputGroupConditions: IgxInputGroupComponent;\n\n    @ViewChild('inputValues', { read: IgxInputDirective })\n    protected inputValuesDirective: IgxInputDirective;\n\n    @ViewChild('dropdownConditions', { read: IgxDropDownComponent })\n    protected dropdownConditions: IgxDropDownComponent;\n\n    @ViewChild('logicOperatorButtonGroup', { read: IgxButtonGroupComponent })\n    protected logicOperatorButtonGroup: IgxButtonGroupComponent;\n\n    protected get inputValuesElement() {\n        return this.inputValuesDirective;\n    }\n\n    get isLast(): boolean {\n        return this.expressionsList[this.expressionsList.length - 1] === this.expressionUI;\n    }\n\n    get isSingle(): boolean {\n        return this.expressionsList.length === 1;\n    }\n\n    get inputConditionsPlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_condition_placeholder'];\n    }\n\n    get inputValuePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_placeholder'];\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.Number:\n                return 'number';\n            default:\n                return 'text';\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._dropDownOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._dropDownOverlaySettings.positionStrategy.settings.target = this.inputGroupConditions.element.nativeElement;\n    }\n\n    public focus() {\n        // use requestAnimationFrame to focus the values input because when initializing the component\n        // datepicker's input group is not yet fully initialized\n        requestAnimationFrame(() => this.inputValuesElement.focus());\n    }\n\n    public isConditionSelected(conditionName: string): boolean {\n        return this.expressionUI.expression.condition && this.expressionUI.expression.condition.name === conditionName;\n    }\n\n    public getConditionName(condition: IFilteringOperation) {\n        return condition ? this.translateCondition(condition.name) : null;\n    }\n\n    public getInputWidth() {\n        return this.inputGroupConditions.element.nativeElement.offsetWidth + 'px';\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expressionUI.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else if (!this.expressionUI.expression.condition) {\n            return 'filter_list';\n        } else {\n            return this.expressionUI.expression.condition.iconName;\n        }\n    }\n\n    public toggleCustomDialogDropDown() {\n        this.dropdownConditions.toggle(this._dropDownOverlaySettings);\n    }\n\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    public onConditionsChanged(eventArgs: any) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expressionUI.expression.condition = this.getCondition(value);\n\n        this.focus();\n    }\n\n    public isValueSelected(value: string): boolean {\n        if (this.expressionUI.expression.searchVal) {\n            return this.expressionUI.expression.searchVal === value;\n        } else {\n            return false;\n        }\n    }\n\n    public onValuesInput(eventArgs) {\n        this.expressionUI.expression.searchVal = this.transformValue(eventArgs.target.value);\n    }\n\n    public onLogicOperatorButtonClicked(eventArgs, buttonIndex: number) {\n        if (this.logicOperatorButtonGroup.selectedButtons.length === 0) {\n            eventArgs.stopPropagation();\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n        } else {\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onLogicOperatorKeyDown(eventArgs, buttonIndex: number) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onRemoveButtonClick() {\n        this.onExpressionRemoved.emit(this.expressionUI);\n    }\n\n    public onInputConditionsKeyDown(eventArgs) {\n        if (eventArgs.altKey && (eventArgs.key === KEYS.DOWN_ARROW || eventArgs.key === KEYS.DOWN_ARROW_IE)) {\n            this.toggleCustomDialogDropDown();\n        }\n\n        if (eventArgs.key === KEYS.TAB && eventArgs.shiftKey && this.expressionsList[0] === this.expressionUI) {\n            eventArgs.preventDefault();\n        }\n\n        event.stopPropagation();\n    }\n\n    private transformValue(value): any {\n        if (this.column.dataType === DataType.Number) {\n            value = parseFloat(value);\n        } else if (this.column.dataType === DataType.Boolean) {\n            value = Boolean(value);\n        }\n\n        return value;\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxDatePickerComponent } from '../../../date-picker/date-picker.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-date-expression',\n    templateUrl: './excel-style-date-expression.component.html'\n})\nexport class IgxExcelStyleDateExpressionComponent extends IgxExcelStyleDefaultExpressionComponent {\n\n    @ViewChild('datePicker', { read: IgxDatePickerComponent })\n    private datePicker: IgxDatePickerComponent;\n\n    protected get inputValuesElement() {\n        return this.datePicker.getEditElement();\n    }\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    get inputDatePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_date_placeholder'];\n    }\n\n    public openDatePicker(openDialog: Function) {\n        openDialog();\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ChangeDetectorRef,\n    ViewChild,\n    AfterViewInit,\n    TemplateRef,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DataType } from '../../../data-operations/data-util';\nimport {\n    IgxStringFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport {\n    ConnectedPositioningStrategy,\n    OverlaySettings,\n    VerticalAlignment,\n    PositionSettings,\n    HorizontalAlignment,\n    IgxOverlayService,\n    AbsoluteScrollStrategy\n} from '../../../services/index';\nimport { ILogicOperatorChangedArgs, IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { KEYS } from '../../../core/utils';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-custom-dialog',\n    templateUrl: './excel-style-custom-dialog.component.html'\n})\nexport class IgxExcelStyleCustomDialogComponent implements AfterViewInit {\n\n    @Input()\n    public expressionsList = new Array<ExpressionUI>();\n\n    private _customDialogPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _customDialogOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._customDialogPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public selectedOperator: string;\n\n    @Input()\n    public filteringService: IgxFilteringService;\n\n    @Input()\n    public overlayComponentId: string;\n\n    @Input()\n    public overlayService: IgxOverlayService;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChildren(IgxExcelStyleDefaultExpressionComponent)\n    private expressionComponents: QueryList<IgxExcelStyleDefaultExpressionComponent>;\n\n    @ViewChildren(IgxExcelStyleDateExpressionComponent)\n    private expressionDateComponents: QueryList<IgxExcelStyleDateExpressionComponent>;\n\n    @ViewChild('toggle', { read: IgxToggleDirective })\n    public toggle: IgxToggleDirective;\n\n    @ViewChild('defaultExpressionTemplate', { read: TemplateRef })\n    protected defaultExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('dateExpressionTemplate', { read: TemplateRef })\n    protected dateExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('expressionsContainer')\n    protected expressionsContainer: ElementRef;\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._customDialogOverlaySettings.outlet = this.grid.outlet;\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.dateExpressionTemplate;\n        }\n\n        return this.defaultExpressionTemplate;\n    }\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    public onCustomDialogOpening() {\n        if (this.selectedOperator) {\n            this.createInitialExpressionUIElement();\n        }\n    }\n\n    public onCustomDialogOpened() {\n        if (this.expressionComponents.first) {\n            this.expressionComponents.first.focus();\n        }\n    }\n\n    public open() {\n        this._customDialogOverlaySettings.positionStrategy.settings.target =\n            this.grid.rootGrid ? this.grid.rootGrid.nativeElement : this.grid.nativeElement;\n        this.toggle.open(this._customDialogOverlaySettings);\n    }\n\n    public onClearButtonClick() {\n        this.filteringService.clearFilter(this.column.field);\n        this.createInitialExpressionUIElement();\n        this.cdr.detectChanges();\n    }\n\n    public closeDialog() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n        }\n    }\n\n    public onApplyButtonClick() {\n        this.expressionsList = this.expressionsList.filter(\n            element => element.expression.condition &&\n            (element.expression.searchVal || element.expression.searchVal === 0 || element.expression.condition.isUnary));\n\n        if (this.expressionsList.length > 0) {\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.filteringService.filterInternal(this.column.field, this.expressionsList);\n        this.closeDialog();\n    }\n\n    public onAddButtonClick() {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        this.expressionsList[this.expressionsList.length - 1].afterOperator = FilteringLogic.And;\n        exprUI.beforeOperator = this.expressionsList[this.expressionsList.length - 1].afterOperator;\n\n        this.expressionsList.push(exprUI);\n\n        this.markChildrenForCheck();\n        this.scrollToBottom();\n    }\n\n    public onExpressionRemoved(event: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(event);\n\n        if (indexToRemove === 0 && this.expressionsList.length > 1) {\n            this.expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === this.expressionsList.length - 1) {\n            this.expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            this.expressionsList[indexToRemove - 1].afterOperator = this.expressionsList[indexToRemove + 1].beforeOperator;\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.expressionsList.splice(indexToRemove, 1);\n\n        this.cdr.detectChanges();\n\n        this.markChildrenForCheck();\n    }\n\n    public onLogicOperatorChanged(event: ILogicOperatorChangedArgs) {\n        const index = this.expressionsList.indexOf(event.target);\n        event.target.afterOperator = event.newValue;\n        if (index + 1 < this.expressionsList.length) {\n            this.expressionsList[index + 1].beforeOperator = event.newValue;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        eventArgs.stopPropagation();\n    }\n\n    public onApplyButtonKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.TAB && !eventArgs.shiftKey) {\n            eventArgs.stopPropagation();\n            eventArgs.preventDefault();\n        }\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n\n    private markChildrenForCheck() {\n        this.expressionComponents.forEach(x => x.cdr.markForCheck());\n        this.expressionDateComponents.forEach(x => x.cdr.markForCheck());\n    }\n\n    private createInitialExpressionUIElement() {\n        this.expressionsList = [];\n        const firstExprUI = new ExpressionUI();\n\n        firstExprUI.expression = {\n            condition: this.createCondition(this.selectedOperator),\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n        firstExprUI.afterOperator = FilteringLogic.And;\n\n        this.expressionsList.push(firstExprUI);\n\n        const secondExprUI = new ExpressionUI();\n        secondExprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        secondExprUI.beforeOperator = FilteringLogic.And;\n\n        this.expressionsList.push(secondExprUI);\n    }\n\n    private scrollToBottom() {\n        requestAnimationFrame(() => {\n            this.expressionsContainer.nativeElement.scrollTop = this.expressionsContainer.nativeElement.scrollHeight;\n        });\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-sorting',\n    templateUrl: './excel-style-sorting.component.html'\n})\nexport class IgxExcelStyleSortingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild('sortButtonGroup', { read: IgxButtonGroupComponent })\n    public sortButtonGroup: IgxButtonGroupComponent;\n\n    constructor() {}\n\n    public onSortButtonClicked(sortDirection) {\n        if (this.sortButtonGroup.selectedIndexes.length === 0) {\n            if (this.grid.isColumnGrouped(this.column.field)) {\n                this.selectButton(sortDirection);\n            } else {\n                this.grid.clearSort(this.column.field);\n            }\n        } else {\n            this.grid.sort({ fieldName: this.column.field, dir: sortDirection, ignoreCase: true });\n        }\n    }\n\n    public selectButton(sortDirection: number) {\n        if (sortDirection === 1) {\n            this.sortButtonGroup.selectButton(0);\n        } else {\n            this.sortButtonGroup.selectButton(1);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ViewChild,\n    HostBinding,\n    ChangeDetectionStrategy,\n    TemplateRef,\n    Directive,\n    OnDestroy,\n    AfterViewInit,\n    ElementRef\n} from '@angular/core';\nimport {\n    HorizontalAlignment,\n    VerticalAlignment,\n    ConnectedPositioningStrategy,\n    OverlaySettings,\n    IgxOverlayService,\n    AbsoluteScrollStrategy\n} from '../../../services/index';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport {\n    IFilteringOperation,\n    IgxStringFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxDateFilteringOperand,\n    InFilteringOperation,\n    InDateFilteringOperation\n} from '../../../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { cloneArray, KEYS } from '../../../core/utils';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { Subscription, Subject } from 'rxjs';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { ISelectionEventArgs, IgxDropDownComponent } from '../../../drop-down';\nimport { IgxColumnComponent } from '../../column.component';\n\n/**\n *@hidden\n */\nexport class FilterListItem {\n    public value: any;\n    public label: any;\n    public isSelected: boolean;\n    public indeterminate: boolean;\n    public isSpecial = false;\n}\n\n@Directive({\n    selector: '[igxExcelStyleSortingTemplate]'\n})\nexport class IgxExcelStyleSortingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleMovingTemplate]'\n})\nexport class IgxExcelStyleMovingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleHidingTemplate]'\n})\nexport class IgxExcelStyleHidingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStylePinningTemplate]'\n})\nexport class IgxExcelStylePinningTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-excel-style-filtering',\n    templateUrl: './grid.excel-style-filtering.component.html'\n})\nexport class IgxGridExcelStyleFilteringComponent implements OnDestroy, AfterViewInit {\n    private static readonly filterOptimizationThreshold = 2;\n\n    private shouldOpenSubMenu = true;\n    private expressionsList = new Array<ExpressionUI>();\n    private destroy$ = new Subject<boolean>();\n    private containsNullOrEmpty = false;\n    private selectAllSelected = true;\n    private selectAllIndeterminate = false;\n    private filterValues = new Set<any>();\n\n    protected columnMoving = new Subscription();\n\n    public column: IgxColumnComponent;\n    public filteringService: IgxFilteringService;\n    public listData = new Array<FilterListItem>();\n    public uniqueValues = [];\n    public overlayService: IgxOverlayService;\n    public overlayComponentId: string;\n\n    private _subMenuPositionSettings = {\n        verticalStartPoint: VerticalAlignment.Top\n    };\n\n    private _subMenuOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._subMenuPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @HostBinding('class.igx-excel-filter')\n    className = 'igx-excel-filter';\n\n    @ViewChild('dropdown', { read: ElementRef })\n    public mainDropdown: ElementRef;\n\n    @ViewChild('subMenu', { read: IgxDropDownComponent })\n    public subMenu: IgxDropDownComponent;\n\n    @ViewChild('customDialog', { read: IgxExcelStyleCustomDialogComponent })\n    public customDialog: IgxExcelStyleCustomDialogComponent;\n\n    @ViewChild('excelStyleSearch', { read: IgxExcelStyleSearchComponent })\n    protected excelStyleSearch: IgxExcelStyleSearchComponent;\n\n    @ViewChild('excelStyleSorting', { read: IgxExcelStyleSortingComponent })\n    protected excelStyleSorting: IgxExcelStyleSortingComponent;\n\n    @ViewChild('defaultExcelStyleSortingTemplate', { read: TemplateRef })\n    protected defaultExcelStyleSortingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStyleHidingTemplate', { read: TemplateRef })\n    protected defaultExcelStyleHidingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStyleMovingTemplate', { read: TemplateRef })\n    protected defaultExcelStyleMovingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStylePinningTemplate', { read: TemplateRef })\n    protected defaultExcelStylePinningTemplate: TemplateRef<any>;\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    get subMenuText() {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return this.grid.resourceStrings.igx_grid_excel_boolean_filter;\n            case DataType.Number:\n                return this.grid.resourceStrings.igx_grid_excel_number_filter;\n            case DataType.Date:\n                return this.grid.resourceStrings.igx_grid_excel_date_filter;\n            default:\n                return this.grid.resourceStrings.igx_grid_excel_text_filter;\n        }\n    }\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    ngAfterViewInit(): void {\n        this.expressionsList = new Array<ExpressionUI>();\n        this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);\n        if (this.expressionsList && this.expressionsList.length &&\n            this.expressionsList[0].expression.condition.name !== 'in') {\n            this.customDialog.expressionsList = this.expressionsList;\n        }\n        this.populateColumnData();\n\n        if (this.excelStyleSorting) {\n            const se = this.grid.sortingExpressions.find(expr => expr.fieldName === this.column.field);\n            if (se) {\n                this.excelStyleSorting.selectButton(se.dir);\n            }\n        }\n\n        requestAnimationFrame(() => {\n            this.excelStyleSearch.searchInput.nativeElement.focus();\n        });\n    }\n\n    public clearFilterClass() {\n        if (this.column.filteringExpressionsTree) {\n            return 'igx-excel-filter__actions-clear';\n        }\n\n        return 'igx-excel-filter__actions-clear--disabled';\n    }\n\n    public initialize(column: IgxColumnComponent, filteringService: IgxFilteringService, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.column = column;\n        this.filteringService = filteringService;\n        this.overlayService = overlayService;\n        this.overlayComponentId = overlayComponentId;\n\n        this._subMenuOverlaySettings.outlet = this.grid.outlet;\n\n        this.columnMoving = this.grid.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.closeDropdown();\n        });\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public onPin() {\n        this.column.pinned = !this.column.pinned;\n        this.closeDropdown();\n    }\n\n    public onHide() {\n        this.column.hidden = true;\n        this.grid.onColumnVisibilityChanged.emit({ column: this.column, newValue: true });\n        this.closeDropdown();\n    }\n\n    public onTextFilterClick(eventArgs) {\n        if (this.shouldOpenSubMenu) {\n            this._subMenuOverlaySettings.positionStrategy.settings.target = eventArgs.currentTarget;\n\n            const gridRect = this.grid.nativeElement.getBoundingClientRect();\n            const dropdownRect = this.mainDropdown.nativeElement.getBoundingClientRect();\n\n            let x = dropdownRect.left + dropdownRect.width;\n            let x1 = gridRect.left + gridRect.width;\n            x += window.pageXOffset;\n            x1 += window.pageXOffset;\n            if (Math.abs(x - x1) < 200) {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Left;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Left;\n            } else {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Right;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Right;\n            }\n\n            this.subMenu.open(this._subMenuOverlaySettings);\n            this.shouldOpenSubMenu = false;\n        }\n    }\n\n    public onTextFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.onTextFilterClick(eventArgs);\n        }\n    }\n\n    public onSubMenuClosed() {\n        requestAnimationFrame(() => {\n            this.shouldOpenSubMenu = true;\n        });\n    }\n\n    public onSubMenuSelection(eventArgs: ISelectionEventArgs) {\n        this.customDialog.selectedOperator = eventArgs.newSelection.value;\n        eventArgs.cancel = true;\n        this.mainDropdown.nativeElement.style.display = 'none';\n        this.subMenu.close();\n        this.customDialog.open();\n    }\n\n    private areExpressionsSelectable () {\n        if (this.expressionsList.length === 1 &&\n            (this.expressionsList[0].expression.condition.name === 'equals' ||\n             this.expressionsList[0].expression.condition.name === 'true' ||\n             this.expressionsList[0].expression.condition.name === 'false' ||\n             this.expressionsList[0].expression.condition.name === 'empty' ||\n             this.expressionsList[0].expression.condition.name === 'in')) {\n            return true;\n        }\n\n        const selectableExpressionsCount = this.expressionsList.filter(exp =>\n            (exp.beforeOperator === 1 || exp.afterOperator === 1) &&\n            (exp.expression.condition.name === 'equals' ||\n             exp.expression.condition.name === 'true' ||\n             exp.expression.condition.name === 'false' ||\n             exp.expression.condition.name === 'empty' ||\n             exp.expression.condition.name === 'in')).length;\n\n        return selectableExpressionsCount === this.expressionsList.length;\n    }\n\n    private areExpressionsValuesInTheList() {\n        if (this.column.dataType === DataType.Boolean) {\n            return true;\n        }\n\n        if (this.filterValues.size === 1) {\n            const firstValue = this.filterValues.values().next().value;\n\n            if (!firstValue && firstValue !== 0) {\n                return true;\n            }\n        }\n\n        for (let index = 0; index < this.uniqueValues.length; index++) {\n            if (this.filterValues.has(this.uniqueValues[index])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public populateColumnData() {\n        let data = this.column.gridAPI.get_all_data(this.grid.id);\n        const gridExpressionsTree: IFilteringExpressionsTree = this.grid.filteringExpressionsTree;\n        const expressionsTree = new FilteringExpressionsTree(gridExpressionsTree.operator, gridExpressionsTree.fieldName);\n\n        for (const operand of gridExpressionsTree.filteringOperands) {\n            if (operand instanceof FilteringExpressionsTree) {\n                const columnExprTree = operand as FilteringExpressionsTree;\n                if (columnExprTree.fieldName === this.column.field) {\n                    break;\n                }\n            }\n            expressionsTree.filteringOperands.push(operand);\n        }\n\n        if (expressionsTree.filteringOperands.length) {\n            const state = { expressionsTree: expressionsTree };\n            data = DataUtil.filter(cloneArray(data), state);\n        }\n\n        if (this.column.dataType === DataType.Date) {\n            this.uniqueValues = Array.from(new Set(data.map(record =>\n                record[this.column.field] ? record[this.column.field].toDateString() : record[this.column.field])));\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()).map(v =>\n                        new Date(v).toDateString()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal ? e.expression.searchVal.toDateString() : e.expression.searchVal] ];\n            }, []));\n        } else {\n            this.uniqueValues = Array.from(new Set(data.map(record => record[this.column.field])));\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal] ];\n            }, []));\n        }\n        this.listData = new Array<FilterListItem>();\n\n        const shouldUpdateSelection = this.areExpressionsSelectable() && this.areExpressionsValuesInTheList();\n\n        if (this.column.dataType === DataType.Boolean) {\n            this.addBooleanItems();\n        } else {\n            this.addItems(shouldUpdateSelection);\n        }\n\n        this.listData.sort((a, b) => this.sortData(a, b));\n\n        if (this.column.dataType === DataType.Date) {\n            this.uniqueValues = this.uniqueValues.map(value => new Date(value));\n        }\n\n        if (this.containsNullOrEmpty) {\n            this.addBlanksItem(shouldUpdateSelection);\n        }\n\n        this.addSelectAllItem();\n\n        this.cdr.detectChanges();\n    }\n\n    private addBooleanItems() {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            const filterListItem = new FilterListItem();\n            if (element !== undefined && element !== null && element !== '') {\n                if (this.column.filteringExpressionsTree) {\n                    if (element === true && this.expressionsList.find(exp => exp.expression.condition.name === 'true' )) {\n                        filterListItem.isSelected = true;\n                        this.selectAllIndeterminate = true;\n                    } else if (element === false && this.expressionsList.find(exp => exp.expression.condition.name === 'false' )) {\n                            filterListItem.isSelected = true;\n                            this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                filterListItem.value = element;\n                filterListItem.label = element;\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addItems(shouldUpdateSelection: boolean) {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            if (element !== undefined && element !== null && element !== '') {\n                const filterListItem = new FilterListItem();\n                if (this.column.filteringExpressionsTree) {\n                    if (shouldUpdateSelection) {\n                        if (this.filterValues.has(element)) {\n                            filterListItem.isSelected = true;\n                        } else {\n                            filterListItem.isSelected = false;\n                        }\n                        this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                        this.selectAllSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                if (this.column.dataType === DataType.Date) {\n                    filterListItem.value = new Date(element);\n                    filterListItem.label = new Date(element);\n                } else {\n                    filterListItem.value = element;\n                    filterListItem.label = element;\n                }\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addSelectAllItem() {\n        const selectAll =  new FilterListItem();\n        selectAll.isSelected = this.selectAllSelected;\n        selectAll.value = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.label = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.indeterminate = this.selectAllIndeterminate;\n        selectAll.isSpecial = true;\n        this.listData.unshift(selectAll);\n    }\n\n    private addBlanksItem(shouldUpdateSelection) {\n        const blanks =  new FilterListItem();\n        if (this.column.filteringExpressionsTree) {\n            if (shouldUpdateSelection) {\n                if (this.filterValues.has(null)) {\n                    blanks.isSelected = true;\n                } else {\n                    blanks.isSelected = false;\n                }\n            }\n        } else {\n            blanks.isSelected = true;\n        }\n        blanks.value = null;\n        blanks.label = this.grid.resourceStrings.igx_grid_excel_blanks;\n        blanks.indeterminate = false;\n        blanks.isSpecial = true;\n        this.listData.unshift(blanks);\n    }\n\n    private sortData(a: FilterListItem, b: FilterListItem) {\n        let valueA = a.value;\n        let valueB = b.value;\n        if (typeof(a) === DataType.String) {\n            valueA = a.value.toUpperCase();\n            valueB = b.value.toUpperCase();\n        }\n        if (valueA < valueB) {\n            return -1;\n        } else if (valueA > valueB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    // TODO: sort members by access modifier\n\n    get sortingTemplate() {\n        if (this.grid.excelStyleSortingTemplateDirective) {\n            return this.grid.excelStyleSortingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleSortingTemplate;\n        }\n    }\n\n    get movingTemplate() {\n        if (this.grid.excelStyleMovingTemplateDirective) {\n            return this.grid.excelStyleMovingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleMovingTemplate;\n        }\n    }\n\n    get pinningTemplate() {\n        if (this.grid.excelStylePinningTemplateDirective) {\n            return this.grid.excelStylePinningTemplateDirective.template;\n        } else {\n            return this.defaultExcelStylePinningTemplate;\n        }\n    }\n\n    get hidingTemplate() {\n        if (this.grid.excelStyleHidingTemplateDirective) {\n            return this.grid.excelStyleHidingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleHidingTemplate;\n        }\n    }\n\n    get applyButtonDisabled() {\n        return this.listData[0] && !this.listData[0].isSelected && !this.listData[0].indeterminate;\n    }\n\n    public applyFilter() {\n        const filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.column.field);\n        const selectedItems = this.listData.slice(1, this.listData.length).filter(el => el.isSelected === true);\n        const unselectedItem = this.listData.slice(1, this.listData.length).find(el => el.isSelected === false);\n\n        if (unselectedItem) {\n            if (selectedItems.length <= IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold) {\n                selectedItems.forEach(element => {\n                    let condition = null;\n                    if (element.value !== null && element.value !== undefined) {\n                        if (this.column.dataType === DataType.Boolean) {\n                            condition = this.createCondition(element.value.toString());\n                        } else {\n                            condition = this.createCondition('equals');\n                        }\n                    } else {\n                        condition = this.createCondition('empty');\n                    }\n                    filterTree.filteringOperands.push({\n                        condition: condition,\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: element.value\n                    });\n                });\n            } else {\n                const blanksItemIndex = selectedItems.findIndex(e => e.value === null || e.value === undefined);\n                let blanksItem: any;\n                if (blanksItemIndex >= 0) {\n                    blanksItem = selectedItems[blanksItemIndex];\n                    selectedItems.splice(blanksItemIndex, 1);\n                }\n\n                if (this.column.dataType === DataType.Date) {\n                    filterTree.filteringOperands.push({\n                        condition: new InDateFilteringOperation(),\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: new Set(selectedItems.map(d =>\n                            new Date(d.value.getFullYear(), d.value.getMonth(), d.value.getDate()).toISOString()))\n                    });\n                } else {\n                    filterTree.filteringOperands.push({\n                        condition: new InFilteringOperation(),\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: new Set(selectedItems.map(e => e.value))\n                    });\n                }\n\n                if (blanksItem) {\n                    filterTree.filteringOperands.push({\n                        condition: this.createCondition('empty'),\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: blanksItem.value\n                    });\n                }\n            }\n\n            this.expressionsList = new Array<ExpressionUI>();\n            this.filteringService.filterInternal(this.column.field, filterTree);\n        } else {\n            this.filteringService.clearFilter(this.column.field);\n        }\n\n        this.closeDropdown();\n    }\n\n    public closeDropdown() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n            this.overlayComponentId = null;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ESCAPE || eventArgs.key === KEYS.ESCAPE_IE) {\n            this.closeDropdown();\n        }\n        eventArgs.stopPropagation();\n    }\n\n    public clearFilter() {\n        this.filteringService.clearFilter(this.column.field);\n        this.populateColumnData();\n    }\n\n    public onClearFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.clearFilter();\n        }\n    }\n\n    public showCustomFilterItem(): boolean {\n        const exprTree = this.column.filteringExpressionsTree;\n        return exprTree && exprTree.filteringOperands && exprTree.filteringOperands.length &&\n            !((exprTree.filteringOperands[0] as IFilteringExpression).condition &&\n            (exprTree.filteringOperands[0] as IFilteringExpression).condition.name === 'in');\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgZone,\n    OnInit,\n    Inject,\n    OnDestroy,\n    NgModuleRef\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxOverlayService } from '../services/overlay/overlay';\nimport { IgxGridExcelStyleFilteringComponent } from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { OverlaySettings, PositionSettings, VerticalAlignment } from '../services/overlay/utilities';\nimport { AutoPositionStrategy } from '../services/overlay/position/auto-position-strategy';\nimport { useAnimation } from '@angular/animations';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { fadeIn, fadeOut } from '../animations/main';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll/absolute-scroll-strategy';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header',\n    templateUrl: './grid-header.component.html'\n})\nexport class IgxGridHeaderComponent implements DoCheck, OnInit, OnDestroy {\n\n    private _componentOverlayId: string;\n    private _filterMenuPositionSettings: PositionSettings;\n    private _filterMenuOverlaySettings: OverlaySettings;\n    private _destroy$ = new Subject<boolean>();\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public gridID: string;\n\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__th--fw',\n            this.column.headerClasses\n        ];\n\n        const classList = {\n            'igx-grid__th': !this.column.columnGroup,\n            'asc': this.ascending,\n            'desc': this.descending,\n            'igx-grid__th--number': this.column.dataType === DataType.Number,\n            'igx-grid__th--sortable': this.column.sortable,\n            'igx-grid__th--filtrable': this.column.filterable && this.grid.filteringService.isFilterRowVisible,\n            'igx-grid__th--sorted': this.sorted\n        };\n\n        Object.entries(classList).forEach(([klass, value]) => {\n            if (value) {\n                defaultClasses.push(klass);\n            }\n        });\n        return defaultClasses.join(' ');\n    }\n\n    @HostBinding('style.height.px')\n    get height() {\n        if (this.grid.hasColumnGroups) {\n            return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight;\n        }\n        return null;\n    }\n\n    get ascending() {\n        return this.sortDirection === SortingDirection.Asc;\n    }\n\n    get descending() {\n        return this.sortDirection === SortingDirection.Desc;\n    }\n\n    get sortingIcon(): string {\n        if (this.sortDirection !== SortingDirection.None) {\n            // arrow_downward and arrow_upward\n            // are material icons ligature strings\n            return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';\n        }\n        return 'arrow_upward';\n    }\n\n    get sorted() {\n        return this.sortDirection !== SortingDirection.None;\n    }\n\n    get filterIconClassName() {\n        return this.column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';\n    }\n\n    @HostBinding('attr.role')\n    public hostRole = 'columnheader';\n\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    @HostBinding('attr.id')\n    get headerID() {\n        return `${this.gridID}_${this.column.field}`;\n    }\n\n    protected sortDirection = SortingDirection.None;\n\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public colResizingService: IgxColumnResizingService,\n        public cdr: ChangeDetectorRef,\n        public elementRef: ElementRef,\n        public zone: NgZone,\n        private _filteringService: IgxFilteringService,\n        private _moduleRef: NgModuleRef<any>,\n        @Inject(IgxOverlayService) private _overlayService: IgxOverlayService\n    ) { }\n\n    public ngOnInit() {\n        this.initFilteringSettings();\n    }\n\n    public ngDoCheck() {\n        this.getSortDirection();\n        this.cdr.markForCheck();\n    }\n\n    ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n\n        if (this._componentOverlayId) {\n            this._overlayService.hide(this._componentOverlayId);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this.colResizingService.isColumnResizing) {\n            event.stopPropagation();\n            if (this.grid.filteringService.isFilterRowVisible) {\n                if (this.column.filterable && !this.column.columnGroup &&\n                    !this.grid.filteringService.isFilterComplex(this.column.field)) {\n                    this.grid.filteringService.filteredColumn = this.column;\n                }\n            } else if (this.column.sortable) {\n                this.triggerSort();\n            }\n        }\n    }\n\n    public onFilteringIconClick(event) {\n        event.stopPropagation();\n\n        this.toggleFilterDropdown();\n    }\n\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    protected getSortDirection() {\n        const expr = this.gridAPI.grid.sortingExpressions.find((x) => x.fieldName === this.column.field);\n        this.sortDirection = expr ? expr.dir : SortingDirection.None;\n    }\n\n    public onSortingIconClick(event) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            event.stopPropagation();\n            this.triggerSort();\n        }\n    }\n\n    private triggerSort() {\n        const groupingExpr = this.grid.groupingExpressions ?\n            this.grid.groupingExpressions.find((expr) => expr.fieldName === this.column.field) : null;\n        const sortDir = groupingExpr ?\n            this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc\n            : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;\n        this.sortDirection = sortDir;\n        this.grid.sort({ fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,\n            strategy: this.column.sortStrategy });\n    }\n\n    private toggleFilterDropdown() {\n        if (!this._componentOverlayId) {\n            const headerTarget = this.elementRef.nativeElement;\n            const filterIconTarget = headerTarget.querySelector('.' + this.filterIconClassName);\n\n            this._filterMenuOverlaySettings.positionStrategy.settings.target = filterIconTarget;\n            this._filterMenuOverlaySettings.outlet = this.grid.outlet;\n\n            this._componentOverlayId =\n                this._overlayService.attach(IgxGridExcelStyleFilteringComponent, this._filterMenuOverlaySettings, this._moduleRef);\n            this._overlayService.show(this._componentOverlayId, this._filterMenuOverlaySettings);\n        }\n    }\n\n    private initFilteringSettings() {\n        this._filterMenuPositionSettings = {\n            verticalStartPoint: VerticalAlignment.Bottom,\n            openAnimation: useAnimation(fadeIn, {\n                params: {\n                    duration: '250ms'\n                }\n            }),\n            closeAnimation: useAnimation(fadeOut, {\n                params: {\n                    duration: '200ms'\n                }\n            })\n        };\n\n        this._filterMenuOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            positionStrategy: new AutoPositionStrategy(this._filterMenuPositionSettings),\n            scrollStrategy: new AbsoluteScrollStrategy()\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this.onOverlayOpening(eventArgs);\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this.onOverlayClosed();\n            });\n    }\n\n    private onOverlayOpening(eventArgs) {\n        const instance = eventArgs.componentRef.instance as IgxGridExcelStyleFilteringComponent;\n        if (instance) {\n            instance.initialize(this.column, this._filteringService, this._overlayService, eventArgs.id);\n        }\n    }\n\n    private onOverlayClosed() {\n        this._componentOverlayId = null;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    HostBinding,\n    AfterViewInit,\n    ElementRef,\n    HostListener,\n    OnInit,\n    ChangeDetectionStrategy,\n    DoCheck\n} from '@angular/core';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../column.component';\nimport { IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { IgxFilteringService, ExpressionUI } from './grid-filtering.service';\nimport { KEYS } from '../../core/utils';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridGroupByRowComponent } from '../grid/groupby-row.component';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-cell',\n    templateUrl: './grid-filtering-cell.component.html'\n})\nexport class IgxGridFilteringCellComponent implements AfterViewInit, OnInit, DoCheck {\n\n    private baseClass = 'igx-grid__filtering-cell-indicator';\n    private currentTemplate = null;\n\n    public expressionsList: ExpressionUI[];\n    public moreFiltersCount = 0;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('emptyFilter', { read: TemplateRef })\n    protected emptyFilter: TemplateRef<any>;\n\n    @ViewChild('defaultFilter', { read: TemplateRef })\n    protected defaultFilter: TemplateRef<any>;\n\n    @ViewChild('complexFilter', { read: TemplateRef })\n    protected complexFilter: TemplateRef<any>;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChild('moreIcon', { read: ElementRef })\n    protected moreIcon: ElementRef;\n\n    @ViewChild('ghostChip', { read: IgxChipComponent })\n    protected ghostChip: IgxChipComponent;\n\n    @ViewChild('complexChip', { read: IgxChipComponent })\n    protected complexChip: IgxChipComponent;\n\n    @HostBinding('class.igx-grid__filtering-cell')\n    public cssClass = 'igx-grid__filtering-cell';\n\n    constructor(public cdr: ChangeDetectorRef, public filteringService: IgxFilteringService, public navService: IgxGridNavigationService) {\n        this.filteringService.subscribeToEvents();\n    }\n\n    ngOnInit(): void {\n        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n    }\n\n    ngAfterViewInit(): void {\n        this.updateFilterCellArea();\n    }\n\n    public ngDoCheck() {\n        this.updateFilterCellArea();\n    }\n\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeyDown(eventArgs) {\n\n        if (this.isLastElementFocused()) {\n            this.filteringService.grid.navigation.navigateNextFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    public onShiftTabKeyDown(eventArgs) {\n        if (this.isFirstElementFocused()) {\n            this.filteringService.grid.navigation.navigatePrevFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    /**\n     * Returns whether a chip with a given index is visible or not.\n     */\n    public isChipVisible(index: number) {\n        const expression = this.expressionsList[index];\n        return !!(expression && expression.isVisible);\n    }\n\n    /**\n     * Updates the filtering cell area.\n     */\n    public updateFilterCellArea() {\n        this.expressionsList = this.filteringService.getExpressions(this.column.field);\n        this.updateVisibleFilters();\n    }\n\n    get template(): TemplateRef<any> {\n        if (!this.column.filterable) {\n            this.currentTemplate = null;\n            return null;\n        }\n\n        if (this.column.filterCellTemplate) {\n            this.currentTemplate = this.column.filterCellTemplate;\n            return this.column.filterCellTemplate;\n        }\n\n        const expressionTree = this.column.filteringExpressionsTree;\n        if (!expressionTree || expressionTree.filteringOperands.length === 0) {\n            this.currentTemplate = this.emptyFilter;\n            return this.emptyFilter;\n        }\n\n        if (this.filteringService.isFilterComplex(this.column.field)) {\n            this.currentTemplate = this.complexFilter;\n            return this.complexFilter;\n        }\n\n        this.currentTemplate = this.defaultFilter;\n        return this.defaultFilter;\n    }\n\n    /**\n     * Gets the context passed to the filter template.\n     * @memberof IgxGridFilteringCellComponent\n     */\n    get context() {\n        return {\n            column: this.column\n        };\n    }\n\n    /**\n     * Chip clicked event handler.\n     */\n    public onChipClicked(expression?: IFilteringExpression) {\n        if (expression) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = (item.expression === expression);\n            });\n        } else if (this.expressionsList.length > 0) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = false;\n            });\n            this.expressionsList[0].isSelected = true;\n        }\n\n        const index = this.filteringService.unpinnedFilterableColumns.indexOf(this.column);\n        if (index >= 0 && !this.isColumnRightVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], true);\n        } else if (index >= 0 && !this.isColumnLeftVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], false);\n        }\n\n        this.filteringService.filteredColumn = this.column;\n        this.filteringService.isFilterRowVisible = true;\n        this.filteringService.selectedExpression = expression;\n    }\n\n    /**\n     * Chip removed event handler.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove);\n        this.focusChip();\n    }\n\n    /**\n     * Clears the filtering.\n     */\n    public clearFiltering(): void {\n        this.filteringService.clearFilter(this.column.field);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Chip keydown event handler.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, expression?: IFilteringExpression) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            this.onChipClicked(expression);\n        }\n    }\n\n    /**\n     * Returns the filtering indicator class.\n     */\n    public filteringIndicatorClass() {\n        return {\n            [this.baseClass]: !this.isMoreIconHidden(),\n            [`${this.baseClass}--hidden`]: this.isMoreIconHidden()\n        };\n    }\n\n    /**\n     * Focus a chip depending on the current visible template.\n     */\n    public focusChip(focusFirst: boolean = false) {\n        if (this.currentTemplate === this.defaultFilter) {\n            if (focusFirst) {\n                this.focusFirstElement();\n            } else {\n                this.focusElement();\n            }\n        } else if (this.currentTemplate === this.emptyFilter) {\n            this.ghostChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else if (this.currentTemplate === this.complexFilter) {\n            this.complexChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        }\n    }\n\n    private removeExpression(indexToRemove: number) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.updateVisibleFilters();\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private isMoreIconHidden(): boolean {\n        return this.filteringService.columnToMoreIconHidden.get(this.column.field);\n    }\n\n    private updateVisibleFilters() {\n        this.expressionsList.forEach((ex) => ex.isVisible = true);\n\n        if (this.moreIcon) {\n            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n        }\n        this.cdr.detectChanges();\n\n        if (this.chipsArea && this.expressionsList.length > 1) {\n            const areaWidth = this.chipsArea.element.nativeElement.offsetWidth;\n            let viewWidth = 0;\n            const chipsAreaElements = this.chipsArea.element.nativeElement.children;\n            let visibleChipsCount = 0;\n            const moreIconWidth = this.moreIcon.nativeElement.offsetWidth -\n                parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);\n\n            for (let index = 0; index < chipsAreaElements.length - 1; index++) {\n                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {\n                    viewWidth += chipsAreaElements[index].offsetWidth;\n                    if (index % 2 === 0) {\n                        visibleChipsCount++;\n                    } else {\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);\n                    }\n                } else {\n                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    } else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    }\n                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;\n                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);\n                    break;\n                }\n            }\n\n            for (let i = visibleChipsCount; i < this.expressionsList.length; i++) {\n                this.expressionsList[i].isVisible = false;\n            }\n            this.cdr.detectChanges();\n        }\n    }\n\n    private isFirstElementFocused(): boolean {\n        return !(this.chipsArea && this.chipsArea.chipsList.length > 0 &&\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`) !== document.activeElement);\n    }\n\n    private isLastElementFocused(): boolean {\n        if (this.chipsArea) {\n            if (this.isMoreIconHidden() && this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`) !==\n                document.activeElement) {\n                return false;\n            } else if (!this.isMoreIconHidden() && this.moreIcon.nativeElement !== document.activeElement) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private focusFirstElement(): void {\n        if (this.chipsArea.chipsList.length > 0) {\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else {\n            this.moreIcon.nativeElement.focus();\n        }\n    }\n\n    private focusElement(): void {\n        if (this.filteringService.shouldFocusNext) {\n            if (!this.isMoreIconHidden() && this.chipsArea.chipsList.length === 0) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n            }\n        } else {\n            if (!this.isMoreIconHidden()) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`).focus();\n            }\n        }\n    }\n\n    private isColumnRightVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnRight = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n        }\n        const width = this.filteringService.displayContainerWidth + this.filteringService.displayContainerScrollLeft;\n        return currentColumnRight <= width;\n    }\n\n    private isColumnLeftVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n            currentColumnLeft += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n        }\n        return currentColumnLeft >= this.filteringService.displayContainerScrollLeft;\n    }\n}\n","import {\n    Component,\n    HostBinding,\n    Input,\n    ViewChild,\n    QueryList,\n    ViewChildren,\n    forwardRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    HostListener\n} from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { isIE } from '../core/utils';\n\nconst Z_INDEX = 9999;\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header-group',\n    templateUrl: './grid-header-group.component.html'\n})\nexport class IgxGridHeaderGroupComponent implements DoCheck {\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n\n    /**\n     * Gets the column of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the `id` of the grid in which the header group is stored.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridHeaderComponent)\n    public headerCell: IgxGridHeaderComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridFilteringCellComponent)\n    public filterCell: IgxGridFilteringCellComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(forwardRef(() => IgxGridHeaderGroupComponent), { read: IgxGridHeaderGroupComponent })\n    public children: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * Gets the width of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.grid.getHeaderGroupWidth(this.column);\n    }\n\n    /**\n     * Gets the style classes of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__thead-item',\n            this.column.headerGroupClasses\n        ];\n\n        const classList = {\n            'igx-grid__th--pinned': this.isPinned,\n            'igx-grid__th--pinned-last': this.isLastPinned,\n            'igx-grid__drag-col-header': this.isHeaderDragged,\n            'igx-grid__th--filtering': this.isFiltered\n        };\n\n        Object.entries(classList).forEach(([className, value]) => {\n            if (value) {\n                defaultClasses.push(className);\n            }\n        });\n        return defaultClasses.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.z-index')\n    get zIndex() {\n        if (!this.column.pinned) {\n            return null;\n        }\n        return Z_INDEX - this.grid.pinnedColumns.indexOf(this.column);\n    }\n\n    /**\n     * Gets the grid of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is filtered.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isFiltered(): boolean {\n        return this.filteringService.filteredColumn === this.column;\n    }\n\n    /**\n     * Gets whether the header group is stored in the last column in the pinned area.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isLastPinned(): boolean {\n        return !this.grid.hasColumnLayouts ? this.column.isLastPinned : false;\n    }\n\n    @HostBinding('style.display')\n    get groupDisplayStyle(): string {\n        return this.grid.hasColumnLayouts && this.column.children && !isIE() ? 'flex' : '';\n    }\n\n    /**\n     * Gets whether the header group is stored in a pinned column.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isPinned(): boolean {\n        return this.column.pinned;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is moved.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isHeaderDragged(): boolean {\n        return this.grid.draggedColumn ===  this.column;\n    }\n\n    /**\n     * @hidden\n     */\n    get hasLastPinnedChildColumn(): boolean {\n        return this.column.allChildren.some(child => child.isLastPinned);\n    }\n\n    /**\n     * @hidden\n     */\n    get height() {\n        return this.element.nativeElement.getBoundingClientRect().height;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event): void {\n        // hack for preventing text selection in IE and Edge while dragging the resizer\n        event.preventDefault();\n    }\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    constructor(private cdr: ChangeDetectorRef,\n                public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                private element: ElementRef,\n                public colResizingService: IgxColumnResizingService,\n                public filteringService: IgxFilteringService) { }\n}\n","import { IGridResourceStrings, GridResourceStringsEN } from './grid-resources';\nimport { ITimePickerResourceStrings, TimePickerResourceStringsEN } from './time-picker-resources';\nimport { cloneValue } from '../utils';\n\nexport interface IResourceStrings extends IGridResourceStrings, ITimePickerResourceStrings {}\n\n/**\n * @hidden\n */\nexport const CurrentResourceStrings = {\n    GridResStrings: cloneValue(GridResourceStringsEN),\n    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN)\n};\n\nfunction updateResourceStrings(currentStrings: IResourceStrings, newStrings: IResourceStrings ) {\n    for (const key of Object.keys(newStrings)) {\n        if (key in currentStrings) {\n            currentStrings[key] = newStrings[key];\n        }\n    }\n}\n\n/**\n * Changes the resource strings for all components in the application\n * ```\n * @param resourceStrings to be applied\n */\nexport function changei18n(resourceStrings: IResourceStrings) {\n    for (const key of Object.keys(CurrentResourceStrings)) {\n        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);\n    }\n}\n\n/**\n * Returns current resource strings for all components\n */\nexport function getCurrentResourceStrings(): IResourceStrings {\n    return {\n            ...CurrentResourceStrings.GridResStrings,\n            ...CurrentResourceStrings.TimePickerResStrings\n    };\n}\n","export interface IGridResourceStrings {\n    igx_grid_groupByArea_message?: string;\n    igx_grid_emptyFilteredGrid_message?: string;\n    igx_grid_emptyGrid_message?: string;\n    igx_grid_filter?: string;\n    igx_grid_filter_row_close?: string;\n    igx_grid_filter_row_reset?: string;\n    igx_grid_filter_row_placeholder?: string;\n    igx_grid_filter_row_boolean_placeholder?: string;\n    igx_grid_filter_row_date_placeholder?: string;\n    igx_grid_filter_operator_and?: string;\n    igx_grid_complex_filter?: string;\n    igx_grid_filter_operator_or?: string;\n    igx_grid_filter_contains?: string;\n    igx_grid_filter_doesNotContain?: string;\n    igx_grid_filter_startsWith?: string;\n    igx_grid_filter_endsWith?: string;\n    igx_grid_filter_equals?: string;\n    igx_grid_filter_doesNotEqual?: string;\n    igx_grid_filter_empty?: string;\n    igx_grid_filter_notEmpty?: string;\n    igx_grid_filter_null?: string;\n    igx_grid_filter_notNull?: string;\n    igx_grid_filter_before?: string;\n    igx_grid_filter_after?: string;\n    igx_grid_filter_today?: string;\n    igx_grid_filter_yesterday?: string;\n    igx_grid_filter_thisMonth?: string;\n    igx_grid_filter_lastMonth?: string;\n    igx_grid_filter_nextMonth?: string;\n    igx_grid_filter_thisYear?: string;\n    igx_grid_filter_lastYear?: string;\n    igx_grid_filter_nextYear?: string;\n    igx_grid_filter_greaterThan?: string;\n    igx_grid_filter_lessThan?: string;\n    igx_grid_filter_greaterThanOrEqualTo?: string;\n    igx_grid_filter_lessThanOrEqualTo?: string;\n    igx_grid_filter_true?: string;\n    igx_grid_filter_false?: string;\n    igx_grid_filter_all?: string;\n    igx_grid_filter_condition_placeholder?: string;\n    igx_grid_summary_count?: string;\n    igx_grid_summary_min?: string;\n    igx_grid_summary_max?: string;\n    igx_grid_summary_sum?: string;\n    igx_grid_summary_average?: string;\n    igx_grid_summary_earliest?: string;\n    igx_grid_summary_latest?: string;\n    igx_grid_excel_filter_moving_left?: string;\n    igx_grid_excel_filter_moving_left_short?: string;\n    igx_grid_excel_filter_moving_right?: string;\n    igx_grid_excel_filter_moving_right_short?: string;\n    igx_grid_excel_filter_moving_header?: string;\n    igx_grid_excel_filter_sorting_asc?: string;\n    igx_grid_excel_filter_sorting_asc_short?: string;\n    igx_grid_excel_filter_sorting_desc?: string;\n    igx_grid_excel_filter_sorting_desc_short?: string;\n    igx_grid_excel_filter_sorting_header?: string;\n    igx_grid_excel_custom_dialog_add?: string;\n    igx_grid_excel_custom_dialog_clear?: string;\n    igx_grid_excel_custom_dialog_header?: string;\n    igx_grid_excel_cancel?: string;\n    igx_grid_excel_apply?: string;\n    igx_grid_excel_search_placeholder?: string;\n    igx_grid_excel_select_all?: string;\n    igx_grid_excel_blanks?: string;\n    igx_grid_excel_hide?: string;\n    igx_grid_excel_pin?: string;\n    igx_grid_excel_unpin?: string;\n    igx_grid_excel_text_filter?: string;\n    igx_grid_excel_number_filter?: string;\n    igx_grid_excel_date_filter?: string;\n    igx_grid_excel_boolean_filter?: string;\n    igx_grid_excel_custom_filter?: string;\n}\n\nexport const GridResourceStringsEN: IGridResourceStrings = {\n    igx_grid_groupByArea_message: 'Drag a column header and drop it here to group by that column.',\n    igx_grid_emptyFilteredGrid_message: 'No records found.',\n    igx_grid_emptyGrid_message: 'Grid has no data.',\n    igx_grid_filter: 'Filter',\n    igx_grid_filter_row_close: 'Close',\n    igx_grid_filter_row_reset: 'Reset',\n    igx_grid_filter_row_placeholder: 'Add filter value',\n    igx_grid_filter_row_boolean_placeholder: 'All',\n    igx_grid_filter_row_date_placeholder: 'Pick up date',\n    igx_grid_filter_operator_and: 'And',\n    igx_grid_filter_operator_or: 'Or',\n    igx_grid_complex_filter: 'Complex Filter',\n    igx_grid_filter_contains: 'Contains',\n    igx_grid_filter_doesNotContain: 'Does Not Contain',\n    igx_grid_filter_startsWith: 'Starts With',\n    igx_grid_filter_endsWith: 'Ends With',\n    igx_grid_filter_equals: 'Equals',\n    igx_grid_filter_doesNotEqual: 'Does Not Equal',\n    igx_grid_filter_empty: 'Empty',\n    igx_grid_filter_notEmpty: 'Not Empty',\n    igx_grid_filter_null: 'Null',\n    igx_grid_filter_notNull: 'Not Null',\n    igx_grid_filter_before: 'Before',\n    igx_grid_filter_after: 'After',\n    igx_grid_filter_today: 'Today',\n    igx_grid_filter_yesterday: 'Yesterday',\n    igx_grid_filter_thisMonth: 'This Month',\n    igx_grid_filter_lastMonth: 'Last Month',\n    igx_grid_filter_nextMonth: 'Next Month',\n    igx_grid_filter_thisYear: 'This Year',\n    igx_grid_filter_lastYear: 'Last Year',\n    igx_grid_filter_nextYear: 'Next Year',\n    igx_grid_filter_greaterThan: 'Greater Than',\n    igx_grid_filter_lessThan: 'Less Than',\n    igx_grid_filter_greaterThanOrEqualTo: 'Greater Than Or Equal To',\n    igx_grid_filter_lessThanOrEqualTo: 'Less Than Or Equal To',\n    igx_grid_filter_true: 'True',\n    igx_grid_filter_false: 'False',\n    igx_grid_filter_all: 'All',\n    igx_grid_filter_condition_placeholder: 'Select filter',\n    igx_grid_summary_count: 'Count',\n    igx_grid_summary_min: 'Min',\n    igx_grid_summary_max: 'Max',\n    igx_grid_summary_sum: 'Sum',\n    igx_grid_summary_average: 'Avg',\n    igx_grid_summary_earliest: 'Earliest',\n    igx_grid_summary_latest: 'Latest',\n    igx_grid_excel_filter_moving_left: 'move left',\n    igx_grid_excel_filter_moving_left_short: 'left',\n    igx_grid_excel_filter_moving_right: 'move right',\n    igx_grid_excel_filter_moving_right_short: 'right',\n    igx_grid_excel_filter_moving_header: 'move',\n    igx_grid_excel_filter_sorting_asc: 'ascending',\n    igx_grid_excel_filter_sorting_asc_short: 'asc',\n    igx_grid_excel_filter_sorting_desc: 'descending',\n    igx_grid_excel_filter_sorting_desc_short: 'desc',\n    igx_grid_excel_filter_sorting_header: 'sort',\n    igx_grid_excel_custom_dialog_add: 'add filter',\n    igx_grid_excel_custom_dialog_clear: 'Clear filter',\n    igx_grid_excel_custom_dialog_header: 'Custom auto-filter on column: ',\n    igx_grid_excel_cancel: 'cancel',\n    igx_grid_excel_apply: 'apply',\n    igx_grid_excel_search_placeholder: 'Search',\n    igx_grid_excel_select_all: 'Select All',\n    igx_grid_excel_blanks: '(Blanks)',\n    igx_grid_excel_hide: 'Hide column',\n    igx_grid_excel_pin: 'Pin column',\n    igx_grid_excel_unpin: 'Unpin column',\n    igx_grid_excel_text_filter: 'Text filter',\n    igx_grid_excel_number_filter: 'Number filter',\n    igx_grid_excel_date_filter: 'Date filter',\n    igx_grid_excel_boolean_filter: 'Boolean filter',\n    igx_grid_excel_custom_filter: 'Custom filter...'\n};\n","export interface ITimePickerResourceStrings {\n    igx_time_picker_ok?: string;\n    igx_time_picker_cancel?: string;\n}\n\nexport const TimePickerResourceStringsEN: ITimePickerResourceStrings = {\n    igx_time_picker_ok: 'OK',\n    igx_time_picker_cancel: 'Cancel'\n};\n","import { Injectable} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\n\n/** @hidden */\n@Injectable()\nexport class IgxGridSummaryService {\n    protected summaryCacheMap: Map<string, Map<string, any[]>> = new Map<string, Map<string, IgxSummaryResult[]>>();\n    public grid;\n    public rootSummaryID = 'igxGridRootSummary';\n    public summaryHeight = 0;\n    public maxSummariesLenght = 0;\n    public groupingExpressions = [];\n    public retriggerRootPipe = 0;\n    public deleteOperation = false;\n\n    public recalculateSummaries() {\n        this.resetSummaryHeight();\n        this.grid.calculateGridHeight();\n        this.grid.cdr.detectChanges();\n    }\n\n    public clearSummaryCache(args?) {\n        if (!this.summaryCacheMap.size) { return; }\n        if (!args) {\n            this.summaryCacheMap.clear();\n            if (this.grid && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n            return;\n        }\n        if (args.data) {\n            let rowID = args.rowID;\n            if (!args.rowID) {\n                rowID = this.grid.primaryKey ? args.data[this.grid.primaryKey] : args.data;\n            }\n            this.removeSummaries(rowID);\n        }\n        if (args.rowID !== undefined && args.rowID !== null) {\n            const columnName = args.cellID ? this.grid.columnList.find(col => col.index === args.cellID.columnID).field : undefined;\n            const isGroupedColumn = this.grid.groupingExpressions &&\n                    this.grid.groupingExpressions.map(expr => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && isGroupedColumn) {\n                this.removeSummaries(args.rowID);\n                return;\n            }\n            this.removeSummaries(args.rowID, columnName);\n        }\n    }\n\n    public removeSummaries(rowID, columnName?) {\n        if (this.summaryCacheMap.size === 0) { return; }\n        this.deleteSummaryCache(this.rootSummaryID, columnName);\n        if (this.summaryCacheMap.size === 1 && this.summaryCacheMap.has(this.rootSummaryID)) { return; }\n        if (this.isTreeGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                // TODO: this.removeChildRowSummaries(rowID, columnName);\n                this.summaryCacheMap.clear();\n                return;\n            }\n            this.removeAllTreeGridSummaries(rowID, columnName);\n        } else if (this.isHierarchicalGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                this.summaryCacheMap.clear();\n                return;\n            }\n        } else {\n           const summaryIds = this.getSummaryID(rowID, this.grid.groupingExpressions);\n           summaryIds.forEach(id => {\n               this.deleteSummaryCache(id, columnName);\n           });\n        }\n    }\n\n    public removeSummariesCachePerColumn(columnName) {\n        this.summaryCacheMap.forEach((cache) => {\n            if (cache.get(columnName)) {\n                cache.delete(columnName);\n            }\n        });\n        if (this.grid.rootSummariesEnabled) {  this.retriggerRootPipe++; }\n    }\n\n    public calcMaxSummaryHeight() {\n        if (this.summaryHeight) {\n            return this.summaryHeight;\n        }\n        if (!this.grid.data) {return this.summaryHeight = 0; }\n        let maxSummaryLength = 0;\n        this.grid.columnList.filter((col) => col.hasSummary && !col.hidden).forEach((column) => {\n            const getCurrentSummaryColumn = column.summaries.operate([]).length;\n            if (getCurrentSummaryColumn) {\n                if (maxSummaryLength < getCurrentSummaryColumn) {\n                    maxSummaryLength = getCurrentSummaryColumn;\n                }\n            }\n        });\n        this.maxSummariesLenght = maxSummaryLength;\n        this.summaryHeight =  maxSummaryLength * this.grid.defaultSummaryHeight;\n        return this.summaryHeight;\n    }\n\n    public calculateSummaries(rowID, data) {\n        let rowSummaries = this.summaryCacheMap.get(rowID);\n        if (!rowSummaries) {\n            rowSummaries = new Map<string, IgxSummaryResult[]>();\n            this.summaryCacheMap.set(rowID, rowSummaries);\n        }\n        if (!this.hasSummarizedColumns || !data) {return rowSummaries; }\n        this.grid.columnList.filter(col => col.hasSummary).forEach((column) => {\n            if (!rowSummaries.get(column.field)) {\n                const columnValues = data.map(record => record[column.field]);\n                rowSummaries.set(column.field,\n                    column.summaries.operate(columnValues));\n            }\n        });\n        return rowSummaries;\n    }\n\n    public resetSummaryHeight() {\n        this.summaryHeight = 0;\n        (this.grid as any)._summaryPipeTrigger++;\n        if (this.grid.rootSummariesEnabled) {\n            this.retriggerRootPipe++;\n        }\n    }\n\n    public updateSummaryCache(groupingArgs) {\n        if (this.summaryCacheMap.size === 0 || !this.hasSummarizedColumns) { return; }\n        if (this.groupingExpressions.length === 0) {\n            this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n            return;\n        }\n        if (groupingArgs.length === 0) {\n            this.groupingExpressions = [];\n            this.clearSummaryCache();\n            return;\n        }\n        this.compareGroupingExpressions(this.groupingExpressions, groupingArgs);\n        this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n    }\n\n    public get hasSummarizedColumns(): boolean {\n        const summarizedColumns = this.grid.columnList.filter(col => col.hasSummary && !col.hidden);\n        return summarizedColumns.length > 0;\n    }\n\n    private deleteSummaryCache(id, columnName) {\n        if (this.summaryCacheMap.get(id)) {\n            const filteringApplied = columnName && this.grid.filteringExpressionsTree &&\n                    this.grid.filteringExpressionsTree.filteringOperands.map((expr) => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && this.summaryCacheMap.get(id).get(columnName) && !filteringApplied) {\n                this.summaryCacheMap.get(id).delete(columnName);\n            } else {\n                this.summaryCacheMap.delete(id);\n            }\n            if (id === this.rootSummaryID && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n        }\n    }\n\n    private getSummaryID(rowID, groupingExpressions) {\n        if (groupingExpressions.length === 0) { return []; }\n        const summaryIDs = [];\n        let data = this.grid.data;\n        if (this.grid.transactions.enabled) {\n            data = DataUtil.mergeTransactions(\n                cloneArray(this.grid.data),\n                this.grid.transactions.getAggregatedChanges(true),\n                this.grid.primaryKey\n            );\n        }\n        const rowData = this.grid.primaryKey ? data.find(rec => rec[this.grid.primaryKey] === rowID) : rowID;\n        let id = '{ ';\n        groupingExpressions.forEach(expr => {\n            id += `'${expr.fieldName}': '${rowData[expr.fieldName]}'`;\n                summaryIDs.push(id.concat(' }'));\n                id += ', ';\n        });\n        return summaryIDs;\n    }\n\n    private removeAllTreeGridSummaries(rowID, columnName?) {\n        let row = this.grid.records.get(rowID);\n        if (!row) { return; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowID = row.rowID;\n            this.deleteSummaryCache(rowID, columnName);\n            row = row.parent;\n        }\n    }\n\n    // TODO: remove only deleted rows\n    private removeChildRowSummaries(rowID, columnName?) {\n    }\n\n    private compareGroupingExpressions(current, groupingArgs) {\n        const newExpressions = groupingArgs.expressions.map(record => record.fieldName);\n        const removedCols = groupingArgs.ungroupedColumns;\n        if (current.length <= newExpressions.length) {\n            const newExpr = newExpressions.slice(0, current.length).toString();\n            if (current.toString() !== newExpr) {\n                this.clearSummaryCache();\n            }\n        } else {\n            const currExpr = current.slice(0, newExpressions.length).toString();\n            if (currExpr !== newExpressions.toString()) {\n                this.clearSummaryCache();\n                return;\n            }\n            removedCols.map(col => col.field).forEach(colName => {\n                this.summaryCacheMap.forEach((cache, id) => {\n                   if (id.indexOf(colName) !== -1) {\n                       this.summaryCacheMap.delete(id);\n                   }});\n            });\n        }\n    }\n\n    private get isTreeGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';\n    }\n\n    private get isHierarchicalGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n    }\n\n}\n","import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy, ElementRef } from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxColumnComponent } from '../column.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { IgxGridSelectionService } from '../../core/grid-selection';\nimport { SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-cell',\n    templateUrl: './summary-cell.component.html'\n})\nexport class IgxSummaryCellComponent {\n\n    @Input()\n    public summaryResults: IgxSummaryResult[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public firstCellIndentation = 0;\n\n    @Input()\n    public hasSummary = false;\n\n    @Input()\n    public density;\n\n    constructor(private element: ElementRef, private selectionService: IgxGridSelectionService) {\n    }\n\n    @Input()\n    @HostBinding('attr.data-rowIndex')\n    public rowIndex: number;\n\n    @HostBinding('attr.data-visibleIndex')\n    get visibleColumnIndex(): number {\n        return this.column.visibleIndex;\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.aria-describedby')\n    public get describeby() {\n        return `Summary_${this.column.field}`;\n    }\n\n    @HostBinding('class.igx-grid-summary--active')\n    public focused: boolean;\n\n    @HostListener('focus')\n    public onFocus() {\n        this.focused = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n    }\n\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        const ctrl = event.ctrlKey;\n        const shift = event.shiftKey;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const args = { targetType: 'summaryCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInCell(key, ctrl)) { return; }\n\n        this.selectionService.keyboardState.shift = shift && !(key === 'tab');\n        const row = this.getRowElementByIndex(this.rowIndex);\n        switch (key) {\n            case 'tab':\n                if (shift) {\n                    this.grid.navigation.performShiftTabKey(row, this.rowIndex, this.visibleColumnIndex, true);\n                    break;\n                }\n                this.grid.navigation.performTab(row, this.rowIndex, this.visibleColumnIndex, true);\n                break;\n            case 'arrowleft':\n            case 'home':\n            case 'left':\n                if (ctrl || key === 'home') {\n                    this.grid.navigation.onKeydownHome(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.rowIndex, this.visibleColumnIndex, true);\n                break;\n            case 'end':\n            case 'arrowright':\n            case 'right':\n                if (ctrl || key === 'end') {\n                    this.grid.navigation.onKeydownEnd(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.rowIndex, this.visibleColumnIndex, true);\n                break;\n            case 'arrowup':\n            case 'up':\n                this.grid.navigation.navigateUp(row, this.rowIndex, this.visibleColumnIndex);\n                break;\n            case 'arrowdown':\n            case 'down':\n                this.grid.navigation.navigateDown(row, this.rowIndex, this.visibleColumnIndex);\n                break;\n        }\n    }\n\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.column.getCellWidth();\n    }\n\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    get columnDatatype(): DataType {\n        return this.column.dataType;\n    }\n\n    get itemHeight() {\n        return this.column.grid.defaultSummaryHeight;\n    }\n\n    /**\n    * @hidden\n    */\n    public get grid() {\n        return (this.column.grid as any);\n    }\n\n    private getRowElementByIndex(rowIndex) {\n        const summaryRows = this.grid.summariesRowList.toArray();\n        return summaryRows.find((sr) => sr.dataRowIndex === rowIndex).nativeElement;\n    }\n\n    private isKeySupportedInCell(key, ctrl) {\n        if (ctrl) {\n           return ['arrowup', 'arrowdown', 'up', 'down', 'end', 'home'].indexOf(key) === -1;\n        }\n        return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright', 'home', 'end', 'tab'].indexOf(key) !== -1;\n    }\n\n    public translateSummary(summary: IgxSummaryResult): string {\n        return this.grid.resourceStrings[`igx_grid_summary_${summary.key}`] || summary.label;\n    }\n}\n","import {\n    Component,\n    Input,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    ViewChild,\n    ElementRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck\n} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxSummaryCellComponent } from './summary-cell.component';\nimport { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-row',\n    templateUrl: './summary-row.component.html',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxSummaryRowComponent implements DoCheck  {\n\n    @Input()\n    public summaries: Map<string, IgxSummaryResult[]>;\n\n    @Input()\n    public gridID;\n\n    @Input()\n    public index: number;\n\n    @Input()\n    public indentation = 0;\n\n    @Input()\n    public firstCellIndentation = -1;\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    get minHeight() {\n        return this.grid.summaryService.calcMaxSummaryHeight() - 1;\n    }\n\n    @ViewChildren(IgxSummaryCellComponent, { read: IgxSummaryCellComponent })\n    public summaryCells: QueryList<IgxSummaryCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                public element: ElementRef,\n                public cdr: ChangeDetectorRef) {}\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    public get grid() {\n        return this.gridAPI.grid;\n    }\n\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    public getColumnSummaries(columnName) {\n        if (!this.summaries.get(columnName)) {\n            return [];\n        }\n        return this.summaries.get(columnName);\n\n    }\n\n    /**\n     * @hidden\n     */\n    public get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n}\n","import { Directive, Input, Output, EventEmitter, ElementRef, OnDestroy, NgZone, OnInit } from '@angular/core';\nimport { interval, Observable, Subscription, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nexport enum DragScrollDirection {\n    NONE,\n    LEFT,\n    TOP,\n    RIGHT,\n    BOTTOM,\n    TOPLEFT,\n    TOPRIGHT,\n    BOTTOMLEFT,\n    BOTTOMRIGHT\n}\n\n\n@Directive({\n    selector: '[igxGridDragSelect]'\n})\nexport class IgxGridDragSelectDirective implements OnInit, OnDestroy {\n    _activeDrag: boolean;\n\n    @Input('igxGridDragSelect')\n    get activeDrag(): boolean {\n        return this._activeDrag;\n    }\n\n    set activeDrag(val: boolean) {\n        if (val !== this._activeDrag) {\n            this.unsubscribe();\n            this._activeDrag = val;\n        }\n    }\n\n    @Output()\n    onDragStop = new EventEmitter<boolean>();\n\n    @Output()\n    onDragScroll = new EventEmitter<DragScrollDirection>();\n\n    get nativeElement(): HTMLElement {\n        return this.ref.nativeElement;\n    }\n\n    get clientRect(): ClientRect {\n        return this.nativeElement.getBoundingClientRect();\n    }\n\n    protected end$ = new Subject<any>();\n    protected lastDirection = DragScrollDirection.NONE;\n    protected _interval$: Observable<any>;\n    protected _sub: Subscription;\n\n    constructor(private ref: ElementRef, private zone: NgZone) {\n        this._interval$ = interval(100).pipe(\n            takeUntil(this.end$),\n            filter(() => this.activeDrag)\n        );\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.addEventListener('pointerleave', this.stopDragSelection);\n        });\n    }\n\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.removeEventListener('pointerleave', this.stopDragSelection);\n        });\n        this.unsubscribe();\n        this.end$.complete();\n    }\n\n\n    startDragSelection = (ev: PointerEvent) => {\n        if (!this.activeDrag) {\n            return;\n        }\n        const x = ev.clientX;\n        const y = ev.clientY;\n        const direction = this._measureDimensions(x, y);\n        if (direction === this.lastDirection) {\n            return;\n        }\n        this.unsubscribe();\n        this._sub = this._interval$.subscribe(() => this.onDragScroll.emit(direction));\n        this.lastDirection = direction;\n    }\n\n    stopDragSelection = () => {\n        if (!this.activeDrag) {\n            return;\n        }\n        this.onDragStop.emit(false);\n        this.unsubscribe();\n        this.lastDirection = DragScrollDirection.NONE;\n    }\n\n    _measureDimensions(x: number, y: number): DragScrollDirection {\n        let direction: DragScrollDirection;\n\n        const rect = this.clientRect;\n        const RATIO = 0.15;\n        const offsetX = Math.trunc(x - rect.left);\n        const offsetY = Math.trunc(y - rect.top);\n\n        const left = offsetX <= rect.width * RATIO;\n        const right = offsetX >= rect.width * (1 - RATIO);\n        const top = offsetY <= rect.height * RATIO;\n        const bottom = offsetY >= rect.height * (1 - RATIO);\n\n        if (top && left) {\n            direction = DragScrollDirection.TOPLEFT;\n        } else if (top && right) {\n            direction = DragScrollDirection.TOPRIGHT;\n        } else if (bottom && left) {\n            direction = DragScrollDirection.BOTTOMLEFT;\n        } else if (bottom && right) {\n            direction = DragScrollDirection.BOTTOMRIGHT;\n        } else if (top) {\n            direction = DragScrollDirection.TOP;\n        } else if (bottom) {\n            direction = DragScrollDirection.BOTTOM;\n        } else if (left) {\n            direction = DragScrollDirection.LEFT;\n        } else if (right) {\n            direction = DragScrollDirection.RIGHT;\n        } else {\n            direction = DragScrollDirection.NONE;\n        }\n\n        return direction;\n\n    }\n\n    protected unsubscribe() {\n        if (this._sub) {\n            this._sub.unsubscribe();\n        }\n    }\n}\n","import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxColumnResizerDirective } from './grid.common';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-column-resizer',\n    templateUrl: './grid-column-resizer.component.html'\n})\nexport class IgxGridColumnResizerComponent {\n    constructor(public colResizingService: IgxColumnResizingService) { }\n\n    @ViewChild(IgxColumnResizerDirective)\n    public resizer: IgxColumnResizerDirective;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    ChangeDetectionStrategy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { DataType } from '../../data-operations/data-util';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxDropDownComponent, ISelectionEventArgs } from '../../drop-down/index';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { HorizontalAlignment, VerticalAlignment, OverlaySettings } from '../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../services/overlay/position/connected-positioning-strategy';\nimport { IChipSelectEventArgs, IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { ExpressionUI } from './grid-filtering.service';\nimport { IgxDropDownItemComponent } from '../../drop-down/drop-down-item.component';\nimport { IgxFilteringService } from './grid-filtering.service';\nimport { KEYS, isEdge } from '../../core/utils';\nimport { AbsoluteScrollStrategy } from '../../services/overlay/scroll';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-row',\n    templateUrl: './grid-filtering-row.component.html'\n})\nexport class IgxGridFilteringRowComponent implements AfterViewInit {\n\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _conditionsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private _operatorsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private chipsAreaWidth: number;\n    private chipAreaScrollOffset = 0;\n    private _column = null;\n    private isKeyPressed = false;\n    private isComposing = false;\n\n    public showArrows: boolean;\n    public expression: IFilteringExpression;\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    set column(val) {\n        if (val) {\n            this._column = val;\n\n            this.expressionsList = this.filteringService.getExpressions(this._column.field);\n\n            this.resetExpression();\n\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    @Input()\n    get value(): any {\n        return this.expression ? this.expression.searchVal : null;\n    }\n\n    set value(val) {\n        if (!val && val !== 0) {\n            this.expression.searchVal = null;\n            this.showHideArrowButtons();\n        } else {\n            this.expression.searchVal = this.transformValue(val);\n            if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n                this.addExpression(true);\n            }\n        }\n\n        this.filter();\n    }\n\n    @ViewChild('defaultFilterUI', { read: TemplateRef })\n    protected defaultFilterUI: TemplateRef<any>;\n\n    @ViewChild('defaultDateUI', { read: TemplateRef })\n    protected defaultDateUI: TemplateRef<any>;\n\n    @ViewChild('input', { read: ElementRef })\n    protected input: ElementRef;\n\n    @ViewChild('inputGroupConditions', { read: IgxDropDownComponent })\n    protected dropDownConditions: IgxDropDownComponent;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChildren('operators', { read: IgxDropDownComponent })\n    protected dropDownOperators: QueryList<IgxDropDownComponent>;\n\n    @ViewChild('inputGroup', { read: ElementRef })\n    protected inputGroup: ElementRef;\n\n    @ViewChild('inputGroupPrefix', { read: ElementRef })\n    protected inputGroupPrefix: ElementRef;\n\n    @ViewChild('container')\n    protected container: ElementRef;\n\n    @ViewChild('operand')\n    protected operand: ElementRef;\n\n    @ViewChild('closeButton')\n    public closeButton: ElementRef;\n\n    @HostBinding('class.igx-grid__filtering-row')\n    public cssClass = 'igx-grid__filtering-row';\n\n    constructor(public filteringService: IgxFilteringService, public element: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    ngAfterViewInit() {\n        this._conditionsOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._operatorsOverlaySettings.outlet = this.column.grid.outletDirective;\n\n        this.input.nativeElement.focus();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeydown(event) {\n        event.stopPropagation();\n        if (document.activeElement === this.closeButton.nativeElement && !event.shiftKey) {\n            this.filteringService.grid.navigation.navigateFirstCellIfPossible(event);\n        }\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    public onEscKeydown(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.close();\n    }\n\n    get disabled(): boolean {\n        return !(this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0);\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.defaultDateUI;\n        }\n\n        return this.defaultFilterUI;\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.String:\n            case DataType.Boolean:\n                return 'text';\n            case DataType.Number:\n                return 'number';\n        }\n    }\n\n    get conditions(): any {\n        return this.column.filters.conditionList();\n    }\n\n    get isUnaryCondition(): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.isUnary;\n        } else {\n            return true;\n        }\n    }\n\n    get placeholder(): string {\n        if (this.expression.condition && this.expression.condition.isUnary) {\n            return this.filteringService.getChipLabel(this.expression);\n        } else if (this.column.dataType === DataType.Date) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_date_placeholder;\n        } else if (this.column.dataType === DataType.Boolean) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_boolean_placeholder;\n        } else {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_placeholder;\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input group's prefix.\n     */\n    public onPrefixKeyDown(event: KeyboardEvent) {\n        if ((event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) && this.dropDownConditions.collapsed) {\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            event.stopImmediatePropagation();\n        } else if (event.key === KEYS.TAB) {\n            if (event.shiftKey) {\n                event.preventDefault();\n                event.stopPropagation();\n            } else if (!this.dropDownConditions.collapsed) {\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            }\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input.\n     */\n    public onInputKeyDown(event: KeyboardEvent) {\n        this.isKeyPressed = true;\n\n        if (this.column.dataType === DataType.Boolean) {\n            if (event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) {\n                this.inputGroupPrefix.nativeElement.focus();\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n                event.stopPropagation();\n                return;\n            }\n        }\n\n        if (event.key === KEYS.ENTER) {\n            if (this.isComposing) {\n                return;\n            }\n            this.commitInput();\n        } else if (event.altKey && (event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE)) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        } else if (event.key === KEYS.ESCAPE || event.key === KEYS.ESCAPE_IE) {\n            event.preventDefault();\n            this.close();\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * Event handler for keyup on the input.\n     */\n    public onInputKeyUp(eventArgs) {\n        this.isKeyPressed = false;\n    }\n\n    /**\n     * Event handler for input on the input.\n     */\n    public onInput(eventArgs) {\n        // The 'iskeyPressed' flag is needed for a case in IE, because the input event is fired on focus and for some reason,\n        // when you have a japanese character as a placeholder, on init the value here is empty string .\n        if (isEdge() || this.isKeyPressed || eventArgs.target.value) {\n            this.value = eventArgs.target.value;\n        }\n    }\n\n    /**\n     * Event handler for compositionstart on the input.\n     */\n    public onCompositionStart() {\n        this.isComposing = true;\n    }\n\n    /**\n     * Event handler for compositionend on the input.\n     */\n    public onCompositionEnd() {\n        this.isComposing = false;\n    }\n\n    /**\n     * Event handler for input click event.\n     */\n    public onInputClick() {\n        if (this.column.dataType === DataType.Boolean && this.dropDownConditions.collapsed) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        }\n    }\n\n    /**\n     * Event handler for datepicker's close.\n     */\n    public datePickerClose() {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.filteringService.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    /**\n     * Returns the icon name of the current condition.\n     */\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else {\n            return this.expression.condition.iconName;\n        }\n    }\n\n    /**\n     * Returns whether a given condition is selected in dropdown.\n     */\n    public isConditionSelected(conditionName: string): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.name === conditionName;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Clears the current filtering.\n     */\n    public clearFiltering() {\n        this.filteringService.clearFilter(this.column.field);\n        this.resetExpression();\n        if (this.input) {\n            this.input.nativeElement.focus();\n        }\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /**\n     * Commits the value of the input.\n     */\n    public commitInput() {\n        this.chipsArea.chipsList.filter(chip => chip.selected = false);\n        let indexToDeselect = -1;\n        for (let index = 0; index < this.expressionsList.length; index++) {\n            const expression = this.expressionsList[index].expression;\n            if (expression.searchVal === null && !expression.condition.isUnary) {\n                indexToDeselect = index;\n            }\n        }\n        if (indexToDeselect !== -1) {\n            this.removeExpression(indexToDeselect, this.expression);\n        }\n        this.resetExpression();\n        this.scrollChipsWhenAddingExpression();\n    }\n\n    /**\n     * Clears the value of the input.\n     */\n    public clearInput() {\n        this.value = null;\n    }\n\n    /**\n     * Event handler for keydown on clear button.\n     */\n    public onClearKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.clearInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on clear button.\n     */\n    public onClearClick() {\n        this.clearInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for keydown on commit button.\n     */\n    public onCommitKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.commitInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on commit button.\n     */\n    public onCommitClick() {\n        this.commitInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for focusout on the input group.\n     */\n    public onInputGroupFocusout() {\n        if (!this.value && this.value !== 0) {\n            return;\n        }\n        requestAnimationFrame(() => {\n            const focusedElement = document.activeElement;\n            if (!(focusedElement && this.inputGroup.nativeElement.contains(focusedElement)) &&\n                this.dropDownConditions.collapsed) {\n                this.commitInput();\n            }\n        });\n    }\n\n    /**\n     * Closes the filtering edit row.\n     */\n    public close() {\n        if (this.expressionsList.length === 1 &&\n            this.expressionsList[0].expression.searchVal === null &&\n            this.expressionsList[0].expression.condition.isUnary === false) {\n            this.filteringService.getExpressions(this.column.field).pop();\n        } else {\n            this.expressionsList.forEach((item) => {\n                if (item.expression.searchVal === null && !item.expression.condition.isUnary) {\n                    this.filteringService.removeExpression(this.column.field, this.expressionsList.indexOf(item));\n                }\n            });\n        }\n\n        this.filteringService.isFilterRowVisible = false;\n\n        this.filteringService.updateFilteringCell(this.column);\n        this.filteringService.focusFilterCellChip(this.column, true);\n\n        this.filteringService.filteredColumn = null;\n        this.filteringService.selectedExpression = null;\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /*\n    * Opens date-picker if condition is not unary\n    */\n    public openDatePicker(openDialog: Function) {\n        if (!this.expression.condition.isUnary) {\n            openDialog();\n        }\n    }\n\n    /**\n     *  Event handler for date picker's selection.\n     */\n    public onDateSelected(value: Date) {\n        this.value = value;\n        this.commitInput();\n    }\n\n    /**\n     * Opens the conditions dropdown.\n     */\n    public toggleConditionsDropDown(target: any) {\n        this._conditionsOverlaySettings.positionStrategy.settings.target = target;\n        this.dropDownConditions.toggle(this._conditionsOverlaySettings);\n    }\n\n    /**\n     * Opens the logic operators dropdown.\n     */\n    public toggleOperatorsDropDown(eventArgs, index) {\n        this._operatorsOverlaySettings.positionStrategy.settings.target = eventArgs.target.parentElement;\n        this.dropDownOperators.toArray()[index].toggle(this._operatorsOverlaySettings);\n    }\n\n    /**\n     * Event handler for change event in conditions dropdown.\n     */\n    public onConditionsChanged(eventArgs) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expression.condition = this.getCondition(value);\n        if (this.expression.condition.isUnary) {\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.unaryConditionChangedCallback());\n        } else {\n            requestAnimationFrame(() => this.conditionChangedCallback());\n        }\n\n        if (this.input) {\n            // Add requestAnimationFrame becasue of an issue in IE, where you are still able to write in the input,\n            // if it has been focused and then set to readonly.\n            requestAnimationFrame(() => this.input.nativeElement.focus());\n        }\n    }\n\n    /**\n     *  Event handler for chip selected event.\n     */\n    public onChipSelected(eventArgs: IChipSelectEventArgs, expression: IFilteringExpression) {\n        if (eventArgs.selected) {\n            if (this.chipsArea.chipsList) {\n                this.chipsArea.chipsList.forEach((chip) => {\n                    if (chip !== eventArgs.owner) {\n                        chip.selected = false;\n                    }\n                });\n            }\n            this.expression = expression;\n\n            if (this.input) {\n                this.input.nativeElement.focus();\n            }\n        } else if (this.expression === expression) {\n            this.resetExpression();\n        }\n    }\n\n    /**\n     * Event handler for chip keydown event.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, chip: IgxChipComponent) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            chip.selected = !chip.selected;\n        }\n    }\n\n    /**\n     * Scrolls the first chip into view if the tab key is pressed on the left arrow.\n     */\n    public onLeftArrowKeyDown(event) {\n        if (event.key === KEYS.TAB) {\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * Event handler for chip removed event.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove, item.expression);\n\n        this.scrollChipsOnRemove();\n    }\n\n    /**\n     * Event handler for logic operator changed event.\n     */\n    public onLogicOperatorChanged(eventArgs: ISelectionEventArgs, expression: ExpressionUI) {\n        if (eventArgs.oldSelection) {\n            expression.afterOperator = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n            this.expressionsList[this.expressionsList.indexOf(expression) + 1].beforeOperator = expression.afterOperator;\n\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.filter());\n        }\n    }\n\n    /**\n     * Scrolls the chips into the chip area when left or right arrows are pressed.\n     */\n    public scrollChipsOnArrowPress(arrowPosition: string) {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        if (arrowPosition === 'right') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.right)) {\n                    count++;\n                }\n            }\n\n            if (count < chipAraeChildren.length) {\n                this.chipAreaScrollOffset -= Math.ceil(chipAraeChildren[count].getBoundingClientRect().right) -\n                    Math.ceil(containerRect.right) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n\n        if (arrowPosition === 'left') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                    count++;\n                }\n            }\n\n            if (count > 0) {\n                this.chipAreaScrollOffset += Math.ceil(containerRect.left) -\n                    Math.ceil(chipAraeChildren[count - 1].getBoundingClientRect().left) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n    }\n\n    private showHideArrowButtons() {\n        requestAnimationFrame(() => {\n            if (this.filteringService.isFilterRowVisible) {\n                const containerWidth = this.container.nativeElement.getBoundingClientRect().width;\n                this.chipsAreaWidth = this.chipsArea.element.nativeElement.getBoundingClientRect().width;\n\n                this.showArrows = this.chipsAreaWidth >= containerWidth && this.isColumnFiltered;\n\n                // TODO: revise the cdr.detectChanges() usage here\n                this.cdr.detectChanges();\n            }\n        });\n    }\n\n    private transformValue(value): any {\n        if (this.column.dataType === DataType.Number) {\n            value = parseFloat(value);\n        } else if (this.column.dataType === DataType.Boolean) {\n            value = Boolean(value);\n        }\n\n        return value;\n    }\n\n    private addExpression(isSelected: boolean) {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = this.expression;\n        exprUI.beforeOperator = this.expressionsList.length > 0 ? FilteringLogic.And : null;\n        exprUI.isSelected = isSelected;\n\n        this.expressionsList.push(exprUI);\n\n        const length = this.expressionsList.length;\n        if (this.expressionsList[length - 2]) {\n            this.expressionsList[length - 2].afterOperator = this.expressionsList[length - 1].beforeOperator;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private removeExpression(indexToRemove: number, expression: IFilteringExpression) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.filter();\n\n        if (this.expression === expression) {\n            this.resetExpression();\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private resetExpression() {\n        this.expression = {\n            fieldName: this.column.field,\n            condition: null,\n            searchVal: null,\n            ignoreCase: this.column.filteringIgnoreCase\n        };\n\n        if (this.column.dataType !== DataType.Boolean) {\n            this.expression.condition = this.getCondition(this.conditions[0]);\n        }\n\n        if (this.column.dataType === DataType.Date && this.input) {\n            this.input.nativeElement.value = null;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private scrollChipsWhenAddingExpression() {\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        if (!chipAraeChildren || chipAraeChildren.length === 0) {\n            return;\n        }\n\n        const containerRectRight = Math.ceil(this.container.nativeElement.getBoundingClientRect().right);\n\n        const lastChipRectRight = Math.ceil(chipAraeChildren[chipAraeChildren.length - 1].getBoundingClientRect().right);\n        if (lastChipRectRight >= containerRectRight) {\n            this.chipAreaScrollOffset -= lastChipRectRight - containerRectRight;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    private transform(offset: number) {\n        requestAnimationFrame(() => {\n            this.chipsArea.element.nativeElement.style.transform = `translate(${offset}px)`;\n        });\n    }\n\n    private scrollChipsOnRemove() {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        for (let index = 0; index < chipAraeChildren.length; index++) {\n            if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                count++;\n            }\n        }\n\n        if (count <= 2) {\n            this.chipAreaScrollOffset = 0;\n        } else {\n            const dif = chipAraeChildren[count].id === 'chip' ? count - 2 : count - 1;\n            this.chipAreaScrollOffset += Math.ceil(containerRect.left) - Math.ceil(chipAraeChildren[dif].getBoundingClientRect().left) + 1;\n        }\n\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    private conditionChangedCallback() {\n        if (!!this.expression.searchVal || this.expression.searchVal === 0) {\n            this.filter();\n        } else if (this.value) {\n            this.value = null;\n        }\n    }\n\n    private unaryConditionChangedCallback() {\n        if (this.value) {\n            this.value = null;\n        }\n        if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n            this.addExpression(true);\n        }\n        this.filter();\n    }\n\n    private filter() {\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private get isColumnFiltered() {\n        return this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0;\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    ContentChildren,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    IterableChangeRecord,\n    IterableDiffers,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    ViewContainerRef,\n    InjectionToken,\n    Optional\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil, first, filter } from 'rxjs/operators';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, isEdge, isNavigationKey, CancelableEventArgs, flatten, mergeObjects } from '../core/utils';\nimport { DataType } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IForOfState, IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport {\n    IgxBaseExporter,\n    IgxExporterOptionsBase,\n    AbsoluteScrollStrategy,\n    HorizontalAlignment,\n    VerticalAlignment,\n    IgxOverlayService\n} from '../services/index';\nimport { IgxCheckboxComponent } from './../checkbox/checkbox.component';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IColumnVisibilityChangedEventArgs } from './column-hiding-item.directive';\nimport { IgxColumnComponent } from './column.component';\nimport { ISummaryExpression } from './summaries/grid-summary';\nimport { DropPosition, ContainerPositioningStrategy, IgxDecimalPipeComponent, IgxDatePipeComponent } from './grid.common';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxRowComponent } from './row.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { Transaction, TransactionType, TransactionService, State } from '../services/index';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditTabStopDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditActionsDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxGridRowComponent } from './grid';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { WatchChanges } from './watch-changes';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IGridResourceStrings } from '../core/i18n/grid-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { DeprecateMethod, DeprecateProperty } from '../core/deprecateDecorators';\nimport { IgxGridSelectionService, GridSelectionRange, IgxGridCRUDService, IgxRow, IgxCell } from '../core/grid-selection';\nimport { DragScrollDirection } from './drag-select.directive';\nimport { ICachedViewLoadedEventArgs } from '../directives/template-outlet/template_outlet.directive';\nimport {\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective\n} from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport { IgxDragIndicatorIconDirective } from './row-drag.directive';\nimport { IgxDragDirective } from '../directives/dragdrop/dragdrop.directive';\n\nconst MINIMUM_COLUMN_WIDTH = 136;\nconst FILTER_ROW_HEIGHT = 50;\n\n// By default row editing overlay outlet is inside grid body so that overlay is hidden below grid header when scrolling.\n// In cases when grid has 1-2 rows there isn't enough space in grid body and row editing overlay should be shown above header.\n// Default row editing overlay height is higher then row height that is why the case is valid also for row with 2 rows.\n// More accurate calculation is not possible, cause row editing overlay is still not shown and we don't know its height,\n// but in the same time we need to set row editing overlay outlet before opening the overlay itself.\nconst MIN_ROW_EDITING_COUNT_THRESHOLD = 2;\n\nexport const IgxGridTransaction = new InjectionToken<string>('IgxGridTransaction');\n\nexport interface IGridCellEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n}\n\nexport interface IGridEditEventArgs extends CancelableEventArgs {\n    rowID: any;\n    cellID?: {\n        rowID: any,\n        columnID: any,\n        rowIndex: number\n    };\n    oldValue: any;\n    newValue?: any;\n    event?: Event;\n}\n\nexport interface IPinColumnEventArgs {\n    column: IgxColumnComponent;\n    insertAtIndex: number;\n    isPinned: boolean;\n}\n\nexport interface IPageEventArgs {\n    previous: number;\n    current: number;\n}\n\nexport interface IRowDataEventArgs {\n    data: any;\n}\n\nexport interface IColumnResizeEventArgs {\n    column: IgxColumnComponent;\n    prevWidth: string;\n    newWidth: string;\n}\n\nexport interface IRowSelectionEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    row?: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    event?: Event;\n}\n\nexport interface ISearchInfo {\n    searchText: string;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n    activeMatchIndex: number;\n    matchInfoCache: any[];\n}\n\nexport interface IGridToolbarExportEventArgs {\n    grid: IgxGridBaseComponent;\n    exporter: IgxBaseExporter;\n    options: IgxExporterOptionsBase;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingStartEventArgs {\n    source: IgxColumnComponent;\n}\n\nexport interface IColumnMovingEventArgs {\n    source: IgxColumnComponent;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingEndEventArgs {\n    source: IgxColumnComponent;\n    target: IgxColumnComponent;\n}\n\n// TODO: to be deleted when onFocusChange event is removed #4054\nexport interface IFocusChangeEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n    cancel: boolean;\n}\n\nexport interface IGridKeydownEventArgs {\n    targetType: GridKeydownTargetType;\n    target: Object;\n    event: Event;\n    cancel: boolean;\n}\n\nexport interface ICellPosition {\n    rowIndex: number;\n    visibleColumnIndex: number;\n}\nexport interface IGridDataBindable {\n    data: any[];\n    filteredData: any[];\n}\n\nexport interface IRowDragEndEventArgs {\n    owner: IgxDragDirective;\n    dragData: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    animation: boolean;\n}\n\nexport interface IRowDragStartEventArgs extends CancelableEventArgs {\n    owner: IgxDragDirective;\n    dragData: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n }\n\nexport enum GridSummaryPosition {\n    top = 'top',\n    bottom = 'bottom'\n}\n\nexport enum GridSummaryCalculationMode {\n    rootLevelOnly = 'rootLevelOnly',\n    childLevelsOnly = 'childLevelsOnly',\n    rootAndChildLevels = 'rootAndChildLevels'\n}\n\nexport enum FilterMode {\n    quickFilter = 'quickFilter',\n    excelStyleFilter = 'excelStyleFilter'\n}\n\nexport enum GridKeydownTargetType {\n    dataCell = 'dataCell',\n    summaryCell = 'summaryCell',\n    groupRow = 'groupRow',\n    hierarchicalRow = 'hierarchicalRow'\n}\n\nexport abstract class IgxGridBaseComponent extends DisplayDensityBase implements OnInit, OnDestroy, AfterContentInit, AfterViewInit {\n    private _scrollWidth: number;\n\n    public get scrollWidth() {\n        return this._scrollWidth;\n    }\n\n    private _resourceStrings = CurrentResourceStrings.GridResStrings;\n    private _emptyGridMessage = null;\n    private _emptyFilteredGridMessage = null;\n    private _isLoading = false;\n    private _locale = null;\n    private _observer: MutationObserver;\n    private _destroyed = false;\n    private overlayIDs = [];\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: IGridResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): IGridResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that autogenerates the `IgxGridComponent` columns.\n     * The default value is false.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public autoGenerate = false;\n\n    public abstract id: string;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is empty.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [emptyGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public emptyGridTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is loading.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [loadingGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public loadingGridTemplate: TemplateRef<any>;\n\n    @WatchChanges()\n    @Input()\n    public get filteringLogic() {\n        return this._filteringExpressionsTree.operator;\n    }\n\n    /**\n     * Sets the filtering logic of the `IgxGridComponent`.\n     * The default is AND.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [filteringLogic]=\"filtering\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set filteringLogic(value: FilteringLogic) {\n        this._filteringExpressionsTree.operator = value;\n    }\n\n    /**\n     * Returns the filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let filteringExpressionsTree = this.grid.filteringExpressionsTree;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get filteringExpressionsTree() {\n        return this._filteringExpressionsTree;\n    }\n\n    /**\n     * Sets the filtering state of the `IgxGridComponent`.\n     * ```typescript\n     * const logic = new FilteringExpressionsTree(FilteringLogic.And, \"ID\");\n     * logic.filteringOperands = [\n     *     {\n     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n     *          fieldName: 'ID',\n     *          searchVal: 1\n     *     }\n     * ];\n     * this.grid.filteringExpressionsTree = (logic);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            const val = (value as FilteringExpressionsTree);\n            for (let index = 0; index < val.filteringOperands.length; index++) {\n                if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {\n                    const newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);\n                    newExpressionsTree.filteringOperands.push(val.filteringOperands[index] as IFilteringExpression);\n                    val.filteringOperands[index] = newExpressionsTree;\n                }\n            }\n\n            // clone the filtering expression tree in order to trigger the filtering pipe\n            const filteringExpressionTreeClone = new FilteringExpressionsTree(value.operator, value.fieldName);\n            filteringExpressionTreeClone.filteringOperands = value.filteringOperands;\n            this._filteringExpressionsTree = filteringExpressionTreeClone;\n\n            if (this.filteringService.isFilteringExpressionsTreeEmpty()) {\n                this.filteredData = null;\n            }\n\n            this.filteringService.refreshExpressions();\n            this.summaryService.clearSummaryCache();\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * Returns the locale of the grid.\n     * If not set, returns browser's language.\n     */\n    @Input()\n    get locale(): string {\n        if (this._locale) {\n            return this._locale;\n        } else {\n            return 'en';\n        }\n    }\n\n    /**\n     * Sets the locale of the grid.\n     */\n    set locale(value) {\n        this._locale = value;\n    }\n\n    /**\n     * Returns whether the paging feature is enabled/disabled.\n     * The default state is disabled (false).\n     * ```\n     * const paging = this.grid.paging;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get paging(): boolean {\n        return this._paging;\n    }\n\n    /**\n     * Enables/Disables the paging feature.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [paging]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set paging(value: boolean) {\n        this._paging = value;\n        this._pipeTrigger++;\n\n        if (this._ngAfterViewInitPassed) {\n            this.cdr.detectChanges();\n            this.calculateGridHeight();\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * Returns the current page index.\n     * ```html\n     * let gridPage = this.grid.page;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get page(): number {\n        return this._page;\n    }\n\n    /**\n     * Sets the current page index.\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [page]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     */\n    set page(val: number) {\n        if (val === this._page || val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.onPagingDone.emit({ previous: this._page, current: val });\n        this._page = val;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns the number of visible items per page of the `IgxGridComponent`.\n     * The default is 15.\n     * ```html\n     * let itemsPerPage = this.grid.perPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get perPage(): number {\n        return this._perPage;\n    }\n\n    /**\n     * Sets the number of visible items per page of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [perPage]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set perPage(val: number) {\n        if (val < 0) {\n            return;\n        }\n\n        this.selectionService.clear();\n        this._perPage = val;\n        this.page = 0;\n        this.endEdit(true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * You can provide a custom `ng-template` for the pagination UI of the grid.\n     * ```html\n     * <igx-grid #grid [paging]=\"true\" [myTemplate]=\"myTemplate\" [height]=\"'305px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public paginationTemplate: TemplateRef<any>;\n\n    /**\n     * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * By default it is disabled (false).\n     * ```typescript\n     * let gridColHiding = this.grid.columnHiding;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get columnHiding() {\n        return this._columnHiding;\n    }\n\n    /**\n     * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * In order for the UI to work, you need to enable the toolbar as shown in the example below.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [showToolbar]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnHiding(value) {\n        if (this._columnHiding !== value) {\n            this._columnHiding = value;\n            if (this.gridAPI.grid) {\n                this.markForCheck();\n                if (this._ngAfterViewInitPassed) {\n                    this.calculateGridSizes();\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets whether the `IgxGridRowComponent` selection is enabled.\n     * By default it is set to false.\n     * ```typescript\n     * let rowSelectable = this.grid.rowSelectable;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get rowSelectable(): boolean {\n        return this._rowSelection;\n    }\n\n    /**\n     * Sets whether rows can be selected.\n     * ```html\n     * <igx-grid #grid [showToolbar]=\"true\" [rowSelectable]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set rowSelectable(val: boolean) {\n        this._rowSelection = val;\n        if (this.gridAPI.grid && this.columnList) {\n\n            // should selection persist?\n            this.allRowsSelected = false;\n            this.deselectAllRows();\n            this.calculateGridSizes();\n        }\n    }\n\n    @Input()\n    get rowDraggable(): boolean {\n        return this._rowDrag;\n    }\n\n    /**\n     * Sets whether rows can be moved.\n     * ```html\n     * <igx-grid #grid [rowDraggable]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set rowDraggable(val: boolean) {\n        this._rowDrag = val;\n        if (this.gridAPI.grid && this.columnList) {\n            this.calculateGridSizes();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public rowDragging = false;\n\n\n    /**\n * Sets whether the `IgxGridRowComponent` is editable.\n * By default it is set to false.\n * ```typescript\n * let rowEditable = this.grid.rowEditable;\n * ```\n * @memberof IgxGridBaseComponent\n */\n    @WatchChanges()\n    @Input()\n    get rowEditable(): boolean {\n        return this._rowEditable;\n    }\n    /**\n    * Sets whether rows can be edited.\n    * ```html\n    * <igx-grid #grid [showToolbar]=\"true\" [rowEditable]=\"true\" [primaryKey]=\"'ProductID'\" [columnHiding]=\"true\"></igx-grid>\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    set rowEditable(val: boolean) {\n        if (val && (this.primaryKey === undefined || this.primaryKey === null)) {\n            console.warn('The grid must have a `primaryKey` specified when using `rowEditable`!');\n        }\n        this._rowEditable = val;\n        if (this.gridAPI.grid) {\n            this.refreshGridState();\n        }\n    }\n\n    /**\n     * Returns the height of the `IgxGridComponent`.\n     * ```typescript\n     * let gridHeight = this.grid.height;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @HostBinding('style.height')\n    @Input()\n    public get height() {\n        return this._height;\n    }\n\n    /**\n     * Sets the height of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set height(value: string) {\n        if (this._height !== value) {\n            this._height = value;\n            requestAnimationFrame(() => {\n                if (!this._destroyed) {\n                    this.reflow();\n                    this.cdr.markForCheck();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns the width of the `IgxGridComponent`.\n     * ```typescript\n     * let gridWidth = this.grid.width;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @HostBinding('style.width')\n    @Input()\n    public get width() {\n        return this._width;\n    }\n\n    /**\n     * Sets the width of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [width]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set width(value: string) {\n        if (this._width !== value) {\n            this._width = value;\n            requestAnimationFrame(() => {\n                // Calling reflow(), because the width calculation\n                // might make the horizontal scrollbar appear/disappear.\n                // This will change the height, which should be recalculated.\n                if (!this._destroyed) {\n                    this.reflow();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns the width of the header of the `IgxGridComponent`.\n     * ```html\n     * let gridHeaderWidth = this.grid.headerWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerWidth() {\n        return parseInt(this._width, 10) - 17;\n    }\n\n    /**\n     * An @Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-even-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public evenRowCSS = 'igx-grid__tr--even';\n\n    /**\n     * An @Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-odd-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public oddRowCSS = 'igx-grid__tr--odd';\n\n    /**\n     * Returns the row height.\n     * ```typescript\n     * const rowHeight = this.grid.rowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get rowHeight() {\n        return this._rowHeight ? this._rowHeight : this.defaultRowHeight;\n    }\n\n    /**\n     * Sets the row height.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [rowHeight]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set rowHeight(value) {\n        this._rowHeight = parseInt(value, 10);\n    }\n\n    /**\n     * An @Input property that sets the default width of the `IgxGridComponent`'s columns.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [columnWidth]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get columnWidth(): string {\n        return this._columnWidth;\n    }\n    public set columnWidth(value: string) {\n        this._columnWidth = value;\n        this.columnWidthSetByUser = true;\n    }\n\n    /**\n     * An @Input property that sets the primary key of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [primaryKey]=\"'ProductID'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public primaryKey;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set emptyGridMessage(value: string) {\n        this._emptyGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records.\n    */\n    get emptyGridMessage(): string {\n        return this._emptyGridMessage || this.resourceStrings.igx_grid_emptyGrid_message;\n    }\n\n    /**\n     * An @Input property that sets whether the grid is going to show loading indicator.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [isLoading]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set isLoading(value: boolean) {\n        this._isLoading = value;\n        if (this.gridAPI.grid) {\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * An accessor that returns whether the grid is showing loading indicator.\n     */\n    get isLoading(): boolean {\n        return this._isLoading;\n    }\n\n    /**\n     * A property that allows the columns to be auto-generated once again after the initialization of the grid.\n     * This will allow to bind the grid to remote data and having auto-generated columns at the same time.\n     * Note that after generating the columns, this property would be disabled to avoid re-creating\n     * columns each time a new data is assigned.\n     * ```typescript\n     *  this.grid.shouldGenerate = true;\n     *  this.remoteData = this.remoteService.remoteData;\n     * ```\n     */\n    public shouldGenerate: boolean;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records and the grid is filtered.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set emptyFilteredGridMessage(value: string) {\n        this._emptyFilteredGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records and the grid is filtered.\n    */\n    get emptyFilteredGridMessage(): string {\n        return this._emptyFilteredGridMessage || this.resourceStrings.igx_grid_emptyFilteredGrid_message;\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the built-in column hiding UI.\n     * ```html\n     * <igx-grid [showToolbar]=\"true\" [columnHiding]=\"true\" columnHidingTitle=\"Column Hiding\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnHidingTitle = '';\n\n    /**\n     * Returns if the built-in column pinning UI should be shown in the toolbar.\n     * ```typescript\n     *  let colPinning = this.grid.columnPinning;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get columnPinning() {\n        return this._columnPinning;\n    }\n\n    /**\n     * Sets if the built-in column pinning UI should be shown in the toolbar.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnPinning(value) {\n        if (this._columnPinning !== value) {\n            this._columnPinning = value;\n            if (this.gridAPI.grid) {\n                this.markForCheck();\n                if (this._ngAfterViewInitPassed) {\n                    this.calculateGridSizes();\n                }\n            }\n        }\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the UI of the column pinning.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [columnPinningTitle]=\"'Column Hiding'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnPinningTitle = '';\n\n    /**\n     * Returns if the filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowFiltering;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get allowFiltering() {\n        return this._allowFiltering;\n    }\n\n    /**\n     * Sets if the filtering is enabled.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowFiltering]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set allowFiltering(value) {\n        if (this._allowFiltering !== value) {\n            this._allowFiltering = value;\n            if (this.calcHeight) {\n                this.calcHeight += value ? -FILTER_ROW_HEIGHT : FILTER_ROW_HEIGHT;\n            }\n            if (this._ngAfterViewInitPassed) {\n                if (this.maxLevelHeaderDepth) {\n                    this.theadRow.nativeElement.style.height = `${(this.maxLevelHeaderDepth + 1) * this.defaultRowHeight +\n                        (value && this.filterMode === FilterMode.quickFilter ? FILTER_ROW_HEIGHT : 0) + 1}px`;\n                }\n            }\n\n            this.filteringService.isFilterRowVisible = false;\n            this.filteringService.filteredColumn = null;\n\n            this.filteringService.registerSVGIcons();\n            if (this.gridAPI.grid) {\n                this.markForCheck();\n            }\n        }\n    }\n\n    /**\n     * Returns the filter mode.\n     * ```typescript\n     *  let filtering = this.grid.filterMode;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get filterMode() {\n        return this._filterMode;\n    }\n\n    /**\n     * Sets filter mode.\n     * By default it's set to FilterMode.quickFilter.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [filterMode]=\"'quickFilter'\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filterMode(value) {\n        this._filterMode = value;\n    }\n\n    /**\n     * Returns the summary position.\n     * ```typescript\n     *  let summaryPosition = this.grid.summaryPosition;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get summaryPosition() {\n        return this._summaryPosition;\n    }\n\n    /**\n     * Sets summary position.\n     * By default it is bottom.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryPosition=\"top\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set summaryPosition(value) {\n        this._summaryPosition = value;\n        if (this.gridAPI.grid) {\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * Returns the summary calculation mode.\n     * ```typescript\n     *  let summaryCalculationMode = this.grid.summaryCalculationMode;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get summaryCalculationMode() {\n        return this._summaryCalculationMode;\n    }\n\n    /**\n     * Sets summary calculation mode.\n     * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryCalculationMode=\"rootLevelOnly\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set summaryCalculationMode(value) {\n        this._summaryCalculationMode = value;\n        if (this.gridAPI.grid) {\n            this.summaryService.resetSummaryHeight();\n            this.endEdit(true);\n            this.calculateGridHeight();\n            this.cdr.markForCheck();\n        }\n    }\n\n    /**\n     * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onCellClick)=\"onCellClick($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClick(e){\n     *     alert(\"The cell has been clicked!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onSelection)=\"onCellSelect($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellSelect(e){\n     *     alert(\"The cell has been selected!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     *  Emitted when `IgxGridRowComponent` is selected.\n     * ```html\n     * <igx-grid #grid (onRowSelectionChange)=\"onRowClickChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClickChange(e){\n     *     alert(\"The selected row has been changed!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowSelectionChange = new EventEmitter<IRowSelectionEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is pinned.\n     * The index that the column is inserted at may be changed through the `insertAtIndex` property.\n     * ```typescript\n     * public columnPinning(event) {\n     *     if (event.column.field === \"Name\") {\n     *       event.insertAtIndex = 0;\n     *     }\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnPinning = new EventEmitter<IPinColumnEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent`\n     * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editCancel(event: IGridEditEventArgs){\n     *    const rowID: IgxColumnComponent = event.rowID;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editStart(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.\n     * Event is fired after editing is completed, when the cell is exiting edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editDone(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" a row enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editStart(event: IGridEditEventArgs) {\n     *          const editedRowObj = event.oldValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onRowEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing paging operation, column resizing, pinning, moving or hitting  `Done`\n     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     *\n     * ```typescript\n     *      editDone(event: IGridEditEventArgs) {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(false)` is called.\n     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button\n     * in the row editing overlay.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when a grid column is initialized. Returns the column object.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [onColumnInit]=\"initColumns($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * initColumns(event: IgxColumnComponent) {\n     * const column: IgxColumnComponent = event;\n     *       column.filterable = true;\n     *       column.sortable = true;\n     *       column.editable = true;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnInit = new EventEmitter<IgxColumnComponent>();\n\n    /**\n     * Emitted when sorting is performed through the UI. Returns the sorting expression.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onSortingDone)=\"sortingDone($event)\"></igx-grid>\n     * ```\n     * ```typescript\n     * sortingDone(event: SortingDirection){\n     *     const sortingDirection = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSortingDone = new EventEmitter<ISortingExpression | Array<ISortingExpression>>();\n\n    /**\n     * Emitted when filtering is performed through the UI.\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * ```typescript\n     * filteringDone(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     *}\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onFilteringDone)=\"filteringDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onFilteringDone = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted when paging is performed. Returns an object consisting of the previous and next pages.\n     * ```typescript\n     * pagingDone(event: IPageEventArgs){\n     *     const paging = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onPagingDone)=\"pagingDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onPagingDone = new EventEmitter<IPageEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.\n     * Returns the data for the new `IgxGridRowComponent` object.\n     * ```typescript\n     * rowAdded(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowAdded)=\"rowAdded($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowAdded = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.\n     * Returns an `IRowDataEventArgs` object.\n     * ```typescript\n     * rowDeleted(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowDeleted)=\"rowDeleted($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowDeleted = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     * ```typescript\n     *  <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is resized.\n     * Returns the `IgxColumnComponent` object's old and new width.\n     * ```typescript\n     * resizing(event: IColumnResizeEventArgs){\n     *     const grouping = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onColumnResized)=\"resizing($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnResized = new EventEmitter<IColumnResizeEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * contextMenu(event: IGridCellEventArgs){\n     *     const resizing = event;\n     *     console.log(resizing);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onContextMenu)=\"contextMenu($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onContextMenu = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * dblClick(event: IGridCellEventArgs){\n     *     const dblClick = event;\n     *     console.log(dblClick);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onDoubleClick)=\"dblClick($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDoubleClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }\n     * ```typescript\n     * visibilityChanged(event: IColumnVisibilityChangedEventArgs){\n     *    const visiblity = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnVisibilityChanged)=\"visibilityChanged($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.\n     * ```typescript\n     * movingStart(event: IColumnMovingStartEventArgs){\n     *     const movingStarts = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingStart)=\"movingStart($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingStart = new EventEmitter<IColumnMovingStartEventArgs>();\n\n    /**\n     * Emitted throughout the `IgxColumnComponent` moving operation.\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * ```typescript\n     * moving(event: IColumnMovingEventArgs){\n     *     const moving = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMoving)=\"moving($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMoving = new EventEmitter<IColumnMovingEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving ends.\n     * Returns the source and target `IgxColumnComponent` objects.\n     * ```typescript\n     * movingEnds(event: IColumnMovingEndEventArgs){\n     *     const movingEnds = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingEnd)=\"movingEnds($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingEnd = new EventEmitter<IColumnMovingEndEventArgs>();\n\n    /**\n     * @deprecated you should use onGridKeydown event\n     */\n    @Output()\n    @DeprecateProperty('onFocusChange event is deprecated. Use onGridKeydown event instead.')\n    public onFocusChange = new EventEmitter<IFocusChangeEventArgs>();\n\n    /**\n     * Emitted when keydown is triggered over element inside grid's body.\n     * This event is fired only if the key combination is supported in the grid.\n     * Return the target type, target object and the original event. This event is cancelable.\n     * ```typescript\n     * customKeydown(args: IGridKeydownEventArgs) {\n     *  const keydownEvent = args.event;\n     * }\n     * ```\n     * ```html\n     *  <igx-grid (onGridKeydown)=\"customKeydown($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onGridKeydown = new EventEmitter<IGridKeydownEventArgs>();\n\n     /**\n     * Emitted when start dragging a row.\n     * Return the dragged row.\n    */\n    @Output()\n    public onRowDragStart = new EventEmitter<IRowDragStartEventArgs>();\n\n    /**\n     * Emitted when dropping a row.\n     * Return the dropped row.\n    */\n    @Output()\n    public onRowDragEnd = new EventEmitter<IRowDragEndEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridColumnResizerComponent)\n    public resizeLine: IgxGridColumnResizerComponent;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: true })\n    public columnList: QueryList<IgxColumnComponent>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleSortingTemplateDirective, { read: IgxExcelStyleSortingTemplateDirective })\n    public excelStyleSortingTemplateDirective: IgxExcelStyleSortingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleMovingTemplateDirective, { read: IgxExcelStyleMovingTemplateDirective })\n    public excelStyleMovingTemplateDirective: IgxExcelStyleMovingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleHidingTemplateDirective, { read: IgxExcelStyleHidingTemplateDirective })\n    public excelStyleHidingTemplateDirective: IgxExcelStyleHidingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStylePinningTemplateDirective, { read: IgxExcelStylePinningTemplateDirective })\n    public excelStylePinningTemplateDirective: IgxExcelStylePinningTemplateDirective;\n\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxGridHeaderGroupComponent, { read: IgxGridHeaderGroupComponent })\n    public headerGroups: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * A list of all `IgxGridHeaderGroupComponent`.\n     * ```typescript\n     * const headerGroupsList = this.grid.headerGroupsList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerGroupsList(): IgxGridHeaderGroupComponent[] {\n        return this.headerGroups ? flatten(this.headerGroups.toArray()) : [];\n    }\n\n    /**\n     * A list of all `IgxGridHeaderComponent`.\n     * ```typescript\n     * const headers = this.grid.headerCellList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerCellList(): IgxGridHeaderComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.headerCell).filter((headerCell) => headerCell);\n    }\n\n    /**\n     * A list of all `IgxGridFilteringCellComponent`.\n     * ```typescript\n     * const filterCells = this.grid.filterCellList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get filterCellList(): IgxGridFilteringCellComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.filterCell).filter((filterCell) => filterCell);\n    }\n\n    @ViewChildren('row')\n    private _rowList: QueryList<IgxGridRowComponent>;\n\n    @ViewChildren('summaryRow', { read: IgxSummaryRowComponent })\n    protected _summaryRowList: QueryList<IgxSummaryRowComponent>;\n\n    public get summariesRowList() {\n        const res = new QueryList<any>();\n        if (!this._summaryRowList) {\n            return res;\n        }\n        const sumList = this._summaryRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(sumList);\n        return res;\n    }\n\n    /**\n     * A list of `IgxGridRowComponent`.\n     * ```typescript\n     * const rowList = this.grid.rowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get rowList() {\n        const res = new QueryList<any>();\n        if (!this._rowList) {\n            return res;\n        }\n        const rList = this._rowList\n            .filter((item) => {\n                return item.element.nativeElement.parentElement !== null;\n            })\n            .sort((a, b) => {\n                return a.index - b.index;\n            });\n        res.reset(rList);\n        return res;\n    }\n\n    @ViewChildren(IgxRowComponent, { read: IgxRowComponent })\n    private _dataRowList: QueryList<any>;\n\n    /**\n     * A list of `IgxGridRowComponent`, currently rendered.\n     * ```typescript\n     * const dataList = this.grid.dataRowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get dataRowList() {\n        const res = new QueryList<any>();\n        if (!this._dataRowList) {\n            return res;\n        }\n        const rList = this._dataRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        }).sort((a, b) => {\n            return a.index - b.index;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * A template reference for the template when the filtered `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('emptyFilteredGrid', { read: TemplateRef })\n    public emptyFilteredGridTemplate: TemplateRef<any>;\n\n    /**\n     * A template reference for the template when the `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('defaultEmptyGrid', { read: TemplateRef })\n    public emptyGridDefaultTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultLoadingGrid', { read: TemplateRef })\n    public loadingGridDefaultTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scrollContainer', { read: IgxGridForOfDirective })\n    public parentVirtDir: IgxGridForOfDirective<any>;\n\n    /**\n     * Returns the template which will be used by the toolbar to show custom content.\n     * ```typescript\n     * let customContentTemplate = this.grid.toolbarCustomContentTemplate;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    public get toolbarCustomContentTemplate(): IgxGridToolbarCustomContentDirective {\n        return this.toolbarCustomContentTemplates.first;\n    }\n\n    @ContentChildren(IgxGridToolbarCustomContentDirective, { read: IgxGridToolbarCustomContentDirective, descendants: false })\n    public toolbarCustomContentTemplates: QueryList<IgxGridToolbarCustomContentDirective>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollContainer', { read: IgxGridForOfDirective })\n    public verticalScrollContainer: IgxGridForOfDirective<any>;\n\n        /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollHolder', { read: IgxGridForOfDirective })\n    public verticalScroll: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scr', { read: ElementRef })\n    public scr: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('paginator', { read: ElementRef })\n    public paginator: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer', { read: IgxGridForOfDirective })\n    public headerContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerCheckboxContainer')\n    public headerCheckboxContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerDragContainer')\n    public headerDragContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerGroupContainer')\n    public headerGroupContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerCheckbox', { read: IgxCheckboxComponent })\n    public headerCheckbox: IgxCheckboxComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('filteringRow', { read: IgxGridFilteringRowComponent })\n    public filteringRow: IgxGridFilteringRowComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('theadRow')\n    public theadRow: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tbody')\n    public tbody: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tfoot')\n    public tfoot: ElementRef;\n\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective })\n    protected _outletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    public get outletDirective() {\n        return this._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective })\n    public rowEditingOutletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    public get rowOutletDirective() {\n        return this.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public get parentRowOutletDirective() {\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRowEditTemplate', { read: TemplateRef })\n    private defaultRowEditTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowEditTemplateDirective, { read: TemplateRef })\n    public rowEditCustom: TemplateRef<any>;\n\n    /** @hidden */\n    public get rowEditContainer(): TemplateRef<any> {\n        return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;\n    }\n    /** @hidden */\n    @ContentChild(IgxRowEditTextDirective, { read: TemplateRef })\n    public rowEditText: TemplateRef<any>;\n    /** @hidden */\n    @ContentChild(IgxRowEditActionsDirective, { read: TemplateRef })\n    public rowEditActions: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get rowInEditMode(): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        const editRowState = this.crudService.row;\n        return editRowState !== null ? this.rowList.find(e => e.rowID === editRowState.id) : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get firstEditableColumnIndex(): number {\n        const index = [...this.pinnedColumns, ...this.unpinnedColumns].filter(e => !e.columnGroup).findIndex(e => e.editable);\n        return index !== -1 ? index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get lastEditableColumnIndex(): number {\n        const orderedColumns = [...this.pinnedColumns, ...this.unpinnedColumns].filter(e => !e.columnGroup);\n        const index = orderedColumns.reverse().findIndex(e => e.editable);\n        return index !== -1 ? orderedColumns.length - 1 - index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsDEFAULT: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsCUSTOM: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     * TODO: Nav service logic doesn't handle 0 results from this querylist\n     */\n    public get rowEditTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective)\n    public rowEditingOverlay: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid');\n    }\n\n    get bannerClass(): string {\n        const position = this.rowEditPositioningStrategy.isTop ? 'igx-banner__border-top' : 'igx-banner__border-bottom';\n        return `${this.getComponentDensityClass('igx-banner')} ${position}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public hostRole = 'grid';\n\n    /**\n     * @hidden\n     */\n    get pipeTrigger(): number {\n        return this._pipeTrigger;\n    }\n\n    /**\n     * @hidden\n     */\n    get summaryPipeTrigger(): number {\n        return this._summaryPipeTrigger;\n    }\n\n    /**\n     * Returns the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * const sortingState = this.grid.sortingExpressions;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * Sets the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.sortingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Desc,\n     *     ignoreCase: true\n     * }];\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = cloneArray(value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns the state of the grid virtualization, including the start index and how many records are rendered.\n     * ```typescript\n     * const gridVirtState = this.grid1.virtualizationState;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get virtualizationState() {\n        return this.verticalScrollContainer.state;\n    }\n\n    /**\n     * @hidden\n     */\n    set virtualizationState(state) {\n        this.verticalScrollContainer.state = state;\n    }\n\n    /**\n     * Returns the total number of records in the data source.\n     * Works only with remote grid virtualization.\n     * ```typescript\n     * const itemCount = this.grid1.totalItemCount;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalItemCount() {\n        return this.verticalScrollContainer.totalItemCount;\n    }\n\n    /**\n     * Sets the total number of records in the data source.\n     * This property is required for virtualization to function when the grid is bound remotely.\n     * ```typescript\n     * this.grid1.totalItemCount = 55;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set totalItemCount(count) {\n        this.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.hasColumnLayouts ?\n                this.columnList.reduce((acc, col) => Math.max(acc, col.rowStart), 0) :\n                this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n    /**\n     * Returns the number of hidden `IgxColumnComponent`.\n     * ```typescript\n     * const hiddenCol = this.grid.hiddenColumnsCount;\n     * ``\n     */\n    get hiddenColumnsCount() {\n        return this.columnList.filter((col) => col.columnGroup === false && col.hidden === true).length;\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const hiddenColText = this.grid.hiddenColumnsText;\n     * ``\n     */\n    @WatchChanges()\n    @Input()\n    get hiddenColumnsText() {\n        return this._hiddenColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" [hiddenColumnsText]=\"'Hidden Columns'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set hiddenColumnsText(value) {\n        this._hiddenColumnsText = value;\n\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const pinnedText = this.grid.pinnedColumnsText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get pinnedColumnsText() {\n        return this._pinnedColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```html\n     * <igx-grid [pinnedColumnsText]=\"'PinnedCols Text\" [data]=\"data\" [width]=\"'100%'\" [height]=\"'500px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set pinnedColumnsText(value) {\n        this._pinnedColumnsText = value;\n    }\n\n    /**\n     * Get transactions service for the grid.\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        return this._transactions;\n    }\n\n    /**\n     * @hidden\n    */\n    public columnsWithNoSetWidths = null;\n\n    /* Toolbar related definitions */\n    private _showToolbar = false;\n    private _exportExcel = false;\n    private _exportCsv = false;\n    private _toolbarTitle: string = null;\n    private _exportText: string = null;\n    private _exportExcelText: string = null;\n    private _exportCsvText: string = null;\n    private _rowEditable = false;\n    private _currentRowState: any;\n    private _filteredSortedData = null;\n    /**\n     * @hidden\n    */\n    public get currentRowState(): any {\n        return this._currentRowState;\n    }\n\n    /**\n     * Provides access to the `IgxToolbarComponent`.\n     * ```typescript\n     * const gridToolbar = this.grid.toolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('toolbar', { read: IgxGridToolbarComponent })\n    public toolbar: IgxGridToolbarComponent = null;\n\n    @ViewChild('toolbar', { read: ElementRef })\n    private toolbarHtml: ElementRef = null;\n\n    /**\n     * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.\n     * ```typescript\n     * const toolbarGrid = this.grid.showToolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get showToolbar(): boolean {\n        return this._showToolbar;\n    }\n\n    /**\n     * Shows or hides the `IgxGridComponent`'s toolbar.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" ></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set showToolbar(newValue: boolean) {\n        if (this._showToolbar !== newValue) {\n            this._showToolbar = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the toolbar's title.\n     * ```typescript\n     * const toolbarTitle  = this.grid.toolbarTitle;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get toolbarTitle(): string {\n        return this._toolbarTitle;\n    }\n\n    /**\n     * Sets the toolbar's title.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [toolbarTitle]=\"'My Grid'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set toolbarTitle(newValue: string) {\n        if (this._toolbarTitle !== newValue) {\n            this._toolbarTitle = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to MS Excel is enabled or disabled.\n     * ```typescript\n     * cosnt excelExporter = this.grid.exportExcel;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcel(): boolean {\n        return this.getExportExcel();\n    }\n\n    /**\n     * Enable or disable the option for exporting to MS Excel.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcel(newValue: boolean) {\n        if (this._exportExcel !== newValue) {\n            this._exportExcel = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to CSV is enabled or disabled.\n     * ```typescript\n     * const exportCsv = this.grid.exportCsv;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsv(): boolean {\n        return this.getExportCsv();\n    }\n\n    /**\n     * Enable or disable the option for exporting to CSV.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsv(newValue: boolean) {\n        if (this._exportCsv !== newValue) {\n            this._exportCsv = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the main export button.\n     * ```typescript\n     * const exportText = this.grid.exportText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportText(): string {\n        return this._exportText;\n    }\n\n    /**\n     * Sets the textual content for the main export button.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportText(newValue: string) {\n        if (this._exportText !== newValue) {\n            this._exportText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the MS Excel export button.\n     * ```typescript\n     * const excelText = this.grid.exportExcelText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcelText(): string {\n        return this._exportExcelText;\n    }\n\n    /**\n     * Sets the textual content for the MS Excel export button.\n     * ```html\n     * <igx-grid [exportExcelText]=\"'My Excel Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcelText(newValue: string) {\n        if (this._exportExcelText !== newValue) {\n            this._exportExcelText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the CSV export button.\n     * ```typescript\n     * const csvText = this.grid.exportCsvText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsvText(): string {\n        return this._exportCsvText;\n    }\n\n    /**\n     * Sets the textual content for the CSV export button.\n     * ```html\n     * <igx-grid [exportCsvText]=\"'My Csv Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsvText(newValue: string) {\n        if (this._exportCsvText !== newValue) {\n            this._exportCsvText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public rowEditMessage;\n\n    /**\n     * Emitted when an export process is initiated by the user.\n     * ```typescript\n     * toolbarExporting(event: IGridToolbarExportEventArgs){\n     *     const toolbarExporting = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onToolbarExporting = new EventEmitter<IGridToolbarExportEventArgs>();\n\n    /* End of toolbar related definitions */\n\n    // TODO: Document\n    @Output()\n    onRangeSelection = new EventEmitter<GridSelectionRange>();\n\n    /**\n     * @hidden\n     */\n    public pagingState;\n    /**\n     * @hidden\n     */\n    public calcWidth: number;\n    /**\n     * @hidden\n     */\n    public calcHeight = 0;\n    /**\n     * @hidden\n     */\n    public tfootHeight: number;\n    /**\n     * @hidden\n     */\n    public chipsGoupingExpressions = [];\n    /**\n     * @hidden\n     */\n    public summariesHeight: number;\n\n    /**\n     * @hidden\n     */\n    public draggedColumn: IgxColumnComponent;\n\n    /**\n     * @hidden\n     */\n    public allRowsSelected = false;\n\n    /**\n     * @hidden\n     */\n    public disableTransitions = false;\n\n    /**\n     * @hidden\n     */\n    public lastSearchInfo: ISearchInfo = {\n        searchText: '',\n        caseSensitive: false,\n        exactMatch: false,\n        activeMatchIndex: 0,\n        matchInfoCache: []\n    };\n\n    /**\n     * @hidden\n     */\n    public columnWidthSetByUser = false;\n\n    abstract data: any[];\n    abstract filteredData: any[];\n    // abstract dataLength;\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    /**\n     * @hidden\n     */\n    protected _perPage = 15;\n    /**\n     * @hidden\n     */\n    protected _page = 0;\n    /**\n     * @hidden\n     */\n    protected _paging = false;\n    /**\n     * @hidden\n     */\n    protected _rowSelection = false;\n    /**\n     * @hidden\n     */\n    protected _rowDrag = false;\n    /**\n     * @hidden\n     */\n    protected _pipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _summaryPipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _columns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _pinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _unpinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _filteringExpressionsTree: IFilteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions: Array<ISortingExpression> = [];\n    /**\n     * @hidden\n     */\n    protected _maxLevelHeaderDepth = null;\n    /**\n     * @hidden\n     */\n    protected _columnHiding = false;\n    /**\n     * @hidden\n     */\n    protected _columnPinning = false;\n    /**\n     * @hidden\n     */\n    protected _keydownListener = null;\n    /**\n     * @hidden\n     */\n    protected _vScrollListener = null;\n    /**\n     * @hidden\n     */\n    protected _hScrollListener = null;\n    /**\n     * @hidden\n     */\n    protected _wheelListener = null;\n    protected _allowFiltering = false;\n    protected _filterMode = FilterMode.quickFilter;\n    private resizeHandler;\n    private columnListDiffer;\n    private _hiddenColumnsText = '';\n    private _pinnedColumnsText = '';\n    private _height = '100%';\n    private _width = '100%';\n    private _rowHeight;\n    protected _ngAfterViewInitPassed = false;\n    private _horizontalForOfs;\n    private _multiRowLayoutRowSize = 1;\n\n    // Caches\n    private _totalWidth = NaN;\n    private _pinnedVisible = [];\n    private _unpinnedVisible = [];\n    private _pinnedWidth = NaN;\n    private _unpinnedWidth = NaN;\n    private _visibleColumns = [];\n    private _columnGroups = false;\n\n    private _columnWidth: string;\n\n    private _defaultTargetRecordNumber = 10;\n\n    private _summaryPosition = GridSummaryPosition.bottom;\n    private _summaryCalculationMode = GridSummaryCalculationMode.rootAndChildLevels;\n\n    private rowEditPositioningStrategy = new ContainerPositioningStrategy({\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom,\n        closeAnimation: null\n    });\n\n    private rowEditSettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        outlet: this.rowOutletDirective,\n        positionStrategy: this.rowEditPositioningStrategy\n    };\n\n    private verticalScrollHandler(event) {\n        this.verticalScrollContainer.onScroll(event);\n        if (isEdge()) { this.wheelHandler(false); }\n        this.disableTransitions = true;\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.verticalScrollContainer.onChunkLoad.emit(this.verticalScrollContainer.state);\n            });\n\n            if (this.rowEditable) {\n                this.changeRowEditingOverlayStateOnScroll(this.rowInEditMode);\n            }\n            this.disableTransitions = false;\n        });\n\n        this.hideOverlays();\n    }\n\n    private horizontalScrollHandler(event) {\n        const scrollLeft = event.target.scrollLeft;\n        if (isEdge()) { this.wheelHandler(true); }\n        this.headerContainer.onHScroll(scrollLeft);\n        this._horizontalForOfs.forEach(vfor => vfor.onHScroll(scrollLeft));\n        this.cdr.markForCheck();\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.parentVirtDir.onChunkLoad.emit(this.headerContainer.state);\n            });\n        });\n\n        this.hideOverlays();\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public hideOverlays() {\n        this.overlayIDs.forEach(overlayID => {\n            this.overlayService.hide(overlayID);\n            this.overlayService.onClosed.pipe(\n                filter(o => o.id === overlayID),\n                takeUntil(this.destroy$)).subscribe(() => {\n                    this.nativeElement.focus();\n                });\n        });\n    }\n\n    private keydownHandler(event) {\n        const key = event.key.toLowerCase();\n        if ((isNavigationKey(key) && event.keyCode !== 32) || key === 'tab' || key === 'pagedown' || key === 'pageup') {\n            event.preventDefault();\n            if (key === 'pagedown') {\n                this.verticalScrollContainer.scrollNextPage();\n                this.nativeElement.focus();\n            } else if (key === 'pageup') {\n                this.verticalScrollContainer.scrollPrevPage();\n                this.nativeElement.focus();\n            }\n        }\n    }\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        public crudService: IgxGridCRUDService,\n        private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) protected _transactions: TransactionService<Transaction, State>,\n        private elementRef: ElementRef,\n        private zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        public cdr: ChangeDetectorRef,\n        protected resolver: ComponentFactoryResolver,\n        protected differs: IterableDiffers,\n        protected viewRef: ViewContainerRef,\n        public navigation: IgxGridNavigationService,\n        public filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n        this.resizeHandler = () => {\n            this.zone.run(() => this.calculateGridSizes());\n        };\n    }\n\n    _setupServices() {\n        this.gridAPI.grid = this;\n        this.crudService.grid = this;\n        this.navigation.grid = this;\n        this.filteringService.grid = this;\n        this.summaryService.grid = this;\n    }\n\n    _setupListeners() {\n        const destructor = takeUntil(this.destroy$);\n\n        this.onRowAdded.pipe(destructor).subscribe(args => this.refreshGridState(args));\n        this.onRowDeleted.pipe(destructor).subscribe(args => {\n            this.summaryService.deleteOperation = true;\n            this.summaryService.clearSummaryCache(args);\n        });\n        this.transactions.onStateUpdate.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.summaryService.clearSummaryCache();\n            this._pipeTrigger++;\n            this.markForCheck();\n            if (this.transactions.getAggregatedChanges(false).length === 0) {\n                // Needs better check, calling 'transactions.clear()' will also trigger this\n                if (this.gridAPI.atInexistingPage()) {\n                    this.page--;\n                }\n            }\n        });\n\n        this.onPagingDone.pipe(destructor).subscribe(() => {\n            this.endEdit(true);\n            this.selectionService.clear();\n            this.selectionService.activeElement = null;\n        });\n\n        this.onColumnMoving.pipe(destructor).subscribe(() => this.endEdit(true));\n        this.onColumnResized.pipe(destructor).subscribe(() => this.endEdit(true));\n\n        this.overlayService.onOpened.pipe(takeUntil(this.destroy$)).subscribe((event) => {\n            if (this.overlayService.getOverlayById(event.id).settings.outlet === this.outletDirective &&\n                this.overlayIDs.indexOf(event.id) < 0) {\n                this.overlayIDs.push(event.id);\n            }\n        });\n        this.overlayService.onClosed.pipe(takeUntil(this.destroy$)).subscribe((event) => {\n            const ind = this.overlayIDs.indexOf(event.id);\n            if (ind !== -1) {\n                this.overlayIDs.splice(ind, 1);\n            }\n        });\n    }\n\n    // TODO: Refactor\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._setupServices();\n        this._setupListeners();\n        this.columnListDiffer = this.differs.find([]).create(null);\n        this.calcWidth = this._width && this._width.indexOf('%') === -1 ? parseInt(this._width, 10) : 0;\n        this.shouldGenerate = this.autoGenerate;\n        this._scrollWidth = this.getScrollWidth();\n    }\n\n    protected setupColumns() {\n        if (this.autoGenerate) {\n            this.autogenerateColumns();\n        }\n\n        this.initColumns(this.columnList, (col: IgxColumnComponent) => this.onColumnInit.emit(col));\n\n        this.columnListDiffer.diff(this.columnList);\n        this.markForCheck();\n        this.resetCaches();\n        this._derivePossibleHeight();\n\n        this.columnList.changes\n        .pipe(takeUntil(this.destroy$))\n        .subscribe((change: QueryList<IgxColumnComponent>) => { this.onColumnsChanged(change); });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnsVisibleIndexCache() {\n        this.columnList.forEach(column => column.resetVisibleIndex());\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetForOfCache() {\n        const firstVirtRow = this.dataRowList.first;\n        if (firstVirtRow) {\n            firstVirtRow.virtDirRow.assumeMaster();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnCollections() {\n        this._visibleColumns.length = 0;\n        this._pinnedVisible.length = 0;\n        this._unpinnedVisible.length = 0;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCachedWidths() {\n        this._unpinnedWidth = NaN;\n        this._pinnedWidth = NaN;\n        this._totalWidth = NaN;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this.resetForOfCache();\n        this.resetColumnsVisibleIndexCache();\n        this.resetColumnCollections();\n        this.resetCachedWidths();\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.setupColumns();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.zone.runOutsideAngular(() => {\n            this.document.defaultView.addEventListener('resize', this.resizeHandler);\n            this._keydownListener = this.keydownHandler.bind(this);\n            this.nativeElement.addEventListener('keydown', this._keydownListener);\n        });\n        this.initPinning();\n\n        this.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            requestAnimationFrame(() => {\n                this.summaryService.summaryHeight = 0;\n                this.reflow();\n                this.verticalScrollContainer.recalcUpdateSizes();\n            });\n        });\n        this._ngAfterViewInitPassed = true;\n        this.calculateGridSizes();\n\n        // In some rare cases we get the AfterViewInit before the grid is added to the DOM\n        // and as a result we get 0 width and can't size ourselves properly.\n        // In order to prevent that add a mutation observer that watches if we have been added.\n        if (!this.isAttachedToDom) {\n            const config = { childList: true, subtree: true };\n            const callback = (mutationsList) => {\n                const childListHasChanged = mutationsList.filter((mutation) => {\n                    return mutation.type === 'childList';\n                }).length > 0;\n                if (childListHasChanged && this.isAttachedToDom) {\n                    this.reflow();\n                    this._observer.disconnect();\n                    this._observer = null;\n                }\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.document.body, config);\n        }\n\n        this._dataRowList.changes.pipe(takeUntil(this.destroy$)).subscribe(list =>\n            this._horizontalForOfs = this.combineForOfCollections(list.toArray()\n                .filter(item => item.element.nativeElement.parentElement !== null), this._summaryRowList)\n        );\n        this._summaryRowList.changes.pipe(takeUntil(this.destroy$)).subscribe(summaryList =>\n            this._horizontalForOfs - this.combineForOfCollections(this._dataRowList, summaryList.toArray()\n                .filter(item => item.element.nativeElement.parentElement !== null)));\n\n        this.zone.runOutsideAngular(() => {\n            this._vScrollListener = this.verticalScrollHandler.bind(this);\n            this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', this._vScrollListener);\n        });\n\n        this.zone.runOutsideAngular(() => {\n            this._hScrollListener = this.horizontalScrollHandler.bind(this);\n            this.parentVirtDir.getHorizontalScroll().addEventListener('scroll', this._hScrollListener);\n        });\n        this._horizontalForOfs = this.combineForOfCollections(this._dataRowList, this._summaryRowList);\n        const vertScrDC = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n        vertScrDC.addEventListener('scroll', (evt) => { this.scrollHandler(evt); });\n        vertScrDC.addEventListener('wheel', () => { this.wheelHandler(); });\n\n        this.verticalScrollContainer.onDataChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            requestAnimationFrame(() => {\n                if (!this._destroyed) {\n                    this.reflow();\n                }\n            });\n        });\n    }\n\n    private combineForOfCollections(dataList, summaryList) {\n        return dataList.map(row => row.virtDirRow).concat(summaryList.map(row => row.virtDirRow));\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.document.defaultView.removeEventListener('resize', this.resizeHandler);\n            this.nativeElement.removeEventListener('keydown', this._keydownListener);\n            this.verticalScrollContainer.getVerticalScroll().removeEventListener('scroll', this._vScrollListener);\n            this.parentVirtDir.getHorizontalScroll().removeEventListener('scroll', this._hScrollListener);\n            const vertScrDC = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n            vertScrDC.removeEventListener('scroll', (evt) => { this.scrollHandler(evt); });\n            vertScrDC.removeEventListener('wheel', () => { this.wheelHandler(); });\n        });\n        if (this._observer) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * Toggles the specified column's visibility.\n     * ```typescript\n     * this.grid1.toggleColumnVisibility({\n     *       column: this.grid1.columns[0],\n     *       newValue: true\n     * });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public toggleColumnVisibility(args: IColumnVisibilityChangedEventArgs) {\n        const col = args.column ? this.columnList.find((c) => c === args.column) : undefined;\n\n        if (!col) {\n            return;\n        }\n\n        col.hidden = args.newValue;\n        this.onColumnVisibilityChanged.emit(args);\n\n        this.markForCheck();\n    }\n\n    /**\n     * Returns the native element of the `IgxGridComponent`.\n     * ```typescript\n     * const nativeEl = this.grid.nativeElement.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.outletDirective;\n    }\n\n    /**\n     * Returns the `IgxGridComponent`'s rows height.\n     * ```typescript\n     * const rowHeigh = this.grid.defaultRowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultRowHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 40;\n            case DisplayDensity.compact:\n                return 32;\n            default:\n                return 50;\n        }\n    }\n\n    get defaultSummaryHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 30;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 36;\n        }\n    }\n\n    /**\n     * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.\n     * Used internally for restricting header group component width.\n     * The values below depend on the header cell default right/left padding values.\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultHeaderGroupMinWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 32;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 48;\n        }\n    }\n\n    /**\n     * Returns the maximum width of the container for the pinned `IgxColumnComponent`s.\n     * The width is 80% of the total grid width.\n     * ```typescript\n     * const maxPinnedColWidth = this.grid.calcPinnedContainerMaxWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get calcPinnedContainerMaxWidth(): number {\n        return (this.calcWidth * 80) / 100;\n    }\n\n    /**\n     * Returns the minimum width of the container for the unpinned `IgxColumnComponent`s.\n     * The width is 20% of the total grid width.\n     * ```typescript\n     * const minUnpinnedColWidth = this.grid.unpinnedAreaMinWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedAreaMinWidth(): number {\n        return (this.calcWidth * 20) / 100;\n    }\n\n    /**\n     * Returns the current width of the container for the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedWidth() {\n        if (!isNaN(this._pinnedWidth)) { return this._pinnedWidth; }\n        this._pinnedWidth = this.getPinnedWidth();\n        return this._pinnedWidth;\n    }\n\n    /**\n     * Returns the current width of the container for the unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedWidth = this.grid.getUnpinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedWidth() {\n        if (!isNaN(this._unpinnedWidth)) { return this._unpinnedWidth; }\n        this._unpinnedWidth = this.getUnpinnedWidth();\n        return this._unpinnedWidth;\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Update for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public get featureColumnsWidth() {\n        return this.getFeatureColumnsWidth();\n    }\n\n    /**\n     * @hidden\n     */\n    get summariesMargin() {\n        return this.rowSelectable || this.rowDraggable ? this.featureColumnsWidth : 0;\n    }\n\n    /**\n     * Returns an array of `IgxColumnComponent`s.\n     * ```typescript\n     * const colums = this.grid.columns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get columns(): IgxColumnComponent[] {\n        return this._columns;\n    }\n\n    /**\n     * Returns an array of the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedColumns = this.grid.pinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        if (this._pinnedVisible.length) {\n            return this._pinnedVisible;\n        }\n        this._pinnedVisible = this._pinnedColumns.filter(col => !col.hidden);\n        return this._pinnedVisible;\n    }\n\n    /**\n     * Returns an array of unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedColumns = this.grid.unpinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        if (this._unpinnedVisible.length) {\n            return this._unpinnedVisible;\n        }\n        this._unpinnedVisible = this._unpinnedColumns.filter((col) => !col.hidden);\n        return this._unpinnedVisible;\n    }\n\n    /**\n     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.\n\t * @memberof IgxGridBaseComponent\n     */\n    public getHeaderGroupWidth(column: IgxColumnComponent): string {\n        if (this.hasColumnLayouts) {\n            return '';\n        }\n        const colWidth = column.width;\n        const minWidth = this.defaultHeaderGroupMinWidth;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (!isPercentageWidth && parseInt(column.width, 10) < minWidth) {\n            return minWidth.toString();\n        }\n\n        return column.width;\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by field name.\n     * ```typescript\n     * const myCol = this.grid1.getColumnByName(\"ID\");\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public getColumnByName(name: string): IgxColumnComponent {\n        return this.columnList.find((col) => col.field === name);\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by index.\n     * ```typescript\n     * const myRow = this.grid1.getRowByIndex(1);\n     * ```\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByIndex(index: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.gridAPI.get_row_by_index(index);\n    }\n\n    /**\n     * Returns `IgxGridRowComponent` object by the specified primary key .\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * const myRow = this.grid1.getRowByKey(\"cell5\");\n     * ```\n     * @param keyValue\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByKey(keyValue: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.gridAPI.get_row_by_key(keyValue);\n    }\n\n    /**\n     * Returns an array of visible `IgxColumnComponent`s.\n     * ```typescript\n     * const visibleColumns = this.grid.visibleColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get visibleColumns(): IgxColumnComponent[] {\n        if (this._visibleColumns.length) {\n            return this._visibleColumns;\n        }\n        this._visibleColumns = this.columnList.filter(c => !c.hidden);\n        return this._visibleColumns;\n    }\n\n    /**\n     * Returns the `IgxGridCellComponent` that matches the conditions.\n     * ```typescript\n     * const myCell = this.grid1.getCellByColumn(2,\"UnitPrice\");\n     * ```\n     * @param rowIndex\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByColumn(rowIndex: number, columnField: string): IgxGridCellComponent {\n        const columnId = this.columnList.map((column) => column.field).indexOf(columnField);\n        if (columnId !== -1) {\n            return this.gridAPI.get_cell_by_index(rowIndex, columnId);\n        }\n    }\n\n    /**\n     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.\n     * Requires that the primaryKey property is set.\n     * ```typescript\n     * grid.getCellByKey(1, 'index');\n     * ```\n     * @param rowSelector match any rowID\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByKey(rowSelector: any, columnField: string): IgxGridCellComponent {\n        return this.gridAPI.get_cell_by_key(rowSelector, columnField);\n    }\n\n    /**\n     * Returns the total number of pages.\n     * ```typescript\n     * const totalPages = this.grid.totalPages;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalPages(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countPages;\n        }\n        return -1;\n    }\n\n    /**\n     * Returns the total number of records.\n     * Only functions when paging is enabled.\n     * ```typescript\n     * const totalRecords = this.grid.totalRecords;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalRecords(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countRecords;\n        }\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const firstPage = this.grid.isFirstPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.grid.isLastPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns the total width of the `IgxGridComponent`.\n     * ```typescript\n     * const gridWidth = this.grid.totalWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalWidth(): number {\n        if (!isNaN(this._totalWidth)) { return this._totalWidth; }\n        // Take only top level columns\n        const cols = this.visibleColumns.filter(col => col.level === 0 && !col.pinned);\n        let totalWidth = 0;\n        let i = 0;\n        for (i; i < cols.length; i++) {\n            totalWidth += parseInt(cols[i].calcWidth, 10) || 0;\n        }\n        this._totalWidth = totalWidth;\n        return totalWidth;\n    }\n\n    get showRowCheckboxes(): boolean {\n        return this.rowSelectable && this.columns.length > this.hiddenColumnsCount;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveColumns(from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const list = this.columnList.toArray();\n        const fromIndex = list.indexOf(from);\n        let toIndex = list.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n            if (toIndex < 0) {\n                toIndex = 0;\n            }\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        list.splice(toIndex, 0, ...list.splice(fromIndex, 1));\n        const newList = this._resetColumnList(list);\n        this.columnList.reset(newList);\n        this.columnList.notifyOnChanges();\n        this._columns = this.columnList.toArray();\n    }\n\n    /**\n     * @hidden\n     */\n    protected _resetColumnList(list?) {\n        if (!list) {\n            list = this.columnList.toArray();\n        }\n        let newList = [];\n        list.filter(c => c.level === 0).forEach(p => {\n            newList.push(p);\n            if (p.columnGroup) {\n                newList = newList.concat(p.allChildren);\n            }\n        });\n        return newList;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _reorderPinnedColumns(from: IgxColumnComponent, to: IgxColumnComponent, position: DropPosition) {\n        const pinned = this._pinnedColumns;\n        let dropIndex = pinned.indexOf(to);\n\n        if (to.columnGroup) {\n            dropIndex += to.allChildren.length;\n        }\n\n        if (position === DropPosition.BeforeDropTarget) {\n            dropIndex--;\n        }\n\n        if (position === DropPosition.AfterDropTarget) {\n            dropIndex++;\n        }\n\n        pinned.splice(dropIndex, 0, ...pinned.splice(pinned.indexOf(from), 1));\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveChildColumns(parent: IgxColumnComponent, from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const buffer = parent.children.toArray();\n        const fromIndex = buffer.indexOf(from);\n        let toIndex = buffer.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        buffer.splice(toIndex, 0, ...buffer.splice(fromIndex, 1));\n        parent.children.reset(buffer);\n    }\n    /**\n     * Moves a column to the specified drop target.\n     * ```typescript\n     * grid.moveColumn(compName, persDetails);\n     * ```\n\t  * @memberof IgxGridBaseComponent\n\t  */\n    public moveColumn(column: IgxColumnComponent, dropTarget: IgxColumnComponent, pos: DropPosition = DropPosition.None) {\n\n        let position = pos;\n        const fromIndex = column.visibleIndex;\n        const toIndex = dropTarget.visibleIndex;\n\n        if (pos === DropPosition.BeforeDropTarget && fromIndex < toIndex) {\n            position = DropPosition.BeforeDropTarget;\n        } else if (pos === DropPosition.AfterDropTarget && fromIndex > toIndex) {\n            position = DropPosition.AfterDropTarget;\n        } else {\n            position = DropPosition.None;\n        }\n\n\n        if ((column.level !== dropTarget.level) ||\n            (column.topLevelParent !== dropTarget.topLevelParent)) {\n            return;\n        }\n\n        this.endEdit(true);\n        if (column.level) {\n            this._moveChildColumns(column.parent, column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && column.pinned) {\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && !column.pinned) {\n            column.pin();\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (!dropTarget.pinned && column.pinned) {\n            column.unpin();\n\n            const list = this.columnList.toArray();\n            const fi = list.indexOf(column);\n            const ti = list.indexOf(dropTarget);\n\n            if (pos === DropPosition.BeforeDropTarget && fi < ti) {\n                position = DropPosition.BeforeDropTarget;\n            } else if (pos === DropPosition.AfterDropTarget && fi > ti) {\n                position = DropPosition.AfterDropTarget;\n            } else {\n                position = DropPosition.None;\n            }\n        }\n\n        this._moveColumns(column, dropTarget, position);\n        this.cdr.detectChanges();\n\n        const args = {\n            source: column,\n            target: dropTarget\n        };\n\n        this.onColumnMovingEnd.emit(args);\n    }\n\n    /**\n     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.\n     * ```typescript\n     * this.grid1.nextPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n\n    /**\n     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.\n     * ```typescript\n     * this.grid1.previousPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.grid1.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxGridBaseComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.page = val;\n    }\n\n    /**\n     * Manually marks the `IgxGridComponent` for change detection.\n     * ```typescript\n     * this.grid1.markForCheck();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public markForCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid1.addRow(record);\n     * ```\n     * @param data\n     * @memberof IgxGridBaseComponent\n     */\n    public addRow(data: any): void {\n        this.gridAPI.addRowToData(data);\n\n        this.onRowAdded.emit({ data });\n        this._pipeTrigger++;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * The method accept rowSelector as a parameter, which is the rowID.\n     * ```typescript\n     * this.grid1.deleteRow(0);\n     * ```\n     * @param rowSelector\n     * @memberof IgxGridBaseComponent\n     */\n    public deleteRow(rowSelector: any): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            this.deleteRowById(rowSelector);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        this.gridAPI.deleteRowById(rowId);\n    }\n\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        if (index !== -1) {\n            if (this.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                this.transactions.add(transaction, this.data[index]);\n            } else {\n                this.data.splice(index, 1);\n            }\n        } else {\n            const state: State = this.transactions.getState(rowID);\n            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');\n     * ```\n     * @param value the new value which is to be set.\n     * @param rowSelector corresponds to rowID.\n     * @param column corresponds to column field.\n     * @memberof IgxGridBaseComponent\n     */\n    public updateCell(value: any, rowSelector: any, column: string): void {\n        if (this.isDefined(this.primaryKey)) {\n            const col = this.columnList.toArray().find(c => c.field === column);\n            if (col) {\n                // Simplify\n                const rowData = this.gridAPI.getRowData(rowSelector);\n                const index = this.gridAPI.get_row_index_in_data(rowSelector);\n                // If row passed is invalid\n                if (index < 0) {\n                    return;\n                }\n                const id = {\n                    rowID: rowSelector,\n                    columnID: col.index,\n                    rowIndex: index\n                };\n\n                const cell = new IgxCell(id, index, col, rowData[col.field], rowData[col.field], rowData);\n                const args = this.gridAPI.update_cell(cell, value);\n\n                if (this.crudService.cell && this.crudService.sameCell(cell)) {\n                    if (args.cancel) {\n                        return;\n                    }\n                    this.gridAPI.escape_editMode();\n                }\n\n                this.cdr.markForCheck();\n            }\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent`, which is specified by\n     * rowSelector parameter and the data source record with the passed value.\n     * This method will apply requested update only if primary key is specified in the grid.\n     * ```typescript\n     * grid.updateRow({\n     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')\n     *   }, 1);\n     * ```\n     * @param value\n     * @param rowSelector correspond to rowID\n     * @memberof IgxGridBaseComponent\n     */\n    public updateRow(value: any, rowSelector: any): void {\n        if (this.isDefined(this.primaryKey)) {\n            const editableCell = this.crudService.cell;\n            if (editableCell && editableCell.id.rowID === rowSelector) {\n                this.gridAPI.escape_editMode();\n            }\n            const row = new IgxRow(rowSelector, -1, this.gridAPI.getRowData(rowSelector));\n            this.gridAPI.update_row(row, value);\n            this.cdr.markForCheck();\n        }\n    }\n\n    /**\n     * Sort a single `IgxColumnComponent`.\n     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.\n     * ```typescript\n     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public sort(expression: ISortingExpression | Array<ISortingExpression>): void {\n        this.endEdit(false);\n        if (expression instanceof Array) {\n            this.gridAPI.sort_multiple(expression);\n        } else {\n            this.gridAPI.sort(expression);\n        }\n        this.onSortingDone.emit(expression);\n    }\n\n    /**\n     * Filters a single `IgxColumnComponent`.\n     * ```typescript\n     * public filter(term) {\n     *      this.grid.filter(\"ProductName\", term, IgxStringFilteringOperand.instance().condition(\"contains\"));\n     * }\n     * ```\n     * @param name\n     * @param value\n     * @param conditionOrExpressionTree\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filter(name: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        this.filteringService.filter(name, value, conditionOrExpressionTree, ignoreCase);\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     * ```typescript\n     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));\n     * ```\n     * @param value\n     * @param condition\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filterGlobal(value: any, condition?, ignoreCase?) {\n        this.filteringService.filterGlobal(value, condition, ignoreCase);\n    }\n\n    /**\n     * Enables summaries for the specified column and applies your customSummary.\n     * If you do not provide the customSummary, then the default summary for the column data type will be applied.\n     * ```typescript\n     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);\n     * ```\n     * Enable summaries for the listed columns.\n     * ```typescript\n     * grid.enableSummaries('ProductName');\n     * ```\n     * @param rest\n     * @memberof IgxGridBaseComponent\n     */\n    public enableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._multipleSummaries(rest[0], true);\n        } else {\n            this._summaries(rest[0], true, rest[1]);\n        }\n        this.calculateGridHeight();\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Disable summaries for the specified column.\n     * ```typescript\n     * grid.disableSummaries('ProductName');\n     * ```\n     *\n     * Disable summaries for the listed columns.\n     * ```typescript\n     * grid.disableSummaries([{ fieldName: 'ProductName' }]);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public disableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._disableMultipleSummaries(rest[0]);\n        } else {\n            this._summaries(rest[0], false);\n        }\n    }\n\n    /**\n     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the filtering state of all `IgxColumnComponent`s.\n     * ```typescript\n     * this.grid.clearFilter();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearFilter(name?: string) {\n        this.filteringService.clearFilter(name);\n    }\n\n    /**\n     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the sorting state of all `IgxColumnComponent`.\n     * ```typescript\n     * this.grid.clearSort();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearSort(name?: string) {\n        if (!name) {\n            this.sortingExpressions = [];\n            return;\n        }\n        if (!this.gridAPI.get_column_by_name(name)) {\n            return;\n        }\n        this.gridAPI.clear_sort(name);\n    }\n\n    /**\n     * @hidden\n     */\n    @DeprecateMethod('There is no need to call clearSummaryCache method.The summary cache is cleared automatically when needed.')\n    public clearSummaryCache(args?) {\n    }\n\n    /**\n     * @hidden\n     */\n    public refreshGridState(args?) {\n        this.endEdit(true);\n        this.summaryService.clearSummaryCache(args);\n    }\n\n    // TODO: We have return values here. Move them to event args ??\n\n    /**\n     * Pins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public pinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.pin(index);\n    }\n\n    /**\n     * Unpins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public unpinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.unpin(index);\n    }\n\n\n    /**\n     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.\n     * ```typescript\n     * this.grid.reflow();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public reflow() {\n        this.calculateGridSizes();\n    }\n\n    /**\n     * @hidden\n     */\n    @DeprecateMethod('There is no need to call recalculateSummaries method. The summaries are recalculated automatically when needed.')\n    public recalculateSummaries() {\n    }\n\n    /**\n     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findNext(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, 1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findPrev(\"financial\");\n     * ````\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, -1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Reapplies the existing search.\n     * Returns how many times the grid contains the last search.\n     * ```typescript\n     * this.grid.refreshSearch();\n     * ```\n     * @param updateActiveInfo\n     * @memberof IgxGridBaseComponent\n     */\n    public refreshSearch(updateActiveInfo?: boolean): number {\n        if (this.lastSearchInfo.searchText) {\n            this.rebuildMatchCache();\n\n            if (updateActiveInfo) {\n                const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n                this.lastSearchInfo.matchInfoCache.forEach((match, i) => {\n                    if (match.column === activeInfo.column &&\n                        match.row === activeInfo.row &&\n                        match.index === activeInfo.index) {\n                        this.lastSearchInfo.activeMatchIndex = i;\n                    }\n                });\n            }\n\n            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Removes all the highlights in the cell.\n     * ```typescript\n     * this.grid.clearSearch();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public clearSearch() {\n        this.lastSearchInfo = {\n            searchText: '',\n            caseSensitive: false,\n            exactMatch: false,\n            activeMatchIndex: 0,\n            matchInfoCache: []\n        };\n\n        this.rowList.forEach((row) => {\n            if (row.cells) {\n                row.cells.forEach((c) => {\n                    c.clearHighlight();\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has sortable columns.\n     * ```typescript\n     * const sortableGrid = this.grid.hasSortableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSortableColumns(): boolean {\n        return this.columnList.some((col) => col.sortable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has editable columns.\n     * ```typescript\n     * const editableGrid = this.grid.hasEditableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasEditableColumns(): boolean {\n        return this.columnList.some((col) => col.editable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has fiterable columns.\n     * ```typescript\n     * const filterableGrid = this.grid.hasFilterableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasFilterableColumns(): boolean {\n        return this.columnList.some((col) => col.filterable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has summarized columns.\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSummarizedColumns(): boolean {\n        return this.summaryService.hasSummarizedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get rootSummariesEnabled(): boolean {\n        return this.summaryCalculationMode !== GridSummaryCalculationMode.childLevelsOnly;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has moveable columns.\n     * ```typescript\n     * const movableGrid = this.grid.hasMovableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasMovableColumns(): boolean {\n        return this.columnList && this.columnList.some((col) => col.movable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has column groups.\n     * ```typescript\n     * const groupGrid = this.grid.hasColumnGroups;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasColumnGroups(): boolean {\n        return this._columnGroups;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.\n     * ```typescript\n     * const layoutGrid = this.grid.hasColumnLayouts;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get hasColumnLayouts() {\n        return !!this.columnList.some(col => col.columnLayout);\n    }\n\n    /**\n     * Returns an array of the selected `IgxGridCellComponent`s.\n     * ```typescript\n     * const selectedCells = this.grid.selectedCells;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get selectedCells(): IgxGridCellComponent[] | any[] {\n        if (this.dataRowList) {\n            return this.dataRowList.map((row) => row.cells.filter((cell) => cell.selected))\n                .reduce((a, b) => a.concat(b), []);\n        }\n        return [];\n    }\n\n    /**\n     * @hidden\n     */\n    get multiRowLayoutRowSize() {\n        return this._multiRowLayoutRowSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get rowBasedHeight() {\n        return this.dataLength * this.rowHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isPercentWidth() {\n        return this._width && this._width.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isPercentHeight() {\n        return this._height && this._height.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden\n     * Sets this._height\n     */\n    protected _derivePossibleHeight() {\n        if (!this.isPercentHeight || !this._height || !this.isAttachedToDom || this.rowBasedHeight === 0) {\n            return;\n        }\n        if (!this.nativeElement.parentNode || !this.nativeElement.parentNode.clientHeight) {\n            const viewPortHeight = document.documentElement.clientHeight;\n            this._height = this.rowBasedHeight <= viewPortHeight ? null : viewPortHeight.toString();\n        } else {\n            const parentHeight = this.nativeElement.parentNode.getBoundingClientRect().height;\n            this._height = this.rowBasedHeight <= parentHeight ? null : this._height;\n        }\n    }\n\n    /**\n     * @hidden\n     * Sets columns defaultWidth property\n     */\n    protected _derivePossibleWidth() {\n        if (!this.columnWidthSetByUser) {\n            this._columnWidth = this.getPossibleColumnWidth();\n            this.columnList.forEach((column: IgxColumnComponent) => {\n                if (this.hasColumnLayouts && parseInt(this._columnWidth, 10)) {\n                    const columnWidthCombined = parseInt(this._columnWidth, 10) * (column.colEnd ? column.colEnd - column.colStart : 1);\n                    column.defaultWidth = columnWidthCombined + 'px';\n                } else {\n                    column.defaultWidth = this._columnWidth;\n                }\n            });\n            this.resetCachedWidths();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.totalItemCount || this.dataLength;\n        return this.rowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden\n     * Sets TBODY height i.e. this.calcHeight\n     */\n    protected calculateGridHeight() {\n        this._derivePossibleHeight();\n        // TODO: Calculate based on grid density\n        if (this.maxLevelHeaderDepth) {\n            this.theadRow.nativeElement.style.height = `${(this.maxLevelHeaderDepth + 1) * this.defaultRowHeight +\n                (this.allowFiltering && this.filterMode === FilterMode.quickFilter ? FILTER_ROW_HEIGHT : 0) + 1}px`;\n        }\n        this.summariesHeight = 0;\n        if (!this._height) {\n            this.calcHeight = null;\n            if (this.hasSummarizedColumns && this.rootSummariesEnabled) {\n                this.summariesHeight = this.summaryService.calcMaxSummaryHeight();\n            }\n            return;\n        }\n\n        if (this.hasSummarizedColumns && this.rootSummariesEnabled) {\n            this.summariesHeight = this.summaryService.calcMaxSummaryHeight();\n        }\n\n        this.calcHeight = this._calculateGridBodyHeight();\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getToolbarHeight(): number {\n        let toolbarHeight = 0;\n        if (this.showToolbar && this.toolbarHtml != null) {\n            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?\n                this.toolbarHtml.nativeElement.offsetHeight : 0;\n        }\n        return toolbarHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getPagingHeight(): number {\n        let pagingHeight = 0;\n        if (this.paging && this.paginator) {\n            pagingHeight = this.paginator.nativeElement.firstElementChild ?\n                this.paginator.nativeElement.offsetHeight : 0;\n        }\n        return pagingHeight;\n    }\n    /**\n     * @hidden\n     */\n    protected _calculateGridBodyHeight() {\n        const footerBordersAndScrollbars = this.tfoot.nativeElement.offsetHeight -\n            this.tfoot.nativeElement.clientHeight;\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement);\n        const toolbarHeight = this.getToolbarHeight();\n        const pagingHeight = this.getPagingHeight();\n        const groupAreaHeight = this.getGroupAreaHeight();\n        let gridHeight;\n\n        if (this.isPercentHeight) {\n            /*height in %*/\n            if (computed.getPropertyValue('height').indexOf('%') === -1 ) {\n                gridHeight = parseInt(computed.getPropertyValue('height'), 10);\n            } else {\n                return this.defaultTargetBodyHeight;\n            }\n        } else {\n            gridHeight = parseInt(this._height, 10);\n        }\n        const height = Math.abs(gridHeight - toolbarHeight -\n                this.theadRow.nativeElement.offsetHeight -\n                this.summariesHeight - pagingHeight -\n                groupAreaHeight - footerBordersAndScrollbars -\n                this.scr.nativeElement.clientHeight);\n\n        if (height === 0 || isNaN(gridHeight)) {\n            const bodyHeight = this.defaultTargetBodyHeight;\n            return bodyHeight > 0 ? bodyHeight : null;\n        }\n\n        return height;\n    }\n\n    public get outerWidth() {\n        return this.hasVerticalSroll() ? this.calcWidth + this.scrollWidth : this.calcWidth;\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     */\n    public getVisibleContentHeight() {\n        let height = this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;\n        if (this.hasSummarizedColumns) {\n            height += this.tfoot.nativeElement.clientHeight;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n     */\n    public getPossibleColumnWidth(baseWidth: number = null) {\n        let computedWidth;\n        if (baseWidth !== null) {\n            computedWidth = baseWidth;\n        } else {\n            computedWidth = this.calcWidth ||\n                parseInt(this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n        }\n\n        if (this.showRowCheckboxes) {\n            computedWidth -= this.headerCheckboxContainer ? this.headerCheckboxContainer.nativeElement.offsetWidth : 0;\n        }\n\n        const visibleChildColumns = this.visibleColumns.filter(c => !c.columnGroup);\n\n\n        // Column layouts related\n        let visibleCols = [];\n        const columnBlocks = this.visibleColumns.filter(c => c.columnGroup);\n        const colsPerBlock = columnBlocks.map(block => block.getInitialChildColumnSizes(block.children));\n        const combinedBlocksSize = colsPerBlock.reduce((acc, item) => acc + item.length, 0);\n        colsPerBlock.forEach(blockCols => visibleCols = visibleCols.concat(blockCols));\n        //\n\n        const columnsWithSetWidths = this.hasColumnLayouts ?\n            visibleCols.filter(c => c.widthSetByUser) :\n            visibleChildColumns.filter(c => c.widthSetByUser);\n\n        const columnsToSize = this.hasColumnLayouts ?\n            combinedBlocksSize - columnsWithSetWidths.length :\n            visibleChildColumns.length - columnsWithSetWidths.length;\n\n        const sumExistingWidths = columnsWithSetWidths\n            .reduce((prev, curr) => {\n                const colWidth = curr.width;\n                const widthValue = parseInt(colWidth, 10);\n                const currWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1 ?\n                    widthValue / 100 * computedWidth :\n                    widthValue;\n                return prev + currWidth;\n            }, 0);\n\n        const columnWidth = Math.floor(!Number.isFinite(sumExistingWidths) ?\n            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :\n            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH));\n\n        return columnWidth.toString();\n    }\n\n    /**\n     * @hidden\n     * Sets grid width i.e. this.calcWidth\n     */\n    protected calculateGridWidth() {\n        let width;\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement);\n        const el = this.document.getElementById(this.nativeElement.id);\n\n        if (this.isPercentWidth) {\n            /* width in %*/\n            width = computed.getPropertyValue('width').indexOf('%') === -1 ?\n                parseInt(computed.getPropertyValue('width'), 10) : null;\n        } else {\n            width = parseInt(this._width, 10);\n        }\n\n        if (!width && el) {\n            width = el.offsetWidth;\n        }\n\n\n        if (!width) {\n            width = this.columnList.reduce((sum, item) =>  sum + parseInt((item.width || item.defaultWidth), 10), 0);\n        }\n\n        if (this.hasVerticalSroll()) {\n            width -= this.scrollWidth;\n        }\n        if (Number.isFinite(width) && width !== this.calcWidth) {\n            this.calcWidth = width;\n            this.cdr.detectChanges();\n        }\n        this._derivePossibleWidth();\n    }\n\n    public hasVerticalSroll() {\n        if (!this._ngAfterViewInitPassed) { return false; }\n        const isScrollable = this.verticalScrollContainer.isScrollable();\n        return !!(this.calcWidth && this.verticalScrollContainer.igxForOf &&\n        this.verticalScrollContainer.igxForOf.length > 0 &&\n        isScrollable);\n    }\n\n    /**\n     * @hidden\n     */\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        const diff = this.columnListDiffer.diff(change);\n        if (diff) {\n            let added = false;\n            let removed = false;\n\n            this.initColumns(this.columnList);\n\n\n            diff.forEachAddedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                this.onColumnInit.emit(record.item);\n                added = true;\n            });\n\n            diff.forEachRemovedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                // Clear Filtering\n                this.gridAPI.clear_filter(record.item.field);\n\n                // Clear Sorting\n                this.gridAPI.clear_sort(record.item.field);\n                removed = true;\n            });\n\n            this.resetCaches();\n\n            if (added || removed) {\n                this.summaryService.clearSummaryCache();\n                this.calculateGridSizes();\n            }\n        }\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridSizes() {\n        /*\n            TODO: (R.K.) This layered lasagne should be refactored\n            ASAP. The reason I have to reset the caches so many times is because\n            after teach `detectChanges` call they are filled with invalid\n            state. Of course all of this happens midway through the grid\n            sizing process which of course, uses values from the caches, thus resulting\n            in a broken layout.\n        */\n        this.resetCaches();\n        const hasScroll = this.hasVerticalSroll();\n        this.calculateGridWidth();\n        this.cdr.detectChanges();\n        this.resetCaches();\n        this.calculateGridHeight();\n\n        if (this.rowEditable) {\n            this.repositionRowEditingOverlay(this.rowInEditMode);\n        }\n\n        this.cdr.detectChanges();\n        this.resetCaches();\n        // in case scrollbar has appeared recalc to size correctly.\n        if (hasScroll !== this.hasVerticalSroll()) {\n            this.calculateGridWidth();\n            this.cdr.detectChanges();\n            this.resetCaches();\n        }\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * Method used to override the calculations.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = 0;\n\n        if (this.headerCheckboxContainer) {\n            width += this.headerCheckboxContainer.nativeElement.getBoundingClientRect().width;\n        }\n        if (this.headerDragContainer) {\n            width += this.headerDragContainer.nativeElement.getBoundingClientRect().width;\n        }\n        return width;\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    public getPinnedWidth(takeHidden = false) {\n        const fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;\n        let sum = 0;\n        for (const col of fc) {\n            if (col.level === 0) {\n                sum += parseInt(col.width, 10);\n            }\n        }\n        sum += this.featureColumnsWidth;\n\n        return sum;\n    }\n\n    /**\n     * @hidden\n     * Gets calculated width of the unpinned area\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    protected getUnpinnedWidth(takeHidden = false) {\n        let width = this.isPercentWidth ?\n            this.calcWidth :\n            parseInt(this._width, 10);\n        if (this.hasVerticalSroll() && !this.isPercentWidth) {\n            width -= this.scrollWidth;\n        }\n        return width - this.getPinnedWidth(takeHidden);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _summaries(fieldName: string, hasSummary: boolean, summaryOperand?: any) {\n        const column = this.gridAPI.get_column_by_name(fieldName);\n        if (column) {\n            column.hasSummary = hasSummary;\n            if (summaryOperand) {\n                if (this.rootSummariesEnabled) { this.summaryService.retriggerRootPipe++; }\n                column.summaries = summaryOperand;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _multipleSummaries(expressions: ISummaryExpression[], hasSummary: boolean) {\n        expressions.forEach((element) => {\n            this._summaries(element.fieldName, hasSummary, element.customSummary);\n        });\n    }\n    /**\n     * @hidden\n     */\n    protected _disableMultipleSummaries(expressions) {\n        expressions.forEach((column) => {\n            const columnName = column && column.fieldName ? column.fieldName : column;\n            this._summaries(columnName, false);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveDataTypes(rec) {\n        if (typeof rec === 'number') {\n            return DataType.Number;\n        } else if (typeof rec === 'boolean') {\n            return DataType.Boolean;\n        } else if (typeof rec === 'object' && rec instanceof Date) {\n            return DataType.Date;\n        }\n        return DataType.String;\n    }\n\n    private getScrollWidth() {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.width = '100px';\n        style.height = '100px';\n        style.position = 'absolute';\n        style.top = '-10000px';\n        style.top = '-10000px';\n        style.overflow = 'scroll';\n        document.body.appendChild(div);\n        const scrollWidth = div.offsetWidth - div.clientWidth;\n        document.body.removeChild(div);\n        return scrollWidth;\n    }\n\n    /**\n     * @hidden\n     */\n    protected autogenerateColumns() {\n        const data = this.gridAPI.get_data();\n        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const fields = this.generateDataFields(data);\n        const columns = [];\n\n        fields.forEach((field) => {\n            const ref = this.viewRef.createComponent(factory, null, this.viewRef.injector);\n            ref.instance.field = field;\n            ref.instance.dataType = this.resolveDataTypes(data[0][field]);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n\n        this.columnList.reset(columns);\n        if (data && data.length > 0) {\n            this.shouldGenerate = false;\n        }\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return Object.keys(data && data.length !== 0 ? data[0] : []);\n    }\n\n    /**\n     * @hidden\n     */\n    onlyTopLevel(arr) {\n        return arr.filter(c => c.level === 0);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        // XXX: Deprecate index\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n        if (this.hasColumnLayouts) {\n            // Set overall row layout size\n            this.columnList.forEach((col) => {\n                if (col.columnLayout) {\n                    const layoutSize = col.children ?\n                     col.children.reduce((acc, val) => Math.max(val.rowStart + val.gridRowSpan - 1, acc), 1) :\n                     1;\n                     this._multiRowLayoutRowSize = Math.max(layoutSize, this._multiRowLayoutRowSize);\n                }\n            });\n        }\n        if (this.hasColumnLayouts && this.hasColumnGroups) {\n            // invalid configuration - multi-row and column groups\n            // remove column groups\n            const columnLayoutColumns = this.columnList.filter((col) => col.columnLayout || (col.parent && col.parent.columnLayout));\n            this.columnList.reset(columnLayoutColumns);\n        }\n        this._columns = this.columnList.toArray();\n        collection.forEach((column: IgxColumnComponent) => {\n            column.grid = this;\n            column.defaultWidth = this.columnWidth;\n            this.setColumnEditState(column);\n\n            if (cb) {\n                cb(column);\n            }\n        });\n\n        this.reinitPinStates();\n    }\n\n    private setColumnEditState(column: IgxColumnComponent) {\n        // When rowEditable is true, then all columns, with defined field, excluding priamaryKey, are set to editable by default.\n        if (this.rowEditable && column.editable === null &&\n            column.field && column.field !== this.primaryKey) {\n            column.editable = this.rowEditable;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected reinitPinStates() {\n        if (this.hasColumnGroups) {\n            this._pinnedColumns = this.columnList.filter((c) => c.pinned);\n        }\n        this._unpinnedColumns = this.columnList.filter((c) => !c.pinned);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public onHeaderCheckboxClick(event, filteredData) {\n        this.allRowsSelected = event.checked;\n        const newSelection =\n            event.checked ?\n                filteredData ?\n                    this.selection.add_items(this.id, this.selection.get_all_ids(filteredData, this.primaryKey)) :\n                    this.selection.get_all_ids(this.gridAPI.get_all_data(true), this.primaryKey) :\n                filteredData ?\n                    this.selection.delete_items(this.id, this.selection.get_all_ids(filteredData, this.primaryKey)) :\n                    this.selection.get_empty();\n        this.triggerRowSelectionChange(newSelection, null, event, event.checked);\n        this.checkHeaderCheckboxStatus(event.checked);\n    }\n\n    /**\n     * @hidden\n     */\n    get headerCheckboxAriaLabel() {\n        return this._filteringExpressionsTree.filteringOperands.length > 0 ?\n            this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all filtered' : 'Select all filtered' :\n            this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all' : 'Select all';\n    }\n\n    /**\n     * @hidden\n     */\n    public checkHeaderCheckboxStatus(headerStatus?: boolean) {\n        if (headerStatus === undefined) {\n            const filteredData = this.filteringService.filteredData;\n            const dataLength = filteredData ? filteredData.length : this.dataLength;\n            this.allRowsSelected = this.selection.are_all_selected(this.id, dataLength);\n            if (this.headerCheckbox) {\n                this.headerCheckbox.indeterminate = !this.allRowsSelected && !this.selection.are_none_selected(this.id);\n                if (!this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.checked =\n                        this.allRowsSelected;\n                }\n            }\n            this.cdr.markForCheck();\n        } else if (this.headerCheckbox) {\n            this.headerCheckbox.checked = headerStatus !== undefined ? headerStatus : false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public filteredItemsStatus(componentID: string, filteredData: any[], primaryKey?) {\n        const currSelection = this.selection.get(componentID);\n        let atLeastOneSelected = false;\n        let notAllSelected = false;\n        if (currSelection) {\n            for (const key of Object.keys(filteredData)) {\n                const dataItem = primaryKey ? filteredData[key][primaryKey] : filteredData[key];\n                if (currSelection.has(dataItem)) {\n                    atLeastOneSelected = true;\n                    if (notAllSelected) {\n                        return 'indeterminate';\n                    }\n                } else {\n                    notAllSelected = true;\n                    if (atLeastOneSelected) {\n                        return 'indeterminate';\n                    }\n                }\n            }\n        }\n        return atLeastOneSelected ? 'allSelected' : 'noneSelected';\n    }\n\n    /**\n     * @hidden\n     */\n    public updateHeaderCheckboxStatusOnFilter(data) {\n        if (!data) {\n            this.checkHeaderCheckboxStatus();\n            return;\n        }\n        switch (this.filteredItemsStatus(this.id, data, this.primaryKey)) {\n            case 'allSelected': {\n                if (!this.allRowsSelected) {\n                    this.allRowsSelected = true;\n                }\n                if (this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = false;\n                }\n                break;\n            }\n            case 'noneSelected': {\n                if (this.allRowsSelected) {\n                    this.allRowsSelected = false;\n                }\n                if (this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = false;\n                }\n                break;\n            }\n            default: {\n                if (!this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = true;\n                }\n                if (this.allRowsSelected) {\n                    this.allRowsSelected = false;\n                }\n                break;\n            }\n        }\n    }\n\n    /**\n     * Get current selection state.\n     * Returns an array with selected rows' IDs (primaryKey or rowData)\n     * ```typescript\n     * const selectedRows = this.grid.selectedRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectedRows(): any[] {\n        let selection: Set<any>;\n        selection = this.selection.get(this.id);\n        return selection ? Array.from(selection) : [];\n    }\n\n    /**\n     * Select specified rows by ID.\n     * ```typescript\n     * this.grid.selectRows([1,2,5], true);\n     * ```\n     * @param rowIDs\n     * @param clearCurrentSelection if true clears the current selection\n     * @memberof IgxGridBaseComponent\n     */\n    public selectRows(rowIDs: any[], clearCurrentSelection?: boolean) {\n        let newSelection: Set<any>;\n        let selectableRows = [];\n        if (this.transactions.enabled) {\n            selectableRows = rowIDs.filter(e => !this.gridAPI.row_deleted_transaction(e));\n        } else {\n            selectableRows = rowIDs;\n        }\n        newSelection = this.selection.add_items(this.id, selectableRows, clearCurrentSelection);\n        this.triggerRowSelectionChange(newSelection);\n    }\n\n    /**\n     * Deselect specified rows by ID.\n     * ```typescript\n     * this.grid.deselectRows([1,2,5]);\n     * ```\n     * @param rowIDs\n     * @memberof IgxGridBaseComponent\n     */\n    public deselectRows(rowIDs: any[]) {\n        let newSelection: Set<any>;\n        newSelection = this.selection.delete_items(this.id, rowIDs);\n        this.triggerRowSelectionChange(newSelection);\n    }\n\n    /**\n     * Selects all rows\n     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * ```typescript\n     * this.grid.selectAllRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectAllRows() {\n        this.triggerRowSelectionChange(this.selection.get_all_ids(this.gridAPI.get_all_data(true), this.primaryKey));\n    }\n\n    /**\n     * Deselects all rows\n     * ```typescript\n     * this.grid.deselectAllRows();\n     * ```\n     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     */\n    public deselectAllRows() {\n        this.triggerRowSelectionChange(this.selection.get_empty());\n    }\n\n    clearCellSelection(): void {\n        this.selectionService.clear();\n        this.selectionService.activeElement = null;\n        this.cdr.markForCheck();\n    }\n\n    dragScroll(dir: DragScrollDirection): void {\n        const scrollDelta = 48;\n        const horizontal = this.parentVirtDir.getHorizontalScroll();\n        const vertical = this.verticalScrollContainer.getVerticalScroll();\n        switch (dir) {\n            case DragScrollDirection.LEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                break;\n            case DragScrollDirection.RIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                break;\n            case DragScrollDirection.TOP:\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOM:\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.TOPLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.TOPRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            default:\n                return;\n        }\n        this.wheelHandler();\n    }\n\n    isDefined(arg: any): boolean {\n        return arg !== undefined && arg !== null;\n    }\n\n    selectRange(arg: GridSelectionRange | GridSelectionRange[] | null | undefined): void {\n        if (!this.isDefined(arg)) {\n            this.clearCellSelection();\n            return;\n        }\n        if (arg instanceof Array) {\n            arg.forEach(range => this.setSelection(range));\n        } else {\n            this.setSelection(arg);\n        }\n        this.cdr.markForCheck();\n    }\n\n    columnToVisibleIndex(field: string | number): number {\n        const visibleColumns = this.visibleColumns;\n        if (typeof field === 'number') {\n            return field;\n        }\n        return visibleColumns.find(column => column.field === field).visibleIndex;\n    }\n\n\n    setSelection(range: GridSelectionRange): void {\n        const startNode =  { row: range.rowStart, column: this.columnToVisibleIndex(range.columnStart) };\n        const endNode =  { row: range.rowEnd, column: this.columnToVisibleIndex(range.columnEnd) };\n\n        this.selectionService.pointerState.node = startNode;\n        this.selectionService.selectRange(endNode, this.selectionService.pointerState);\n        this.selectionService.addRangeMeta(endNode, this.selectionService.pointerState);\n        this.selectionService.initPointerState();\n    }\n\n    getSelectedRanges(): GridSelectionRange[] {\n        return this.selectionService.ranges;\n    }\n\n    extractDataFromSelection(source: any[]): any[] {\n        let column: IgxColumnComponent;\n        let record = {};\n        const selectedData = [];\n\n        const selectionMap = Array.from(this.selectionService.selection)\n            .filter((tuple) => tuple[0] < source.length);\n\n        const visibleColumns = this.visibleColumns\n            .filter(col => !col.columnGroup)\n            .sort((a, b) => a.visibleIndex - b.visibleIndex);\n\n\n        for (const [row, set] of selectionMap) {\n            if (!source[row]) {\n                continue;\n            }\n            const temp = Array.from(set);\n            for (const each of temp) {\n                column = visibleColumns[each];\n                if (column) {\n                    record[column.field] = source[row][column.field];\n                }\n            }\n            if (Object.keys(record).length) {\n                selectedData.push(record);\n            }\n            record = {};\n        }\n        return selectedData;\n    }\n\n    getSelectedData() {\n        const source = this.verticalScrollContainer.igxForOf;\n\n        return this.extractDataFromSelection(source);\n    }\n\n    /**\n     * @hidden\n     */\n    public triggerRowSelectionChange(newSelectionAsSet: Set<any>, row?: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>,\n        event?: Event, headerStatus?: boolean) {\n        const oldSelectionAsSet = this.selection.get(this.id);\n        const oldSelection = oldSelectionAsSet ? Array.from(oldSelectionAsSet) : [];\n        const newSelection = newSelectionAsSet ? Array.from(newSelectionAsSet) : [];\n        const args: IRowSelectionEventArgs = { oldSelection, newSelection, row, event };\n        this.onRowSelectionChange.emit(args);\n        newSelectionAsSet = this.selection.get_empty();\n        for (let i = 0; i < args.newSelection.length; i++) {\n            newSelectionAsSet.add(args.newSelection[i]);\n        }\n        this.selection.set(this.id, newSelectionAsSet);\n        this.checkHeaderCheckboxStatus(headerStatus);\n    }\n\n    /**\n     * @hidden\n     */\n    // @HostListener('scroll', ['$event'])\n    public scrollHandler(event) {\n        this.parentVirtDir.getHorizontalScroll().scrollLeft += event.target.scrollLeft;\n        this.verticalScrollContainer.getVerticalScroll().scrollTop += event.target.scrollTop;\n        event.target.scrollLeft = 0;\n        event.target.scrollTop = 0;\n    }\n\n    /**\n     * This method allows you to navigate to a position\n     * in the grid based on provided `rowindex` and `visibleColumnIndex`,\n     * also to execute a custom logic over the target element,\n     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }\n     * ```typescript\n     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public navigateTo(rowIndex: number, visibleColIndex = -1, cb: Function = null) {\n        if (rowIndex < 0 || rowIndex > this.verticalScrollContainer.igxForOf.length - 1\n            ||  (visibleColIndex !== -1 && this.columnList.map(col => col.visibleIndex).indexOf(visibleColIndex) === -1)) {\n            return;\n        }\n        this.wheelHandler();\n        if (this.verticalScrollContainer.igxForOf.slice(rowIndex, rowIndex + 1).find(rec => rec.expression || rec.childGridsData)) {\n            visibleColIndex = -1;\n        }\n        if (visibleColIndex === -1 || (this.navigation.isColumnFullyVisible(visibleColIndex)\n            && this.navigation.isColumnLeftFullyVisible(visibleColIndex))) {\n            if (this.navigation.shouldPerformVerticalScroll(rowIndex)) {\n                this.verticalScrollContainer.scrollTo(rowIndex);\n                this.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    this.executeCallback(rowIndex, visibleColIndex, cb);\n                });\n            } else {\n                this.executeCallback(rowIndex, visibleColIndex, cb);\n            }\n        } else {\n            const unpinnedIndex = this.navigation.getColumnUnpinnedIndex(visibleColIndex);\n            this.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                if (this.navigation.shouldPerformVerticalScroll(rowIndex)) {\n                    this.verticalScrollContainer.scrollTo(rowIndex);\n                    this.verticalScrollContainer.onChunkLoad\n                    .pipe(first()).subscribe(() => {\n                        this.executeCallback(rowIndex, visibleColIndex, cb);\n                    });\n                } else {\n                    this.executeCallback(rowIndex, visibleColIndex, cb);\n                }\n\n            });\n            this.navigation.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);\n        }\n    }\n\n     /**\n     * Returns `ICellPosition` which defines the next cell,\n     * according to the current position, that match specific criteria.\n     * You can pass callback function as a third parameter of `getPreviousCell` method.\n     * The callback function accepts IgxColumnComponent as a param\n     * ```typescript\n     *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public getNextCell(currRowIndex: number, curVisibleColIndex: number,\n            callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return {rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex};\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => a - b) :\n                                columns.map(editCol => editCol.visibleIndex).sort((a, b) => a - b);\n        const nextCellIndex = colIndexes.find(index => index > curVisibleColIndex);\n        if (this.verticalScrollContainer.igxForOf.slice(currRowIndex, currRowIndex + 1)\n                .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && nextCellIndex !== undefined) {\n            return {rowIndex: currRowIndex, visibleColumnIndex: nextCellIndex};\n        } else {\n            if (colIndexes.length === 0 || this.getNextDataRowIndex(currRowIndex) === currRowIndex) {\n                return {rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex};\n            } else {\n                return {rowIndex: this.getNextDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0]};\n            }\n        }\n    }\n\n     /**\n     * Returns `ICellPosition` which defines the previous cell,\n     * according to the current position, that match specific criteria.\n     * You can pass callback function as a third parameter of `getPreviousCell` method.\n     * The callback function accepts IgxColumnComponent as a param\n     * ```typescript\n     *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public getPreviousCell(currRowIndex: number, curVisibleColIndex: number,\n            callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns =  this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return {rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex};\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => b - a) :\n                                columns.map(editCol => editCol.visibleIndex).sort((a, b) => b - a);\n        const prevCellIndex = colIndexes.find(index => index < curVisibleColIndex);\n        if (this.verticalScrollContainer.igxForOf.slice(currRowIndex, currRowIndex + 1)\n                .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && prevCellIndex !== undefined) {\n            return {rowIndex: currRowIndex, visibleColumnIndex: prevCellIndex};\n        } else {\n            if (colIndexes.length === 0 || this.getPrevDataRowIndex(currRowIndex) === currRowIndex) {\n                return {rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex};\n            } else {\n                return {rowIndex: this.getPrevDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0]};\n            }\n        }\n    }\n\n    private executeCallback(rowIndex, visibleColIndex = -1, cb: Function = null) {\n        if (!cb) { return; }\n        let targetType, target;\n        const row =  this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).find(r => r.index === rowIndex);\n        if (!row) { return; }\n        switch (row.nativeElement.tagName.toLowerCase()) {\n            case 'igx-grid-groupby-row':\n                targetType = GridKeydownTargetType.groupRow;\n                target = row;\n                break;\n            case 'igx-grid-summary-row':\n                targetType = GridKeydownTargetType.summaryCell;\n                target = visibleColIndex !== -1 ?\n                    row.summaryCells.find(c => c.visibleColumnIndex === visibleColIndex) : row.summaryCells.first;\n                break;\n            case 'igx-child-grid-row':\n                targetType = GridKeydownTargetType.hierarchicalRow;\n                target = row;\n                break;\n            default:\n                targetType = GridKeydownTargetType.dataCell;\n                target = visibleColIndex !== -1 ? row.cells.find(c => c.visibleColumnIndex === visibleColIndex) : row.cells.first;\n                break;\n        }\n        const args = { targetType: targetType, target: target };\n        cb(args);\n    }\n\n    private getPrevDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex <= 0) { return currentRowIndex; }\n\n        const prevRow = this.verticalScrollContainer.igxForOf.slice(0, currentRowIndex).reverse()\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return prevRow ? this.verticalScrollContainer.igxForOf.indexOf(prevRow) : currentRowIndex;\n    }\n\n    private getNextDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex === this.verticalScrollContainer.igxForOf.length) {return currentRowIndex; }\n\n        const nextRow = this.verticalScrollContainer.igxForOf.slice(currentRowIndex + 1, this.verticalScrollContainer.igxForOf.length)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return nextRow ? this.verticalScrollContainer.igxForOf.indexOf(nextRow) : currentRowIndex;\n    }\n\n    private isValidPosition(rowIndex, colIndex): boolean {\n        const rows = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).length;\n        const cols = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0).length;\n        if (rows < 1 || cols < 1) { return false; }\n        if (rowIndex > -1 && rowIndex < this.verticalScrollContainer.igxForOf.length &&\n            colIndex > - 1 && colIndex <= this.unpinnedColumns[this.unpinnedColumns.length - 1].visibleIndex) {\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public wheelHandler(isScroll = false) {\n        if (document.activeElement &&\n        // tslint:disable-next-line:no-bitwise\n            (document.activeElement.compareDocumentPosition(this.tbody.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS ||\n        // tslint:disable-next-line:no-bitwise\n            (document.activeElement.compareDocumentPosition(this.tfoot.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS && isScroll))) {\n            (document.activeElement as HTMLElement).blur();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public trackColumnChanges(index, col) {\n        return col.field + col.calcWidth;\n    }\n\n    private find(text: string, increment: number, caseSensitive?: boolean, exactMatch?: boolean, scroll?: boolean) {\n        if (!this.rowList) {\n            return 0;\n        }\n\n        this.endEdit(false);\n\n        if (!text) {\n            this.clearSearch();\n            return 0;\n        }\n\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n        let rebuildCache = false;\n\n        if (this.lastSearchInfo.searchText !== text ||\n            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||\n            this.lastSearchInfo.exactMatch !== exactMatchResolved) {\n            this.lastSearchInfo = {\n                searchText: text,\n                activeMatchIndex: 0,\n                caseSensitive: caseSensitiveResolved,\n                exactMatch: exactMatchResolved,\n                matchInfoCache: []\n            };\n\n            rebuildCache = true;\n        } else {\n            this.lastSearchInfo.activeMatchIndex += increment;\n        }\n\n        if (rebuildCache) {\n            this.rowList.forEach((row) => {\n                if (row.cells) {\n                    row.cells.forEach((c) => {\n                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);\n                    });\n                }\n            });\n\n            this.rebuildMatchCache();\n        }\n\n        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {\n            this.lastSearchInfo.activeMatchIndex = 0;\n        } else if (this.lastSearchInfo.activeMatchIndex < 0) {\n            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;\n        }\n\n        if (this.lastSearchInfo.matchInfoCache.length) {\n            const matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];\n            this.lastSearchInfo = {...this.lastSearchInfo};\n\n            if (scroll !== false) {\n                this.scrollTo(matchInfo.row, matchInfo.column);\n            }\n\n            IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                column: matchInfo.column,\n                row: matchInfo.row,\n                index: matchInfo.index,\n            });\n\n        } else {\n            IgxTextHighlightDirective.clearActiveHighlight(this.id);\n        }\n\n        return this.lastSearchInfo.matchInfoCache.length;\n    }\n\n    /**\n     * Returns an array containing the filtered sorted data.\n     * ```typescript\n     * const filteredSortedData = this.grid1.filteredSortedData;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get filteredSortedData(): any[] {\n        return this._filteredSortedData;\n    }\n    set filteredSortedData(value: any[]) {\n        this._filteredSortedData = value;\n        this.refreshSearch(true);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initPinning() {\n        let currentPinnedWidth = 0;\n        const pinnedColumns = [];\n        const unpinnedColumns = [];\n        const newUnpinnedCols = [];\n\n        this.calculateGridWidth();\n        this.resetCaches();\n        // When a column is a group or is inside a group, pin all related.\n        this._pinnedColumns.forEach(col => {\n            if (col.parent) {\n                col.parent.pinned = true;\n            }\n            if (col.columnGroup) {\n                col.children.forEach(child => child.pinned = true);\n            }\n        });\n\n        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.\n        // We take into account top level columns (top level groups and non groups).\n        // If top level is unpinned the pinning handles all children to be unpinned as well.\n        for (let i = 0; i < this._columns.length; i++) {\n            if (this._columns[i].pinned && !this._columns[i].parent) {\n                // Pinned column. Check if with it the unpinned min width is exceeded.\n                const colWidth = parseInt(this._columns[i].width, 10);\n                if (currentPinnedWidth + colWidth > this.calcWidth - this.unpinnedAreaMinWidth) {\n                    // unpinned min width is exceeded. Unpin the columns and add it to the unpinned collection.\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                    newUnpinnedCols.push(this._columns[i]);\n                } else {\n                    // unpinned min width is not exceeded. Keep it pinned and add it to the pinned collection.\n                    currentPinnedWidth += colWidth;\n                    pinnedColumns.push(this._columns[i]);\n                }\n            } else if (this._columns[i].pinned && this._columns[i].parent) {\n                if (this._columns[i].topLevelParent.pinned) {\n                    pinnedColumns.push(this._columns[i]);\n                } else {\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                }\n            } else {\n                unpinnedColumns.push(this._columns[i]);\n            }\n        }\n\n        if (newUnpinnedCols.length) {\n            console.warn(\n                'igxGrid - The pinned area exceeds maximum pinned width. ' +\n                'The following columns were unpinned to prevent further issues:' +\n                newUnpinnedCols.map(col => '\"' + col.header + '\"').toString() + '. For more info see our documentation.'\n            );\n        }\n\n        // Assign the applicaple collections.\n        this._pinnedColumns = pinnedColumns;\n        this._unpinnedColumns = unpinnedColumns;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        let delayScrolling = false;\n\n        if (this.paging && typeof(row) !== 'number') {\n            const rowIndex = this.filteredSortedData.indexOf(row);\n            const page = Math.floor(rowIndex / this.perPage);\n\n            if (this.page !== page) {\n                delayScrolling = true;\n                this.page = page;\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof(row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(row));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof(row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(row));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollToHorizontally(column: any | number) {\n        let columnIndex = typeof column === 'number' ? column : this.getColumnByName(column).visibleIndex;\n        const scrollRow = this.rowList.find(r => r.virtDirRow);\n        const virtDir = scrollRow ? scrollRow.virtDirRow : null;\n        if (this.pinnedColumns.length) {\n            if (columnIndex >= this.pinnedColumns.length) {\n                columnIndex -= this.pinnedColumns.length;\n                this.scrollDirective(virtDir, columnIndex);\n            }\n        } else {\n            this.scrollDirective(virtDir, columnIndex);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollDirective(directive: IgxGridForOfDirective<any>, goal: number): void {\n        if (!directive) {\n            return;\n        }\n        // directive.onChunkLoad.pipe(first())\n        //     .subscribe(() => requestAnimationFrame(() => this.cdr.detectChanges()));\n        directive.scrollTo(goal);\n    }\n\n    private rebuildMatchCache() {\n        this.lastSearchInfo.matchInfoCache = [];\n\n        const caseSensitive = this.lastSearchInfo.caseSensitive;\n        const exactMatch = this.lastSearchInfo.exactMatch;\n        const searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();\n        const data = this.filteredSortedData;\n        const columnItems = this.visibleColumns.filter((c) => !c.columnGroup).sort((c1, c2) => c1.visibleIndex - c2.visibleIndex);\n\n        const numberPipe = new IgxDecimalPipeComponent(this.locale);\n        const datePipe = new IgxDatePipeComponent(this.locale);\n        data.forEach((dataRow) => {\n            columnItems.forEach((c) => {\n                const value = c.formatter ? c.formatter(dataRow[c.field]) :\n                    c.dataType === 'number' ? numberPipe.transform(dataRow[c.field], this.locale) :\n                        c.dataType === 'date' ? datePipe.transform(dataRow[c.field], this.locale)\n                            : dataRow[c.field];\n                if (value !== undefined && value !== null && c.searchable) {\n                    let searchValue = caseSensitive ? String(value) : String(value).toLowerCase();\n\n                    if (exactMatch) {\n                        if (searchValue === searchText) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: 0,\n                            });\n                        }\n                    } else {\n                        let occurenceIndex = 0;\n                        let searchIndex = searchValue.indexOf(searchText);\n\n                        while (searchIndex !== -1) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: occurenceIndex++,\n                            });\n\n                            searchValue = searchValue.substring(searchIndex + searchText.length);\n                            searchIndex = searchValue.indexOf(searchText);\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpandedGroup(_group: IGroupByRecord): boolean {\n        return undefined;\n    }\n\n    /**\n    * @hidden\n    */\n    protected getGroupByRecords(): IGroupByRecord[] {\n        return null;\n    }\n\n    protected changeRowEditingOverlayStateOnScroll(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>) {\n        if (!this.rowEditable || this.rowEditingOverlay.collapsed) {\n            return;\n        }\n        if (!row) {\n            this.toggleRowEditingOverlay(false);\n        } else {\n            this.repositionRowEditingOverlay(row);\n        }\n    }\n\n    openRowOverlay(id) {\n        this.configureRowEditingOverlay(id, this.rowList.length <= MIN_ROW_EDITING_COUNT_THRESHOLD);\n\n        this.rowEditingOverlay.open(this.rowEditSettings);\n        this.rowEditPositioningStrategy.isTopInitialPosition = this.rowEditPositioningStrategy.isTop;\n        this._wheelListener = this.rowEditingWheelHandler.bind(this);\n        this.rowEditingOverlay.element.addEventListener('wheel', this._wheelListener);\n    }\n\n    /**\n     * @hidden\n     */\n    public closeRowEditingOverlay() {\n        this.rowEditingOverlay.element.removeEventListener('wheel', this._wheelListener);\n        this.rowEditPositioningStrategy.isTopInitialPosition = null;\n        this.rowEditingOverlay.close();\n        this.rowEditingOverlay.element.parentElement.style.display = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public toggleRowEditingOverlay(show) {\n        const rowStyle = this.rowEditingOverlay.element.style;\n        if (show) {\n            rowStyle.display = 'block';\n        } else {\n            rowStyle.display = 'none';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public repositionRowEditingOverlay(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>) {\n        if (!this.rowEditingOverlay.collapsed) {\n            const rowStyle = this.rowEditingOverlay.element.parentElement.style;\n            if (row) {\n                rowStyle.display = '';\n                this.configureRowEditingOverlay(row.rowID);\n                this.rowEditingOverlay.reposition();\n            } else {\n                rowStyle.display = 'none';\n            }\n        }\n    }\n\n    private configureRowEditingOverlay(rowID: any, useOuter = false) {\n        this.rowEditSettings.outlet = useOuter ? this.parentRowOutletDirective : this.rowOutletDirective;\n        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;\n        const targetRow = this.gridAPI.get_row_by_key(rowID);\n        if (!targetRow) {\n            return;\n        }\n        this.rowEditPositioningStrategy.settings.target = targetRow.element.nativeElement;\n        this.toggleRowEditingOverlay(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowChangesCount() {\n        if (!this.crudService.row) {\n            return 0;\n        }\n        const rowChanges = this.transactions.getAggregatedValue(this.crudService.row.id, false);\n        return rowChanges ? Object.keys(rowChanges).length : 0;\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.gridAPI.get_all_data()[rowIndex], value);\n    }\n\n    endRowTransaction(commit: boolean, row: IgxRow) {\n        row.newData = this.transactions.getAggregatedValue(row.id, true);\n\n        let args = row.createEditEventArgs();\n\n        if (!commit) {\n            this.onRowEditCancel.emit(args);\n            this.transactions.endPending(false);\n        } else {\n            args = this.gridAPI.update_row(row, row.newData);\n        }\n        if (args.cancel) {\n            this.transactions.startPending();\n            return;\n        }\n        this.crudService.endRowEdit();\n        this.closeRowEditingOverlay();\n    }\n\n    // TODO: Refactor\n    /**\n     * Finishes the row transactions on the current row.\n     * If `commit === true`, passes them from the pending state to the data (or transaction service)\n     *\n     * Binding to the event\n     * ```html\n     * <button igxButton (click)=\"grid.endEdit(true)\">Commit Row</button>\n     * ```\n     * @param commit\n     */\n    public endEdit(commit = true, event?: Event) {\n        const row = this.crudService.row;\n        const cell = this.crudService.cell;\n        const columnindex = cell ? cell.column.index : -1;\n        const ri = row ? row.index : -1;\n\n        // TODO: Merge the crudService with wht BaseAPI service\n        if (!row && !cell) { return; }\n\n        commit ? this.gridAPI.submit_value() : this.gridAPI.escape_editMode();\n\n        if (!this.rowEditable || this.rowEditingOverlay && this.rowEditingOverlay.collapsed || !row) {\n            return;\n        }\n\n        this.endRowTransaction(commit, row);\n\n        const currentCell = this.gridAPI.get_cell_by_index(ri, columnindex);\n        if (currentCell && event) {\n            currentCell.nativeElement.focus();\n        }\n    }\n    /**\n     * @hidden\n     */\n    private rowEditingWheelHandler(event: WheelEvent) {\n        if (event.deltaY > 0) {\n            this.verticalScrollContainer.scrollNext();\n        } else {\n            this.verticalScrollContainer.scrollPrev();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get dataWithAddedInTransactionRows() {\n        const result = <any>cloneArray(this.gridAPI.get_all_data());\n        if (this.transactions.enabled) {\n            result.push(...this.transactions.getAggregatedChanges(true)\n                .filter(t => t.type === TransactionType.ADD)\n                .map(t => t.newValue));\n        }\n\n        return result;\n    }\n\n    public get dataLength() {\n        return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data().length;\n    }\n\n    public hasHorizontalScroll() {\n        return this.totalWidth - this.unpinnedWidth > 0;\n    }\n\n    protected _restoreVirtState(row) {\n         // check virtualization state of data record added from cache\n         // in case state is no longer valid - update it.\n         const rowForOf = row.virtDirRow;\n         const gridScrLeft = rowForOf.getHorizontalScroll().scrollLeft;\n         const left = -parseInt(rowForOf.dc.instance._viewContainer.element.nativeElement.style.left, 10);\n         const actualScrollLeft = left + rowForOf.getColumnScrollLeft(rowForOf.state.startIndex);\n        if (gridScrLeft !== actualScrollLeft) {\n            rowForOf.onHScroll(gridScrLeft);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean {\n        return this._exportExcel;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean {\n        return this._exportCsv;\n    }\n\n    /**\n    * @hidden\n    */\n    public isSummaryRow(rowData): boolean {\n        return rowData.summaries && (rowData.summaries instanceof Map);\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isAttachedToDom(): boolean {\n        return this.document.body.contains(this.nativeElement);\n    }\n\n\n\n    /**\n     * @hidden\n     */\n    public cachedViewLoaded(args: ICachedViewLoadedEventArgs) {\n        if (args.context['templateID'] === 'dataRow' && args.context['$implicit'] === args.oldContext['$implicit']) {\n            args.view.detectChanges();\n            const row = this.getRowByIndex(args.context.index);\n            if (row && row.cells) {\n                row.cells.forEach((c) => {\n                    c.highlightText(\n                        this.lastSearchInfo.searchText,\n                        this.lastSearchInfo.caseSensitive,\n                        this.lastSearchInfo.exactMatch);\n                });\n            }\n        }\n        if (this.hasHorizontalScroll()) {\n            const tmplId = args.context.templateID;\n            const index = args.context.index;\n            args.view.detectChanges();\n            const row = tmplId === 'dataRow' ? this.getRowByIndex(index) : null;\n            const summaryRow = tmplId === 'summaryRow' ? this.summariesRowList.toArray().find((sr) => sr.dataRowIndex === index) : null;\n            if (row && row instanceof IgxRowComponent) {\n                this._restoreVirtState(row);\n            } else if (summaryRow) {\n                this._restoreVirtState(summaryRow);\n            }\n        }\n    }\n}\n\n\n","import {\n    Directive, EmbeddedViewRef, Input, OnChanges, ChangeDetectorRef,\n    SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef, NgModule, NgZone, ViewRef, Output, EventEmitter\n} from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxTemplateOutlet]' })\nexport class IgxTemplateOutletDirective implements OnChanges {\n    private _viewRef !: EmbeddedViewRef<any>;\n\n    /**\n    * The embedded views cache. Collection is key-value paired.\n    * Key is the template id, value is the embedded view for the related template.\n    */\n    private _embeddedViewsMap: Map<string, EmbeddedViewRef<any>> = new Map();\n\n    @Input() public igxTemplateOutletContext !: Object;\n\n    @Input() public igxTemplateOutlet !: TemplateRef<any>;\n\n    @Output()\n    public onViewCreated = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onViewMoved = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onCachedViewLoaded = new EventEmitter<ICachedViewLoadedEventArgs>();\n\n    constructor(public _viewContainerRef: ViewContainerRef, private _zone: NgZone, public cdr: ChangeDetectorRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const actionType: TemplateOutletAction = this._getActionType(changes);\n        switch (actionType) {\n            case TemplateOutletAction.CreateView: this._recreateView(); break;\n            case TemplateOutletAction.MoveView: this._moveView(); break;\n            case TemplateOutletAction.UseCachedView: this._useCachedView(); break;\n            case TemplateOutletAction.UpdateViewContext: this._updateExistingContext(this.igxTemplateOutletContext); break;\n        }\n    }\n\n    private _recreateView() {\n        // detach old and create new\n        if (this._viewRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        }\n        if (this.igxTemplateOutlet) {\n            this._viewRef = this._viewContainerRef.createEmbeddedView(\n                this.igxTemplateOutlet, this.igxTemplateOutletContext);\n            this.onViewCreated.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            const tmplId = this.igxTemplateOutletContext['templateID'];\n            if (tmplId) {\n                // if context contains a template id, check if we have a view for that template already stored in the cache\n                // if not create a copy and add it to the cache in detached state.\n                // Note: Views in detached state do not appear in the DOM, however they remain stored in memory.\n                const res = this._embeddedViewsMap.get(this.igxTemplateOutletContext['templateID']);\n                if (!res) {\n                    this._embeddedViewsMap.set(this.igxTemplateOutletContext['templateID'], this._viewRef);\n                }\n            }\n        }\n    }\n\n    private _moveView() {\n        // using external view and inserting it in current view.\n        const view = this.igxTemplateOutletContext['moveView'];\n        const owner = this.igxTemplateOutletContext['owner'];\n        if (view !== this._viewRef) {\n            if (owner._viewContainerRef.indexOf(view) !== -1) {\n                // detach in case view it is attached somewhere else at the moment.\n                owner._viewContainerRef.detach(owner._viewContainerRef.indexOf(view));\n            }\n            if (this._viewRef && this._viewContainerRef.indexOf(this._viewRef) !== -1) {\n                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n            }\n            this._viewRef = view;\n            this._viewContainerRef.insert(view, 0);\n            this._updateExistingContext(this.igxTemplateOutletContext);\n            this.onViewMoved.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n        }\n    }\n    private _useCachedView() {\n        // use view for specific template cached in the current template outlet\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        // if view exists, but template has been changed and there is a view in the cache with the related template\n        // then detach old view and insert the stored one with the matching template\n        // after that update its context.\n        this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        this._viewRef = cachedView;\n        const oldContext = this._cloneContext(cachedView.context);\n        this._viewContainerRef.insert(this._viewRef, 0);\n        this._updateExistingContext(this.igxTemplateOutletContext);\n        this.onCachedViewLoaded.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext, oldContext });\n    }\n\n    private _shouldRecreateView(changes: SimpleChanges): boolean {\n        const ctxChange = changes['igxTemplateOutletContext'];\n        return !!changes['igxTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n    }\n\n    private _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            for (const propName of currCtxKeys) {\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _updateExistingContext(ctx: Object): void {\n        for (const propName of Object.keys(ctx)) {\n            (<any>this._viewRef.context)[propName] = (<any>this.igxTemplateOutletContext)[propName];\n        }\n    }\n\n    private _cloneContext(ctx: any): any {\n        const clone = {};\n        for (const propName of Object.keys(ctx)) {\n            clone[propName] = ctx[propName];\n        }\n        return clone;\n    }\n\n    private _getActionType(changes: SimpleChanges) {\n        const movedView = this.igxTemplateOutletContext['moveView'];\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        const shouldRecreate = this._shouldRecreateView(changes);\n        if (movedView) {\n            // view is moved from external source\n            return TemplateOutletAction.MoveView;\n        } else if (shouldRecreate && cachedView) {\n            // should recreate (template or context change) and there is a matching template in cache\n            return TemplateOutletAction.UseCachedView;\n        } else if (!this._viewRef || shouldRecreate) {\n            // no view or should recreate\n            return TemplateOutletAction.CreateView;\n        } else if (this.igxTemplateOutletContext) {\n            // has context, update context\n            return TemplateOutletAction.UpdateViewContext;\n        }\n    }\n}\nenum TemplateOutletAction {\n    CreateView,\n    MoveView,\n    UseCachedView,\n    UpdateViewContext\n}\n\nexport interface IViewChangeEventArgs {\n    owner: IgxTemplateOutletDirective;\n    view: EmbeddedViewRef<any>;\n    context: any;\n}\n\nexport interface ICachedViewLoadedEventArgs extends IViewChangeEventArgs {\n    oldContext: any;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTemplateOutletDirective],\n    entryComponents: [],\n    exports: [IgxTemplateOutletDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxTemplateOutletModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\n\n@Pipe({\n    name: 'igxGridSummaryDataPipe',\n    pure: true\n})\nexport class IgxSummaryDataPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    transform(id: string, trigger: number = 0) {\n        const summaryService = this.gridAPI.grid.summaryService;\n        return summaryService.calculateSummaries(\n            summaryService.rootSummaryID,\n            this.gridAPI.get_summary_data()\n        );\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n@Directive({\n    selector: '[igxProcessBarText]'\n})\nexport class IgxProcessBarTextTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Renderer2,\n    ViewChild,\n    ContentChild\n} from '@angular/core';\nimport { IgxProcessBarTextTemplateDirective } from './progressbar.common';\n\nconst ONE_PERCENT = 0.01;\nconst MIN_VALUE = 0;\n\nexport enum IgxTextAlign {\n    START = 'start',\n    CENTER = 'center',\n    END = 'end'\n}\n\nexport enum IgxProgressType {\n    DANGER = 'danger',\n    INFO = 'info',\n    WARNING = 'warning',\n    SUCCESS = 'success'\n}\n\nexport interface IChangeProgressEventArgs {\n    previousValue: number;\n    currentValue: number;\n}\n\nexport abstract class BaseProgress {\n    /**\n     * @hidden\n     */\n    private requestAnimationId: number = undefined;\n\n    /**\n     * @hidden\n     */\n    protected _valueInPercent = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _max = 100;\n    /**\n     * @hidden\n     */\n    protected _value = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _animate = true;\n\n    /**\n     * @hidden\n     */\n    protected _step;\n\n    /**\n     *Returns the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *public valuePercent(event){\n     *    let percentValue = this.progressBar.valueInPercent;\n     *    alert(percentValue);\n     *}\n     *```\n     */\n    public get valueInPercent(): number {\n        return this._valueInPercent;\n    }\n\n    /**\n     *Sets the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *    public setValue(event){\n     *    this.progressBar.valueInPercent = 56;\n     *}\n     * //...\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"setValue()\">setValue</button>\n     *```\n     */\n    public set valueInPercent(value: number) {\n        this._valueInPercent = value;\n    }\n\n    /**\n     * @hidden\n     */\n    protected runAnimation(val: number, step: number) {\n        this.requestAnimationId = requestAnimationFrame(\n            () => this.updateProgressSmoothly.call(this, val, step));\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressSmoothly(val: number, step: number) {\n        this._value += step;\n        const passedValue = convertInPercentage(val, this._max);\n        const progressValue = convertInPercentage(this._value, this._max);\n        if (this.valueInPercent === passedValue) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else if (this.isInLimitRange(progressValue, passedValue, step)) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else {\n            this.valueInPercent = progressValue;\n            this.requestAnimationId = requestAnimationFrame(() => this.updateProgressSmoothly.call(this, val, step));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressDirectly(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n\n    /**\n     * @hidden\n     */\n    protected directionFlow(currentValue: number, prevValue: number, step: number): number {\n        if (currentValue < prevValue) {\n            return step;\n        }\n\n        return -step;\n    }\n\n    /**\n     * @hidden\n     */\n    private isInLimitRange(val: number, comparator: number, step: number) {\n        return this.isExceedingUpperLimit(val, comparator, step) || this.isExceedingLowerLimit(val, comparator, step);\n    }\n\n    /**\n     * @hidden\n     *\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingUpperLimit(val: number, comparator: number, step: number) {\n        return val > comparator && step > 0;\n    }\n\n    /**\n     * @hidden\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingLowerLimit(val: number, comparator: number, step: number) {\n        return val < comparator && step < 0;\n    }\n\n    /**\n     * @hidden\n     * @param step\n     */\n    private updateProgress(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n}\nlet NEXT_LINEAR_ID = 0;\nlet NEXT_CIRCULAR_ID = 0;\n@Component({\n    selector: 'igx-linear-bar',\n    templateUrl: 'templates/linear-bar.component.html'\n})\nexport class IgxLinearProgressBarComponent extends BaseProgress {\n\n    /**\n     *Animation on progress `IgxLinearProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-linear-bar [animate]=\"false\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxLinearProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('attr.aria-valuemax')\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-linear-bar>\n     *```\n     */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    constructor() {\n        super();\n    }\n\n    @HostBinding('attr.aria-valuemin')\n    public valueMin = 0;\n\n    @HostBinding('class.igx-linear-bar')\n    public cssClass = 'igx-linear-bar';\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have striped style. By default it is set to false.\n     *```html\n     *<igx-linear-bar [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--striped')\n    @Input()\n    public striped = false;\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have indeterminate. By default it is set to false.\n     *```html\n     *<igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**An @Input property that sets the value of the `role` attribute. If not provided it will be automatically set to `progressbar`.\n     * ```html\n     *<igx-linear-bar role=\"progressbar\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'progressbar';\n\n    /**An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     *<igx-linear-bar [id]=\"'igx-linear-bar-55'\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-linear-bar-${NEXT_LINEAR_ID++}`;\n\n    /**\n     *Set the position that defines where the text is aligned.\n     Possible options - `IgxTextAlign.START` (default), `IgxTextAlign.CENTER`, `IgxTextAlign.END`.\n     *```typescript\n     *public positionCenter: IgxTextAlign;\n     *public ngOnInit() {\n     *    this.positionCenter = IgxTextAlign.CENTER;\n     *}\n     * //...\n     *```\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textAlign: IgxTextAlign = IgxTextAlign.START;\n\n    /**\n     *Set the text to be visible. By default it is set to true.\n     * ```html\n     *<igx-linear-bar type=\"default\" [textVisibility]=\"false\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     *Set the position that defines if the text should be aligned above the progress line. By default is set to false.\n     *```html\n     *<igx-linear-bar type=\"danger\" [textTop]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textTop = false;\n\n    /**\n     *Set a custom text that is displayed according to the defined position.\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public text: string;\n\n    /**\n     *Set type of the `IgxLinearProgressBarComponent`. Possible options - `default`, `success`, `info`, `warning`, and `danger`.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"100\" [value]=\"0\" type=\"danger\"></igx-linear-bar>\n     *```\n     */\n\n    @Input()\n    public type = 'default';\n\n     /**\n     *Returns value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     */\n    @HostBinding('attr.aria-valuenow')\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    set value(val) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInRange)) {\n            return;\n        }\n        const changedValues = {\n            currentValue: valueInRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this._animate && val >= this.step) {\n            super.runAnimation(valueInRange, updateValue);\n        } else {\n            super.updateProgressDirectly(valueInRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-linear-bar (onProgressChanged)=\"progressChange($event)\" type=\"success\">\n     *```\n     */\n    @Output() public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--danger')\n    public get danger() {\n        return this.type === IgxProgressType.DANGER;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--info')\n    public get info() {\n        return this.type === IgxProgressType.INFO;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--warning')\n    public get warning() {\n        return this.type === IgxProgressType.WARNING;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--success')\n    public get success() {\n        return this.type === IgxProgressType.SUCCESS;\n    }\n}\n\n@Component({\n    selector: 'igx-circular-bar',\n    templateUrl: 'templates/circular-bar.component.html'\n})\nexport class IgxCircularProgressBarComponent extends BaseProgress {\n\n    private readonly STROKE_OPACITY_DVIDER = 100;\n    private readonly STROKE_OPACITY_ADDITION = .2;\n\n    /** @hidden */\n    @HostBinding('class.igx-circular-bar')\n    public cssClass = 'igx-circular-bar';\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-circular-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-circular-bar>\n     *```\n     */\n    @Output()\n    public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-circular-bar [id]=\"'igx-circular-bar-55'\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-circular-bar-${NEXT_CIRCULAR_ID++}`;\n\n    /**\n     *An @Input property that sets the value of the `indeterminate` attribute. If not provided it will be automatically set to false.\n     *```html\n     *<igx-circular-bar [indeterminate]=\"true\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('class.igx-circular-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**\n     *Sets the text visibility. By default it is set to true.\n     *```html\n     *<igx-circular-bar [textVisibility]=\"false\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     * Sets/gets the text to be displayed inside the `igxCircularBar`.\n     *```html\n     *<igx-circular-bar text=\"Progress\"></igx-circular-bar>\n     *```\n     *```typescript\n     *let text = this.circularBar.text;\n     *```\n     */\n    @Input()\n    public text: string;\n\n    @ContentChild(IgxProcessBarTextTemplateDirective, { read: IgxProcessBarTextTemplateDirective })\n    public textTemplate: IgxProcessBarTextTemplateDirective;\n\n    /**\n     * @hidden\n    */\n    public get context(): any {\n        return {\n            $implicit: { value: this.value, valueInPercent: this.valueInPercent, max: this.max }\n        };\n    }\n\n    /**\n    *Animation on progress `IgxCircularProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-circular-bar [animate]=\"false\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxCircularProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-circular-bar [max]=\"200\" [value]=\"0\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     *```html\n     *<igx-circular-bar [max]=\"245\" [animate]=\"false\" [value]=\"currentValue\"></igx-circular-bar>\n     *```\n     */\n    get max(): number {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-circular-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-circular-bar>\n     *```\n    */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    /**\n     *Returns value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"getValue()\">Click</button>\n     *```\n     */\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```html\n     *<igx-circular-bar [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    set value(val: number) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInProperRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInProperRange)) {\n            return;\n        }\n\n        const changedValues = {\n            currentValue: valueInProperRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this.animate && val >= this.step) {\n            super.runAnimation(valueInProperRange, updateValue);\n        } else {\n            this.updateProgressDirectly(valueInProperRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    private _circleRadius = 46;\n    private _circumference = 2 * Math.PI * this._circleRadius;\n\n    @ViewChild('circle') private _svgCircle: ElementRef;\n\n    constructor(private renderer: Renderer2) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    public updateProgressSmoothly(val: number, step: number) {\n        // Set frames for the animation\n        const FRAMES = [{\n            strokeDashoffset: this.getProgress(this._value),\n            strokeOpacity: (this._value / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }, {\n            strokeDashoffset: this.getProgress(this.valueInPercent),\n            strokeOpacity: (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }];\n        this._svgCircle.nativeElement.animate(FRAMES, {\n            easing: 'ease-out',\n            fill: 'forwards'\n        });\n\n        super.updateProgressSmoothly(val, step);\n    }\n\n    /**\n     * @hidden\n    */\n    public get textContent(): string {\n        return this.text;\n    }\n\n    /**\n     * @hidden\n    */\n    public updateProgressDirectly(val: number) {\n        super.updateProgressDirectly(val);\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-dashoffset',\n            this.getProgress(this.valueInPercent));\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-opacity',\n            (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION);\n    }\n\n    private getProgress(percentage: number) {\n        return this._circumference - (percentage * this._circumference / 100);\n    }\n}\n\nexport function getValueInProperRange(value: number, max: number, min = 0): number {\n    return Math.max(Math.min(value, max), min);\n}\n\nexport function convertInPercentage(value: number, max: number) {\n    return Math.floor(100 * value / max);\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    exports: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    imports: [CommonModule]\n})\nexport class IgxProgressBarModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { DataUtil } from '../data-operations/data-util';\nimport { cloneArray } from '../core/utils';\n\n@Pipe({\n    name: 'igxCellStyles'\n})\nexport class IgxGridCellStylesPipe implements PipeTransform {\n\n    transform(cssClasses: any, _value: any, data: any, field: string): string {\n        if (!cssClasses) {\n            return '';\n        }\n\n        const result = [];\n\n        Object.entries(cssClasses).forEach(([cssClass, callbackOrValue]) => {\n            const apply = typeof callbackOrValue === 'function' ? callbackOrValue(data, field) : callbackOrValue;\n            if (apply) {\n                result.push(cssClass);\n            }\n        });\n\n        return result.join(' ');\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxNotGrouped'\n})\nexport class IgxGridNotGroupedPipe implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => !item.columnGroup);\n    }\n}\n\n@Pipe({\n    name: 'igxTopLevel'\n})\nexport class IgxGridTopLevelColumns implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => item.level === 0);\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\nexport class IgxGridFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridTransaction',\n    pure: true\n})\nexport class IgxGridTransactionPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    transform(collection: any[], id: string, pipeTrigger: number) {\n        const grid: IgxGridBaseComponent = this.gridAPI.grid;\n\n        if (collection && grid.transactions.enabled) {\n            const result = DataUtil.mergeTransactions(\n                cloneArray(collection),\n                grid.transactions.getAggregatedChanges(true),\n                grid.primaryKey);\n            return result;\n        }\n        return collection;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxDatePipeComponent, IgxDecimalPipeComponent } from './grid.common';\nimport {\n    IgxGridFilterConditionPipe,\n    IgxGridTransactionPipe,\n    IgxGridNotGroupedPipe,\n    IgxGridTopLevelColumns,\n    IgxGridCellStylesPipe\n} from './grid-common.pipes';\n\n@NgModule({\n    declarations: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe\n    ],\n    exports: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe\n    ],\n    imports: [\n        CommonModule\n    ]\n  })\nexport class IgxGridPipesModule { }\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../../column.component';\nimport { IgxGridBaseComponent } from '../../grid-base.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-column-moving',\n    templateUrl: './excel-style-column-moving.component.html'\n})\nexport class IgxExcelStyleColumnMovingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: IgxGridBaseComponent;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    constructor() {}\n\n    private get visibleColumns() {\n        return this.grid.visibleColumns.filter(col => !(col instanceof IgxColumnGroupComponent));\n    }\n\n    get canNotMoveLeft() {\n        return this.column.visibleIndex === 0 ||\n            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && this.column.disablePinning) ||\n            (this.column.level !== 0 && !this.findColumn(0, this.visibleColumns));\n    }\n\n    get canNotMoveRight() {\n        return this.column.visibleIndex === this.visibleColumns.length - 1 ||\n            (this.column.level !== 0 && !this.findColumn(1, this.visibleColumns));\n    }\n\n    public onMoveButtonClicked(moveDirection) {\n        let targetColumn;\n        if (this.column.pinned) {\n            if (this.column.isLastPinned && moveDirection === 1) {\n                targetColumn = this.grid.unpinnedColumns[0];\n                moveDirection = 0;\n            } else {\n                targetColumn = this.findColumn(moveDirection, this.grid.pinnedColumns);\n            }\n        } else if (this.grid.unpinnedColumns.indexOf(this.column) === 0 && moveDirection === 0) {\n            targetColumn = this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1];\n            moveDirection = 1;\n        } else {\n            targetColumn = this.findColumn(moveDirection, this.grid.unpinnedColumns);\n        }\n        this.grid.moveColumn(this.column, targetColumn, moveDirection);\n    }\n\n    private findColumn(moveDirection: number, columns: IgxColumnComponent[]) {\n        let index = columns.indexOf(this.column);\n        if (moveDirection === 0) {\n            while (index > 0) {\n                index--;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        } else {\n            while (index < columns.length - 1) {\n                index++;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        }\n    }\n}\n","import { Directive, TemplateRef, EventEmitter, QueryList, Optional, Inject } from '@angular/core';\nimport { DisplayDensityBase, IDisplayDensityOptions, DisplayDensityToken } from '../core/density';\n\nexport interface IListChild {\n    index: number;\n}\n\n/** @hidden */\nexport abstract class IgxListBase extends DisplayDensityBase {\n    onItemClicked: EventEmitter<any>;\n    allowLeftPanning: boolean;\n    allowRightPanning: boolean;\n    panEndTriggeringThreshold: number;\n    onLeftPan: EventEmitter<any>;\n    onRightPan: EventEmitter<any>;\n    onPanStateChange: EventEmitter<any>;\n    children: QueryList<any>;\n    listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n    listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n}\n\nexport enum IgxListPanState { NONE, LEFT, RIGHT }\n\n@Directive({\n    selector: '[igxEmptyList]'\n})\nexport class IgxEmptyListTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxDataLoading]'\n})\nexport class IgxDataLoadingTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemLeftPanning]'\n})\nexport class IgxListItemLeftPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemRightPanning]'\n})\nexport class IgxListItemRightPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Inject, Injectable, NgZone } from '@angular/core';\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\n\nconst EVENT_SUFFIX = 'precise';\n\n/**\n * Touch gestures manager based on Hammer.js\n * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.\n * @hidden\n */\n@Injectable()\nexport class HammerGesturesManager {\n    /**\n     * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.\n     */\n    protected hammerOptions: HammerOptions = {\n        // D.P. #447 Force TouchInput due to PointerEventInput bug (https://github.com/hammerjs/hammer.js/issues/1065)\n        // see https://github.com/IgniteUI/igniteui-angular/issues/447#issuecomment-324601803\n        inputClass: Hammer.TouchInput,\n        recognizers: [\n            [ Hammer.Pan, { threshold: 0 } ],\n            [ Hammer.Pinch, { enable: true } ],\n            [ Hammer.Rotate, { enable: true } ],\n            [ Hammer.Swipe, {\n                direction: Hammer.DIRECTION_HORIZONTAL\n            }]\n        ]\n    };\n\n    private _hammerManagers: Array<{ element: EventTarget, manager: HammerManager; }> = [];\n\n    constructor(private _zone: NgZone, @Inject(DOCUMENT) private doc: any) {\n    }\n\n    public supports(eventName: string): boolean {\n        return eventName.toLowerCase().endsWith('.' + EVENT_SUFFIX);\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     */\n    public addEventListener(element: HTMLElement,\n                            eventName: string,\n                            eventHandler: (eventObj) => void,\n                            options: object = null): () => void {\n\n        // Creating the manager bind events, must be done outside of angular\n        return this._zone.runOutsideAngular(() => {\n            let mc: HammerManager = this.getManagerForElement(element);\n            if (mc === null) {\n                // new Hammer is a shortcut for Manager with defaults\n                mc = new Hammer(element, this.hammerOptions);\n                this.addManagerForElement(element, mc);\n            }\n            const handler = (eventObj) => { this._zone.run(() => { eventHandler(eventObj); }); };\n            mc.on(eventName, handler);\n            return () => { mc.off(eventName, handler); };\n        });\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     *\n     * @param target Can be one of either window, body or document(fallback default).\n     */\n    public addGlobalEventListener(target: string, eventName: string, eventHandler: (eventObj) => void): () => void {\n        const element = this.getGlobalEventTarget(target);\n\n        // Creating the manager bind events, must be done outside of angular\n        return this.addEventListener(element as HTMLElement, eventName, eventHandler);\n    }\n\n    /**\n     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.\n     * Supported: window, document, body. Defaults to document for invalid args.\n     * @param target Target name\n     */\n    public getGlobalEventTarget(target: string): EventTarget {\n        return getDOM().getGlobalEventTarget(this.doc, target);\n    }\n\n    /**\n     * Set HammerManager options.\n     *\n     * @param element The DOM element used to create the manager on.\n     *\n     * ### Example\n     *\n     * ```ts\n     * manager.setManagerOption(myElem, \"pan\", { pointers: 1 });\n     * ```\n     */\n    public setManagerOption(element: EventTarget, event: string, options: any) {\n        const manager = this.getManagerForElement(element);\n        manager.get(event).set(options);\n    }\n\n    /**\n     * Add an element and manager map to the internal collection.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public addManagerForElement(element: EventTarget, manager: HammerManager) {\n        this._hammerManagers.push({element, manager});\n    }\n\n    /**\n     * Get HammerManager for the element or null\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public getManagerForElement(element: EventTarget): HammerManager {\n        const result =  this._hammerManagers.filter((value, index, array) => {\n            return value.element === element;\n        });\n        return result.length ? result[0].manager : null;\n    }\n\n    /**\n     * Destroys the HammerManager for the element, removing event listeners in the process.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public removeManagerForElement(element: HTMLElement) {\n        let index: number = null;\n        for (let i = 0; i < this._hammerManagers.length; i++) {\n            if (element === this._hammerManagers[i].element) {\n                index = i;\n                break;\n            }\n        }\n        if (index !== null) {\n            const item = this._hammerManagers.splice(index, 1)[0];\n            // destroy also\n            item.manager.destroy();\n        }\n    }\n\n    /** Destroys all internally tracked HammerManagers, removing event listeners in the process. */\n    public destroy() {\n        for (const item of this._hammerManagers) {\n            item.manager.destroy();\n        }\n        this._hammerManagers = [];\n    }\n}\n","\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\n\nimport {\n    IgxListPanState,\n    IListChild,\n    IgxListBase\n} from './list.common';\n\nimport { HammerGesturesManager } from '../core/touch';\n\n/**\n * The Ignite UI List Item component is a container intended for row items in the Ignite UI for Angular List component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-list-item',\n    templateUrl: 'list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IgxListItemComponent implements IListChild {\n\n    /**\n     *@hidden\n     */\n    private _panState: IgxListPanState = IgxListPanState.NONE;\n\n    /**\n     *@hidden\n     */\n    private panOffset = 0;\n\n    /**\n     * @hidden\n     */\n    private _index: number = null;\n\n    /**\n     *@hidden\n     */\n    private lastPanDir = IgxListPanState.NONE;\n\n    /**\n     * Provides a reference to the template's base element shown when left panning a list item.\n     * ```typescript\n     * const leftPanTmpl = this.listItem.leftPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('leftPanningTmpl')\n    public leftPanningTemplateElement;\n\n    /**\n     * Provides a reference to the template's base element shown when right panning a list item.\n     * ```typescript\n     * const rightPanTmpl = this.listItem.rightPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('rightPanningTmpl')\n    public rightPanningTemplateElement;\n\n    constructor(\n        public list: IgxListBase,\n        private elementRef: ElementRef,\n        private _renderer: Renderer2) {\n    }\n\n    /**\n     * Sets/gets whether the `list item` is a header.\n     * ```html\n     * <igx-list-item [isHeader] = \"true\">Header</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHeader =  this.listItem.isHeader;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public isHeader: boolean;\n\n    /**\n     * Sets/gets whether the `list item` is hidden.\n     * By default the `hidden` value is `false`.\n     * ```html\n     * <igx-list-item [hidden] = \"true\">Hidden Item</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHidden =  this.listItem.hidden;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public hidden = false;\n\n    /**\n     * Gets the `role` attribute of the `list item`.\n     * ```typescript\n     * let itemRole =  this.listItem.role;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return this.isHeader ? 'separator' : 'listitem';\n    }\n\n    /**\n     * Sets/gets the `aria-label` attribute of the `list item`.\n     * ```typescript\n     * this.listItem.ariaLabel = \"Item1\";\n     * ```\n     * ```typescript\n     * let itemAriaLabel = this.listItem.ariaLabel;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel: string;\n\n    /**\n     * Gets the `touch-action` style of the `list item`.\n     * ```typescript\n     * let touchAction = this.listItem.touchAction;\n     * ```\n     */\n    @HostBinding('style.touch-action')\n    public touchAction = 'pan-y';\n\n    /**\n     * Indicates whether `list item` should have header style.\n     * ```typescript\n     * let headerStyle =  this.listItem.headerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__header')\n    get headerStyle(): boolean {\n        return this.isHeader;\n    }\n\n    /**\n     * Applies the inner style of the `list item` if the item is not counted as header.\n     * ```typescript\n     * let innerStyle =  this.listItem.innerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__item-base')\n    get innerStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Returns string value which describes the display mode of the `list item`.\n     * ```typescript\n     * let isHidden = this.listItem.display;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('style.display')\n    get display(): string {\n        return this.hidden ? 'none' : '';\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(evt) {\n        this.list.onItemClicked.emit({ item: this, event: evt, direction: this.lastPanDir });\n        this.lastPanDir = IgxListPanState.NONE;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panstart', ['$event'])\n    panStart(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panmove', ['$event'])\n    panMove(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n        const isPanningToLeft = ev.deltaX < 0;\n        if (isPanningToLeft && this.isTrue(this.list.allowLeftPanning)) {\n            this.showLeftPanTemplate();\n            this.setContentElementLeft(Math.max(this.maxLeft, ev.deltaX));\n        } else if (!isPanningToLeft && this.isTrue(this.list.allowRightPanning)) {\n            this.showRightPanTemplate();\n            this.setContentElementLeft(Math.min(this.maxRight, ev.deltaX));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panend', ['$event'])\n    panEnd(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n\n        // the translation offset of the current list item content\n        const relativeOffset = this.panOffset;\n        const widthTriggeringGrip = this.width * this.list.panEndTriggeringThreshold;\n\n        if (relativeOffset === 0) {\n            return; // no panning has occured\n        }\n\n        const dir = relativeOffset > 0 ? IgxListPanState.RIGHT : IgxListPanState.LEFT;\n        this.lastPanDir = dir;\n\n        const oldPanState = this._panState;\n        if (Math.abs(relativeOffset) < widthTriggeringGrip) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n            this.hideLeftAndRightPanTemplates();\n            return;\n        }\n\n        const args = { item: this, direction: dir, keepItem: false};\n\n        if (dir === IgxListPanState.LEFT) {\n            this.list.onLeftPan.emit(args);\n        } else {\n            this.list.onRightPan.emit(args);\n        }\n\n        if (args.keepItem === true) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n        } else {\n            if (dir === IgxListPanState.LEFT) {\n                this.setContentElementLeft(this.maxLeft);\n                this._panState = IgxListPanState.LEFT;\n            } else {\n                this.setContentElementLeft(this.maxRight);\n                this._panState = IgxListPanState.RIGHT;\n            }\n        }\n\n        if (oldPanState !== this._panState) {\n            const args2 = { oldState: oldPanState, newState: this._panState, item: this };\n            this.list.onPanStateChange.emit(args2);\n        }\n        this.hideLeftAndRightPanTemplates();\n    }\n\n    /**\n     *@hidden\n     */\n    private showLeftPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('visible', 'hidden');\n    }\n\n    /**\n     *@hidden\n     */\n    private showRightPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('hidden', 'visible');\n    }\n\n    /**\n     *@hidden\n     */\n    private hideLeftAndRightPanTemplates() {\n        setTimeout(() => {\n            this.setLeftAndRightTemplatesVisibility('hidden', 'hidden');\n        }, 500);\n    }\n\n    /**\n     *@hidden\n     */\n    private setLeftAndRightTemplatesVisibility(leftVisibility, rightVisibility) {\n        if (this.leftPanningTemplateElement && this.leftPanningTemplateElement.nativeElement) {\n            this.leftPanningTemplateElement.nativeElement.style.visibility = leftVisibility;\n        }\n        if (this.rightPanningTemplateElement && this.rightPanningTemplateElement.nativeElement) {\n            this.rightPanningTemplateElement.nativeElement.style.visibility = rightVisibility;\n        }\n    }\n\n    /**\n     * Gets the `panState` of a `list item`.\n     * ```typescript\n     * let itemPanState =  this.listItem.panState;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get panState(): IgxListPanState {\n        return this._panState;\n    }\n\n    /**\n     * Gets the `index` of a `list item`.\n     * ```typescript\n     * let itemIndex =  this.listItem.index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public get index(): number {\n        return this._index !== null ? this._index : this.list.children.toArray().indexOf(this);\n    }\n\n    /**\n     * Sets the `index` of the `list item`.\n     * ```typescript\n     * this.listItem.index = index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public set index(value: number) {\n        this._index = value;\n    }\n\n    /**\n     * Returns an element reference to the list item.\n     * ```typescript\n     * let listItemElement =  this.listItem.element.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Returns a reference container which contains the list item's content.\n     * ```typescript\n     * let listItemContainer =  this.listItem.contentElement.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get contentElement() {\n        const candidates = this.element.getElementsByClassName('igx-list__item-content');\n        return (candidates && candidates.length > 0) ? candidates[0] : null;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list item container`\n     * by providing the `$implicit` declaration which is the `IgxListItemComponent` itself.\n     * ```typescript\n     * let listItemComponent = this.listItem.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Gets the width of a `list item`.\n     * ```typescript\n     * let itemWidth = this.listItem.width;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get width() {\n        if (this.element) {\n            return this.element.offsetWidth;\n        }\n    }\n\n    /**\n     * Gets the maximum left position of the `list item`.\n     * ```typescript\n     * let maxLeft = this.listItem.maxLeft;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxLeft() {\n        return -this.width;\n    }\n\n    /**\n     * Gets the maximum right position of the `list item`.\n     * ```typescript\n     * let maxRight = this.listItem.maxRight;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxRight() {\n        return this.width;\n    }\n\n    /**\n     *@hidden\n     */\n    private setContentElementLeft(value: number) {\n        this.panOffset = value;\n        this.contentElement.style.transform = 'translateX(' + value + 'px)';\n    }\n\n    /**\n     *@hidden\n     */\n    private isTrue(value: boolean): boolean {\n        if (typeof (value) === 'boolean') {\n            return value;\n        } else {\n            return value === 'true';\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    Optional,\n    Inject\n} from '@angular/core';\n\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\nimport { IgxListItemComponent } from './list-item.component';\nimport {\n    IgxListBase,\n    IgxDataLoadingTemplateDirective,\n    IgxEmptyListTemplateDirective,\n    IgxListPanState,\n    IgxListItemLeftPanningTemplateDirective,\n    IgxListItemRightPanningTemplateDirective\n} from './list.common';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../core/density';\n\nlet NEXT_ID = 0;\nexport interface IPanStateChangeEventArgs {\n    oldState: IgxListPanState;\n    newState: IgxListPanState;\n    item: IgxListItemComponent;\n}\n\nexport interface IListItemClickEventArgs {\n    item: IgxListItemComponent;\n    event: Event;\n    direction: IgxListPanState;\n}\n\nexport interface IListItemPanningEventArgs {\n    item: IgxListItemComponent;\n    direction: IgxListPanState;\n    keepItem: boolean;\n}\n\n/**\n * **Ignite UI for Angular List** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/list.html)\n *\n * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering\n * of list items. Each list item is completely templateable and will support any valid HTML or Angular component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    selector: 'igx-list',\n    templateUrl: 'list.component.html',\n    providers: [{ provide: IgxListBase, useExisting: IgxListComponent }]\n})\nexport class IgxListComponent extends IgxListBase {\n\n    constructor(public element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns a collection of all items and headers in the list.\n     * ```typescript\n     * let listChildren: QueryList = this.list.children;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChildren(forwardRef(() => IgxListItemComponent))\n    public children: QueryList<IgxListItemComponent>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected get sortedChildren(): IgxListItemComponent[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxListItemComponent, b: IgxListItemComponent) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `false`.\n     * ```typescript\n     * let emptyTemplate = this.list.emptyListTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective })\n    public emptyListTemplate: IgxEmptyListTemplateDirective;\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `true`.\n     * ```typescript\n     * let loadingTemplate = this.list.dataLoadingTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective })\n    public dataLoadingTemplate: IgxDataLoadingTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when left panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemLeftPanTmpl = this.list.listItemLeftPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective })\n    public listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when right panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemRightPanTmpl = this.list.listItemRightPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective })\n    public listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    /**\n     * Provides a threshold after which the item's panning will be completed automatically.\n     * By default this property is set to 0.5 which is 50% of the list item's width.\n     * ```typescript\n     * this.list.panEndTriggeringThreshold = 0.8;\n     * ```\n     */\n    @Input()\n    public panEndTriggeringThreshold = 0.5;\n\n    /**@hidden*/\n    @ViewChild('defaultEmptyList', { read: TemplateRef })\n    protected defaultEmptyListTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ViewChild('defaultDataLoading', { read: TemplateRef })\n    protected defaultDataLoadingTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the `id` of the list.\n     * If not set, the `id` of the first list component will be `\"igx-list-0\"`.\n     * ```html\n     * <igx-list id = \"my-first-list\"></igx-list>\n     * ```\n     * ```typescript\n     * let listId =  this.list.id;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-list-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the left panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLeftPanningAllowed = this.list.allowLeftPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowLeftPanning = false;\n\n    /**\n     * Sets/gets whether the right panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowRightPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isRightPanningAllowed = this.list.allowRightPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowRightPanning = false;\n\n    /**\n     * Sets/gets whether the list is currently loading data.\n     * Set it to display the dataLoadingTemplate while data is being retrieved.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [isLoading]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLoading = this.list.isLoading;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public isLoading = false;\n\n    /**\n     * Emits an event within the current list when left pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\" (onLeftPan)=\"onLeftPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onLeftPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n     * Emits an event within the current list when right pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowRightPanning]=\"true\" (onRightPan)=\"onRightPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onRightPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n    * Emits an event within the current list when pan gesture is executed on list item.\n    * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.\n    * ```html\n    * <igx-list (onPanStateChange) = \"onPanStateChange($event)\"></igx-list>\n    * ```\n    * @memberof IgxListComponent\n    */\n    @Output()\n    public onPanStateChange = new EventEmitter<IPanStateChangeEventArgs>();\n\n    /**\n     * Emits an event within the current list when a list item has been clicked.\n     * Provides references to the `IgxListItemComponent` and `Event` as event arguments.\n     *  ```html\n     * <igx-list (onItemClicked) = \"onItemClicked($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onItemClicked = new EventEmitter<IListItemClickEventArgs>();\n\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let listRole =  this.list.role;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'list';\n    }\n\n    /**\n     * Returns boolean indicating if the list is empty.\n     * ```typescript\n     * let isEmpty =  this.list.isListEmpty;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('class.igx-list-empty')\n    public get isListEmpty(): boolean {\n        return !this.children || this.children.length === 0;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list')\n    public get cssClass(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list--compact')\n    public get cssClassCompact(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list--cosy')\n    public get cssClassCosy(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * Returns the `items` in the list excluding the headers.\n     * ```typescript\n     * let listItems: IgxListItemComponent[] = this.list.items;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get items(): IgxListItemComponent[] {\n        const items: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n        return items;\n    }\n\n    /**\n     * Returns the headers in the list.\n     * ```typescript\n     * let listHeaders: IgxListItemComponent[] =  this.list.headers;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get headers(): IgxListItemComponent[] {\n        const headers: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list container`\n     * by providing the `$implicit` declaration which is the `IgxListComponent` itself.\n     * ```typescript\n     * let listComponent =  this.list.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Returns the `template` of an empty list.\n     * ```typescript\n     * let listTemplate = this.list.template;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.isLoading) {\n            return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;\n        } else {\n            return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxListComponent, IgxListItemComponent,\n        IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective],\n    exports: [IgxListComponent, IgxListItemComponent,\n        IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective],\n    imports: [CommonModule, IgxRippleModule]\n})\nexport class IgxListModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { FilterListItem } from './grid.excel-style-filtering.component';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'excelStyleSearchFilter'\n})\nexport class IgxExcelStyleSearchFilterPipe implements PipeTransform {\n    transform(items: FilterListItem[], searchText: string): any[] {\n        if (!items || !items.length) {\n            return [];\n        }\n\n        if (!searchText) {\n            return items;\n        }\n\n        searchText = searchText.toLowerCase();\n        const result = items.filter((it, i) => (i === 0 && it.isSpecial) ||\n            (it.value || it.value === 0) &&\n            it.value.toString().toLowerCase().indexOf(searchText) > -1);\n\n        return result.length > 1 ? result : [];\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n    IgxGridExcelStyleFilteringComponent,\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective\n} from './grid.excel-style-filtering.component';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { IgxExcelStyleColumnMovingComponent } from './excel-style-column-moving.component';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { IgxSelectionAPIService } from '../../../core/selection';\nimport { FormsModule } from '@angular/forms';\nimport { IgxGridPipesModule } from '../../grid-pipes.module';\nimport { IgxButtonModule } from '../../../directives/button/button.directive';\nimport { IgxButtonGroupModule } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDatePickerModule } from '../../../date-picker/date-picker.component';\nimport { IgxIconModule } from '../../../icon/index';\nimport { IgxRippleModule } from '../../../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../../../input-group/input-group.component';\nimport { IgxDropDownModule } from '../../../drop-down/index';\nimport { IgxForOfModule } from '../../../directives/for-of/for_of.directive';\nimport { IgxCheckboxModule } from '../../../checkbox/checkbox.component';\nimport { IgxFilterModule } from '../../../directives/filter/filter.directive';\nimport { IgxToggleModule } from '../../../directives/toggle/toggle.directive';\nimport { IgxListModule } from '../../../list/list.component';\nimport { IgxExcelStyleSearchFilterPipe } from './excel-style-search.pipe';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingComponent,\n        IgxExcelStyleColumnMovingComponent,\n        IgxExcelStyleSearchComponent,\n        IgxExcelStyleCustomDialogComponent,\n        IgxExcelStyleDefaultExpressionComponent,\n        IgxExcelStyleDateExpressionComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleSearchFilterPipe\n    ],\n    exports: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleDateExpressionComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxGridPipesModule,\n        IgxButtonModule,\n        IgxButtonGroupModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxDropDownModule,\n        IgxForOfModule,\n        IgxCheckboxModule,\n        IgxFilterModule,\n        IgxToggleModule,\n        IgxListModule\n    ],\n    entryComponents: [\n        IgxGridExcelStyleFilteringComponent\n    ],\n    providers: [\n        IgxSelectionAPIService\n    ]\n})\nexport class IgxGridExcelStyleFilteringModule {\n\n}\n","import { Directive, Input, OnDestroy, NgModule } from '@angular/core';\nimport { IgxDragDirective } from '../directives/dragdrop/dragdrop.directive';\nimport { IRowDragEndEventArgs, IRowDragStartEventArgs } from './grid-base.component';\nimport { KEYS } from '../core/utils';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { IgxRowComponent, IgxGridBaseComponent, IGridDataBindable } from './grid';\n\n\nconst ghostBackgroundClass = 'igx-grid__tr--ghost';\nconst gridCellClass = 'igx-grid__td';\nconst rowSelectedClass = 'igx-grid__tr--selected';\nconst cellSelectedClass = 'igx-grid__td--selected';\nconst cellActiveClass = 'igx-grid__td--active';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowDrag]'\n})\nexport class IgxRowDragDirective extends IgxDragDirective implements OnDestroy {\n    private row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    private subscription$: Subscription;\n    private _rowDragStarted = false;\n\n    @Input('igxRowDrag')\n    set data(val) {\n        this.row = val;\n    }\n\n    get data() {\n        return this.row;\n    }\n\n    public onPointerDown(event) {\n        event.preventDefault();\n        this._rowDragStarted = false;\n        super.onPointerDown(event);\n    }\n\n    public onPointerMove(event) {\n        super.onPointerMove(event);\n        if (this._dragStarted && !this._rowDragStarted) {\n            this._rowDragStarted = true;\n            const args: IRowDragStartEventArgs = {\n                owner: this,\n                dragData: this.row,\n                cancel: false\n            };\n\n            this.row.grid.onRowDragStart.emit(args);\n            if (args.cancel) {\n                this.dragGhost.parentNode.removeChild(this.dragGhost);\n                this.dragGhost = null;\n                this._dragStarted = false;\n                this._clicked = false;\n                return;\n            }\n            this.row.dragging = true;\n            this.row.grid.rowDragging = true;\n            this.row.grid.markForCheck();\n\n            this.subscription$ = fromEvent(this.row.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n                if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                    this._lastDropArea = false;\n                    this.onPointerUp(event);\n                }\n            });\n        }\n    }\n\n    public onPointerUp(event) {\n\n        if (!this._clicked) {\n            return;\n        }\n\n        const args: IRowDragEndEventArgs = {\n            owner: this,\n            dragData: this.row,\n            animation: false\n        };\n        this.zone.run(() => {\n            this.row.grid.onRowDragEnd.emit(args);\n        });\n\n        if (args.animation) {\n            this.animateOnRelease = true;\n        }\n\n        const dropArea = this._lastDropArea;\n        super.onPointerUp(event);\n        if (!dropArea && this.animateOnRelease) {\n            this.dragGhost.addEventListener('transitionend',  this.transitionEndEvent, false);\n        }   else {\n            this.endDragging();\n        }\n    }\n\n    protected createDragGhost(event) {\n        this.row.grid.endEdit(true);\n        this.row.grid.markForCheck();\n        super.createDragGhost(event, this.row.nativeElement);\n\n        const ghost = this.dragGhost;\n\n        const gridRect = this.row.grid.nativeElement.getBoundingClientRect();\n        const rowRect = this.row.nativeElement.getBoundingClientRect();\n        ghost.style.overflow = 'hidden';\n        ghost.style.width = gridRect.width + 'px';\n        ghost.style.height = rowRect.height + 'px';\n\n        this.renderer.addClass(ghost, ghostBackgroundClass);\n        this.renderer.removeClass(ghost, rowSelectedClass);\n\n        const ghostCells = ghost.getElementsByClassName(gridCellClass);\n        for (let index = 0; index < ghostCells.length; index++) {\n            this.renderer.removeClass(ghostCells[index], cellSelectedClass);\n            this.renderer.removeClass(ghostCells[index], cellActiveClass);\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$ && !this.subscription$.closed) {\n            this.subscription$.unsubscribe();\n        }\n    }\n\n    private endDragging() {\n        this.onTransitionEnd(null);\n        this.row.dragging = false;\n        this.row.grid.rowDragging = false;\n        this.row.grid.markForCheck();\n        this._unsubscribe();\n    }\n\n    private transitionEndEvent = (evt?) => {\n        if (this.dragGhost) {\n            this.dragGhost.removeEventListener('transitionend', this.transitionEndEvent, false);\n        }\n        this.endDragging();\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxDragIndicatorIcon]'\n})\n\nexport class IgxDragIndicatorIconDirective {\n}\n\n@NgModule({\n    declarations: [IgxRowDragDirective, IgxDragIndicatorIconDirective],\n    entryComponents: [],\n    exports: [IgxRowDragDirective, IgxDragIndicatorIconDirective],\n    imports: []\n})\n\nexport class IgxRowDragModule {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDatePickerModule } from '../date-picker/date-picker.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\nimport { IgxForOfModule } from '../directives/for-of/for_of.directive';\nimport { IgxTemplateOutletModule } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxTextHighlightModule } from '../directives/text-highlight/text-highlight.directive';\nimport { IgxTextSelectionModule } from '../directives/text-selection/text-selection.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent, IgxColumnGroupComponent, IgxColumnLayoutComponent } from './column.component';\nimport { IgxColumnHidingModule } from './column-hiding.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellFooterTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxColumnResizerDirective,\n    IgxColumnMovingDragDirective,\n    IgxColumnMovingDropDirective,\n    IgxGridBodyDirective,\n    IgxColumnMovingService,\n    IgxFilterCellTemplateDirective,\n    IgxResizeHandleDirective\n} from './grid.common';\nimport { IgxGridTransaction } from './grid-base.component';\nimport { IgxRowComponent } from './row.component';\nimport { IgxChipsModule } from '../chips/chips.module';\nimport { IgxDragDropModule } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxButtonGroupModule } from '../buttonGroup/buttonGroup.component';\nimport { IgxColumnPinningModule } from './column-pinning.component';\nimport { IgxBaseTransactionService } from '../services/transaction/base-transaction';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditActionsDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditTabStopDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { IgxSummaryCellComponent } from './summaries/summary-cell.component';\nimport { IgxSummaryDataPipe } from './summaries/grid-root-summary.pipe';\nimport { IgxGridSelectionService } from '../core/grid-selection';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxProgressBarModule } from '../progressbar/progressbar.component';\nimport { IgxFilterModule } from '../directives/filter/filter.directive';\nimport { IgxGridPipesModule } from './grid-pipes.module';\nimport { IgxGridExcelStyleFilteringModule } from './filtering/excel-style/grid.excel-style-filtering.module';\nimport { IgxGridDragSelectDirective } from './drag-select.directive';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\nimport { IgxRowDragModule } from './row-drag.directive';\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxGridHeaderComponent,\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxResizeHandleDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridBodyDirective,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxSummaryDataPipe,\n        IgxRowComponent,\n        IgxGridHeaderGroupComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryCellComponent,\n        IgxGridDragSelectDirective,\n        IgxGridColumnResizerComponent,\n        IgxFilterCellTemplateDirective\n    ],\n    entryComponents: [\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent\n    ],\n    exports: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxGridHeaderComponent,\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridBodyDirective,\n        IgxRowComponent,\n        IgxSummaryDataPipe,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxProgressBarModule,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxGridHeaderGroupComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryCellComponent,\n        IgxGridDragSelectDirective,\n        IgxGridColumnResizerComponent,\n        IgxFilterModule,\n        IgxGridPipesModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxFilterCellTemplateDirective,\n        IgxRowDragModule\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxProgressBarModule,\n        IgxFilterModule,\n        IgxGridPipesModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxRowDragModule\n    ],\n    providers: [\n        IgxGridSelectionService,\n        IgxSelectionAPIService,\n        IgxColumnMovingService,\n        IgxGridNavigationService,\n        IgxColumnResizingService,\n        IgxGridSummaryService,\n        { provide: IgxGridTransaction, useClass: IgxBaseTransactionService }\n    ]\n})\nexport class IgxGridCommonModule { }\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\n\nexport class IgxGridAPIService extends GridBaseAPIService<IgxGridComponent> {\n\n    public groupBy(expression: IGroupingExpression): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState, groupingState], expression);\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public groupBy_multiple(expressions: IGroupingExpression[]): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            this.prepare_sorting_expression([sortingState, groupingState], each);\n        }\n\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        if (name) {\n            const names = typeof name === 'string' ? [ name ] : name;\n            const groupedCols = groupingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            const newSortingExpr = sortingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            this.grid.groupingExpressions = groupedCols;\n            this.grid.sortingExpressions = newSortingExpr;\n            names.forEach((colName) => {\n                const grExprIndex = groupingState.findIndex((exp) => exp.fieldName === colName);\n                const grpExpandState = this.grid.groupingExpansionState;\n                /* remove expansion states related to the cleared group\n                and all with deeper hierarchy than the cleared group */\n                this.grid.groupingExpansionState = grpExpandState\n                    .filter((val) => {\n                        return val.hierarchy && val.hierarchy.length <= grExprIndex;\n                    });\n            });\n        } else {\n            // clear all\n            this.grid.groupingExpressions = [];\n            this.grid.groupingExpansionState = [];\n            for (const grExpr of groupingState) {\n                const sortExprIndex = sortingState.findIndex((exp) => exp.fieldName === grExpr.fieldName);\n                if (sortExprIndex > -1) {\n                    sortingState.splice(sortExprIndex, 1);\n                }\n            }\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    public groupBy_get_expanded_for_group(groupRow: IGroupByRecord): IGroupByExpandState {\n        const grState = this.grid.groupingExpansionState;\n        const hierarchy = DataUtil.getHierarchy(groupRow);\n        return grState.find((state) =>\n            DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n    }\n\n    public groupBy_is_row_in_group(groupRow: IGroupByRecord, rowID): boolean {\n        const grid = this.grid;\n        let rowInGroup = false;\n        groupRow.records.forEach(row => {\n            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {\n                rowInGroup = true;\n            }\n        });\n        return rowInGroup;\n    }\n\n    public groupBy_toggle_group(groupRow: IGroupByRecord) {\n        const grid = this.grid;\n        const expansionState = grid.groupingExpansionState;\n        let toggleRowEditingOverlay: boolean;\n        let isEditRowInGroup = false;\n        if (grid.rowEditable) {\n            const rowState = this.grid.crudService.row;\n\n            // Toggle only row editing overlays that are inside current expanded/collapsed group.\n            isEditRowInGroup = rowState ? this.groupBy_is_row_in_group(groupRow, rowState.id) : false;\n        }\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        if (state) {\n            state.expanded = !state.expanded;\n            if (isEditRowInGroup) {\n                toggleRowEditingOverlay = state.expanded;\n            }\n        } else {\n            expansionState.push({\n                expanded: !grid.groupsExpanded,\n                hierarchy: DataUtil.getHierarchy(groupRow)\n            });\n            if (isEditRowInGroup) {\n                toggleRowEditingOverlay = false;\n            }\n        }\n        this.grid.groupingExpansionState = expansionState;\n        if (grid.rowEditable) {\n            grid.repositionRowEditingOverlay(grid.rowInEditMode);\n        }\n    }\n\n    protected remove_grouping_expression(fieldName) {\n        const groupingExpressions = this.grid.groupingExpressions;\n        const index = groupingExpressions.findIndex((expr) => expr.fieldName === fieldName);\n        if (index !== -1) {\n            groupingExpressions.splice(index, 1);\n        }\n    }\n\n    public arrange_sorting_expressions() {\n        const groupingState = this.grid.groupingExpressions;\n        this.grid.sortingExpressions.sort((a, b) => {\n            const groupExprA = groupingState.find((expr) => expr.fieldName === a.fieldName);\n            const groupExprB = groupingState.find((expr) => expr.fieldName === b.fieldName);\n            if (groupExprA && groupExprB) {\n                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;\n            } else if (groupExprA) {\n                return -1;\n            } else if (groupExprB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n    public get_groupBy_record_id(gRow: IGroupByRecord): string {\n        let recordId = '{ ';\n        const hierrarchy = DataUtil.getHierarchy(gRow);\n\n        for (let i = 0; i < hierrarchy.length; i++) {\n            const groupByKey = hierrarchy[i];\n            recordId += `'${groupByKey.fieldName}': '${groupByKey.value}'`;\n\n            if (i < hierrarchy.length - 1) {\n                recordId += ', ';\n            }\n        }\n        recordId += ' }';\n\n        return recordId;\n    }\n\n}\n","import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';\nimport { IgxDropDirective } from '../../directives/dragdrop/dragdrop.directive';\nimport { IgxColumnMovingDragDirective } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxGridComponent } from './grid.component';\nimport { SortingDirection } from '../../data-operations/sorting-expression.interface';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupByRow]'\n})\nexport class IgxGroupByRowTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupAreaDrop]'\n})\nexport class IgxGroupAreaDropDirective extends IgxDropDirective {\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone) {\n        super(elementRef, renderer, zone);\n    }\n\n    @HostBinding('class.igx-drop-area--hover')\n    public hovered = false;\n\n\n    public onDragEnter(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        const grid = <IgxGridComponent>column.grid;\n        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n        if (column.groupable && !isGrouped && !column.columnGroup) {\n            drag.icon.innerText = 'group_work';\n            this.hovered = true;\n        } else {\n            drag.icon.innerText = 'block';\n            this.hovered = false;\n        }\n    }\n\n    public onDragLeave(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        event.detail.owner.icon.innerText = 'block';\n        this.hovered = false;\n    }\n\n    public onDragDrop(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        if (drag instanceof IgxColumnMovingDragDirective) {\n            const column: IgxColumnComponent = drag.column;\n            if (!this.columnBelongsToGrid(column)) {\n                return;\n            }\n            const grid = <IgxGridComponent>column.grid;\n            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n            if (column.groupable && !isGrouped && !column.columnGroup) {\n                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,\n                    strategy: column.sortStrategy, groupingComparer: column.groupingComparer });\n            }\n        }\n    }\n\n    private closestParentByAttr(elem, attr) {\n        return elem.hasAttribute(attr) ?\n            elem :\n            this.closestParentByAttr(elem.parentElement, attr);\n    }\n\n    private columnBelongsToGrid(column) {\n        const elem = this.elementRef.nativeElement;\n        const closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');\n        if (!column) {\n            return false;\n        } else {\n            const grid = <IgxGridComponent>column.grid;\n            if (!grid || grid.id !== closestGridID) {\n                return false;\n            }\n            return true;\n        }\n    }\n}\n","import {\n    Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ContentChild, ViewChildren,\n    QueryList, ViewChild, ElementRef, TemplateRef, DoCheck, NgZone, ChangeDetectorRef, ComponentFactoryResolver,\n    IterableDiffers, ViewContainerRef, Inject, AfterContentInit, HostBinding, forwardRef, OnInit, Optional\n} from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IgxGridTransaction, IFocusChangeEventArgs, IGridDataBindable, FilterMode } from '../grid-base.component';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { cloneArray } from '../../core/utils';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IgxGroupByRowTemplateDirective } from './grid.directives';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../../chips/chips-area.component';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { TransactionService, Transaction, State } from '../../services/transaction/transaction';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxColumnComponent } from '../column.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\n\nlet NEXT_ID = 0;\n\nexport interface IGridFocusChangeEventArgs extends IFocusChangeEventArgs {\n    groupRow: IgxGridGroupByRowComponent;\n}\nexport interface IGroupingDoneEventArgs {\n    expressions: Array<ISortingExpression> | ISortingExpression;\n    groupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n    ungroupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n}\n\n/**\n * **Ignite UI for Angular Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Grid is used for presenting and manipulating tabular data in the simplest way possible.  Once data\n * has been bound, it can be manipulated through filtering, sorting & editing operations.\n *\n * Example:\n * ```html\n * <igx-grid [data]=\"employeeData\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    providers: [IgxGridNavigationService, IgxGridSummaryService, IgxGridSelectionService, IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxGridComponent) },\n        IgxFilteringService, IgxColumnResizingService, IgxForOfSyncService\n    ],\n    selector: 'igx-grid',\n    templateUrl: './grid.component.html'\n})\nexport class IgxGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit, DoCheck, AfterContentInit {\n    private _id = `igx-grid-${NEXT_ID++}`;\n    /**\n     * @hidden\n     */\n    protected _groupingExpressions: IGroupingExpression[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupingExpandState: IGroupByExpandState[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupRowTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _groupAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected groupingDiffer;\n    private _data;\n    private _hideGroupedColumns = false;\n    private _dropAreaMessage = null;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxGridComponent` with an array of data.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n    */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value;\n        if (this._ngAfterViewInitPassed &&\n            this.calcHeight === null &&\n            this.isPercentHeight) {\n            /* the body should be auto-sized in this case before igxFor renders the whole data */\n            const bodyHeight = this.defaultTargetBodyHeight;\n            this.calcHeight = bodyHeight > 0 ? bodyHeight : null;\n        }\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n    }\n\n    private _gridAPI: IgxGridAPIService;\n    private _filteredData = null;\n\n    constructor(\n        selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) _transactions: TransactionService<Transaction, State>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(selectionService,\n                  crudService, gridAPI, selection, _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation,\n                  filteringService, overlayService, summaryService, _displayDensityOptions);\n            this._gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    /**\n     * Returns the group by state of the `IgxGridComponent`.\n     * ```typescript\n     * let groupByState = this.grid.groupingExpressions;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpressions(): IGroupingExpression[] {\n        return this._groupingExpressions;\n    }\n\n    /**\n     * Sets the group by state of the `IgxGridComponent` and emits the `onGroupingDone`\n     * event with the appropriate arguments.\n     * ```typescript\n     * this.grid.groupingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Asc,\n     *     ignoreCase: false\n     * }];\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpressions(value: IGroupingExpression[]) {\n        if (value && value.length > 10) {\n            throw Error('Maximum amount of grouped columns is 10.');\n        }\n        const oldExpressions: IGroupingExpression[] = this.groupingExpressions;\n        const newExpressions: IGroupingExpression[] = value;\n        this._groupingExpressions = cloneArray(value);\n        this.chipsGoupingExpressions = cloneArray(value);\n        if (this._gridAPI.grid) {\n            /* grouping should work in conjunction with sorting\n            and without overriding separate sorting expressions */\n            this._applyGrouping();\n            this._gridAPI.arrange_sorting_expressions();\n            this.cdr.markForCheck();\n        } else {\n            // setter called before grid is registered in grid API service\n            this.sortingExpressions.unshift.apply(this.sortingExpressions, this._groupingExpressions);\n        }\n        if (JSON.stringify(oldExpressions) !== JSON.stringify(newExpressions) && this.columnList) {\n            const groupedCols: IgxColumnComponent[] = [];\n            const ungroupedCols: IgxColumnComponent[] = [];\n            const groupedColsArr = newExpressions.filter((obj) => {\n                return !oldExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            groupedColsArr.forEach((elem) => {\n                groupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            const ungroupedColsArr = oldExpressions.filter((obj) => {\n                return !newExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            ungroupedColsArr.forEach((elem) => {\n                ungroupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            this.cdr.detectChanges();\n            const groupingDoneArgs: IGroupingDoneEventArgs = {\n                expressions: newExpressions,\n                groupedColumns: groupedCols,\n                ungroupedColumns: ungroupedCols\n            };\n            this.onGroupingDone.emit(groupingDoneArgs);\n        }\n    }\n\n    /**\n     * Returns a list of expansion states for group rows.\n     * Includes only states that differ from the default one (controlled through groupsExpanded and states that the user has changed.\n     * Contains the expansion state (expanded: boolean) and the unique identifier for the group row (Array).\n     * ```typescript\n     * const groupExpState = this.grid.groupingExpansionState;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpansionState() {\n        return this._groupingExpandState;\n    }\n\n    /**\n     * Sets a list of expansion states for group rows.\n     * ```typescript\n     *      this.grid.groupingExpansionState = [{\n     *      expanded: false,\n     *      hierarchy: [{ fieldName: 'ID', value: 1 }]\n     *   }];\n     * // You can use DataUtil.getHierarchy(groupRow) to get the group `IgxGridRowComponent` hierarchy.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpansionState(value) {\n        this._groupingExpandState = cloneArray(value);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * An @Input property that determines whether created groups are rendered expanded or collapsed.\n     * The default rendered state is expanded.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [groupsExpanded]=\"false\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public groupsExpanded = true;\n\n    /**\n     * A hierarchical representation of the group by records.\n     * ```typescript\n     * let groupRecords = this.grid.groupsRecords;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupsRecords: IGroupByRecord[] = [];\n\n    /**\n     * An @Input property that sets whether the grouped columns should be hidden as well.\n     * The default value is \"false\"\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [hideGroupedColumns]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public get hideGroupedColumns() {\n        return this._hideGroupedColumns;\n    }\n\n    public set hideGroupedColumns(value: boolean) {\n        if (value) {\n            this.groupingDiffer = this.differs.find(this.groupingExpressions).create();\n        } else {\n            this.groupingDiffer = null;\n        }\n        if (this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(value);\n        }\n\n        this._hideGroupedColumns = value;\n    }\n\n    /**\n     * An @Input property that sets the message displayed inside the GroupBy drop area where columns can be dragged on.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid dropAreaMessage=\"Drop here to group!\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    set dropAreaMessage(value: string) {\n        this._dropAreaMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed inside the GroupBy drop area where columns can be dragged on.\n    */\n    get dropAreaMessage(): string {\n        return this._dropAreaMessage || this.resourceStrings.igx_grid_groupByArea_message;\n    }\n\n    /**\n     * An @Input property that sets the template that will be rendered as a GroupBy drop area.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid [dropAreaTemplate]=\"dropAreaRef\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     *\n     * <ng-template #myDropArea>\n     *      <span> Custom drop area! </span>\n     * </ng-template>\n     * ```\n     * ```ts\n     * @ViewChild('myDropArea', { read: TemplateRef })\n     * public dropAreaRef: TemplateRef<any>;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public dropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * Emitted when a new `IgxColumnComponent` gets grouped/ungrouped, or multiple columns get\n     * grouped/ungrouped at once by using the Group By API.\n     * The `onGroupingDone` event would be raised only once if several columns get grouped at once by calling\n     * the `groupBy()` or `clearGrouping()` API methods and passing an array as an argument.\n     * The event arguments provide the `expressions`, `groupedColumns` and `ungroupedColumns` properties, which contain\n     * the `ISortingExpression` and the `IgxColumnComponent` related to the grouping/ungrouping operation.\n     * Please note that `groupedColumns` and `ungroupedColumns` show only the **newly** changed columns (affected by the **last**\n     * grouping/ungrouping operation), not all columns which are currently grouped/ungrouped.\n     * columns.\n     * ```typescript\n     * groupingDone(event: IGroupingDoneEventArgs){\n     *     const expressions = event.expressions;\n     *     //the newly grouped columns\n     *     const groupedColumns = event.groupedColumns;\n     *     //the newly ungrouped columns\n     *     const ungroupedColumns = event.ungroupedColumns;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onGroupingDone)=\"groupingDone($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onGroupingDone = new EventEmitter<IGroupingDoneEventArgs>();\n\n    @Output()\n    public onFocusChange = new EventEmitter<IGridFocusChangeEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxGroupByRowTemplateDirective, { read: IgxGroupByRowTemplateDirective })\n    protected groupTemplate: IgxGroupByRowTemplateDirective;\n\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.dragIndicatorIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-grid #grid>\n     *      ...\n     *      <ng-template igxDragIndicatorIcon>\n     *          <igx-icon fontSet=\"material\">info</igx-icon>\n     *      </ng-template>\n     *  </igx-grid>\n     * ```\n     */\n    @ContentChild(IgxDragIndicatorIconDirective, { read: TemplateRef })\n    public dragIndicatorIconTemplate: TemplateRef<any> = null;\n\n    @ViewChildren(IgxGridGroupByRowComponent, { read: IgxGridGroupByRowComponent })\n    private _groupsRowList: QueryList<IgxGridGroupByRowComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultDropArea', { read: TemplateRef })\n    public defaultDropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * A list of all group rows.\n     * ```typescript\n     * const groupList = this.grid.groupsRowList;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get groupsRowList() {\n        const res = new QueryList<any>();\n        if (!this._groupsRowList) {\n            return res;\n        }\n        const rList = this._groupsRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('groupArea')\n    public groupArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    get groupAreaHostClass(): string {\n        return this.getComponentDensityClass('igx-drop-area');\n    }\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group row.\n     * ```\n     * const groupRowTemplate = this.grid.groupRowTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupRowTemplate(): TemplateRef<any> {\n        return this._groupRowTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group `IgxGridRowComponent`.\n     * ```typescript\n     * this.grid.groupRowTemplate = myRowTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupRowTemplate(template: TemplateRef<any>) {\n        this._groupRowTemplate = template;\n        this.markForCheck();\n    }\n\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * const groupAreaTemplate = this.grid.groupAreaTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupAreaTemplate(): TemplateRef<any> {\n        return this._groupAreaTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * this.grid.groupAreaTemplate = myAreaTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupAreaTemplate(template: TemplateRef<any>) {\n        this._groupAreaTemplate = template;\n        this.markForCheck();\n    }\n\n    /**\n     * Groups by a new `IgxColumnComponent` based on the provided expression, or modifies an existing one.\n     * Also allows for multiple columns to be grouped at once if an array of `ISortingExpression` is passed.\n     * The onGroupingDone event would get raised only **once** if this method gets called multiple times with the same arguments.\n     * ```typescript\n     * this.grid.groupBy({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * this.grid.groupBy([\n            { fieldName: name1, dir: SortingDirection.Asc, ignoreCase: false },\n            { fieldName: name2, dir: SortingDirection.Desc, ignoreCase: true },\n            { fieldName: name3, dir: SortingDirection.Desc, ignoreCase: false }\n        ]);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupBy(expression: IGroupingExpression | Array<IGroupingExpression>): void {\n        this.endEdit(true);\n        this._gridAPI.submit_value();\n        if (expression instanceof Array) {\n            this._gridAPI.groupBy_multiple(expression);\n        } else {\n            this._gridAPI.groupBy(expression);\n        }\n        this.cdr.detectChanges();\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Clears all grouping in the grid, if no parameter is passed.\n     * If a parameter is provided, clears grouping for a particular column or an array of columns.\n     * ```typescript\n     * this.grid.clearGrouping(); //clears all grouping\n     * this.grid.clearGrouping(\"ID\"); //ungroups a single column\n     * this.grid.clearGrouping([\"ID\", \"Column1\", \"Column2\"]); //ungroups multiple columns\n     * ```\n     *\n     */\n    public clearGrouping(name?: string | Array<string>): void {\n        this._gridAPI.clear_groupby(name);\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Returns if a group is expanded or not.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const expandedGroup = this.grid.isExpandedGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public isExpandedGroup(group: IGroupByRecord): boolean {\n        const state: IGroupByExpandState = this._getStateForGroupRow(group);\n        return state ? state.expanded : this.groupsExpanded;\n    }\n\n    /**\n     * Toggles the expansion state of a group.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const toggleExpGroup = this.grid.toggleGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleGroup(groupRow: IGroupByRecord) {\n        this._toggleGroup(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    public isGroupByRecord(record: any): boolean {\n        // return record.records instance of GroupedRecords fails under Webpack\n        return record.records && record.records.length;\n    }\n\n    /**\n     * Toggles the expansion state of all group rows recursively.\n     * ```typescript\n     * this.grid.toggleAllGroupRows;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleAllGroupRows() {\n        this.groupingExpansionState = [];\n        this.groupsExpanded = !this.groupsExpanded;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has groupable columns.\n     * ```typescript\n     * const groupableGrid = this.grid.hasGroupableColumns;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get hasGroupableColumns(): boolean {\n        return this.columnList.some((col) => col.groupable && !col.columnGroup);\n    }\n\n    private _setGroupColsVisibility(value) {\n        this.groupingExpressions.forEach((expr) => {\n            const col = this.getColumnByName(expr.fieldName);\n            col.hidden = value;\n        });\n    }\n\n    /**\n     * Returns if the grid's group by drop area is visible.\n     * ```typescript\n     * const dropVisible = this.grid.dropAreaVisible;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get dropAreaVisible(): boolean {\n        return (this.draggedColumn && this.draggedColumn.groupable) ||\n            !this.chipsGoupingExpressions.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _getStateForGroupRow(groupRow: IGroupByRecord): IGroupByExpandState {\n        return this._gridAPI.groupBy_get_expanded_for_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _toggleGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_toggle_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _applyGrouping() {\n        this._gridAPI.sort_multiple(this._groupingExpressions);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return this.groupingExpressions.find(exp => exp.fieldName === fieldName) ? true : false;\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData, rowIndex): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isGroupByRecord(rowData) ? 'groupRow' : this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupByRecords(): IGroupByRecord[] {\n        if (this.groupingExpressions && this.groupingExpressions.length) {\n            const state = {\n                expressions: this.groupingExpressions,\n                expansion: this.groupingExpansionState,\n                defaultExpanded: this.groupsExpanded\n            };\n\n            return DataUtil.group(cloneArray(this.filteredSortedData), state, this).metadata;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipRemoved(event: IBaseChipEventArgs) {\n        this.clearGrouping(event.owner.id);\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsOrderChanged(event: IChipsAreaReorderEventArgs) {\n        const newGrouping = [];\n        for (let i = 0; i < event.chipsArray.length; i++) {\n            const expr = this.groupingExpressions.filter((item) => {\n                return item.fieldName === event.chipsArray[i].id;\n            })[0];\n\n            if (!this.getColumnByName(expr.fieldName).groupable) {\n                // disallow changing order if there are columns with groupable: false\n                return;\n            }\n            newGrouping.push(expr);\n        }\n        this.groupingExpansionState = [];\n        this.chipsGoupingExpressions = newGrouping;\n\n        if (event.originalEvent instanceof KeyboardEvent) {\n            // When reordered using keyboard navigation, we don't have `onMoveEnd` event.\n            this.groupingExpressions = this.chipsGoupingExpressions;\n        }\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsMovingEnded() {\n        this.groupingExpressions = this.chipsGoupingExpressions;\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipClicked(event: IChipClickEventArgs) {\n        const sortingExpr = this.sortingExpressions;\n        const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n        columnExpr.dir = 3 - columnExpr.dir;\n        this.sort(columnExpr);\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: IChipKeyDownEventArgs) {\n        if (event.originalEvent.key === ' ' || event.originalEvent.key === 'Spacebar' || event.originalEvent.key === 'Enter') {\n            const sortingExpr = this.sortingExpressions;\n            const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n            columnExpr.dir = 3 - columnExpr.dir;\n            this.sort(columnExpr);\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return this.groupArea ? this.groupArea.nativeElement.offsetHeight : 0;\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = super.getFeatureColumnsWidth();\n\n        if (this.groupingExpressions.length && this.headerGroupContainer) {\n            width += this.headerGroupContainer.nativeElement.offsetWidth;\n        }\n\n        return width;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        if (this.groupingExpressions && this.groupingExpressions.length\n            && typeof(row) !== 'number') {\n            const groupByRecords = this.getGroupByRecords();\n            const rowIndex = this.filteredSortedData.indexOf(row);\n            const groupByRecord = groupByRecords[rowIndex];\n\n            if (groupByRecord && !this.isExpandedGroup(groupByRecord)) {\n                this.toggleGroup(groupByRecord);\n            }\n        }\n\n        super.scrollTo(row, column);\n    }\n\n    /**\n    * @hidden\n    */\n    public get dropAreaTemplateResolved(): TemplateRef<any> {\n        if (this.dropAreaTemplate) {\n            return this.dropAreaTemplate;\n        } else {\n            return this.defaultDropAreaTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getGroupByChipTitle(expression: IGroupingExpression): string {\n        return this.getColumnByName(expression.fieldName).header || expression.fieldName;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.allowFiltering && this.hasColumnLayouts) {\n            this.filterMode = FilterMode.excelStyleFilter;\n        }\n        if (this.groupTemplate) {\n            this._groupRowTemplate = this.groupTemplate.template;\n        }\n        super.ngAfterContentInit();\n\n        if (this.hideGroupedColumns && this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(this.hideGroupedColumns);\n        }\n    }\n\n    public ngOnInit() {\n        super.ngOnInit();\n        this.onGroupingDone.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.endEdit(true);\n            this.summaryService.updateSummaryCache(args);\n        });\n    }\n\n    public ngDoCheck(): void {\n        super.ngDoCheck();\n        if (this.groupingDiffer) {\n            const changes = this.groupingDiffer.diff(this.groupingExpressions);\n            if (changes && this.columnList) {\n                changes.forEachAddedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = true;\n                });\n                changes.forEachRemovedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = false;\n                });\n            }\n        }\n    }\n\n    getSelectedData(): any[] {\n        if (this.groupingExpressions.length) {\n            const source = [];\n\n            const process = (record) => {\n                if (record.expression || record.summaries) {\n                    source.push(null);\n                    return;\n                }\n                source.push(record);\n\n            };\n\n            this.verticalScrollContainer.igxForOf.forEach(process);\n            return this.extractDataFromSelection(source);\n        } else {\n            return super.getSelectedData();\n        }\n    }\n}\n","import { Component, forwardRef, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, HostBinding } from '@angular/core';\nimport { IgxGridComponent } from './grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-row',\n    templateUrl: './grid-row.component.html',\n    providers: [{provide: IgxRowComponent, useExisting: forwardRef(() => IgxGridRowComponent)}]\n})\nexport class IgxGridRowComponent extends IgxRowComponent<IgxGridComponent> {\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n            super(gridAPI, crudService, selectionService, selection, element, cdr);\n        }\n\n        @HostBinding('class.igx-grid__tr--mrl')\n        get hasColumnLayouts(): boolean {\n            return this.grid.hasColumnLayouts;\n        }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, GridSummaryPosition, GridSummaryCalculationMode, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridComponent } from './grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\n\n/** @hidden */\n@Pipe({\n    name: 'gridSummary',\n    pure: true\n})\nexport class IgxGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(flatData: any[],\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n\n        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return flatData;\n        }\n\n        return this.addSummaryRows(id, flatData, summaryPosition);\n    }\n\n    private addSummaryRows(gridId: string, collection: any[], summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const lastChildMap = new Map<any, IGroupByRecord[]>();\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            recordsWithSummary.push(record);\n\n            let recordId;\n            let groupByRecord: IGroupByRecord = null;\n\n            if (grid.isGroupByRecord(record)) {\n                groupByRecord = record as IGroupByRecord;\n                recordId = this.gridAPI.get_groupBy_record_id(groupByRecord);\n            } else {\n                recordId = this.gridAPI.get_row_id(record);\n            }\n\n            if (summaryPosition === GridSummaryPosition.bottom && lastChildMap.has(recordId)) {\n                const groupRecords = lastChildMap.get(recordId);\n\n                for (let j = 0; j < groupRecords.length; j++) {\n                    const groupRecord = groupRecords[j];\n                    const groupRecordId = this.gridAPI.get_groupBy_record_id(groupRecord);\n                    const records = this.removeDeletedRecord(grid, groupRecord.records.slice());\n                    const summaries = grid.summaryService.calculateSummaries(groupRecordId, records);\n                    const summaryRecord: ISummaryRecord = {\n                        summaries: summaries,\n                        max: maxSummaryHeight\n                    };\n                    recordsWithSummary.push(summaryRecord);\n                }\n            }\n\n            if (groupByRecord === null || !grid.isExpandedGroup(groupByRecord)) {\n                continue;\n            }\n\n            if (summaryPosition === GridSummaryPosition.top) {\n                const records = this.removeDeletedRecord(grid, groupByRecord.records.slice());\n                const summaries = grid.summaryService.calculateSummaries(recordId, records);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max:  maxSummaryHeight\n                };\n                recordsWithSummary.push(summaryRecord);\n            } else if (summaryPosition === GridSummaryPosition.bottom) {\n                let lastChild = groupByRecord;\n\n                while (lastChild.groups && lastChild.groups.length > 0 && grid.isExpandedGroup(lastChild)) {\n                    lastChild = lastChild.groups[lastChild.groups.length - 1];\n                }\n\n                let lastChildId;\n                if (grid.isExpandedGroup(lastChild)) {\n                    lastChildId = this.gridAPI.get_row_id(lastChild.records[lastChild.records.length - 1]);\n                } else {\n                    lastChildId = this.gridAPI.get_groupBy_record_id(lastChild);\n                }\n\n                let groupRecords = lastChildMap.get(lastChildId);\n                if (!groupRecords) {\n                    groupRecords = [];\n                    lastChildMap.set(lastChildId, groupRecords);\n                }\n                groupRecords.unshift(groupByRecord);\n            }\n    }\n\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, data) {\n        if (!grid.transactions.enabled) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n    IgxGroupAreaDropDirective,\n    IgxGroupByRowTemplateDirective\n} from './grid.directives';\nimport { IgxGridComponent } from './grid.component';\nimport {\n    IgxGridPagingPipe,\n    IgxGridPostGroupingPipe,\n    IgxGridPreGroupingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe\n} from './grid.pipes';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IgxGridRowComponent } from './grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { DeprecateMethod } from '../../core/deprecateDecorators';\nimport { IgxGridSummaryPipe } from './grid.summary.pipe';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxGridComponent,\n    IgxGridRowComponent,\n    IgxGridGroupByRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridPreGroupingPipe,\n    IgxGridPostGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe\n  ],\n  exports: [\n    IgxGridComponent,\n    IgxGridGroupByRowComponent,\n    IgxGridRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridCommonModule,\n    IgxGridPreGroupingPipe,\n    IgxGridPostGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule\n  ]\n})\nexport class IgxGridModule {\n  @DeprecateMethod('IgxGridModule.forRoot method is deprecated. Use IgxGridModule instead.')\n  public static forRoot() {\n    return {\n        ngModule: IgxGridModule\n    };\n  }\n}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { IgxColumnComponent } from '../column.component';\nimport { HierarchicalTransaction, TransactionType, State } from '../../services';\nimport { mergeObjects } from '../../core/utils';\n\nexport class IgxTreeGridAPIService extends GridBaseAPIService<IgxTreeGridComponent> {\n    public get_all_data(transactions?: boolean): any[] {\n        const grid = this.grid;\n        const data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;\n        return data ? data : [];\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        const data = grid.processedRootRecords.filter(row => row.isFilteredOutParent === undefined || row.isFilteredOutParent === false)\n            .map(rec => rec.data);\n        if (grid.transactions.enabled) {\n            const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n            deletedRows.forEach(rowID => {\n                const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                const index = tempData.indexOf(rowID);\n                if (index !== -1) {\n                    data.splice(index, 1);\n                }\n            });\n        }\n        return data;\n    }\n\n    public expand_row(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, true);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public collapse_row(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, false);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public toggle_row_expansion(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        const treeRecord = grid.records.get(rowID);\n\n        if (treeRecord) {\n            const isExpanded = this.get_row_expansion_state(treeRecord);\n            expandedStates.set(rowID, !isExpanded);\n            grid.expansionStates = expandedStates;\n        }\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public trigger_row_expansion_toggle(row: ITreeGridRecord, expanded: boolean, event?: Event, visibleColumnIndex?) {\n        const grid = this.grid;\n\n        if (row.expanded === expanded ||\n            ((!row.children || !row.children.length) && (!grid.loadChildrenOnDemand ||\n            (grid.hasChildrenKey && !row.data[grid.hasChildrenKey])))) {\n            return;\n        }\n\n        const args: IRowToggleEventArgs = {\n            rowID: row.rowID,\n            expanded: expanded,\n            event: event,\n            cancel: false\n        };\n        grid.onRowToggle.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n        visibleColumnIndex = visibleColumnIndex ? visibleColumnIndex : 0;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(row.rowID, expanded);\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n\n        requestAnimationFrame(() => {\n            const el = this.grid.selectionService.activeElement;\n            if (el) {\n                const cell = this.get_cell_by_visible_index(el.row, el.column);\n                if (cell) {\n                    cell.nativeElement.focus();\n                }\n            }\n        });\n    }\n\n    public expand_path_to_record(record: ITreeGridRecord) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n\n        while (record.parent) {\n            record = record.parent;\n            const expanded = this.get_row_expansion_state(record);\n\n            if (!expanded) {\n                expandedStates.set(record.rowID, true);\n            }\n        }\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public get_row_expansion_state(record: ITreeGridRecord): boolean {\n        const grid = this.grid;\n        const states = grid.expansionStates;\n        const expanded = states.get(record.rowID);\n\n        if (expanded !== undefined) {\n            return expanded;\n        } else {\n            return record.children && record.children.length && record.level < grid.expansionDepth;\n        }\n    }\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        if (grid.primaryKey && grid.foreignKey) {\n            super.update_row_in_array(value, rowID, index);\n        } else {\n            const record = grid.records.get(rowID);\n            const childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;\n            index = grid.primaryKey ? childData.map(c => c[grid.primaryKey]).indexOf(rowID) :\n                childData.indexOf(rowID);\n            childData[index] = value;\n        }\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number && column.visibleIndex !== 0;\n    }\n\n    public deleteRowById(rowID: any) {\n        const treeGrid = this.grid;\n        const flatDataWithCascadeOnDeleteAndTransactions =\n        treeGrid.primaryKey &&\n        treeGrid.foreignKey &&\n        treeGrid.cascadeOnDelete &&\n        treeGrid.transactions.enabled;\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.startPending();\n        }\n\n        super.deleteRowById(rowID);\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.endPending(true);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        const treeGrid = this.grid;\n        const record = treeGrid.records.get(rowID);\n\n        if (treeGrid.primaryKey && treeGrid.foreignKey) {\n            index = treeGrid.primaryKey ?\n                treeGrid.data.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                treeGrid.data.indexOf(rowID);\n            super.deleteRowFromData(rowID, index);\n\n            if (treeGrid.cascadeOnDelete) {\n                if (record && record.children && record.children.length > 0) {\n                    for (let i = 0; i < record.children.length; i++) {\n                        const child = record.children[i];\n                        super.deleteRowById(child.rowID);\n                    }\n                }\n            }\n        } else {\n            const collection = record.parent ? record.parent.data[treeGrid.childDataKey] : treeGrid.data;\n            index = treeGrid.primaryKey ?\n                collection.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                collection.indexOf(rowID);\n\n            const selectedChildren = [];\n            this.get_selected_children(record, selectedChildren);\n            if (selectedChildren.length > 0) {\n                treeGrid.deselectRows(selectedChildren);\n            }\n\n            if (treeGrid.transactions.enabled) {\n                const path = treeGrid.generateRowPath(rowID);\n                treeGrid.transactions.add({\n                    id: rowID,\n                    type: TransactionType.DELETE,\n                    newValue: null,\n                    path: path\n                },\n                    collection[index]\n                );\n            } else {\n                collection.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(\n        grid: IgxTreeGridComponent,\n        rowID: any,\n        rowValueInDataSource: any,\n        rowCurrentValue: any,\n        rowNewValue: { [x: string]: any }) {\n        if (grid.transactions.enabled) {\n            const path = grid.generateRowPath(rowID);\n            const transaction: HierarchicalTransaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue,\n                path: path\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    public get_selected_children(record: ITreeGridRecord, selectedRowIDs: any[]) {\n        const grid = this.grid;\n        if (!record.children || record.children.length === 0) {\n            return;\n        }\n        for (const child of record.children) {\n            if (grid.selection.is_item_selected(grid.id, child.rowID)) {\n                selectedRowIDs.push(child.rowID);\n            }\n            this.get_selected_children(child, selectedRowIDs);\n        }\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        return this.row_deleted_parent(rowID) || super.row_deleted_transaction(rowID);\n    }\n\n    private row_deleted_parent(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if ((grid.cascadeOnDelete && grid.foreignKey) || grid.childDataKey) {\n            let node = grid.records.get(rowID);\n            while (node) {\n                const state: State = grid.transactions.getState(node.rowID);\n                if (state && state.type === TransactionType.DELETE) {\n                    return true;\n                }\n                node = node.parent;\n            }\n        }\n        return false;\n    }\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\n\nexport class IgxTreeGridNavigationService extends IgxGridNavigationService {\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        if (isSummary) {\n            return 'igx-grid-summary-cell';\n        }\n        if (visibleIndex === 0) {\n            return 'igx-tree-grid-cell';\n        }\n        return 'igx-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-tree-grid-row';\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowLoadingIndicator]'\n})\nexport class IgxRowLoadingIndicatorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ElementRef,\n    HostBinding,\n    Input,\n    IterableDiffers,\n    ViewContainerRef,\n    Output,\n    EventEmitter,\n    Inject,\n    NgZone,\n    forwardRef,\n    Optional,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    ContentChild,\n    AfterContentInit,\n    ViewChild\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IgxGridTransaction, IGridDataBindable } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { HierarchicalTransaction, HierarchicalState, TransactionType } from '../../services/transaction/transaction';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalTransactionService } from '../../services/index';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IgxTreeGridNavigationService } from './tree-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { mergeObjects } from '../../core/utils';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxColumnComponent } from '../column.component';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Tree Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Tree Grid displays and manipulates hierarchical data with consistent schema formatted as a table and\n * provides features such as sorting, filtering, editing, column pinning, paging, column moving and hiding.\n *\n * Example:\n * ```html\n * <igx-tree-grid [data]=\"employeeData\" primaryKey=\"employeeID\" foreignKey=\"PID\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-tree-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-tree-grid',\n    templateUrl: 'tree-grid.component.html',\n    providers: [\n        IgxGridSelectionService, IgxGridCRUDService, IgxTreeGridNavigationService, IgxGridSummaryService,\n        { provide: GridBaseAPIService, useClass: IgxTreeGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxTreeGridComponent) }, IgxFilteringService, IgxForOfSyncService]\n})\nexport class IgxTreeGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit, AfterContentInit {\n    private _id = `igx-tree-grid-${NEXT_ID++}`;\n    private _data;\n    private _rowLoadingIndicatorTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-tree-grid [id]=\"'igx-tree-grid-1'\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxTreeGridComponent` with an array of data.\n     * ```html\n     * <igx-tree-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value;\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n    }\n\n    /**\n     * Get transactions service for the grid.\n     * @experimental @hidden\n     */\n    get transactions(): IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState> {\n        return this._transactions;\n    }\n\n    /**\n    * @hidden\n    */\n    public flatData: any[];\n\n    /**\n    * @hidden\n    */\n    public processedExpandedFlatData: any[];\n\n    /**\n     * Returns an array of the root level `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the root record with index=2\n     * const states = this.grid.rootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public rootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the record with primaryKey=2\n     * const states = this.grid.records.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public records: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * Returns an array of processed (filtered and sorted) root `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed root record with index=2\n     * const states = this.grid.processedRootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all processed (filtered and sorted) `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed record with primaryKey=2\n     * const states = this.grid.processedRecords.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRecords: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * An @Input property that sets the child data key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public childDataKey;\n\n    /**\n     * An @Input property that sets the foreign key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [autoGenerate]=\"true\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public foreignKey;\n\n    /**\n     * An @Input property that sets the key indicating whether a row has children.\n     * This property is only used for load on demand scenarios.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [hasChildrenKey]=\"'hasEmployees'\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public hasChildrenKey;\n\n    /**\n     * An @Input property indicating whether child records should be deleted when their parent gets deleted.\n     * By default it is set to true and deletes all children along with the parent.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" cascadeOnDelete=\"false\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public cascadeOnDelete = true;\n\n    private _expansionDepth = Infinity;\n\n    /**\n     * An @Input property that sets the count of levels to be expanded in the `IgxTreeGridComponent`. By default it is\n     * set to `Infinity` which means all levels would be expanded.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" expansionDepth=\"1\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionDepth(): number {\n        return this._expansionDepth;\n    }\n\n    public set expansionDepth(value: number) {\n        this._expansionDepth = value;\n        this.cdr.markForCheck();\n    }\n\n    private _expansionStates: Map<any, boolean> = new Map<any, boolean>();\n\n    /**\n     * Returns a list of key-value pairs [row ID, expansion state]. Includes only states that differ from the default one.\n     * ```typescript\n     * const expansionStates = this.grid.expansionStates;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionStates() {\n        return this._expansionStates;\n    }\n\n    /**\n     * Sets a list of key-value pairs [row ID, expansion state].\n     * ```typescript\n     * const states = new Map<any, boolean>();\n     * states.set(1, true);\n     * this.grid.expansionStates = states;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public set expansionStates(value) {\n        this._expansionStates = this.cloneMap(value);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowLoadingIndicatorTemplateDirective, { read: IgxRowLoadingIndicatorTemplateDirective })\n    protected rowLoadingTemplate: IgxRowLoadingIndicatorTemplateDirective;\n\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.dragIndicatorIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-grid #grid>\n     *      ...\n     *      <ng-template igxDragIndicatorIcon>\n     *          <igx-icon fontSet=\"material\">info</igx-icon>\n     *      </ng-template>\n     *  </igx-grid>\n     * ```\n     */\n    @ContentChild(IgxDragIndicatorIconDirective, { read: TemplateRef })\n    public dragIndicatorIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * An @Input property that provides a template for the row loading indicator when load on demand is enabled.\n     * ```html\n     * <ng-template #rowLoadingTemplate>\n     *     <igx-icon fontSet=\"material\">loop</igx-icon>\n     * </ng-template>\n     *\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'ID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [rowLoadingIndicatorTemplate]=\"rowLoadingTemplate\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get rowLoadingIndicatorTemplate(): TemplateRef<any> {\n        return this._rowLoadingIndicatorTemplate;\n    }\n\n    public set rowLoadingIndicatorTemplate(value: TemplateRef<any>) {\n        this._rowLoadingIndicatorTemplate = value;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * An @Input property that provides a callback for loading child rows on demand.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [loadChildrenOnDemand]=\"loadChildren\">\n     * </igx-tree-grid>\n     * ```\n     * ```typescript\n     * public loadChildren = (parentID: any, done: (children: any[]) => void) => {\n     *     this.dataService.getData(parentID, children => done(children));\n     * }\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public loadChildrenOnDemand: (parentID: any, done: (children: any[]) => void) => void;\n\n    /**\n     * Emitted when the expanded state of a row gets changed.\n     * ```typescript\n     * rowToggle(event: IRowToggleEventArgs){\n     *  // the id of the row\n     *  const rowID = event.rowID;\n     *  // the new expansion state\n     *  const newExpandedState = event.expanded;\n     *  // the original event that triggered onRowToggle\n     *  const originalEvent = event.event;\n     *  // whether the event should be cancelled\n     *  event.cancel = true;\n     * }\n     * ```\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" (onRowToggle)=\"rowToggle($event)\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Output()\n    public onRowToggle = new EventEmitter<IRowToggleEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public loadingRows = new Set<any>();\n\n    private _gridAPI: IgxTreeGridAPIService;\n    private _filteredData = null;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    constructor(\n        selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) protected _transactions: IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxTreeGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(selectionService, crudService, gridAPI, selection,\n                _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation,\n                filteringService, overlayService, summaryService, _displayDensityOptions);\n        this._gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        this.onRowToggle.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.loadChildrenOnRowExpansion(args);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.rowLoadingTemplate) {\n            this._rowLoadingIndicatorTemplate = this.rowLoadingTemplate.template;\n        }\n        super.ngAfterContentInit();\n    }\n\n    private loadChildrenOnRowExpansion(args: IRowToggleEventArgs) {\n        if (this.loadChildrenOnDemand) {\n            const parentID = args.rowID;\n\n            if (args.expanded && !this._expansionStates.has(parentID)) {\n                this.loadingRows.add(parentID);\n\n                this.loadChildrenOnDemand(parentID, children => {\n                    this.loadingRows.delete(parentID);\n                    this.addChildRows(children, parentID);\n                    this.cdr.markForCheck();\n\n                    requestAnimationFrame(() => {\n                        const cellID = this.selection.first_item(`${this.id}-cell`);\n                        if (cellID) {\n                            const cell = this._gridAPI.get_cell_by_index(cellID.rowIndex, cellID.columnID);\n                            if (cell) {\n                                cell.nativeElement.focus();\n                            }\n                        }\n                    });\n                });\n            }\n        }\n    }\n\n    private addChildRows(children: any[], parentID: any) {\n        if (this.primaryKey && this.foreignKey) {\n            for (const child of children) {\n                child[this.foreignKey] = parentID;\n            }\n            this.data.push(...children);\n        } else if (this.childDataKey) {\n            let parent = this.records.get(parentID);\n            let parentData = parent.data;\n\n            if (this.transactions.enabled && this.transactions.getAggregatedChanges(true).length) {\n                const path = [];\n                while (parent) {\n                    path.push(parent.rowID);\n                    parent = parent.parent;\n                }\n\n                let collection = this.data;\n                let record: any;\n                for (let i = path.length - 1; i >= 0; i--) {\n                    const pid = path[i];\n                    record = collection.find(r => r[this.primaryKey] === pid);\n\n                    if (!record) {\n                        break;\n                    }\n                    collection = record[this.childDataKey];\n                }\n                if (record) {\n                    parentData = record;\n                }\n            }\n\n            parentData[this.childDataKey] = children;\n        }\n\n        this._pipeTrigger++;\n    }\n\n    private cloneMap(mapIn: Map<any, boolean>): Map<any, boolean> {\n        const mapCloned: Map<any, boolean> = new Map<any, boolean>();\n\n        mapIn.forEach((value: boolean, key: any, mapObj: Map<any, boolean>) => {\n\n            mapCloned.set(key, value);\n        });\n\n        return mapCloned;\n    }\n\n    /**\n     * Expands the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be expanded.\n     * ```typescript\n     * this.grid.expandRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandRow(rowID: any) {\n        this._gridAPI.expand_row(rowID);\n    }\n\n    /**\n     * Collapses the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be collapsed.\n     * ```typescript\n     * this.grid.collapseRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseRow(rowID: any) {\n        this._gridAPI.collapse_row(rowID);\n    }\n\n    /**\n     * Toggles the expansion state of the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be toggled.\n     * ```typescript\n     * this.grid.toggleRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public toggleRow(rowID: any) {\n        this._gridAPI.toggle_row_expansion(rowID);\n    }\n\n    /**\n     * Expands all rows.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandAll() {\n        this._expansionDepth = Infinity;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Collapses all rows.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseAll() {\n        this._expansionDepth = 0;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Creates a new `IgxTreeGridRowComponent` with the given data. If a parentRowID is not specified, the newly created\n     * row would be added at the root level. Otherwise, it would be added as a child of the row whose primaryKey matches\n     * the specified parentRowID. If the parentRowID does not exist, an error would be thrown.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid.addRow(record, 1); // Adds a new child row to the row with ID=1.\n     * ```\n     * @param data\n     * @param parentRowID\n     * @memberof IgxTreeGridComponent\n     */\n    public addRow(data: any, parentRowID?: any) {\n        if (parentRowID) {\n            const parentRecord = this.records.get(parentRowID);\n\n            if (!parentRecord) {\n                throw Error('Invalid parent row ID!');\n            }\n            this.summaryService.clearSummaryCache({rowID: parentRecord.rowID});\n            if (this.primaryKey && this.foreignKey) {\n                data[this.foreignKey] = parentRowID;\n                super.addRow(data);\n            } else {\n                const parentData = parentRecord.data;\n                const childKey = this.childDataKey;\n                if (this.transactions.enabled) {\n                    const rowId = this.primaryKey ? data[this.primaryKey] : data;\n                    const path: any[] = [];\n                    path.push(...this.generateRowPath(parentRowID));\n                    path.push(parentRowID);\n                    this.transactions.add({\n                        id: rowId,\n                        path: path,\n                        newValue: data,\n                        type: TransactionType.ADD\n                    } as HierarchicalTransaction,\n                        null);\n                } else {\n                    if (!parentData[childKey]) {\n                        parentData[childKey] = [];\n                    }\n                    parentData[childKey].push(data);\n                }\n                this.onRowAdded.emit({ data });\n                this._pipeTrigger++;\n                this.cdr.markForCheck();\n            }\n        } else {\n            if (this.primaryKey && this.foreignKey) {\n                const rowID = data[this.foreignKey];\n                this.summaryService.clearSummaryCache({rowID: rowID});\n            }\n            super.addRow(data);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        //  if this is flat self-referencing data, and CascadeOnDelete is set to true\n        //  and if we have transactions we should start pending transaction. This allows\n        //  us in case of delete action to delete all child rows as single undo action\n        this._gridAPI.deleteRowById(rowId);\n\n    }\n\n    /** @hidden */\n    public generateRowPath(rowId: any): any[] {\n        const path: any[] = [];\n        let record = this.records.get(rowId);\n\n        while (record.parent) {\n            path.push(record.parent.rowID);\n            record = record.parent;\n        }\n\n        return path.reverse();\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        let delayScrolling = false;\n        let record: ITreeGridRecord;\n\n        if (typeof(row) !== 'number') {\n            const rowData = row;\n            const rowID = this._gridAPI.get_row_id(rowData);\n            record = this.processedRecords.get(rowID);\n            this._gridAPI.expand_path_to_record(record);\n\n            if (this.paging) {\n                const rowIndex = this.processedExpandedFlatData.indexOf(rowData);\n                const page = Math.floor(rowIndex / this.perPage);\n\n                if (this.page !== page) {\n                    delayScrolling = true;\n                    this.page = page;\n                }\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof(row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(record));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof(row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(record));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData, rowIndex): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    getSelectedData(): any[] {\n        const source = [];\n\n        const process = (record) => {\n            if (record.summaries) {\n                source.push(null);\n                return;\n            }\n            source.push(record.data);\n        };\n\n        this.verticalScrollContainer.igxForOf.forEach(process);\n        return this.extractDataFromSelection(source);\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.flatData[rowIndex], value);\n    }\n\n    /**\n     * @hidden\n    */\n   protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - tree grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !(col.parent && col.parent.columnLayout));\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n}\n","import { Component, forwardRef, Input, ViewChildren, QueryList, HostBinding, ElementRef, ChangeDetectorRef, DoCheck } from '@angular/core';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    selector: 'igx-tree-grid-row',\n    templateUrl: 'tree-grid-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxTreeGridRowComponent) }]\n})\nexport class IgxTreeGridRowComponent extends IgxRowComponent<IgxTreeGridComponent> implements DoCheck {\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxTreeGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(gridAPI, crudService, selectionService, selection, element, cdr);\n    }\n    private _treeRow: ITreeGridRecord;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1);\n     * const cells = row.cells;\n     * ```\n     */\n    @ViewChildren('treeCell')\n    public cells: QueryList<any>;\n\n    /**\n     * The `ITreeGridRecord` passed to the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const treeRow = row.treeRow;\n     * ```\n     */\n    @Input()\n    public get treeRow(): ITreeGridRecord {\n        return this._treeRow;\n    }\n    public set treeRow(value: ITreeGridRecord) {\n        if (this._treeRow !== value) {\n            this._treeRow = value;\n            this.rowData = this._treeRow.data;\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const expanded = row.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this._treeRow.expanded;\n    }\n\n    /**\n     * Sets a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * row.expanded = true;\n     * ```\n     */\n    set expanded(value: boolean) {\n        (this.gridAPI as IgxTreeGridAPIService).trigger_row_expansion_toggle(this._treeRow, value);\n    }\n\n    /**\n     * @hidden\n     */\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     */\n    public get showIndicator() {\n        return this.grid.loadChildrenOnDemand ?\n            this.grid.expansionStates.has(this.rowID) ?\n                this.treeRow.children && this.treeRow.children.length :\n                this.grid.hasChildrenKey ?\n                    this.rowData[this.grid.hasChildrenKey] :\n                    true :\n            this.treeRow.children && this.treeRow.children.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const classes = super.resolveClasses();\n        const filteredClass = this.treeRow.isFilteredOutParent ? 'igx-grid__tr--filtered' : '';\n        return `${classes} ${filteredClass}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isLoading = this.grid.loadChildrenOnDemand ? this.grid.loadingRows.has(this.rowID) : false;\n        super.ngDoCheck();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray, cloneHierarchicalArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridHierarchizing',\n    pure: true\n})\nexport class IgxTreeGridHierarchizingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], primaryKey: string, foreignKey: string, childDataKey: string,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        let hierarchicalRecords: ITreeGridRecord[] = [];\n        const treeGridRecordsMap = new Map<any, ITreeGridRecord>();\n        const flatData: any[] = [];\n\n        if (primaryKey && foreignKey) {\n            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap, flatData);\n        } else if (childDataKey) {\n            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined,\n                flatData, 0, treeGridRecordsMap);\n        }\n\n        grid.flatData = flatData;\n        grid.records = treeGridRecordsMap;\n        grid.rootRecords = hierarchicalRecords;\n        return hierarchicalRecords;\n    }\n\n    private getRowID(primaryKey: any, rowData: any) {\n        return primaryKey ? rowData[primaryKey] : rowData;\n    }\n\n    private hierarchizeFlatData(id: string, collection: any[], primaryKey: string, foreignKey: string,\n        map: Map<any, ITreeGridRecord>, flatData: any[]):\n        ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n        const missingParentRecords: ITreeGridRecord[] = [];\n        collection.forEach(row => {\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, row),\n                data: row,\n                children: []\n            };\n            const parent = map.get(row[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                missingParentRecords.push(record);\n            }\n\n            map.set(row[primaryKey], record);\n        });\n\n        missingParentRecords.forEach(record => {\n            const parent = map.get(record.data[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                result.push(record);\n            }\n        });\n\n        this.setIndentationLevels(id, result, 0, flatData);\n\n        return result;\n    }\n\n    private setIndentationLevels(id: string, collection: ITreeGridRecord[], indentationLevel: number, flatData: any[]) {\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            record.level = indentationLevel;\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(record.data);\n\n            if (record.children && record.children.length > 0) {\n                this.setIndentationLevels(id, record.children, indentationLevel + 1, flatData);\n            }\n        }\n    }\n\n    private hierarchizeRecursive(id: string, collection: any[], primaryKey: string, childDataKey: string,\n        parent: ITreeGridRecord, flatData: any[], indentationLevel: number, map: Map<any, ITreeGridRecord>): ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n\n        for (let i = 0; i < collection.length; i++) {\n            const item = collection[i];\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, item),\n                data: item,\n                parent: parent,\n                level: indentationLevel\n            };\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(item);\n            map.set(record.rowID, record);\n            record.children = item[childDataKey] ?\n                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :\n                undefined;\n            result.push(record);\n        }\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridFlattening',\n    pure: true\n})\nexport class IgxTreeGridFlatteningPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], id: string,\n        expandedLevels: number, expandedStates: Map<any, boolean>, pipeTrigger: number): any[] {\n\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const data: ITreeGridRecord[] = [];\n\n        grid.processedRootRecords = collection;\n        grid.processedRecords = new Map<any, ITreeGridRecord>();\n\n        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);\n\n        grid.processedExpandedFlatData = data.map(r => r.data);\n\n        return data;\n    }\n\n    private getFlatDataRecursive(collection: ITreeGridRecord[], data: ITreeGridRecord[],\n        expandedLevels: number, expandedStates: Map<any, boolean>, gridID: string,\n        parentExpanded: boolean) {\n        if (!collection || !collection.length) {\n            return;\n        }\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        for (let i = 0; i < collection.length; i++) {\n            const hierarchicalRecord = collection[i];\n\n            if (parentExpanded) {\n                data.push(hierarchicalRecord);\n            }\n\n            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(hierarchicalRecord);\n\n            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);\n\n            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);\n\n            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels,\n                expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);\n        }\n    }\n\n    private updateNonProcessedRecordExpansion(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.expanded = record.expanded;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSorting',\n    pure: true\n})\nexport class IgxTreeGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(\n        hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        id: string,\n        pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n\n        let result: ITreeGridRecord[];\n        if (!expressions.length) {\n            result = hierarchicalData;\n        } else {\n            result = DataUtil.treeGridSort(hierarchicalData, expressions);\n        }\n        const filteredSortedData = [];\n        this.flattenTreeGridRecords(result, filteredSortedData);\n        grid.filteredSortedData = filteredSortedData;\n\n        return result;\n    }\n\n    private flattenTreeGridRecords(records: ITreeGridRecord[], flatData: any[]) {\n        if (records && records.length) {\n            for (const record of records) {\n                flatData.push(record.data);\n                this.flattenTreeGridRecords(record.children, flatData);\n            }\n        }\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridPaging',\n    pure: true\n})\nexport class IgxTreeGridPagingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], page = 0, perPage = 15, id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        if (!grid.paging) {\n            return collection;\n        }\n\n        const len = collection.length;\n        const totalPages = Math.ceil(len / perPage);\n\n        const state = {\n            index: (totalPages > 0 && page >= totalPages) ? totalPages - 1 : page,\n            recordsPerPage: perPage\n        };\n\n        const result: ITreeGridRecord[] = DataUtil.page(cloneArray(collection), state);\n        grid.pagingState = state;\n        (grid as any)._page = state.index;\n\n        return result;\n    }\n}\n/** @hidden */\n@Pipe({\n    name: 'treeGridTransaction',\n    pure: true\n})\nexport class IgxTreeGridTransactionPipe implements PipeTransform {\n\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    transform(collection: any[], id: string, pipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        if (collection && grid.transactions.enabled) {\n            const aggregatedChanges = grid.transactions.getAggregatedChanges(true);\n            if (aggregatedChanges.length > 0) {\n                const primaryKey = grid.primaryKey;\n                if (!primaryKey) {\n                    return collection;\n                }\n\n                const foreignKey = grid.foreignKey;\n                const childDataKey = grid.childDataKey;\n\n                if (foreignKey) {\n                    const flatDataClone = cloneArray(collection);\n                    return DataUtil.mergeTransactions(\n                        flatDataClone,\n                        aggregatedChanges,\n                        grid.primaryKey);\n                } else if (childDataKey) {\n                    const hierarchicalDataClone = cloneHierarchicalArray(collection, childDataKey);\n                    return DataUtil.mergeHierarchicalTransactions(\n                        hierarchicalDataClone,\n                        aggregatedChanges,\n                        childDataKey,\n                        grid.primaryKey);\n                }\n            }\n        }\n\n        return collection;\n    }\n}\n","import { Component, ChangeDetectorRef, ElementRef, ViewChild, Inject, ChangeDetectionStrategy, NgZone, OnInit, Input } from '@angular/core';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { getNodeSizeViaRange } from '../../core/utils';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-cell',\n    templateUrl: 'tree-cell.component.html'\n})\nexport class IgxTreeGridCellComponent extends IgxGridCellComponent implements OnInit {\n    private treeGridAPI: IgxTreeGridAPIService;\n\n    constructor(\n                selectionService: IgxGridSelectionService,\n                crudService: IgxGridCRUDService,\n                gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                selection: IgxSelectionAPIService,\n                cdr: ChangeDetectorRef,\n                element: ElementRef,\n                protected zone: NgZone,\n                @Inject(DOCUMENT) public document) {\n        super(selectionService, crudService, gridAPI, selection, cdr, element, zone);\n        this.treeGridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    expanded = false;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    level = 0;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    showIndicator = false;\n\n    @ViewChild('indicator', { read: ElementRef })\n    public indicator: ElementRef;\n\n    @ViewChild('indentationDiv', { read: ElementRef })\n    public indentationDiv: ElementRef;\n\n    @ViewChild('defaultContentElement', { read: ElementRef })\n    public defaultContentElement: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        super.ngOnInit();\n    }\n\n    /**\n     * @hidden\n     */\n    public toggle(event: Event) {\n        event.stopPropagation();\n        this.treeGridAPI.trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n    }\n\n    /**\n     * @hidden\n     */\n    public onIndicatorFocus() {\n        this.gridAPI.submit_value();\n        this.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    public onLoadingDblClick(event: Event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public calculateSizeToFit(range: any): number {\n        const indicatorWidth = this.indicator.nativeElement.getBoundingClientRect().width;\n        const indicatorStyle = this.document.defaultView.getComputedStyle(this.indicator.nativeElement);\n        const indicatorMargin = parseFloat(indicatorStyle.marginRight);\n        let leftPadding = 0;\n        if (this.indentationDiv) {\n            const indentationStyle = this.document.defaultView.getComputedStyle(this.indentationDiv.nativeElement);\n            leftPadding = parseFloat(indentationStyle.paddingLeft);\n        }\n        const largestWidth = Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n        return largestWidth + indicatorWidth + indicatorMargin + leftPadding;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, GridSummaryPosition, GridSummaryCalculationMode, IGridDataBindable } from '../grid-base.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSummary',\n    pure: true\n})\nexport class IgxTreeGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(flatData: ITreeGridRecord[],\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return flatData;\n        }\n\n        return this.addSummaryRows(grid, flatData, summaryPosition);\n    }\n\n    private addSummaryRows(grid: IgxTreeGridComponent, collection: ITreeGridRecord[], summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            recordsWithSummary.push(record);\n\n            const isExpanded = record.children && record.children.length > 0 && record.expanded;\n\n            if (summaryPosition === GridSummaryPosition.bottom && !isExpanded) {\n                let childRecord = record;\n                let parent = record.parent;\n\n                while (parent) {\n                    const children = parent.children;\n\n                    if (children[children.length - 1] === childRecord ) {\n                        let childData = children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                        childData = this.removeDeletedRecord(grid, parent.rowID, childData);\n                        const summaries = grid.summaryService.calculateSummaries(parent.rowID, childData);\n                        const summaryRecord: ISummaryRecord = {\n                            summaries: summaries,\n                            max: maxSummaryHeight,\n                            cellIndentation: parent.level + 1\n                        };\n                        recordsWithSummary.push(summaryRecord);\n\n                        childRecord = parent;\n                        parent = childRecord.parent;\n                    } else {\n                        break;\n                    }\n                }\n            } else if (summaryPosition === GridSummaryPosition.top && isExpanded) {\n                let childData = record.children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                childData = this.removeDeletedRecord(grid, record.rowID, childData);\n                const summaries = grid.summaryService.calculateSummaries(record.rowID, childData);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight,\n                    cellIndentation: record.level + 1\n                };\n                recordsWithSummary.push(summaryRecord);\n            }\n        }\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, rowId, data) {\n        if (!grid.transactions.enabled || !grid.cascadeOnDelete) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        let row = grid.records.get(rowId);\n        if (!row && deletedRows.lenght === 0) { return []; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowId = row.rowID;\n            if (deletedRows.indexOf(rowId) !== -1) {\n                return [];\n            }\n            row = row.parent;\n        }\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxTreeGridRowComponent } from './tree-grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxTreeGridHierarchizingPipe } from './tree-grid.pipes';\nimport { IgxTreeGridFlatteningPipe, IgxTreeGridSortingPipe, IgxTreeGridPagingPipe, IgxTreeGridTransactionPipe } from './tree-grid.pipes';\nimport { IgxTreeGridCellComponent } from './tree-cell.component';\nimport { IgxTreeGridFilteringPipe } from './tree-grid.filtering.pipe';\nimport { IgxTreeGridSummaryPipe } from './tree-grid.summary.pipe';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxTreeGridHierarchizingPipe,\n    IgxTreeGridFlatteningPipe,\n    IgxTreeGridSortingPipe,\n    IgxTreeGridFilteringPipe,\n    IgxTreeGridPagingPipe,\n    IgxTreeGridTransactionPipe,\n    IgxTreeGridSummaryPipe,\n    IgxRowLoadingIndicatorTemplateDirective\n  ],\n  exports: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxRowLoadingIndicatorTemplateDirective,\n    IgxGridCommonModule\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule\n  ]\n})\nexport class IgxTreeGridModule {\n}\n","import { IgxSelectionAPIService } from '../../core/selection';\nimport { Injectable } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\n\n/** @hidden */\nexport class IgxHierarchicalSelectionAPIService extends IgxSelectionAPIService {\n    protected hSelection: Map<string,  Map<string, any>> = new Map<string,   Map<string, any>>();\n\n    public add_sub_item(rootID: string,  parentID: string, cell: any) {\n        const selItem = new Map<string, any>();\n        selItem.set(parentID, cell);\n        this.hSelection.set(rootID, selItem);\n    }\n\n    public get_sub_item(rootID: string) {\n        let selItem;\n        const sel = this.hSelection.get(rootID);\n        if (sel) {\n            selItem = {\n                gridID: this.hSelection.get(rootID).keys().next().value ,\n                cell: this.hSelection.get(rootID).values().next().value\n            };\n        }\n        return selItem;\n    }\n\n    public clear_sub_item(rootID: string) {\n        return this.hSelection.set(rootID, null);\n    }\n\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { first } from 'rxjs/operators';\nimport { FilterMode } from '../grid-base.component';\nimport { IgxColumnComponent } from '../../grids/column.component';\n\nexport class IgxHierarchicalGridNavigationService extends IgxGridNavigationService {\n    public grid: IgxHierarchicalGridComponent;\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false) {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-hierarchical-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-hierarchical-grid-row';\n    }\n\n    protected getRowByIndex(index) {\n        const selector = this.getRowSelector();\n        const rows = Array.from(this.grid.nativeElement.querySelectorAll(\n            `${selector}[data-rowindex=\"${index}\"]`));\n        let row;\n        rows.forEach((r) => {\n            const parentGrid = this.getClosestElemByTag(r, 'igx-hierarchical-grid');\n            if (parentGrid && parentGrid.getAttribute('id') === this.grid.id) {\n                    row = r;\n            }\n        });\n        return row;\n    }\n\n    private getChildContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode.parentNode;\n    }\n\n    private getChildGridRowContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode;\n    }\n\n    private getChildGrid(childGridID, grid) {\n        const cgrid = grid.hgridAPI.getChildGrids(true).filter((g) => g.id === childGridID)[0];\n        return cgrid;\n    }\n\n    private _isScrolledToBottom(grid) {\n        const scrollTop = grid.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const scrollHeight = grid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n        return scrollHeight === 0 || Math.round(scrollTop +  grid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n    }\n    private getIsChildAtIndex(index) {\n        return this.grid.isChildGridRecord(this.grid.verticalScrollContainer.igxForOf[index]);\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (isSummary) {\n            const summaryRow =  this.grid.summariesRowList.toArray()[0].nativeElement;\n            return summaryRow.querySelector(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n        }\n        const row = this.getRowByIndex(rowIndex);\n        return row.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public navigateUp(rowElement, currentRowIndex, visibleColumnIndex) {\n        const prevElem = rowElement.previousElementSibling;\n        if (prevElem) {\n            const nodeName =  prevElem.children[0].nodeName.toLowerCase();\n            const isElemChildGrid =  nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isElemChildGrid) {\n                this.focusPrevChild(prevElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateUp(rowElement, currentRowIndex, visibleColumnIndex);\n                }\n            }\n        } else if (currentRowIndex !== 0) {\n            // handle scenario when prev item is child grid but is not yet in view\n            const isPrevChildGrid = this.getIsChildAtIndex(currentRowIndex - 1);\n            if (!isPrevChildGrid) {\n                super.navigateUp(rowElement, currentRowIndex, visibleColumnIndex);\n            } else {\n                this.scrollGrid(this.grid, -rowElement.offsetHeight,\n                    () => {\n                        rowElement = this.getRowByIndex(currentRowIndex);\n                        this.navigateUp(rowElement, currentRowIndex, visibleColumnIndex);\n                    });\n            }\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === 0) {\n                // move to prev row in sibling layout or parent\n                this.focusPrev(visibleColumnIndex);\n        }\n    }\n    public navigateDown(rowElement, currentRowIndex, visibleColumnIndex) {\n        const nextElem = rowElement.nextElementSibling;\n        if (nextElem) {\n            // next elem is in DOM\n            const nodeName =  nextElem.children[0].nodeName.toLowerCase();\n            const isNextElemChildGrid =  nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isNextElemChildGrid) {\n                this.focusNextChild(nextElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateDown(rowElement, currentRowIndex, visibleColumnIndex);\n                }\n            }\n        } else if (currentRowIndex !== this.grid.verticalScrollContainer.igxForOf.length - 1) {\n             // scroll next in view\n             super.navigateDown(rowElement, currentRowIndex, visibleColumnIndex);\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1) {\n                // move to next row in sibling layout or in parent\n                this.focusNext(visibleColumnIndex);\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        if (this.grid.parent !== null) {\n            // navigating in child\n            const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n            const cellSelector = this.getCellSelector(visibleColumnIndex);\n\n            if (verticalScroll.scrollTop === 0) {\n                this._focusScrollCellInView(visibleColumnIndex);\n            } else {\n                this.scrollGrid(this.grid, 'top',\n                () => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) {\n                        this._focusScrollCellInView(visibleColumnIndex);\n                     }\n                });\n            }\n\n        } else {\n            super.navigateTop(visibleColumnIndex);\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        // handle scenario where last index is child grid\n        // in that case focus cell in last data row\n        const lastIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n            const cellSelector = this.getCellSelector(visibleColumnIndex);\n            if (verticalScroll.scrollTop === scrTopPosition) {\n                const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                    `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cells[cells.length - 1].focus();\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop,\n                () => {\n                    const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                });\n            }\n        } else {\n            super.navigateBottom(visibleColumnIndex);\n        }\n    }\n    public goToLastCell() {\n        // handle scenario where last index is child grid\n        // in that case focus last cell in last data row\n        const lastIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n            if (verticalScroll.scrollTop === scrTopPosition) {\n                this.onKeydownEnd(targetIndex);\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop,\n                    () => {\n                        this.onKeydownEnd(targetIndex);\n                    });\n            }\n        } else {\n            super.goToLastCell();\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        if (this.grid.parent && !isSummary) {\n            // handle scenario where last child row might not be in view\n            // parent should scroll to child grid end\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diffBottom =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n            const row = this.grid.getRowByIndex(rowIndex).element.nativeElement;\n            const rowBottom = row.getBoundingClientRect().bottom;\n            const rowIsVisible = rowBottom <= this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridTop = this._getMaxTop(this.grid);\n            const diffTop = row.getBoundingClientRect().bottom -\n            row.offsetHeight - gridTop;\n            const endIsVisible = diffBottom <= 0;\n            const topVisible = diffTop >= 0;\n            if (!endIsVisible && !rowIsVisible) {\n                this.scrollGrid(this.grid.parent, diffBottom, () => super.onKeydownEnd(rowIndex));\n            } else if (!topVisible) {\n                const scrGrid = this.grid.verticalScrollContainer.getVerticalScroll().scrollTop !== 0 ? this.grid :\n                this.getNextScrollable(this.grid).grid;\n                const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n                this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : this.grid.rootGrid;\n                this.scrollGrid(topGrid, diffTop, () => super.onKeydownEnd(rowIndex));\n            } else {\n                super.onKeydownEnd(rowIndex, isSummary);\n            }\n        } else {\n            super.onKeydownEnd(rowIndex, isSummary);\n        }\n\n    }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();\n        if (verticalScroll.scrollTop === 0 && this.grid.parent) {\n            // scroll parent so that current child is in view\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        } else {\n            super.goToFirstCell();\n        }\n    }\n\n    public performTab(currentRowEl, rowIndex, visibleColumnIndex, isSummaryRow = false) {\n        const summaryRows = this.grid.summariesRowList.toArray();\n        const hasSummaries = summaryRows.length > 0;\n        const isLastDataRow = rowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1;\n        const nextIsDataRow = this.grid.dataRowList.find(row => row.index === rowIndex + 1) ;\n        const isLastColumn =  this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex;\n        const isLastSummaryRow = hasSummaries && isSummaryRow;\n        const nextIndex = rowIndex + 1;\n        const virt = this.grid.verticalScrollContainer;\n        const isNextChild = nextIndex <= virt.igxForOf.length - 1 &&\n            this.grid.isChildGridRecord(virt.igxForOf[nextIndex]);\n        if (!nextIsDataRow && !(isLastDataRow && hasSummaries) && isLastColumn && !isSummaryRow) {\n            // navigating in child, next is not summary\n            const childContainer = this.getChildGridRowContainer();\n            const nextIsSiblingChild = this.grid.parent ? !!childContainer.nextElementSibling : false;\n            if (nextIsSiblingChild) {\n                this.focusNextChildDOMElem(childContainer, this.grid.parent);\n            } else if (isNextChild) {\n                const isInView = virt.state.startIndex + virt.state.chunkSize > nextIndex;\n                if (!isInView) {\n                    this.scrollGrid(this.grid, 'next', () => {\n                        this.focusNextChildDOMElem(currentRowEl, this.grid);\n                    });\n                } else {\n                    this.focusNextChildDOMElem(currentRowEl, this.grid);\n                }\n            } else {\n                this.navigateDown(currentRowEl, rowIndex, 0);\n            }\n        } else if (isLastSummaryRow && isLastColumn && this.grid.parent) {\n            // navigating in child summary, next is parent summary or next parent row\n            const parent = this.grid.parent;\n            const parentHasSummary = parent.summariesRowList.toArray().length > 0;\n            const parentRowIndex = parseInt(\n                this.getClosestElemByTag(currentRowEl, 'igx-child-grid-row').parentNode.getAttribute('data-rowindex'), 10);\n            const isLastRowInParent = parent.verticalScrollContainer.igxForOf.length - 1 === parentRowIndex;\n            // check if next is sibling\n            const childRowContainer = this.getChildGridRowContainer(this.grid);\n            const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n            if (isLastRowInParent && parentHasSummary && !nextIsSiblingChild) {\n                // next is parent summary\n                const parentSummary = parent.summariesRowList.toArray()[0].nativeElement;\n                parent.navigation.focusNextRow(parentSummary, 0, this.grid.rootGrid, true);\n            } else {\n                // next is sibling or parent\n                this.focusNext(0);\n            }\n        } else  if (isLastDataRow && hasSummaries && isLastColumn && this.grid.parent) {\n            // navigating in child rows, next is child grid's summary row\n           this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid.parent, true);\n        } else {\n            super.performTab(currentRowEl, rowIndex, visibleColumnIndex, isSummaryRow);\n        }\n    }\n\n    private focusNextChildDOMElem(currentRowEl, grid) {\n        const gridElem = currentRowEl.nextElementSibling.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n        if (childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n            childGrid.navigation.moveFocusToFilterCell(true);\n            return;\n        }\n        this.focusNextChild(currentRowEl.nextElementSibling, 0, grid);\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        if (column.visibleIndex === 0 && this.grid.parent) {\n            eventArgs.preventDefault();\n            let targetGrid = this.grid.parent;\n            const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n            if (prevSiblingChild) {\n                const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                targetGrid = this.getChildGrid(gridElem.getAttribute('id'), this.grid.parent);\n            }\n            this.focusPrev(targetGrid.unpinnedColumns[targetGrid.unpinnedColumns.length - 1].visibleIndex);\n        } else {\n            super.navigatePrevFilterCell(column, eventArgs);\n        }\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            const dataRows = this.grid.rowList.toArray();\n            const hasRows = dataRows.length !== 0;\n            const summaryRows = this.grid.summariesRowList.toArray();\n            const hasSummaries = summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0;\n            if (hasRows) {\n                this.focusNextRow(dataRows[0].nativeElement, 0, this.grid, false);\n            } else if (hasSummaries) {\n                this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid, true);\n            } else {\n                this.focusNext(0);\n            }\n            eventArgs.preventDefault();\n        } else {\n            super.navigateNextFilterCell(column, eventArgs);\n        }\n    }\n\n    public performShiftTabKey(currentRowEl, rowIndex, visibleColumnIndex, isSummary = false) {\n        if (visibleColumnIndex === 0 && rowIndex === 0 && this.grid.parent && !isSummary) {\n            if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n                if (prevSiblingChild) {\n                    const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                    this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n                } else {\n                    this.navigateUp(currentRowEl, rowIndex,\n                        this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex);\n                }\n            }\n        } else if (visibleColumnIndex === 0 && currentRowEl.previousElementSibling &&\n            currentRowEl.previousElementSibling.children[0].tagName.toLowerCase() === 'igx-child-grid-row') {\n            const gridElem = this.getLastGridElem(currentRowEl.previousElementSibling);\n            this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n        } else if (visibleColumnIndex === 0 && isSummary) {\n            const lastRowIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n            if (lastRowIndex === -1) {\n                // no child data\n                if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                    this.moveFocusToFilterCell();\n                } else {\n                    this.navigateUp(currentRowEl, rowIndex,\n                        this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex);\n                }\n            } else if (!this.getIsChildAtIndex(lastRowIndex)) {\n                super.goToLastCell();\n            } else {\n                const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(lastRowIndex, true);\n                const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n                if (verticalScroll.scrollTop === scrTopPosition || isNaN(scrTopPosition)) {\n                    const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                    this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                } else {\n                    this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop,\n                        () => {\n                            const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                            this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                        });\n                }\n            }\n        } else {\n            super.performShiftTabKey(currentRowEl, rowIndex, visibleColumnIndex, isSummary);\n        }\n    }\n\n    private getLastGridElem(trContainer) {\n        const children = trContainer.children;\n        const closestChild = children[children.length - 1].children[0].children[0];\n        return closestChild;\n    }\n\n    private performShiftTabIntoChild(gridElem, currentRowEl, rowIndex) {\n        const childGridID = gridElem.getAttribute('id');\n            const childGrid = this.getChildGrid(childGridID, this.grid) || this.getChildGrid(childGridID, this.grid.parent);\n            const lastIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n            const summaryRows = childGrid.summariesRowList.toArray();\n            if (summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0) {\n                // move focus to last summary row cell\n                const summaryRow = summaryRows[0].nativeElement;\n                this.focusPrevRow(summaryRow, lastIndex, childGrid, true, true);\n            } else if (childGrid.rowList.toArray().length === 0 &&\n             childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n                 // move to filter cell\n                childGrid.navigation.moveFocusToFilterCell();\n            } else {\n                // move to next cell\n                this.navigateUp(currentRowEl, rowIndex, lastIndex);\n            }\n    }\n\n    private _focusScrollCellInView(visibleColumnIndex) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        const cells = this.grid.nativeElement.querySelectorAll(\n            `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n        const cell = cells[0];\n        const childContainer = this.grid.nativeElement.parentNode.parentNode;\n        const scrTop = this.grid.parent.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const dc = childContainer.parentNode.parentNode;\n        const scrWith = parseInt(dc.style.top, 10);\n        if (scrTop === 0 || scrWith === 0) {\n            // cell is in view\n            cell.focus({preventScroll: true});\n        } else {\n            // scroll parent so that cell is in view\n            this.scrollGrid(this.grid.parent, scrWith , () => cell.focus({preventScroll: true}));\n        }\n    }\n\n    private focusNextChild(elem, visibleColumnIndex, grid) {\n        const gridElem = elem.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.toArray().length === 0) {\n            this.focusNext(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the next child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        if (childGrid.verticalScrollContainer.state.startIndex !== 0) {\n            // scroll to top\n            this.scrollGrid(childGrid, 'top', () => this.focusNextRow(elem, visibleColumnIndex, childGrid));\n        } else {\n            this.focusNextRow(elem, visibleColumnIndex, childGrid);\n        }\n    }\n    private focusPrevChild(elem, visibleColumnIndex, grid) {\n        const grids = [];\n        const gridElems = Array.from(elem.querySelectorAll('igx-hierarchical-grid'));\n        const childLevel = grid.childLayoutList.first.level;\n        gridElems.forEach((hg) => {\n            const parentRow = this.getClosestElemByTag(hg, 'igx-child-grid-row');\n            if (parentRow && parseInt(parentRow.getAttribute('data-level'), 10) === childLevel) {\n                grids.push(hg);\n            }\n        });\n        const gridElem = grids[grids.length - 1];\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.toArray().length === 0) {\n            this.focusPrev(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the previous child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        const isScrolledToBottom = this._isScrolledToBottom(childGrid);\n        const lastIndex = childGrid.verticalScrollContainer.igxForOf.length - 1;\n        if (!isScrolledToBottom) {\n            // scroll to end\n            this.scrollGrid(childGrid, 'bottom', () => this.focusPrevChild(elem, visibleColumnIndex, grid));\n        } else {\n            const lastRowInChild = childGrid.getRowByIndex(lastIndex);\n            const isChildGrid = lastRowInChild.nativeElement.nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isChildGrid) {\n                this.focusPrevChild(lastRowInChild.nativeElement.parentNode, visibleColumnIndex, childGrid);\n            } else {\n                this.focusPrevRow(lastRowInChild.nativeElement, visibleColumnIndex, childGrid, true);\n            }\n        }\n    }\n    private focusPrev(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        let parentContainer = this.getChildContainer(currGrid);\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const prevIsSiblingChild = !!childRowContainer.previousElementSibling;\n        let prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n        if (prev) {\n            if (prevIsSiblingChild) {\n                this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n            } else {\n                this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n            }\n        } else {\n            this.scrollGrid(currGrid.parent, 'prev',\n            () => {\n            parentContainer = this.getChildContainer(grid);\n            childRowContainer = this.getChildGridRowContainer(grid);\n            prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n            if (prevIsSiblingChild) {\n                this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n            } else {\n                this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n            }\n            });\n        }\n    }\n\n    private getNextParentInfo(grid) {\n        // find next parent that is not at bottom\n        let currGrid = grid.parent;\n        let nextElem = this.getChildContainer(grid).nextElementSibling;\n        while (!nextElem && currGrid.parent !== null) {\n            nextElem = this.getChildContainer(currGrid).nextElementSibling;\n            currGrid = currGrid.parent;\n        }\n\n        return { grid: currGrid, nextElement: nextElem};\n    }\n    private getNextScrollable(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return {grid: grid, prev: null };\n        }\n        let nonScrollable = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop === 0;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            nonScrollable = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop === 0;\n        }\n        return {grid: currGrid, prev: prev };\n    }\n\n    private focusNext(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        const parentInfo = this.getNextParentInfo(currGrid);\n        const nextParentGrid = parentInfo.grid;\n        let nextParentElem = parentInfo.nextElement;\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n        let next = childRowContainer.nextElementSibling || nextParentElem;\n        const verticalScroll = nextParentGrid.verticalScrollContainer.getVerticalScroll();\n        if (next) {\n            if (nextIsSiblingChild) {\n                this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n            } else {\n                this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n            }\n        } else if (verticalScroll.scrollTop !==\n            verticalScroll.scrollHeight - nextParentGrid.verticalScrollContainer.igxForContainerSize ) {\n            this.scrollGrid(nextParentGrid, 'next',\n            () => {\n                nextParentElem = parentInfo.nextElement;\n                childRowContainer = this.getChildGridRowContainer();\n                next = childRowContainer.nextElementSibling || nextParentElem;\n                if (next && nextIsSiblingChild) {\n                    this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n                } else if (next) {\n                    this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n                }\n            });\n        }\n    }\n    private getNextScrollableDown(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return {grid: grid, prev: null };\n        }\n        let scrollTop = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n        let scrollHeight = currGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n        let nonScrollable = scrollHeight === 0 ||\n        Math.round(scrollTop +  currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            scrollTop = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n            scrollHeight = currGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n            nonScrollable = scrollHeight === 0 ||\n            Math.round(scrollTop +  currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        }\n        return {grid: currGrid, prev: prev };\n    }\n\n    private _getMinBottom(grid) {\n        let currGrid = grid;\n        let bottom = currGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            bottom = Math.min(bottom, currGrid.tbody.nativeElement.getBoundingClientRect().bottom);\n        }\n        return bottom;\n    }\n\n    private _getMaxTop(grid) {\n        let currGrid = grid;\n        let top = currGrid.tbody.nativeElement.getBoundingClientRect().top;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            top = Math.max(top, currGrid.tbody.nativeElement.getBoundingClientRect().top);\n        }\n        return top;\n    }\n\n    private focusNextRow(elem, visibleColumnIndex, grid, isSummary?) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex) && grid.navigation.isColumnLeftFullyVisible(visibleColumnIndex)) {\n            const cell =\n            elem.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            const closestScrollableGrid = this.getNextScrollableDown(grid).grid;\n            // const diff = cell.getBoundingClientRect().bottom - grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridBottom = this._getMinBottom(grid);\n            const diff = cell.getBoundingClientRect().bottom - gridBottom;\n            const inView =  diff <= 0;\n            const scrollTop = closestScrollableGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n            const scrollHeight = closestScrollableGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n            const canScroll = !(scrollHeight === 0 ||\n        Math.round(scrollTop +  closestScrollableGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight);\n            if (!inView && canScroll) {\n                this.scrollGrid(closestScrollableGrid, diff, () => cell.focus({ preventScroll: true }));\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            const cellElem = elem.querySelector(`${cellSelector}`);\n            const rowIndex = parseInt(cellElem.getAttribute('data-rowindex'), 10);\n            grid.navigation.performHorizontalScrollToCell(rowIndex, visibleColumnIndex);\n        }\n    }\n\n    private focusPrevRow(elem, visibleColumnIndex, grid, inChild?, isSummary?) {\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex) && grid.navigation.isColumnLeftFullyVisible(visibleColumnIndex)) {\n            const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n            const cells =  elem.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            let cell = cells[cells.length - 1];\n            const rIndex = parseInt(elem.getAttribute('data-rowindex'), 10);\n            const scrGrid = grid.verticalScrollContainer.getVerticalScroll().scrollTop !== 0 ? grid :\n             this.getNextScrollable(grid).grid;\n            const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n            grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : grid.rootGrid;\n            const gridTop = this._getMaxTop(grid);\n            const scrTop = scrGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n            const diff = cell.getBoundingClientRect().bottom -\n            cell.offsetHeight - gridTop;\n            if (scrTop !== 0 && diff < 0 && !inChild) {\n                this.scrollGrid(scrGrid, diff, () => {\n                    const el = !isSummary ? grid.navigation.getRowByIndex(rIndex) : elem;\n                    cell = el.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`)[0];\n                    cell.focus({ preventScroll: true });\n                });\n            } else if (diff < 0 && inChild) {\n                this.scrollGrid(topGrid, diff, () => {\n                    cell.focus({ preventScroll: true });\n                });\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, () => {\n                this.focusPrevRow(elem, visibleColumnIndex, grid, inChild, isSummary);\n            });\n        }\n    }\n\n    private horizontalScrollGridToIndex(grid, visibleColumnIndex, callBackFunc) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(callBackFunc);\n        grid.dataRowList.toArray()[0].virtDirRow.scrollTo(unpinnedIndex);\n    }\n    private scrollGrid(grid, target, callBackFunc) {\n        grid.nativeElement.focus({preventScroll: true});\n        requestAnimationFrame(() => {\n            if (typeof target === 'number') {\n                grid.verticalScrollContainer.addScrollTop(target);\n            } else {\n                switch (target) {\n                    case 'top' : grid.verticalScrollContainer.scrollTo(0); break;\n                    case 'bottom' : grid.verticalScrollContainer.scrollTo(grid.verticalScrollContainer.igxForOf.length - 1); break;\n                    case 'next' :  grid.verticalScrollContainer.scrollNext(); break;\n                    case 'prev' :  grid.verticalScrollContainer.scrollPrev(); break;\n                }\n            }\n            grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(callBackFunc);\n        });\n    }\n\n    private _navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const prevElem = rowElement.previousElementSibling;\n        const scrollable = this.getNextScrollable(this.grid);\n        const grid = scrollable.grid;\n        const scrTop = grid.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const containerTop = scrollable.prev.nativeElement.parentNode.parentNode.parentNode.parentNode;\n        const top = parseInt(containerTop.style.top, 10);\n        if (scrTop !== 0 && top < 0) {\n            this.scrollGrid(grid, -prevElem.offsetHeight,\n                () => super.navigateUp(rowElement, currentRowIndex, visibleColumnIndex));\n        } else {\n            super.navigateUp(rowElement, currentRowIndex, visibleColumnIndex);\n        }\n    }\n\n    private _navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const nextElem = rowElement.nextElementSibling;\n        const childContainer = this.grid.nativeElement.parentNode.parentNode;\n        const diff =\n        childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n        const endIsVisible = diff < 0;\n        const scrollable = this.getNextScrollableDown(this.grid);\n        const grid = scrollable.grid;\n        if (!endIsVisible) {\n            this.scrollGrid(grid, nextElem.offsetHeight,\n                () => super.navigateDown(rowElement, currentRowIndex, visibleColumnIndex));\n        } else {\n            super.navigateDown(rowElement, currentRowIndex, visibleColumnIndex);\n        }\n    }\n\n    private getClosestElemByTag(sourceElem, targetTag) {\n        let result = sourceElem;\n        while (result !== null && result.nodeType === 1) {\n            if (result.tagName.toLowerCase() === targetTag.toLowerCase()) {\n                return result;\n            }\n            result = result.parentNode;\n        }\n        return null;\n    }\n}\n","import {\n    QueryList,\n    ContentChildren,\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    Optional,\n    Input,\n    ViewChild,\n    TemplateRef\n} from '@angular/core';\nimport { IgxGridBaseComponent, IgxGridTransaction, IGridDataBindable } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../column.component';\nimport { IgxSummaryOperand } from '../summaries/grid-summary';\nimport { IgxHierarchicalTransactionService, IgxOverlayService } from '../../services/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\n\nexport const IgxHierarchicalTransactionServiceFactory = {\n    provide: IgxGridTransaction,\n    useFactory: hierarchicalTransactionServiceFactory\n};\n\nexport function hierarchicalTransactionServiceFactory() {\n    return () => new IgxHierarchicalTransactionService();\n}\n\nexport interface IPathSegment {\n    rowID: any;\n    rowIslandKey: string;\n}\n\nexport abstract class IgxHierarchicalGridBaseComponent extends IgxGridBaseComponent {\n    public abstract rootGrid;\n\n    @Input()\n    public expandChildren: boolean;\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        this._maxLevelHeaderDepth = this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        return this._maxLevelHeaderDepth;\n    }\n\n     /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.rootGrid ? this.rootGrid.outletDirective : this.outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public hgridAPI: IgxHierarchicalGridAPIService;\n\n    /**\n     * @hidden\n     */\n    public parentIsland: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n    */\n    public childRow: IgxChildGridRowComponent;\n\n    protected _expandChildren = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxHierarchicalSelectionAPIService,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            gridAPI,\n            selection,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    public createColumnsList(cols: Array<any>) {\n        const columns = [];\n        const topLevelCols = this.onlyTopLevel(cols);\n        topLevelCols.forEach((col) => {\n            const ref = this._createColumn(col);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n        const result = flatten(columns);\n        this.columnList.reset(result);\n        this.columnList.notifyOnChanges();\n    }\n\n    protected _createColumn(col) {\n        let ref;\n        if (col instanceof IgxColumnGroupComponent) {\n            ref = this._createColGroupComponent(col);\n        } else {\n            ref = this._createColComponent(col);\n        }\n        return ref;\n    }\n\n    protected _createColGroupComponent(col: IgxColumnGroupComponent) {\n        const factoryGroup = this.resolver.resolveComponentFactory(IgxColumnGroupComponent);\n        const ref = this.viewRef.createComponent(factoryGroup, null, this.viewRef.injector);\n        ref.changeDetectorRef.detectChanges();\n        factoryGroup.inputs.forEach((input) => {\n            const propName = input.propName;\n            (<any>ref.instance)[propName] = (<any>col)[propName];\n        });\n        if (col.children.length > 0) {\n            const newChildren = [];\n            col.children.forEach(child => {\n                const newCol = this._createColumn(child).instance;\n                newCol.parent = ref.instance;\n                newChildren.push(newCol);\n            });\n            (<IgxColumnGroupComponent>ref.instance).children.reset(newChildren);\n            (<IgxColumnGroupComponent>ref.instance).children.notifyOnChanges();\n        }\n        (<IgxColumnGroupComponent>ref.instance).grid = this;\n        return ref;\n    }\n\n    protected _createColComponent(col) {\n        const factoryColumn = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const ref = this.viewRef.createComponent(factoryColumn, null, this.viewRef.injector);\n        factoryColumn.inputs.forEach((input) => {\n            const propName = input.propName;\n            if (!((<any>col)[propName] instanceof IgxSummaryOperand)) {\n                (<any>ref.instance)[propName] = (<any>col)[propName];\n            } else {\n                (<any>ref.instance)[propName] = col[propName].constructor;\n            }\n        });\n        (<IgxColumnComponent>ref.instance).grid = this;\n        return ref;\n    }\n\n    protected getGridsForIsland(rowIslandID: string) {\n        return this.hgridAPI.getChildGridsForRowIsland(rowIslandID);\n    }\n\n    protected getChildGrid(path: Array<IPathSegment>) {\n        if (!path) {\n            return;\n        }\n        return this.hgridAPI.getChildGrid(path);\n    }\n}\n\nfunction flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            result = result.concat(flatten(el.children.toArray()));\n        }\n    });\n    return result;\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\nimport { IPathSegment } from './hierarchical-grid-base.component';\nimport { IgxGridBaseComponent, GridBaseAPIService, IGridDataBindable } from '../grid';\nexport class IgxHierarchicalGridAPIService extends GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable> {\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<string, Map<any, IgxHierarchicalGridComponent>> =\n        new Map<string, Map<any, IgxHierarchicalGridComponent>>();\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    getChildRowIsland(key: string) {\n        return this.childRowIslands.get(key);\n    }\n\n    getChildGrid(path: Array<IPathSegment>) {\n        const currPath = path;\n        let grid;\n        const pathElem = currPath.shift();\n        const childrenForLayout = this.childGrids.get(pathElem.rowIslandKey);\n        if (childrenForLayout) {\n            const childGrid = childrenForLayout.get(pathElem.rowID);\n            if (currPath.length === 0) {\n                grid = childGrid;\n            } else {\n                grid = childGrid.hgridAPI.getChildGrid(currPath);\n            }\n        }\n        return grid;\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        const allChildren = [];\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid) => {\n                allChildren.push(grid);\n                if (inDepth) {\n                    const children = grid.hgridAPI.getChildGrids(inDepth);\n                    children.forEach((item) => {\n                        allChildren.push(item);\n                    });\n                }\n            });\n        });\n\n        return allChildren;\n    }\n\n    getParentRowId(childGrid: IgxHierarchicalGridComponent) {\n        let rowID;\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid, key) => {\n                if (grid === childGrid) {\n                    rowID = key;\n                    return;\n                }\n            });\n        });\n        return rowID;\n    }\n\n    registerChildGrid(parentRowID: string|object, rowIslandKey: string, grid: IgxHierarchicalGridComponent) {\n        let childrenForLayout = this.childGrids.get(rowIslandKey);\n        if (!childrenForLayout) {\n            this.childGrids.set(rowIslandKey, new Map<any, IgxHierarchicalGridComponent>());\n            childrenForLayout = this.childGrids.get(rowIslandKey);\n        }\n        childrenForLayout.set(parentRowID, grid);\n    }\n\n    getChildGridsForRowIsland(rowIslandKey): IgxHierarchicalGridComponent[] {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        const children = [];\n        if (childrenForLayout) {\n            childrenForLayout.forEach((child) => {\n                children.push(child);\n            });\n        }\n        return children;\n    }\n\n    getChildGridByID(rowIslandKey, rowID) {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        return childrenForLayout.get(rowID);\n    }\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\n\nexport class IgxRowIslandAPIService {\n    public change: Subject<any> = new Subject<any>();\n    protected state: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<any, IgxHierarchicalGridComponent> = new Map<any, IgxHierarchicalGridComponent>();\n\n    public register(rowIsland: IgxRowIslandComponent) {\n        this.state.set(rowIsland.id, rowIsland);\n        this.destroyMap.set(rowIsland.id, new Subject<boolean>());\n    }\n\n    public unsubscribe(rowIsland: IgxRowIslandComponent) {\n        this.state.delete(rowIsland.id);\n    }\n\n    public get(id: string): IgxRowIslandComponent {\n        return this.state.get(id);\n    }\n\n    public unset(id: string) {\n        this.state.delete(id);\n        this.destroyMap.delete(id);\n    }\n\n    public reset(oldId: string, newId: string) {\n        const destroy = this.destroyMap.get(oldId);\n        const rowIsland = this.get(oldId);\n\n        this.unset(oldId);\n\n        if (rowIsland) {\n            this.state.set(newId, rowIsland);\n        }\n\n        if (destroy) {\n            this.destroyMap.set(newId, destroy);\n        }\n    }\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(rowIslandKey: string) {\n        return this.childRowIslands.get(rowIslandKey);\n    }\n\n    registerChildGrid(parentRowID: string|object, grid: IgxHierarchicalGridComponent) {\n        this.childGrids.set(parentRowID, grid);\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        let allChildren = [];\n        this.childGrids.forEach((grid) => {\n            allChildren.push(grid);\n        });\n        if (inDepth) {\n            this.childRowIslands.forEach((layout) => {\n                allChildren = allChildren.concat(layout.rowIslandAPI.getChildGrids(inDepth));\n            });\n        }\n\n        return allChildren;\n    }\n\n    getChildGridByID(rowID) {\n        return this.childGrids.get(rowID);\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    Input,\n    QueryList,\n    OnInit,\n    Inject,\n    ElementRef,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    IterableDiffers,\n    ViewContainerRef,\n    NgZone,\n    AfterViewInit,\n    OnChanges,\n    Output,\n    EventEmitter,\n    Optional,\n    OnDestroy\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxGridTransaction, IGridDataBindable, IgxGridBaseComponent } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { TransactionService, Transaction, State } from '../../services';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\nimport { IgxOverlayService } from '../../services/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nexport interface IGridCreatedEventArgs {\n    owner: IgxRowIslandComponent;\n    parentID: any;\n    grid: IgxHierarchicalGridComponent;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-row-island',\n    template: ``,\n    providers: [IgxRowIslandAPIService]\n})\nexport class IgxRowIslandComponent extends IgxHierarchicalGridBaseComponent\n            implements AfterContentInit, AfterViewInit, OnChanges, OnInit, OnDestroy {\n    /**\n     * Sets the key of the row island by which child data would be taken from the row data if such is provided.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\">\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    public key: string;\n\n    /**\n     * Sets if all immediate children of the grids for this `IgxRowIslandComponent` should be expanded/collapsed.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" [expandChildren]=\"true\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._expandChildren = value;\n        this.rowIslandAPI.getChildGrids().forEach((grid) => {\n            if (document.body.contains(grid.nativeElement)) {\n                // Detect changes right away if the grid is visible\n                grid.expandChildren = value;\n                grid.markForCheck();\n            } else {\n                // Else defer the detection on changes when the grid gets into view for performance.\n                grid.updateOnRender = true;\n            }\n        });\n    }\n\n    /**\n     * Gets if all immediate children of the grids for this `IgxRowIslandComponent` have been set to be expanded/collapsed.\n     * ```typescript\n     * const expanded = this.rowIsland.expandChildren;\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    get expandChildren(): boolean {\n        return this._expandChildren;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public children = new QueryList<IgxRowIslandComponent>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: false })\n    public childColumns = new QueryList<IgxColumnComponent>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onLayoutChange = new EventEmitter<any>();\n\n    /**\n     * Event emmited when a grid is being created based on this row island.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" (onGridCreated)=\"gridCreated($event)\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Output()\n    public onGridCreated = new EventEmitter<IGridCreatedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    get id() {\n        const pId = this.parentId ? this.parentId.substring(this.parentId.indexOf(this.layout_id) + this.layout_id.length) + '-' : '';\n        return this.layout_id + pId +  this.key;\n    }\n\n    /**\n     * @hidden\n     */\n    get parentId() {\n       return this.parentIsland ? this.parentIsland.id : null;\n    }\n\n    /**\n     * @hidden\n     */\n    get level() {\n        let ptr = this.parentIsland;\n        let lvl = 0;\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parentIsland;\n        }\n        return lvl + 1;\n    }\n\n    /**\n     * Get transactions service for the children grid components.\n     * @experimental @hidden\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        const grids = this.rowIslandAPI.getChildGrids();\n        return grids.length ? grids[0].transactions : this._transactions;\n    }\n\n    /**\n     * @hidden\n     */\n    public initialChanges = [];\n\n    /**\n     * @hidden\n     */\n    public rootGrid = null;\n    readonly data: any[];\n    readonly filteredData: any[];\n    private layout_id = `igx-row-island-`;\n    private isInit = false;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxHierarchicalSelectionAPIService,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        public rowIslandAPI: IgxRowIslandAPIService) {\n        super(\n            selectionService,\n            crudService,\n            gridAPI,\n            selection,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions\n        );\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parentIsland = this;\n        });\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            return colsArray.indexOf(item) === -1;\n        });\n        this.childColumns.reset(topCols);\n        this.columnList.changes.pipe(takeUntil(this.destroy$)).subscribe(() => { this.updateColumnList(); });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.rowIslandAPI.register(this);\n        if (this.parentIsland) {\n            this.parentIsland.rowIslandAPI.registerChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.registerChildRowIsland(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes) {\n        this.onLayoutChange.emit(changes);\n        if (!this.isInit) {\n            this.initialChanges.push(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        // Override the base destroy because we don't have rendered anything to use removeEventListener on\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.rowIslandAPI.unset(this.id);\n        if (this.parentIsland) {\n            this.parentIsland.rowIslandAPI.unsetChildRowIsland(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    reflow() {}\n\n    /**\n     * @hidden\n     */\n    calculateGridHeight() {}\n\n    protected updateColumnList() {\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            if (colsArray.indexOf(item) === -1) {\n                /* Reset the default width of the columns that come into this row island,\n                because the root catches them first during the detectChanges() and sets their defaultWidth. */\n                item.defaultWidth = undefined;\n                return true;\n            }\n            return false;\n        });\n        this.childColumns.reset(topCols);\n\n        if (this.parentIsland) {\n            this.parentIsland.columnList.notifyOnChanges();\n        } else {\n            this.rootGrid.columnList.notifyOnChanges();\n        }\n\n        this.rowIslandAPI.getChildGrids().forEach((grid: IgxHierarchicalGridComponent) => {\n            grid.createColumnsList(this.childColumns.toArray());\n            if (!document.body.contains(grid.nativeElement)) {\n                grid.updateOnRender = true;\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnInit,\n    ViewChild,\n    AfterViewInit,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { GridBaseAPIService } from '.././api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-child-grid-row',\n    templateUrl: './child-grid-row.component.html'\n})\nexport class IgxChildGridRowComponent implements AfterViewInit, OnInit {\n\n\n    /**\n * Returns whether the row is expanded.\n * ```typescript\n * const RowExpanded = this.grid1.rowList.first.expanded;\n * ```\n */\n    public expanded = false;\n\n    @Input()\n    layout: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n     */\n    public get parentHasScroll() {\n        return !this.parentGrid.verticalScrollContainer.dc.instance.notVirtual;\n    }\n\n\n    /**\n     * @hidden\n     */\n    // public get layout() {\n    //     const layout = (this.gridAPI as IgxHierarchicalGridAPIService).getLayout(`igx-row-island-` + this.rowData.key);\n    //    return layout;\n    // }\n    /**\n    * @hidden\n    */\n    @Input()\n    public parentGridID: string;\n\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public rowData: any = [];\n\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    @ViewChild('hgrid')\n    private hGrid: any/* TODO: IgxHierarchicalGridComponent*/;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    // TODO: Refactor\n    get parentGrid(): any/* TODO: IgxHierarchicalGridComponent*/ {\n        return this.gridAPI.grid;\n    }\n\n    @HostBinding('attr.data-level')\n    get level() {\n        return this.layout.level;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<any/* TODO: IgxHierarchicalGridComponent*/>,\n        private selectionAPI: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        // setting child data only once on init\n        // due to context change issues when moving cached views containing hierarchical child grids\n        this.hGrid.data = this.rowData.childGridsData[this.layout.key];\n        this.layout.onLayoutChange.subscribe((ch) => {\n            this._handleLayoutChanges(ch);\n        });\n        const changes = this.layout.initialChanges;\n        changes.forEach(change => {\n            this._handleLayoutChanges(change);\n        });\n        this.hGrid.parent = this.parentGrid;\n        this.hGrid.parentIsland = this.layout;\n        this.hGrid.childRow =  this;\n        this.layout.onGridCreated.emit({\n            owner: this.layout,\n            parentID: this.rowData.rowID,\n            grid: this.hGrid\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.hGrid.childLayoutList = this.layout.children;\n        if (this.layout.childColumns.length > 0 && !this.hGrid.autoGenerate) {\n            this.hGrid.createColumnsList(this.layout.childColumns.toArray());\n        }\n        const layouts = this.hGrid.childLayoutList.toArray();\n        layouts.forEach((l) => this.hGrid.hgridAPI.registerChildRowIsland(l));\n        this.parentGrid.hgridAPI.registerChildGrid(this.rowData.rowID, this.layout.key, this.hGrid);\n        this.layout.rowIslandAPI.registerChildGrid(this.rowData.rowID, this.hGrid);\n\n        this.hGrid.cdr.detectChanges();\n    }\n\n\n    private _handleLayoutChanges(changes: SimpleChanges) {\n        for (const change in changes) {\n            if (changes.hasOwnProperty(change)) {\n                this.hGrid[change] = changes[change].currentValue;\n            }\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    forwardRef,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ContentChildren,\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    AfterViewInit,\n    AfterContentInit,\n    Optional,\n    OnInit,\n    OnDestroy,\n    ContentChild\n} from '@angular/core';\nimport { IgxGridBaseComponent, IgxGridTransaction } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../../core/displayDensity';\nimport { IGridDataBindable, IgxColumnComponent, } from '../grid/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxTemplateOutletDirective } from '../../directives/template-outlet/template_outlet.directive';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\n\nlet NEXT_ID = 0;\n\nexport interface HierarchicalStateRecord {\n    rowID: any;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid',\n    templateUrl: 'hierarchical-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxHierarchicalGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxHierarchicalGridComponent) },\n        IgxGridSummaryService,\n        IgxFilteringService,\n        IgxHierarchicalGridNavigationService,\n        IgxForOfSyncService\n    ]\n})\nexport class IgxHierarchicalGridComponent extends IgxHierarchicalGridBaseComponent\n    implements IGridDataBindable, AfterViewInit, AfterContentInit, OnInit, OnDestroy {\n\n    /**\n     * Sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-hgrid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this.h_id;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxHierarchicalGridComponent` with an array of data.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    public set data(value: any[]) {\n        this._data = value;\n        if (this.parent) {\n            this.calculateGridHeight();\n        }\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n        if (this.parent && (this.height === null || this.height.indexOf('%') !== -1)) {\n            // If the height will change based on how much data there is, recalculate sizes in igxForOf.\n            requestAnimationFrame(() => {\n                this.updateParentSizes();\n            });\n        }\n    }\n\n    /**\n     * Returns an array of data set to the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get data(): any[] {\n        return this._data;\n    }\n\n    /**\n    * Sets the state of the `IgxHierarchicalGridComponent` containing which rows are expanded.\n    * ```typescript\n    * this.gridState = [{ rowID: 1 }, { rowID: 4}];\n    * ```\n    * ```html\n    * <igx-hierarchical-grid [primaryKey]=\"'ID'\" [data]=\"Data\" [autoGenerate]=\"false\" [hierarchicalState]=\"hgridState\">\n    *      <igx-column field=\"ID\"  [dataType]='number'></igx-column>\n    *      <igx-column field=\"Product\"  [dataType]='string'></igx-column>\n    *      <igx-column field=\"Description\"  [dataType]='string'></igx-column>\n    * </igx-hierarchical-grid>\n    * ```\n    * @memberof IgxHierarchicalGridComponent\n    */\n    @Input()\n    public get hierarchicalState() {\n        return this._hierarchicalState;\n    }\n    public set hierarchicalState(val) {\n        this._hierarchicalState = val;\n        if (this.parent) {\n            requestAnimationFrame(() => {\n                this.updateParentSizes();\n            });\n        }\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets if all immediate children of the `IgxHierarchicalGridComponent` should be expanded/collapsed.\n     * Defult value is false.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\" [expandChildren]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._expandChildren = value;\n        if (value && this.data) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n        } else if (this.data) {\n            this.hierarchicalState = [];\n        }\n    }\n\n    /**\n     * Gets if all immediate children of the `IgxHierarchicalGridComponent` previously have been set to be expanded/collapsed.\n     * If previously set and some rows have been manually expanded/collapsed it will still return the last set value.\n     * ```typescript\n     * const expanded = this.grid.expandChildren;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    get expandChildren(): boolean {\n        return this._expandChildren;\n    }\n\n    /**\n     * Gets the unique identifier of the parent row. It may be a `string` or `number` if `primaryKey` of the\n     * parent grid is set or an object reference of the parent record otherwise.\n     * ```typescript\n     * const foreignKey = this.grid.foreignKey;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get foreignKey() {\n        if (!this.parent) {\n            return null;\n        }\n        return this.parent.hgridAPI.getParentRowId(this);\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public childLayoutList: QueryList<IgxRowIslandComponent>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: true })\n    public allLayoutList: QueryList<IgxRowIslandComponent>;\n\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.dragIndicatorIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-grid #grid>\n     *      ...\n     *      <ng-template igxDragIndicatorIcon>\n     *          <igx-icon fontSet=\"material\">info</igx-icon>\n     *      </ng-template>\n     *  </igx-grid>\n     * ```\n     */\n    @ContentChild(IgxDragIndicatorIconDirective, { read: TemplateRef })\n    public dragIndicatorIconTemplate: TemplateRef<any> = null;\n\n    @ViewChild('hierarchical_record_template', { read: TemplateRef })\n    protected hierarchicalRecordTemplate: TemplateRef<any>;\n\n    @ViewChild('child_record_template', { read: TemplateRef })\n    protected childTemplate: TemplateRef<any>;\n\n    @ViewChild('headerHierarchyExpander', { read: ElementRef })\n    protected headerHierarchyExpander: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public templateOutlets: QueryList<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxChildGridRowComponent, { read: IgxChildGridRowComponent })\n    public hierarchicalRows: QueryList<IgxChildGridRowComponent>;\n\n    /**\n     * @hidden\n     */\n    get hasExpandableChildren() {\n        return !!this.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    public childLayoutKeys = [];\n\n    /**\n     * @hidden\n     */\n    public highlightedRowID = null;\n\n    /**\n     * @hidden\n     */\n    public updateOnRender = false;\n\n    /**\n     * @hidden\n     */\n    public parent = null;\n\n    private _hierarchicalState = [];\n    private _data;\n    private _filteredData = null;\n    private h_id = `igx-hierarchical-grid-${NEXT_ID++}`;\n    private childGridTemplates: Map<any, any> = new Map();\n    private scrollTop = 0;\n    private scrollLeft = 0;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxHierarchicalSelectionAPIService,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            gridAPI,\n            selection,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this._transactions = this.parentIsland ? this.parentIsland.transactions : this._transactions;\n        super.ngOnInit();\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', this.hg_verticalScrollHandler.bind(this));\n        this.parentVirtDir.getHorizontalScroll().addEventListener('scroll', this.hg_horizontalScrollHandler.bind(this));\n\n        if (this.expandChildren && this.data && this.hierarchicalState.length !== this.data.length) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n        }\n\n        this.verticalScrollContainer.onBeforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe((view) => {\n            const rowData = view.context.$implicit;\n            if (this.isChildGridRecord(rowData)) {\n                const cachedData = this.childGridTemplates.get(rowData.rowID);\n                if (cachedData) {\n                    const tmlpOutlet = cachedData.owner;\n                    tmlpOutlet._viewContainerRef.detach(0);\n                }\n            }\n        });\n\n        if (this.parent) {\n            this._displayDensity = this.rootGrid._displayDensity;\n            this.rootGrid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                requestAnimationFrame(() => {\n                    this._displayDensity = this.rootGrid._displayDensity;\n                    if (document.body.contains(this.nativeElement)) {\n                        this.reflow();\n                    } else {\n                        this.updateOnRender = true;\n                    }\n                });\n            });\n            this.childLayoutKeys = this.parentIsland.children.map((item) => item.key);\n        } else {\n            this.childLayoutKeys = this.childLayoutList.map((item) => item.key);\n            this.cdr.detectChanges();\n        }\n\n        this.toolbarCustomContentTemplates = this.parentIsland ?\n            this.parentIsland.toolbarCustomContentTemplates :\n            this.toolbarCustomContentTemplates;\n    }\n\n    public get outletDirective() {\n        return this.rootGrid._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public get parentRowOutletDirective() {\n        return this === this.rootGrid ? null : this.rootGrid.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateColumnList(false);\n        super.ngAfterContentInit();\n    }\n\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        this.updateColumnList();\n        super.onColumnsChanged(change);\n    }\n\n    private updateColumnList(recalcColSizes = true) {\n        const childLayouts = this.parent ? this.childLayoutList : this.allLayoutList;\n        const nestedColumns = childLayouts.map((layout) => {\n            if (!layout.rootGrid && !this.parent) {\n                // If the layout doesn't have rootGrid set and this is the root, set it\n                layout.rootGrid = this;\n            }\n            return layout.columnList.toArray();\n        });\n        const colsArray = [].concat.apply([], nestedColumns);\n        const colLength = this.columnList.length;\n        if (colsArray.length > 0) {\n            const topCols = this.columnList.filter((item) => {\n                return colsArray.indexOf(item) === -1;\n            });\n            this.columnList.reset(topCols);\n            if (recalcColSizes && this.columnList.length !== colLength) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (!this.parent) {\n            this.hgridAPI.getChildGrids(true).forEach((grid) => {\n                if (!grid.childRow.cdr.destroyed) {\n                    grid.childRow.cdr.destroy();\n                }\n            });\n        }\n        super.ngOnDestroy();\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = super.getFeatureColumnsWidth();\n\n        if (this.hasExpandableChildren) {\n            width += this.headerHierarchyExpander.nativeElement.clientWidth || this.getDefaultExpanderWidth();\n        }\n\n        return width;\n    }\n\n    private getDefaultExpanderWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 57;\n            case DisplayDensity.compact:\n                return 49;\n            default:\n                return 72;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isRowHighlighted(rowData) {\n        return this.highlightedRowID === rowData.rowID;\n    }\n\n    /**\n     * @hidden\n     */\n    public isHierarchicalRecord(record: any): boolean {\n        return this.childLayoutList.length !== 0 && record[this.childLayoutList.first.key];\n    }\n\n    /**\n     * @hidden\n     */\n    public isChildGridRecord(record: any): boolean {\n        // Can be null when there is defined layout but no child data was found\n        return record.childGridsData !== undefined;\n    }\n\n    /**\n     * @hidden\n     */\n    public trackChanges(index, rec) {\n        if (rec.childGridsData !== undefined) {\n            // if is child rec\n            return rec.rowID;\n        }\n        return rec;\n    }\n\n    /**\n     * @hidden\n     */\n    public getContext(rowData): any {\n        if (this.isChildGridRecord(rowData)) {\n            const cachedData = this.childGridTemplates.get(rowData.rowID);\n            if (cachedData) {\n                const view = cachedData.view;\n                const tmlpOutlet = cachedData.owner;\n                return {\n                    $implicit: rowData,\n                    moveView: view,\n                    owner: tmlpOutlet,\n                    index: this.verticalScrollContainer.igxForOf.indexOf(rowData)\n                };\n            } else {\n                const rowID = this.primaryKey ? rowData.rowID : this.data.indexOf(rowData.rowID);\n                // child rows contain unique grids, hence should have unique templates\n                return {\n                    $implicit: rowData,\n                    templateID: 'childRow-' + rowID,\n                    index: this.verticalScrollContainer.igxForOf.indexOf(rowData)\n                };\n            }\n        } else {\n            return {\n                $implicit: rowData,\n                templateID: 'dataRow',\n                index: this.verticalScrollContainer.igxForOf.indexOf(rowData)\n            };\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    public get rootGrid() {\n        let currGrid = this;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    /**\n     * @hidden\n    */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - hierarchical grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !(col.parent && col.parent.columnLayout));\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     * For hierarchical child grid it may be scrolled and not fully visible.\n     */\n    public getVisibleContentHeight() {\n        let height = super.getVisibleContentHeight();\n        if (this.parent) {\n            const rootHeight = this.rootGrid.getVisibleContentHeight();\n            const topDiff = this.nativeElement.getBoundingClientRect().top - this.rootGrid.nativeElement.getBoundingClientRect().top;\n            height = rootHeight - topDiff > height ? height : rootHeight - topDiff;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n    */\n    public collapseAllRows() {\n        this.hierarchicalState = [];\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpanded(record: any): boolean {\n        let inState;\n        if (record.childGridsData !== undefined) {\n            inState = !!this.hierarchicalState.find(v => v.rowID === record.rowID);\n        } else {\n            inState = !!this.hierarchicalState.find(v => {\n                return this.primaryKey ? v.rowID === record[this.primaryKey] : v.rowID === record;\n            });\n        }\n        return inState && this.childLayoutList.length !== 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public viewCreatedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            const key = args.context.$implicit.rowID;\n            this.childGridTemplates.set(key, args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public viewMovedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            // view was moved, update owner in cache\n            const key = args.context.$implicit.rowID;\n            const cachedData = this.childGridTemplates.get(key);\n            cachedData.owner = args.owner;\n\n            this.childLayoutList.forEach((layout) => {\n                const relatedGrid = this.hgridAPI.getChildGridByID(layout.key, args.context.$implicit.rowID);\n                if (relatedGrid && relatedGrid.updateOnRender) {\n                    // Detect changes if `expandChildren` has changed when the grid wasn't visible. This is for performance reasons.\n                    relatedGrid.reflow();\n                    relatedGrid.updateOnRender = false;\n                }\n            });\n\n            const childGrids = this.getChildGrids(true);\n            childGrids.forEach((grid) => {\n                grid.updateScrollPosition();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public updateScrollPosition() {\n        const vScr = this.verticalScrollContainer.getVerticalScroll();\n        const hScr = this.parentVirtDir.getHorizontalScroll();\n        if (vScr) {\n            vScr.scrollTop = this.scrollTop;\n        }\n        if (hScr) {\n            hScr.scrollLeft = this.scrollLeft;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getPossibleColumnWidth() {\n        let computedWidth = this.calcWidth || parseInt(\n            this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n        computedWidth -= this.headerHierarchyExpander.nativeElement.clientWidth;\n        return super.getPossibleColumnWidth(computedWidth);\n    }\n\n    protected getChildGrids(inDeph?: boolean) {\n        return this.hgridAPI.getChildGrids(inDeph);\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return super.generateDataFields(data).filter((field) => {\n            const layoutsList = this.parentIsland ? this.parentIsland.children : this.childLayoutList;\n            const keys = layoutsList.map((item) => item.key);\n            return keys.indexOf(field) === -1;\n        });\n    }\n\n    protected _calculateGridBodyHeight() {\n        if (!this.parent || !this.isPercentHeight) {\n            return super._calculateGridBodyHeight();\n        }\n        const bodyHeight = this.defaultTargetBodyHeight;\n        return bodyHeight > 0 ? bodyHeight : null;\n    }\n\n    private hg_verticalScrollHandler(event) {\n        this.scrollTop = event.target.scrollTop;\n    }\n\n    public onContainerScroll() {\n        this.hideOverlays();\n    }\n\n    private hg_horizontalScrollHandler(event) {\n        this.scrollLeft = event.target.scrollLeft;\n    }\n\n    private updateParentSizes() {\n        let currGrid = this.parent;\n        while (currGrid) {\n            const hadScrollbar = currGrid.hasVerticalSroll();\n            const virt = currGrid.verticalScrollContainer;\n            virt.recalcUpdateSizes();\n            const offset = parseInt(virt.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n            const scr = virt.getVerticalScroll();\n            scr.scrollTop = virt.getScrollForIndex(virt.state.startIndex) - offset;\n\n            if (hadScrollbar !== currGrid.hasVerticalSroll()) {\n                // If after recalculations the grid should show vertical scrollbar it should also reflow.\n                currGrid.reflow();\n            }\n\n            currGrid = currGrid.parent;\n        }\n    }\n}\n","import { IgxGridCellComponent } from '../cell.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ChangeDetectorRef, ElementRef, ChangeDetectionStrategy, Component,\n     OnInit, HostListener, NgZone } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-cell',\n    templateUrl: './../cell.component.html'\n})\nexport class IgxHierarchicalGridCellComponent extends IgxGridCellComponent implements OnInit {\n\n    protected hSelection;\n    protected _rootGrid;\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>,\n        public selection: IgxHierarchicalSelectionAPIService,\n        public cdr: ChangeDetectorRef,\n        private helement: ElementRef,\n        protected zone: NgZone,\n        ) {\n            super(selectionService, crudService, gridAPI, selection, cdr, helement, zone);\n            this.hSelection = <IgxHierarchicalSelectionAPIService>selection;\n         }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this._rootGrid = this._getRootGrid();\n    }\n\n    private _getRootGrid() {\n        let currGrid = this.grid;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    // TODO: Extend the new selection service to avoid complete traversal\n    _clearAllHighlights() {\n        [this._rootGrid, ...this._rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    _updateCellSelectionStatus() {\n        this._clearAllHighlights();\n        const currentElement = this.grid.nativeElement;\n        let parentGrid = this.grid;\n        let childGrid;\n        // add highligh to the current grid\n        if (this._rootGrid.id !== currentElement.id) {\n            currentElement.classList.add('igx-grid__tr--highlighted');\n        }\n\n        // add highligh to the current grid\n        while (this._rootGrid.id !== parentGrid.id) {\n            childGrid = parentGrid;\n            parentGrid = parentGrid.parent;\n\n            const parentRowID = parentGrid.hgridAPI.getParentRowId(childGrid);\n            parentGrid.highlightedRowID = parentRowID;\n        }\n        super._updateCellSelectionStatus();\n    }\n\n    // TODO: Refactor\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (event.altKey) {\n            const grid = this.gridAPI.grid;\n            const state = this.gridAPI.grid.hierarchicalState;\n            const collapse = this.row.expanded && (key === 'left' || key === 'arrowleft' || key === 'up' || key === 'arrowup');\n            const expand = !this.row.expanded && (key === 'right' || key === 'arrowright' || key === 'down' || key === 'arrowdown');\n            if (collapse) {\n                grid.hierarchicalState = state.filter(v => {\n                    return v.rowID !== this.row.rowID;\n                });\n            } else if (expand) {\n                state.push({ rowID: this.row.rowID });\n                grid.hierarchicalState = [...state];\n            }\n            if (expand || collapse) {\n                const rowID = this.cellID.rowID;\n                grid.cdr.detectChanges();\n                this.persistFocusedCell(rowID);\n            }\n            return;\n        }\n        super.dispatchEvent(event);\n    }\n    protected persistFocusedCell(rowID) {\n        requestAnimationFrame(() => {\n            // TODO: Test it out\n            const cell = this.gridAPI.get_cell_by_key(rowID, this.column.field);\n            if (cell) {\n                cell.nativeElement.focus();\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    forwardRef,\n    ElementRef,\n    ChangeDetectorRef,\n    ViewChildren,\n    QueryList,\n    ViewChild\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { GridBaseAPIService } from '.././api.service';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nimport { IgxGridCRUDService, IgxGridSelectionService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-row',\n    templateUrl: './hierarchical-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxHierarchicalRowComponent) }]\n})\nexport class IgxHierarchicalRowComponent extends IgxRowComponent<IgxHierarchicalGridComponent> {\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxHierarchicalGridCellComponent), { read: IgxHierarchicalGridCellComponent })\n    public cells: QueryList<IgxHierarchicalGridCellComponent>;\n\n    @ViewChild('expander', { read: ElementRef })\n    public expander: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n        /**\n     * Returns whether the row is expanded.\n     * ```typescript\n     * const RowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('class.igx-grid__tr--expanded')\n    public get expanded() {\n        return this.grid.isExpanded(this.rowData);\n    }\n\n    public get hasChildren() {\n        return  !!this.grid.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid__tr--highlighted')\n    public get highlighted() {\n        return this.grid && this.grid.highlightedRowID === this.rowID;\n    }\n\n    /**\n     * Toggles the hierarchical row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        if (this.added) {\n            return;\n        }\n        const grid = this.gridAPI.grid;\n        const state = this.gridAPI.grid.hierarchicalState;\n        if (!this.expanded) {\n            state.push({ rowID: this.rowID });\n            grid.hierarchicalState = [...state];\n        } else {\n            grid.hierarchicalState = state.filter(v => {\n                return v.rowID !== this.rowID;\n            });\n        }\n        grid.cdr.detectChanges();\n        requestAnimationFrame(() => {\n            grid.reflow();\n        });\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        private hselection: IgxHierarchicalSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            super(gridAPI, crudService, selectionService, hselection, element, cdr);\n        }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { DataUtil } from '../../data-operations/data-util';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchical',\n    pure: true\n})\nexport class IgxGridHierarchicalPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(\n        collection: any,\n        state = [],\n        id: string,\n        primaryKey: any,\n        childKeys: string[],\n        pipeTrigger: number\n        ): any[] {\n        if (childKeys.length === 0) {\n            return collection;\n        }\n        const grid: IgxHierarchicalGridComponent = this.gridAPI.grid;\n        const result = this.addHierarchy(grid, cloneArray(collection), state, primaryKey, childKeys);\n\n        return result;\n    }\n\n    public addHierarchy<T>(grid, data: T[], state, primaryKey, childKeys: string[]): T[] {\n        const result = [];\n\n        data.forEach((v) => {\n            result.push(v);\n            const childGridsData = {};\n            childKeys.forEach((childKey) => {\n                const childData = v[childKey] ? v[childKey] : null;\n                childGridsData[childKey] = childData;\n            });\n            if (grid.isExpanded(v)) {\n                result.push({ rowID: primaryKey ? v[primaryKey] : v, childGridsData: childGridsData});\n            }\n        });\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchicalPaging',\n    pure: true\n})\nexport class IgxGridHierarchicalPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(collection: any[], page = 0, perPage = 15, id: string, pipeTrigger: number): any[] {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: any[] = DataUtil.page(cloneArray(collection), state);\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxGridModule } from '../grid/grid.module';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxHierarchicalRowComponent } from './hierarchical-row.component';\nimport { IgxGridHierarchicalPipe, IgxGridHierarchicalPagingPipe } from './hierarchical-grid.pipes';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxGridHierarchicalPipe,\n    IgxGridHierarchicalPagingPipe\n  ],\n  exports: [\n    IgxGridModule,\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridModule\n  ],\n  providers: [\n    IgxRowIslandAPIService,\n    IgxHierarchicalSelectionAPIService\n  ]\n})\nexport class IgxHierarchicalGridModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Directive,\n    ContentChild\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxIconModule } from '../icon/index';\n\n/**\n * IgxActionIcon is a container for the action nav icon of the IgxNavbar.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-action-icon'\n})\nexport class IgxActionIconDirective { }\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)\n *\n * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation\n * state such as a \"Go Back\" button. It also supports other actions represented by icons.\n *\n * Example:\n * ```html\n * <igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n *   <igx-icon>search</igx-icon>\n *   <igx-icon>favorite</igx-icon>\n *   <igx-icon>more_vert</igx-icon>\n * </igx-navbar>\n * ```\n */\n\n@Component({\n    selector: 'igx-navbar',\n    templateUrl: 'navbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `\n    ]\n})\n\nexport class IgxNavbarComponent {\n    private static NEXT_ID = 1;\n    private isVisible = true;\n\n    /**\n     *An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-navbar [id]=\"'igx-navbar-12'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-navbar-${NEXT_ID++}`;\n    /**\n     *Returns whether the `IgxNavbarComponent` action button is visible, true/false.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public navBar: IgxNavbarComponent;\n     *ngAfterViewInit(){\n     *    let actionButtonVisibile = this.navBar.isActionButtonVisible;\n     *}\n     *```\n     */\n    @Input()\n    public get isActionButtonVisible(): boolean {\n        if (this.actionIconTemplate || !this.actionButtonIcon) {\n            return false;\n        }\n        return this.isVisible;\n    }\n\n    /**\n     *Sets whether the action button of the `IgxNavbarComponent` is visible.\n     *```html\n     *<igx-navbar [title]=\"currentView\" [isActionButtonVisible]=\"'false'\"></igx-navbar>\n     *```\n     */\n    public set isActionButtonVisible(value: boolean) {\n        this.isVisible = value;\n    }\n    /**\n     *An @Input property that sets the icon of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar [title]=\"currentView\" actionButtonIcon=\"arrow_back\"></igx-navbar>\n     *```\n     */\n    @Input() public actionButtonIcon: string;\n\n    /**\n     *An @Input property that sets the title of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input() public title: string;\n\n    /**\n     *The event that will be thrown when the action is executed,\n     *provides reference to the `IgxNavbar` component as argument\n     *```typescript\n     *public actionExc(event){\n     *    alert(\"Action Execute!\");\n     *}\n     * //..\n     *```\n     *```html\n     *<igx-navbar (onAction)=\"actionExc($event)\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Output() public onAction = new EventEmitter<IgxNavbarComponent>();\n\n    /**\n     *An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.\n     *```html\n     *<igx-navbar [titleId]=\"'igx-navbar-7'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input()\n    public titleId = `igx-navbar-${IgxNavbarComponent.NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxActionIconDirective, { read: IgxActionIconDirective })\n    protected actionIconTemplate: IgxActionIconDirective;\n\n    /**\n     *@hidden\n     */\n    public _triggerAction() {\n        this.onAction.emit(this);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavbarComponent, IgxActionIconDirective],\n    exports: [IgxNavbarComponent, IgxActionIconDirective],\n    imports: [IgxButtonModule, IgxIconModule, CommonModule]\n})\nexport class IgxNavbarModule {\n}\n","import { Directive, HostBinding, Input, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDrawerItem]',\n    exportAs: 'igxDrawerItem'\n})\nexport class IgxNavDrawerItemDirective {\n\n    /**\n     * @hidden\n     */\n    @Input('active') public active = false;\n\n    /**\n     * @hidden\n     */\n    @Input('isHeader') public isHeader = false;\n\n    /**\n     * @hidden\n     */\n    public readonly activeClass = 'igx-nav-drawer__item--active';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item')\n    get defaultCSS(): boolean {\n        return !this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--active')\n    get currentCSS(): boolean {\n        return this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--header')\n    get headerCSS(): boolean {\n        return this.isHeader;\n    }\n}\n\n@Directive({\n    selector: '[igxDrawer]'\n})\nexport class IgxNavDrawerTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n\n@Directive({\n    selector: '[igxDrawerMini]'\n})\nexport class IgxNavDrawerMiniTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Renderer,\n    SimpleChange,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { fromEvent, interval, Subscription } from 'rxjs';\nimport { debounce } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { HammerGesturesManager } from '../core/touch';\nimport { IgxNavDrawerMiniTemplateDirective, IgxNavDrawerTemplateDirective } from './navigation-drawer.directives';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navigation Drawer** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navdrawer.html)\n *\n * The Ignite UI Navigation Drawer is a collapsible side navigation container commonly used in combination with the Navbar.\n *\n * Example:\n * ```html\n * <igx-nav-drawer id=\"navigation\" [isOpen]=\"true\">\n *   <ng-template igxDrawer>\n *     <nav>\n *       <span igxDrawerItem [isHeader]=\"true\">Email</span>\n *       <span igxDrawerItem igxRipple>Inbox</span>\n *       <span igxDrawerItem igxRipple>Deleted</span>\n *       <span igxDrawerItem igxRipple>Sent</span>\n *     </nav>\n *   </ng-template>\n * </igx-nav-drawer>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-nav-drawer',\n    templateUrl: 'navigation-drawer.component.html',\n    styles: [`\n        :host {\n            display: block;\n            height: 100%;\n        }\n    `]\n})\nexport class IgxNavigationDrawerComponent implements\n    IToggleView,\n    OnInit,\n    AfterContentInit,\n    OnDestroy,\n    OnChanges {\n\n    @HostBinding('class') public cssClass = 'igx-nav-drawer';\n\n    /**\n     * ID of the component\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerId = this.navdrawer.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     *  <igx-nav-drawer id='navdrawer'></igx-nav-drawer>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-nav-drawer-${NEXT_ID++}`;\n\n    /**\n     * Position of the Navigation Drawer. Can be \"left\"(default) or \"right\".\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerPosition = this.navdrawer.position;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [position]=\"'left'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public position = 'left';\n\n    /**\n     * Enables the use of touch gestures to manipulate the drawer:\n     * - swipe/pan from edge to open, swipe-toggle and pan-drag.\n     *\n     * ```typescript\n     * // get\n     * let gesturesEnabled = this.navdrawer.enableGestures;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [enableGestures]='true'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public enableGestures = true;\n\n    /**\n     * State of the drawer.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsOpen = this.navdrawer.isOpen;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [isOpen]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public isOpen = false;\n\n    /**\n     * When pinned the drawer is relatively positioned instead of sitting above content.\n     * May require additional layout styling.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsPinned = this.navdrawer.pin;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pin]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pin = false;\n\n    /**\n     * Minimum device width required for automatic pin to be toggled.\n     * Default is 1024, can be set to a falsy value to disable this behavior.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerPinTreshold = this.navdrawer.pinThreshold;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pinTreshold]='1024'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pinThreshold = 1024;\n\n    /**\n     * Returns nativeElement of the component.\n     *\n     * @hidden\n     */\n    get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Width of the drawer in its open state. Defaults to \"280px\".\n     *\n     * ```typescript\n     * // get\n     * let navDrawerWidth = this.navdrawer.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [width]=\"'228px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public width = '280px';\n\n    /**\n     * Width of the drawer in its mini state. Defaults to 60px.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerMiniWidth = this.navdrawer.miniWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [miniWidth]=\"'34px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public miniWidth = '60px';\n\n    /**\n     * Pinned state change output for two-way binding.\n     *\n     * ```html\n     * <igx-nav-drawer [(pin)]='isPinned'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public pinChange = new EventEmitter<boolean>(true);\n    /**\n     * Event fired as the Navigation Drawer is about to open.\n     *\n     * ```html\n     *  <igx-nav-drawer (opening)='onOpening()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opening = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has opened.\n     *\n     * ```html\n     * <igx-nav-drawer (opened)='onOpened()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opened = new EventEmitter();\n    /**\n     * Event fired as the Navigation Drawer is about to close.\n     *\n     * ```html\n     * <igx-nav-drawer (closing)='onClosing()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closing = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has closed.\n     *\n     * ```html\n     * <igx-nav-drawer (closed)='onClosed()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closed = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    get template() {\n        if (this.miniTemplate && !this.isOpen) {\n            return this.miniTemplate.template;\n        } else if (this.contentTemplate) {\n            return this.contentTemplate.template;\n        }\n    }\n\n    private _miniTemplate: IgxNavDrawerMiniTemplateDirective;\n    /**\n     * @hidden\n     */\n    public get miniTemplate(): IgxNavDrawerMiniTemplateDirective {\n        return this._miniTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerMiniTemplateDirective, { read: IgxNavDrawerMiniTemplateDirective })\n    public set miniTemplate(v: IgxNavDrawerMiniTemplateDirective) {\n        if (!this.isOpen) {\n            this.setDrawerWidth(v ? this.miniWidth : '');\n        }\n        this._miniTemplate = v;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerTemplateDirective, { read: IgxNavDrawerTemplateDirective })\n    protected contentTemplate: IgxNavDrawerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flexBasis')\n    get flexWidth() {\n        if (!this.pin) {\n            return '0px';\n        }\n        if (this.isOpen) {\n            return this.width;\n        }\n        if (this.miniTemplate && this.miniWidth) {\n            return this.miniWidth;\n        }\n\n        return '0px';\n    }\n\n    /** @hidden */\n    @HostBinding('style.order')\n    get isPinnedRight() {\n        return this.pin && this.position === 'right' ? '1' : '0';\n    }\n\n    private _gesturesAttached = false;\n    private _widthCache: { width: number, miniWidth: number, windowWidth: number } = { width: null, miniWidth: null, windowWidth: null };\n    private _resizeObserver: Subscription;\n    private css: { [name: string]: string; } = {\n        drawer: 'igx-nav-drawer__aside',\n        mini: 'igx-nav-drawer__aside--mini',\n        overlay: 'igx-nav-drawer__overlay',\n        styleDummy: 'igx-nav-drawer__style-dummy'\n    };\n\n    @ViewChild('aside') private _drawer: ElementRef;\n    @ViewChild('overlay') private _overlay: ElementRef;\n    @ViewChild('dummy') private _styleDummy: ElementRef;\n\n    /**\n      * @hidden\n      */\n    get drawer() {\n        return this._drawer.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get overlay() {\n        return this._overlay.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get styleDummy() {\n        return this._styleDummy.nativeElement;\n    }\n\n    /** Pan animation properties */\n    private _panning = false;\n    private _panStartWidth: number;\n    private _panLimit: number;\n\n    /**\n     * Property to decide whether to change width or translate the drawer from pan gesture.\n     *\n     * @hidden\n     */\n    public get hasAnimateWidth(): boolean {\n        return this.pin || !!this.miniTemplate;\n    }\n\n    private _maxEdgeZone = 50;\n    /**\n     * Used for touch gestures (swipe and pan).\n     * Defaults to 50 (in px) and is extended to at least 110% of the mini template width if available.\n     *\n     * @hidden\n     */\n    public get maxEdgeZone() {\n        return this._maxEdgeZone;\n    }\n\n    /**\n     * Gets the Drawer width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     *\n     * @hidden\n     */\n    public get expectedWidth() {\n        return this.getExpectedWidth(false);\n    }\n\n    /**\n     * Get the Drawer mini width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     */\n    public get expectedMiniWidth() {\n        return this.getExpectedWidth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchManager() {\n        return this._touchManager;\n    }\n\n    /**\n     * Exposes optional navigation service\n     *\n     * @hidden\n     */\n    public get state() {\n        return this._state;\n    }\n\n    constructor(\n        @Inject(ElementRef) private elementRef: ElementRef,\n        @Optional() private _state: IgxNavigationService,\n        // private animate: AnimationBuilder, TODO\n        protected renderer: Renderer,\n        private _touchManager: HammerGesturesManager) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        // DOM and @Input()-s initialized\n        if (this._state) {\n            this._state.add(this.id, this);\n        }\n        if (this.isOpen) {\n            this.setDrawerWidth(this.width);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        // wait for template and ng-content to be ready\n        this.updateEdgeZone();\n        this.checkPinThreshold();\n\n        this.ensureEvents();\n\n        // TODO: apply platform-safe Ruler from http://plnkr.co/edit/81nWDyreYMzkunihfRgX?p=preview\n        // (https://github.com/angular/angular/issues/6515), blocked by https://github.com/angular/angular/issues/6904\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._touchManager.destroy();\n        if (this._state) {\n            this._state.remove(this.id);\n        }\n        if (this._resizeObserver) {\n            this._resizeObserver.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n        // simple settings can come from attribute set (rather than binding), make sure boolean props are converted\n        if (changes.enableGestures && changes.enableGestures.currentValue !== undefined) {\n            this.enableGestures = !!(this.enableGestures && this.enableGestures.toString() === 'true');\n            this.ensureEvents();\n        }\n        if (changes.pin && changes.pin.currentValue !== undefined) {\n            this.pin = !!(this.pin && this.pin.toString() === 'true');\n            if (this.pin) {\n                this._touchManager.destroy();\n                this._gesturesAttached = false;\n            } else {\n                this.ensureEvents();\n            }\n        }\n\n        if (changes.pinThreshold) {\n            if (this.pinThreshold) {\n                this.ensureEvents();\n                this.checkPinThreshold();\n            }\n        }\n\n        if (changes.width && this.isOpen) {\n            this.setDrawerWidth(changes.width.currentValue);\n        }\n\n        if (changes.miniWidth) {\n            if (!this.isOpen) {\n                this.setDrawerWidth(changes.miniWidth.currentValue);\n            }\n            this.updateEdgeZone();\n        }\n    }\n\n    /**\n     * Toggle the open state of the Navigation Drawer.\n     *\n     * ```typescript\n     * this.navdrawer.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Open the Navigation Drawer. Has no effect if already opened.\n     *\n     * ```typescript\n     * this.navdrawer.open();\n     * ```\n     */\n    public open() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (this.isOpen) {\n            return;\n        }\n        this.opening.emit();\n        this.isOpen = true;\n\n        // TODO: Switch to animate API when available\n        // var animationCss = this.animate.css();\n        //     animationCss\n        //         .setStyles({'width':'50px'}, {'width':'400px'})\n        //         .start(this.elementRef.nativeElement)\n        //         .onComplete(() => animationCss.setToStyles({'width':'auto'}).start(this.elementRef.nativeElement));\n\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.setDrawerWidth(this.width);\n    }\n\n    /**\n     * Close the Navigation Drawer. Has no effect if already closed.\n     *\n     * ```typescript\n     * this.navdrawer.close();\n     * ```\n     */\n    public close() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (!this.isOpen) {\n            return;\n        }\n        this.closing.emit();\n\n        this.isOpen = false;\n        this.setDrawerWidth(this.miniTemplate ? this.miniWidth : '');\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleClosedEvent, false);\n    }\n\n    /**\n     * @hidden\n     */\n    protected set_maxEdgeZone(value: number) {\n        this._maxEdgeZone = value;\n    }\n\n    /**\n     * Get the Drawer width for specific state. Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     * @param [mini] - Request mini width instead\n     */\n    protected getExpectedWidth(mini?: boolean): number {\n        if (mini) {\n            if (!this.miniTemplate) {\n                return 0;\n            }\n            if (this.miniWidth) {\n                return parseFloat(this.miniWidth);\n            } else {\n                // if (!this.isOpen) { // This WON'T work due to transition timings...\n                //     return this.elementRef.nativeElement.children[1].offsetWidth;\n                // } else {\n                if (this._widthCache.miniWidth === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, true);\n                    this._widthCache.miniWidth = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, false);\n                }\n                return this._widthCache.miniWidth;\n            }\n        } else {\n            if (this.width) {\n                return parseFloat(this.width);\n            } else {\n                if (this._widthCache.width === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this._widthCache.width = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                }\n                return this._widthCache.width;\n            }\n        }\n    }\n\n    private getWindowWidth() {\n        return (window.innerWidth > 0) ? window.innerWidth : screen.width;\n    }\n\n    /**\n     * Sets the drawer width.\n     */\n    private setDrawerWidth(width: string) {\n        window.requestAnimationFrame(() => {\n            if (this.drawer) {\n                this.renderer.setElementStyle(this.drawer, 'width', width);\n            }\n        });\n    }\n\n    /**\n     * Get current Drawer width.\n     */\n    private getDrawerWidth(): number {\n        return this.drawer.offsetWidth;\n    }\n\n    private ensureEvents() {\n        // set listeners for swipe/pan only if needed, but just once\n        if (this.enableGestures && !this.pin && !this._gesturesAttached) {\n            // Built-in manager handler(L20887) causes endless loop and max stack exception.\n            // https://github.com/angular/angular/issues/6993\n            // Use ours for now (until beta.10):\n            // this.renderer.listen(document, \"swipe\", this.swipe);\n            this._touchManager.addGlobalEventListener('document', 'swipe', this.swipe);\n            this._gesturesAttached = true;\n\n            // this.renderer.listen(document, \"panstart\", this.panstart);\n            // this.renderer.listen(document, \"pan\", this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panstart', this.panstart);\n            this._touchManager.addGlobalEventListener('document', 'panmove', this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panend', this.panEnd);\n        }\n        if (!this._resizeObserver) {\n            this._resizeObserver = fromEvent(window, 'resize').pipe(debounce(() => interval(150)))\n                .subscribe((value) => {\n                    this.checkPinThreshold(value);\n                });\n        }\n    }\n\n    private updateEdgeZone() {\n        let maxValue;\n\n        if (this.miniTemplate) {\n            maxValue = Math.max(this._maxEdgeZone, this.getExpectedWidth(true) * 1.1);\n            this.set_maxEdgeZone(maxValue);\n        }\n    }\n\n    private checkPinThreshold = (evt?: Event) => {\n        let windowWidth;\n        if (this.pinThreshold) {\n            windowWidth = this.getWindowWidth();\n            if (evt && this._widthCache.windowWidth === windowWidth) {\n                return;\n            }\n            this._widthCache.windowWidth = windowWidth;\n            if (!this.pin && windowWidth >= this.pinThreshold) {\n                this.pin = true;\n                this.pinChange.emit(true);\n            } else if (this.pin && windowWidth < this.pinThreshold) {\n                this.pin = false;\n                this.pinChange.emit(false);\n            }\n        }\n    }\n\n    private swipe = (evt: HammerInput) => {\n        // TODO: Could also force input type: http://stackoverflow.com/a/27108052\n        if (!this.enableGestures || evt.pointerType !== 'touch') {\n            return;\n        }\n\n        // HammerJS swipe is horizontal-only by default, don't check deltaY\n        let deltaX;\n        let startPosition;\n        if (this.position === 'right') {\n            // when on the right use inverse of deltaX\n            deltaX = -evt.deltaX;\n            startPosition = this.getWindowWidth() - (evt.center.x + evt.distance);\n        } else {\n            deltaX = evt.deltaX;\n            startPosition = evt.center.x - evt.distance;\n        }\n        // only accept closing swipe (ignoring minEdgeZone) when the drawer is expanded:\n        if ((this.isOpen && deltaX < 0) ||\n            // positive deltaX from the edge:\n            (deltaX > 0 && startPosition < this.maxEdgeZone)) {\n            this.toggle();\n        }\n    }\n\n    private panstart = (evt: HammerInput) => { // TODO: test code\n        if (!this.enableGestures || this.pin || evt.pointerType !== 'touch') {\n            return;\n        }\n        const startPosition = this.position === 'right' ? this.getWindowWidth() - (evt.center.x + evt.distance)\n            : evt.center.x - evt.distance;\n\n        // cache width during animation, flag to allow further handling\n        if (this.isOpen || (startPosition < this.maxEdgeZone)) {\n            this._panning = true;\n            this._panStartWidth = this.getExpectedWidth(!this.isOpen);\n            this._panLimit = this.getExpectedWidth(this.isOpen);\n\n            this.renderer.setElementClass(this.overlay, 'panning', true);\n            this.renderer.setElementClass(this.drawer, 'panning', true);\n        }\n    }\n\n    private pan = (evt: HammerInput) => {\n        // TODO: input.deltaX = prevDelta.x + (center.x - offset.x);\n        // get actual delta (not total session one) from event?\n        // pan WILL also fire after a full swipe, only resize on flag\n        if (!this._panning) {\n            return;\n        }\n        const right: boolean = this.position === 'right';\n        // when on the right use inverse of deltaX\n        const deltaX = right ? -evt.deltaX : evt.deltaX;\n        let visibleWidth;\n        let newX;\n        let percent;\n\n        visibleWidth = this._panStartWidth + deltaX;\n\n        if (this.isOpen && deltaX < 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth <= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panLimit) / (this._panStartWidth - this._panLimit);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panStartWidth;\n                newX = evt.deltaX;\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n\n        } else if (!this.isOpen && deltaX > 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth >= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panStartWidth) / (this._panLimit - this._panStartWidth);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panLimit;\n                newX = (this._panLimit - visibleWidth) * (right ? 1 : -1);\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n        }\n    }\n\n    private panEnd = (evt: HammerInput) => {\n        if (this._panning) {\n            const deltaX = this.position === 'right' ? -evt.deltaX : evt.deltaX;\n            const visibleWidth: number = this._panStartWidth + deltaX;\n            this.resetPan();\n\n            // check if pan brought the drawer to 50%\n            if (this.isOpen && visibleWidth <= this._panStartWidth / 2) {\n                this.close();\n            } else if (!this.isOpen && visibleWidth >= this._panLimit / 2) {\n                this.open();\n            }\n            this._panStartWidth = null;\n        }\n    }\n\n    private resetPan() {\n        this._panning = false;\n        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */\n        this.renderer.setElementClass(this.overlay, 'panning', false);\n        this.renderer.setElementClass(this.drawer, 'panning', false);\n        this.setXSize(0, '');\n    }\n\n    /**\n     * Sets the absolute position or width in case the drawer doesn't change position.\n     * @param x the number pixels to translate on the X axis or the width to set. 0 width will clear the style instead.\n     * @param opacity optional value to apply to the overlay\n     */\n    private setXSize(x: number, opacity?: string) {\n        // Angular polyfills patches window.requestAnimationFrame, but switch to DomAdapter API (TODO)\n        window.requestAnimationFrame(() => {\n            if (this.hasAnimateWidth) {\n                this.renderer.setElementStyle(this.drawer, 'width', x ? Math.abs(x) + 'px' : '');\n            } else {\n                this.renderer.setElementStyle(this.drawer, 'transform', x ? 'translate3d(' + x + 'px,0,0)' : '');\n                this.renderer.setElementStyle(this.drawer, '-webkit-transform',\n                    x ? 'translate3d(' + x + 'px,0,0)' : '');\n            }\n            if (opacity !== undefined) {\n                this.renderer.setElementStyle(this.overlay, 'opacity', opacity);\n            }\n        });\n    }\n\n    private toggleOpenedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.opened.emit();\n    }\n\n    private toggleClosedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleClosedEvent, false);\n        this.closed.emit();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxNavigationDrawerComponent } from './navigation-drawer.component';\nimport {\n    IgxNavDrawerItemDirective,\n    IgxNavDrawerMiniTemplateDirective,\n    IgxNavDrawerTemplateDirective\n} from './navigation-drawer.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    exports: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    imports: [CommonModule]\n})\nexport class IgxNavigationDrawerModule {}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, Component, ElementRef, EventEmitter,\n    forwardRef, HostBinding, Input, NgModule, OnInit, Output, Renderer2,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum SliderType {\n    /**\n     * Slider with single thumb.\n     */\n    SLIDER,\n    /**\n     *  Range slider with multiple thumbs, that can mark the range.\n     */\n    RANGE\n}\n\nenum SliderHandle {\n    FROM,\n    TO\n}\n\nexport interface IRangeSliderValue {\n    lower: number;\n    upper: number;\n}\n\nexport interface ISliderValueChangeEventArgs {\n    oldValue: number | IRangeSliderValue;\n    value: number | IRangeSliderValue;\n}\n\nconst noop = () => {\n};\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Slider** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/slider.html)\n *\n * The Ignite UI Slider allows selection in a given range by moving the thumb along the track. The track\n * can be defined as continuous or stepped, and you can choose between single and range slider types.\n *\n * Example:\n * ```html\n * <igx-slider id=\"slider\"\n *            [minValue]=\"0\" [maxValue]=\"100\"\n *            [isContinuous]=true [(ngModel)]=\"volume\">\n * </igx-slider>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSliderComponent, multi: true }],\n    selector: 'igx-slider',\n    templateUrl: 'slider.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSliderComponent implements ControlValueAccessor, EditorProvider, OnInit, AfterViewInit {\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * If not provided it will be automatically generated.\n     * ```html\n     * <igx-slider [id]=\"'igx-slider-32'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-slider-${NEXT_ID++}`;\n    /**\n     *An @Input property that disables or enables UI interaction.\n     *```html\n     *<igx-slider #slider [disabled]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     *```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     * An @Input property that marks the `IgxSliderComponent` as continuous.\n     * By default is considered that the `IgxSliderComponent` is discrete.\n     * Discrete `IgxSliderComponent` does not have ticks and does not shows bubble labels for values.\n     * ```html\n     * <igx-slider #slider [isContinuous]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public isContinuous = false;\n\n    /**\n     * An @Input property that sets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * sliderType: SliderType = SliderType.RANGE;\n     * //...\n     * ```\n     * ```html\n     * <igx-slider #slider2 [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"0\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public type: SliderType = SliderType.SLIDER;\n\n    /**\n     *An @Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.\n     *```html\n     *<igx-slider #slider [thumbLabelVisibilityDuration]=\"3000\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     *```\n     */\n    @Input()\n    public thumbLabelVisibilityDuration = 750;\n\n    /**\n     * An @Input property that sets the incremental/decremental step of the value when dragging the thumb.\n     * The default step is 1, and step should not be less or equal than 0.\n     * ```html\n     * <igx-slider #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Input()\n    public step = 1;\n\n    /**\n     * This event is emitted when user has stopped interacting the thumb and value is changed.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     *}\n     * ```\n     * ```html\n     * <igx-slider (onValueChange)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<ISliderValueChangeEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public isActiveLabel = false;\n\n    private activeHandle: SliderHandle = SliderHandle.TO;\n\n    @ViewChild('slider')\n    private slider: ElementRef;\n\n    @ViewChild('track')\n    private track: ElementRef;\n\n    @ViewChild('ticks')\n    private ticks: ElementRef;\n\n    @ViewChild('thumbFrom')\n    private thumbFrom: ElementRef;\n\n    @ViewChild('thumbTo')\n    private thumbTo: ElementRef;\n\n\n    // Measures & Coordinates\n    private width = 0;\n    private xOffset = 0;\n    private xPointer = 0;\n    private pPointer = 0;\n\n    // Limit handle travel zone\n    private pMin = 0;\n    private pMax = 1;\n\n    // From/upperValue in percent values\n    private hasViewInit = false;\n    private timer;\n    private _minValue = 0;\n    private _maxValue = 100;\n    private _lowerBound?: number;\n    private _upperBound?: number;\n    private _lowerValue: number;\n    private _upperValue: number;\n    private _trackUpperBound: boolean;\n    private _trackLowerBound: boolean;\n\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    constructor(private renderer: Renderer2) {\n    }\n\n    /**\n     *Returns whether the `IgxSliderComponent` type is RANGE.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderRange = this.slider.isRange;\n     *}\n     * ```\n     */\n    public get isRange(): boolean {\n        const isRange: boolean = this.type === SliderType.RANGE;\n\n        return isRange;\n    }\n\n\n    /**\n     * Returns the maximum value for the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMax = this.slider.maxValue;\n     *}\n     * ```\n     */\n    public get maxValue(): number {\n        return this._maxValue;\n    }\n\n    /**\n     * Sets the maximal value for the `IgxSliderComponent`.\n     * The default maximum value is 100.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set maxValue(value: number) {\n        if (value <= this._minValue) {\n            this._maxValue = this._minValue + 1;\n        } else {\n            this._maxValue = value;\n        }\n\n        if (this._trackUpperBound) {\n            this._upperBound = this._maxValue;\n        }\n        this.invalidateValue();\n    }\n\n    /**\n     *Returns the minimal value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMin = this.slider.minValue;\n     *}\n     *```\n     */\n    public get minValue(): number {\n        return this._minValue;\n    }\n\n    /**\n     * Sets the minimal value for the `IgxSliderComponent`.\n     * The default minimal value is 0.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public set minValue(value: number) {\n        if (value >= this.maxValue) {\n            this._minValue = this.maxValue - 1;\n        } else {\n            this._minValue = value;\n        }\n\n        if (this._trackLowerBound) {\n            this._lowerBound = this._minValue;\n        }\n        this.invalidateValue();\n    }\n\n    /**\n     * Returns the lower boundary of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderLowBound = this.slider.lowerBound;\n     *}\n     *```\n     */\n    public get lowerBound(): number {\n        return this._lowerBound;\n    }\n\n    /**\n     * Sets the lower boundary of the `IgxSliderComponent`.\n     * If not set is the same as min value.\n     * ```html\n     * <igx-slider [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set lowerBound(value: number) {\n        if (this._trackLowerBound) {\n            this._trackLowerBound = false;\n        }\n\n        if (value >= this.upperBound) {\n            this._lowerBound = this.minValue;\n            return;\n        }\n\n        this._lowerBound = this.valueInRange(value, this.minValue, this.maxValue);\n    }\n\n    /**\n     * Returns the upper boundary of the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderUpBound = this.slider.upperBound;\n     *}\n     * ```\n     */\n    public get upperBound(): number {\n        return this._upperBound;\n    }\n\n    /**\n     * Sets the upper boundary of the `IgxSliderComponent`.\n     * If not set is the same as max value.\n     * ```html\n     * <igx-slider [step]=\"5\" [upperBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set upperBound(value: number) {\n        if (this._trackUpperBound) {\n            this._trackUpperBound = false;\n        }\n\n        if (value <= this.lowerBound) {\n            this._upperBound = this.maxValue;\n\n            return;\n        }\n\n        this._upperBound = this.valueInRange(value, this.minValue, this.maxValue);\n    }\n\n    /**\n     * Returns the lower value of the `IgxSliderComponent`.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * public lowValue(event){\n     *    let sliderLowValue = this.slider.lowerValue;\n     *}\n     *```\n     */\n    public get lowerValue(): number {\n        return this._lowerValue;\n    }\n\n    /**\n     *Sets the lower value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public lowValue(event){\n     *    this.slider.lowerValue = 120;\n     *}\n     *```\n     */\n    public set lowerValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n\n        if (this.isRange && value > this.upperValue) {\n            return;\n        }\n\n        this._lowerValue = value;\n    }\n\n    /**\n     *Returns the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    let upperValue = this.slider.upperValue;\n     *}\n     *```\n     */\n    public get upperValue() {\n        return this._upperValue;\n    }\n\n    /**\n     *Sets the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    this.slider.upperValue = 120;\n     *}\n     *```\n     */\n    public set upperValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n\n        if (this.isRange && value < this.lowerValue) {\n            return;\n        }\n\n        this._upperValue = value;\n    }\n\n    /**\n     * Returns the slider value. If the slider is of type SLIDER the returned value is number.\n     * If the slider type is RANGE the returned value is object containing lower and upper properties for the values.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public sliderValue(event){\n     *    let sliderVal = this.slider.value;\n     *}\n     *```\n     */\n    public get value(): number | IRangeSliderValue {\n        if (this.isRange) {\n            return {\n                lower: this.snapValueToStep(this.lowerValue),\n                upper: this.snapValueToStep(this.upperValue)\n            };\n        } else {\n            const val = this.snapValueToStep(this.upperValue);\n            return val;\n        }\n    }\n\n    /**\n     * Sets the slider value.\n     * If the slider is of type SLIDER the argument is number. By default if no value is set the default value is\n     * same as lower upper bound.\n     * If the slider type is RANGE the the argument is object containing lower and upper properties for the values.\n     * By default if no value is set the default value is for lower value it is the same as lower bound and if no\n     * value is set for the upper value it is the same as the upper bound.\n     * ```typescript\n     *rangeValue = {\n     *   lower: 30,\n     *   upper: 60\n     *};\n     * ```\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set value(value: number | IRangeSliderValue) {\n        if (!this.isRange) {\n            this.upperValue = this.snapValueToStep(value as number);\n        } else {\n            this.upperValue =\n                this.snapValueToStep((value as IRangeSliderValue) == null ? null : (value as IRangeSliderValue).upper);\n            this.lowerValue =\n                this.snapValueToStep((value as IRangeSliderValue) == null ? null : (value as IRangeSliderValue).lower);\n        }\n\n        this._onChangeCallback(this.value);\n\n        if (this.hasViewInit) {\n            this.positionHandlesAndUpdateTrack();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.lowerBound === undefined) {\n            this.lowerBound = this.minValue;\n            this._trackLowerBound = true;\n        }\n\n        if (this.upperBound === undefined) {\n            this.upperBound = this.maxValue;\n            this._trackUpperBound = true;\n        }\n\n        if (this.isRange) {\n            if (Number.isNaN((this.value as IRangeSliderValue).lower)) {\n                this.value = {\n                    lower: this.lowerBound,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            }\n\n            if (Number.isNaN((this.value as IRangeSliderValue).upper)) {\n                this.value = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: this.upperBound\n                };\n            }\n        } else {\n            if (Number.isNaN(this.value as number)) {\n                this.value = this.lowerBound;\n            }\n        }\n\n        this.pMin = this.valueToFraction(this.lowerBound) || 0;\n        this.pMax = this.valueToFraction(this.upperBound) || 1;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.hasViewInit = true;\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval();\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: any): void {\n        this.value = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden */\n    getEditElement() {\n        return this.isRange ? this.thumbFrom.nativeElement : this.thumbTo.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public showThumbsLabels() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.isContinuous) {\n            return;\n        }\n\n        if (this.timer !== null) {\n            clearInterval(this.timer);\n        }\n\n        this.isActiveLabel = true;\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public onFocus($event: FocusEvent) {\n        if (this.isRange && $event.target === this.thumbFrom.nativeElement) {\n            this.activeHandle = SliderHandle.FROM;\n        }\n\n        if ($event.target === this.thumbTo.nativeElement) {\n            this.activeHandle = SliderHandle.TO;\n        }\n\n        this.toggleThumbLabel();\n    }\n    /**\n     *\n     * @hidden\n     */\n    public onPanEnd($event) {\n        this.hideThumbsLabels();\n        this.emitValueChanged(null);\n    }\n    /**\n     *\n     * @hidden\n     */\n    public hideThumbLabelsOnBlur() {\n        if (this.timer !== null) {\n            clearInterval(this.timer);\n        }\n\n        this.isActiveLabel = false;\n    }\n    /**\n     *\n     * @hidden\n     */\n    public onKeyDown($event: KeyboardEvent) {\n        if (this.disabled) {\n            return true;\n        }\n\n        let incrementSign;\n\n        if ($event.key.endsWith('Left')) {\n            incrementSign = -1;\n        } else if ($event.key.endsWith('Right')) {\n            incrementSign = 1;\n        } else {\n            return;\n        }\n\n        const value = this.value;\n\n        if (this.isRange) {\n            if (this.activeHandle === SliderHandle.FROM) {\n                const newLower = (this.value as IRangeSliderValue).lower + incrementSign * this.step;\n\n                if (newLower >= (this.value as IRangeSliderValue).upper) {\n                    this.thumbTo.nativeElement.focus();\n                    return;\n                }\n\n                this.value = {\n                    lower: newLower,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            } else {\n                const newUpper = (this.value as IRangeSliderValue).upper + incrementSign * this.step;\n\n                if (newUpper <= (this.value as IRangeSliderValue).lower) {\n                    this.thumbFrom.nativeElement.focus();\n                    return;\n                }\n\n                this.value = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: (this.value as IRangeSliderValue).upper + incrementSign * this.step\n                };\n            }\n        } else {\n            this.value = this.value as number + incrementSign * this.step;\n        }\n\n        if (this.hasValueChanged(value)) {\n            this.emitValueChanged(value);\n        }\n\n        this.showThumbsLabels();\n    }\n    /**\n     *\n     * @hidden\n     */\n    public onTap($event) {\n        const value = this.value;\n        this.update($event);\n\n        if (this.hasValueChanged(value)) {\n            this.emitValueChanged(value);\n        }\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public update($event) {\n        if (this.disabled) {\n            return;\n        }\n\n        if ($event.type === 'tap') {\n            this.toggleThumbLabel();\n        }\n\n        // Set width and offset first\n        this.setSliderWidth();\n        this.setSliderOffset();\n\n        // Then get pointer coordinates\n        this.setPointerPosition($event);\n        this.setPointerPercent();\n\n        // Find the closest handle if dual slider\n        if (this.isRange) {\n            this.closestHandle();\n        }\n\n        // Update To/From Values\n        this.setValues();\n        // this.printInfo();\n\n        // Finally do positionHandlesAndUpdateTrack the DOM\n        // based on data values\n        this.positionHandlesAndUpdateTrack();\n        this._onTouchedCallback();\n    }\n\n    /**\n     * @hidden\n     */\n    public hideThumbsLabels() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.isContinuous) {\n            return;\n        }\n\n        this.timer = setTimeout(\n            () => this.isActiveLabel = false,\n            this.thumbLabelVisibilityDuration\n        );\n    }\n\n    private valueInRange(value, min = 0, max = 100) {\n        return Math.max(Math.min(value, max), min);\n    }\n\n    private invalidateValue() {\n        if (!this.isRange) {\n            if (this.value >= this._lowerBound && this.value <= this._upperBound) {\n                this.positionHandlesAndUpdateTrack();\n            } else if (this.value < this._lowerBound) {\n                this.value = this._lowerBound;\n            } else if (this.value > this._upperBound) {\n                this.value = this._upperBound;\n            }\n        } else {\n            const value = this.value as IRangeSliderValue;\n\n            if (value.lower >= this._lowerBound && value.lower <= this._upperBound) {\n                this.positionHandlesAndUpdateTrack();\n            } else if (value.lower < this._lowerBound) {\n                this.value = {\n                    lower: this._lowerBound,\n                    upper: value.upper\n                };\n            } else if (value.lower > this._upperBound) {\n                this.value = {\n                    lower: value.lower,\n                    upper: this._upperBound\n                };\n            }\n\n            if (value.upper >= this._lowerBound && value.upper <= this._upperBound) {\n                this.positionHandlesAndUpdateTrack();\n            } else if (value.upper < this._lowerBound) {\n                this.value = {\n                    lower: this._lowerBound,\n                    upper: value.upper\n                };\n            } else if (value.upper > this._upperBound) {\n                this.value = {\n                    lower: value.lower,\n                    upper: this._upperBound\n                };\n            }\n        }\n    }\n\n    private generateTickMarks(color: string, interval: number) {\n        return `repeating-linear-gradient(\n            ${'to left'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        ), repeating-linear-gradient(\n            ${'to right'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        )`;\n    }\n\n    private toggleThumbLabel() {\n        this.showThumbsLabels();\n        this.hideThumbsLabels();\n    }\n\n    private getSliderOffset(): number {\n        return this.xOffset;\n    }\n\n    private toFixed(num: number): number {\n        num = parseFloat(num.toFixed(20));\n        return num;\n    }\n\n    private positionHandle(handle: ElementRef, position: number) {\n        handle.nativeElement.style.left = `${this.valueToFraction(position) * 100}%`;\n    }\n\n    private positionHandlesAndUpdateTrack() {\n        if (!this.isRange) {\n            this.positionHandle(this.thumbTo, this.value as number);\n        } else {\n            this.positionHandle(this.thumbTo, (this.value as IRangeSliderValue).upper);\n            this.positionHandle(this.thumbFrom, (this.value as IRangeSliderValue).lower);\n        }\n\n        this.updateTrack();\n    }\n\n    private closestHandle() {\n        const fromOffset = this.thumbFrom.nativeElement.offsetLeft + this.thumbFrom.nativeElement.offsetWidth / 2;\n        const toOffset = this.thumbTo.nativeElement.offsetLeft + this.thumbTo.nativeElement.offsetWidth / 2;\n        const match = this.closestTo(this.xPointer, [fromOffset, toOffset]);\n\n        if (match === toOffset) {\n            this.thumbTo.nativeElement.focus();\n        } else if (match === fromOffset) {\n            this.thumbFrom.nativeElement.focus();\n        }\n    }\n\n    private setTickInterval() {\n        if (this.isContinuous) {\n            return;\n        }\n\n        const interval = this.step > 1 ? this.step : null;\n        this.renderer.setStyle(this.ticks.nativeElement, 'background', this.generateTickMarks('white', interval));\n    }\n\n    private snapValueToStep(value: number): number {\n        const valueModStep = (value - this.minValue) % this.step;\n        let snapValue = value - valueModStep;\n\n        if (Math.abs(valueModStep) * 2 >= this.step) {\n            snapValue += (valueModStep > 0) ? this.step : (-this.step);\n        }\n\n        return parseFloat(snapValue.toFixed(20));\n    }\n\n    private closestTo(goal: number, positions: number[]): number {\n        return positions.reduce((previous, current) => {\n            return (Math.abs(goal - current) < Math.abs(goal - previous) ? current : previous);\n        });\n    }\n\n    // Set Values for To/From based on active handle\n    private setValues() {\n        if (this.activeHandle === SliderHandle.TO) {\n            if (this.isRange) {\n                this.value = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: this.fractionToValue(this.pPointer)\n                };\n            } else {\n                this.value = this.fractionToValue(this.pPointer);\n            }\n        }\n\n        if (this.activeHandle === SliderHandle.FROM) {\n            this.value = {\n                lower: this.fractionToValue(this.pPointer),\n                upper: (this.value as IRangeSliderValue).upper\n            };\n        }\n    }\n\n    private setSliderWidth(): void {\n        this.width = this.slider.nativeElement.offsetWidth;\n    }\n\n    private setPointerPosition(e) {\n        this.xPointer = e.center.x - this.getSliderOffset();\n    }\n\n    private setSliderOffset() {\n        const rect = this.slider.nativeElement.getBoundingClientRect();\n        this.xOffset = rect.left;\n    }\n\n    private setPointerPercent() {\n        this.pPointer = this.valueInRange(this.toFixed(this.xPointer / this.width), this.pMin, this.pMax);\n    }\n\n    private valueToFraction(value: number) {\n        return this.valueInRange((value - this.minValue) / (this.maxValue - this.minValue), this.pMin, this.pMax);\n    }\n\n    private fractionToValue(fraction: number): number {\n        const max: number = this.maxValue;\n        const min: number = this.minValue;\n\n        return (max - min) * fraction + min;\n    }\n\n    private updateTrack() {\n        const fromPosition = this.valueToFraction(this.lowerValue);\n        const toPosition = this.valueToFraction(this.upperValue);\n        const positionGap = (this.valueToFraction(this.upperValue) - this.valueToFraction(this.lowerValue));\n\n        if (!this.isRange) {\n            this.track.nativeElement.style.transform = `scaleX(${toPosition})`;\n        }\n\n        if (this.isRange) {\n            this.track.nativeElement.style.transform = `scaleX(${1})`;\n            this.track.nativeElement.style.left = `${fromPosition * 100}%`;\n            this.track.nativeElement.style.width = `${positionGap * 100}%`;\n        }\n    }\n    private hasValueChanged(oldValue) {\n        const isSliderWithDifferentValue: boolean = !this.isRange && oldValue !== this.value;\n        const isRangeWithOneDifferentValue: boolean = this.isRange &&\n            ((oldValue as IRangeSliderValue).lower !== (this.value as IRangeSliderValue).lower ||\n                (oldValue as IRangeSliderValue).upper !== (this.value as IRangeSliderValue).upper);\n\n        return isSliderWithDifferentValue || isRangeWithOneDifferentValue;\n    }\n\n    private emitValueChanged(oldValue: number | IRangeSliderValue) {\n        this.onValueChange.emit({ oldValue, value: this.value });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSliderComponent],\n    exports: [IgxSliderComponent],\n    imports: [CommonModule]\n})\nexport class IgxSliderModule {\n}\n","import {\n    animate,\n    AnimationEvent,\n    state,\n    style,\n    transition,\n    trigger,\n    useAnimation\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    NgZone,\n    Output\n} from '@angular/core';\nimport { fadeIn, fadeOut, slideInBottom, slideOutBottom } from '../animations/main';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Snackbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)\n *\n * The Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can\n * include a link to an action such as Undo.\n *\n * Example:\n * ```html\n * <button (click)=\"snackbar.show()\">Send message</button>\n * <div>\n *   <igx-snackbar #snackbar message=\"Message sent\">\n *   </igx-snackbar>\n * </div>\n * ```\n */\n@Component({\n    animations: [\n        trigger('slideInOut', [\n            transition('void => *', [\n                useAnimation(slideInBottom, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n                        fromPosition: 'translateY(100%)',\n                        toPosition: 'translateY(0)'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(slideOutBottom, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'cubic-bezier(0.4, 0.0, 1, 1)',\n                        fromPosition: 'translateY(0)',\n                        toOpacity: 1,\n                        toPosition: 'translateY(100%)'\n                    }\n                })\n            ])\n        ]),\n        trigger('fadeInOut', [\n            transition('void => *', [\n                useAnimation(fadeIn, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'ease-out'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(fadeOut, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'ease-out'\n                    }\n                })\n            ])\n        ])\n    ],\n    selector: 'igx-snackbar',\n    templateUrl: 'snackbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSnackbarComponent {\n\n    /**\n     * Sets/gets the `id` of the snackbar.\n     * If not set, the `id` of the first snackbar component  will be `\"igx-snackbar-0\"`;\n     * ```html\n     * <igx-snackbar id = \"Snackbar1\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let snackbarId = this.snackbar.id;\n     * ```\n     * @memberof IgxSnackbarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-snackbar-${NEXT_ID++}`;\n    /**\n     * Sets/gets the `message` attribute.\n     * ```html\n     * <igx-snackbar [message] = \"'Snackbar Component'\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let message =  this.snackbar.message;\n     * ```\n     */\n    @Input() public message: string;\n\n    /**\n     * Enables/Disables the visibility of the snackbar.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-snackbar [isVisible] = \"true\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let isVisible =  this.snackbar.isVisible;\n     * ```\n     */\n    @Input() public isVisible = false;\n\n    /**\n     * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-snackbar [autoHide] = \"false\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let autoHide =  this.snackbar.autoHide;\n     * ```\n     */\n    @Input() public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.\n     * Default value is 4000.\n     * ```html\n     * <igx-snackbar [displayTime] = \"2000\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let displayTime = this.snackbar.displayTime;\n     * ```\n     */\n    @Input() public displayTime = 4000;\n\n    /**\n     * Sets/gets the `actionText` attribute.\n     * ```html\n     * <igx-snackbar [actionText] = \"'Action Text'\"></igx-snackbar>\n     * ```\n     */\n    @Input() public actionText?: string;\n\n    /**\n     * An event that will be emitted when the action is executed.\n     * Provides reference to the `IgxSnackbarComponent` as an argument.\n     * ```html\n     * <igx-snackbar (onAction) = \"onAction($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public onAction = new EventEmitter<IgxSnackbarComponent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation starts.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationStarted) = \"animationStarted($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationStarted = new EventEmitter<AnimationEvent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation ends.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationDone) = \"animationDone($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationDone = new EventEmitter<AnimationEvent>();\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.\n     * ```typescript\n     * this.snackbar.show();\n     * ```\n     */\n    public show(): void {\n        clearTimeout(this.timeoutId);\n        setTimeout(this.timeoutId);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n    }\n\n    /**\n     * Hides the snackbar.\n     * ```typescript\n     * this.snackbar.hide();\n     * ```\n     */\n    public hide(): void {\n        this.isVisible = false;\n        clearTimeout(this.timeoutId);\n    }\n    /**\n     *@hidden\n     */\n    public triggerAction(): void {\n        this.onAction.emit(this);\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationStarted(evt: AnimationEvent): void {\n        if (evt.fromState === 'void') {\n            this.animationStarted.emit(evt);\n        }\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationDone(evt: AnimationEvent): void {\n        if (evt.fromState === 'show') {\n            this.animationDone.emit(evt);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSnackbarComponent],\n    exports: [IgxSnackbarComponent],\n    imports: [CommonModule]\n})\nexport class IgxSnackbarModule { }\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum SwitchLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeSwitchEventArgs {\n    checked: boolean;\n    switch: IgxSwitchComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Switch** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/switch.html)\n *\n * The Ignite UI Switch lets the user toggle between on/off or true/false states.\n *\n * Example:\n * ```html\n * <igx-switch [checked]=\"true\">\n *   Simple switch\n * </igx-switch>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSwitchComponent, multi: true }],\n    selector: 'igx-switch',\n    templateUrl: 'switch.component.html'\n})\nexport class IgxSwitchComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.switch.nativeCheckbox;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox') public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.switch.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.switch.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the switch component.\n     * If not set, the `id` of the first switch component will be `\"igx-switch-0\"`.\n     * ```html\n     * <igx-switch id=\"my-first-switch\"></igx-switch>\n     * ```\n     * ```typescript\n     * let switchId =  this.switch.id;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-switch-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the switch component.\n     * If not set, the label of the first switch component will have value `\"igx-switch-0-label\"`.\n     * ```html\n     * <igx-switch labelId=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelId =  this.switch.labelId;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute of the switch component.\n     * ```html\n     * <igx-switch [value] = \"switchValue\"></igx-switch>\n     * ```\n     * ```typescript\n     * let value =  this.switch.value;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the switch component.\n     * ```html\n     * <igx-switch name = \"Switch1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let name =  this.switch.name;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-switch [tabindex]=\"1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.switch.tabindex;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Sets/gets the position of the `label` in the switch component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-switch labelPosition=\"before\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.switch.labelPosition;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelPosition: SwitchLabelPosition | string = 'after';\n    /**\n     * Enables/Disables the ripple effect\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-switch [disableRipple]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.switch.disableRipple;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether switch is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-switch [required]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRequired = this.switch.required;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledBy` attribute.\n     * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-switch aria-labelledby = \"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.switch.ariaLabelledBy;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-switch aria-label=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.switch.ariaLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the switch state is changed.\n     * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.\n     * @memberof IgxSwitchComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeSwitchEventArgs> = new EventEmitter<IChangeSwitchEventArgs>();\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * Returns the class of the switch component.\n     * ```typescript\n     * let switchClass = this.switch.cssClass;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch')\n    public cssClass = 'igx-switch';\n    /**\n     * Sets/gets whether the switch is on or off.\n     * Default value is 'false'.\n     * ```html\n     *  <igx-switch [checked] = \"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isChecked =  this.switch.checked;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-switch [disabled] = \"true\"><igx-switch>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.switch.disabled;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the switch component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.switch.focused = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.switch.focused;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     * Toggles the checked state of the switch.\n     * ```typescript\n     * this.switch.toggle();\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = !this.checked;\n        this.focused = false;\n        this.change.emit({ checked: this.checked, switch: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchClick(event) {\n        event.stopPropagation();\n        this.toggle();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case SwitchLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case SwitchLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\nexport const IGX_SWITCH_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxSwitchRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-switch[required][formControlName],\n    igx-switch[required][formControl],\n    igx-switch[required][ngModel]`,\n    providers: [IGX_SWITCH_REQUIRED_VALIDATOR]\n})\nexport class IgxSwitchRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    exports: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxSwitchModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxIconModule } from '../icon/index';\n\nexport interface ISelectTabEventArgs {\n    tab: IgxTabComponent;\n    panel: IgxTabPanelComponent;\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n/**\n * **Ignite UI for Angular Tab Bar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tabbar.html)\n *\n * The Ignite UI Tab Bar enables the user to navigate among a number of content panels displayed in a single view.\n *\n * Example:\n * ```html\n * <igx-bottom-nav>\n *   <igx-tab-panel label=\"Tab 1\">Tab 1 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 2\">Tab 2 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 3\">Tab 3 Content</igx-tab-panel>\n * </igx-bottom-nav>\n * ```\n */\n@Component({\n    selector: 'igx-bottom-nav',\n    templateUrl: 'tab-bar-content.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxBottomNavComponent implements AfterViewInit {\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.tabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ViewChildren(forwardRef(() => IgxTabComponent)) public tabs: QueryList<IgxTabComponent>;\n    /**\n     * Gets the `IgxTabPanelComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabPanels: QueryList<IgxTabPanelComponent> = this.tabBar.panels;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabPanelComponent)) public panels: QueryList<IgxTabPanelComponent>;\n\n    /**\n     * Sets/gets the `id` of the tab bar.\n     * If not set, the `id` of the first tab bar component will be `\"igx-bottom-nav-0\"`.\n     * ```html\n     * <igx-bottom-nav id = \"my-first-tab-bar\"></igx-bottom-nav>\n     * ```\n     * ```typescript\n     * let tabBarId =  this.tabBar.id;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-bottom-nav-${NEXT_ID++}`;\n    /**\n     * Emits an event when a new tab is selected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTableSelected) = \"onTabSelected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabSelected = new EventEmitter<ISelectTabEventArgs>();\n    /**\n     * Emits an event when a tab is deselected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTabDeselected) = \"onTabDeselected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabDeselected = new EventEmitter<ISelectTabEventArgs>();\n    /**\n     * Gets the `index` of selected tab/panel in the respective collection.\n     * ```typescript\n     * let index =  this.tabBar.selectedIndex;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public selectedIndex = -1;\n    /**\n     * Gets the `itemStyle` of the tab bar.\n     * ```typescript\n     * let itemStyle =  this.tabBar.itemStyle;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-bottom-nav';\n    /**\n     * Gets the selected tab in the tab bar.\n     * ```typescript\n     * let tab =  this.tabBar.selectedTab;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    get selectedTab(): IgxTabComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        // initial selection\n        setTimeout(() => {\n            if (this.selectedIndex === -1) {\n                const selectablePanels = this.panels.filter((p) => !p.disabled);\n                const panel = selectablePanels[0];\n\n                if (panel) {\n                    panel.select();\n                }\n            }\n        }, 0);\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('onTabSelected', ['$event'])\n    public _selectedPanelHandler(args) {\n        this.selectedIndex = args.panel.index;\n\n        this.panels.forEach((p) => {\n            if (p.index !== this.selectedIndex) {\n                this._deselectPanel(p);\n            }\n        });\n    }\n    /**\n     *@hidden\n     */\n    private _deselectPanel(panel: IgxTabPanelComponent) {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (panel.disabled || this.selectedTab.index === panel.index) {\n            return;\n        }\n\n        panel.isSelected = false;\n        this.onTabDeselected.emit({ tab: this.tabs[panel.index], panel });\n    }\n}\n\n// ================================= IgxTabPanelComponent ======================================\n\n@Component({\n    selector: 'igx-tab-panel',\n    templateUrl: 'tab-panel.component.html'\n})\n\nexport class IgxTabPanelComponent implements AfterContentInit, AfterViewChecked {\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-tab-panel';\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab-panel [label] = \"'Tab panel label'\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelLabel = this.tabPanel.label;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public label: string;\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab-panel [icon] = \"panel_icon\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelIcon =  this.tabPanel.icon;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public icon: string;\n    /**\n     * Sets/gets whether the tab panel is disabled.\n     * ```html\n     * <igx-tab-panel [disabled] = \"true\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let isDisabled = this.tabPanel.disabled;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public disabled: boolean;\n    /**\n     * Gets the role of the tab panel.\n     * ```typescript\n     * let tabPanelRole = this.tabPanel.role;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('attr.role') public role = 'tabpanel';\n    /**\n     * Gets whether a tab panel will have `igx-bottom-nav__panel` class.\n     * ```typescript\n     * let styleClass = this.tabPanel.styleClass;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel')\n    get styleClass(): boolean {\n        return (!this.isSelected);\n    }\n    /**\n     * Sets/gets whether a tab panel is selected.\n     * ```typescript\n     * this.tabPanel.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected =  this.tabPanelIsSelected;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel--selected')\n    public isSelected = false;\n    /**\n     * Gets the `itemStyle` of the tab panel.\n     * ```typescript\n     * let itemStyle = this.tabPanel.itemStyle;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n    /**\n     * Gets the tab associated with the panel.\n     * ```typescript\n     * let tab = this.tabPanel.relatedTab;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get relatedTab(): IgxTabComponent {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray()[this.index];\n        }\n    }\n    /**\n     * Gets the index of a panel in the panels collection.\n     * ```typescript\n     * let panelIndex =  this.tabPanel.index\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get index() {\n        if (this._tabBar.panels) {\n            return this._tabBar.panels.toArray().indexOf(this);\n        }\n    }\n    /**\n     * Gets the tab template.\n     * ```typescript\n     * let tabTemplate = this.tabPanel.customTabTemplate\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n    /**\n     * Sets the tab template.\n     * ```typescript\n     * this.tabPanel.customTabTemplate(tabTemplate);\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n    /**\n     *@hidden\n     */\n    private _tabTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective })\n    protected tabTemplate: IgxTabTemplateDirective;\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-bottom-nav__panel-${this.index}`);\n    }\n    /**\n     * Selects the current tab and the tab panel.\n     * ```typescript\n     * this.tabPanel.select();\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public select() {\n        if (this.disabled || this._tabBar.selectedIndex === this.index) {\n            return;\n        }\n\n        this.isSelected = true;\n        this._tabBar.onTabSelected.emit({ tab: this._tabBar.tabs.toArray()[this.index], panel: this });\n    }\n}\n\n// ======================================= IgxTabComponent ==========================================\n\n@Component({\n    selector: 'igx-tab',\n    templateUrl: 'tab.component.html'\n})\n\nexport class IgxTabComponent {\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let tabRole = this.tab.role;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @HostBinding('attr.role') public role = 'tab';\n    /**\n     * Gets the panel associated with the tab.\n     * ```typescript\n     * let tabPanel =  this.tab.relatedPanel;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input() public relatedPanel: IgxTabPanelComponent;\n    /**\n     *@hidden\n     */\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n    /**\n     * Gets the changes and updates accordingly applied to the tab.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n    /**\n     * Gets whether the tab is disabled.\n     * ```typescript\n     * let isDisabled = this.tab.disabled;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get disabled(): boolean {\n        const panel = this.relatedPanel;\n\n        if (panel) {\n            return panel.disabled;\n        }\n    }\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * let isSelected  = this.tab.isSelected;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get isSelected(): boolean {\n        const panel = this.relatedPanel;\n\n        if (panel) {\n            return panel.isSelected;\n        }\n    }\n    /**\n     * Gets the `index` of the tab.\n     * ```typescript\n     * let tabIndex = this.tab.index;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get index(): number {\n        return this._tabBar.tabs.toArray().indexOf(this);\n    }\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n    /**\n     * Selects the current tab and the associated panel.\n     * ```typescript\n     * this.tab.select();\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public select() {\n        this.relatedPanel.select();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    exports: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule]\n})\nexport class IgxBottomNavModule {\n}\n","import { ElementRef, QueryList, EventEmitter } from '@angular/core';\n\n/** @hidden */\nexport abstract class IgxTabsBase {\n    selectedIndicator: ElementRef<any>;\n    tabs: QueryList<IgxTabItemBase>;\n    groups: QueryList<IgxTabsGroupBase>;\n    offset: number;\n    selectedIndex: number;\n    viewPort: ElementRef;\n    contentsContainer: ElementRef;\n    tabsContainer: ElementRef;\n    itemsContainer: ElementRef;\n    headerContainer: ElementRef;\n    onTabItemSelected: EventEmitter<{}>; // TODO: Define event arg interface!\n    scrollElement(element: any, scrollRight: boolean) {}\n}\n\n/** @hidden */\nexport interface IgxTabItemBase {\n    nativeTabItem: ElementRef;\n    select(focusDelay?: number);\n}\n\n/** @hidden */\nexport interface IgxTabsGroupBase {\n    select(focusDelay?: number);\n}\n","import {\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input\n} from '@angular/core';\n\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxTabItemBase, IgxTabsBase } from './tabs.common';\n\n@Component({\n    selector: 'igx-tab-item',\n    templateUrl: 'tab-item.component.html'\n})\n\nexport class IgxTabItemComponent implements IgxTabItemBase {\n\n    /**\n    * Gets the group associated with the tab.\n    * ```html\n    * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;\n    * ```\n    */\n    @Input()\n    public relatedGroup: IgxTabsGroupComponent;\n\n    private _nativeTabItem: ElementRef;\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef) {\n        this._nativeTabItem = _element;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex;\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        this.select();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('window:resize', ['$event'])\n    public onResize(event) {\n        if (this.isSelected) {\n            this._tabs.selectedIndicator.nativeElement.style.width = `${this.nativeTabItem.nativeElement.offsetWidth}px`;\n            this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${this.nativeTabItem.nativeElement.offsetLeft}px)`;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        this.onKeyDown(false);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        this.onKeyDown(true);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        this.onKeyDown(false, 0);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        this.onKeyDown(false, this._tabs.tabs.toArray().length - 1);\n    }\n\n    /**\n     * @hidden\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    /**\n     * @hidden\n     */\n    get nativeTabItem(): ElementRef {\n        return this._nativeTabItem;\n    }\n\n    /**\n    * \tGets whether the tab is disabled.\n    * ```\n    * const disabledItem = this.myTabComponent.tabs.first.disabled;\n    * ```\n    */\n    get disabled(): boolean {\n        const group = this.relatedGroup;\n\n        if (group) {\n            return group.disabled;\n        }\n    }\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * const selectedItem = this.myTabComponent.tabs.first.isSelected;\n     * ```\n     */\n    get isSelected(): boolean {\n        const group = this.relatedGroup;\n\n        if (group) {\n            return group.isSelected;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get index(): number {\n        return this._tabs.tabs.toArray().indexOf(this);\n    }\n\n    /**\n     * @hidden\n     */\n    public select(focusDelay = 200): void {\n        this.relatedGroup.select(focusDelay);\n    }\n\n    private onKeyDown(isLeftArrow: boolean, index = null): void {\n        const tabsArray = this._tabs.tabs.toArray();\n        if (index === null) {\n            index = (isLeftArrow)\n                ? (this._tabs.selectedIndex === 0) ? tabsArray.length - 1 : this._tabs.selectedIndex - 1\n                : (this._tabs.selectedIndex === tabsArray.length - 1) ? 0 : this._tabs.selectedIndex + 1;\n        }\n        const tab = tabsArray[index];\n        tab.select(200);\n    }\n}\n","import {\n    Directive,\n    HostBinding,\n    TemplateRef\n} from '@angular/core';\nimport { IgxTabsBase } from './tabs.common';\n\nenum ButtonStyle {\n    VISIBLE = 'visible',\n    HIDDEN = 'hidden',\n    NOT_DISPLAYED = 'not_displayed'\n}\n\n@Directive({\n    selector: '[igxRightButtonStyle]'\n})\n\nexport class IgxRightButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getRightButtonStyle(): string {\n        const viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;\n\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        const total = offset + viewPortWidth;\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations.\n        if (itemsContainerWidth - headerContainerWidth <= 1 && offset === 0) {\n            return ButtonStyle.NOT_DISPLAYED;\n        }\n\n        if (itemsContainerWidth > total) {\n            return ButtonStyle.VISIBLE;\n        } else {\n            return ButtonStyle.HIDDEN;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxLeftButtonStyle]'\n})\n\nexport class IgxLeftButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getLeftButtonStyle(): string {\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n\n        if (offset === 0) {\n            // Fix for IE 11, a difference is accumulated from the widths calculations.\n            if (itemsContainerWidth - headerContainerWidth <= 1) {\n                return ButtonStyle.NOT_DISPLAYED;\n            }\n            return ButtonStyle.HIDDEN;\n        } else {\n            return ButtonStyle.VISIBLE;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabItemTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    Input,\n    TemplateRef,\n    HostListener\n} from '@angular/core';\n\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabsGroupBase } from './tabs.common';\n\n@Component({\n    selector: 'igx-tabs-group',\n    templateUrl: 'tabs-group.component.html'\n})\n\nexport class IgxTabsGroupComponent implements IgxTabsGroupBase, AfterContentInit, AfterViewChecked {\n\n    /**\n    * An @Input property that allows you to enable/disable the `IgxTabGroupComponent`.\n    *```html\n    *<igx-tabs-group label=\"Tab 2  Lorem ipsum dolor sit\" icon=\"home\" [disabled]=\"true\">\n    *```\n    */\n    @Input()\n    public disabled = false;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public icon: string;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public label: string;\n\n    public isSelected = false;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective })\n    protected tabTemplate: IgxTabItemTemplateDirective;\n\n    private _tabTemplate: TemplateRef<any>;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tabpanel';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tabs__group')\n    public styleClass = true;\n\n    @HostListener('window:resize', ['$event'])\n    public onResize(event) {\n        if (this.isSelected) {\n            this.transformContentAnimation(0);\n        }\n    }\n\n    /**\n     * An accessor that returns the `IgxTabItemComponent` component.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabComponent = this.tab.relatedTab;\n     * }\n     * ```\n     */\n    get relatedTab(): IgxTabItemComponent {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray()[this.index] as IgxTabItemComponent;\n        }\n    }\n\n    /**\n     * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabIndex = this.tab.index;\n     * }\n     * ```\n     */\n    get index(): number {\n        if (this._tabs.groups) {\n            return this._tabs.groups.toArray().indexOf(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     *@hidden\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-item-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-tabs__group-${this.index}`);\n\n        if (this.isSelected) {\n            const tabItem = this.relatedTab.nativeTabItem.nativeElement;\n            this.transformContentAnimation(0);\n            this.transformIndicatorAnimation(tabItem);\n        }\n    }\n\n    /**\n     * A method that sets the focus on a tab.\n     * @memberof {@link IgxTabsGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public tab : IgxTabsGroupComponent;\n     *ngAfterViewInit(){\n     *    this.tab.select();\n     *}\n     *```\n     * @param focusDelay A number representing the expected delay.\n     */\n    public select(focusDelay = 200): void {\n        if (this.disabled || this.isSelected) {\n            return;\n        }\n\n        this.isSelected = true;\n        this.relatedTab.tabindex = 0;\n\n        if (focusDelay !== 0) {\n            setTimeout(() => {\n                this.relatedTab.nativeTabItem.nativeElement.focus();\n            }, focusDelay);\n        }\n        this.handleSelection();\n        this._tabs.onTabItemSelected.emit({ tab: this._tabs.tabs.toArray()[this.index], group: this });\n    }\n\n    private handleSelection(): void {\n        const tabElement = this.relatedTab.nativeTabItem.nativeElement;\n\n        // Scroll to the left\n        if (tabElement.offsetLeft < this._tabs.offset) {\n            this._tabs.scrollElement(tabElement, false);\n        }\n\n        // Scroll to the right\n        const viewPortOffsetWidth = this._tabs.viewPort.nativeElement.offsetWidth;\n        const delta = (tabElement.offsetLeft + tabElement.offsetWidth) - (viewPortOffsetWidth + this._tabs.offset);\n        // Fix for IE 11, a difference is accumulated from the widths calculations\n        if (delta > 1) {\n            this._tabs.scrollElement(tabElement, true);\n        }\n\n        this.transformContentAnimation(0.2);\n        this.transformIndicatorAnimation(tabElement);\n    }\n\n    private transformContentAnimation(duration: number): void {\n        const contentOffset = this._tabs.tabsContainer.nativeElement.offsetWidth * this.index;\n        this._tabs.contentsContainer.nativeElement.style.transitionDuration = `${duration}s`;\n        this._tabs.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;\n    }\n\n    private transformIndicatorAnimation(element: HTMLElement): void {\n        this._tabs.selectedIndicator.nativeElement.style.width = `${element.offsetWidth}px`;\n        this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${element.offsetLeft}px)`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxLeftButtonStyleDirective, IgxRightButtonStyleDirective, IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase } from './tabs.common';\n\nexport enum TabsType {\n    FIXED = 'fixed',\n    CONTENTFIT = 'contentfit'\n}\n\n@Component({\n    selector: 'igx-tabs',\n    templateUrl: 'tabs.component.html',\n    providers: [{ provide: IgxTabsBase, useExisting: IgxTabsComponent }]\n})\n\nexport class IgxTabsComponent implements IgxTabsBase, AfterViewInit, OnDestroy {\n\n    /**\n    * Provides an observable collection of all `IgxTabsGroupComponent`s.\n    * ```typescript\n    * const groupItems = this.myTabComponent.tabs;\n    * ```\n    */\n    @ContentChildren(forwardRef(() => IgxTabsGroupComponent))\n    public groups: QueryList<IgxTabsGroupComponent>;\n\n    /**\n    * An @Input property that sets the value of the `selectedIndex`.\n    * Default value is 0.\n    * ```html\n    * <igx-tabs selectedIndex=\"1\">\n    * ```\n    */\n    @Input()\n    public get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n\n    public set selectedIndex(index: number) {\n        this._selectedIndex = index;\n        this.setSelectedGroup();\n    }\n\n    /**\n     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.\n     * By default the header sizing mode is `contentfit`.\n     * ```html\n     * <igx-tabs tabsType=\"fixed\">\n     *     <igx-tabs-group label=\"HOME\">Home</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     */\n    @Input('tabsType')\n    public tabsType: string | TabsType = 'contentfit';\n\n    /**\n    * @hidden\n    */\n    @Input()\n    public class = '';\n\n    /**\n     * Emitted when a tab item is deselected.\n     * ```html\n     * <igx-tabs (onTabItemDeselected)=\"itemDeselected($event)\">\n     *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n     *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     * ```typescript\n     * itemDeselected(e){\n     *      const tabGroup = e.group;\n     *      const tabItem = e.tab;\n     * }\n     * ```\n     */\n    @Output() public onTabItemDeselected = new EventEmitter();\n\n    /**\n    * Emitted when a tab item is selected.\n    * ```html\n    * <igx-tabs (onTabItemSelected)=\"itemSelected($event)\">\n    *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n    *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n    * </igx-tabs>\n    * ```\n    * ```typescript\n    * itemSelected(e){\n    *      const tabGroup = e.group;\n    *      const tabItem = e.tab;\n    * }\n    * ```\n    */\n    @Output() public onTabItemSelected = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('contentsContainer')\n    public contentsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer')\n    public headerContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('itemsContainer')\n    public itemsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('selectedIndicator')\n    public selectedIndicator: ElementRef;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('tabsContainer')\n    public tabsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('viewPort')\n    public viewPort: ElementRef;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * ```typescript\n     * const tabItems = this.myTabComponent.tabs;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxTabItemComponent))\n    public tabs: QueryList<IgxTabItemComponent>;\n\n    /**\n     * @hidden\n     */\n    public calculatedWidth: number;\n\n    /**\n     * @hidden\n     */\n    public visibleItemsWidth: number;\n\n    /**\n     * @hidden\n     */\n    public offset = 0;\n\n    private _groupChanges$: Subscription;\n    private _selectedIndex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    public get cssClass() {\n        const defaultStyle = `igx-tabs`;\n        const fixedStyle = `igx-tabs--fixed`;\n        const iconStyle = `igx-tabs--icons`;\n        const iconLabelFound = this.groups.find((group) => group.icon != null && group.label != null);\n        let css;\n        switch (TabsType[this.tabsType.toUpperCase()]) {\n            case TabsType.FIXED: {\n                css = fixedStyle;\n                break;\n            }\n            default: {\n                css = defaultStyle;\n                break;\n            }\n        }\n\n        // Layout fix for items with icons\n        if (iconLabelFound !== undefined) {\n            css = `${css} ${iconStyle}`;\n        }\n\n        return `${css} ${this.class}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('onTabItemSelected', ['$event'])\n    public selectedGroupHandler(args) {\n        const prevSelectedIndex = this.selectedIndex;\n        if (prevSelectedIndex !== -1 && this.groups.toArray()[prevSelectedIndex] !== undefined) {\n            this.onTabItemDeselected.emit(\n                {\n                    tab: this.groups.toArray()[prevSelectedIndex].relatedTab,\n                    group: this.groups.toArray()[prevSelectedIndex]\n                });\n        }\n\n        this.selectedIndex = args.group.index;\n        this.groups.forEach((p) => {\n            if (p.index !== this.selectedIndex) {\n                this.deselectGroup(p);\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollLeft(event): void {\n        this.scroll(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollRight(event): void {\n        this.scroll(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollElement(element: any, scrollRight: boolean): void {\n        const viewPortWidth = this.viewPort.nativeElement.offsetWidth;\n\n        this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;\n        this.itemsContainer.nativeElement.style.transform = `translate(${-this.offset}px)`;\n    }\n\n    /**\n     * Gets the selected `IgxTabItemComponent`.\n     * ```\n     * const selectedItem = this.myTabComponent.selectedTabItem;\n     * ```\n     */\n    get selectedTabItem(): IgxTabItemComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        requestAnimationFrame(() => {\n            this.setSelectedGroup();\n        });\n\n        this._groupChanges$ = this.groups.changes.subscribe(() => {\n            this.resetSelectionOnCollectionChanged();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._groupChanges$) {\n            this._groupChanges$.unsubscribe();\n        }\n    }\n\n    private setSelectedGroup(): void {\n        requestAnimationFrame(() => {\n            if (this.selectedIndex <= 0 || this.selectedIndex >= this.groups.length) {\n                // if nothing is selected - select the first tabs group\n                this.selectGroupByIndex(0);\n            } else {\n                this.selectGroupByIndex(this.selectedIndex);\n            }\n        });\n    }\n\n    private resetSelectionOnCollectionChanged(): void {\n        setTimeout(() => {\n            if (this.groups.toArray()[this.selectedIndex] !== undefined) {\n                // persist the selected index and applied it to the new collection\n                this.selectGroupByIndex(this.selectedIndex);\n            } else {\n                if (this.selectedIndex >= this.groups.length) {\n                    // in case the selected index is no longer valid, select the last group in the new collection\n                    this.selectGroupByIndex(this.groups.length - 1);\n                }\n            }\n        }, 0);\n    }\n\n    private selectGroupByIndex(selectedIndex: number): void {\n        const selectableGroups = this.groups.filter((selectableGroup) => !selectableGroup.disabled);\n        const group = selectableGroups[selectedIndex];\n\n        if (group) {\n            group.select(0);\n        }\n    }\n\n    private deselectGroup(group: IgxTabsGroupComponent): void {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (group.disabled || this.selectedTabItem.index === group.index) {\n            return;\n        }\n\n        group.isSelected = false;\n        group.relatedTab.tabindex = -1;\n    }\n\n    private scroll(scrollRight: boolean): void {\n        const tabsArray = this.tabs.toArray();\n        for (const tab of tabsArray) {\n            const element = tab.nativeTabItem.nativeElement;\n            if (scrollRight) {\n                if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            } else {\n                if (element.offsetWidth + element.offsetLeft >= this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            }\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    exports: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule, IgxRippleModule]\n})\n\nexport class IgxTabsModule {\n}\n","import { ElementRef } from '@angular/core';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\nexport const IGX_TIME_PICKER_COMPONENT = 'IgxTimePickerComponentToken';\n\n/** @hidden */\nexport interface IgxTimePickerBase {\n    _ampmItems: any[];\n    hourList: ElementRef;\n    minuteList: ElementRef;\n    ampmList: ElementRef;\n    selectedHour: string;\n    selectedMinute: string;\n    selectedAmPm: string;\n    format: string;\n    promptChar: string;\n    cleared: boolean;\n    mode: InteractionMode;\n    nextHour();\n    prevHour();\n    nextMinute();\n    prevMinute();\n    nextAmPm();\n    prevAmPm();\n    okButtonClick(): boolean;\n    cancelButtonClick(): void;\n    scrollHourIntoView(item: string): void;\n    scrollMinuteIntoView(item: string): void;\n    scrollAmPmIntoView(item: string): void;\n    hideOverlay(): void;\n    parseMask(preserveAmPm?: boolean): string;\n}\n\n","/**\n * This file contains all the directives used by the @link IgxTimePickerComponent.\n * You should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    TemplateRef\n} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\n@Directive({\n    selector: '[igxItemList]'\n})\nexport class IgxItemListDirective {\n\n    @Input('igxItemList')\n    public type: string;\n\n    public isActive: boolean;\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private elementRef: ElementRef) { }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-time-picker__column')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__hourList')\n    get hourCSS(): boolean {\n        return this.type === 'hourList';\n    }\n\n    @HostBinding('class.igx-time-picker__minuteList')\n    get minuteCSS(): boolean {\n        return this.type === 'minuteList';\n    }\n\n    @HostBinding('class.igx-time-picker__ampmList')\n    get ampmCSS(): boolean {\n        return this.type === 'ampmList';\n    }\n\n    @HostListener('focus')\n    public onFocus() {\n        this.isActive = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n    }\n\n    private nextItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.nextHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.nextMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.nextAmPm();\n                break;\n            }\n        }\n    }\n\n    private prevItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.prevHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.prevMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.prevAmPm();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.prevItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('hourList') !== -1) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if (listName.indexOf('minuteList') !== -1 && this.timePicker._ampmItems.length !== 0) {\n            this.timePicker.ampmList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('minuteList') !== -1) {\n            this.timePicker.hourList.nativeElement.focus();\n        } else if (listName.indexOf('ampmList') !== -1) {\n            this.timePicker.minuteList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.timePicker.mode === InteractionMode.DropDown) {\n            this.timePicker.hideOverlay();\n            return;\n        }\n        this.timePicker.okButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.escape', ['$event'])\n    public onKeydownEscape(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.timePicker.cancelButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onHover() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('wheel', ['$event'])\n    public onScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.deltaY > 0) {\n            this.nextItem();\n        } else if (event.deltaY < 0) {\n            this.prevItem();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panmove', ['$event'])\n    public onPanMove(event) {\n        if (event.deltaY < 0) {\n            this.nextItem();\n        } else if (event.deltaY > 0) {\n            this.prevItem();\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHourItem]'\n})\nexport class IgxHourItemDirective {\n\n    @Input('igxHourItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedHour;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedHour && this.itemList.isActive;\n    }\n\n    get isSelectedHour(): boolean {\n        return this.timePicker.selectedHour === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollHourIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxMinuteItem]'\n})\nexport class IgxMinuteItemDirective {\n\n    @Input('igxMinuteItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedMinute;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedMinute && this.itemList.isActive;\n    }\n\n    get isSelectedMinute(): boolean {\n        return this.timePicker.selectedMinute === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollMinuteIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxAmPmItem]'\n})\nexport class IgxAmPmItemDirective {\n\n    @Input('igxAmPmItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedAmPm;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedAmPm && this.itemList.isActive;\n    }\n\n    get isSelectedAmPm(): boolean {\n        return this.timePicker.selectedAmPm === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollAmPmIntoView(item);\n        }\n    }\n}\n\n/**\n * This directive should be used to mark which ng-template will be used from IgxTimePicker when re-templating its input group.\n */\n@Directive({\n    selector: '[igxTimePickerTemplate]'\n})\nexport class IgxTimePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n","import { Pipe, PipeTransform, Inject} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\n\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element loses focus.\n **/\n@Pipe({ name: 'displayFormat'})\nexport class TimeDisplayFormatPipe implements PipeTransform {\n\n     constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n     transform(value: any): string {\n\n        const maskAmPM = this.timePicker.parseMask();\n        const mask = this.timePicker.parseMask(false);\n        if (!value || value === mask || value === maskAmPM) {\n            return '';\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        let hour = sections[0];\n        let minutes = sections[1];\n        let amPM = sections[2];\n\n        const format = this.timePicker.format;\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(this.timePicker.promptChar, 'g');\n\n        if (format.indexOf('hh') !== -1 || format.indexOf('HH') !== -1 && hour.indexOf(prompt) !== -1) {\n           hour = hour === prompt + prompt ? '00' : hour.replace(regExp, '0');\n        }\n\n        if (format.indexOf('mm') !== -1 && minutes.indexOf(prompt) !== -1) {\n           minutes = minutes === prompt + prompt ? '00' : minutes.replace(regExp, '0');\n        }\n\n        if (format.indexOf('hh') === -1 && format.indexOf('HH') === -1) {\n            hour = hour.indexOf(prompt) !== -1 ? hour.replace(regExp, '') : hour;\n            const hourVal = parseInt(hour, 10);\n            hour = !hourVal ? '0' : hourVal < 10 && hourVal !== 0 ? hour.replace('0', '') : hour;\n        }\n\n        if (format.indexOf('mm') === -1) {\n            minutes = minutes.indexOf(prompt) !== -1 ? minutes.replace(regExp, '') : minutes;\n            const minutesVal = parseInt(minutes, 10);\n            minutes = !minutesVal ? '0' : minutesVal < 10 && minutesVal !== 0 ? minutes.replace('0', '') : minutes;\n        }\n\n        if (format.indexOf('tt') !== -1 && (amPM !== 'AM' || amPM !== 'PM')) {\n           amPM = amPM.indexOf('p') !== -1 || amPM.indexOf('P') !== -1 ? 'PM' : 'AM';\n        }\n\n        return amPM ? `${hour}:${minutes} ${amPM}` : `${hour}:${minutes}`;\n    }\n}\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element gets focus.\n **/\n@Pipe({ name: 'inputFormat' })\nexport class TimeInputFormatPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n    transform(value: any): string {\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(prompt, 'g');\n\n        let mask: string;\n        if (this.timePicker.cleared) {\n            this.timePicker.cleared = false;\n            mask = this.timePicker.parseMask(false);\n        } else {\n            mask = this.timePicker.parseMask();\n        }\n\n        if (!value || value === mask) {\n            return mask;\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        let hour = sections[0].replace(regExp, '');\n        let minutes = sections[1].replace(regExp, '');\n        const amPM = sections[2];\n\n        const leadZeroHour = (parseInt(hour, 10) < 10 && !hour.startsWith('0')) || hour === '0';\n        const leadZeroMinutes = (parseInt(minutes, 10) < 10 && !minutes.startsWith('0')) || minutes === '0';\n\n        hour = leadZeroHour ? '0' + hour : hour;\n        minutes = leadZeroMinutes ? '0' + minutes : minutes;\n\n        return amPM ? `${hour}:${minutes} ${amPM}` : `${hour}:${minutes}`;\n    }\n}\n","import {\n    CommonModule\n} from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ContentChild,\n    Injectable,\n    AfterViewInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxInputDirective } from '../directives/input/input.directive';\nimport {\n    IgxAmPmItemDirective,\n    IgxHourItemDirective,\n    IgxItemListDirective,\n    IgxMinuteItemDirective,\n    IgxTimePickerTemplateDirective\n} from './time-picker.directives';\nimport { Subject, fromEvent, interval, animationFrameScheduler } from 'rxjs';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxTimePickerBase, IGX_TIME_PICKER_COMPONENT } from './time-picker.common';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll';\nimport { AutoPositionStrategy } from '../services/overlay/position';\nimport { OverlaySettings } from '../services/overlay/utilities';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport { IgxOverlayOutletDirective, IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { TimeDisplayFormatPipe, TimeInputFormatPipe } from './time-picker.pipes';\nimport { ITimePickerResourceStrings, TimePickerResourceStringsEN } from '../core/i18n/time-picker-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { KEYS } from '../core/utils';\nimport { InteractionMode } from '../core/enums';\n\nlet NEXT_ID = 0;\n\nconst HOURS_POS = [0, 1, 2];\nconst MINUTES_POS = [3, 4, 5];\nconst AMPM_POS = [6, 7, 8];\n\nconst ITEMS_COUNT = 7;\n\n@Injectable()\nexport class TimePickerHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\nexport interface IgxTimePickerValueChangedEventArgs {\n    oldValue: Date;\n    newValue: Date;\n}\n\nexport interface IgxTimePickerValidationFailedEventArgs {\n    timePicker: IgxTimePickerComponent;\n    currentValue: Date;\n    setThroughUI: boolean;\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxTimePickerComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: TimePickerHammerConfig\n        },\n        {\n            provide: IGX_TIME_PICKER_COMPONENT,\n            useExisting: IgxTimePickerComponent\n        }\n    ],\n    selector: 'igx-time-picker',\n    templateUrl: 'time-picker.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ]\n})\nexport class IgxTimePickerComponent implements\n    IgxTimePickerBase,\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    OnDestroy,\n    AfterViewInit {\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * ```html\n     * <igx-time-picker [id]=\"'igx-time-picker-5'\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-time-picker-${NEXT_ID++}`;\n\n    /**\n     * An accessor that allows you to set a time using the `value` input.\n     * ```html\n     *public date: Date = new Date(Date.now());\n     *  //...\n     *<igx-time-picker [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set value(value: Date) {\n        if (this._isValueValid(value)) {\n            const oldVal = this._value;\n\n            this._value = value;\n            this._onChangeCallback(value);\n\n            const dispVal = this._formatTime(this.value, this.format);\n            if (this.mode === InteractionMode.DropDown && this._displayValue !== dispVal) {\n                this.displayValue = dispVal;\n            }\n\n            const args: IgxTimePickerValueChangedEventArgs = {\n                oldValue: oldVal,\n                newValue: value\n            };\n            this.onValueChanged.emit(args);\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: value,\n                setThroughUI: false\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * An accessor that returns the value of `igx-time-picker` component.\n     * ```html\n     *@ViewChild(\"MyPick\")\n     *public pick: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let pickSelect = this.pick.value;\n     * }\n     * ```\n     */\n    get value(): Date {\n        return this._value;\n    }\n\n    /**\n     * An @Input property that allows you to disable the `igx-time-picker` component. By default `disabled` is set to false.\n     * ```html\n     * <igx-time-picker [disabled]=\"'true'\" [vertical]=\"true\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: ITimePickerResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): ITimePickerResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.\n     * ```html\n     * <igx-time-picker okButtonLabel='SET' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set okButtonLabel(value: string) {\n        this._okButtonLabel = value;\n    }\n\n    /**\n     * An accessor that returns the label of ok button.\n    */\n    get okButtonLabel(): string {\n        return this._okButtonLabel || this.resourceStrings.igx_time_picker_ok;\n    }\n\n    /**\n     * An @Input property that renders cancel button with custom text.\n     * By default `cancelButtonLabel` is set to Cancel.\n     * ```html\n     * <igx-time-picker cancelButtonLabel='Exit' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set cancelButtonLabel(value: string) {\n        this._cancelButtonLabel = value;\n    }\n\n    /**\n    * An accessor that returns the label of cancel button.\n    */\n    get cancelButtonLabel(): string {\n        return this._cancelButtonLabel || this.resourceStrings.igx_time_picker_cancel;\n    }\n\n    /**\n     * An @Input property that gets/sets the delta by which hour and minute items would be changed <br>\n     * when the user presses the Up/Down keys.\n     * By default `itemsDelta` is set to `{hours: 1, minutes:1}`\n     * ```html\n     *<igx-time-picker [itemsDelta]=\"{hours:3, minutes:5}\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public itemsDelta = { hours: 1, minutes: 1 };\n\n    /**\n     * An @Input property that allows you to set the `minValue` to limit the user input.\n     *```html\n     *public min: string = \"09:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [minValue]=\"min\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public minValue: string;\n\n    /**\n     * An @Input property that allows you to set the `maxValue` to limit the user input.\n     *```html\n     *public max: string = \"18:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [maxValue]=\"max\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public maxValue: string;\n\n    /**\n     * An @Input property that determines the spin behavior. By default `isSpinLoop` is set to true.\n     *The minutes and hour spinning will wrap around by default.\n     *```html\n     *<igx-time-picker [isSpinLoop]=\"false\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * An @Input property that Gets/Sets the orientation of the `igxTimePicker`. By default `vertical` is set to false.\n     * ```html\n     *<igx-time-picker [vertical]=\"true\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>\n     * By default `format` is set to hh:mm tt. <br>\n     * List of time-flags: <br>\n     * `h` : hours field in 12-hours format without leading zero <br>\n     * `hh` : hours field in 12-hours format with leading zero <br>\n     * `H` : hours field in 24-hours format without leading zero <br>\n     * `HH` : hours field in 24-hours format with leading zero <br>\n     * `m` : minutes field without leading zero <br>\n     * `mm` : minutes field with leading zero <br>\n     * `tt` : 2 character string which represents AM/PM field <br>\n     * ```html\n     *<igx-time-picker format=\"HH:m\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    get format() {\n        return this._format || 'hh:mm tt';\n    }\n\n    set format(formatValue: string) {\n        this._format = formatValue;\n        this.mask = this._format.indexOf('tt') !== -1 ? '00:00 LL' : '00:00';\n\n        if (this.displayValue) {\n            this.displayValue = this._formatTime(this.value, this._format);\n        }\n    }\n\n    /**\n     * Sets the character used to prompt the user for input.\n     * Default value is \"'-'\".\n     * ```html\n     * <igx-time-picker [promptChar] = \"'_'\">\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public promptChar = '-';\n\n    /**\n     * An @Input property that allows you to switch the interaction mode between\n     * a dialog picker or dropdown with editable masked input.\n     * Deafult is dialog picker.\n     *```html\n     *public mode = InteractionMode.DROPDOWN;\n     *  //..\n     *<igx-time-picker [mode]=\"mode\"></igx-time-picker>\n     *```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     *@hidden\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n    * An @Input property that allows you to modify overlay positioning, interaction and scroll behavior.\n    * ```typescript\n    * const settings: OverlaySettings = {\n    *      closeOnOutsideClick: true,\n    *      modal: false\n    *  }\n    * ```\n    * ---\n    * ```html\n    * <igx-time-picker [overlaySettings]=\"settings\"></igx-time-picker>\n    * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    /**\n     * Emitted when selection is made. The event contains the selected value. Returns {`oldValue`: `Date`, `newValue`: `Date`}.\n     *```typescript\n     * @ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValueChanged(timepicker){\n     *    this.toast.show()\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker (onValueChanged)=\"onValueChanged($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The value has been changed!\"></igx-toast>\n     *```\n     */\n    @Output()\n    public onValueChanged = new EventEmitter<IgxTimePickerValueChangedEventArgs>();\n\n    /**\n     * Emitted when an invalid value is being set. Returns {`timePicker`: `any`, `currentValue`: `Date`, `setThroughUI`: `boolean`}\n     * ```typescript\n     *public min: string = \"09:00\";\n     *public max: string = \"18:00\";\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValidationFailed(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onValidationFailed)=\"onValidationFailed($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"Value must be between 09:00 and 18:00!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onValidationFailed = new EventEmitter<IgxTimePickerValidationFailedEventArgs>();\n\n    /**\n     * Emitted when a timePicker is being opened.\n     * ```html\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onOpen(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onOpen)=\"onOpen($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The time picker has been opened!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * Emitted when a timePicker is being closed.\n     */\n    @Output()\n    public onClose = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hourList')\n    public hourList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('minuteList')\n    public minuteList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ampmList')\n    public ampmList: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('defaultTimePickerTemplate', { read: TemplateRef })\n    protected defaultTimePickerTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerTemplateDirective, { read: IgxTimePickerTemplateDirective })\n    protected timePickerTemplateDirective: IgxTimePickerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxInputDirective, { read: ElementRef })\n    private _input: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('container')\n    public container: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective)\n    public toggleRef: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('input', { read: ElementRef })\n    private input: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('group', { read: IgxInputGroupComponent })\n    private group: IgxInputGroupComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('dropdownInputTemplate', { read: TemplateRef })\n    private dropdownInputTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ContentChild('dropDownTarget', { read: ElementRef })\n    protected templateDropDownTarget: ElementRef;\n\n    /**\n     * @hidden\n     */\n    public _hourItems = [];\n    /**\n     * @hidden\n     */\n    public _minuteItems = [];\n    /**\n     * @hidden\n     */\n    public _ampmItems = [];\n\n    /**\n     * @hidden\n    */\n    public mask: string;\n    /**\n     * @hidden\n    */\n    public cleared = false;\n    /**\n     * @hidden\n    */\n    public isNotEmpty = false;\n    /**\n     * @hidden\n    */\n    public displayFormat = new TimeDisplayFormatPipe(this);\n    /**\n     * @hidden\n    */\n    public inputFormat = new TimeInputFormatPipe(this);\n\n    /**\n     * @hidden\n     */\n    public selectedHour: string;\n    /**\n     * @hidden\n     */\n    public selectedMinute: string;\n    /**\n     * @hidden\n     */\n    public selectedAmPm: string;\n\n    private _value: Date;\n    private _resourceStrings = CurrentResourceStrings.TimePickerResStrings;\n    private _okButtonLabel = null;\n    private _cancelButtonLabel = null;\n    private _format: string;\n    private _displayValue: string;\n\n    private _isHourListLoop = this.isSpinLoop;\n    private _isMinuteListLoop = this.isSpinLoop;\n\n    private _hourView = [];\n    private _minuteView = [];\n    private _ampmView = [];\n\n    private _dateFromModel: Date;\n    private _destroy$ = new Subject<boolean>();\n    private _dropDownOverlaySettings: OverlaySettings;\n\n    private _prevSelectedHour: string;\n    private _prevSelectedMinute: string;\n    private _prevSelectedAmPm: string;\n\n    private _onTouchedCallback: () => void = () => { };\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n     */\n    get displayValue(): string {\n        if (this._displayValue === undefined) {\n            return this._formatTime(this.value, this.format);\n        }\n        return this._displayValue;\n    }\n\n    set displayValue(value: string) {\n        this._displayValue = value;\n    }\n\n    /**\n     * Returns the current time formatted as string using the `format` option.\n     * If there is no set time the return is an empty string.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let time = this.picker.displayTime;\n     *}\n     *```\n     */\n    public get displayTime(): string {\n        if (this.value) {\n            return this._formatTime(this.value, this.format);\n        }\n        return '';\n    }\n\n    /**\n     * @hidden\n     */\n    get hourView(): string[] {\n        return this._hourView;\n    }\n\n    /**\n     * @hidden\n     */\n    get minuteView(): string[] {\n        return this._minuteView;\n    }\n\n    /**\n     * @hidden\n     */\n    get ampmView(): string[] {\n        return this._ampmView;\n    }\n\n    /**\n     * @hidden\n     */\n    get showClearButton(): boolean {\n        return (this.displayValue && this.displayValue !== this.parseMask(false)) || this.isNotEmpty;\n    }\n\n    /**\n     * @hidden\n     */\n    get validMinuteEntries(): any[] {\n        const minuteEntries = [];\n        for (let i = 0; i < 60; i++) {\n            minuteEntries.push(i);\n        }\n        return minuteEntries;\n    }\n\n    /**\n     * @hidden\n     */\n    get validHourEntries(): any[] {\n        const hourEntries = [];\n        const index = this.format.indexOf('h') !== -1 ? 13 : 24;\n        for (let i = 0; i < index; i++) {\n            hourEntries.push(i);\n        }\n        return hourEntries;\n    }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.timePickerTemplateDirective) {\n            return this.timePickerTemplateDirective.template;\n        }\n        return this.mode === InteractionMode.Dialog ? this.defaultTimePickerTemplate : this.dropdownInputTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxTimePickerComponent\n     */\n    get context() {\n        return {\n            value: this.value,\n            displayTime: this.displayTime,\n            displayValue: this.displayValue,\n            openDialog: () => { this.openDialog(); }\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this._generateHours();\n        this._generateMinutes();\n        if (this.format.indexOf('tt') !== -1) {\n            this._generateAmPm();\n        }\n\n        this._dropDownOverlaySettings = {\n            modal: false,\n            closeOnOutsideClick: true,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy()\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        if (this.mode === InteractionMode.DropDown && this.input) {\n            fromEvent(this.input.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.UP_ARROW || event.key === KEYS.UP_ARROW_IE ||\n                    event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE) {\n                    this.spinOnEdit(event);\n                }\n            });\n        }\n\n        if (this.container && this.group) {\n            this.container.nativeElement.style.width = this.group.element.nativeElement.getBoundingClientRect().width + 'px';\n        }\n\n        if (this.toggleRef) {\n            this.toggleRef.onClosed.pipe(takeUntil(this._destroy$)).subscribe(() => {\n\n                if (this._input) {\n                    this._input.nativeElement.focus();\n                }\n\n                if (this.mode === InteractionMode.DropDown) {\n                    this._onDropDownClosed();\n                }\n\n                this.onClose.emit(this);\n            });\n\n            this.toggleRef.onOpened.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                this.onOpen.emit(this);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onKeydownSpace(event) {\n        this.openDialog();\n        event.preventDefault();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.Alt.ArrowDown')\n    public onAltArrowDown() {\n        this.openDialog();\n    }\n\n    private _scrollItemIntoView(item: string, items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        let itemIntoView;\n        if (items) {\n            const index = (item === 'AM' || item === 'PM') ? items.indexOf(item) : items.indexOf(parseInt(item, 10));\n            let view;\n\n            if (index !== -1) {\n                if (isListLoop) {\n                    if (index > 0) {\n                        selectedItem = this._itemToString(items[index - 1], viewType);\n                        itemIntoView = this._nextItem(items, selectedItem, isListLoop, viewType);\n                    } else {\n                        selectedItem = this._itemToString(items[1], viewType);\n                        itemIntoView = this._prevItem(items, selectedItem, isListLoop, viewType);\n                    }\n                } else {\n                    view = items.slice(index - 3, index + 4);\n                    selectedItem = this._itemToString(items[index], viewType);\n                    itemIntoView = { selectedItem, view };\n                }\n                itemIntoView.view = this._viewToString(itemIntoView.view, viewType);\n            }\n        }\n        return itemIntoView;\n    }\n\n    private _viewToString(view: any, viewType: string): any {\n        for (let i = 0; i < view.length; i++) {\n            if (typeof (view[i]) !== 'string') {\n                view[i] = this._itemToString(view[i], viewType);\n            }\n        }\n        return view;\n    }\n\n    private _itemToString(item: any, viewType: string): string {\n        if (item === null) {\n            item = '';\n        } else if (viewType && typeof (item) !== 'string') {\n            const leadZeroHour = (item < 10 && (this.format.indexOf('hh') !== -1 || this.format.indexOf('HH') !== -1));\n            const leadZeroMinute = (item < 10 && this.format.indexOf('mm') !== -1);\n\n            const leadZero = (viewType === 'hour') ? leadZeroHour : leadZeroMinute;\n            item = (leadZero) ? '0' + item : `${item}`;\n        }\n        return item;\n    }\n\n    private _prevItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex - 4 < 0) {\n                view = items.slice(itemsCount - (4 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3));\n            } else if (selectedIndex + 4 > itemsCount) {\n                view = items.slice(selectedIndex - 4, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            }\n\n            selectedItem = (selectedIndex === 0) ? items[itemsCount - 1] : items[selectedIndex - 1];\n        } else if (selectedIndex > 3) {\n            view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            selectedItem = items[selectedIndex - 1];\n        } else if (selectedIndex === 3) {\n            view = items.slice(0, 7);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _nextItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex < 2) {\n                view = items.slice(itemsCount - (2 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5));\n            } else if (selectedIndex + 4 >= itemsCount) {\n                view = items.slice(selectedIndex - 2, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            }\n\n            selectedItem = (selectedIndex === itemsCount - 1) ? items[0] : items[selectedIndex + 1];\n        } else if (selectedIndex + 1 < itemsCount - 3) {\n            view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            selectedItem = items[selectedIndex + 1];\n        } else if (selectedIndex === itemsCount - 4) {\n            view = items.slice(selectedIndex - 3, itemsCount);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _formatTime(value: Date, format: string): string {\n        if (!value) {\n            return '';\n        } else {\n            let hour = value.getHours();\n            const minute = value.getMinutes();\n            let formattedMinute;\n            let formattedHour;\n            let amPM;\n\n            if (format.indexOf('h') !== -1) {\n                amPM = (hour > 11) ? 'PM' : 'AM';\n\n                if (hour > 12) {\n                    hour -= 12;\n                    formattedHour = hour < 10 && format.indexOf('hh') !== -1 ? '0' + hour : `${hour}`;\n                } else if (hour === 0) {\n                    formattedHour = '12';\n                } else if (hour < 10 && format.indexOf('hh') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            } else {\n                if (hour < 10 && format.indexOf('HH') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            }\n\n            formattedMinute = minute < 10 && format.indexOf('mm') !== -1 ? '0' + minute : `${minute}`;\n\n            return format.replace('hh', formattedHour).replace('h', formattedHour)\n                .replace('HH', formattedHour).replace('H', formattedHour)\n                .replace('mm', formattedMinute).replace('m', formattedMinute)\n                .replace('tt', amPM);\n        }\n    }\n\n    private _updateHourView(start: any, end: any): void {\n        this._hourView = this._viewToString(this._hourItems.slice(start, end), 'hour');\n    }\n\n    private _updateMinuteView(start: any, end: any): void {\n        this._minuteView = this._viewToString(this._minuteItems.slice(start, end), 'minute');\n    }\n\n    private _updateAmPmView(start: any, end: any): void {\n        this._ampmView = this._ampmItems.slice(start, end);\n    }\n\n    private _addEmptyItems(items: string[]): void {\n        for (let i = 0; i < 3; i++) {\n            items.push(null);\n        }\n    }\n\n    private _generateHours(): void {\n        let hourItemsCount = 24;\n        if (this.format.indexOf('h') !== -1) {\n            hourItemsCount = 13;\n        }\n\n        hourItemsCount /= this.itemsDelta.hours;\n\n        let i = this.format.indexOf('H') !== -1 ? 0 : 1;\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n            this._isHourListLoop = false;\n        }\n\n        if (hourItemsCount > 1) {\n            for (i; i < hourItemsCount; i++) {\n                this._hourItems.push(i * this.itemsDelta.hours);\n            }\n        } else {\n            this._hourItems.push(0);\n        }\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n        }\n    }\n\n    private _generateMinutes(): void {\n        const minuteItemsCount = 60 / this.itemsDelta.minutes;\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n            this._isMinuteListLoop = false;\n        }\n\n        for (let i = 0; i < minuteItemsCount; i++) {\n            this._minuteItems.push(i * this.itemsDelta.minutes);\n        }\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n        }\n    }\n\n    private _generateAmPm(): void {\n\n        this._addEmptyItems(this._ampmItems);\n\n        this._ampmItems.push('AM');\n        this._ampmItems.push('PM');\n\n        this._addEmptyItems(this._ampmItems);\n    }\n\n    private _getSelectedTime(): Date {\n        const date = this.value ? new Date(this.value) : new Date();\n        date.setHours(parseInt(this.selectedHour, 10));\n        date.setMinutes(parseInt(this.selectedMinute, 10));\n        date.setSeconds(0);\n        if (this.selectedAmPm === 'PM' && this.selectedHour !== '12') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (this.selectedAmPm === 'AM' && this.selectedHour === '12') {\n            date.setHours(0);\n        }\n        return date;\n    }\n\n    private _convertMinMaxValue(value: string): Date {\n        const date = this.value ? new Date(this.value) : this._dateFromModel ? new Date(this._dateFromModel) : new Date();\n        const sections = value.split(/[\\s:]+/);\n\n        date.setHours(parseInt(sections[0], 10));\n        date.setMinutes(parseInt(sections[1], 10));\n        date.setSeconds(0);\n        if (sections[2] && sections[2] === 'PM' && sections[0] !== '12') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (sections[0] === '12' && sections[2] && sections[2] === 'AM') {\n            date.setHours(0);\n        }\n\n        return date;\n    }\n\n    private _isValueValid(value: Date): boolean {\n        if (this.maxValue && value > this._convertMinMaxValue(this.maxValue)) {\n            return false;\n        } else if (this.minValue && value < this._convertMinMaxValue(this.minValue)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _isEntryValid(val: string): boolean {\n        const sections = val.split(/[\\s:]+/);\n        const re = new RegExp(this.promptChar, 'g');\n\n        const hour = parseInt(sections[0].replace(re, ''), 10);\n        const minutes = parseInt(sections[1].replace(re, ''), 10);\n\n        return this.validHourEntries.indexOf(hour) !== -1 && this.validMinuteEntries.indexOf(minutes) !== -1;\n    }\n\n    private _getCursorPosition(): number {\n        return this.input.nativeElement.selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        this.input.nativeElement.setSelectionRange(start, end);\n    }\n\n    private _updateEditableInput(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this._getSelectedTime(), this.format);\n        }\n    }\n\n    private _spinHours(currentVal: Date, minVal: Date, maxVal: Date, hDelta: number, sign: number): Date {\n        const oldVal = new Date(currentVal);\n\n        currentVal.setMinutes(sign * hDelta);\n        if (currentVal.getDate() !== oldVal.getDate() && this.isSpinLoop) {\n            currentVal.setDate(oldVal.getDate());\n        }\n\n        let minutes = currentVal.getMinutes();\n        if (currentVal.getTime() > maxVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes < minVal.getMinutes() ? 60 + minutes : minutes;\n                minVal.setMinutes(sign * minutes);\n                return minVal;\n            } else {\n                return oldVal;\n            }\n        } else if (currentVal.getTime() < minVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes <= maxVal.getMinutes() ? minutes : minutes - 60;\n                maxVal.setMinutes(minutes);\n                return maxVal;\n            } else {\n                return oldVal;\n            }\n        } else {\n            return currentVal;\n        }\n    }\n\n    private _spinMinutes(currentVal: Date, mDelta: number, sign: number) {\n        let minutes = currentVal.getMinutes() + (sign * mDelta);\n\n        if (minutes < 0 || minutes >= 60) {\n            minutes = this.isSpinLoop ? minutes - (sign * 60) : currentVal.getMinutes();\n        }\n\n        currentVal.setMinutes(minutes);\n        return currentVal;\n    }\n\n    private _initializeContainer() {\n        if (this.value) {\n            const formttedTime = this._formatTime(this.value, this.format);\n            const sections = formttedTime.split(/[\\s:]+/);\n\n            this.selectedHour = sections[0];\n            this.selectedMinute = sections[1];\n\n            if (this._ampmItems !== null) {\n                this.selectedAmPm = sections[2];\n            }\n        }\n\n        if (this.selectedHour === undefined) {\n            this.selectedHour = `${this._hourItems[3]}`;\n        }\n        if (this.selectedMinute === undefined) {\n            this.selectedMinute = '0';\n        }\n        if (this.selectedAmPm === undefined && this._ampmItems !== null) {\n            this.selectedAmPm = this._ampmItems[3];\n        }\n\n        this._prevSelectedHour = this.selectedHour;\n        this._prevSelectedMinute = this.selectedMinute;\n        this._prevSelectedAmPm = this.selectedAmPm;\n\n        this._onTouchedCallback();\n\n        this._updateHourView(0, ITEMS_COUNT);\n        this._updateMinuteView(0, ITEMS_COUNT);\n        this._updateAmPmView(0, ITEMS_COUNT);\n\n        if (this.selectedHour) {\n            this.scrollHourIntoView(this.selectedHour);\n        }\n        if (this.selectedMinute) {\n            this.scrollMinuteIntoView(this.selectedMinute);\n        }\n        if (this.selectedAmPm) {\n            this.scrollAmPmIntoView(this.selectedAmPm);\n        }\n\n        requestAnimationFrame(() => {\n            this.hourList.nativeElement.focus();\n        });\n    }\n\n    private _closeDropDown() {\n        this.toggleRef.close();\n        this._onDropDownClosed();\n    }\n\n    private _onDropDownClosed(): void {\n        const oldValue = this.value;\n        const newVal = this._convertMinMaxValue(this.displayValue);\n\n        if (this._isValueValid(newVal)) {\n            if (!this.value || oldValue.getTime() !== newVal.getTime()) {\n                this.value = newVal;\n            }\n        } else {\n            this.displayValue = this.inputFormat.transform(this._formatTime(oldValue, this.format));\n\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: newVal,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getEditElement() {\n        return this._input.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        // use this flag to make sure that min/maxValue are checked (in _convertMinMaxValue() method)\n        // against the real value when initializing the component and value is bound via ngModel\n        this._dateFromModel = value;\n\n        this.value = value;\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this.value, this.format);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /**\n     * opens the dialog.\n     * ```html\n     *<igx-time-picker #timePicker></igx-time-picker>\n     * ```\n     * ```typescript\n     * @ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;\n     * picker.openDialog();\n     * ```\n     */\n    public openDialog(timePicker: IgxTimePickerComponent = this): void {\n        if (this.toggleRef.collapsed) {\n            let settings;\n            if (this.mode === InteractionMode.Dialog && this.overlaySettings ) {\n                settings = this.overlaySettings;\n            }\n\n            if (this.mode === InteractionMode.DropDown) {\n                settings = this.overlaySettings || this._dropDownOverlaySettings;\n                const posStrategy = settings.positionStrategy;\n\n                if (this.group && posStrategy) {\n                    posStrategy.settings.target = this.group.element.nativeElement;\n                } else if (this.templateDropDownTarget && posStrategy) {\n                    posStrategy.settings.target = this.templateDropDownTarget.nativeElement;\n                } else if (!posStrategy || (posStrategy && !posStrategy.settings.target)) {\n                    throw new Error('There is no target element for the dropdown to attach.' +\n                        'Mark a DOM element with #dropDownTarget ref variable or provide correct overlay positionStrategy.');\n                }\n            }\n\n            if (this.outlet) {\n                settings.outlet = this.outlet;\n            }\n\n            this.toggleRef.open(settings);\n            this._initializeContainer();\n\n        } else if (this.mode === InteractionMode.DropDown) {\n            this._closeDropDown();\n        }\n    }\n\n    /**\n     * Scrolls a hour item into view.\n     * ```typescript\n     *scrhintoView(picker) {\n     *picker.scrollHourIntoView('2');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrhintoView(picker)\"></igx-time-picker>\n     *```\n     *@param item to be scrolled in view.\n     */\n    public scrollHourIntoView(item: string): void {\n        const hourIntoView = this._scrollItemIntoView(item, this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        if (hourIntoView) {\n            this._hourView = hourIntoView.view;\n            this.selectedHour = hourIntoView.selectedItem;\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * Scrolls a minute item into view.\n     * ```typescript\n     *scrMintoView(picker) {\n     *picker.scrollMinuteIntoView('3');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrMintoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollMinuteIntoView(item: string): void {\n        const minuteIntoView = this._scrollItemIntoView(item, this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        if (minuteIntoView) {\n            this._minuteView = minuteIntoView.view;\n            this.selectedMinute = minuteIntoView.selectedItem;\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * Scrolls an ampm item into view.\n     * ```typescript\n     *scrAmPmIntoView(picker) {\n     *picker.scrollAmPmIntoView('PM');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrAmPmIntoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollAmPmIntoView(item: string): void {\n        const ampmIntoView = this._scrollItemIntoView(item, this._ampmItems, this.selectedAmPm, false, null);\n        if (ampmIntoView) {\n            this._ampmView = ampmIntoView.view;\n            this.selectedAmPm = ampmIntoView.selectedItem;\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextHour() {\n        const nextHour = this._nextItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = nextHour.view;\n        this.selectedHour = nextHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevHour() {\n        const prevHour = this._prevItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = prevHour.view;\n        this.selectedHour = prevHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMinute() {\n        const nextMinute = this._nextItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = nextMinute.view;\n        this.selectedMinute = nextMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevMinute() {\n        const prevMinute = this._prevItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = prevMinute.view;\n        this.selectedMinute = prevMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex + 1 < this._ampmItems.length - 3) {\n            this._updateAmPmView(selectedIndex - 2, selectedIndex + 5);\n            this.selectedAmPm = this._ampmItems[selectedIndex + 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public prevAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex > 3) {\n            this._updateAmPmView(selectedIndex - 4, selectedIndex + 3);\n            this.selectedAmPm = this._ampmItems[selectedIndex - 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * If current value is valid selects it, closes the dialog and returns true, otherwise returns false.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\n     * //..\n     * </igx-dialog>\n     * ```\n     */\n    public okButtonClick(): boolean {\n        const time = this._getSelectedTime();\n        if (this._isValueValid(time)) {\n            this.hideOverlay();\n            this.value = time;\n            return true;\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: time,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n            return false;\n        }\n    }\n\n    /**\n     * Closes the dialog without selecting the current value.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\">\n     * //...\n     * </igx-dialog>\n     * ```\n     */\n    public cancelButtonClick(): void {\n        this.hideOverlay();\n\n        this.selectedHour = this._prevSelectedHour;\n        this.selectedMinute = this._prevSelectedMinute;\n        this.selectedAmPm = this._prevSelectedAmPm;\n    }\n\n    /**\n     * Returns an array of the hours currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let hInView = this.picker.hoursInView;\n     *}\n     *```\n     */\n    public hoursInView(): string[] {\n        return this._hourView.filter((hour) => hour !== '');\n    }\n\n    /**\n     * Returns an array of the minutes currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let minInView = this.picker.minutesInView;\n     *}\n     *```\n     */\n    public minutesInView(): string[] {\n        return this._minuteView.filter((minute) => minute !== '');\n    }\n\n    /**\n     * Returns an array of the AM/PM currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let ApInView = this.picker.ampmInView;\n     *}\n     *```\n     */\n    public ampmInView(): string[] {\n        return this._ampmView.filter((ampm) => ampm !== '');\n    }\n\n    /**\n     * @hidden\n     */\n    public hideOverlay(): void {\n        this.toggleRef.close();\n    }\n\n    /**\n     * @hidden\n     */\n    public parseMask(preserveAmPm = true): string {\n        const prompts = this.promptChar + this.promptChar;\n        const amPm = preserveAmPm ? 'AM' : prompts;\n\n        return this.format.indexOf('tt') !== -1 ? `${prompts}:${prompts} ${amPm}` : `${prompts}:${prompts}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public clear(): void {\n        if (this.toggleRef.collapsed) {\n            this.cleared = true;\n            this.isNotEmpty = false;\n\n            const oldVal = new Date(this.value);\n\n            this.displayValue = '';\n            this.value.setHours(0, 0);\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        } else {\n            this.hideOverlay();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInput(event): void {\n        const val = event.target.value;\n        const oldVal = new Date(this.value);\n\n        this.isNotEmpty = val !== this.parseMask(false);\n\n        // handle cases where all empty positions (promts) are filled and we want to update\n        // timepicker own value property if it is a valid Date\n        if (val.indexOf(this.promptChar) === -1) {\n            if (this._isEntryValid(val)) {\n                const newVal = this._convertMinMaxValue(val);\n                if (oldVal.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: val,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n            // handle cases where the user deletes the display value (when pressing backspace or delete)\n        } else if (!this.value || !val || val === this.parseMask(false)) {\n            this.isNotEmpty = false;\n\n            this.value.setHours(0, 0);\n            this.displayValue = val;\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onFocus(event): void {\n        this.isNotEmpty = event.target.value !== this.parseMask(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public onBlur(event): void {\n        const value = event.target.value;\n\n        this.isNotEmpty = value !== '';\n        this.displayValue = value;\n\n        if (value && value !== this.parseMask()) {\n            if (this._isEntryValid(value)) {\n                const newVal = this._convertMinMaxValue(value);\n                if (!this.value || this.value.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: value,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public spinOnEdit(event): void {\n        event.preventDefault();\n\n        let sign: number;\n        let displayVal: string;\n        const currentVal = new Date(this.value);\n        const min = this.minValue ? this._convertMinMaxValue(this.minValue) : this._convertMinMaxValue('00:00');\n        const max = this.maxValue ? this._convertMinMaxValue(this.maxValue) : this._convertMinMaxValue('24:00');\n\n        const cursor = this._getCursorPosition();\n\n        if (event.key) {\n            const key = event.key;\n            sign = key === KEYS.DOWN_ARROW || key === KEYS.DOWN_ARROW_IE ? -1 : 1;\n        }\n\n        if (event.deltaY) {\n            sign = event.deltaY < 0 ? 1 : -1;\n        }\n\n        if (!this.displayValue) {\n            this.value = min;\n            displayVal = this._formatTime(this.value, this.format);\n        } else {\n            const hDelta = this.itemsDelta.hours * 60 + (sign * this.value.getMinutes());\n            const mDelta = this.itemsDelta.minutes;\n            const sections = this.displayValue.split(/[\\s:]+/);\n\n            if (HOURS_POS.indexOf(cursor) !== -1) {\n                this.value = this._spinHours(currentVal, min, max, hDelta, sign);\n            }\n\n            if (MINUTES_POS.indexOf(cursor) !== -1) {\n                this.value = this._spinMinutes(currentVal, mDelta, sign);\n            }\n\n            if (AMPM_POS.indexOf(cursor) !== -1 && this.format.indexOf('tt') !== -1) {\n                sign = sections[2] && sections[2] === 'AM' ? 1 : -1;\n                currentVal.setHours(currentVal.getHours() + (sign * 12));\n\n                this.value = currentVal;\n            }\n\n            displayVal = this._formatTime(this.value, this.format);\n        }\n\n        // minor hack for preventing cursor jumping in IE\n        this._displayValue = this.inputFormat.transform(displayVal);\n        this.input.nativeElement.value = this._displayValue;\n        this._setCursorPosition(cursor);\n\n        requestAnimationFrame(() => {\n            this._setCursorPosition(cursor);\n        });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxTimePickerComponent,\n        IgxHourItemDirective,\n        IgxItemListDirective,\n        IgxMinuteItemDirective,\n        IgxAmPmItemDirective,\n        IgxTimePickerTemplateDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    exports: [\n        IgxTimePickerComponent,\n        IgxTimePickerTemplateDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    imports: [\n        CommonModule,\n        IgxInputGroupModule,\n        IgxIconModule,\n        IgxButtonModule,\n        IgxMaskModule,\n        IgxToggleModule\n    ],\n    providers: []\n})\nexport class IgxTimePickerModule { }\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Toast** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast.html)\n *\n * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot\n * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.\n *\n * Example:\n * ```html\n * <button (click)=\"toast.show()\">Show notification</button>\n * <igx-toast #toast\n *           message=\"Notification displayed\"\n *           displayTime=\"1000\">\n * </igx-toast>\n * ```\n */\n@Component({\n    animations: [\n        trigger('animate', [\n            state('show', style({\n                opacity: 1\n            })),\n            transition('* => show', animate('.20s ease')),\n            transition('show => *', animate('.40s ease-out'))\n        ])\n    ],\n    selector: 'igx-toast',\n    templateUrl: 'toast.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxToastComponent implements IToggleView, OnInit, OnDestroy {\n    /**\n     * Returns a list of available CSS classes.\n     * ```typescript\n     * let toastClasses =  this.toast.CSS_CLASSES;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public readonly CSS_CLASSES = {\n        IGX_TOAST_BOTTOM: 'igx-toast--bottom',\n        IGX_TOAST_MIDDLE: 'igx-toast--middle',\n        IGX_TOAST_TOP: 'igx-toast--top'\n    };\n\n    /**\n     * Sets/gets the `id` of the toast.\n     * If not set, the `id` will have value `\"igx-toast-0\"`.\n     * ```html\n     * <igx-toast id = \"my-first-toast\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastId = this.toast.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-toast-${NEXT_ID++}`;\n\n    /**\n     * Emits an event prior the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShowing) = \"onShowing($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShowing = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event when the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShown) = \"onShown($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShown = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event prior the toast is hidden.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHiding) = \"onHiding($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHiding = new EventEmitter<IgxToastComponent>();\n\n    /**\n     *  Emits an event when the toast is hidden.\n     *  Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHidden) = \"onHidden($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHidden = new EventEmitter<IgxToastComponent>();\n    /**\n     * Sets/gets the `role` attribute.\n     * If not set, `role` will have value `\"alert\"`.\n     * ```html\n     * <igx-toast [role] = \"'notify'\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastRole = this.toast.role;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public role = 'alert';\n    /**\n     * Sets/gets whether the toast will be hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-toast [autoHide] = \"false\"></igx-toast>\n     * ```\n     * ```typescript\n     * let autoHide = this.toast.autoHide;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time span(in milliseconds) which the toast will be visible\n     * after it is being shown.\n     * Default value is `4000`.\n     * ```html\n     * <igx-toast [displayTime] = \"2500\"></igx-toast>\n     * ```\n     * ```typescript\n     * let displayTime = this.toast.displayTime;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public displayTime = 4000;\n\n    /**\n     * Enables/Disables the visibility of the toast.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-toast [isVisible] = \"true\"></igx-toast>\n     * ```\n     * ```typescript\n     * let isVisible = this.toast.isVisible;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public isVisible = false;\n\n    /**\n     * Sets/gets the message that will be shown by the toast.\n     * ```html\n     * <igx-toast [message] = \"Notification\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastMessage = this.toast.message;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public message: string;\n\n    /**\n     * Sets/gets the position of the toast.\n     * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.\n     * ```html\n     * <igx-toast [position] = \"top\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastPosition = this.toast.position;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public position: IgxToastPosition = IgxToastPosition.Bottom;\n\n    /**\n     * Gets the nativeElement of the toast.\n     * ```typescript\n     * let nativeElement = this.toast.element;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService) { }\n\n    /**\n     * Shows the toast.\n     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.\n     * ```typescript\n     * this.toast.show();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public show(): void {\n        clearInterval(this.timeoutId);\n        this.onShowing.emit(this);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n\n        this.onShown.emit(this);\n    }\n\n    /**\n     * Hides the toast.\n     * ```typescript\n     * this.toast.hide();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public hide(): void {\n        this.onHiding.emit(this);\n        this.isVisible = false;\n        this.onHidden.emit(this);\n\n        clearInterval(this.timeoutId);\n    }\n\n    /**\n     * Wraps @show() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public open() {\n        this.show();\n    }\n\n    /**\n     * Wraps @hide() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public close() {\n        this.hide();\n    }\n\n    /**\n     * Toggles the visible state of the toast.\n     * ```typescript\n     * this.toast.toggle();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public toggle() {\n        this.isVisible ? this.close() : this.open();\n    }\n    /**\n     * Sets/gets the class name of the toast based on the `position` value.\n     * ```typescript\n     * let className =  this.toast.mapPositionToClassName();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public mapPositionToClassName(): any {\n        if (this.position === IgxToastPosition.Top) {\n            return this.CSS_CLASSES.IGX_TOAST_TOP;\n        }\n\n        if (this.position === IgxToastPosition.Middle) {\n            return this.CSS_CLASSES.IGX_TOAST_MIDDLE;\n        }\n\n        if (this.position === IgxToastPosition.Bottom) {\n            return this.CSS_CLASSES.IGX_TOAST_BOTTOM;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n    }\n}\n\n/**\n * Enumeration for toast position\n * Can be:\n * Bottom\n * Middle\n * Top\n */\nexport enum IgxToastPosition {\n    Bottom,\n    Middle,\n    Top\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToastComponent],\n    exports: [IgxToastComponent],\n    imports: [CommonModule]\n})\nexport class IgxToastModule { }\n","import { Component } from '@angular/core';\nimport { IgxDropDownGroupComponent } from '../drop-down/index';\n\n/**\n * The `<igx-select-item>` is a container intended for row items in\n * a `<igx-select>` container.\n */\n@Component({\n    selector: 'igx-select-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-select-item\"></ng-content>\n    `\n})\nexport class IgxSelectGroupComponent extends IgxDropDownGroupComponent {\n}\n","import { IgxDropDownItemComponent } from './../drop-down/drop-down-item.component';\nimport { Component, HostBinding, Input, DoCheck } from '@angular/core';\n\n@Component({\n    selector: 'igx-select-item',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxSelectItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    /** @hidden @internal */\n    public get itemText() {\n        return this.elementRef.nativeElement.innerText.trim();\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the select\n     *\n     * ```typescript\n     *  let mySelectedItem = this.select.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     */\n    public get selected() {\n        return !this.isHeader && !this.disabled && this.selection.is_item_selected(this.dropDown.id, this);\n    }\n\n    public set selected(value: any) {\n        if (value && !this.isHeader && !this.disabled) {\n            this.dropDown.selectItem(this);\n        }\n    }\n\n    /** @hidden @internal */\n    public isHeader: boolean;\n\n    ngDoCheck(): void {\n    }\n}\n","import { VerticalAlignment, HorizontalAlignment, PositionSettings, Size, Point, getViewportRect } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position/connected-positioning-strategy';\nimport { IPositionStrategy } from '../services/overlay/position';\nimport { fadeOut, fadeIn } from '../animations/main';\nimport { IgxSelectComponent } from './select.component';\nimport { isIE } from '../core/utils';\n\n/** @hidden */\nenum Direction {\n    Top = -1,\n    Bottom = 1,\n    None = 0\n}\n\n/** @hidden @internal */\nexport class SelectPositioningStrategy extends ConnectedPositioningStrategy implements IPositionStrategy {\n\n    private _selectDefaultSettings = {\n        target: null,\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Top,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut\n    };\n    public settings: PositionSettings;\n\n    constructor(public select: IgxSelectComponent, settings?: PositionSettings) {\n        super();\n        this.settings = Object.assign({}, this._selectDefaultSettings, settings);\n    }\n\n    private defaultWindowToListOffset = 5;\n    private viewPort = getViewportRect(document);\n    private deltaY: number;\n    private deltaX: number;\n    private itemTextPadding: number;\n    private itemTextIndent: number;\n    private inputBorderTop: number;\n    private listContainerBoundRect: DOMRect;\n\n    private positionAndScrollBottom(contentElement: HTMLElement, outBoundsAmount: number) {\n        contentElement.style.top = `${this.viewPort.bottom - this.listContainerBoundRect.height - this.defaultWindowToListOffset}px`;\n        contentElement.firstElementChild.scrollTop -= outBoundsAmount - (this.inputBorderTop - this.defaultWindowToListOffset);\n        this.deltaY = this.viewPort.bottom - this.listContainerBoundRect.height -\n            this.defaultWindowToListOffset - (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private positionNoScroll(contentElement: HTMLElement, CURRENT_POSITION_Y: number) {\n        contentElement.style.top = `${CURRENT_POSITION_Y - this.inputBorderTop}px`;\n        this.deltaY = CURRENT_POSITION_Y - this.inputBorderTop -\n            (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private positionAndScrollTop(contentElement: HTMLElement, outBoundsAmount: number) {\n        contentElement.style.top = `${this.viewPort.top + this.defaultWindowToListOffset}px`;\n        contentElement.firstElementChild.scrollTop += outBoundsAmount + this.inputBorderTop + this.defaultWindowToListOffset;\n        this.deltaY = this.viewPort.top + this.defaultWindowToListOffset -\n            (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private getItemsOutOfView(contentElement: HTMLElement, itemHeight: number): {\n        'currentScroll': number,\n        'remainingScroll': number\n    } {\n        if (contentElement.firstElementChild.scrollHeight <= contentElement.firstElementChild.clientHeight) {\n            return {\n                'currentScroll': 0,\n                'remainingScroll': 0\n            };\n        }\n        const currentScroll = contentElement.firstElementChild.scrollTop;\n        const remainingScroll = this.select.items.length * itemHeight - currentScroll - this.listContainerBoundRect.height;\n        return {\n            'currentScroll': currentScroll,\n            'remainingScroll': remainingScroll\n        };\n    }\n\n    private listOutOfBounds(elementContainer: { top: number, bottom: number }, document: Document): {\n        Direction: Direction,\n        Amount: number\n    } {\n        const container = {\n            TOP: elementContainer.top,\n            BOTTOM: elementContainer.bottom,\n        };\n        const viewPort = getViewportRect(document);\n        const documentElement = {\n            TOP: viewPort.top,\n            BOTTOM: viewPort.bottom\n        };\n        const returnVals = {\n            Direction: Direction.None,\n            Amount: 0\n        };\n        if (documentElement.TOP + this.defaultWindowToListOffset > container.TOP) {\n            returnVals.Direction = Direction.Top;\n            returnVals.Amount = documentElement.TOP - container.TOP;\n        } else if (documentElement.BOTTOM - this.defaultWindowToListOffset < container.BOTTOM) {\n            returnVals.Direction = Direction.Bottom;\n            returnVals.Amount = container.BOTTOM - documentElement.BOTTOM;\n        } else {\n            return null;\n        }\n        return returnVals;\n    }\n\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const inputElement = this.select.input.nativeElement;\n        const inputRect = inputElement.getBoundingClientRect() as DOMRect;\n        this.listContainerBoundRect = contentElement.getBoundingClientRect() as DOMRect;\n        const LIST_HEIGHT = this.listContainerBoundRect.height;\n        if (!initialCall) {\n            this.deltaX = inputRect.left - this.itemTextPadding - this.itemTextIndent;\n            const point = new Point(this.deltaX, inputRect.top + this.deltaY);\n            this.settings.target = point;\n            super.position(contentElement, size);\n            return;\n        }\n\n        const START = {\n            X: inputRect.left,\n            Y: inputRect.top\n        };\n\n        let itemElement;\n        if (this.select.selectedItem) {\n            itemElement = this.select.selectedItem.element.nativeElement;\n            // D.P. Feb 22 2019, #3921 Force item scroll before measuring in IE11, due to base scrollToItem delay\n            if (isIE()) {\n                contentElement.firstElementChild.scrollTop = this.select.calculateScrollPosition(this.select.selectedItem);\n            }\n        } else {\n            itemElement = this.select.getFirstItemElement();\n        }\n        const inputHeight = inputRect.height;\n        const itemBoundRect = itemElement.getBoundingClientRect() as DOMRect;\n        const itemTopListOffset = itemBoundRect.top - this.listContainerBoundRect.top;\n        const itemHeight = itemBoundRect.height;\n\n        let CURRENT_POSITION_Y = START.Y - itemTopListOffset;\n        const CURRENT_BOTTOM_Y = CURRENT_POSITION_Y + this.listContainerBoundRect.height;\n\n        const OUT_OF_BOUNDS: {\n            Direction: Direction,\n            Amount: number\n        } = this.listOutOfBounds({ top: CURRENT_POSITION_Y, bottom: CURRENT_BOTTOM_Y }, document);\n        if (OUT_OF_BOUNDS) {\n            if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                CURRENT_POSITION_Y = START.Y;\n            } else {\n                CURRENT_POSITION_Y = -1 * (LIST_HEIGHT - (itemHeight - (itemHeight - inputHeight) / 2));\n                CURRENT_POSITION_Y += START.Y;\n            }\n        }\n        const inputBorderTop = window.getComputedStyle(inputElement).borderTopWidth;\n        this.inputBorderTop = parseInt(inputBorderTop.slice(0, inputBorderTop.indexOf('p')), 10) || 0;\n        const itemLeftPadding = window.getComputedStyle(itemElement).paddingLeft;\n        const itemTextIndent = window.getComputedStyle(itemElement).textIndent;\n        const numericPadding = parseInt(itemLeftPadding.slice(0, itemLeftPadding.indexOf('p')), 10) || 0;\n        const numericTextIndent = parseInt(itemTextIndent.slice(0, itemTextIndent.indexOf('r')), 10) || 0;\n        this.itemTextPadding = numericPadding;\n        this.itemTextIndent = numericTextIndent;\n        contentElement.style.left += `${START.X - numericPadding - numericTextIndent}px`;\n        contentElement.style.width = inputRect.width + 24 + 32 + 'px';\n        this.deltaX = START.X - numericPadding - numericTextIndent;\n        const currentScroll = this.getItemsOutOfView(contentElement, itemHeight)['currentScroll'];\n        const remainingScroll = this.getItemsOutOfView(contentElement, itemHeight)['remainingScroll'];\n\n        // (5 items or less) no scroll and respectively no remaining scroll\n        if (remainingScroll === 0 && currentScroll === 0) {\n            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n        }\n        // (more than 5 items) there is scroll OR remaining scroll\n        if (remainingScroll !== 0 || currentScroll !== 0) {\n            if (remainingScroll !== 0 && !OUT_OF_BOUNDS) {\n                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n            }\n            // (more than 5 items) and container getting out of the visible port\n            if (remainingScroll !== 0 && OUT_OF_BOUNDS) {\n                // if there is enough remaining scroll to scroll the item\n                if (remainingScroll > itemHeight) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                        this.positionAndScrollTop(contentElement, OUT_OF_BOUNDS.Amount);\n                        return;\n                    }\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        // (more than 5 items) and no current scroll\n                        if (currentScroll === 0) {\n                            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n                            return;\n                        // (more than 5 items) and current scroll\n                        } else {\n                            this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                            return;\n                        }\n                    }\n                }\n                // if there is no enough remaining scroll to scroll the item\n                if (remainingScroll < itemHeight) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                        this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n\n                    }\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                    }\n                }\n            }\n            // (more than 5 items) and no remaining scroll\n            if (remainingScroll === 0 && currentScroll !== 0) {\n                if (OUT_OF_BOUNDS) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                        return;\n                    }\n                }\n                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n            }\n        }\n    }\n}\n","import { IgxInputDirective } from './../directives/input/input.directive';\nimport {\n    Component, ContentChildren, forwardRef, QueryList, ViewChild, Input, ContentChild,\n    AfterContentInit, HostBinding, Directive, TemplateRef, ElementRef, ChangeDetectorRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { IgxDropDownItemBase } from '../drop-down/index';\nimport { IgxInputGroupComponent } from '../input-group/input-group.component';\n\nimport { IgxDropDownComponent } from './../drop-down/drop-down.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { SelectPositioningStrategy } from './select-positioning-strategy';\n\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services/index';\nimport { IGX_DROPDOWN_BASE, ISelectionEventArgs, Navigate } from '../drop-down/drop-down.common';\nimport { CancelableEventArgs } from '../core/utils';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxSelectBase } from './select.common';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxSelectionAPIService } from '../core/selection';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectToggleIcon]'\n})\nexport class IgxSelectToggleIconDirective {\n}\n\nconst noop = () => { };\n\n/**\n * **Ignite UI for Angular Select** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/select.html)\n *\n * The `igxSelect` provides an input with dropdown list allowing selection of a single item.\n *\n * Example:\n * ```html\n * <igx-select #select1 [placeholder]=\"'Pick One'\">\n *   <label igxLabel>Select Label</label>\n *   <igx-select-item *ngFor=\"let item of items\" [value]=\"item.field\">\n *     {{ item.field }}\n *   </igx-select-item>\n * </igx-select>\n * ```\n */\n@Component({\n    selector: 'igx-select',\n    templateUrl: './select.component.html',\n    providers: [\n        { provide: NG_VALUE_ACCESSOR, useExisting: IgxSelectComponent, multi: true },\n        { provide: IGX_DROPDOWN_BASE, useExisting: IgxSelectComponent }],\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSelectComponent extends IgxDropDownComponent implements IgxSelectBase, ControlValueAccessor, AfterContentInit,\n    EditorProvider {\n\n    /** @hidden @internal do not use the drop-down container class */\n    public cssClass = false;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('input', { read: IgxInputDirective }) public input: IgxInputDirective;\n\n    /** @hidden @internal */\n    @ContentChildren(forwardRef(() => IgxSelectItemComponent), { descendants: true })\n    public children: QueryList<IgxSelectItemComponent>;\n\n    /** @hidden @internal */\n    @ContentChild(forwardRef(() => IgxLabelDirective)) label: IgxLabelDirective;\n\n    /** @hidden @internal */\n    public allowItemsFocus = false;\n\n    /** @hidden @internal */\n    public height: string;\n\n    private _overlayDefaults: OverlaySettings;\n\n    private _value: any;\n\n    /**\n     * An @Input property that gets/sets the component value.\n     *\n     * ```typescript\n     * // get\n     * let selectValue = this.select.value;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.select.value = 'London';\n     * ```\n     * ```html\n     * <igx-select [value]=\"value\"></igx-select>\n     * ```\n     */\n    @Input()\n    public get value(): any {\n        return this._value;\n    }\n    public set value(v: any) {\n        if (this._value === v) {\n            return;\n        }\n        this._value = v;\n        this.setSelection(this.items.find(x => x.value === this.value));\n        this.cdr.detectChanges();\n    }\n    /**\n     * An @Input property that sets input placeholder.\n     *\n     */\n    @Input() public placeholder = '';\n    /**\n     * An @Input property that disables the `IgxSelectComponent`.\n     * ```html\n     * <igx-select [disabled]=\"'true'\"></igx-select>\n     * ```\n     */\n    @Input() public disabled = false;\n\n    /**\n     * An @Input property that sets custom OverlaySettings `IgxSelectComponent`.\n     * ```html\n     * <igx-select [overlaySettings] = \"customOverlaySettings\"></igx-select>\n     * ```\n     */\n    @Input()\n    overlaySettings: OverlaySettings;\n\n    /** @hidden @internal */\n    @HostBinding('style.maxHeight')\n    public maxHeight = '256px';\n\n    /** @hidden @internal */\n    public width: string;\n\n    /**\n     * An @Input property that sets how the select will be styled.\n     * The allowed values are `line`, `box` and `border`. The default is `line`.\n     * ```html\n     *<igx-select [type]=\"'box'\"></igx-select>\n     * ```\n     */\n    @Input()\n    public type = 'line';\n\n    /**\n     * An @Input property that sets what display density to be used for the input group.\n     * The allowed values are `compact`, `cosy` and `comfortable`. The default is `comfortable`.\n     * ```html\n     *<igx-select [displayDensity]=\"'compact'\"></igx-select>\n     * ```\n     */\n    @Input()\n    public displayDensity = 'comfortable';\n\n    /**\n     * The custom template, if any, that should be used when rendering the select TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectToggleIconDirective, { read: TemplateRef })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /** @hidden @internal */\n    public get selectionValue() {\n        const selectedItem = this.selectedItem;\n        return selectedItem ? selectedItem.itemText : '';\n    }\n\n    /** @hidden @internal */\n    public get selectedItem(): IgxSelectItemComponent {\n        return this.selection.first_item(this.id);\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService) {\n        super(elementRef, cdr, selection);\n    }\n\n    /** @hidden @internal */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    /** @hidden @internal */\n    public writeValue = (value: any) => {\n        this.value = value;\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: any): void { }\n\n    /** @hidden @internal */\n    public getEditElement(): HTMLElement {\n        return this.input.nativeElement;\n    }\n\n    /** @hidden @internal */\n    public selectItem(newSelection: IgxDropDownItemBase, event?) {\n        const oldSelection = this.selectedItem;\n\n        if (event) {\n            this.toggleDirective.close();\n        }\n        if (newSelection === null || newSelection === oldSelection || newSelection.disabled || newSelection.isHeader) {\n            return;\n        }\n\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        this.setSelection(newSelection);\n        this._value = newSelection.value;\n        this.cdr.detectChanges();\n        this._onChangeCallback(this.value);\n    }\n\n    /** @hidden @internal */\n    public getFirstItemElement(): HTMLElement {\n        return this.children.first.element.nativeElement;\n    }\n\n    /**\n     * Opens the select\n     *\n     * ```typescript\n     * this.select.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        if (this.disabled || this.items.length === 0) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.navigateFirst();\n        }\n\n        super.open(Object.assign({}, this._overlayDefaults, this.overlaySettings, overlaySettings));\n    }\n\n    /** @hidden @internal */\n    ngAfterContentInit() {\n        this._overlayDefaults = {\n            modal: false,\n            closeOnOutsideClick: false,\n            positionStrategy: new SelectPositioningStrategy(this, { target: this.inputGroup.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            excludePositionTarget: true\n        };\n        this.children.changes.subscribe(() => {\n            this.setSelection(this.items.find(x => x.value === this.value));\n            this.cdr.detectChanges();\n        });\n        Promise.resolve().then(() => this.children.notifyOnChanges());\n    }\n\n    /** @hidden @internal */\n    public onToggleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.scrollToItem(this.selectedItem);\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        if (this.collapsed && this.selectedItem) {\n            this.navigateItem(this.selectedItem.itemIndex);\n        }\n        super.navigate(direction, currentIndex);\n    }\n\n    private setSelection(item: IgxDropDownItemBase) {\n        if (item && item.value !== undefined && item.value !== null) {\n            this.selection.set(this.id, new Set([item]));\n        } else {\n            this.selection.clear(this.id);\n        }\n    }\n\n    /** @hidden @internal */\n    public onBlur(): void {\n        if (!this.collapsed) {\n            this.toggleDirective.close();\n        }\n    }\n}\n\n","import { IgxDropDownItemNavigationDirective } from '../drop-down/drop-down-navigation.directive';\nimport { Directive, Input, HostListener, OnDestroy } from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectBase } from './select.common';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectItemNavigation]'\n})\nexport class IgxSelectItemNavigationDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    @Input('igxSelectItemNavigation')\n    public target: IgxSelectBase;\n\n    constructor() { super(null); }\n\n    /** Captures keydown events and calls the appropriate handlers on the target component */\n    handleKeyDown(event: KeyboardEvent) {\n        if (!event || event.shiftKey) {\n            return;\n        }\n\n        const key = event.key.toLowerCase();\n        if (event.altKey && (key === 'arrowdown' || key === 'arrowup' || key === 'down' || key === 'up')) {\n            this.target.toggle();\n            return;\n        }\n\n        if (this.target.collapsed) {\n            switch (key) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'enter':\n                    event.preventDefault();\n                    this.target.open();\n                    return;\n                case 'arrowdown':\n                case 'down':\n                    this.target.navigateNext();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                case 'arrowup':\n                case 'up':\n                    this.target.navigatePrev();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                default:\n                    break;\n            }\n        }\n\n        super.handleKeyDown(event);\n    }\n\n    // tslint:disable:member-ordering\n    private inputStream = '';\n    private clearStream$ = Subscription.EMPTY;\n\n    /** Handle continuous letter typing navigation */\n    @HostListener('keyup', ['$event'])\n    public captureKey(event: KeyboardEvent) {\n        // relying only on key, available on all major browsers:\n        // https://caniuse.com/#feat=keyboardevent-key (IE/Edge quirk doesn't affect letter typing)\n        if (!event || !event.key || event.key.length > 1) {\n            // ignore longer keys ('Alt', 'ArrowDown', etc)\n            return;\n        }\n\n        this.clearStream$.unsubscribe();\n        this.clearStream$ = timer(500).subscribe(() => {\n            this.inputStream = '';\n        });\n        this.inputStream += event.key;\n        const focusedItem = this.target.focusedItem as IgxSelectItemComponent;\n\n        // select the item\n        if (focusedItem && this.inputStream.length > 1 && focusedItem.itemText.toLowerCase().startsWith(this.inputStream.toLowerCase())) {\n            return;\n        }\n        this.activateItemByText(this.inputStream);\n    }\n\n    public activateItemByText(text: string) {\n        const items = this.target.items as IgxSelectItemComponent[];\n        const activeItemIndex = items.indexOf(this.target.focusedItem as IgxSelectItemComponent) || 0;\n        // ^ this is focused OR selected if the dd is closed\n        let nextItem = items.slice(activeItemIndex + 1).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n\n        if (!nextItem) {\n            nextItem = items.slice(0, activeItemIndex).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n        }\n\n        if (!nextItem) {\n            return;\n        }\n\n        if (this.target.collapsed) {\n            this.target.selectItem(nextItem);\n        }\n        this.target.navigateItem(items.indexOf(nextItem));\n    }\n\n    ngOnDestroy(): void {\n        this.clearStream$.unsubscribe();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxDropDownModule } from './../drop-down/index';\nimport { IgxToggleModule } from './../directives/toggle/toggle.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nimport { IgxSelectComponent, IgxSelectToggleIconDirective } from './select.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectItemNavigationDirective } from './select-navigation.directive';\nimport { IgxSelectGroupComponent } from './select-group.component';\n\n/** @hidden */\n@NgModule({\n    declarations: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n        IgxSelectToggleIconDirective, IgxSelectGroupComponent],\n    exports: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n         IgxSelectToggleIconDirective, IgxSelectGroupComponent],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxToggleModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: []\n})\nexport class IgxSelectModule { }\n"]}