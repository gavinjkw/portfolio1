/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const TransactionType = {
    ADD: 'add',
    DELETE: 'delete',
    UPDATE: 'update',
};
export { TransactionType };
/**
 * @record
 */
export function Transaction() { }
if (false) {
    /** @type {?} */
    Transaction.prototype.id;
    /** @type {?} */
    Transaction.prototype.type;
    /** @type {?} */
    Transaction.prototype.newValue;
}
/**
 * \@experimental
 * @hidden
 * @record
 */
export function HierarchicalTransaction() { }
if (false) {
    /** @type {?} */
    HierarchicalTransaction.prototype.path;
}
/**
 * @record
 */
export function State() { }
if (false) {
    /** @type {?} */
    State.prototype.value;
    /** @type {?} */
    State.prototype.recordRef;
    /** @type {?} */
    State.prototype.type;
}
/**
 * \@experimental
 * @hidden
 * @record
 */
export function HierarchicalState() { }
if (false) {
    /** @type {?} */
    HierarchicalState.prototype.path;
}
/**
 * @record
 * @template T, S
 */
export function TransactionService() { }
if (false) {
    /**
     * Returns whether transaction is enabled for this service
     * @type {?}
     */
    TransactionService.prototype.enabled;
    /**
     * Event fired when transaction state has changed - add transaction, commit all transactions, undo and redo
     * @type {?|undefined}
     */
    TransactionService.prototype.onStateUpdate;
    /**
     * \@return if there are any transactions in the Undo stack
     * @type {?}
     */
    TransactionService.prototype.canUndo;
    /**
     * \@return if there are any transactions in the Redo stack
     * @type {?}
     */
    TransactionService.prototype.canRedo;
    /**
     * Adds provided  transaction with recordRef if any
     * @param {?} transaction Transaction to be added
     * @param {?=} recordRef Reference to the value of the record in the data source related to the changed item
     * @return {?}
     */
    TransactionService.prototype.add = function (transaction, recordRef) { };
    /**
     * Returns all recorded transactions in chronological order
     * @param {?=} id Optional record id to get transactions for
     * @return {?} All transaction in the service or for the specified record
     */
    TransactionService.prototype.getTransactionLog = function (id) { };
    /**
     * Remove the last transaction if any
     * @return {?}
     */
    TransactionService.prototype.undo = function () { };
    /**
     * Applies the last undone transaction if any
     * @return {?}
     */
    TransactionService.prototype.redo = function () { };
    /**
     * Returns aggregated changes from all transactions
     * @param {?} mergeChanges If set to true will merge each state's value over relate recordRef
     * and will record resulting value in the related transaction
     * @return {?} Collection of aggregated transactions for each changed record
     */
    TransactionService.prototype.getAggregatedChanges = function (mergeChanges) { };
    /**
     * Returns the state of the record with provided id
     * @param {?} id The id of the record
     * @return {?} State of the record if any
     */
    TransactionService.prototype.getState = function (id) { };
    /**
     * Returns value of the required id including all uncommitted changes
     * @param {?} id The id of the record to return value for
     * @param {?} mergeChanges If set to true will merge state's value over relate recordRef
     * and will return merged value
     * @return {?} Value with changes or **null**
     */
    TransactionService.prototype.getAggregatedValue = function (id, mergeChanges) { };
    /**
     * Applies all transactions over the provided data
     * @param {?} data Data source to update
     * @return {?}
     */
    TransactionService.prototype.commit = function (data) { };
    /**
     * Clears all transactions
     * @return {?}
     */
    TransactionService.prototype.clear = function () { };
    /**
     * Starts pending transactions. All transactions passed after call to startPending
     * will not be added to transaction log
     * @return {?}
     */
    TransactionService.prototype.startPending = function () { };
    /**
     * Clears all pending transactions and aggregated pending state. If commit is set to true
     * commits pending states as single transaction
     * @param {?} commit Should commit the pending states
     * @return {?}
     */
    TransactionService.prototype.endPending = function (commit) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3RyYW5zYWN0aW9uL3RyYW5zYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztJQUdJLEtBQU0sS0FBSztJQUNYLFFBQVMsUUFBUTtJQUNqQixRQUFTLFFBQVE7Ozs7OztBQUdyQixpQ0FJQzs7O0lBSEcseUJBQVE7O0lBQ1IsMkJBQXNCOztJQUN0QiwrQkFBYzs7Ozs7OztBQU9sQiw2Q0FFQzs7O0lBREcsdUNBQVk7Ozs7O0FBR2hCLDJCQUlDOzs7SUFIRyxzQkFBVzs7SUFDWCwwQkFBZTs7SUFDZixxQkFBc0I7Ozs7Ozs7QUFPMUIsdUNBRUM7OztJQURHLGlDQUFZOzs7Ozs7QUFHaEIsd0NBNEZDOzs7Ozs7SUF4RkcscUNBQTBCOzs7OztJQUsxQiwyQ0FBbUM7Ozs7O0lBS25DLHFDQUFpQjs7Ozs7SUFLakIscUNBQWlCOzs7Ozs7O0lBT2pCLHlFQUEyQzs7Ozs7O0lBTzNDLG1FQUFpQzs7Ozs7SUFLakMsb0RBQWE7Ozs7O0lBS2Isb0RBQWE7Ozs7Ozs7SUFRYixnRkFBaUQ7Ozs7OztJQU9qRCwwREFBcUI7Ozs7Ozs7O0lBU3JCLGtGQUF3RDs7Ozs7O0lBTXhELDBEQUEwQjs7Ozs7SUFLMUIscURBQWM7Ozs7OztJQU1kLDREQUFxQjs7Ozs7OztJQU9yQixnRUFBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGVudW0gVHJhbnNhY3Rpb25UeXBlIHtcbiAgICBBREQgPSAnYWRkJyxcbiAgICBERUxFVEUgPSAnZGVsZXRlJyxcbiAgICBVUERBVEUgPSAndXBkYXRlJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uIHtcbiAgICBpZDogYW55O1xuICAgIHR5cGU6IFRyYW5zYWN0aW9uVHlwZTtcbiAgICBuZXdWYWx1ZTogYW55O1xufVxuXG4vKipcbiAqIEBleHBlcmltZW50YWxcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIaWVyYXJjaGljYWxUcmFuc2FjdGlvbiBleHRlbmRzIFRyYW5zYWN0aW9uIHtcbiAgICBwYXRoOiBhbnlbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZSB7XG4gICAgdmFsdWU6IGFueTtcbiAgICByZWNvcmRSZWY6IGFueTtcbiAgICB0eXBlOiBUcmFuc2FjdGlvblR5cGU7XG59XG5cbi8qKlxuICogQGV4cGVyaW1lbnRhbFxuICogQGhpZGRlblxuICovXG5leHBvcnQgaW50ZXJmYWNlIEhpZXJhcmNoaWNhbFN0YXRlIGV4dGVuZHMgU3RhdGUge1xuICAgIHBhdGg6IGFueVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uU2VydmljZTxUIGV4dGVuZHMgVHJhbnNhY3Rpb24sIFMgZXh0ZW5kcyBTdGF0ZT4ge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0cmFuc2FjdGlvbiBpcyBlbmFibGVkIGZvciB0aGlzIHNlcnZpY2VcbiAgICAgKi9cbiAgICByZWFkb25seSBlbmFibGVkOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogRXZlbnQgZmlyZWQgd2hlbiB0cmFuc2FjdGlvbiBzdGF0ZSBoYXMgY2hhbmdlZCAtIGFkZCB0cmFuc2FjdGlvbiwgY29tbWl0IGFsbCB0cmFuc2FjdGlvbnMsIHVuZG8gYW5kIHJlZG9cbiAgICAgKi9cbiAgICBvblN0YXRlVXBkYXRlPzogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgaWYgdGhlcmUgYXJlIGFueSB0cmFuc2FjdGlvbnMgaW4gdGhlIFVuZG8gc3RhY2tcbiAgICAgKi9cbiAgICBjYW5VbmRvOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgaWYgdGhlcmUgYXJlIGFueSB0cmFuc2FjdGlvbnMgaW4gdGhlIFJlZG8gc3RhY2tcbiAgICAgKi9cbiAgICBjYW5SZWRvOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBwcm92aWRlZCAgdHJhbnNhY3Rpb24gd2l0aCByZWNvcmRSZWYgaWYgYW55XG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uIFRyYW5zYWN0aW9uIHRvIGJlIGFkZGVkXG4gICAgICogQHBhcmFtIHJlY29yZFJlZiBSZWZlcmVuY2UgdG8gdGhlIHZhbHVlIG9mIHRoZSByZWNvcmQgaW4gdGhlIGRhdGEgc291cmNlIHJlbGF0ZWQgdG8gdGhlIGNoYW5nZWQgaXRlbVxuICAgICAqL1xuICAgIGFkZCh0cmFuc2FjdGlvbjogVCwgcmVjb3JkUmVmPzogYW55KTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIHJlY29yZGVkIHRyYW5zYWN0aW9ucyBpbiBjaHJvbm9sb2dpY2FsIG9yZGVyXG4gICAgICogQHBhcmFtIGlkIE9wdGlvbmFsIHJlY29yZCBpZCB0byBnZXQgdHJhbnNhY3Rpb25zIGZvclxuICAgICAqIEByZXR1cm5zIEFsbCB0cmFuc2FjdGlvbiBpbiB0aGUgc2VydmljZSBvciBmb3IgdGhlIHNwZWNpZmllZCByZWNvcmRcbiAgICAgKi9cbiAgICBnZXRUcmFuc2FjdGlvbkxvZyhpZD86IGFueSk6IFRbXTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgbGFzdCB0cmFuc2FjdGlvbiBpZiBhbnlcbiAgICAgKi9cbiAgICB1bmRvKCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSBsYXN0IHVuZG9uZSB0cmFuc2FjdGlvbiBpZiBhbnlcbiAgICAgKi9cbiAgICByZWRvKCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFnZ3JlZ2F0ZWQgY2hhbmdlcyBmcm9tIGFsbCB0cmFuc2FjdGlvbnNcbiAgICAgKiBAcGFyYW0gbWVyZ2VDaGFuZ2VzIElmIHNldCB0byB0cnVlIHdpbGwgbWVyZ2UgZWFjaCBzdGF0ZSdzIHZhbHVlIG92ZXIgcmVsYXRlIHJlY29yZFJlZlxuICAgICAqIGFuZCB3aWxsIHJlY29yZCByZXN1bHRpbmcgdmFsdWUgaW4gdGhlIHJlbGF0ZWQgdHJhbnNhY3Rpb25cbiAgICAgKiBAcmV0dXJucyBDb2xsZWN0aW9uIG9mIGFnZ3JlZ2F0ZWQgdHJhbnNhY3Rpb25zIGZvciBlYWNoIGNoYW5nZWQgcmVjb3JkXG4gICAgICovXG4gICAgZ2V0QWdncmVnYXRlZENoYW5nZXMobWVyZ2VDaGFuZ2VzOiBib29sZWFuKTogVFtdO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3RhdGUgb2YgdGhlIHJlY29yZCB3aXRoIHByb3ZpZGVkIGlkXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgcmVjb3JkXG4gICAgICogQHJldHVybnMgU3RhdGUgb2YgdGhlIHJlY29yZCBpZiBhbnlcbiAgICAgKi9cbiAgICBnZXRTdGF0ZShpZDogYW55KTogUztcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdmFsdWUgb2YgdGhlIHJlcXVpcmVkIGlkIGluY2x1ZGluZyBhbGwgdW5jb21taXR0ZWQgY2hhbmdlc1xuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIHJlY29yZCB0byByZXR1cm4gdmFsdWUgZm9yXG4gICAgICogQHBhcmFtIG1lcmdlQ2hhbmdlcyBJZiBzZXQgdG8gdHJ1ZSB3aWxsIG1lcmdlIHN0YXRlJ3MgdmFsdWUgb3ZlciByZWxhdGUgcmVjb3JkUmVmXG4gICAgICogYW5kIHdpbGwgcmV0dXJuIG1lcmdlZCB2YWx1ZVxuICAgICAqIEByZXR1cm5zIFZhbHVlIHdpdGggY2hhbmdlcyBvciAqKm51bGwqKlxuICAgICAqL1xuICAgIGdldEFnZ3JlZ2F0ZWRWYWx1ZShpZDogYW55LCBtZXJnZUNoYW5nZXM6IGJvb2xlYW4pOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGFsbCB0cmFuc2FjdGlvbnMgb3ZlciB0aGUgcHJvdmlkZWQgZGF0YVxuICAgICAqIEBwYXJhbSBkYXRhIERhdGEgc291cmNlIHRvIHVwZGF0ZVxuICAgICAqL1xuICAgIGNvbW1pdChkYXRhOiBhbnlbXSk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIHRyYW5zYWN0aW9uc1xuICAgICAqL1xuICAgIGNsZWFyKCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBTdGFydHMgcGVuZGluZyB0cmFuc2FjdGlvbnMuIEFsbCB0cmFuc2FjdGlvbnMgcGFzc2VkIGFmdGVyIGNhbGwgdG8gc3RhcnRQZW5kaW5nXG4gICAgICogd2lsbCBub3QgYmUgYWRkZWQgdG8gdHJhbnNhY3Rpb24gbG9nXG4gICAgICovXG4gICAgc3RhcnRQZW5kaW5nKCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIHBlbmRpbmcgdHJhbnNhY3Rpb25zIGFuZCBhZ2dyZWdhdGVkIHBlbmRpbmcgc3RhdGUuIElmIGNvbW1pdCBpcyBzZXQgdG8gdHJ1ZVxuICAgICAqIGNvbW1pdHMgcGVuZGluZyBzdGF0ZXMgYXMgc2luZ2xlIHRyYW5zYWN0aW9uXG4gICAgICogQHBhcmFtIGNvbW1pdCBTaG91bGQgY29tbWl0IHRoZSBwZW5kaW5nIHN0YXRlc1xuICAgICAqL1xuICAgIGVuZFBlbmRpbmcoY29tbWl0OiBib29sZWFuKTogdm9pZDtcbn1cbiJdfQ==