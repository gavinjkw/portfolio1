/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { cloneValue } from '../../core/utils';
/** @enum {number} */
const HorizontalAlignment = {
    Left: -1,
    Center: -0.5,
    Right: 0,
};
export { HorizontalAlignment };
HorizontalAlignment[HorizontalAlignment.Left] = 'Left';
HorizontalAlignment[HorizontalAlignment.Center] = 'Center';
HorizontalAlignment[HorizontalAlignment.Right] = 'Right';
/** @enum {number} */
const VerticalAlignment = {
    Top: -1,
    Middle: -0.5,
    Bottom: 0,
};
export { VerticalAlignment };
VerticalAlignment[VerticalAlignment.Top] = 'Top';
VerticalAlignment[VerticalAlignment.Middle] = 'Middle';
VerticalAlignment[VerticalAlignment.Bottom] = 'Bottom';
export class Point {
    /**
     * @param {?} x
     * @param {?} y
     */
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
if (false) {
    /** @type {?} */
    Point.prototype.x;
    /** @type {?} */
    Point.prototype.y;
}
/**
 * @record
 */
export function PositionSettings() { }
if (false) {
    /**
     * Attaching target for the component to show
     * @type {?|undefined}
     */
    PositionSettings.prototype.target;
    /**
     * Direction in which the component should show
     * @type {?|undefined}
     */
    PositionSettings.prototype.horizontalDirection;
    /**
     * Direction in which the component should show
     * @type {?|undefined}
     */
    PositionSettings.prototype.verticalDirection;
    /**
     * Target's starting point
     * @type {?|undefined}
     */
    PositionSettings.prototype.horizontalStartPoint;
    /**
     * Target's starting point
     * @type {?|undefined}
     */
    PositionSettings.prototype.verticalStartPoint;
    /**
     * Animation applied while overlay opens
     * @type {?|undefined}
     */
    PositionSettings.prototype.openAnimation;
    /**
     * Animation applied while overlay closes
     * @type {?|undefined}
     */
    PositionSettings.prototype.closeAnimation;
    /**
     * The size up to which element may shrink when shown in elastic position strategy
     * @type {?|undefined}
     */
    PositionSettings.prototype.minSize;
}
/**
 * @record
 */
export function OverlaySettings() { }
if (false) {
    /**
     * Position strategy to use with this settings
     * @type {?|undefined}
     */
    OverlaySettings.prototype.positionStrategy;
    /**
     * Scroll strategy to use with this settings
     * @type {?|undefined}
     */
    OverlaySettings.prototype.scrollStrategy;
    /**
     * Set if the overlay should be in modal mode
     * @type {?|undefined}
     */
    OverlaySettings.prototype.modal;
    /**
     * Set if the overlay should closed on outside click
     * @type {?|undefined}
     */
    OverlaySettings.prototype.closeOnOutsideClick;
    /**
     * Set the outlet container to attach the overlay to
     * @type {?|undefined}
     */
    OverlaySettings.prototype.outlet;
    /**
     * @hidden \@internal
     * Exclude the position strategy target for outside clicks
     * @type {?|undefined}
     */
    OverlaySettings.prototype.excludePositionTarget;
}
/**
 * @record
 */
export function OverlayEventArgs() { }
if (false) {
    /**
     * Id of the overlay generated with `attach()` method
     * @type {?}
     */
    OverlayEventArgs.prototype.id;
    /**
     * Available when `Type<T>` is provided to the `attach()` method and allows access to the created Component instance
     * @type {?|undefined}
     */
    OverlayEventArgs.prototype.componentRef;
}
/**
 * @record
 */
export function OverlayCancelableEventArgs() { }
/**
 * @record
 */
export function OverlayClosingEventArgs() { }
/**
 * @record
 */
export function OverlayAnimationEventArgs() { }
if (false) {
    /**
     * Id of the overlay generated with `attach()` method
     * @type {?}
     */
    OverlayAnimationEventArgs.prototype.id;
    /**
     * Animation player that will play the animation
     * @type {?}
     */
    OverlayAnimationEventArgs.prototype.animationPlayer;
    /**
     * Type of animation to be played. It should be either 'open' or 'close'
     * @type {?}
     */
    OverlayAnimationEventArgs.prototype.animationType;
}
/**
 * @record
 */
export function Size() { }
if (false) {
    /**
     * Gets or sets the horizontal component of Size
     * @type {?}
     */
    Size.prototype.width;
    /**
     * Gets or sets the vertical component of Size
     * @type {?}
     */
    Size.prototype.height;
}
/**
 * @hidden
 * Calculates the rectangle of target for provided overlay settings. Defaults to 0,0,0,0 rectangle
 * if no target is provided
 * @param {?} settings Overlay settings for which to calculate target rectangle
 * @return {?}
 */
export function getTargetRect(settings) {
    /** @type {?} */
    let targetRect = {
        bottom: 0,
        height: 0,
        left: 0,
        right: 0,
        top: 0,
        width: 0
    };
    if (settings.target instanceof HTMLElement) {
        targetRect = ((/** @type {?} */ (settings.target))).getBoundingClientRect();
    }
    else if (settings.target instanceof Point) {
        /** @type {?} */
        const targetPoint = (/** @type {?} */ (settings.target));
        targetRect = {
            bottom: targetPoint.y,
            height: 0,
            left: targetPoint.x,
            right: targetPoint.x,
            top: targetPoint.y,
            width: 0
        };
    }
    return targetRect;
}
/**
 * @hidden
 * @record
 */
export function OverlayInfo() { }
if (false) {
    /** @type {?|undefined} */
    OverlayInfo.prototype.id;
    /** @type {?|undefined} */
    OverlayInfo.prototype.elementRef;
    /** @type {?|undefined} */
    OverlayInfo.prototype.componentRef;
    /** @type {?|undefined} */
    OverlayInfo.prototype.settings;
    /** @type {?|undefined} */
    OverlayInfo.prototype.initialSize;
    /** @type {?|undefined} */
    OverlayInfo.prototype.hook;
    /** @type {?|undefined} */
    OverlayInfo.prototype.openAnimationPlayer;
    /** @type {?|undefined} */
    OverlayInfo.prototype.closeAnimationPlayer;
    /** @type {?|undefined} */
    OverlayInfo.prototype.openAnimationInnerPlayer;
    /** @type {?|undefined} */
    OverlayInfo.prototype.closeAnimationInnerPlayer;
    /** @type {?} */
    OverlayInfo.prototype.ngZone;
}
/**
 * @hidden \@internal
 * @param {?} document
 * @return {?}
 */
export function getViewportRect(document) {
    /** @type {?} */
    const width = document.documentElement.clientWidth;
    /** @type {?} */
    const height = document.documentElement.clientHeight;
    /** @type {?} */
    const scrollPosition = getViewportScrollPosition();
    return {
        top: scrollPosition.y,
        left: scrollPosition.x,
        right: scrollPosition.x + width,
        bottom: scrollPosition.y + height,
        width: width,
        height: height,
    };
}
/**
 * @hidden \@internal
 * @return {?}
 */
export function getViewportScrollPosition() {
    /** @type {?} */
    const documentElement = document.documentElement;
    /** @type {?} */
    const documentRect = documentElement.getBoundingClientRect();
    /** @type {?} */
    const horizontalScrollPosition = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;
    /** @type {?} */
    const verticalScrollPosition = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;
    return new Point(horizontalScrollPosition, verticalScrollPosition);
}
/**
 * @hidden \@internal
 * @param {?} object
 * @return {?}
 */
export function cloneInstance(object) {
    /** @type {?} */
    const clonedObj = Object.assign(Object.create(Object.getPrototypeOf(object)), object);
    clonedObj.settings = cloneValue(clonedObj.settings);
    return clonedObj;
}
//# sourceMappingURL=data:application/json;base64,