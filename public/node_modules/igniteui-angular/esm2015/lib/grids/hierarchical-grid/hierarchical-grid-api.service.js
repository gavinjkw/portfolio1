/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
import { GridBaseAPIService } from '../grid';
export class IgxHierarchicalGridAPIService extends GridBaseAPIService {
    constructor() {
        super(...arguments);
        this.childRowIslands = new Map();
        this.childGrids = new Map();
    }
    /**
     * @param {?} rowIsland
     * @return {?}
     */
    registerChildRowIsland(rowIsland) {
        this.childRowIslands.set(rowIsland.key, rowIsland);
        this.destroyMap.set(rowIsland.key, new Subject());
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getChildRowIsland(key) {
        return this.childRowIslands.get(key);
    }
    /**
     * @param {?} path
     * @return {?}
     */
    getChildGrid(path) {
        /** @type {?} */
        const currPath = path;
        /** @type {?} */
        let grid;
        /** @type {?} */
        const pathElem = currPath.shift();
        /** @type {?} */
        const childrenForLayout = this.childGrids.get(pathElem.rowIslandKey);
        if (childrenForLayout) {
            /** @type {?} */
            const childGrid = childrenForLayout.get(pathElem.rowID);
            if (currPath.length === 0) {
                grid = childGrid;
            }
            else {
                grid = childGrid.hgridAPI.getChildGrid(currPath);
            }
        }
        return grid;
    }
    /**
     * @param {?=} inDepth
     * @return {?}
     */
    getChildGrids(inDepth) {
        /** @type {?} */
        const allChildren = [];
        this.childGrids.forEach((layoutMap) => {
            layoutMap.forEach((grid) => {
                allChildren.push(grid);
                if (inDepth) {
                    /** @type {?} */
                    const children = grid.hgridAPI.getChildGrids(inDepth);
                    children.forEach((item) => {
                        allChildren.push(item);
                    });
                }
            });
        });
        return allChildren;
    }
    /**
     * @param {?} childGrid
     * @return {?}
     */
    getParentRowId(childGrid) {
        /** @type {?} */
        let rowID;
        this.childGrids.forEach((layoutMap) => {
            layoutMap.forEach((grid, key) => {
                if (grid === childGrid) {
                    rowID = key;
                    return;
                }
            });
        });
        return rowID;
    }
    /**
     * @param {?} parentRowID
     * @param {?} rowIslandKey
     * @param {?} grid
     * @return {?}
     */
    registerChildGrid(parentRowID, rowIslandKey, grid) {
        /** @type {?} */
        let childrenForLayout = this.childGrids.get(rowIslandKey);
        if (!childrenForLayout) {
            this.childGrids.set(rowIslandKey, new Map());
            childrenForLayout = this.childGrids.get(rowIslandKey);
        }
        childrenForLayout.set(parentRowID, grid);
    }
    /**
     * @param {?} rowIslandKey
     * @return {?}
     */
    getChildGridsForRowIsland(rowIslandKey) {
        /** @type {?} */
        const childrenForLayout = this.childGrids.get(rowIslandKey);
        /** @type {?} */
        const children = [];
        if (childrenForLayout) {
            childrenForLayout.forEach((child) => {
                children.push(child);
            });
        }
        return children;
    }
    /**
     * @param {?} rowIslandKey
     * @param {?} rowID
     * @return {?}
     */
    getChildGridByID(rowIslandKey, rowID) {
        /** @type {?} */
        const childrenForLayout = this.childGrids.get(rowIslandKey);
        return childrenForLayout.get(rowID);
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    IgxHierarchicalGridAPIService.prototype.childRowIslands;
    /**
     * @type {?}
     * @protected
     */
    IgxHierarchicalGridAPIService.prototype.childGrids;
}
//# sourceMappingURL=data:application/json;base64,