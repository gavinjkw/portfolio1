/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy, ElementRef } from '@angular/core';
import { IgxColumnComponent } from '../column.component';
import { IgxGridSelectionService } from '../../core/grid-selection';
import { SUPPORTED_KEYS } from '../../core/utils';
export class IgxSummaryCellComponent {
    /**
     * @param {?} element
     * @param {?} selectionService
     */
    constructor(element, selectionService) {
        this.element = element;
        this.selectionService = selectionService;
        this.firstCellIndentation = 0;
        this.hasSummary = false;
        this.tabindex = 0;
    }
    /**
     * @return {?}
     */
    get visibleColumnIndex() {
        return this.column.visibleIndex;
    }
    /**
     * @return {?}
     */
    get describeby() {
        return `Summary_${this.column.field}`;
    }
    /**
     * @return {?}
     */
    onFocus() {
        this.focused = true;
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.focused = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dispatchEvent(event) {
        // TODO: Refactor
        /** @type {?} */
        const key = event.key.toLowerCase();
        /** @type {?} */
        const ctrl = event.ctrlKey;
        /** @type {?} */
        const shift = event.shiftKey;
        if (!SUPPORTED_KEYS.has(key)) {
            return;
        }
        event.stopPropagation();
        /** @type {?} */
        const args = { targetType: 'summaryCell', target: this, event: event, cancel: false };
        this.grid.onGridKeydown.emit(args);
        if (args.cancel) {
            return;
        }
        event.preventDefault();
        if (!this.isKeySupportedInCell(key, ctrl)) {
            return;
        }
        this.selectionService.keyboardState.shift = shift && !(key === 'tab');
        /** @type {?} */
        const row = this.getRowElementByIndex(this.rowIndex);
        switch (key) {
            case 'tab':
                if (shift) {
                    this.grid.navigation.performShiftTabKey(row, this.rowIndex, this.visibleColumnIndex, true);
                    break;
                }
                this.grid.navigation.performTab(row, this.rowIndex, this.visibleColumnIndex, true);
                break;
            case 'arrowleft':
            case 'home':
            case 'left':
                if (ctrl || key === 'home') {
                    this.grid.navigation.onKeydownHome(this.rowIndex, true);
                    break;
                }
                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.rowIndex, this.visibleColumnIndex, true);
                break;
            case 'end':
            case 'arrowright':
            case 'right':
                if (ctrl || key === 'end') {
                    this.grid.navigation.onKeydownEnd(this.rowIndex, true);
                    break;
                }
                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.rowIndex, this.visibleColumnIndex, true);
                break;
            case 'arrowup':
            case 'up':
                this.grid.navigation.navigateUp(row, this.rowIndex, this.visibleColumnIndex);
                break;
            case 'arrowdown':
            case 'down':
                this.grid.navigation.navigateDown(row, this.rowIndex, this.visibleColumnIndex);
                break;
        }
    }
    /**
     * @return {?}
     */
    get width() {
        return this.column.getCellWidth();
    }
    /**
     * @return {?}
     */
    get nativeElement() {
        return this.element.nativeElement;
    }
    /**
     * @return {?}
     */
    get columnDatatype() {
        return this.column.dataType;
    }
    /**
     * @return {?}
     */
    get itemHeight() {
        return this.column.grid.defaultSummaryHeight;
    }
    /**
     * @hidden
     * @return {?}
     */
    get grid() {
        return ((/** @type {?} */ (this.column.grid)));
    }
    /**
     * @private
     * @param {?} rowIndex
     * @return {?}
     */
    getRowElementByIndex(rowIndex) {
        /** @type {?} */
        const summaryRows = this.grid.summariesRowList.toArray();
        return summaryRows.find((sr) => sr.dataRowIndex === rowIndex).nativeElement;
    }
    /**
     * @private
     * @param {?} key
     * @param {?} ctrl
     * @return {?}
     */
    isKeySupportedInCell(key, ctrl) {
        if (ctrl) {
            return ['arrowup', 'arrowdown', 'up', 'down', 'end', 'home'].indexOf(key) === -1;
        }
        return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright', 'home', 'end', 'tab'].indexOf(key) !== -1;
    }
    /**
     * @param {?} summary
     * @return {?}
     */
    translateSummary(summary) {
        return this.grid.resourceStrings[`igx_grid_summary_${summary.key}`] || summary.label;
    }
}
IgxSummaryCellComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                selector: 'igx-grid-summary-cell',
                template: "<ng-container *ngIf=\"hasSummary\">\n    <ng-container *ngFor=\"let summary of summaryResults\">\n            <div class=\"igx-grid-summary__item\" [style.height.px]=\"itemHeight\">\n\n                <ng-container *ngIf=\"visibleColumnIndex === 0 && firstCellIndentation >= 0\">\n                    <div class=\"igx-grid__tree-cell--padding-level-{{firstCellIndentation}}\"></div>\n\n                    <div #indicator class=\"igx-grid__tree-grouping-indicator\" style=\"visibility: hidden\">\n                        <igx-icon fontSet=\"material\">chevron_right</igx-icon>\n                    </div>\n                </ng-container>\n\n                <span class=\"igx-grid-summary__label\" title=\"{{ summary.label }}\">{{ translateSummary(summary) }}</span>\n                <span class=\"igx-grid-summary__result\" title=\"{{ summary.summaryResult }}\">\n                    {{ columnDatatype === 'number' ? (summary.summaryResult | igxdecimal: grid.locale) : columnDatatype === 'date' ? (summary.summaryResult | igxdate: grid.locale) : (summary.summaryResult) }}\n                </span>\n            </div>\n    </ng-container>\n</ng-container>\n"
            }] }
];
/** @nocollapse */
IgxSummaryCellComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: IgxGridSelectionService }
];
IgxSummaryCellComponent.propDecorators = {
    summaryResults: [{ type: Input }],
    column: [{ type: Input }],
    firstCellIndentation: [{ type: Input }],
    hasSummary: [{ type: Input }],
    density: [{ type: Input }],
    rowIndex: [{ type: Input }, { type: HostBinding, args: ['attr.data-rowIndex',] }],
    visibleColumnIndex: [{ type: HostBinding, args: ['attr.data-visibleIndex',] }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    describeby: [{ type: HostBinding, args: ['attr.aria-describedby',] }],
    focused: [{ type: HostBinding, args: ['class.igx-grid-summary--active',] }],
    onFocus: [{ type: HostListener, args: ['focus',] }],
    onBlur: [{ type: HostListener, args: ['blur',] }],
    dispatchEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    width: [{ type: HostBinding, args: ['style.min-width',] }, { type: HostBinding, args: ['style.max-width',] }, { type: HostBinding, args: ['style.flex-basis',] }]
};
if (false) {
    /** @type {?} */
    IgxSummaryCellComponent.prototype.summaryResults;
    /** @type {?} */
    IgxSummaryCellComponent.prototype.column;
    /** @type {?} */
    IgxSummaryCellComponent.prototype.firstCellIndentation;
    /** @type {?} */
    IgxSummaryCellComponent.prototype.hasSummary;
    /** @type {?} */
    IgxSummaryCellComponent.prototype.density;
    /** @type {?} */
    IgxSummaryCellComponent.prototype.rowIndex;
    /** @type {?} */
    IgxSummaryCellComponent.prototype.tabindex;
    /** @type {?} */
    IgxSummaryCellComponent.prototype.focused;
    /**
     * @type {?}
     * @private
     */
    IgxSummaryCellComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    IgxSummaryCellComponent.prototype.selectionService;
}
//# sourceMappingURL=data:application/json;base64,