/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DOCUMENT, DatePipe, DecimalPipe } from '@angular/common';
import { ChangeDetectorRef, Directive, ElementRef, Inject, Injectable, Input, NgZone, Output, Pipe, Renderer2, TemplateRef, LOCALE_ID, HostListener } from '@angular/core';
import { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';
import { map, switchMap, takeUntil, throttle, debounceTime } from 'rxjs/operators';
import { IgxColumnComponent } from './column.component';
import { IgxDragDirective, IgxDropDirective } from '../directives/dragdrop/dragdrop.directive';
import { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';
import { ConnectedPositioningStrategy } from '../services';
import { VerticalAlignment } from '../services/overlay/utilities';
import { scaleInVerBottom, scaleInVerTop } from '../animations/main';
import { IgxColumnResizingService } from './grid-column-resizing.service';
import { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';
import * as i0 from "@angular/core";
/** @type {?} */
const DEFAULT_DATE_FORMAT = 'mediumDate';
/** @type {?} */
const DEBOUNCE_TIME = 200;
/**
 * @hidden
 */
export class IgxResizeHandleDirective {
    /**
     * @param {?} zone
     * @param {?} element
     * @param {?} colResizingService
     */
    constructor(zone, element, colResizingService) {
        this.zone = zone;
        this.element = element;
        this.colResizingService = colResizingService;
        /**
         * @hidden
         */
        this._dblClick = false;
        /**
         * @hidden
         */
        this.destroy$ = new Subject();
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.column.columnGroup && this.column.resizable) {
            this.zone.runOutsideAngular(() => {
                fromEvent(this.element.nativeElement, 'mousedown').pipe(debounceTime(DEBOUNCE_TIME), takeUntil(this.destroy$)).subscribe((event) => {
                    if (this._dblClick) {
                        this._dblClick = false;
                        return;
                    }
                    if (event.button === 0) {
                        this._onResizeAreaMouseDown(event);
                        this.column.grid.resizeLine.resizer.onMousedown(event);
                    }
                });
            });
            fromEvent(this.element.nativeElement, 'mouseup').pipe(debounceTime(DEBOUNCE_TIME), takeUntil(this.destroy$)).subscribe(() => {
                this.colResizingService.showResizer = false;
                this.column.grid.cdr.detectChanges();
            });
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    onMouseOver() {
        this.colResizingService.resizeCursor = 'col-resize';
    }
    /**
     * @hidden
     * @return {?}
     */
    onDoubleClick() {
        this._dblClick = true;
        this.colResizingService.column = this.column;
        this.colResizingService.autosizeColumnOnDblClick();
    }
    /**
     * @hidden
     * @private
     * @param {?} event
     * @return {?}
     */
    _onResizeAreaMouseDown(event) {
        this.colResizingService.column = this.column;
        this.colResizingService.isColumnResizing = true;
        this.colResizingService.startResizePos = event.clientX;
        this.colResizingService.showResizer = true;
        this.column.grid.cdr.detectChanges();
    }
}
IgxResizeHandleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxResizeHandle]'
            },] }
];
/** @nocollapse */
IgxResizeHandleDirective.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef },
    { type: IgxColumnResizingService }
];
IgxResizeHandleDirective.propDecorators = {
    column: [{ type: Input, args: ['igxResizeHandle',] }],
    onMouseOver: [{ type: HostListener, args: ['mouseover',] }],
    onDoubleClick: [{ type: HostListener, args: ['dblclick',] }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    IgxResizeHandleDirective.prototype.column;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxResizeHandleDirective.prototype._dblClick;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxResizeHandleDirective.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    IgxResizeHandleDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    IgxResizeHandleDirective.prototype.element;
    /** @type {?} */
    IgxResizeHandleDirective.prototype.colResizingService;
}
/**
 * @hidden
 */
export class IgxColumnResizerDirective {
    /**
     * @param {?} element
     * @param {?} document
     * @param {?} zone
     */
    constructor(element, document, zone) {
        this.element = element;
        this.document = document;
        this.zone = zone;
        this.restrictHResizeMin = Number.MIN_SAFE_INTEGER;
        this.restrictHResizeMax = Number.MAX_SAFE_INTEGER;
        this.resizeEnd = new Subject();
        this.resizeStart = new Subject();
        this.resize = new Subject();
        this._destroy = new Subject();
        this.resizeStart.pipe(map((event) => event.clientX), takeUntil(this._destroy), switchMap((offset) => this.resize.pipe(map((event) => event.clientX - offset), takeUntil(this.resizeEnd), takeUntil(this._destroy)))).subscribe((pos) => {
            /** @type {?} */
            const left = this._left + pos;
            /** @type {?} */
            const min = this._left - this.restrictHResizeMin;
            /** @type {?} */
            const max = this._left + this.restrictHResizeMax;
            this.left = left < min ? min : left;
            if (left > max) {
                this.left = max;
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.zone.runOutsideAngular(() => {
            fromEvent(this.document.defaultView, 'mousemove').pipe(throttle(() => interval(0, animationFrameScheduler)), takeUntil(this._destroy)).subscribe((res) => this.onMousemove(res));
            fromEvent(this.document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))
                .subscribe((res) => this.onMouseup(res));
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroy.next(true);
        this._destroy.complete();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set left(val) {
        requestAnimationFrame(() => this.element.nativeElement.style.left = val + 'px');
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set top(val) {
        requestAnimationFrame(() => this.element.nativeElement.style.top = val + 'px');
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseup(event) {
        this.resizeEnd.next(event);
        this.resizeEnd.complete();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMousedown(event) {
        event.preventDefault();
        /** @type {?} */
        const parent = this.element.nativeElement.parentElement.parentElement;
        this.left = this._left = event.clientX - parent.getBoundingClientRect().left;
        this.top = event.target.getBoundingClientRect().top - parent.getBoundingClientRect().top;
        this.resizeStart.next(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMousemove(event) {
        event.preventDefault();
        this.resize.next(event);
    }
}
IgxColumnResizerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxResizer]'
            },] }
];
/** @nocollapse */
IgxColumnResizerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: NgZone }
];
IgxColumnResizerDirective.propDecorators = {
    restrictHResizeMin: [{ type: Input }],
    restrictHResizeMax: [{ type: Input }],
    resizeEnd: [{ type: Output }],
    resizeStart: [{ type: Output }],
    resize: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    IgxColumnResizerDirective.prototype.restrictHResizeMin;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.restrictHResizeMax;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.resizeEnd;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.resizeStart;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.resize;
    /**
     * @type {?}
     * @private
     */
    IgxColumnResizerDirective.prototype._left;
    /**
     * @type {?}
     * @private
     */
    IgxColumnResizerDirective.prototype._destroy;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.element;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.document;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.zone;
}
export class IgxFilterCellTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxFilterCellTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxFilterCellTemplate]'
            },] }
];
/** @nocollapse */
IgxFilterCellTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    IgxFilterCellTemplateDirective.prototype.template;
}
export class IgxCellTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxCellTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxCell]'
            },] }
];
/** @nocollapse */
IgxCellTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    IgxCellTemplateDirective.prototype.template;
}
export class IgxCellHeaderTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxCellHeaderTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxHeader]'
            },] }
];
/** @nocollapse */
IgxCellHeaderTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    IgxCellHeaderTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
export class IgxCellFooterTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxCellFooterTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxFooter]'
            },] }
];
/** @nocollapse */
IgxCellFooterTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    IgxCellFooterTemplateDirective.prototype.template;
}
export class IgxCellEditorTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxCellEditorTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxCellEditor]'
            },] }
];
/** @nocollapse */
IgxCellEditorTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    IgxCellEditorTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
export class IgxColumnMovingService {
    /**
     * @return {?}
     */
    get column() {
        return this._column;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set column(val) {
        if (val) {
            this._column = val;
        }
    }
    /**
     * @return {?}
     */
    get icon() {
        return this._icon;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set icon(val) {
        if (val) {
            this._icon = val;
        }
    }
}
IgxColumnMovingService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */ IgxColumnMovingService.ngInjectableDef = i0.defineInjectable({ factory: function IgxColumnMovingService_Factory() { return new IgxColumnMovingService(); }, token: IgxColumnMovingService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingService.prototype._icon;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingService.prototype._column;
    /** @type {?} */
    IgxColumnMovingService.prototype.cancelDrop;
    /** @type {?} */
    IgxColumnMovingService.prototype.isColumnMoving;
}
/** @enum {number} */
const DropPosition = {
    BeforeDropTarget: 0,
    AfterDropTarget: 1,
    None: 2,
};
export { DropPosition };
DropPosition[DropPosition.BeforeDropTarget] = 'BeforeDropTarget';
DropPosition[DropPosition.AfterDropTarget] = 'AfterDropTarget';
DropPosition[DropPosition.None] = 'None';
/**
 * @hidden
 */
export class IgxColumnMovingDragDirective extends IgxDragDirective {
    /**
     * @param {?} _element
     * @param {?} _zone
     * @param {?} _renderer
     * @param {?} _cdr
     * @param {?} cms
     */
    constructor(_element, _zone, _renderer, _cdr, cms) {
        super(_cdr, _element, _zone, _renderer);
        this.cms = cms;
        this._ghostImageClass = 'igx-grid__drag-ghost-image';
        this.dragGhostImgIconClass = 'igx-grid__drag-ghost-image-icon';
        this.dragGhostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set data(val) {
        this._column = val;
    }
    /**
     * @return {?}
     */
    get column() {
        return this._column;
    }
    /**
     * @return {?}
     */
    get draggable() {
        return this.column && (this.column.movable || (this.column.groupable && !this.column.columnGroup));
    }
    /**
     * @return {?}
     */
    get icon() {
        return this.cms.icon;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._unsubscribe();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEscape(event) {
        this.cms.cancelDrop = true;
        this.onPointerUp(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPointerDown(event) {
        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        this._removeOnDestroy = false;
        this.cms.column = this.column;
        this.ghostImageClass = this._ghostImageClass;
        super.onPointerDown(event);
        this.cms.isColumnMoving = true;
        this.column.grid.cdr.detectChanges();
        /** @type {?} */
        const args = {
            source: this.column
        };
        this.column.grid.onColumnMovingStart.emit(args);
        this.subscription$ = fromEvent(this.column.grid.document.defaultView, 'keydown').subscribe((ev) => {
            if (ev.key === "Escape" /* ESCAPE */ || ev.key === "Esc" /* ESCAPE_IE */) {
                this.onEscape(ev);
            }
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPointerMove(event) {
        event.preventDefault();
        super.onPointerMove(event);
        if (this._dragStarted && this.dragGhost && !this.column.grid.draggedColumn) {
            this.column.grid.draggedColumn = this.column;
            this.column.grid.cdr.detectChanges();
        }
        if (this.cms.isColumnMoving) {
            /** @type {?} */
            const args = {
                source: this.column,
                cancel: false
            };
            this.column.grid.onColumnMoving.emit(args);
            if (args.cancel) {
                this.onEscape(event);
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPointerUp(event) {
        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.
        this.zone.run(() => {
            super.onPointerUp(event);
            this.cms.isColumnMoving = false;
            this.column.grid.draggedColumn = null;
            this.column.grid.cdr.detectChanges();
        });
        this._unsubscribe();
    }
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    createDragGhost(event) {
        super.createDragGhost(event);
        /** @type {?} */
        let pageX;
        /** @type {?} */
        let pageY;
        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {
            pageX = event.pageX;
            pageY = event.pageY;
        }
        else {
            pageX = event.touches[0].pageX;
            pageY = event.touches[0].pageY;
        }
        this.dragGhost.style.height = null;
        this.dragGhost.style.minWidth = null;
        this.dragGhost.style.flexBasis = null;
        this.dragGhost.style.position = null;
        /** @type {?} */
        const icon = document.createElement('i');
        /** @type {?} */
        const text = document.createTextNode('block');
        icon.appendChild(text);
        icon.classList.add('material-icons');
        this.cms.icon = icon;
        /** @type {?} */
        const hostElemLeft = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().left : 0;
        /** @type {?} */
        const hostElemTop = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().top : 0;
        if (!this.column.columnGroup) {
            this.renderer.addClass(icon, this.dragGhostImgIconClass);
            this.dragGhost.insertBefore(icon, this.dragGhost.firstElementChild);
            this.left = this._dragStartX = pageX - ((this.dragGhost.getBoundingClientRect().width / 3) * 2) - hostElemLeft;
            this.top = this._dragStartY = pageY - ((this.dragGhost.getBoundingClientRect().height / 3) * 2) - hostElemTop;
        }
        else {
            this.dragGhost.insertBefore(icon, this.dragGhost.childNodes[0]);
            this.renderer.addClass(icon, this.dragGhostImgIconGroupClass);
            this.dragGhost.children[0].style.paddingLeft = '0px';
            this.left = this._dragStartX = pageX - ((this.dragGhost.getBoundingClientRect().width / 3) * 2) - hostElemLeft;
            this.top = this._dragStartY = pageY - ((this.dragGhost.getBoundingClientRect().height / 3) * 2) - hostElemTop;
        }
    }
    /**
     * @private
     * @return {?}
     */
    _unsubscribe() {
        if (this.subscription$) {
            this.subscription$.unsubscribe();
            this.subscription$ = null;
        }
    }
}
IgxColumnMovingDragDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxColumnMovingDrag]'
            },] }
];
/** @nocollapse */
IgxColumnMovingDragDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: IgxColumnMovingService }
];
IgxColumnMovingDragDirective.propDecorators = {
    data: [{ type: Input, args: ['igxColumnMovingDrag',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDragDirective.prototype.subscription$;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDragDirective.prototype._column;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDragDirective.prototype._ghostImageClass;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDragDirective.prototype.dragGhostImgIconClass;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDragDirective.prototype.dragGhostImgIconGroupClass;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDragDirective.prototype.cms;
}
/**
 * @hidden
 */
export class IgxColumnMovingDropDirective extends IgxDropDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} zone
     * @param {?} cms
     */
    constructor(elementRef, renderer, zone, cms) {
        super(elementRef, renderer, zone);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.zone = zone;
        this.cms = cms;
        this._dropIndicator = null;
        this._lastDropIndicator = null;
        this._dragLeave = new Subject();
        this._dropIndicatorClass = 'igx-grid__th-drop-indicator--active';
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set data(val) {
        if (val instanceof IgxColumnComponent) {
            this._column = val;
        }
        if (val instanceof IgxGridForOfDirective) {
            this._hVirtDir = val;
        }
    }
    /**
     * @return {?}
     */
    get column() {
        return this._column;
    }
    /**
     * @return {?}
     */
    get isDropTarget() {
        return this._column && this._column.grid.hasMovableColumns && this.cms.column.movable && !this.cms.column.disablePinning;
    }
    /**
     * @return {?}
     */
    get horizontalScroll() {
        if (this._hVirtDir) {
            return this._hVirtDir;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._dragLeave.next(true);
        this._dragLeave.complete();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragOver(event) {
        if (this.isDropTarget &&
            this.cms.column !== this.column &&
            this.cms.column.level === this.column.level &&
            this.cms.column.parent === this.column.parent) {
            if (this._lastDropIndicator) {
                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);
            }
            /** @type {?} */
            const clientRect = this.elementRef.nativeElement.getBoundingClientRect();
            /** @type {?} */
            const pos = clientRect.left + clientRect.width / 2;
            /** @type {?} */
            const parent = this.elementRef.nativeElement.parentElement;
            if (event.detail.pageX < pos) {
                this._dropPos = DropPosition.BeforeDropTarget;
                this._lastDropIndicator = this._dropIndicator = parent.firstElementChild;
            }
            else {
                this._dropPos = DropPosition.AfterDropTarget;
                this._lastDropIndicator = this._dropIndicator = parent.lastElementChild;
            }
            if (this.cms.icon.innerText !== 'block') {
                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragEnter(event) {
        /** @type {?} */
        const drag = event.detail.owner;
        if (!(drag instanceof IgxColumnMovingDragDirective)) {
            return;
        }
        if (this.column && this.cms.column.grid.id !== this.column.grid.id) {
            this.cms.icon.innerText = 'block';
            return;
        }
        if (this.isDropTarget &&
            this.cms.column !== this.column &&
            this.cms.column.level === this.column.level &&
            this.cms.column.parent === this.column.parent) {
            if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {
                this.cms.icon.innerText = 'swap_horiz';
            }
            if (!this.cms.column.pinned && this.column.pinned) {
                /** @type {?} */
                const nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);
                if (nextPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {
                    this.cms.icon.innerText = 'lock';
                }
                else {
                    this.cms.icon.innerText = 'block';
                }
            }
        }
        else {
            this.cms.icon.innerText = 'block';
        }
        if (this.horizontalScroll) {
            this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';
            interval(100).pipe(takeUntil(this._dragLeave)).subscribe(() => {
                this.cms.column.grid.wheelHandler();
                event.target.id === 'right' ? this.horizontalScroll.getHorizontalScroll().scrollLeft += 15 :
                    this.horizontalScroll.getHorizontalScroll().scrollLeft -= 15;
            });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragLeave(event) {
        /** @type {?} */
        const drag = event.detail.owner;
        if (!(drag instanceof IgxColumnMovingDragDirective)) {
            return;
        }
        this.cms.icon.innerText = 'block';
        if (this._dropIndicator) {
            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);
        }
        if (this.horizontalScroll) {
            this._dragLeave.next(true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragDrop(event) {
        event.preventDefault();
        /** @type {?} */
        const drag = event.detail.owner;
        if (!(drag instanceof IgxColumnMovingDragDirective)) {
            return;
        }
        if (this.column && (this.cms.column.grid.id !== this.column.grid.id)) {
            return;
        }
        if (this.horizontalScroll) {
            this._dragLeave.next(true);
        }
        if (this.isDropTarget) {
            /** @type {?} */
            const args = {
                source: this.cms.column,
                target: this.column
            };
            /** @type {?} */
            let nextPinnedWidth;
            if (this.column.pinned && !this.cms.column.pinned) {
                nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);
            }
            if ((nextPinnedWidth && nextPinnedWidth > this.column.grid.calcPinnedContainerMaxWidth) ||
                this.column.level !== this.cms.column.level ||
                this.column.parent !== this.cms.column.parent ||
                this.cms.cancelDrop) {
                this.cms.cancelDrop = false;
                this.column.grid.onColumnMovingEnd.emit(args);
                return;
            }
            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);
            this.column.grid.draggedColumn = null;
            this.column.grid.cdr.detectChanges();
        }
    }
}
IgxColumnMovingDropDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxColumnMovingDrop]'
            },] }
];
/** @nocollapse */
IgxColumnMovingDropDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone },
    { type: IgxColumnMovingService }
];
IgxColumnMovingDropDirective.propDecorators = {
    data: [{ type: Input, args: ['igxColumnMovingDrop',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype._dropPos;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype._dropIndicator;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype._lastDropIndicator;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype._column;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype._hVirtDir;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype._dragLeave;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype._dropIndicatorClass;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype.cms;
}
export class IgxGridBodyDirective {
}
IgxGridBodyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxGridBody]',
                providers: [IgxForOfSyncService]
            },] }
];
/**
 * @hidden
 */
export class IgxDatePipeComponent extends DatePipe {
    /**
     * @param {?} locale
     */
    constructor(locale) {
        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future
        super(locale);
    }
    /**
     * @param {?} value
     * @param {?} locale
     * @return {?}
     */
    transform(value, locale) {
        if (value && value instanceof Date) {
            if (locale) {
                return super.transform(value, DEFAULT_DATE_FORMAT, undefined, locale);
            }
            else {
                return super.transform(value);
            }
        }
        else {
            return value;
        }
    }
}
IgxDatePipeComponent.decorators = [
    { type: Pipe, args: [{
                name: 'igxdate'
            },] }
];
/** @nocollapse */
IgxDatePipeComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
/**
 * @hidden
 */
export class IgxDecimalPipeComponent extends DecimalPipe {
    /**
     * @param {?} locale
     */
    constructor(locale) {
        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future
        super(locale);
    }
    /**
     * @param {?} value
     * @param {?} locale
     * @return {?}
     */
    transform(value, locale) {
        if (value && typeof value === 'number') {
            if (locale) {
                return super.transform(value, undefined, locale);
            }
            else {
                return super.transform(value);
            }
        }
        else {
            return value;
        }
    }
}
IgxDecimalPipeComponent.decorators = [
    { type: Pipe, args: [{
                name: 'igxdecimal'
            },] }
];
/** @nocollapse */
IgxDecimalPipeComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
/**
 * @hidden
 * @record
 */
export function ContainerPositionSettings() { }
if (false) {
    /** @type {?|undefined} */
    ContainerPositionSettings.prototype.container;
}
/**
 * @hidden
 */
export class ContainerPositioningStrategy extends ConnectedPositioningStrategy {
    constructor() {
        super(...arguments);
        this.isTop = false;
        this.isTopInitialPosition = null;
    }
    /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    position(contentElement, size, document, initialCall) {
        /** @type {?} */
        const container = this.settings.container;
        // grid.tbody
        /** @type {?} */
        const target = (/** @type {?} */ (this.settings.target));
        // Position of the overlay depends on the available space in the grid.
        // If the bottom space is not enough then the the row overlay will show at the top of the row.
        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),
        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).
        this.isTop = this.isTopInitialPosition !== null ?
            this.isTopInitialPosition :
            container.getBoundingClientRect().bottom <
                target.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;
        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.
        contentElement.style.width = target.clientWidth + 'px';
        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;
        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;
        super.position(contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);
    }
}
if (false) {
    /** @type {?} */
    ContainerPositioningStrategy.prototype.isTop;
    /** @type {?} */
    ContainerPositioningStrategy.prototype.isTopInitialPosition;
    /** @type {?} */
    ContainerPositioningStrategy.prototype.settings;
}
//# sourceMappingURL=data:application/json;base64,