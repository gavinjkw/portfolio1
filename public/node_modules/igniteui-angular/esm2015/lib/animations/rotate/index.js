/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { animate, animation, style } from '@angular/animations';
import { EaseIn, EaseOut } from '../easings';
/** @type {?} */
const baseRecipe = [
    style({
        opacity: `{{startOpacity}}`,
        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)`,
        transformOrigin: `{{xPos}} {{yPos}}`
    }),
    animate(`{{duration}} {{delay}} {{easing}}`, style({
        offset: 0,
        opacity: `{{endOpacity}}`,
        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)`,
        transformOrigin: `{{xPos}} {{yPos}}`
    }))
];
/** @type {?} */
const baseInParams = {
    delay: '0s',
    duration: '600ms',
    easing: EaseOut.quad,
    endAngle: 0,
    endOpacity: 1,
    rotateX: 0,
    rotateY: 0,
    rotateZ: 1,
    startAngle: -360,
    startOpacity: 0,
    xPos: 'center',
    yPos: 'center'
};
/** @type {?} */
const baseOutParams = Object.assign({}, baseInParams, { easing: EaseIn.quad, endOpacity: 0, startOpacity: 1 });
/** @type {?} */
const rotateInCenter = animation(baseRecipe, {
    params: Object.assign({}, baseInParams)
});
/** @type {?} */
const rotateOutCenter = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams)
});
/** @type {?} */
const rotateInTop = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { xPos: 'top' })
});
/** @type {?} */
const rotateOutTop = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { xPos: 'top' })
});
/** @type {?} */
const rotateInRight = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { xPos: 'right' })
});
/** @type {?} */
const rotateOutRight = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { xPos: 'right' })
});
/** @type {?} */
const rotateInBottom = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { xPos: 'bottom' })
});
/** @type {?} */
const rotateOutBottom = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { xPos: 'bottom' })
});
/** @type {?} */
const rotateInLeft = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { xPos: 'left' })
});
/** @type {?} */
const rotateOutLeft = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { xPos: 'left' })
});
/** @type {?} */
const rotateInTr = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { xPos: 'right', yPos: 'top' })
});
/** @type {?} */
const rotateOutTr = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { xPos: 'right', yPos: 'top' })
});
/** @type {?} */
const rotateInBr = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { xPos: 'right', yPos: 'bottom' })
});
/** @type {?} */
const rotateOutBr = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { xPos: 'right', yPos: 'bottom' })
});
/** @type {?} */
const rotateInBl = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { xPos: 'left', yPos: 'bottom' })
});
/** @type {?} */
const rotateOutBl = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { xPos: 'left', yPos: 'bottom' })
});
/** @type {?} */
const rotateInTl = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { xPos: 'left', yPos: 'top' })
});
/** @type {?} */
const rotateOutTl = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { xPos: 'left', yPos: 'top' })
});
/** @type {?} */
const rotateInDiagonal1 = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { rotateX: 1, rotateY: 1, rotateZ: 0 })
});
/** @type {?} */
const rotateOutDiagonal1 = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { rotateX: 1, rotateY: 1, rotateZ: 0 })
});
/** @type {?} */
const rotateInDiagonal2 = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { rotateX: -1, rotateY: 1, rotateZ: 0 })
});
/** @type {?} */
const rotateOutDiagonal2 = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { rotateX: -1, rotateY: 1, rotateZ: 0 })
});
/** @type {?} */
const rotateInHor = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { rotateX: 0, rotateY: 1, rotateZ: 0 })
});
/** @type {?} */
const rotateOutHor = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { rotateX: 0, rotateY: 1, rotateZ: 0 })
});
/** @type {?} */
const rotateInVer = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { rotateX: 1, rotateY: 0, rotateZ: 0 })
});
/** @type {?} */
const rotateOutVer = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { rotateX: 1, rotateY: 0, rotateZ: 0 })
});
export { rotateInCenter, rotateInTop, rotateInRight, rotateInLeft, rotateInBottom, rotateInTr, rotateInBr, rotateInBl, rotateInTl, rotateInDiagonal1, rotateInDiagonal2, rotateInHor, rotateInVer, rotateOutCenter, rotateOutTop, rotateOutRight, rotateOutLeft, rotateOutBottom, rotateOutTr, rotateOutBr, rotateOutBl, rotateOutTl, rotateOutDiagonal1, rotateOutDiagonal2, rotateOutHor, rotateOutVer };
//# sourceMappingURL=data:application/json;base64,