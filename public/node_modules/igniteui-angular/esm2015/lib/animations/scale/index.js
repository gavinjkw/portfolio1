/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { animate, animation, style } from '@angular/animations';
import { EaseOut } from '../easings';
/** @type {?} */
const base = [
    style({
        opacity: `{{startOpacity}}`,
        transform: `scale{{direction}}({{fromScale}})`,
        transformOrigin: `{{xPos}} {{yPos}}`
    }),
    animate(`{{duration}} {{delay}} {{easing}}`, style({
        opacity: `{{endOpacity}}`,
        transform: `scale{{direction}}({{toScale}})`,
        transformOrigin: `{{xPos}} {{yPos}}`
    }))
];
/** @type {?} */
const baseInParams = {
    delay: '0s',
    direction: '',
    duration: '350ms',
    easing: EaseOut.quad,
    endOpacity: 1,
    fromScale: .5,
    startOpacity: 0,
    toScale: 1,
    xPos: '50%',
    yPos: '50%'
};
/** @type {?} */
const baseOutParams = Object.assign({}, baseInParams, { easing: EaseOut.sine, endOpacity: 0, fromScale: 1, startOpacity: 1, toScale: .5 });
/** @type {?} */
const scaleInCenter = animation(base, { params: baseInParams });
/** @type {?} */
const scaleInBl = animation(base, {
    params: Object.assign({}, baseInParams, { xPos: '0', yPos: '100%' })
});
/** @type {?} */
const scaleInVerCenter = animation(base, {
    params: Object.assign({}, baseInParams, { direction: 'Y', fromScale: .4 })
});
/** @type {?} */
const scaleInTop = animation(base, {
    params: Object.assign({}, baseInParams, { xPos: '50%', yPos: '0' })
});
/** @type {?} */
const scaleInLeft = animation(base, {
    params: Object.assign({}, baseInParams, { xPos: '0', yPos: '50%' })
});
/** @type {?} */
const scaleInVerTop = animation(base, {
    params: Object.assign({}, baseInParams, { direction: 'Y', fromScale: .4, xPos: '100%', yPos: '0' })
});
/** @type {?} */
const scaleInTr = animation(base, {
    params: Object.assign({}, baseInParams, { xPos: '100%', yPos: '0' })
});
/** @type {?} */
const scaleInTl = animation(base, {
    params: Object.assign({}, baseInParams, { xPos: '0', yPos: '0' })
});
/** @type {?} */
const scaleInVerBottom = animation(base, {
    params: Object.assign({}, baseInParams, { direction: 'Y', fromScale: .4, xPos: '0', yPos: '100%' })
});
/** @type {?} */
const scaleInRight = animation(base, {
    params: Object.assign({}, baseInParams, { xPos: '100%', yPos: '50%' })
});
/** @type {?} */
const scaleInHorCenter = animation(base, {
    params: Object.assign({}, baseInParams, { direction: 'X', fromScale: .4 })
});
/** @type {?} */
const scaleInBr = animation(base, {
    params: Object.assign({}, baseInParams, { xPos: '100%', yPos: '100%' })
});
/** @type {?} */
const scaleInHorLeft = animation(base, {
    params: Object.assign({}, baseInParams, { direction: 'X', fromScale: .4, xPos: '0', yPos: '0' })
});
/** @type {?} */
const scaleInBottom = animation(base, {
    params: Object.assign({}, baseInParams, { xPos: '50%', yPos: '100%' })
});
/** @type {?} */
const scaleInHorRight = animation(base, {
    params: Object.assign({}, baseInParams, { direction: 'X', fromScale: .4, xPos: '100%', yPos: '100%' })
});
/** @type {?} */
const scaleOutCenter = animation(base, { params: baseOutParams });
/** @type {?} */
const scaleOutBl = animation(base, {
    params: Object.assign({}, baseOutParams, { xPos: '0', yPos: '100%' })
});
/** @type {?} */
const scaleOutBr = animation(base, {
    params: Object.assign({}, baseOutParams, { xPos: '100%', yPos: '100%' })
});
/** @type {?} */
const scaleOutVerCenter = animation(base, {
    params: Object.assign({}, baseOutParams, { direction: 'Y', toScale: .3 })
});
/** @type {?} */
const scaleOutVerTop = animation(base, {
    params: Object.assign({}, baseOutParams, { direction: 'Y', toScale: .3, xPos: '100%', yPos: '0' })
});
/** @type {?} */
const scaleOutVerBottom = animation(base, {
    params: Object.assign({}, baseOutParams, { direction: 'Y', toScale: .3, xPos: '0', yPos: '100%' })
});
/** @type {?} */
const scaleOutTop = animation(base, {
    params: Object.assign({}, baseOutParams, { xPos: '50%', yPos: '0' })
});
/** @type {?} */
const scaleOutLeft = animation(base, {
    params: Object.assign({}, baseOutParams, { xPos: '0', yPos: '50%' })
});
/** @type {?} */
const scaleOutTr = animation(base, {
    params: Object.assign({}, baseOutParams, { xPos: '100%', yPos: '0' })
});
/** @type {?} */
const scaleOutTl = animation(base, {
    params: Object.assign({}, baseOutParams, { xPos: '0', yPos: '0' })
});
/** @type {?} */
const scaleOutRight = animation(base, {
    params: Object.assign({}, baseOutParams, { xPos: '100%', yPos: '50%' })
});
/** @type {?} */
const scaleOutBottom = animation(base, {
    params: Object.assign({}, baseOutParams, { xPos: '50%', yPos: '100%' })
});
/** @type {?} */
const scaleOutHorCenter = animation(base, {
    params: Object.assign({}, baseOutParams, { direction: 'X', toScale: .3 })
});
/** @type {?} */
const scaleOutHorLeft = animation(base, {
    params: Object.assign({}, baseOutParams, { direction: 'X', toScale: .3, xPos: '0', yPos: '0' })
});
/** @type {?} */
const scaleOutHorRight = animation(base, {
    params: Object.assign({}, baseOutParams, { direction: 'X', toScale: .3, xPos: '100%', yPos: '100%' })
});
export { scaleInTop, scaleInRight, scaleInBottom, scaleInLeft, scaleInCenter, scaleInTr, scaleInBr, scaleInBl, scaleInTl, scaleInVerTop, scaleInVerBottom, scaleInVerCenter, scaleInHorCenter, scaleInHorLeft, scaleInHorRight, scaleOutTop, scaleOutRight, scaleOutBottom, scaleOutLeft, scaleOutCenter, scaleOutTr, scaleOutBr, scaleOutBl, scaleOutTl, scaleOutVerTop, scaleOutVerBottom, scaleOutVerCenter, scaleOutHorCenter, scaleOutHorLeft, scaleOutHorRight };
//# sourceMappingURL=data:application/json;base64,