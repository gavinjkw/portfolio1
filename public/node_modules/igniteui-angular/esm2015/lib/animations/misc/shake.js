/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { animate, animation, keyframes, style } from '@angular/animations';
import { EaseInOut } from '../easings';
/** @type {?} */
const baseRecipe = [
    animate(`{{duration}} {{delay}} {{easing}}`, keyframes([
        style({
            offset: 0,
            transform: `rotate(0deg) translate{{direction}}(0)`,
            transformOrigin: `{{xPos}} {{yPos}}`
        }),
        style({
            offset: 0.1,
            transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{startDistance}})`
        }),
        style({
            offset: 0.2,
            transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`
        }),
        style({
            offset: 0.3,
            transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`
        }),
        style({
            offset: 0.4,
            transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`
        }),
        style({
            offset: 0.5,
            transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`
        }),
        style({
            offset: 0.6,
            transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`
        }),
        style({
            offset: 0.7,
            transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`
        }),
        style({
            offset: 0.8,
            transform: `rotate(-{{endAngle}}deg) translate{{direction}}({{endDistance}})`
        }),
        style({
            offset: 0.9,
            transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{endDistance}})`
        }),
        style({
            offset: 1,
            transform: `rotate(0deg) translate{{direction}}(0)`,
            transformOrigin: `{{xPos}} {{yPos}}`
        })
    ]))
];
/** @type {?} */
const baseParams = {
    delay: '0s',
    direction: 'X',
    duration: '800ms',
    easing: EaseInOut.quad,
    endAngle: 0,
    endDistance: '8px',
    startAngle: 0,
    startDistance: '10px',
    xPos: 'center',
    yPos: 'center'
};
/** @type {?} */
const shakeHor = animation(baseRecipe, {
    params: Object.assign({}, baseParams, { direction: 'X' })
});
/** @type {?} */
const shakeVer = animation(baseRecipe, {
    params: Object.assign({}, baseParams, { direction: 'Y' })
});
/** @type {?} */
const shakeTop = animation(baseRecipe, {
    params: Object.assign({}, baseParams, { endAngle: 2, endDistance: '0', startAngle: 4, startDistance: '0', yPos: 'top' })
});
/** @type {?} */
const shakeBottom = animation(baseRecipe, {
    params: Object.assign({}, baseParams, { direction: 'Y', endAngle: 2, endDistance: '0', startAngle: 4, startDistance: '0', yPos: 'bottom' })
});
/** @type {?} */
const shakeRight = animation(baseRecipe, {
    params: Object.assign({}, baseParams, { direction: 'Y', endAngle: 2, endDistance: '0', startAngle: 4, startDistance: '0', xPos: 'right', yPos: 'center' })
});
/** @type {?} */
const shakeLeft = animation(baseRecipe, {
    params: Object.assign({}, baseParams, { direction: 'Y', endAngle: 2, endDistance: '0', startAngle: 4, startDistance: '0', xPos: 'left', yPos: 'center' })
});
/** @type {?} */
const shakeCenter = animation(baseRecipe, {
    params: Object.assign({}, baseParams, { direction: 'Y', endAngle: 8, endDistance: '0', startAngle: 10, startDistance: '0', xPos: 'center', yPos: 'center' })
});
/** @type {?} */
const shakeTr = animation(baseRecipe, {
    params: Object.assign({}, baseParams, { direction: 'Y', endAngle: 2, endDistance: '0', startAngle: 4, startDistance: '0', xPos: 'right', yPos: 'top' })
});
/** @type {?} */
const shakeBr = animation(baseRecipe, {
    params: Object.assign({}, baseParams, { direction: 'Y', endAngle: 2, endDistance: '0', startAngle: 4, startDistance: '0', xPos: 'right', yPos: 'bottom' })
});
/** @type {?} */
const shakeBl = animation(baseRecipe, {
    params: Object.assign({}, baseParams, { direction: 'Y', endAngle: 2, endDistance: '0', startAngle: 4, startDistance: '0', xPos: 'left', yPos: 'bottom' })
});
/** @type {?} */
const shakeTl = animation(baseRecipe, {
    params: Object.assign({}, baseParams, { direction: 'Y', endAngle: 2, endDistance: '0', startAngle: 4, startDistance: '0', xPos: 'left', yPos: 'top' })
});
export { shakeHor, shakeVer, shakeTop, shakeBottom, shakeRight, shakeLeft, shakeCenter, shakeTr, shakeBr, shakeBl, shakeTl };
//# sourceMappingURL=data:application/json;base64,