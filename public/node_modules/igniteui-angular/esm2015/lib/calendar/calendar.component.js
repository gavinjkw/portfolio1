/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { transition, trigger, useAnimation } from '@angular/animations';
import { Component, ContentChild, forwardRef, HostBinding, HostListener, Input, ViewChild, ElementRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { fadeIn, scaleInCenter } from '../animations/main';
import { IgxCalendarHeaderTemplateDirective, IgxCalendarSubheaderTemplateDirective } from './calendar.directives';
import { monthRange } from './calendar';
import { CalendarView, IgxMonthPickerBase } from './month-picker-base';
import { IgxMonthsViewComponent } from './months-view/months-view.component';
import { IgxYearsViewComponent } from './years-view/years-view.component';
import { IgxDaysViewComponent } from './days-view/days-view.component';
import { interval } from 'rxjs';
import { takeUntil, debounce, skipLast, switchMap } from 'rxjs/operators';
import { ScrollMonth } from './calendar-base';
/** @type {?} */
let NEXT_ID = 0;
/**
 * **Ignite UI for Angular Calendar** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/calendar.html)
 *
 * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple
 * or range selection.
 *
 * Example:
 * ```html
 * <igx-calendar selection="range"></igx-calendar>
 * ```
 */
export class IgxCalendarComponent extends IgxMonthPickerBase {
    constructor() {
        super(...arguments);
        /**
         * Sets/gets the `id` of the calendar.
         * If not set, the `id` will have value `"igx-calendar-0"`.
         * ```html
         * <igx-calendar id = "my-first-calendar"></igx-calendar>
         * ```
         * ```typescript
         * let calendarId =  this.calendar.id;
         * ```
         * \@memberof IgxCalendarComponent
         */
        this.id = `igx-calendar-${NEXT_ID++}`;
        this.hasHeader = true;
        /**
         * Sets/gets whether the calendar header will be in vertical position.
         * Default value is `false`.
         * ```html
         * <igx-calendar [vertical] = "true"></igx-calendar>
         * ```
         * ```typescript
         * let isVertical = this.calendar.vertical;
         * ```
         */
        this.vertical = false;
        /**
         * The default `tabindex` attribute for the component.
         *
         * @hidden
         */
        this.tabindex = 0;
        /**
         * The default aria role attribute for the component.
         *
         * @hidden
         */
        this.role = 'grid';
        /**
         * The default aria lebelled by attribute for the component.
         *
         * @hidden
         */
        this.ariaLabelledBy = 'calendar';
        /**
         * The default css class applied to the component.
         *
         * @hidden
         */
        this.styleClass = true;
        /**
         * @hidden
         */
        this._monthAction = '';
        /**
         * @hidden
         */
        this.startPrevMonthScroll = (isKeydownTrigger = false) => {
            this.startMonthScroll$.next();
            this.daysView.monthScrollDirection = ScrollMonth.PREV;
            this.previousMonth(isKeydownTrigger);
        };
        /**
         * @hidden
         */
        this.startNextMonthScroll = (isKeydownTrigger = false) => {
            this.startMonthScroll$.next();
            this.daysView.monthScrollDirection = ScrollMonth.NEXT;
            this.nextMonth(isKeydownTrigger);
        };
        /**
         * @hidden
         */
        this.stopMonthScroll = (event) => {
            event.stopPropagation();
            this.daysView.stopMonthScroll$.next(true);
            this.daysView.stopMonthScroll$.complete();
            if (this.daysView.monthScrollDirection === ScrollMonth.PREV) {
                this.prevMonthBtn.nativeElement.focus();
            }
            else if (this.daysView.monthScrollDirection === ScrollMonth.NEXT) {
                this.nextMonthBtn.nativeElement.focus();
            }
            this.daysView.monthScrollDirection = ScrollMonth.NONE;
        };
    }
    /**
     * The default css class applied to the component.
     *
     * @hidden
     * @return {?}
     */
    get styleVerticalClass() {
        return this.vertical;
    }
    /**
     * @hidden
     * @return {?}
     */
    get isYearView() {
        return this.activeView === CalendarView.YEAR;
    }
    /**
     * @hidden
     * @return {?}
     */
    get monthAction() {
        return this._monthAction;
    }
    /**
     * @hidden
     * @param {?} val
     * @return {?}
     */
    set monthAction(val) {
        this._monthAction = val;
    }
    /**
     * Gets the header template.
     * ```typescript
     * let headerTemplate =  this.calendar.headerTeamplate;
     * ```
     * \@memberof IgxCalendarComponent
     * @return {?}
     */
    get headerTemplate() {
        if (this.headerTemplateDirective) {
            return this.headerTemplateDirective.template;
        }
        return null;
    }
    /**
     * Sets the header template.
     * ```html
     * <igx-calendar headerTemplateDirective = "igxCalendarHeader"></igx-calendar>
     * ```
     * \@memberof IgxCalendarComponent
     * @param {?} directive
     * @return {?}
     */
    set headerTemplate(directive) {
        this.headerTemplateDirective = directive;
    }
    /**
     * Gets the subheader template.
     * ```typescript
     * let subheaderTemplate = this.calendar.subheaderTemplate;
     * ```
     * @return {?}
     */
    get subheaderTemplate() {
        if (this.subheaderTemplateDirective) {
            return this.subheaderTemplateDirective.template;
        }
        return null;
    }
    /**
     * Sets the subheader template.
     * ```html
     * <igx-calendar subheaderTemplate = "igxCalendarSubheader"></igx-calendar>
     * ```
     * \@memberof IgxCalendarComponent
     * @param {?} directive
     * @return {?}
     */
    set subheaderTemplate(directive) {
        this.subheaderTemplateDirective = directive;
    }
    /**
     * Gets the context for the template marked with the `igxCalendarHeader` directive.
     * ```typescript
     * let headerContext =  this.calendar.headerContext;
     * ```
     * @return {?}
     */
    get headerContext() {
        /** @type {?} */
        const date = this.headerDate;
        return this.generateContext(date);
    }
    /**
     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`
     * or `igxCalendarSubHeaderYear` directive.
     * ```typescript
     * let context =  this.calendar.context;
     * ```
     * @return {?}
     */
    get context() {
        /** @type {?} */
        const date = this.viewDate;
        return this.generateContext(date);
    }
    /**
     * @hidden
     * @return {?}
     */
    get headerDate() {
        return this.selectedDates ? this.selectedDates : new Date();
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterViewInit() {
        this.startMonthScroll$.pipe(takeUntil(this.stopMonthScroll$), switchMap(() => this.daysView.scrollMonth$.pipe(skipLast(1), debounce(() => interval(300)), takeUntil(this.stopMonthScroll$)))).subscribe(() => {
            switch (this.daysView.monthScrollDirection) {
                case ScrollMonth.PREV:
                    this.previousMonth();
                    break;
                case ScrollMonth.NEXT:
                    this.nextMonth();
                    break;
                case ScrollMonth.NONE:
                default:
                    break;
            }
        });
    }
    /**
     * Returns the locale representation of the month in the month view if enabled,
     * otherwise returns the default `Date.getMonth()` value.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    formattedMonth(value) {
        if (this.formatViews.month) {
            return this.formatterMonth.format(value);
        }
        return `${value.getMonth()}`;
    }
    /**
     * @hidden
     * @param {?=} isKeydownTrigger
     * @return {?}
     */
    previousMonth(isKeydownTrigger = false) {
        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'month', -1);
        this._monthAction = 'prev';
        if (this.daysView) {
            this.daysView.isKeydownTrigger = isKeydownTrigger;
        }
    }
    /**
     * @hidden
     * @param {?=} isKeydownTrigger
     * @return {?}
     */
    nextMonth(isKeydownTrigger = false) {
        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'month', 1);
        this._monthAction = 'next';
        if (this.daysView) {
            this.daysView.isKeydownTrigger = isKeydownTrigger;
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    activeViewDecade() {
        super.activeViewDecade();
        requestAnimationFrame(() => {
            if (this.dacadeView) {
                this.dacadeView.el.nativeElement.focus();
            }
        });
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    activeViewDecadeKB(event) {
        super.activeViewDecadeKB(event);
        requestAnimationFrame(() => {
            if (this.dacadeView) {
                this.dacadeView.el.nativeElement.focus();
            }
        });
    }
    /**
     * @hidden
     * @return {?}
     */
    getFormattedDate() {
        /** @type {?} */
        const date = this.headerDate;
        return {
            monthday: this.formatterMonthday.format(date),
            weekday: this.formatterWeekday.format(date),
        };
    }
    /**
     * @hidden
     * @param {?} instance
     * @return {?}
     */
    childClicked(instance) {
        if (instance.isPrevMonth) {
            this.previousMonth();
        }
        if (instance.isNextMonth) {
            this.nextMonth();
        }
        this.selectDateFromClient(instance.date);
        this.onSelection.emit(this.selectedDates);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    viewChanged(event) {
        this.viewDate = this.calendarModel.timedelta(event, 'month', 0);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    changeMonth(event) {
        this.viewDate = new Date(this.viewDate.getFullYear(), event.getMonth());
        this.activeView = CalendarView.DEFAULT;
        requestAnimationFrame(() => {
            this.monthsBtn.nativeElement.focus();
        });
    }
    /**
     * @hidden
     * @return {?}
     */
    activeViewYear() {
        this.activeView = CalendarView.YEAR;
        requestAnimationFrame(() => {
            this.monthsView.dates.find((date) => date.isCurrentMonth).nativeElement.focus();
        });
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    activeViewYearKB(event) {
        if (event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */ || event.key === "Enter" /* ENTER */) {
            event.preventDefault();
            this.activeViewYear();
        }
    }
    /**
     * Deselects date(s) (based on the selection type).
     * ```typescript
     * this.calendar.deselectDate(new Date(`2018-06-12`));
     * ````
     * @param {?=} value
     * @return {?}
     */
    deselectDate(value) {
        super.deselectDate(value);
        this.daysView.selectedDates = this.selectedDates;
        this._onChangeCallback(this.selectedDates);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownPageUp(event) {
        event.preventDefault();
        /** @type {?} */
        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);
        if (activeDate) {
            this.daysView.nextDate = new Date(activeDate.date.date);
            /** @type {?} */
            let year = this.daysView.nextDate.getFullYear();
            /** @type {?} */
            let month = this.daysView.nextDate.getMonth() - 1;
            if (month < 0) {
                month = 11;
                year -= 1;
            }
            /** @type {?} */
            const range = monthRange(this.daysView.nextDate.getFullYear(), month);
            /** @type {?} */
            let day = this.daysView.nextDate.getDate();
            if (day > range[1]) {
                day = range[1];
            }
            this.daysView.nextDate.setDate(day);
            this.daysView.nextDate.setMonth(month);
            this.daysView.nextDate.setFullYear(year);
            this.daysView.callback = (dates, next) => {
                /** @type {?} */
                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());
                if (dayItem) {
                    dayItem.nativeElement.focus();
                }
            };
        }
        this.previousMonth(true);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownPageDown(event) {
        event.preventDefault();
        this.nextMonth(true);
        /** @type {?} */
        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);
        if (activeDate) {
            this.daysView.nextDate = new Date(activeDate.date.date);
            /** @type {?} */
            let year = this.daysView.nextDate.getFullYear();
            /** @type {?} */
            let month = this.daysView.nextDate.getMonth() + 1;
            if (month > 11) {
                month = 0;
                year += 1;
            }
            /** @type {?} */
            const range = monthRange(this.daysView.nextDate.getFullYear(), month);
            /** @type {?} */
            let day = this.daysView.nextDate.getDate();
            if (day > range[1]) {
                day = range[1];
            }
            this.daysView.nextDate.setDate(day);
            this.daysView.nextDate.setMonth(month);
            this.daysView.nextDate.setFullYear(year);
            this.daysView.callback = (dates, next) => {
                /** @type {?} */
                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());
                if (dayItem) {
                    dayItem.nativeElement.focus();
                }
            };
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownShiftPageUp(event) {
        event.preventDefault();
        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);
        this.daysView.animationAction = 'prev';
        this.daysView.isKeydownTrigger = true;
        /** @type {?} */
        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);
        if (activeDate) {
            this.daysView.nextDate = new Date(activeDate.date.date);
            /** @type {?} */
            const year = this.daysView.nextDate.getFullYear() - 1;
            /** @type {?} */
            const range = monthRange(year, this.daysView.nextDate.getMonth());
            /** @type {?} */
            let day = this.daysView.nextDate.getDate();
            if (day > range[1]) {
                day = range[1];
            }
            this.daysView.nextDate.setDate(day);
            this.daysView.nextDate.setFullYear(year);
            this.daysView.callback = (dates, next) => {
                /** @type {?} */
                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());
                if (dayItem) {
                    dayItem.nativeElement.focus();
                }
            };
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownShiftPageDown(event) {
        event.preventDefault();
        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);
        this.daysView.animationAction = 'next';
        this.daysView.isKeydownTrigger = true;
        /** @type {?} */
        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);
        if (activeDate) {
            this.daysView.nextDate = new Date(activeDate.date.date);
            /** @type {?} */
            const year = this.daysView.nextDate.getFullYear() + 1;
            /** @type {?} */
            const range = monthRange(year, this.daysView.nextDate.getMonth());
            /** @type {?} */
            let day = this.daysView.nextDate.getDate();
            if (day > range[1]) {
                day = range[1];
            }
            this.daysView.nextDate.setDate(day);
            this.daysView.nextDate.setFullYear(year);
            this.daysView.callback = (dates, next) => {
                /** @type {?} */
                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());
                if (dayItem) {
                    dayItem.nativeElement.focus();
                }
            };
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownHome(event) {
        if (this.daysView) {
            this.daysView.onKeydownHome(event);
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownEnd(event) {
        if (this.daysView) {
            this.daysView.onKeydownEnd(event);
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onMouseUp(event) {
        if (this.daysView && this.daysView.monthScrollDirection !== ScrollMonth.NONE) {
            this.stopMonthScroll(event);
        }
    }
    /**
     * Helper method building and returning the context object inside
     * the calendar templates.
     * @hidden
     * @private
     * @param {?} value
     * @return {?}
     */
    generateContext(value) {
        /** @type {?} */
        const formatObject = Object.assign({ monthView: () => this.activeViewYear(), yearView: () => this.activeViewDecade() }, this.calendarModel.formatToParts(value, this.locale, this.formatOptions, ['era', 'year', 'month', 'day', 'weekday']));
        return { $implicit: formatObject };
    }
}
IgxCalendarComponent.decorators = [
    { type: Component, args: [{
                providers: [
                    {
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: IgxCalendarComponent
                    }
                ],
                animations: [
                    trigger('animateView', [
                        transition('void => 0', useAnimation(fadeIn)),
                        transition('void => *', useAnimation(scaleInCenter, {
                            params: {
                                duration: '.2s',
                                fromScale: .9
                            }
                        }))
                    ])
                ],
                selector: 'igx-calendar',
                template: "<ng-template let-result #defaultHeader>\n    <span>{{ getFormattedDate().weekday }},&nbsp;</span>\n    <span>{{ getFormattedDate().monthday }}</span>\n</ng-template>\n\n<ng-template let-result #defaultMonth>\n    <span tabindex=\"0\" #monthsBtn (keydown)=\"activeViewYearKB($event)\" (click)=\"activeViewYear()\"\n        class=\"igx-calendar-picker__date\">\n        {{ formattedMonth(viewDate) }}\n    </span>\n    <span tabindex=\"0\" #yearsBtn (keydown)=\"activeViewDecadeKB($event)\" (click)=\"activeViewDecade()\"\n        class=\"igx-calendar-picker__date\">\n        {{ formattedYear(viewDate) }}\n    </span>\n</ng-template>\n\n<div *ngIf=\"selection === 'single' && hasHeader\" class=\"igx-calendar__header\">\n    <h5 class=\"igx-calendar__header-year\">{{ formattedYear(headerDate) }}</h5>\n    <h2 class=\"igx-calendar__header-date\">\n        <ng-container *ngTemplateOutlet=\"headerTemplate ? headerTemplate : defaultHeader; context: headerContext\">\n        </ng-container>\n    </h2>\n</div>\n\n<div *ngIf=\"isDefaultView\" class=\"igx-calendar__body\" [@animateView]=\"activeView\" (swiperight)=\"previousMonth()\"\n    (swipeleft)=\"nextMonth()\">\n    <div class=\"igx-calendar-picker\">\n        <div tabindex=\"0\" class=\"igx-calendar-picker__prev\" #prevMonthBtn\n            igxCalendarScrollMonth [startScroll]=\"startPrevMonthScroll\" [stopScroll]=\"stopMonthScroll\">\n            <igx-icon fontSet=\"material\">keyboard_arrow_left</igx-icon>\n        </div>\n        <div>\n            <ng-container *ngTemplateOutlet=\"subheaderTemplate ? subheaderTemplate : defaultMonth; context: context\">\n            </ng-container>\n        </div>\n        <div tabindex=\"0\" class=\"igx-calendar-picker__next\" #nextMonthBtn\n            igxCalendarScrollMonth [startScroll]=\"startNextMonthScroll\" [stopScroll]=\"stopMonthScroll\">\n            <igx-icon fontSet=\"material\">keyboard_arrow_right</igx-icon>\n        </div>\n    </div>\n\n    <igx-days-view [changeDaysView]=\"true\" #days\n                   [animationAction]=\"monthAction\"\n                   [locale]=\"locale\"\n                   [value]=\"value\"\n                   [viewDate]=\"viewDate\"\n                   [weekStart]=\"weekStart\"\n                   [formatOptions]=\"formatOptions\"\n                   [formatViews]=\"formatViews\"\n                   [selection]=\"selection\"\n                   [disabledDates]=\"disabledDates\"\n                   [specialDates]=\"specialDates\"\n                   (onViewChanged)=\"viewChanged($event)\"\n                   (onDateSelection)=\"childClicked($event)\">\n    </igx-days-view>\n</div>\n\n<igx-months-view *ngIf=\"isYearView\" [@animateView]=\"activeView\" #months \n                 [date]=\"viewDate\" \n                 [locale]=\"locale\"\n                 [formatView]=\"formatViews.month\"\n                 [monthFormat]=\"formatOptions.month\" \n                 (onSelection)=\"changeMonth($event)\">\n</igx-months-view>\n\n<igx-years-view *ngIf=\"isDecadeView\" [@animateView]=\"activeView\" #decade \n                [date]=\"viewDate\" \n                [locale]=\"locale\"\n                [formatView]=\"formatViews.year\"\n                [yearFormat]=\"formatOptions.year\" \n                (onSelection)=\"changeYear($event)\">\n</igx-years-view>"
            }] }
];
IgxCalendarComponent.propDecorators = {
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    hasHeader: [{ type: Input }],
    vertical: [{ type: Input }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    role: [{ type: HostBinding, args: ['attr.role',] }],
    ariaLabelledBy: [{ type: HostBinding, args: ['attr.aria-labelledby',] }],
    styleVerticalClass: [{ type: HostBinding, args: ['class.igx-calendar--vertical',] }],
    styleClass: [{ type: HostBinding, args: ['class.igx-calendar',] }],
    monthsView: [{ type: ViewChild, args: ['months', { read: IgxMonthsViewComponent },] }],
    monthsBtn: [{ type: ViewChild, args: ['monthsBtn',] }],
    dacadeView: [{ type: ViewChild, args: ['decade', { read: IgxYearsViewComponent },] }],
    daysView: [{ type: ViewChild, args: ['days', { read: IgxDaysViewComponent },] }],
    prevMonthBtn: [{ type: ViewChild, args: ['prevMonthBtn',] }],
    nextMonthBtn: [{ type: ViewChild, args: ['nextMonthBtn',] }],
    headerTemplateDirective: [{ type: ContentChild, args: [forwardRef(() => IgxCalendarHeaderTemplateDirective), { read: IgxCalendarHeaderTemplateDirective },] }],
    subheaderTemplateDirective: [{ type: ContentChild, args: [forwardRef(() => IgxCalendarSubheaderTemplateDirective), { read: IgxCalendarSubheaderTemplateDirective },] }],
    onKeydownPageUp: [{ type: HostListener, args: ['keydown.pageup', ['$event'],] }],
    onKeydownPageDown: [{ type: HostListener, args: ['keydown.pagedown', ['$event'],] }],
    onKeydownShiftPageUp: [{ type: HostListener, args: ['keydown.shift.pageup', ['$event'],] }],
    onKeydownShiftPageDown: [{ type: HostListener, args: ['keydown.shift.pagedown', ['$event'],] }],
    onKeydownHome: [{ type: HostListener, args: ['keydown.home', ['$event'],] }],
    onKeydownEnd: [{ type: HostListener, args: ['keydown.end', ['$event'],] }],
    onMouseUp: [{ type: HostListener, args: ['document:mouseup', ['$event'],] }]
};
if (false) {
    /**
     * Sets/gets the `id` of the calendar.
     * If not set, the `id` will have value `"igx-calendar-0"`.
     * ```html
     * <igx-calendar id = "my-first-calendar"></igx-calendar>
     * ```
     * ```typescript
     * let calendarId =  this.calendar.id;
     * ```
     * \@memberof IgxCalendarComponent
     * @type {?}
     */
    IgxCalendarComponent.prototype.id;
    /** @type {?} */
    IgxCalendarComponent.prototype.hasHeader;
    /**
     * Sets/gets whether the calendar header will be in vertical position.
     * Default value is `false`.
     * ```html
     * <igx-calendar [vertical] = "true"></igx-calendar>
     * ```
     * ```typescript
     * let isVertical = this.calendar.vertical;
     * ```
     * @type {?}
     */
    IgxCalendarComponent.prototype.vertical;
    /**
     * The default `tabindex` attribute for the component.
     *
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.tabindex;
    /**
     * The default aria role attribute for the component.
     *
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.role;
    /**
     * The default aria lebelled by attribute for the component.
     *
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.ariaLabelledBy;
    /**
     * The default css class applied to the component.
     *
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.styleClass;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.monthsView;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.monthsBtn;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.dacadeView;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.daysView;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.prevMonthBtn;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.nextMonthBtn;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarComponent.prototype.headerTemplateDirective;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarComponent.prototype.subheaderTemplateDirective;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarComponent.prototype._monthAction;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.startPrevMonthScroll;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.startNextMonthScroll;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.stopMonthScroll;
}
//# sourceMappingURL=data:application/json;base64,