/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, NgZone, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
/**
 * @hidden
 */
export class IgxScrollInertiaDirective {
    /**
     * @param {?} element
     * @param {?} _zone
     */
    constructor(element, _zone) {
        this.element = element;
        this._zone = _zone;
        this.wheelStep = 50;
        this.inertiaStep = 1.5;
        this.swipeToleranceX = 20;
        this.inertiaDeltaY = 3;
        this.inertiaDeltaX = 2;
        this.inertiaDuration = 0.5;
        this._savedSpeedsX = [];
        this.setPointerCaptureFName = typeof Element.prototype['msSetPointerCapture'] === 'function' ?
            'msSetPointerCapture' :
            'setPointerCapture';
        this.releasePointerCaptureFName = typeof Element.prototype['msReleasePointerCapture'] === 'function' ?
            'msReleasePointerCapture' :
            'releasePointerCapture';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._zone.runOutsideAngular(() => {
            /** @type {?} */
            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;
            targetElem.addEventListener('wheel', (evt) => { this.onWheel(evt); });
            targetElem.addEventListener('touchstart', (evt) => { this.onTouchStart(evt); });
            targetElem.addEventListener('touchmove', (evt) => { this.onTouchMove(evt); });
            targetElem.addEventListener('touchend', (evt) => { this.onTouchEnd(evt); });
            targetElem.addEventListener('pointerdown', (evt) => { this.onPointerDown(evt); });
            targetElem.addEventListener('pointerup', (evt) => { this.onPointerUp(evt); });
            targetElem.addEventListener('MSGestureStart', (evt) => { this.onMSGestureStart(evt); });
            targetElem.addEventListener('MSGestureChange', (evt) => { this.onMSGestureChange(evt); });
        });
    }
    /**
     * @hidden
     * Function that is called when scrolling with the mouse wheel or using touchpad
     * @protected
     * @param {?} evt
     * @return {?}
     */
    onWheel(evt) {
        // if no scrollbar return
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        /** @type {?} */
        let scrollDeltaX;
        /** @type {?} */
        let scrollDeltaY;
        /** @type {?} */
        const scrollStep = this.wheelStep;
        /** @type {?} */
        const minWheelStep = 1 / this.wheelStep;
        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;
        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;
        if (evt.wheelDeltaX) {
            /* Option supported on Chrome, Safari, Opera.
            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */
            scrollDeltaX = -evt.wheelDeltaX / 120;
            if (-minWheelStep < scrollDeltaX && scrollDeltaX < minWheelStep) {
                scrollDeltaX = Math.sign(scrollDeltaX) * minWheelStep;
            }
        }
        else if (evt.deltaX) {
            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */
            scrollDeltaX = this.calcAxisCoords(evt.deltaX, -1, 1);
        }
        /** Get delta for the Y axis*/
        if (evt.wheelDeltaY) {
            /* Option supported on Chrome, Safari, Opera.
            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */
            scrollDeltaY = -evt.wheelDeltaY / 120;
            if (-minWheelStep < scrollDeltaY && scrollDeltaY < minWheelStep) {
                scrollDeltaY = Math.sign(scrollDeltaY) * minWheelStep;
            }
        }
        else if (evt.deltaY) {
            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */
            scrollDeltaY = this.calcAxisCoords(evt.deltaY, -1, 1);
        }
        if (scrollDeltaX && this.IgxScrollInertiaDirection === 'horizontal') {
            this._scrollToX(this._startX + scrollDeltaX * scrollStep);
            /** @type {?} */
            const curScrollLeft = this.IgxScrollInertiaScrollContainer.scrollLeft;
            /** @type {?} */
            const maxScrollLeft = parseInt(this.IgxScrollInertiaScrollContainer.children[0].style.width, 10);
            if (0 < curScrollLeft && curScrollLeft < maxScrollLeft) {
                // Prevent navigating through pages when scrolling on Mac
                evt.preventDefault();
            }
        }
        else if (scrollDeltaY && this.IgxScrollInertiaDirection === 'vertical') {
            this._scrollToY(this._startY + scrollDeltaY * scrollStep);
            this.preventParentScroll(evt);
        }
    }
    /**
     * @hidden
     * When there is still room to scroll up/down prevent the parent elements from scrolling too.
     * @protected
     * @param {?} evt
     * @return {?}
     */
    preventParentScroll(evt) {
        /** @type {?} */
        const curScrollTop = this.IgxScrollInertiaScrollContainer.scrollTop;
        /** @type {?} */
        const maxScrollTop = this.IgxScrollInertiaScrollContainer.children[0].scrollHeight -
            this.IgxScrollInertiaScrollContainer.offsetHeight;
        if (0 < curScrollTop && curScrollTop < maxScrollTop) {
            evt.preventDefault();
            if (evt.stopPropagation) {
                evt.stopPropagation();
            }
        }
    }
    /**
     * @hidden
     * Function that is called the first moment we start interacting with the content on a touch device
     * @protected
     * @param {?} event
     * @return {?}
     */
    onTouchStart(event) {
        if (typeof MSGesture === 'function' || !this.IgxScrollInertiaScrollContainer) {
            return false;
        }
        // stops any current ongoing inertia
        cancelAnimationFrame(this._touchInertiaAnimID);
        /** @type {?} */
        const touch = event.touches[0];
        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;
        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;
        this._touchStartX = touch.pageX;
        this._touchStartY = touch.pageY;
        this._lastTouchEnd = new Date().getTime();
        this._lastTouchX = touch.pageX;
        this._lastTouchY = touch.pageY;
        this._savedSpeedsX = [];
        this._savedSpeedsY = [];
        // Vars regarding swipe offset
        this._totalMovedX = 0;
        this._offsetRecorded = false;
        this._offsetDirection = 0;
        this._touchPrevented = false;
        if (this.IgxScrollInertiaDirection === 'vertical') {
            this.preventParentScroll(event);
        }
    }
    /**
     * @hidden
     * Function that is called when we need to scroll the content based on touch interactions
     * @protected
     * @param {?} event
     * @return {?}
     */
    onTouchMove(event) {
        if (typeof MSGesture === 'function') {
            this._touchPrevented = false;
            return false;
        }
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        /** @type {?} */
        const touch = event.touches[0];
        /** @type {?} */
        const destX = this._startX + (this._touchStartX - touch.pageX) * Math.sign(this.inertiaStep);
        /** @type {?} */
        const destY = this._startY + (this._touchStartY - touch.pageY) * Math.sign(this.inertiaStep);
        /* Handle complex touchmoves when swipe stops but the toch doesn't end and then a swipe is initiated again */
        /* **********************************************************/
        /** @type {?} */
        const timeFromLastTouch = (new Date().getTime()) - this._lastTouchEnd;
        if (timeFromLastTouch !== 0 && timeFromLastTouch < 100) {
            /** @type {?} */
            const speedX = (this._lastTouchX - touch.pageX) / timeFromLastTouch;
            /** @type {?} */
            const speedY = (this._lastTouchY - touch.pageY) / timeFromLastTouch;
            // Save the last 5 speeds between two touchmoves on X axis
            if (this._savedSpeedsX.length < 5) {
                this._savedSpeedsX.push(speedX);
            }
            else {
                this._savedSpeedsX.shift();
                this._savedSpeedsX.push(speedX);
            }
            // Save the last 5 speeds between two touchmoves on Y axis
            if (this._savedSpeedsY.length < 5) {
                this._savedSpeedsY.push(speedY);
            }
            else {
                this._savedSpeedsY.shift();
                this._savedSpeedsY.push(speedY);
            }
        }
        this._lastTouchEnd = new Date().getTime();
        this._lastMovedX = this._lastTouchX - touch.pageX;
        this._lastMovedY = this._lastTouchY - touch.pageY;
        this._lastTouchX = touch.pageX;
        this._lastTouchY = touch.pageY;
        this._totalMovedX += this._lastMovedX;
        /** @type {?} */
        let scrolledXY;
        /*	Do not scroll using touch untill out of the swipeToleranceX bounds */
        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {
            scrolledXY = this._scrollTo(this._startX, destY);
        }
        else {
            /*	Record the direction the first time we are out of the swipeToleranceX bounds.
            *	That way we know which direction we apply the offset so it doesn't hickup when moving out of the swipeToleranceX bounds */
            if (!this._offsetRecorded) {
                this._offsetDirection = Math.sign(destX - this._startX);
                this._offsetRecorded = true;
            }
            /*	Scroll with offset ammout of swipeToleranceX in the direction we have exited the bounds and
            don't change it after that ever until touchend and again touchstart */
            scrolledXY = this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);
        }
        if (scrolledXY.x === 0 && scrolledXY.y === 0) {
            this._touchPrevented = true;
        }
        // On Safari preventing the touchmove would prevent default page scroll behaviour even if there is the element doesn't have overflow
        if (this.IgxScrollInertiaDirection === 'vertical') {
            this.preventParentScroll(event);
        }
    }
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    onTouchEnd(event) {
        if (typeof MSGesture === 'function') {
            return;
        }
        /** @type {?} */
        let speedX = 0;
        /** @type {?} */
        let speedY = 0;
        // savedSpeedsX and savedSpeedsY have same length
        for (let i = 0; i < this._savedSpeedsX.length; i++) {
            speedX += this._savedSpeedsX[i];
            speedY += this._savedSpeedsY[i];
        }
        speedX = this._savedSpeedsX.length ? speedX / this._savedSpeedsX.length : 0;
        speedY = this._savedSpeedsX.length ? speedY / this._savedSpeedsY.length : 0;
        // Use the lastMovedX and lastMovedY to determine if the swipe stops without lifting the finger so we don't start inertia
        if ((Math.abs(speedX) > 0.1 || Math.abs(speedY) > 0.1) &&
            (Math.abs(this._lastMovedX) > 2 || Math.abs(this._lastMovedY) > 2)) {
            this._inertiaInit(speedX, speedY);
        }
        if (this.IgxScrollInertiaDirection === 'vertical') {
            this.preventParentScroll(event);
        }
    }
    /**
     * @hidden
     * Function that is called when we need to detect touch starting on a touch device on IE/Edge
     * @protected
     * @param {?} event
     * @return {?}
     */
    onPointerDown(event) {
        if (!event || (event.pointerType !== 2 && event.pointerType !== 'touch') ||
            typeof MSGesture !== 'function') {
            return true;
        }
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        // setPointerCaptureFName is the name of the function that is supported
        event.target[this.setPointerCaptureFName](this._pointer = event.pointerId);
        // create gestureObject only one time to prevent overlapping during intertia
        if (!this._gestureObject) {
            this._gestureObject = new MSGesture();
            this._gestureObject.target = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;
        }
        this._gestureObject.addPointer(this._pointer);
    }
    /**
     * @hidden
     * Function that is called when we need to detect touch ending on a touch device on IE/Edge
     * @protected
     * @param {?} event
     * @return {?}
     */
    onPointerUp(event) {
        if (!this._pointer) {
            return true;
        }
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        /* releasePointerCaptureFName is the name of the function that is supported */
        event.target[this.releasePointerCaptureFName](this._pointer);
        delete this._pointer;
    }
    /**
     * @hidden
     *  Function that is called when a gesture begins on IE/Edge
     * @protected
     * @param {?} event
     * @return {?}
     */
    onMSGestureStart(event) {
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;
        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;
        this._touchStartX = event.screenX;
        this._touchStartY = event.screenY;
        // Vars regarding swipe offset
        this._totalMovedX = 0;
        this._offsetRecorded = false;
        this._offsetDirection = 0;
        return false;
    }
    /**
     * @hidden
     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge
     * @protected
     * @param {?} event
     * @return {?}
     */
    onMSGestureChange(event) {
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        /** @type {?} */
        const touchPos = event;
        /** @type {?} */
        const destX = this._startX + this._touchStartX - touchPos.screenX;
        /** @type {?} */
        const destY = this._startY + this._touchStartY - touchPos.screenY;
        /* Logic regarding x tolerance to prevent accidental horizontal scrolling when scrolling vertically */
        this._totalMovedX = this._touchStartX - touchPos.screenX;
        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {
            /* Do not scroll horizontally yet while in the tolerance range */
            this._scrollToY(destY);
        }
        else {
            if (!this._offsetRecorded) {
                this._offsetDirection = Math.sign(destX - this._startX);
                this._offsetRecorded = true;
            }
            /* Once the tolerance is exceeded it can be scrolled horizontally */
            this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);
        }
        return false;
    }
    /**
     * @private
     * @param {?} target
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    calcAxisCoords(target, min, max) {
        if (target === undefined || target < min) {
            target = min;
        }
        else if (target > max) {
            target = max;
        }
        return target;
    }
    /**
     * @private
     * @param {?} destX
     * @param {?} destY
     * @return {?}
     */
    _scrollTo(destX, destY) {
        /** @type {?} */
        const curPosX = this.IgxScrollInertiaScrollContainer.scrollLeft;
        /** @type {?} */
        const curPosY = this.IgxScrollInertiaScrollContainer.scrollTop;
        // TODO Trigger scrolling event?
        /** @type {?} */
        const scrolledX = this._scrollToX(destX);
        /** @type {?} */
        const scrolledY = this._scrollToY(destY);
        return { x: scrolledX, y: scrolledY };
    }
    /**
     * @private
     * @param {?} dest
     * @return {?}
     */
    _scrollToX(dest) {
        this.IgxScrollInertiaScrollContainer.scrollLeft = dest;
    }
    /**
     * @private
     * @param {?} dest
     * @return {?}
     */
    _scrollToY(dest) {
        this.IgxScrollInertiaScrollContainer.scrollTop = dest;
    }
    /**
     * @protected
     * @param {?} speedX
     * @param {?} speedY
     * @return {?}
     */
    _inertiaInit(speedX, speedY) {
        /** @type {?} */
        const stepModifer = this.inertiaStep;
        /** @type {?} */
        const inertiaDuration = this.inertiaDuration;
        /** @type {?} */
        let x = 0;
        this._nextX = this.IgxScrollInertiaScrollContainer.scrollLeft;
        this._nextY = this.IgxScrollInertiaScrollContainer.scrollTop;
        // Sets timeout until executing next movement iteration of the inertia
        /** @type {?} */
        const inertiaStep = () => {
            if (x > 6) {
                cancelAnimationFrame(this._touchInertiaAnimID);
                return;
            }
            if (Math.abs(speedX) > Math.abs(speedY)) {
                x += 0.05 / (1 * inertiaDuration);
            }
            else {
                x += 0.05 / (1 * inertiaDuration);
            }
            if (x <= 1) {
                // We use constant quation to determine the offset without speed falloff befor x reaches 1
                if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {
                    this._nextX += 1 * speedX * 15 * stepModifer;
                }
                if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {
                    this._nextY += 1 * speedY * 15 * stepModifer;
                }
            }
            else {
                // We use the quation "y = 2 / (x + 0.55) - 0.3" to determine the offset
                if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {
                    this._nextX += Math.abs(2 / (x + 0.55) - 0.3) * speedX * 15 * stepModifer;
                }
                if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {
                    this._nextY += Math.abs(2 / (x + 0.55) - 0.3) * speedY * 15 * stepModifer;
                }
            }
            // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse
            this._scrollTo(this._nextX, this._nextY);
            this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);
        };
        // Start inertia and continue it recursively
        this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._zone.runOutsideAngular(() => {
            /** @type {?} */
            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;
            targetElem.removeEventListener('wheel', (evt) => { this.onWheel(evt); });
            targetElem.removeEventListener('touchstart', (evt) => { this.onTouchStart(evt); });
            targetElem.removeEventListener('touchmove', (evt) => { this.onTouchMove(evt); });
            targetElem.removeEventListener('touchend', (evt) => { this.onTouchEnd(evt); });
            targetElem.removeEventListener('pointerdown', (evt) => { this.onPointerDown(evt); });
            targetElem.removeEventListener('pointerup', (evt) => { this.onPointerUp(evt); });
            targetElem.removeEventListener('MSGestureStart', (evt) => { this.onMSGestureStart(evt); });
            targetElem.removeEventListener('MSGestureChange', (evt) => { this.onMSGestureChange(evt); });
        });
    }
}
IgxScrollInertiaDirective.decorators = [
    { type: Directive, args: [{ selector: '[igxScrollInertia]' },] }
];
/** @nocollapse */
IgxScrollInertiaDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone }
];
IgxScrollInertiaDirective.propDecorators = {
    IgxScrollInertiaDirection: [{ type: Input }],
    IgxScrollInertiaScrollContainer: [{ type: Input }],
    wheelStep: [{ type: Input }],
    inertiaStep: [{ type: Input }],
    swipeToleranceX: [{ type: Input }],
    inertiaDeltaY: [{ type: Input }],
    inertiaDeltaX: [{ type: Input }],
    inertiaDuration: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.IgxScrollInertiaDirection;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.IgxScrollInertiaScrollContainer;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.wheelStep;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.inertiaStep;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.swipeToleranceX;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.inertiaDeltaY;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.inertiaDeltaX;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.inertiaDuration;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._touchInertiaAnimID;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._startX;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._startY;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._touchStartX;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._touchStartY;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._lastTouchEnd;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._lastTouchX;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._lastTouchY;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._savedSpeedsX;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._savedSpeedsY;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._totalMovedX;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._offsetRecorded;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._offsetDirection;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._touchPrevented;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._lastMovedX;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._lastMovedY;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._gestureObject;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype.setPointerCaptureFName;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype.releasePointerCaptureFName;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._pointer;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._nextX;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._nextY;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    IgxScrollInertiaDirective.prototype._zone;
}
/**
 * @hidden
 */
export class IgxScrollInertiaModule {
}
IgxScrollInertiaModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxScrollInertiaDirective],
                exports: [IgxScrollInertiaDirective],
                imports: [CommonModule]
            },] }
];
//# sourceMappingURL=data:application/json;base64,