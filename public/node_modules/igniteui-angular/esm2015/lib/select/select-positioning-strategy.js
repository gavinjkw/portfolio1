/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { VerticalAlignment, HorizontalAlignment, Point, getViewportRect } from '../services/overlay/utilities';
import { ConnectedPositioningStrategy } from '../services/overlay/position/connected-positioning-strategy';
import { fadeOut, fadeIn } from '../animations/main';
import { isIE } from '../core/utils';
/** @enum {number} */
const Direction = {
    Top: -1,
    Bottom: 1,
    None: 0,
};
Direction[Direction.Top] = 'Top';
Direction[Direction.Bottom] = 'Bottom';
Direction[Direction.None] = 'None';
/**
 * @hidden \@internal
 */
export class SelectPositioningStrategy extends ConnectedPositioningStrategy {
    /**
     * @param {?} select
     * @param {?=} settings
     */
    constructor(select, settings) {
        super();
        this.select = select;
        this._selectDefaultSettings = {
            target: null,
            horizontalDirection: HorizontalAlignment.Right,
            verticalDirection: VerticalAlignment.Bottom,
            horizontalStartPoint: HorizontalAlignment.Left,
            verticalStartPoint: VerticalAlignment.Top,
            openAnimation: fadeIn,
            closeAnimation: fadeOut
        };
        this.defaultWindowToListOffset = 5;
        this.viewPort = getViewportRect(document);
        this.settings = Object.assign({}, this._selectDefaultSettings, settings);
    }
    /**
     * @private
     * @param {?} contentElement
     * @param {?} outBoundsAmount
     * @return {?}
     */
    positionAndScrollBottom(contentElement, outBoundsAmount) {
        contentElement.style.top = `${this.viewPort.bottom - this.listContainerBoundRect.height - this.defaultWindowToListOffset}px`;
        contentElement.firstElementChild.scrollTop -= outBoundsAmount - (this.inputBorderTop - this.defaultWindowToListOffset);
        this.deltaY = this.viewPort.bottom - this.listContainerBoundRect.height -
            this.defaultWindowToListOffset - ((/** @type {?} */ (this.select.input.nativeElement.getBoundingClientRect()))).top;
    }
    /**
     * @private
     * @param {?} contentElement
     * @param {?} CURRENT_POSITION_Y
     * @return {?}
     */
    positionNoScroll(contentElement, CURRENT_POSITION_Y) {
        contentElement.style.top = `${CURRENT_POSITION_Y - this.inputBorderTop}px`;
        this.deltaY = CURRENT_POSITION_Y - this.inputBorderTop -
            ((/** @type {?} */ (this.select.input.nativeElement.getBoundingClientRect()))).top;
    }
    /**
     * @private
     * @param {?} contentElement
     * @param {?} outBoundsAmount
     * @return {?}
     */
    positionAndScrollTop(contentElement, outBoundsAmount) {
        contentElement.style.top = `${this.viewPort.top + this.defaultWindowToListOffset}px`;
        contentElement.firstElementChild.scrollTop += outBoundsAmount + this.inputBorderTop + this.defaultWindowToListOffset;
        this.deltaY = this.viewPort.top + this.defaultWindowToListOffset -
            ((/** @type {?} */ (this.select.input.nativeElement.getBoundingClientRect()))).top;
    }
    /**
     * @private
     * @param {?} contentElement
     * @param {?} itemHeight
     * @return {?}
     */
    getItemsOutOfView(contentElement, itemHeight) {
        if (contentElement.firstElementChild.scrollHeight <= contentElement.firstElementChild.clientHeight) {
            return {
                'currentScroll': 0,
                'remainingScroll': 0
            };
        }
        /** @type {?} */
        const currentScroll = contentElement.firstElementChild.scrollTop;
        /** @type {?} */
        const remainingScroll = this.select.items.length * itemHeight - currentScroll - this.listContainerBoundRect.height;
        return {
            'currentScroll': currentScroll,
            'remainingScroll': remainingScroll
        };
    }
    /**
     * @private
     * @param {?} elementContainer
     * @param {?} document
     * @return {?}
     */
    listOutOfBounds(elementContainer, document) {
        /** @type {?} */
        const container = {
            TOP: elementContainer.top,
            BOTTOM: elementContainer.bottom,
        };
        /** @type {?} */
        const viewPort = getViewportRect(document);
        /** @type {?} */
        const documentElement = {
            TOP: viewPort.top,
            BOTTOM: viewPort.bottom
        };
        /** @type {?} */
        const returnVals = {
            Direction: Direction.None,
            Amount: 0
        };
        if (documentElement.TOP + this.defaultWindowToListOffset > container.TOP) {
            returnVals.Direction = Direction.Top;
            returnVals.Amount = documentElement.TOP - container.TOP;
        }
        else if (documentElement.BOTTOM - this.defaultWindowToListOffset < container.BOTTOM) {
            returnVals.Direction = Direction.Bottom;
            returnVals.Amount = container.BOTTOM - documentElement.BOTTOM;
        }
        else {
            return null;
        }
        return returnVals;
    }
    /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    position(contentElement, size, document, initialCall) {
        /** @type {?} */
        const inputElement = this.select.input.nativeElement;
        /** @type {?} */
        const inputRect = (/** @type {?} */ (inputElement.getBoundingClientRect()));
        this.listContainerBoundRect = (/** @type {?} */ (contentElement.getBoundingClientRect()));
        /** @type {?} */
        const LIST_HEIGHT = this.listContainerBoundRect.height;
        if (!initialCall) {
            this.deltaX = inputRect.left - this.itemTextPadding - this.itemTextIndent;
            /** @type {?} */
            const point = new Point(this.deltaX, inputRect.top + this.deltaY);
            this.settings.target = point;
            super.position(contentElement, size);
            return;
        }
        /** @type {?} */
        const START = {
            X: inputRect.left,
            Y: inputRect.top
        };
        /** @type {?} */
        let itemElement;
        if (this.select.selectedItem) {
            itemElement = this.select.selectedItem.element.nativeElement;
            // D.P. Feb 22 2019, #3921 Force item scroll before measuring in IE11, due to base scrollToItem delay
            if (isIE()) {
                contentElement.firstElementChild.scrollTop = this.select.calculateScrollPosition(this.select.selectedItem);
            }
        }
        else {
            itemElement = this.select.getFirstItemElement();
        }
        /** @type {?} */
        const inputHeight = inputRect.height;
        /** @type {?} */
        const itemBoundRect = (/** @type {?} */ (itemElement.getBoundingClientRect()));
        /** @type {?} */
        const itemTopListOffset = itemBoundRect.top - this.listContainerBoundRect.top;
        /** @type {?} */
        const itemHeight = itemBoundRect.height;
        /** @type {?} */
        let CURRENT_POSITION_Y = START.Y - itemTopListOffset;
        /** @type {?} */
        const CURRENT_BOTTOM_Y = CURRENT_POSITION_Y + this.listContainerBoundRect.height;
        /** @type {?} */
        const OUT_OF_BOUNDS = this.listOutOfBounds({ top: CURRENT_POSITION_Y, bottom: CURRENT_BOTTOM_Y }, document);
        if (OUT_OF_BOUNDS) {
            if (OUT_OF_BOUNDS.Direction === Direction.Top) {
                CURRENT_POSITION_Y = START.Y;
            }
            else {
                CURRENT_POSITION_Y = -1 * (LIST_HEIGHT - (itemHeight - (itemHeight - inputHeight) / 2));
                CURRENT_POSITION_Y += START.Y;
            }
        }
        /** @type {?} */
        const inputBorderTop = window.getComputedStyle(inputElement).borderTopWidth;
        this.inputBorderTop = parseInt(inputBorderTop.slice(0, inputBorderTop.indexOf('p')), 10) || 0;
        /** @type {?} */
        const itemLeftPadding = window.getComputedStyle(itemElement).paddingLeft;
        /** @type {?} */
        const itemTextIndent = window.getComputedStyle(itemElement).textIndent;
        /** @type {?} */
        const numericPadding = parseInt(itemLeftPadding.slice(0, itemLeftPadding.indexOf('p')), 10) || 0;
        /** @type {?} */
        const numericTextIndent = parseInt(itemTextIndent.slice(0, itemTextIndent.indexOf('r')), 10) || 0;
        this.itemTextPadding = numericPadding;
        this.itemTextIndent = numericTextIndent;
        contentElement.style.left += `${START.X - numericPadding - numericTextIndent}px`;
        contentElement.style.width = inputRect.width + 24 + 32 + 'px';
        this.deltaX = START.X - numericPadding - numericTextIndent;
        /** @type {?} */
        const currentScroll = this.getItemsOutOfView(contentElement, itemHeight)['currentScroll'];
        /** @type {?} */
        const remainingScroll = this.getItemsOutOfView(contentElement, itemHeight)['remainingScroll'];
        // (5 items or less) no scroll and respectively no remaining scroll
        if (remainingScroll === 0 && currentScroll === 0) {
            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);
        }
        // (more than 5 items) there is scroll OR remaining scroll
        if (remainingScroll !== 0 || currentScroll !== 0) {
            if (remainingScroll !== 0 && !OUT_OF_BOUNDS) {
                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);
            }
            // (more than 5 items) and container getting out of the visible port
            if (remainingScroll !== 0 && OUT_OF_BOUNDS) {
                // if there is enough remaining scroll to scroll the item
                if (remainingScroll > itemHeight) {
                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {
                        this.positionAndScrollTop(contentElement, OUT_OF_BOUNDS.Amount);
                        return;
                    }
                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {
                        // (more than 5 items) and no current scroll
                        if (currentScroll === 0) {
                            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);
                            return;
                            // (more than 5 items) and current scroll
                        }
                        else {
                            this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);
                            return;
                        }
                    }
                }
                // if there is no enough remaining scroll to scroll the item
                if (remainingScroll < itemHeight) {
                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {
                        this.positionNoScroll(contentElement, CURRENT_POSITION_Y);
                    }
                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {
                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);
                    }
                }
            }
            // (more than 5 items) and no remaining scroll
            if (remainingScroll === 0 && currentScroll !== 0) {
                if (OUT_OF_BOUNDS) {
                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {
                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);
                        return;
                    }
                }
                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);
            }
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype._selectDefaultSettings;
    /** @type {?} */
    SelectPositioningStrategy.prototype.settings;
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype.defaultWindowToListOffset;
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype.viewPort;
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype.deltaY;
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype.deltaX;
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype.itemTextPadding;
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype.itemTextIndent;
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype.inputBorderTop;
    /**
     * @type {?}
     * @private
     */
    SelectPositioningStrategy.prototype.listContainerBoundRect;
    /** @type {?} */
    SelectPositioningStrategy.prototype.select;
}
//# sourceMappingURL=data:application/json;base64,