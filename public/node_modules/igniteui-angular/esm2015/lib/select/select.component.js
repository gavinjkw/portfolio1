/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { IgxInputDirective } from './../directives/input/input.directive';
import { Component, ContentChildren, forwardRef, QueryList, ViewChild, Input, ContentChild, HostBinding, Directive, TemplateRef, ElementRef, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxInputGroupComponent } from '../input-group/input-group.component';
import { IgxDropDownComponent } from './../drop-down/drop-down.component';
import { IgxSelectItemComponent } from './select-item.component';
import { SelectPositioningStrategy } from './select-positioning-strategy';
import { AbsoluteScrollStrategy } from '../services/index';
import { IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';
import { IgxLabelDirective } from '../directives/label/label.directive';
import { IgxSelectionAPIService } from '../core/selection';
/**
 * @hidden \@internal
 */
export class IgxSelectToggleIconDirective {
}
IgxSelectToggleIconDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxSelectToggleIcon]'
            },] }
];
/** @type {?} */
const noop = () => { };
const Éµ0 = noop;
/**
 * **Ignite UI for Angular Select** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/select.html)
 *
 * The `igxSelect` provides an input with dropdown list allowing selection of a single item.
 *
 * Example:
 * ```html
 * <igx-select #select1 [placeholder]="'Pick One'">
 *   <label igxLabel>Select Label</label>
 *   <igx-select-item *ngFor="let item of items" [value]="item.field">
 *     {{ item.field }}
 *   </igx-select-item>
 * </igx-select>
 * ```
 */
export class IgxSelectComponent extends IgxDropDownComponent {
    /**
     * @param {?} elementRef
     * @param {?} cdr
     * @param {?} selection
     */
    constructor(elementRef, cdr, selection) {
        super(elementRef, cdr, selection);
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.selection = selection;
        /**
         * @hidden \@internal do not use the drop-down container class
         */
        this.cssClass = false;
        /**
         * @hidden \@internal
         */
        this.allowItemsFocus = false;
        /**
         * An \@Input property that sets input placeholder.
         *
         */
        this.placeholder = '';
        /**
         * An \@Input property that disables the `IgxSelectComponent`.
         * ```html
         * <igx-select [disabled]="'true'"></igx-select>
         * ```
         */
        this.disabled = false;
        /**
         * @hidden \@internal
         */
        this.maxHeight = '256px';
        /**
         * An \@Input property that sets how the select will be styled.
         * The allowed values are `line`, `box` and `border`. The default is `line`.
         * ```html
         * <igx-select [type]="'box'"></igx-select>
         * ```
         */
        this.type = 'line';
        /**
         * An \@Input property that sets what display density to be used for the input group.
         * The allowed values are `compact`, `cosy` and `comfortable`. The default is `comfortable`.
         * ```html
         * <igx-select [displayDensity]="'compact'"></igx-select>
         * ```
         */
        this.displayDensity = 'comfortable';
        /**
         * The custom template, if any, that should be used when rendering the select TOGGLE(open/close) button
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.select.toggleIconTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-select #select>
         *      ...
         *      <ng-template igxSelectToggleIcon let-collapsed>
         *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>
         *      </ng-template>
         *  </igx-select>
         * ```
         */
        this.toggleIconTemplate = null;
        /**
         * @hidden \@internal
         */
        this._onChangeCallback = noop;
        /**
         * @hidden \@internal
         */
        this.writeValue = (value) => {
            this.value = value;
        };
    }
    /**
     * An \@Input property that gets/sets the component value.
     *
     * ```typescript
     * // get
     * let selectValue = this.select.value;
     * ```
     *
     * ```typescript
     * // set
     * this.select.value = 'London';
     * ```
     * ```html
     * <igx-select [value]="value"></igx-select>
     * ```
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (this._value === v) {
            return;
        }
        this._value = v;
        this.setSelection(this.items.find(x => x.value === this.value));
        this.cdr.detectChanges();
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    get selectionValue() {
        /** @type {?} */
        const selectedItem = this.selectedItem;
        return selectedItem ? selectedItem.itemText : '';
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    get selectedItem() {
        return this.selection.first_item(this.id);
    }
    /**
     * @hidden \@internal
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /**
     * @hidden \@internal
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { }
    /**
     * @hidden \@internal
     * @return {?}
     */
    getEditElement() {
        return this.input.nativeElement;
    }
    /**
     * @hidden \@internal
     * @param {?} newSelection
     * @param {?=} event
     * @return {?}
     */
    selectItem(newSelection, event) {
        /** @type {?} */
        const oldSelection = this.selectedItem;
        if (event) {
            this.toggleDirective.close();
        }
        if (newSelection === null || newSelection === oldSelection || newSelection.disabled || newSelection.isHeader) {
            return;
        }
        /** @type {?} */
        const args = { oldSelection, newSelection, cancel: false };
        this.onSelection.emit(args);
        if (args.cancel) {
            return;
        }
        this.setSelection(newSelection);
        this._value = newSelection.value;
        this.cdr.detectChanges();
        this._onChangeCallback(this.value);
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    getFirstItemElement() {
        return this.children.first.element.nativeElement;
    }
    /**
     * Opens the select
     *
     * ```typescript
     * this.select.open();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    open(overlaySettings) {
        if (this.disabled || this.items.length === 0) {
            return;
        }
        if (!this.selectedItem) {
            this.navigateFirst();
        }
        super.open(Object.assign({}, this._overlayDefaults, this.overlaySettings, overlaySettings));
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    ngAfterContentInit() {
        this._overlayDefaults = {
            modal: false,
            closeOnOutsideClick: false,
            positionStrategy: new SelectPositioningStrategy(this, { target: this.inputGroup.element.nativeElement }),
            scrollStrategy: new AbsoluteScrollStrategy(),
            excludePositionTarget: true
        };
        this.children.changes.subscribe(() => {
            this.setSelection(this.items.find(x => x.value === this.value));
            this.cdr.detectChanges();
        });
        Promise.resolve().then(() => this.children.notifyOnChanges());
    }
    /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    onToggleOpening(event) {
        this.onOpening.emit(event);
        if (event.cancel) {
            return;
        }
        this.scrollToItem(this.selectedItem);
    }
    /**
     * @protected
     * @param {?} direction
     * @param {?=} currentIndex
     * @return {?}
     */
    navigate(direction, currentIndex) {
        if (this.collapsed && this.selectedItem) {
            this.navigateItem(this.selectedItem.itemIndex);
        }
        super.navigate(direction, currentIndex);
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    setSelection(item) {
        if (item && item.value !== undefined && item.value !== null) {
            this.selection.set(this.id, new Set([item]));
        }
        else {
            this.selection.clear(this.id);
        }
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    onBlur() {
        if (!this.collapsed) {
            this.toggleDirective.close();
        }
    }
}
IgxSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-select',
                template: "<igx-input-group #inputGroup class=\"input-group\" [disabled]=\"disabled\" (click)=\"toggle()\" [type]=\"type\" [displayDensity]=\"displayDensity\">\n    <ng-container ngProjectAs=\"[igxLabel]\">\n        <ng-content select=\"[igxLabel]\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"igx-prefix\">\n        <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n    </ng-container>\n        <input #input class=\"input\" type=\"text\" igxInput [igxSelectItemNavigation]=\"this\"\n            readonly=\"true\"\n            [placeholder]=\"this.placeholder\"\n            [value]=\"this.selectionValue\"\n            role=\"combobox\"\n            aria-haspopup=\"listbox\"\n            [attr.aria-labelledby]=\"this.label ? this.label.id : ''\"\n            [attr.aria-expanded]=\"!this.collapsed\"\n            [attr.aria-owns]=\"this.listId\"\n            [attr.aria-activedescendant]=\"!this.collapsed ? this.focusedItem?.id : null\"\n            (blur)=\"onBlur()\"\n            />\n        <ng-container ngProjectAs=\"igx-suffix\">\n                <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n            </ng-container>\n        <igx-suffix>\n            <ng-container *ngIf=\"toggleIconTemplate\">\n                <ng-container *ngTemplateOutlet=\"toggleIconTemplate; context: {$implicit: this.collapsed}\"></ng-container>\n                </ng-container>\n            <igx-icon *ngIf=\"!toggleIconTemplate\" fontSet=\"material\">{{ collapsed ? 'arrow_drop_down' : 'arrow_drop_up'}}</igx-icon>\n        </igx-suffix>\n    </igx-input-group>\n    <div class=\"igx-drop-down__list--select\" igxToggle [style.maxHeight]=\"maxHeight\"\n        (onOpening)=\"onToggleOpening($event)\" (onOpened)=\"onToggleOpened()\"\n        (onClosing)=\"onToggleClosing($event)\" (onClosed)=\"onToggleClosed()\"\n        [attr.id]=\"this.listId\" role=\"listbox\">\n        <ng-content select=\"igx-select-item, igx-select-item-group\">\n        </ng-content>\n    </div>\n",
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: IgxSelectComponent, multi: true },
                    { provide: IGX_DROPDOWN_BASE, useExisting: IgxSelectComponent }
                ],
                styles: [`
        :host {
            display: block;
        }
    `]
            }] }
];
/** @nocollapse */
IgxSelectComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: IgxSelectionAPIService }
];
IgxSelectComponent.propDecorators = {
    inputGroup: [{ type: ViewChild, args: ['inputGroup', { read: IgxInputGroupComponent },] }],
    input: [{ type: ViewChild, args: ['input', { read: IgxInputDirective },] }],
    children: [{ type: ContentChildren, args: [forwardRef(() => IgxSelectItemComponent), { descendants: true },] }],
    label: [{ type: ContentChild, args: [forwardRef(() => IgxLabelDirective),] }],
    value: [{ type: Input }],
    placeholder: [{ type: Input }],
    disabled: [{ type: Input }],
    overlaySettings: [{ type: Input }],
    maxHeight: [{ type: HostBinding, args: ['style.maxHeight',] }],
    type: [{ type: Input }],
    displayDensity: [{ type: Input }],
    toggleIconTemplate: [{ type: ContentChild, args: [IgxSelectToggleIconDirective, { read: TemplateRef },] }]
};
if (false) {
    /**
     * @hidden \@internal do not use the drop-down container class
     * @type {?}
     */
    IgxSelectComponent.prototype.cssClass;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxSelectComponent.prototype.inputGroup;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxSelectComponent.prototype.input;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxSelectComponent.prototype.children;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxSelectComponent.prototype.label;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxSelectComponent.prototype.allowItemsFocus;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxSelectComponent.prototype.height;
    /**
     * @type {?}
     * @private
     */
    IgxSelectComponent.prototype._overlayDefaults;
    /**
     * @type {?}
     * @private
     */
    IgxSelectComponent.prototype._value;
    /**
     * An \@Input property that sets input placeholder.
     *
     * @type {?}
     */
    IgxSelectComponent.prototype.placeholder;
    /**
     * An \@Input property that disables the `IgxSelectComponent`.
     * ```html
     * <igx-select [disabled]="'true'"></igx-select>
     * ```
     * @type {?}
     */
    IgxSelectComponent.prototype.disabled;
    /**
     * An \@Input property that sets custom OverlaySettings `IgxSelectComponent`.
     * ```html
     * <igx-select [overlaySettings] = "customOverlaySettings"></igx-select>
     * ```
     * @type {?}
     */
    IgxSelectComponent.prototype.overlaySettings;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxSelectComponent.prototype.maxHeight;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxSelectComponent.prototype.width;
    /**
     * An \@Input property that sets how the select will be styled.
     * The allowed values are `line`, `box` and `border`. The default is `line`.
     * ```html
     * <igx-select [type]="'box'"></igx-select>
     * ```
     * @type {?}
     */
    IgxSelectComponent.prototype.type;
    /**
     * An \@Input property that sets what display density to be used for the input group.
     * The allowed values are `compact`, `cosy` and `comfortable`. The default is `comfortable`.
     * ```html
     * <igx-select [displayDensity]="'compact'"></igx-select>
     * ```
     * @type {?}
     */
    IgxSelectComponent.prototype.displayDensity;
    /**
     * The custom template, if any, that should be used when rendering the select TOGGLE(open/close) button
     *
     * ```typescript
     * // Set in typescript
     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
     * myComponent.select.toggleIconTemplate = myCustomTemplate;
     * ```
     * ```html
     * <!-- Set in markup -->
     *  <igx-select #select>
     *      ...
     *      <ng-template igxSelectToggleIcon let-collapsed>
     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>
     *      </ng-template>
     *  </igx-select>
     * ```
     * @type {?}
     */
    IgxSelectComponent.prototype.toggleIconTemplate;
    /**
     * @hidden \@internal
     * @type {?}
     * @private
     */
    IgxSelectComponent.prototype._onChangeCallback;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxSelectComponent.prototype.writeValue;
    /**
     * @type {?}
     * @protected
     */
    IgxSelectComponent.prototype.elementRef;
    /**
     * @type {?}
     * @protected
     */
    IgxSelectComponent.prototype.cdr;
    /**
     * @type {?}
     * @protected
     */
    IgxSelectComponent.prototype.selection;
}
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,