/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { IGX_DROPDOWN_BASE } from './drop-down.common';
import { Input, HostBinding, HostListener, ElementRef, Optional, Inject } from '@angular/core';
import { IgxSelectionAPIService } from '../core/selection';
import { DeprecateProperty, showMessage } from '../core/deprecateDecorators';
import { IgxDropDownGroupComponent } from './drop-down-group.component';
/** @type {?} */
let NEXT_ID = 0;
/** @type {?} */
let warningShown = false;
/**
 * An abstract class defining a drop-down item:
 * With properties / styles for selection, highlight, height
 * Bindable property for passing data (`value: any`)
 * Parent component (has to be used under a parent with type `IDropDownBase`)
 * Method for handling click on Host()
 * @abstract
 */
export class IgxDropDownItemBase {
    /**
     * @param {?} dropDown
     * @param {?} elementRef
     * @param {?} group
     * @param {?=} selection
     */
    constructor(dropDown, elementRef, group, selection) {
        this.dropDown = dropDown;
        this.elementRef = elementRef;
        this.group = group;
        this.selection = selection;
        /**
         * @hidden
         */
        this._focused = false;
        this._selected = false;
        this._index = null;
        this._disabled = false;
        /**
         * Sets/gets the `id` of the item.
         * ```html
         * <igx-drop-down-item [id] = 'igx-drop-down-item-0'></igx-drop-down-item>
         * ```
         * ```typescript
         * let itemId =  this.item.id;
         * ```
         * \@memberof IgxSelectItemComponent
         */
        this.id = `igx-drop-down-item-${NEXT_ID++}`;
        /**
         * Gets/sets the `role` attribute of the item. Default is 'option'.
         *
         * ```html
         *  <igx-drop-down-item [role]="customRole"></igx-drop-down-item>
         * ```
         */
        this.role = 'option';
    }
    /**
     * @protected
     * @return {?}
     */
    get hasIndex() {
        return this._index !== null && this._index !== undefined;
    }
    /**
     * @hidden \@internal
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    get itemID() {
        return (/** @type {?} */ (this));
    }
    /**
     * The data index of the dropdown item.
     *
     * ```typescript
     * // get the data index of the selected dropdown item
     * let selectedItemIndex = this.dropdown.selectedItem.index
     * ```
     * @return {?}
     */
    get index() {
        if (this._index === null) {
            warningShown = showMessage('IgxDropDownItemBase: Automatic index is deprecated.' +
                'Bind in the template instead using `<igx-drop-down-item [index]="i"` instead.`', warningShown);
            return this.itemIndex;
        }
        return this._index;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set index(value) {
        this._index = value;
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    get itemStyle() {
        return !this.isHeader;
    }
    /**
     * Sets/Gets if the item is the currently selected one in the dropdown
     *
     * ```typescript
     *  let mySelectedItem = this.dropdown.selectedItem;
     *  let isMyItemSelected = mySelectedItem.selected; // true
     * ```
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selected(value) {
        if (this.isHeader) {
            return;
        }
        this._selected = value;
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    get isSelected() {
        return this.selected;
    }
    /**
     * @hidden \@internal
     * @param {?} value
     * @return {?}
     */
    set isSelected(value) {
        this.selected = value;
    }
    /**
     * Sets/gets if the given item is focused
     * ```typescript
     *  let mySelectedItem = this.dropdown.selectedItem;
     *  let isMyItemFocused = mySelectedItem.focused;
     * ```
     * @return {?}
     */
    get focused() {
        return (!this.isHeader && !this.disabled) && this._focused;
    }
    /**
     * ```html
     *  <igx-drop-down-item *ngFor="let item of items" focused={{!item.focused}}>
     *      <div>
     *          {{item.field}}
     *      </div>
     *  </igx-drop-down-item>
     * ```
     * @param {?} value
     * @return {?}
     */
    set focused(value) {
        this._focused = value;
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    get isFocused() {
        return this.focused;
    }
    /**
     * @hidden \@internal
     * @param {?} value
     * @return {?}
     */
    set isFocused(value) {
        this.focused = value;
    }
    /**
     * Sets/gets if the given item is disabled
     *
     * ```typescript
     *  // get
     *  let mySelectedItem = this.dropdown.selectedItem;
     *  let myItemIsDisabled = mySelectedItem.disabled;
     * ```
     *
     * ```html
     *  <igx-drop-down-item *ngFor="let item of items" disabled={{!item.disabled}}>
     *      <div>
     *          {{item.field}}
     *      </div>
     *  </igx-drop-down-item>
     * ```
     * **NOTE:** Drop-down items inside of a disabled `IgxDropDownGroup` will always count as disabled
     * @return {?}
     */
    get disabled() {
        return this.group ? this.group.disabled || this._disabled : this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = value;
    }
    /**
     * Gets item index
     * @hidden \@internal
     * @return {?}
     */
    get itemIndex() {
        return this.dropDown.items.indexOf(this);
    }
    /**
     * Gets item element height
     * @hidden \@internal
     * @return {?}
     */
    get elementHeight() {
        return this.elementRef.nativeElement.clientHeight;
    }
    /**
     * Get item html element
     * @hidden \@internal
     * @return {?}
     */
    get element() {
        return this.elementRef;
    }
    /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    clicked(event) {
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this._selected) {
            /** @type {?} */
            const dropDownSelectedItem = this.dropDown.selectedItem;
            if (!dropDownSelectedItem) {
                this.dropDown.selectItem(this);
            }
            else if (this.hasIndex
                ? this._index !== dropDownSelectedItem.index || this.value !== dropDownSelectedItem.value :
                this !== dropDownSelectedItem) {
                this.dropDown.selectItem(this);
            }
        }
    }
}
/** @nocollapse */
IgxDropDownItemBase.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [IGX_DROPDOWN_BASE,] }] },
    { type: ElementRef },
    { type: IgxDropDownGroupComponent, decorators: [{ type: Optional }] },
    { type: IgxSelectionAPIService, decorators: [{ type: Optional }, { type: Inject, args: [IgxSelectionAPIService,] }] }
];
IgxDropDownItemBase.propDecorators = {
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    index: [{ type: Input }],
    value: [{ type: Input }],
    itemStyle: [{ type: HostBinding, args: ['class.igx-drop-down__item',] }],
    selected: [{ type: Input }, { type: HostBinding, args: ['attr.aria-selected',] }, { type: HostBinding, args: ['class.igx-drop-down__item--selected',] }],
    isSelected: [{ type: Input }],
    focused: [{ type: HostBinding, args: ['class.igx-drop-down__item--focused',] }],
    isHeader: [{ type: Input }, { type: HostBinding, args: ['class.igx-drop-down__header',] }],
    disabled: [{ type: Input }, { type: HostBinding, args: ['attr.aria-disabled',] }, { type: HostBinding, args: ['class.igx-drop-down__item--disabled',] }],
    role: [{ type: Input }, { type: HostBinding, args: ['attr.role',] }],
    clicked: [{ type: HostListener, args: ['click', ['$event'],] }]
};
tslib_1.__decorate([
    DeprecateProperty(`IgxDropDownItemBase \`isSelected\` property is deprecated.\n` +
        `Use \`selected\` instead.`),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxDropDownItemBase.prototype, "isSelected", null);
tslib_1.__decorate([
    DeprecateProperty(`IgxDropDownItemBase \`isFocused\` property is depracated.\n` +
        `Use \`focused\` instead.`),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxDropDownItemBase.prototype, "isFocused", null);
if (false) {
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxDropDownItemBase.prototype._focused;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownItemBase.prototype._selected;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownItemBase.prototype._index;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownItemBase.prototype._disabled;
    /**
     * Sets/gets the `id` of the item.
     * ```html
     * <igx-drop-down-item [id] = 'igx-drop-down-item-0'></igx-drop-down-item>
     * ```
     * ```typescript
     * let itemId =  this.item.id;
     * ```
     * \@memberof IgxSelectItemComponent
     * @type {?}
     */
    IgxDropDownItemBase.prototype.id;
    /**
     * Gets/sets the value of the item if the item is databound
     *
     * ```typescript
     * // usage in IgxDropDownItemComponent
     * // get
     * let mySelectedItemValue = this.dropdown.selectedItem.value;
     *
     * // set
     * let mySelectedItem = this.dropdown.selectedItem;
     * mySelectedItem.value = { id: 123, name: 'Example Name' }
     *
     * // usage in IgxComboItemComponent
     * // get
     * let myComboItemValue = this.combo.items[0].value;
     * ```
     * @type {?}
     */
    IgxDropDownItemBase.prototype.value;
    /**
     * Sets/gets if the given item is header
     * ```typescript
     *  // get
     *  let mySelectedItem = this.dropdown.selectedItem;
     *  let isMyItemHeader = mySelectedItem.isHeader;
     * ```
     *
     * ```html
     *  <!--set-->
     *  <igx-dropdown-item *ngFor="let item of items">
     *      <div *ngIf="items.indexOf(item) === 5; then item.isHeader = true">
     *          {{item.field}}
     *           </div>
     *  </igx-drop-down-item>
     * ```
     * @type {?}
     */
    IgxDropDownItemBase.prototype.isHeader;
    /**
     * Gets/sets the `role` attribute of the item. Default is 'option'.
     *
     * ```html
     *  <igx-drop-down-item [role]="customRole"></igx-drop-down-item>
     * ```
     * @type {?}
     */
    IgxDropDownItemBase.prototype.role;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownItemBase.prototype.dropDown;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownItemBase.prototype.elementRef;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownItemBase.prototype.group;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownItemBase.prototype.selection;
}
//# sourceMappingURL=data:application/json;base64,