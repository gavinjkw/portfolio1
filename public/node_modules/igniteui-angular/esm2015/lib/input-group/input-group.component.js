/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { Component, ContentChild, ContentChildren, ElementRef, HostBinding, HostListener, Input, NgModule, QueryList, Inject, Optional } from '@angular/core';
import { IgxHintDirective } from '../directives/hint/hint.directive';
import { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';
import { IgxLabelDirective } from '../directives/label/label.directive';
import { IgxPrefixDirective, IgxPrefixModule } from '../directives/prefix/prefix.directive';
import { IgxSuffixDirective, IgxSuffixModule } from '../directives/suffix/suffix.directive';
import { DisplayDensity, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';
import { IgxInputGroupBase } from './input-group.common';
/** @type {?} */
let NEXT_ID = 0;
/** @enum {number} */
const IgxInputGroupType = {
    LINE: 0,
    BOX: 1,
    BORDER: 2,
    SEARCH: 3,
};
IgxInputGroupType[IgxInputGroupType.LINE] = 'LINE';
IgxInputGroupType[IgxInputGroupType.BOX] = 'BOX';
IgxInputGroupType[IgxInputGroupType.BORDER] = 'BORDER';
IgxInputGroupType[IgxInputGroupType.SEARCH] = 'SEARCH';
export class IgxInputGroupComponent extends DisplayDensityBase {
    /**
     * @param {?} _element
     * @param {?} _displayDensityOptions
     */
    constructor(_element, _displayDensityOptions) {
        super(_displayDensityOptions);
        this._element = _element;
        this._displayDensityOptions = _displayDensityOptions;
        this._type = IgxInputGroupType.LINE;
        this._filled = false;
        this._supressInputAutofocus = false;
        /**
         * An \@Input property that sets the value of `id` attribute. If not provided it will be automatically generated.
         * ```html
         * <igx-input-group [id]="'igx-input-group-55'"></igx-input-group>
         * ```
         */
        this.id = `igx-input-group-${NEXT_ID++}`;
        /**
         * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.
         * By default applied the class is applied.
         * ```typescript
         * \@ViewChild("MyInputGroup")
         * public inputGroup: IgxInputGroupComponent;
         * ngAfterViewInit(){
         * this.inputGroup.defaultClass = false;
         * ```
         * }
         */
        this.defaultClass = true;
        /**
         * @hidden
         */
        this.hasPlaceholder = false;
        /**
         * @hidden
         */
        this.isRequired = false;
        /**
         * @hidden
         */
        this.isFocused = false;
        /**
         * @hidden
         */
        this.isBox = false;
        /**
         * @hidden
         */
        this.isBorder = false;
        /**
         * @hidden
         */
        this.isSearch = false;
        /**
         * An \@Input property that disables the `IgxInputGroupComponent`.
         * ```html
         * <igx-input-group [disabled]="'true'"></igx-input-group>
         * ```
         */
        this.disabled = false;
        /**
         * @hidden
         */
        this.hasWarning = false;
        this.element = _element;
    }
    /**
     * @hidden
     * @return {?}
     */
    get validClass() {
        return this.input.valid === IgxInputState.VALID;
    }
    /**
     * @hidden
     * @return {?}
     */
    get invalidClass() {
        return this.input.valid === IgxInputState.INVALID;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (!this._supressInputAutofocus) {
            this.input.focus();
        }
    }
    /**
     * An \@Input property that sets how the input will be styled.
     * The allowed values are `line`, `box`, `border` and `search`. The default is `line`.
     * ```html
     * <igx-input-group [type]="'search'">
     * ```
     * @param {?} value
     * @return {?}
     */
    set type(value) {
        /** @type {?} */
        const type = ((/** @type {?} */ (IgxInputGroupType)))[value.toUpperCase()];
        if (type !== undefined) {
            this.isBox = this.isBorder = this.isSearch = false;
            switch (type) {
                case IgxInputGroupType.BOX:
                    this.isBox = true;
                    break;
                case IgxInputGroupType.BORDER:
                    this.isBorder = true;
                    break;
                case IgxInputGroupType.SEARCH:
                    this.isSearch = true;
                    break;
                default: break;
            }
            this._type = type;
        }
    }
    /**
     * Returns whether the input element of the input group will be automatically focused on click.
     * ```typescript
     * let supressInputAutofocus = this.inputGroup.supressInputAutofocus;
     * ```
     * @return {?}
     */
    get supressInputAutofocus() {
        return this._supressInputAutofocus;
    }
    /**
     * Sets whether the input element of the input group will be automatically focused on click.
     * ```html
     * <igx-input-group [supressInputAutofocus]="true"></igx-input-group>
     * ```
     * @param {?} value
     * @return {?}
     */
    set supressInputAutofocus(value) {
        this._supressInputAutofocus = value;
    }
    /**
     * @hidden
     * @return {?}
     */
    get isFilled() {
        return this._filled || (this.input && this.input.value);
    }
    /**
     * @hidden
     * @return {?}
     */
    get isDisplayDensityCosy() {
        return this.displayDensity === DisplayDensity.cosy;
    }
    /**
     * @hidden
     * @return {?}
     */
    get isDisplayDensityComfortable() {
        return this.displayDensity === DisplayDensity.comfortable;
    }
    /**
     * @hidden
     * @return {?}
     */
    get isDisplayDensityCompact() {
        return this.displayDensity === DisplayDensity.compact;
    }
    /**
     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.
     * Values are `line` - 0, `box` - 1, `border` - 2  and `search` - 3. The default is `line`.
     * ```typescript
     * \@ViewChild("MyInputGroup")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let inputType = this.inputGroup.type;
     * }
     * ```
     * @return {?}
     */
    get type() {
        return this._type.toString();
    }
    /**
     * Returns whether the `IgxInputGroupComponent` has hints.
     * ```typescript
     * \@ViewChild("MyInputGroup")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let inputHints = this.inputGroup.hasHints;
     * }
     * ```
     * @return {?}
     */
    get hasHints() {
        return this.hints.length > 0;
    }
    /**
     * Returns whether the `IgxInputGroupComponent` has border.
     * ```typescript
     * \@ViewChild("MyInputGroup")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let inputBroder = this.inputGroup.hasBorder;
     * }
     * ```
     * @return {?}
     */
    get hasBorder() {
        return this._type === IgxInputGroupType.LINE ||
            this._type === IgxInputGroupType.BOX;
    }
    /**
     * Returns whether the `IgxInputGroupComponent` type is line.
     * ```typescript
     * \@ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeLine = this.inputGroup.isTypeLine;
     * }
     * ```
     * @return {?}
     */
    get isTypeLine() {
        return this._type === IgxInputGroupType.LINE;
    }
    /**
     * Returns whether the `IgxInputGroupComponent` type is box.
     * ```typescript
     * \@ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeBox = this.inputGroup.isTypeBox;
     * }
     * ```
     * @return {?}
     */
    get isTypeBox() {
        return this._type === IgxInputGroupType.BOX;
    }
    /**
     * Returns whether the `IgxInputGroupComponent` type is border.
     * ```typescript
     * \@ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeBorder = this.inputGroup.isTypeBorder;
     * }
     * ```
     * @return {?}
     */
    get isTypeBorder() {
        return this._type === IgxInputGroupType.BORDER;
    }
    /**
     * Returns whether the `IgxInputGroupComponent` type is search.
     * ```typescript
     * \@ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeSearch = this.inputGroup.isTypeSearch;
     * }
     * ```
     * @return {?}
     */
    get isTypeSearch() {
        return this._type === IgxInputGroupType.SEARCH;
    }
    /**
     * @return {?}
     */
    get filled() {
        return this._filled;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set filled(val) {
        this._filled = val;
    }
}
IgxInputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-input-group',
                template: "<div class=\"igx-input-group__wrapper\" *ngIf=\"isTypeBox; else bundle\">\n    <ng-container *ngTemplateOutlet=\"bundle\"></ng-container>\n</div>\n<div class=\"igx-input-group__hint\">\n    <ng-content select=\"igx-hint,[igxHint]\"></ng-content>\n</div>\n<ng-template #bundle>\n    <div class=\"igx-input-group__bundle\">\n        <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n        <div class=\"igx-input-group__bundle-main\">\n            <ng-content select=\"[igxLabel]\"></ng-content>\n            <ng-content select=\"[igxInput]\"></ng-content>\n        </div>\n        <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n    </div>\n    <div class=\"igx-input-group__border\" *ngIf=\"hasBorder\"></div>\n</ng-template>\n",
                providers: [{ provide: IgxInputGroupBase, useExisting: IgxInputGroupComponent }]
            }] }
];
/** @nocollapse */
IgxInputGroupComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
IgxInputGroupComponent.propDecorators = {
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    defaultClass: [{ type: HostBinding, args: ['class.igx-input-group',] }],
    hasPlaceholder: [{ type: HostBinding, args: ['class.igx-input-group--placeholder',] }],
    isRequired: [{ type: HostBinding, args: ['class.igx-input-group--required',] }],
    isFocused: [{ type: HostBinding, args: ['class.igx-input-group--focused',] }],
    isBox: [{ type: HostBinding, args: ['class.igx-input-group--box',] }],
    isBorder: [{ type: HostBinding, args: ['class.igx-input-group--border',] }],
    isSearch: [{ type: HostBinding, args: ['class.igx-input-group--search',] }],
    disabled: [{ type: HostBinding, args: ['class.igx-input-group--disabled',] }, { type: Input }],
    validClass: [{ type: HostBinding, args: ['class.igx-input-group--valid',] }],
    invalidClass: [{ type: HostBinding, args: ['class.igx-input-group--invalid',] }],
    hasWarning: [{ type: HostBinding, args: ['class.igx-input-group--warning',] }],
    hints: [{ type: ContentChildren, args: [IgxHintDirective, { read: IgxHintDirective },] }],
    input: [{ type: ContentChild, args: [IgxInputDirective, { read: IgxInputDirective },] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    type: [{ type: Input, args: ['type',] }],
    supressInputAutofocus: [{ type: Input }],
    isFilled: [{ type: HostBinding, args: ['class.igx-input-group--filled',] }],
    isDisplayDensityCosy: [{ type: HostBinding, args: ['class.igx-input-group--cosy',] }],
    isDisplayDensityComfortable: [{ type: HostBinding, args: ['class.igx-input-group--comfortable',] }],
    isDisplayDensityCompact: [{ type: HostBinding, args: ['class.igx-input-group--compact',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxInputGroupComponent.prototype._type;
    /**
     * @type {?}
     * @private
     */
    IgxInputGroupComponent.prototype._filled;
    /**
     * @type {?}
     * @private
     */
    IgxInputGroupComponent.prototype._supressInputAutofocus;
    /**
     * An ElementRef property of the `IgxInputGroupComponent`.
     * @type {?}
     */
    IgxInputGroupComponent.prototype.element;
    /**
     * An \@Input property that sets the value of `id` attribute. If not provided it will be automatically generated.
     * ```html
     * <igx-input-group [id]="'igx-input-group-55'"></igx-input-group>
     * ```
     * @type {?}
     */
    IgxInputGroupComponent.prototype.id;
    /**
     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.
     * By default applied the class is applied.
     * ```typescript
     * \@ViewChild("MyInputGroup")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     * this.inputGroup.defaultClass = false;
     * ```
     * }
     * @type {?}
     */
    IgxInputGroupComponent.prototype.defaultClass;
    /**
     * @hidden
     * @type {?}
     */
    IgxInputGroupComponent.prototype.hasPlaceholder;
    /**
     * @hidden
     * @type {?}
     */
    IgxInputGroupComponent.prototype.isRequired;
    /**
     * @hidden
     * @type {?}
     */
    IgxInputGroupComponent.prototype.isFocused;
    /**
     * @hidden
     * @type {?}
     */
    IgxInputGroupComponent.prototype.isBox;
    /**
     * @hidden
     * @type {?}
     */
    IgxInputGroupComponent.prototype.isBorder;
    /**
     * @hidden
     * @type {?}
     */
    IgxInputGroupComponent.prototype.isSearch;
    /**
     * An \@Input property that disables the `IgxInputGroupComponent`.
     * ```html
     * <igx-input-group [disabled]="'true'"></igx-input-group>
     * ```
     * @type {?}
     */
    IgxInputGroupComponent.prototype.disabled;
    /**
     * @hidden
     * @type {?}
     */
    IgxInputGroupComponent.prototype.hasWarning;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxInputGroupComponent.prototype.hints;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxInputGroupComponent.prototype.input;
    /**
     * @type {?}
     * @private
     */
    IgxInputGroupComponent.prototype._element;
    /**
     * @type {?}
     * @private
     */
    IgxInputGroupComponent.prototype._displayDensityOptions;
}
/**
 * @hidden
 */
export class IgxInputGroupModule {
}
IgxInputGroupModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxInputGroupComponent, IgxHintDirective, IgxInputDirective, IgxLabelDirective],
                exports: [IgxInputGroupComponent, IgxHintDirective, IgxInputDirective, IgxLabelDirective, IgxPrefixDirective, IgxSuffixDirective],
                imports: [CommonModule, IgxPrefixModule, IgxSuffixModule]
            },] }
];
//# sourceMappingURL=data:application/json;base64,